<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/584717ed8d095bc878cedd75e2786fcc?s=50"></div><header><strong>Allow protocol vars to match derived types</strong> from <string>Mark Anders</string> &lt;mark at markanders.net&gt;<p>March  7, 2016 at 08:00:00am</p></header><div class="content"><p>Consider the following (you can paste it in a Playground to see the error):<br></p><p>class Node { }<br></p><p>class Containable : Node{}<br></p><p><br>protocol Refers {<br></p><p>    var to : Node {get}<br></p><p>}<br></p><p><br>class Link : Refers {<br></p><p>    var to : Node<br></p><p>    init(n : Node) {<br></p><p>        to = n<br></p><p>    }<br></p><p>}<br></p><p><br>class Contains : Refers {<br></p><p>    var to : Containable<br></p><p>    init(c : Containable) {<br></p><p>        to = c<br></p><p>    }<br></p><p>}<br></p><p>This currently does not work because it seems that to adopt a protocol, the<br>type of protocol var must match exactly.<br></p><p>It would be great if objects could be said to adopt a protocol if the type<br>of the var is the type or a derived type.<br>This would allow me to treat the structure in a type safe way (i.e. only a<br>Containable can have a Contains relationship),<br>while me to have a set of Refers and iterate through each Node.<br></p><p>Is there a reason why the type must match exactly?  Or could protocols be<br>enhanced to to allow matching<br>derived types, similar to assignment and func parameter rules?<br></p><p><br>Mark<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160307/b2128cff/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>Allow protocol vars to match derived types</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>March  8, 2016 at 09:00:00am</p></header><div class="content"><p>Looks like a compiler bug to me.<br></p><p>On Tuesday, 8 March 2016, Mark Anders via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Consider the following (you can paste it in a Playground to see the error):<br>&gt;<br>&gt; class Node { }<br>&gt;<br>&gt; class Containable : Node{}<br>&gt;<br>&gt;<br>&gt; protocol Refers {<br>&gt;<br>&gt;     var to : Node {get}<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; class Link : Refers {<br>&gt;<br>&gt;     var to : Node<br>&gt;<br>&gt;     init(n : Node) {<br>&gt;<br>&gt;         to = n<br>&gt;<br>&gt;     }<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; class Contains : Refers {<br>&gt;<br>&gt;     var to : Containable<br>&gt;<br>&gt;     init(c : Containable) {<br>&gt;<br>&gt;         to = c<br>&gt;<br>&gt;     }<br>&gt;<br>&gt; }<br>&gt;<br>&gt; This currently does not work because it seems that to adopt a protocol,<br>&gt; the type of protocol var must match exactly.<br>&gt;<br>&gt; It would be great if objects could be said to adopt a protocol if the type<br>&gt; of the var is the type or a derived type.<br>&gt; This would allow me to treat the structure in a type safe way (i.e. only a<br>&gt; Containable can have a Contains relationship),<br>&gt; while me to have a set of Refers and iterate through each Node.<br>&gt;<br>&gt; Is there a reason why the type must match exactly?  Or could protocols be<br>&gt; enhanced to to allow matching<br>&gt; derived types, similar to assignment and func parameter rules?<br>&gt;<br>&gt;<br>&gt; Mark<br>&gt;<br></p><p><br>-- <br>-- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160308/b4f0cc74/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/584717ed8d095bc878cedd75e2786fcc?s=50"></div><header><strong>Allow protocol vars to match derived types</strong> from <string>Mark Anders</string> &lt;mark at markanders.net&gt;<p>March  7, 2016 at 04:00:00pm</p></header><div class="content"><p>So it seems like you would expect it to work as I thought it should. However, from reading the language reference <br>there is no mention of whether derived types are conforming types and there are no examples shown that demonstrate this either.<br></p><p>Can someone who knows verify whether this is a bug, or an oversight or as designed?<br></p><p>The workaround for me is to move everything in the base class which neuters the type system somewhat.<br></p><p>Mark<br></p><p>On March 7, 2016 at 3:53:37 PM, Howard Lovatt (howard.lovatt at gmail.com) wrote:<br></p><p>Looks like a compiler bug to me. <br></p><p>On Tuesday, 8 March 2016, Mark Anders via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>Consider the following (you can paste it in a Playground to see the error):<br></p><p>class Node { }<br>class Containable : Node{}<br></p><p><br>protocol Refers {<br>    var to : Node {get}<br>}<br></p><p><br>class Link : Refers {<br>    var to : Node<br>    init(n : Node) {<br>        to = n<br>    }<br>}<br></p><p><br>class Contains : Refers {<br>    var to : Containable<br>    init(c : Containable) {<br>        to = c<br>    }<br>}<br></p><p>This currently does not work because it seems that to adopt a protocol, the type of protocol var must match exactly.<br></p><p>It would be great if objects could be said to adopt a protocol if the type of the var is the type or a derived type.  <br>This would allow me to treat the structure in a type safe way (i.e. only a Containable can have a Contains relationship), <br>while me to have a set of Refers and iterate through each Node.<br></p><p>Is there a reason why the type must match exactly?  Or could protocols be enhanced to to allow matching<br>derived types, similar to assignment and func parameter rules?  <br></p><p><br>Mark<br></p><p><br>--<br>-- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160307/9d51067f/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Allow protocol vars to match derived types</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March  7, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Mar 7, 2016, at 8:12 AM, Mark Anders via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Consider the following (you can paste it in a Playground to see the error):<br>&gt; <br>&gt; class Node { }<br>&gt; class Containable : Node{}<br>&gt; <br>&gt; protocol Refers {<br>&gt;     var to : Node {get}<br>&gt; }<br>&gt; <br>&gt; class Link : Refers {<br>&gt;     var to : Node<br>&gt;     init(n : Node) {<br>&gt;         to = n<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; class Contains : Refers {<br>&gt;     var to : Containable<br>&gt;     init(c : Containable) {<br>&gt;         to = c<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; This currently does not work because it seems that to adopt a protocol, the type of protocol var must match exactly.<br>&gt; <br>&gt; It would be great if objects could be said to adopt a protocol if the type of the var is the type or a derived type.  <br>&gt; This would allow me to treat the structure in a type safe way (i.e. only a Containable can have a Contains relationship), <br>&gt; while me to have a set of Refers and iterate through each Node.<br>&gt; <br>&gt; Is there a reason why the type must match exactly?  Or could protocols be enhanced to to allow matching<br>&gt; derived types, similar to assignment and func parameter rules?  <br></p><p>No fundamental reason, this just isn&#39;t something we&#39;ve had time to implement. It should be straightforward to support.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160307/ffd1afe1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Allow protocol vars to match derived types</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>March  8, 2016 at 08:00:00am</p></header><div class="content"><p>If it’s an obvious omission, is it better to have it as a bug than a formal proposal?<br></p><p>&gt; On 08 Mar 2016, at 00:16, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Mar 7, 2016, at 8:12 AM, Mark Anders via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Consider the following (you can paste it in a Playground to see the error):<br>&gt;&gt; <br>&gt;&gt; class Node { }<br>&gt;&gt; class Containable : Node{}<br>&gt;&gt; <br>&gt;&gt; protocol Refers {<br>&gt;&gt;     var to : Node {get}<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; class Link : Refers {<br>&gt;&gt;     var to : Node<br>&gt;&gt;     init(n : Node) {<br>&gt;&gt;         to = n<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; class Contains : Refers {<br>&gt;&gt;     var to : Containable<br>&gt;&gt;     init(c : Containable) {<br>&gt;&gt;         to = c<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; This currently does not work because it seems that to adopt a protocol, the type of protocol var must match exactly.<br>&gt;&gt; <br>&gt;&gt; It would be great if objects could be said to adopt a protocol if the type of the var is the type or a derived type.  <br>&gt;&gt; This would allow me to treat the structure in a type safe way (i.e. only a Containable can have a Contains relationship), <br>&gt;&gt; while me to have a set of Refers and iterate through each Node.<br>&gt;&gt; <br>&gt;&gt; Is there a reason why the type must match exactly?  Or could protocols be enhanced to to allow matching<br>&gt;&gt; derived types, similar to assignment and func parameter rules?  <br>&gt; <br>&gt; No fundamental reason, this just isn&#39;t something we&#39;ve had time to implement. It should be straightforward to support.<br>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160308/0559d3c1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/569ed436467cf145f3bbdd0d53fbe115?s=50"></div><header><strong>Allow protocol vars to match derived types</strong> from <string>Slava Pestov</string> &lt;spestov at apple.com&gt;<p>March  8, 2016 at 12:00:00am</p></header><div class="content"><p>I would suggest a formal proposal because its a bit involved I think. It should ideally match the subtyping rules, so<br></p><p>- A matches B if A is a subclass of B<br>- A matches P if A conforms to P<br>- A matches A?<br>- A! matches A? and vice versa<br>- T1 -&gt; U1 matches T2 -&gt; U2 if T2 is a subtype of T1 and U1 is a subtype of U2<br>- some rules for ‘throws’ functions<br></p><p>I think there might be some tricky cases with associated type inference. We should be careful not to break any existing code.<br></p><p>Also a related proposal would be to allow enum cases to witness static method requirements, and methods to witness property requirements of function type and vice versa, but these seem less useful.<br></p><p>Code for matching witnesses is in TypeCheckProtocol.cpp, and override matching is elsewhere (I think Decl.cpp in lib/AST/)? Take a look if you’re curious about what the rules are today.<br></p><p>Slava<br></p><p>&gt; On Mar 7, 2016, at 11:06 PM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; If it’s an obvious omission, is it better to have it as a bug than a formal proposal?<br>&gt; <br>&gt;&gt; On 08 Mar 2016, at 00:16, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Mar 7, 2016, at 8:12 AM, Mark Anders via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Consider the following (you can paste it in a Playground to see the error):<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class Node { }<br>&gt;&gt;&gt; class Containable : Node{}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; protocol Refers {<br>&gt;&gt;&gt;     var to : Node {get}<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class Link : Refers {<br>&gt;&gt;&gt;     var to : Node<br>&gt;&gt;&gt;     init(n : Node) {<br>&gt;&gt;&gt;         to = n<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class Contains : Refers {<br>&gt;&gt;&gt;     var to : Containable<br>&gt;&gt;&gt;     init(c : Containable) {<br>&gt;&gt;&gt;         to = c<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This currently does not work because it seems that to adopt a protocol, the type of protocol var must match exactly.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It would be great if objects could be said to adopt a protocol if the type of the var is the type or a derived type.  <br>&gt;&gt;&gt; This would allow me to treat the structure in a type safe way (i.e. only a Containable can have a Contains relationship), <br>&gt;&gt;&gt; while me to have a set of Refers and iterate through each Node.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is there a reason why the type must match exactly?  Or could protocols be enhanced to to allow matching<br>&gt;&gt;&gt; derived types, similar to assignment and func parameter rules?  <br>&gt;&gt; <br>&gt;&gt; No fundamental reason, this just isn&#39;t something we&#39;ve had time to implement. It should be straightforward to support.<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160308/48bc8a6a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/584717ed8d095bc878cedd75e2786fcc?s=50"></div><header><strong>Allow protocol vars to match derived types</strong> from <string>Mark Anders</string> &lt;mark at markanders.net&gt;<p>March  8, 2016 at 02:00:00pm</p></header><div class="content"><p>Slava/Joe, thanks for clarifying the issue and Slava for providing more depth on what needs to happen. Like David, I was unsure if this was just a bug or an enhancement.<br></p><p>Out of curiosity, you mention some related issues, and I just ran into something similar and wonder if it’s related too.<br></p><p>class A {}<br>class B : A {}<br></p><p>var arrayOfA = [A]()<br>let arrayOfB : [B] = [B()]<br>arrayOfA.appendContentsOf(arrayOfB)<br></p><p>This fails to compile, though doing arrayOfA.append(B()) works as I would expect.<br></p><p>Is it related?  In general, it seems that Swift’s type system is stricter than I would expect.<br></p><p>Do these types of issues seem in-scope for Swift 3?<br></p><p>Mark<br></p><p>On March 8, 2016 at 1:22:13 AM, Slava Pestov via swift-evolution (swift-evolution at swift.org) wrote:<br></p><p>I would suggest a formal proposal because its a bit involved I think. It should ideally match the subtyping rules, so<br></p><p>- A matches B if A is a subclass of B<br>- A matches P if A conforms to P<br>- A matches A?<br>- A! matches A? and vice versa<br>- T1 -&gt; U1 matches T2 -&gt; U2 if T2 is a subtype of T1 and U1 is a subtype of U2<br>- some rules for ‘throws’ functions<br></p><p>I think there might be some tricky cases with associated type inference. We should be careful not to break any existing code.<br></p><p>Also a related proposal would be to allow enum cases to witness static method requirements, and methods to witness property requirements of function type and vice versa, but these seem less useful.<br></p><p>Code for matching witnesses is in TypeCheckProtocol.cpp, and override matching is elsewhere (I think Decl.cpp in lib/AST/)? Take a look if you’re curious about what the rules are today.<br></p><p>Slava<br></p><p>On Mar 7, 2016, at 11:06 PM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>If it’s an obvious omission, is it better to have it as a bug than a formal proposal?<br></p><p>On 08 Mar 2016, at 00:16, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p><br>On Mar 7, 2016, at 8:12 AM, Mark Anders via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>Consider the following (you can paste it in a Playground to see the error):<br></p><p>class Node { }<br>class Containable : Node{}<br></p><p>protocol Refers {<br>    var to : Node {get}<br>}<br></p><p>class Link : Refers {<br>    var to : Node<br>    init(n : Node) {<br>        to = n<br>    }<br>}<br></p><p>class Contains : Refers {<br>    var to : Containable<br>    init(c : Containable) {<br>        to = c<br>    }<br>}<br></p><p>This currently does not work because it seems that to adopt a protocol, the type of protocol var must match exactly.<br></p><p>It would be great if objects could be said to adopt a protocol if the type of the var is the type or a derived type.  <br>This would allow me to treat the structure in a type safe way (i.e. only a Containable can have a Contains relationship), <br>while me to have a set of Refers and iterate through each Node.<br></p><p>Is there a reason why the type must match exactly?  Or could protocols be enhanced to to allow matching<br>derived types, similar to assignment and func parameter rules?  <br></p><p>No fundamental reason, this just isn&#39;t something we&#39;ve had time to implement. It should be straightforward to support.<br></p><p>-Joe<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160308/257e2252/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Allow protocol vars to match derived types</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March  8, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Mar 8, 2016, at 1:15 PM, Mark Anders via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Slava/Joe, thanks for clarifying the issue and Slava for providing more depth on what needs to happen. Like David, I was unsure if this was just a bug or an enhancement.<br>&gt; <br>&gt; Out of curiosity, you mention some related issues, and I just ran into something similar and wonder if it’s related too.<br>&gt; <br>&gt; class A {}<br>&gt; class B : A {}<br>&gt; <br>&gt; var arrayOfA = [A]()<br>&gt; let arrayOfB : [B] = [B()]<br>&gt; arrayOfA.appendContentsOf(arrayOfB)<br>&gt; <br>&gt; This fails to compile, though doing arrayOfA.append(B()) works as I would expect.<br></p><p>This one seems like a plain bug to me, since it should be possible to convert arrayOfB to [A] and hand the [A] off to appendContentsOf.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160308/2b9ef286/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/584717ed8d095bc878cedd75e2786fcc?s=50"></div><header><strong>Allow protocol vars to match derived types</strong> from <string>Mark Anders</string> &lt;mark at markanders.net&gt;<p>March  8, 2016 at 03:00:00pm</p></header><div class="content"><p>Thanks Joe, bug submitted!<br></p><p>Mark<br></p><p>On March 8, 2016 at 2:27:57 PM, Joe Groff (jgroff at apple.com) wrote:<br></p><p><br>On Mar 8, 2016, at 1:15 PM, Mark Anders via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>Slava/Joe, thanks for clarifying the issue and Slava for providing more depth on what needs to happen. Like David, I was unsure if this was just a bug or an enhancement.<br></p><p>Out of curiosity, you mention some related issues, and I just ran into something similar and wonder if it’s related too.<br></p><p>class A {}<br>class B : A {}<br></p><p>var arrayOfA = [A]()<br>let arrayOfB : [B] = [B()]<br>arrayOfA.appendContentsOf(arrayOfB)<br></p><p>This fails to compile, though doing arrayOfA.append(B()) works as I would expect.<br></p><p>This one seems like a plain bug to me, since it should be possible to convert arrayOfB to [A] and hand the [A] off to appendContentsOf.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160308/f337ec0f/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/569ed436467cf145f3bbdd0d53fbe115?s=50"></div><header><strong>Allow protocol vars to match derived types</strong> from <string>Slava Pestov</string> &lt;spestov at apple.com&gt;<p>March  7, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Mar 7, 2016, at 8:12 AM, Mark Anders via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Consider the following (you can paste it in a Playground to see the error):<br>&gt; <br>&gt; class Node { }<br>&gt; class Containable : Node{}<br>&gt; <br>&gt; protocol Refers {<br>&gt;     var to : Node {get}<br>&gt; }<br>&gt; <br>&gt; class Link : Refers {<br>&gt;     var to : Node<br>&gt;     init(n : Node) {<br>&gt;         to = n<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; class Contains : Refers {<br>&gt;     var to : Containable<br>&gt;     init(c : Containable) {<br>&gt;         to = c<br>&gt;     }<br>&gt; }<br></p><p>You can use an associated type for this instead,<br></p><p>protocol Refers {<br>	associatedtype NodeType<br>	var to: NodeType { get }<br>}<br></p><p>I agree that your example should work -- the rules for patching method overrides and protocol witnesses are more stringent than they need to be. There&#39;s an interesting engineering challenge in generalizing the logic and also cleaning it up to share as much code as possible with the subtype matching code in the constraint solver.<br></p><p>Slava<br></p><p>&gt; <br>&gt; This currently does not work because it seems that to adopt a protocol, the type of protocol var must match exactly.<br>&gt; <br>&gt; It would be great if objects could be said to adopt a protocol if the type of the var is the type or a derived type.  <br>&gt; This would allow me to treat the structure in a type safe way (i.e. only a Containable can have a Contains relationship), <br>&gt; while me to have a set of Refers and iterate through each Node.<br>&gt; <br>&gt; Is there a reason why the type must match exactly?  Or could protocols be enhanced to to allow matching<br>&gt; derived types, similar to assignment and func parameter rules?  <br>&gt; <br>&gt; <br>&gt; Mark<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160307/e1cb2cb1/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
