<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>libdispatch module on Linux</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>January 18, 2016 at 05:00:00pm</p></header><div class="content"><p>I’ve create a system module for libdispatch, but when I import it, I don’t see anything guarded by __BLOCKS__.<br></p><p>Is there something I need to do when defining the system module to make that work?<br></p><p>Or something when I use it?<br></p><p>/Daniel<br></p><p><br>% cat Package.swift <br>import PackageDescription<br>let package = Package(name: &quot;CDispatch”)<br></p><p><br>% cat module.modulemap <br>module CDispatch [system] {<br> umbrella header &quot;/usr/local/include/dispatch/dispatch.h&quot;<br> link &quot;dispatch&quot;<br> export *<br>}<br></p><p><br>% uname -a<br>Linux ubuntu 4.2.0-16-generic #19-Ubuntu SMP Thu Oct 8 15:35:06 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux<br></p><p><br></p><p>% swift -I path/to/CDispatch-1.0.2<br>Welcome to Swift version 2.2-dev (LLVM 3ebdbb2c7e, Clang f66c5bb67b, Swift 1f2908b4f7). Type :help for assistance.<br> 1&gt; import CDispatch<br> 2&gt; dispatch_group_<br>Available completions:<br>	dispatch_group_async_f(group: dispatch_group_t, queue: dispatch_queue_t, context: UnsafeMutablePointer&lt;Void&gt;, work: dispatch_function_t(UnsafeMutablePointer&lt;Void&gt;) -&gt; Void) -&gt; Void<br>	dispatch_group_create() -&gt; dispatch_group_t<br>	dispatch_group_enter(group: dispatch_group_t) -&gt; Void<br>	dispatch_group_leave(group: dispatch_group_t) -&gt; Void<br>	dispatch_group_notify_f(group: dispatch_group_t, queue: dispatch_queue_t, context: UnsafeMutablePointer&lt;Void&gt;, work: dispatch_function_t(UnsafeMutablePointer&lt;Void&gt;) -&gt; Void) -&gt; Void<br>	dispatch_group_t<br>	dispatch_group_wait(group: dispatch_group_t, timeout: dispatch_time_t) -&gt; Int<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>libdispatch module on Linux</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>January 18, 2016 at 08:00:00am</p></header><div class="content"><p>I noticed with importing CoreFoundation into swift-corelibs-foundation that we needed to pass  -Xcc -fblocks to switfc to make it import a few things correctly on linux. I wonder if that is the same thing that is happening here too.<br></p><p>&gt; On Jan 18, 2016, at 8:31 AM, Daniel Eggert via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I’ve create a system module for libdispatch, but when I import it, I don’t see anything guarded by __BLOCKS__.<br>&gt; <br>&gt; Is there something I need to do when defining the system module to make that work?<br>&gt; <br>&gt; Or something when I use it?<br>&gt; <br>&gt; /Daniel<br>&gt; <br>&gt; <br>&gt; % cat Package.swift <br>&gt; import PackageDescription<br>&gt; let package = Package(name: &quot;CDispatch”)<br>&gt; <br>&gt; <br>&gt; % cat module.modulemap <br>&gt; module CDispatch [system] {<br>&gt; umbrella header &quot;/usr/local/include/dispatch/dispatch.h&quot;<br>&gt; link &quot;dispatch&quot;<br>&gt; export *<br>&gt; }<br>&gt; <br>&gt; <br>&gt; % uname -a<br>&gt; Linux ubuntu 4.2.0-16-generic #19-Ubuntu SMP Thu Oct 8 15:35:06 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux<br>&gt; <br>&gt; <br>&gt; <br>&gt; % swift -I path/to/CDispatch-1.0.2<br>&gt; Welcome to Swift version 2.2-dev (LLVM 3ebdbb2c7e, Clang f66c5bb67b, Swift 1f2908b4f7). Type :help for assistance.<br>&gt; 1&gt; import CDispatch<br>&gt; 2&gt; dispatch_group_<br>&gt; Available completions:<br>&gt; 	dispatch_group_async_f(group: dispatch_group_t, queue: dispatch_queue_t, context: UnsafeMutablePointer&lt;Void&gt;, work: dispatch_function_t(UnsafeMutablePointer&lt;Void&gt;) -&gt; Void) -&gt; Void<br>&gt; 	dispatch_group_create() -&gt; dispatch_group_t<br>&gt; 	dispatch_group_enter(group: dispatch_group_t) -&gt; Void<br>&gt; 	dispatch_group_leave(group: dispatch_group_t) -&gt; Void<br>&gt; 	dispatch_group_notify_f(group: dispatch_group_t, queue: dispatch_queue_t, context: UnsafeMutablePointer&lt;Void&gt;, work: dispatch_function_t(UnsafeMutablePointer&lt;Void&gt;) -&gt; Void) -&gt; Void<br>&gt; 	dispatch_group_t<br>&gt; 	dispatch_group_wait(group: dispatch_group_t, timeout: dispatch_time_t) -&gt; Int<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0db24e79de1d6e82cf6327b091903b1b?s=50"></div><header><strong>libdispatch module on Linux</strong> from <string>Pierre Habouzit</string> &lt;phabouzit at apple.com&gt;<p>January 18, 2016 at 09:00:00am</p></header><div class="content"><p>this is very likely as __BLOCKS__ is only defined when you pass -fblocks.<br></p><p>though, I’m told the blocks layout from swift and the one from libblocks-runtime-dev is not the same so it will likely crash (because dispatch as I said in another thread, uses that layout to get to the function pointer stored there). but worth trying.<br></p><p>-Pierre<br></p><p>&gt; On Jan 18, 2016, at 8:58 AM, Philippe Hausler via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I noticed with importing CoreFoundation into swift-corelibs-foundation that we needed to pass  -Xcc -fblocks to switfc to make it import a few things correctly on linux. I wonder if that is the same thing that is happening here too.<br>&gt; <br>&gt;&gt; On Jan 18, 2016, at 8:31 AM, Daniel Eggert via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I’ve create a system module for libdispatch, but when I import it, I don’t see anything guarded by __BLOCKS__.<br>&gt;&gt; <br>&gt;&gt; Is there something I need to do when defining the system module to make that work?<br>&gt;&gt; <br>&gt;&gt; Or something when I use it?<br>&gt;&gt; <br>&gt;&gt; /Daniel<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; % cat Package.swift <br>&gt;&gt; import PackageDescription<br>&gt;&gt; let package = Package(name: &quot;CDispatch”)<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; % cat module.modulemap <br>&gt;&gt; module CDispatch [system] {<br>&gt;&gt; umbrella header &quot;/usr/local/include/dispatch/dispatch.h&quot;<br>&gt;&gt; link &quot;dispatch&quot;<br>&gt;&gt; export *<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; % uname -a<br>&gt;&gt; Linux ubuntu 4.2.0-16-generic #19-Ubuntu SMP Thu Oct 8 15:35:06 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; % swift -I path/to/CDispatch-1.0.2<br>&gt;&gt; Welcome to Swift version 2.2-dev (LLVM 3ebdbb2c7e, Clang f66c5bb67b, Swift 1f2908b4f7). Type :help for assistance.<br>&gt;&gt; 1&gt; import CDispatch<br>&gt;&gt; 2&gt; dispatch_group_<br>&gt;&gt; Available completions:<br>&gt;&gt; 	dispatch_group_async_f(group: dispatch_group_t, queue: dispatch_queue_t, context: UnsafeMutablePointer&lt;Void&gt;, work: dispatch_function_t(UnsafeMutablePointer&lt;Void&gt;) -&gt; Void) -&gt; Void<br>&gt;&gt; 	dispatch_group_create() -&gt; dispatch_group_t<br>&gt;&gt; 	dispatch_group_enter(group: dispatch_group_t) -&gt; Void<br>&gt;&gt; 	dispatch_group_leave(group: dispatch_group_t) -&gt; Void<br>&gt;&gt; 	dispatch_group_notify_f(group: dispatch_group_t, queue: dispatch_queue_t, context: UnsafeMutablePointer&lt;Void&gt;, work: dispatch_function_t(UnsafeMutablePointer&lt;Void&gt;) -&gt; Void) -&gt; Void<br>&gt;&gt; 	dispatch_group_t<br>&gt;&gt; 	dispatch_group_wait(group: dispatch_group_t, timeout: dispatch_time_t) -&gt; Int<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>libdispatch module on Linux</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>January 18, 2016 at 07:00:00pm</p></header><div class="content"><p>How would I go about passing ‘-fblocks’ when building a module using ‘swift build’?<br></p><p>Should I file a bug to track this?<br></p><p>/Daniel<br></p><p><br>&gt; On 18 Jan 2016, at 18:00, Pierre Habouzit &lt;phabouzit at apple.com&gt; wrote:<br>&gt; <br>&gt; this is very likely as __BLOCKS__ is only defined when you pass -fblocks.<br>&gt; <br>&gt; though, I’m told the blocks layout from swift and the one from libblocks-runtime-dev is not the same so it will likely crash (because dispatch as I said in another thread, uses that layout to get to the function pointer stored there). but worth trying.<br>&gt; <br>&gt; -Pierre<br>&gt; <br>&gt;&gt; On Jan 18, 2016, at 8:58 AM, Philippe Hausler via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I noticed with importing CoreFoundation into swift-corelibs-foundation that we needed to pass  -Xcc -fblocks to switfc to make it import a few things correctly on linux. I wonder if that is the same thing that is happening here too.<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 18, 2016, at 8:31 AM, Daniel Eggert via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’ve create a system module for libdispatch, but when I import it, I don’t see anything guarded by __BLOCKS__.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is there something I need to do when defining the system module to make that work?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Or something when I use it?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; /Daniel<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; % cat Package.swift <br>&gt;&gt;&gt; import PackageDescription<br>&gt;&gt;&gt; let package = Package(name: &quot;CDispatch”)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; % cat module.modulemap <br>&gt;&gt;&gt; module CDispatch [system] {<br>&gt;&gt;&gt; umbrella header &quot;/usr/local/include/dispatch/dispatch.h&quot;<br>&gt;&gt;&gt; link &quot;dispatch&quot;<br>&gt;&gt;&gt; export *<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; % uname -a<br>&gt;&gt;&gt; Linux ubuntu 4.2.0-16-generic #19-Ubuntu SMP Thu Oct 8 15:35:06 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; % swift -I path/to/CDispatch-1.0.2<br>&gt;&gt;&gt; Welcome to Swift version 2.2-dev (LLVM 3ebdbb2c7e, Clang f66c5bb67b, Swift 1f2908b4f7). Type :help for assistance.<br>&gt;&gt;&gt; 1&gt; import CDispatch<br>&gt;&gt;&gt; 2&gt; dispatch_group_<br>&gt;&gt;&gt; Available completions:<br>&gt;&gt;&gt; 	dispatch_group_async_f(group: dispatch_group_t, queue: dispatch_queue_t, context: UnsafeMutablePointer&lt;Void&gt;, work: dispatch_function_t(UnsafeMutablePointer&lt;Void&gt;) -&gt; Void) -&gt; Void<br>&gt;&gt;&gt; 	dispatch_group_create() -&gt; dispatch_group_t<br>&gt;&gt;&gt; 	dispatch_group_enter(group: dispatch_group_t) -&gt; Void<br>&gt;&gt;&gt; 	dispatch_group_leave(group: dispatch_group_t) -&gt; Void<br>&gt;&gt;&gt; 	dispatch_group_notify_f(group: dispatch_group_t, queue: dispatch_queue_t, context: UnsafeMutablePointer&lt;Void&gt;, work: dispatch_function_t(UnsafeMutablePointer&lt;Void&gt;) -&gt; Void) -&gt; Void<br>&gt;&gt;&gt; 	dispatch_group_t<br>&gt;&gt;&gt; 	dispatch_group_wait(group: dispatch_group_t, timeout: dispatch_time_t) -&gt; Int<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>libdispatch module on Linux</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>January 18, 2016 at 10:00:00am</p></header><div class="content"><p>I am not certain on `swift build` but for swift and swiftc it is `-Xcc -fblocks`.<br> <br>My rule of thumb is that if any time there is something that does not meet initial expectations filing a bug is always appreciated (even if it is marked as a dup/not-to-be-fixed/etc)<br></p><p>&gt; On Jan 18, 2016, at 10:03 AM, Daniel Eggert &lt;danieleggert at me.com&gt; wrote:<br>&gt; <br>&gt; How would I go about passing ‘-fblocks’ when building a module using ‘swift build’?<br>&gt; <br>&gt; Should I file a bug to track this?<br>&gt; <br>&gt; /Daniel<br>&gt; <br>&gt; <br>&gt;&gt; On 18 Jan 2016, at 18:00, Pierre Habouzit &lt;phabouzit at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; this is very likely as __BLOCKS__ is only defined when you pass -fblocks.<br>&gt;&gt; <br>&gt;&gt; though, I’m told the blocks layout from swift and the one from libblocks-runtime-dev is not the same so it will likely crash (because dispatch as I said in another thread, uses that layout to get to the function pointer stored there). but worth trying.<br>&gt;&gt; <br>&gt;&gt; -Pierre<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 18, 2016, at 8:58 AM, Philippe Hausler via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I noticed with importing CoreFoundation into swift-corelibs-foundation that we needed to pass  -Xcc -fblocks to switfc to make it import a few things correctly on linux. I wonder if that is the same thing that is happening here too.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 18, 2016, at 8:31 AM, Daniel Eggert via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’ve create a system module for libdispatch, but when I import it, I don’t see anything guarded by __BLOCKS__.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Is there something I need to do when defining the system module to make that work?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Or something when I use it?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; /Daniel<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; % cat Package.swift <br>&gt;&gt;&gt;&gt; import PackageDescription<br>&gt;&gt;&gt;&gt; let package = Package(name: &quot;CDispatch”)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; % cat module.modulemap <br>&gt;&gt;&gt;&gt; module CDispatch [system] {<br>&gt;&gt;&gt;&gt; umbrella header &quot;/usr/local/include/dispatch/dispatch.h&quot;<br>&gt;&gt;&gt;&gt; link &quot;dispatch&quot;<br>&gt;&gt;&gt;&gt; export *<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; % uname -a<br>&gt;&gt;&gt;&gt; Linux ubuntu 4.2.0-16-generic #19-Ubuntu SMP Thu Oct 8 15:35:06 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; % swift -I path/to/CDispatch-1.0.2<br>&gt;&gt;&gt;&gt; Welcome to Swift version 2.2-dev (LLVM 3ebdbb2c7e, Clang f66c5bb67b, Swift 1f2908b4f7). Type :help for assistance.<br>&gt;&gt;&gt;&gt; 1&gt; import CDispatch<br>&gt;&gt;&gt;&gt; 2&gt; dispatch_group_<br>&gt;&gt;&gt;&gt; Available completions:<br>&gt;&gt;&gt;&gt; 	dispatch_group_async_f(group: dispatch_group_t, queue: dispatch_queue_t, context: UnsafeMutablePointer&lt;Void&gt;, work: dispatch_function_t(UnsafeMutablePointer&lt;Void&gt;) -&gt; Void) -&gt; Void<br>&gt;&gt;&gt;&gt; 	dispatch_group_create() -&gt; dispatch_group_t<br>&gt;&gt;&gt;&gt; 	dispatch_group_enter(group: dispatch_group_t) -&gt; Void<br>&gt;&gt;&gt;&gt; 	dispatch_group_leave(group: dispatch_group_t) -&gt; Void<br>&gt;&gt;&gt;&gt; 	dispatch_group_notify_f(group: dispatch_group_t, queue: dispatch_queue_t, context: UnsafeMutablePointer&lt;Void&gt;, work: dispatch_function_t(UnsafeMutablePointer&lt;Void&gt;) -&gt; Void) -&gt; Void<br>&gt;&gt;&gt;&gt; 	dispatch_group_t<br>&gt;&gt;&gt;&gt; 	dispatch_group_wait(group: dispatch_group_t, timeout: dispatch_time_t) -&gt; Int<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>libdispatch module on Linux</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>January 18, 2016 at 10:00:00pm</p></header><div class="content"><p>I filed https://bugs.swift.org/browse/SR-577 “Compiler should pass -Xcc -fblocks when processing .h files”<br></p><p>/Daniel<br></p><p><br></p><p>&gt; On 18 Jan 2016, at 19:06, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt; <br>&gt; I am not certain on `swift build` but for swift and swiftc it is `-Xcc -fblocks`.<br>&gt; <br>&gt; My rule of thumb is that if any time there is something that does not meet initial expectations filing a bug is always appreciated (even if it is marked as a dup/not-to-be-fixed/etc)<br>&gt; <br>&gt;&gt; On Jan 18, 2016, at 10:03 AM, Daniel Eggert &lt;danieleggert at me.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; How would I go about passing ‘-fblocks’ when building a module using ‘swift build’?<br>&gt;&gt; <br>&gt;&gt; Should I file a bug to track this?<br>&gt;&gt; <br>&gt;&gt; /Daniel<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 18 Jan 2016, at 18:00, Pierre Habouzit &lt;phabouzit at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; this is very likely as __BLOCKS__ is only defined when you pass -fblocks.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; though, I’m told the blocks layout from swift and the one from libblocks-runtime-dev is not the same so it will likely crash (because dispatch as I said in another thread, uses that layout to get to the function pointer stored there). but worth trying.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Pierre<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 18, 2016, at 8:58 AM, Philippe Hausler via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I noticed with importing CoreFoundation into swift-corelibs-foundation that we needed to pass  -Xcc -fblocks to switfc to make it import a few things correctly on linux. I wonder if that is the same thing that is happening here too.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jan 18, 2016, at 8:31 AM, Daniel Eggert via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I’ve create a system module for libdispatch, but when I import it, I don’t see anything guarded by __BLOCKS__.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Is there something I need to do when defining the system module to make that work?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Or something when I use it?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; /Daniel<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; % cat Package.swift <br>&gt;&gt;&gt;&gt;&gt; import PackageDescription<br>&gt;&gt;&gt;&gt;&gt; let package = Package(name: &quot;CDispatch”)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; % cat module.modulemap <br>&gt;&gt;&gt;&gt;&gt; module CDispatch [system] {<br>&gt;&gt;&gt;&gt;&gt; umbrella header &quot;/usr/local/include/dispatch/dispatch.h&quot;<br>&gt;&gt;&gt;&gt;&gt; link &quot;dispatch&quot;<br>&gt;&gt;&gt;&gt;&gt; export *<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; % uname -a<br>&gt;&gt;&gt;&gt;&gt; Linux ubuntu 4.2.0-16-generic #19-Ubuntu SMP Thu Oct 8 15:35:06 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; % swift -I path/to/CDispatch-1.0.2<br>&gt;&gt;&gt;&gt;&gt; Welcome to Swift version 2.2-dev (LLVM 3ebdbb2c7e, Clang f66c5bb67b, Swift 1f2908b4f7). Type :help for assistance.<br>&gt;&gt;&gt;&gt;&gt; 1&gt; import CDispatch<br>&gt;&gt;&gt;&gt;&gt; 2&gt; dispatch_group_<br>&gt;&gt;&gt;&gt;&gt; Available completions:<br>&gt;&gt;&gt;&gt;&gt; 	dispatch_group_async_f(group: dispatch_group_t, queue: dispatch_queue_t, context: UnsafeMutablePointer&lt;Void&gt;, work: dispatch_function_t(UnsafeMutablePointer&lt;Void&gt;) -&gt; Void) -&gt; Void<br>&gt;&gt;&gt;&gt;&gt; 	dispatch_group_create() -&gt; dispatch_group_t<br>&gt;&gt;&gt;&gt;&gt; 	dispatch_group_enter(group: dispatch_group_t) -&gt; Void<br>&gt;&gt;&gt;&gt;&gt; 	dispatch_group_leave(group: dispatch_group_t) -&gt; Void<br>&gt;&gt;&gt;&gt;&gt; 	dispatch_group_notify_f(group: dispatch_group_t, queue: dispatch_queue_t, context: UnsafeMutablePointer&lt;Void&gt;, work: dispatch_function_t(UnsafeMutablePointer&lt;Void&gt;) -&gt; Void) -&gt; Void<br>&gt;&gt;&gt;&gt;&gt; 	dispatch_group_t<br>&gt;&gt;&gt;&gt;&gt; 	dispatch_group_wait(group: dispatch_group_t, timeout: dispatch_time_t) -&gt; Int<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae51ca494b37cc270597830da66f089f?s=50"></div><header><strong>libdispatch module on Linux</strong> from <string>Max Howell</string> &lt;max.howell at apple.com&gt;<p>January 19, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; How would I go about passing ‘-fblocks’ when building a module using ‘swift build’?<br></p><p>Since last week you can now: `swift build -Xcc -fblocks` and the build process will add those flags.<br></p><p>&gt; Should I file a bug to track this?<br></p><p>There’s already a few open tickets for this topic. We’re planning a more thorough solution, the above it to allow workarounds.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>libdispatch module on Linux</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>January 19, 2016 at 08:00:00pm</p></header><div class="content"><p>On 19 Jan 2016, at 20:22, Max Howell &lt;max.howell at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; How would I go about passing ‘-fblocks’ when building a module using ‘swift build’?<br>&gt; <br>&gt; Since last week you can now: `swift build -Xcc -fblocks` and the build process will add those flags.<br>&gt; <br>&gt;&gt; Should I file a bug to track this?<br>&gt; <br>&gt; There’s already a few open tickets for this topic. We’re planning a more thorough solution, the above it to allow workarounds.<br></p><p>Thanks.<br></p><p>I added a comment to https://bugs.swift.org/browse/SR-397 -- I think just having the _f variants working is totally fine. The block variants are nothing but a wrapper around them that can easily be re-created in Swift.<br></p><p>That approach would allow for a a different blocks ABI on Linux.<br></p><p>/Daniel<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
