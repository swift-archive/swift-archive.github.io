<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4db4fede2f4e473341b873406b68e4e1?s=50"></div><header><strong>SwiftAndroid: Statically linking libicu and/or the stdlib?</strong> from <string>Geordie Jay</string> &lt;geojay at gmail.com&gt;<p>December 21, 2015 at 06:00:00pm</p></header><div class="content"><p>Hi, I’m still working on the deployment and JNI side of SwiftAndroid (github.com/SwiftAndroid). After success with some basic tests I’ve started fleshing out a “Swifty” JNI interface and connected to some existing Swift library code I want to try out. Now I’m stuck and I hope someone with more experience can lend some wisdom on the matter:<br></p><p><br>libicu doesn’t come packaged for Android, so the source needs to be downloaded, compiled and then icui18n and icuuc linked into libswiftCore and libswiftRuntime during the stdlib build process. After that, if I copy the libicui18n and libicuuc.so files into the system library path on the Android emulator, the Swift code links with swiftCore and executes fine there.<br></p><p><br>What I haven’t yet figured out is how to get these icu libraries dynamically linking at runtime on a non-rooted device. For some reason, and seemingly no matter what I do the runtime linker complains of missing symbols.<br></p><p><br>I’ve tried loading the libraries in various ways with no luck: the same way I’m loading everything else (my own program&#39;s swift module, the stdlib, etc.), as an explicit dependency of libswiftCore (in Android.mk), and at runtime in Java via System.loadLibrary(). All of these result in the same fatal error: that a certain libicu symbol is missing (nm tells me it’s present in icui18n) and therefore libswiftCore couldn’t be loaded.<br></p><p><br>Based on<br>a) the above issues,<br>b) the fact that the icu libraries are large (as big as the swift stdlib itself), and that seemingly only a very small amount of them is actually used,<br>c) the fact that the swift ABI is not yet set in stone anyway (I understand swiftCore is still packaged alongside every Swift iOS app, for example, which as far as I understand negates any benefit of dynamic linking for now)<br></p><p><br>.. it would make sense to me to just statically link the libicu dependencies into the stdlib for Android, or even just forego dynamic linking altogether on Android, except for the system libs.<br></p><p><br>Assuming static linking makes sense for Android (please correct me if my reasoning so far is wrong - this is all very new for me), here’s where I’m stuck at the moment. I’ve tried building swift via<br></p><p><br>    ./utils/build-script -R --no-assertions -b -p --extra-swift-args build-swift-static-stdlib=1<br></p><p><br>but changing this static-stdlib flag seems to have no effect at all on the build output. As more of a longshot I also tried adding<br></p><p><br>    list(APPEND swift_runtime_compile_flags<br>      &quot;-Bstatic”)<br></p><p><br>to stdlib/public/runtime/CMakeLists.txt just before add_swift_library(swiftRuntime IS_STDLIB IS_STDLIB_CORE. Neither of these seemed to do anything whatsoever. I wish it would at least break so I don’t get my hopes up waiting for the stdlib to recompile :)<br></p><p><br>I’m a bit lost in all the different components of the build system to be honest, so any input on these issues would be greatly appreciated!<br></p><p><br>Thanks<br>-Geordie<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151221/2e526cd5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>SwiftAndroid: Statically linking libicu and/or the stdlib?</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December 21, 2015 at 09:00:00pm</p></header><div class="content"><p>On Mon, Dec 21, 2015 at 6:13 PM, Geordie Jay via swift-dev &lt;<br>swift-dev at swift.org&gt; wrote:<br></p><p>&gt;     ./utils/build-script -R --no-assertions -b -p --extra-swift-args<br>&gt; build-swift-static-stdlib=1<br>&gt;<br></p><p>This option builds static archives of the standard library, not a standard<br>library that links in everything statically.<br></p><p>I would expect you would need to add some non-trival amount of CMake code<br>if you want to statically link ICU.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151221/8ae96980/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4db4fede2f4e473341b873406b68e4e1?s=50"></div><header><strong>SwiftAndroid: Statically linking libicu and/or the stdlib?</strong> from <string>Geordie Jay</string> &lt;geojay at gmail.com&gt;<p>January  5, 2016 at 07:00:00pm</p></header><div class="content"><p>Thanks for your reply Dmitri. I ended up getting this working by manually<br>changing the SONAME and other internal references from within and to ICU<br>from the stdlib and APKs are now working on all the non-rooted devices I<br>have available to me.<br></p><p>I don&#39;t know my way around CMake to make major (or evidently even minor)<br>changes to the build, but a statically linked stdlib would certainly be<br>advantageous for other uses as well, e.g. for Emscripten. One thing at a<br>time though..<br></p><p>Happy new year,<br>Geordie<br></p><p><br>Dmitri Gribenko &lt;gribozavr at gmail.com&gt; schrieb am Di., 22. Dez. 2015 um<br>06:45:<br></p><p>&gt; On Mon, Dec 21, 2015 at 6:13 PM, Geordie Jay via swift-dev &lt;<br>&gt; swift-dev at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;     ./utils/build-script -R --no-assertions -b -p --extra-swift-args<br>&gt;&gt; build-swift-static-stdlib=1<br>&gt;&gt;<br>&gt;<br>&gt; This option builds static archives of the standard library, not a standard<br>&gt; library that links in everything statically.<br>&gt;<br>&gt; I would expect you would need to add some non-trival amount of CMake code<br>&gt; if you want to statically link ICU.<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160105/0d314b38/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
