<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>Dynamic Class/Struct Definition At Run Time</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>October 11, 2016 at 03:00:00pm</p></header><div class="content"><p>Dynamic Class/Struct Definition At Run Time <br></p><p>At the time of this writing, 11 October 2016, it is not possible to define arbitrary <br>classes, structs and maybe other entities dynamically at run time in Swift. <br>I have some idea about it, expressed in this message.<br></p><p>Creating class and other types dynamically should be as simple and as easy to understand <br>as possible, preferably with nearly the same style and syntax as the &quot;regular&quot; declarations,<br> leaving things like &quot;Meta&quot;&quot;Type&quot; T.Self etc. as transparent as possible. <br>That should in this context be &quot;under the hood&quot;, as it is also the case <br>when defining static classes. <br></p><p>I have constructed the following (hypothetical) example code,<br> which serves as just a &quot;thinking model&quot;, so to speak.<br></p><p>    // In this example we dynamically create and use <br>    // an example class named &quot;Monolith&quot;<br>    // First, we declare an &quot;empty dynamic class&quot;<br>    // (a slot) at compile time, that is later defined at run time.<br>   <br>    dynamic class Monolith // defined later just this line.<br>    <br>    // Use a constructor that accepts <br>    // a string which contains a class definition, <br>    // exactly like one would define a class in Swift statically. <br>    // with the exception that name of the class is not specified. <br>    // It is replaced by placeholder, an underscore, because <br>    // the class name itself is inferred when declaring it. <br>    // Specifying the class name will throw an error.<br></p><p>    var classDefStr = <br>            &quot;class _ :SCNNode, AnInterface, AnotherInterface &quot;+<br>            &quot;{var l = 9.0; var h = 4.0; var  w = 1.0; &quot;     +<br>            &quot;var color = UIColor.blue;&quot;                    + <br>            &quot;func volume() -&gt; Double { return l * w * h} “ +<br>            aStringWithAdditionalComponentDefinitions + &quot;}&quot;<br></p><p>    // Of course, this class definition string can also be assembled<br>    // completely programatically, read from a file or database, etc. <br>    <br>    func defMonolithClass()<br>    {<br>        do  // try to define a class, NOT an instance.<br>        {<br>            try Monolith = <br>                Meta.defineClass(withString: classDefStr)<br>        }<br>        catch Meta.classDefinitionError<br>        {<br>            // handle a possible class dynamic compilation errors<br>            // e.g. syntax errors. symbols not found etc.  <br>        }<br>        catch Meta.classCreationConflict<br>        {<br>            // class cannot be redefined <br>            // when instances of Monolith still exist.<br>            // This restriction is probably necessary.<br>            // Also, static classes defined at compile time<br>            // cannot be redefined<br>        }<br></p><p>        // After successfully declaring our dynamic class,<br>        // we can now add more features to it, like <br>        // properties and dynamic extensions. (It is not<br>        // possible of course to add statically defined extensions<br>        // and protocols to a non-existing dynamic class at compile time.<br>        // neither is it possible to do this at run time.)<br>        <br>        do <br>        {  <br>            try Meta.addPropertyTo(Monolith,&quot;mass&quot;,    3.4)<br>            try Meta.addPropertyTo(Monolith,&quot;physics&quot;, PhysicsBody)<br>            try Meta.addExtensionTo(Monolith, someExtensionDefStr)<br>        }<br>        catch Meta.classExtenderError<br>        {<br>            // handle the error<br>        }<br>        catch Meta.classCreationConflict<br>        {<br>            // class definition cannot be altered <br>            // when instances of Monolith (still) exist.<br>            // This restriction seems to be necessary.<br>            // Also, static classes defined at compile time<br>            // cannot be extended dynamically. <br>        }<br>    }<br>    <br>    ...<br></p><p>    defMonolithClass()<br>    <br>    // After having dynamically declared the example class,<br>    // we can produce instances of it, like with any <br>    // other class. It throws an error<br>    // when the dynamic class has not been defined. <br></p><p>    <br>    public let monolith = Monolith() <br>    <br>    let vol = monolith.volume<br>    <br>    monolith = nil  // remove instance(s), pre ARC when we wish to <br>                    // redefine it. <br></p><p>    defMonolithClass()  // redefine it, possibly with other definition parameters as in the first definition in this example.<br></p><p>   <br></p><p>Some examples for additional functionality<br></p><p>let Bird: DynamicClass?<br></p><p><br>Bird = Meta.defineClass(withString: classDefStr)<br></p><p>Bird = Meta.defineClass(superClass: StaticClass | DynamicClass,<br>                        interfaces: [Protocol],<br>                  definitionString: classItemsDefStr)<br></p><p>Bird = Meta.defineCopyOfClass(class: StaticClass| DynamicClass,<br>                              append: classItemsDefString)<br></p><p><br></p><p>Meta.addpropertyTo(Monolith, <br>                   name:&quot;mass&quot;,initializeWith: 3.4, type: Float) <br></p><p>Meta.addPropertyTo(Monolith,<br>                name &quot;Person&quot;,initializeWith: someValue, type: Inferred) <br></p><p>Meta.addConstantPropertyTo(Monolith,<br>                name &quot;cow&quot;,initializeWithString: aString, <br>                type: FourLeggedAnimal) <br></p><p><br></p><p><br>In principle, variants of this could be used to define structs as well.<br></p><p>While Swift is mainly a statically typed language, recompilation or additional <br>compilation and somehow link it al together is obviously necessary at run time, <br>each time a dynamic structure is defined. <br>Because of this, it will most probably have performance drawbacks <br>at run time, but there are applications where that is acceptable.<br>Also, there many applications where dynamic entities are not needed, <br>and therefore relying only on statically defined objects, which run as fast as usual.<br></p><p>I haven&#39;t thought (yet) very much about possible side effects and conflicts. <br>One of the restrictions probably is that one cannot or should not, alter the <br>class definition (hierarchy) as long as instances of it exist.<br>  <br>How to implement this and can it be done? I know almost nothing about <br>compiler design and construction I assume that it is very complicated, <br>but if it can be done it would be great, making Swift even more powerful <br>than it already is. <br></p><p>Interesting? <br>Of course, there might be better ways to do this, it&#39;s just a (my) start of thinking.<br>Highly appreciate in feedback about this.<br></p><p>This currently is not in a time frame or meant as base for a proposal,<br></p><p><br>Kind Regards<br>Tedvg<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161011/f9a59d77/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>Dynamic Class/Struct Definition At Run Time</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>October 11, 2016 at 08:00:00pm</p></header><div class="content"><p>Hello Ted,<br>First of all, this topic belongs to reflection, which is specifically<br>stated to be out of scope of Swift 4 Phase 1. So all considerations are<br>purely theoretical for now.<br>That said, I also thought about this problem. The best I could imagine is<br>something along the following lines:<br></p><p>var builder = StructBuilder(name: &quot;Person&quot;)<br>builder.addProperty(name: &quot;name&quot;, type: String.self)<br>builder.addProperty(name: &quot;age&quot;, type: Int.self)<br>builder.addComputedProperty(name: &quot;description&quot;, getter: { (this: Any)<br>-&gt; String in ... })<br>builder.addComformance(CustomStringConvertible.self)let type: Any.Type<br>= builder.build()<br></p><p>Obviously, to interact with such dynamic types and their objects, we need<br>the whole working reflection system that we don’t have right now.<br>​<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161011/76225d4d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>Dynamic Class/Struct Definition At Run Time</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>October 11, 2016 at 09:00:00pm</p></header><div class="content"><p>I quite like your builder pattern way of adding properties and methods :).<br></p><p>Sent from my iPhone<br></p><p>&gt; On 11 Oct 2016, at 19:40, Anton Zhilin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Ted,<br>&gt; First of all, this topic belongs to reflection, which is specifically stated to be out of scope of Swift 4 Phase 1. So all considerations are purely theoretical for now.<br>&gt; That said, I also thought about this problem. The best I could imagine is something along the following lines:<br>&gt; <br>&gt; var builder = StructBuilder(name: &quot;Person&quot;)<br>&gt; builder.addProperty(name: &quot;name&quot;, type: String.self)<br>&gt; builder.addProperty(name: &quot;age&quot;, type: Int.self)<br>&gt; builder.addComputedProperty(name: &quot;description&quot;, getter: { (this: Any) -&gt; String in ... })<br>&gt; builder.addComformance(CustomStringConvertible.self)<br>&gt; let type: Any.Type = builder.build()<br>&gt; Obviously, to interact with such dynamic types and their objects, we need the whole working reflection system that we don’t have right now.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161011/da03fd91/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>Dynamic Class/Struct Definition At Run Time</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>October 11, 2016 at 10:00:00pm</p></header><div class="content"><p>thank you, Goffredo, Anton, see inline<br>TedvG<br>&gt; On 11 Oct 2016, at 21:10, Goffredo Marocchi &lt;panajev at gmail.com&gt; wrote:<br>&gt; <br>&gt; I quite like your builder pattern way of adding properties and methods :).<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On 11 Oct 2016, at 19:40, Anton Zhilin via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Hello Ted,<br>&gt;&gt; First of all, this topic belongs to reflection, which is specifically stated to be out of scope of Swift 4 Phase 1. So all considerations are purely theoretical for now.<br>&gt;&gt; <br>The idea is not intended to be in a deadline/timeframe<br>could be Swift 7 for that :o) <br>&gt;&gt; ..  That said, I also thought about this problem. The best I could imagine is something along the following lines:<br>&gt;&gt; <br>&gt;&gt; var builder = StructBuilder(name: &quot;Person&quot;)<br>&gt;&gt; builder.addProperty(name: &quot;name&quot;, type: String.self)<br>&gt;&gt; builder.addProperty(name: &quot;age&quot;, type: Int.self)<br>&gt;&gt; builder.addComputedProperty(name: &quot;description&quot;, getter: { (this: Any) -&gt; String in ... })<br>&gt;&gt; builder.addComformance(CustomStringConvertible.self)<br>&gt;&gt; let type: Any.Type = builder.build()<br>&gt;&gt; Obviously, to interact with such dynamic types and their objects, we need the whole working reflection system that we don’t have right now.<br>&gt;&gt; <br>&gt;&gt; <br>I don’t know how much reflection is needed in this context.<br>-Adding dynamic classes can be solved with incremental? recompiling <br>based on previously generated compiler reference metadata, <br>already present. (note that in debug mode there already is a lot of “reflection”<br>available)<br> - static entities defined at the initial compilation<br> - and cumulative for dynamic entities when additionaly compiled at run time.<br>As soon as a dynamically defined or redefined class (or struct) is compiled<br>it is then regarded as a static type, transparent to the application thus which instances <br>cannot be dynamically altered, because they are “tied” to the class definition.<br>Instance creation is then the same as with statically defined classes<br></p><p>(but all this  is a bit simplified of course, and I don’t know much about compilers.<br>Maybe similar to Smalltalk where methods/classes are precompiled separately)<br></p><p>@ Chris: As a Compiler Pro could you say more about this and about the whole idea, Chris? <br></p><p>Thanks<br>TedvG<br></p><p><br></p><p><br>&gt;&gt; Dynamic Class/Struct Definition At Run Time <br>&gt;&gt; <br>&gt;&gt; At the time of this writing, 11 October 2016, it is not possible to define arbitrary <br>&gt;&gt; classes, structs and maybe other entities dynamically at run time in Swift. <br>&gt;&gt; I have some idea about it, expressed in this message.<br>&gt;&gt; <br>&gt;&gt; Creating class and other types dynamically should be as simple and as easy to understand <br>&gt;&gt; as possible, preferably with nearly the same style and syntax as the &quot;regular&quot; declarations,<br>&gt;&gt;  leaving things like &quot;Meta&quot;&quot;Type&quot; T.Self etc. as transparent as possible. <br>&gt;&gt; That should in this context be &quot;under the hood&quot;, as it is also the case <br>&gt;&gt; when defining static classes. <br>&gt;&gt; <br>&gt;&gt; I have constructed the following (hypothetical) example code,<br>&gt;&gt;  which serves as just a &quot;thinking model&quot;, so to speak.<br>&gt;&gt; <br>&gt;&gt;     // In this example we dynamically create and use <br>&gt;&gt;     // an example class named &quot;Monolith&quot;<br>&gt;&gt;     // First, we declare an &quot;empty dynamic class&quot;<br>&gt;&gt;     // (a slot) at compile time, that is later defined at run time.<br>&gt;&gt;    <br>&gt;&gt;     dynamic class Monolith // defined later just this line.<br>&gt;&gt;     <br>&gt;&gt;     // Use a constructor that accepts <br>&gt;&gt;     // a string which contains a class definition, <br>&gt;&gt;     // exactly like one would define a class in Swift statically. <br>&gt;&gt;     // with the exception that name of the class is not specified. <br>&gt;&gt;     // It is replaced by placeholder, an underscore, because <br>&gt;&gt;     // the class name itself is inferred when declaring it. <br>&gt;&gt;     // Specifying the class name will throw an error.<br>&gt;&gt; <br>&gt;&gt;     var classDefStr = <br>&gt;&gt;             &quot;class _ :SCNNode, AnInterface, AnotherInterface &quot;+<br>&gt;&gt;             &quot;{var l = 9.0; var h = 4.0; var  w = 1.0; &quot;     +<br>&gt;&gt;             &quot;var color = UIColor.blue;&quot;                    + <br>&gt;&gt;             &quot;func volume() -&gt; Double { return l * w * h} “ +<br>&gt;&gt;             aStringWithAdditionalComponentDefinitions + &quot;}&quot;<br>&gt;&gt; <br>&gt;&gt;     // Of course, this class definition string can also be assembled<br>&gt;&gt;     // completely programatically, read from a file or database, etc. <br>&gt;&gt;     <br>&gt;&gt;     func defMonolithClass()<br>&gt;&gt;     {<br>&gt;&gt;         do  // try to define a class, NOT an instance.<br>&gt;&gt;         {<br>&gt;&gt;             try Monolith = <br>&gt;&gt;                 Meta.defineClass(withString: classDefStr)<br>&gt;&gt;         }<br>&gt;&gt;         catch Meta.classDefinitionError<br>&gt;&gt;         {<br>&gt;&gt;             // handle a possible class dynamic compilation errors<br>&gt;&gt;             // e.g. syntax errors. symbols not found etc.  <br>&gt;&gt;         }<br>&gt;&gt;         catch Meta.classCreationConflict<br>&gt;&gt;         {<br>&gt;&gt;             // class cannot be redefined <br>&gt;&gt;             // when instances of Monolith still exist.<br>&gt;&gt;             // This restriction is probably necessary.<br>&gt;&gt;             // Also, static classes defined at compile time<br>&gt;&gt;             // cannot be redefined<br>&gt;&gt;         }<br>&gt;&gt; <br>&gt;&gt;         // After successfully declaring our dynamic class,<br>&gt;&gt;         // we can now add more features to it, like <br>&gt;&gt;         // properties and dynamic extensions. (It is not<br>&gt;&gt;         // possible of course to add statically defined extensions<br>&gt;&gt;         // and protocols to a non-existing dynamic class at compile time.<br>&gt;&gt;         // neither is it possible to do this at run time.)<br>&gt;&gt;         <br>&gt;&gt;         do <br>&gt;&gt;         {  <br>&gt;&gt;             try Meta.addPropertyTo(Monolith,&quot;mass&quot;,    3.4)<br>&gt;&gt;             try Meta.addPropertyTo(Monolith,&quot;physics&quot;, PhysicsBody)<br>&gt;&gt;             try Meta.addExtensionTo(Monolith, someExtensionDefStr)<br>&gt;&gt;         }<br>&gt;&gt;         catch Meta.classExtenderError<br>&gt;&gt;         {<br>&gt;&gt;             // handle the error<br>&gt;&gt;         }<br>&gt;&gt;         catch Meta.classCreationConflict<br>&gt;&gt;         {<br>&gt;&gt;             // class definition cannot be altered <br>&gt;&gt;             // when instances of Monolith (still) exist.<br>&gt;&gt;             // This restriction seems to be necessary.<br>&gt;&gt;             // Also, static classes defined at compile time<br>&gt;&gt;             // cannot be extended dynamically. <br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt;     <br>&gt;&gt;     ...<br>&gt;&gt; <br>&gt;&gt;     defMonolithClass()<br>&gt;&gt;     <br>&gt;&gt;     // After having dynamically declared the example class,<br>&gt;&gt;     // we can produce instances of it, like with any <br>&gt;&gt;     // other class. It throws an error<br>&gt;&gt;     // when the dynamic class has not been defined. <br>&gt;&gt; <br>&gt;&gt;     <br>&gt;&gt;     public let monolith = Monolith() <br>&gt;&gt;     <br>&gt;&gt;     let vol = monolith.volume<br>&gt;&gt;     <br>&gt;&gt;     monolith = nil  // remove instance(s), pre ARC when we wish to <br>&gt;&gt;                     // redefine it. <br>&gt;&gt; <br>&gt;&gt;     defMonolithClass()  // redefine it, possibly with other definition parameters as in the first definition in this example.<br>&gt;&gt; <br>&gt;&gt;    <br>&gt;&gt; <br>&gt;&gt; Some examples for additional functionality<br>&gt;&gt; <br>&gt;&gt; let Bird: DynamicClass?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Bird = Meta.defineClass(withString: classDefStr)<br>&gt;&gt; <br>&gt;&gt; Bird = Meta.defineClass(superClass: StaticClass | DynamicClass,<br>&gt;&gt;                         interfaces: [Protocol],<br>&gt;&gt;                   definitionString: classItemsDefStr)<br>&gt;&gt; <br>&gt;&gt; Bird = Meta.defineCopyOfClass(class: StaticClass| DynamicClass,<br>&gt;&gt;                               append: classItemsDefString)<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Meta.addpropertyTo(Monolith, <br>&gt;&gt;                    name:&quot;mass&quot;,initializeWith: 3.4, type: Float) <br>&gt;&gt; <br>&gt;&gt; Meta.addPropertyTo(Monolith,<br>&gt;&gt;                 name &quot;Person&quot;,initializeWith: someValue, type: Inferred) <br>&gt;&gt; <br>&gt;&gt; Meta.addConstantPropertyTo(Monolith,<br>&gt;&gt;                 name &quot;cow&quot;,initializeWithString: aString, <br>&gt;&gt;                 type: FourLeggedAnimal) <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; In principle, variants of this could be used to define structs as well.<br>&gt;&gt; <br>&gt;&gt; While Swift is mainly a statically typed language, recompilation or additional <br>&gt;&gt; compilation and somehow link it al together is obviously necessary at run time, <br>&gt;&gt; each time a dynamic structure is defined. <br>&gt;&gt; Because of this, it will most probably have performance drawbacks <br>&gt;&gt; at run time, but there are applications where that is acceptable.<br>&gt;&gt; Also, there many applications where dynamic entities are not needed, <br>&gt;&gt; and therefore relying only on statically defined objects, which run as fast as usual.<br>&gt;&gt; <br>&gt;&gt; I haven&#39;t thought (yet) very much about possible side effects and conflicts. <br>&gt;&gt; One of the restrictions probably is that one cannot or should not, alter the <br>&gt;&gt; class definition (hierarchy) as long as instances of it exist.<br>&gt;&gt;   <br>&gt;&gt; How to implement this and can it be done? I know almost nothing about <br>&gt;&gt; compiler design and construction I assume that it is very complicated, <br>&gt;&gt; but if it can be done it would be great, making Swift even more powerful <br>&gt;&gt; than it already is. <br>&gt;&gt; <br>&gt;&gt; Interesting? <br>&gt;&gt; Of course, there might be better ways to do this, it&#39;s just a (my) start of thinking.<br>&gt;&gt; Highly appreciate in feedback about this.<br>&gt;&gt; <br>&gt;&gt; This currently is not in a time frame or meant as base for a proposal,<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Kind Regards<br>&gt;&gt; Tedvg<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161011/0ecb8547/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Dynamic Class/Struct Definition At Run Time</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>October 11, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Oct 11, 2016, at 12:40, Anton Zhilin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Ted,<br>&gt; First of all, this topic belongs to reflection, which is specifically stated to be out of scope of Swift 4 Phase 1. So all considerations are purely theoretical for now.<br>&gt; That said, I also thought about this problem. The best I could imagine is something along the following lines:<br>&gt; <br>&gt; var builder = StructBuilder(name: &quot;Person&quot;)<br>&gt; builder.addProperty(name: &quot;name&quot;, type: String.self)<br>&gt; builder.addProperty(name: &quot;age&quot;, type: Int.self)<br>&gt; builder.addComputedProperty(name: &quot;description&quot;, getter: { (this: Any) -&gt; String in ... })<br>&gt; builder.addComformance(CustomStringConvertible.self)<br>&gt; let type: Any.Type = builder.build()<br>&gt; Obviously, to interact with such dynamic types and their objects, we need the whole working reflection system that we don’t have right now.<br>&gt; <br>I *think* that&#39;s only true for non-generic code, and types that aren&#39;t subclasses... I think...<br></p><p>Anyway, I&#39;m starting to wonder if some code I&#39;m trying to write might be impossible without either this feature, or some/all of the stuff from the generics manifesto. So put me down as, in principle, a strong +1 (pending details of the proposal when it actually gets written for Swift 10).<br></p><p>- Dave Sweeris <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161011/61f0bbea/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Dynamic Class/Struct Definition At Run Time</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>October 11, 2016 at 09:00:00pm</p></header><div class="content"><p>Reflection is likely to be tackled in Swift 5, no? So realistically, this<br>could be on track for Swift 6 or 7. Let&#39;s postpone discussion until then.<br></p><p><br>On Tue, Oct 11, 2016 at 15:59 David Sweeris via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Oct 11, 2016, at 12:40, Anton Zhilin via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hello Ted,<br>&gt; First of all, this topic belongs to reflection, which is specifically<br>&gt; stated to be out of scope of Swift 4 Phase 1. So all considerations are<br>&gt; purely theoretical for now.<br>&gt; That said, I also thought about this problem. The best I could imagine is<br>&gt; something along the following lines:<br>&gt;<br>&gt; var builder = StructBuilder(name: &quot;Person&quot;)<br>&gt; builder.addProperty(name: &quot;name&quot;, type: String.self)<br>&gt; builder.addProperty(name: &quot;age&quot;, type: Int.self)<br>&gt; builder.addComputedProperty(name: &quot;description&quot;, getter: { (this: Any) -&gt; String in ... })<br>&gt; builder.addComformance(CustomStringConvertible.self)let type: Any.Type = builder.build()<br>&gt;<br>&gt; Obviously, to interact with such dynamic types and their objects, we need<br>&gt; the whole working reflection system that we don’t have right now.<br>&gt;<br>&gt; I *think* that&#39;s only true for non-generic code, and types that aren&#39;t<br>&gt; subclasses... I think...<br>&gt;<br>&gt; Anyway, I&#39;m starting to wonder if some code I&#39;m trying to write might be<br>&gt; impossible without either this feature, or some/all of the stuff from the<br>&gt; generics manifesto. So put me down as, in principle, a strong +1 (pending<br>&gt; details of the proposal when it actually gets written for Swift 10).<br>&gt;<br>&gt; - Dave Sweeris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161011/fcaeb5c7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>Dynamic Class/Struct Definition At Run Time</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>October 12, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On 11 Oct 2016, at 23:04, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; Reflection is likely to be tackled in Swift 5, no?<br></p><p>I&#39;d think you don’t need reflection that much, because defining<br>dynamic classes (and other entities) are solely incremental compiler<br>tasks, for which it can use  previously compiled meta reference<br>information (xref symbols etc). <br></p><p>Imho in that perspective it is more or less independent<br>of reflection. Reflection is as far as I can see is more intended to offer <br>meta information at the programming level.? <br></p><p>&gt; So realistically, this could be on track for Swift 6 or 7.<br></p><p>As already written, there is no timeframe/deadline for this idea, it is just an idea, <br>not a proposal (yet).<br></p><p>&gt; Let&#39;s postpone discussion until then.<br></p><p>Feel free to do so, but why postponing having ideas and discussing them? <br>In this case for instance, thinking about dynamic facilities, will presumably <br>also influence thinking about reflection and vice versa. <br>Thinking “wider” and “further” broadens the horizon of course.<br>For example. what about a compiler/interpreter self improving based on artificial intelligence? is this 2016? <br>So one can (should) do both: that is think in small steps, like discussing<br>“just”  language elements and at the same time have an eye (or two) for the <br>broader picture. If one concentrates too much on the direct path in front, one might<br>not see other paths or what lays further ahead, which limits progress. <br></p><p>————————————————<br>Let me write a small cartoon here, just intended as a little bit of humour just to illustrate this:<br></p><p>A few thousand years ago, two very nice beings ( just returned from attending a<br>very primitive and awkward election debate, still shivering),  looking at a pair <br>of fairly round stone slabs with a hole in the centre.<br></p><p>“What’s this ?, Why round? why the holes? Nice job, but what is it? Is it art?”<br></p><p>“Errrrhmm, well.. I might call it ‘Wheelz&#39;, not sure yet, you can use two of more of them<br>underneath or aside of things you’d like to move around more easily…<br>with less friction, which was a hell of a drag anyway.&quot;<br></p><p>The other guy walks around it, apparently deeply thinking about it. <br>after some silence he says:<br>“Aha… hmm.. well.. Oh, i see, yeah, yep, that’s kinda cool.. might be useful. <br>But let’’s postpone discussing it until  ball-bearings have been invented. “<br>————————————————<br></p><p>hmmm, I really have too much time… :o)<br></p><p>Kind Regards<br>Ted<br></p><p><br></p><p> <br></p><p><br></p><p><br></p><p><br>&gt; <br>&gt; <br>&gt; On Tue, Oct 11, 2016 at 15:59 David Sweeris via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; On Oct 11, 2016, at 12:40, Anton Zhilin via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Hello Ted,<br>&gt;&gt; First of all, this topic belongs to reflection, which is specifically stated to be out of scope of Swift 4 Phase 1. So all considerations are purely theoretical for now.<br>&gt;&gt; That said, I also thought about this problem. The best I could imagine is something along the following lines:<br>&gt;&gt; <br>&gt;&gt; var builder = StructBuilder(name: &quot;Person&quot;)<br>&gt;&gt; builder.addProperty(name: &quot;name&quot;, type: String.self)<br>&gt;&gt; builder.addProperty(name: &quot;age&quot;, type: Int.self)<br>&gt;&gt; builder.addComputedProperty(name: &quot;description&quot;, getter: { (this: Any) -&gt; String in ... })<br>&gt;&gt; builder.addComformance(CustomStringConvertible.self)<br>&gt;&gt; let type: Any.Type = builder.build()<br>&gt;&gt; Obviously, to interact with such dynamic types and their objects, we need the whole working reflection system that we don’t have right now.<br>&gt;&gt; <br>&gt; <br>&gt; I *think* that&#39;s only true for non-generic code, and types that aren&#39;t subclasses... I think...<br>&gt; <br>&gt; Anyway, I&#39;m starting to wonder if some code I&#39;m trying to write might be impossible without either this feature, or some/all of the stuff from the generics manifesto. So put me down as, in principle, a strong +1 (pending details of the proposal when it actually gets written for Swift 10).<br>&gt; <br>&gt; - Dave Sweeris <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161012/9b993249/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Dynamic Class/Struct Definition At Run Time</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>October 12, 2016 at 08:00:00am</p></header><div class="content"><p>On Wed, Oct 12, 2016 at 7:47 AM, Ted F.A. van Gaalen &lt;tedvgiosdev at gmail.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt; On 11 Oct 2016, at 23:04, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; Reflection is likely to be tackled in Swift 5, no?<br>&gt;<br>&gt;<br>&gt; I&#39;d think you don’t need reflection that much, because defining<br>&gt; dynamic classes (and other entities) are solely incremental compiler<br>&gt; tasks, for which it can use  previously compiled meta reference<br>&gt; information (xref symbols etc).<br>&gt;<br>&gt; Imho in that perspective it is more or less independent<br>&gt; of reflection. Reflection is as far as I can see is more intended to offer<br>&gt; meta information at the programming level.?<br>&gt;<br>&gt; So realistically, this could be on track for Swift 6 or 7.<br>&gt;<br>&gt;<br>&gt; As already written, there is no timeframe/deadline for this idea, it is<br>&gt; just an idea,<br>&gt; not a proposal (yet).<br>&gt;<br>&gt; Let&#39;s postpone discussion until then.<br>&gt;<br>&gt;<br>&gt; Feel free to do so, but why postponing having ideas and discussing them?<br>&gt;<br></p><p>The core team has requested that discussions be focused on the priorities<br>identified for the current phase of Swift 4. There&#39;s a sound rationale for<br>this request. Per Chris: &quot;The community benefits from keeping focus on a<br>limited number of topics, because if there is too much going on, no one can<br>follow and keep track of it all. It is important for the core team to be<br>involved in key discussions up front. In the Swift 3 cycle, it was<br>problematic that many folks had no time to follow the threads until after<br>the review period completed.&quot;<br></p><p>I&#39;m sure many people have ideas about dynamic facilities in Swift, as do we<br>all about other ideas, and many have been trying to be respectful of this<br>new proposed process. I think we can all agree that maximum participation<br>and the best solutions are most likely when everyone stays on the same page<br>with regard to the process by which we go about these discussions. No need<br>to postpone having ideas about Swift or talking about them with your<br>friends and colleagues, but let&#39;s respect the core team&#39;s urging to<br>postpone discussing them on this particular list for the reasons identified<br>above.<br></p><p>In this case for instance, thinking about dynamic facilities, will<br>&gt; presumably<br>&gt; also influence thinking about reflection and vice versa.<br>&gt; Thinking “wider” and “further” broadens the horizon of course.<br>&gt; For example. what about a compiler/interpreter self improving based on<br>&gt; artificial intelligence? is this 2016?<br>&gt; So one can (should) do both: that is think in small steps, like discussing<br>&gt; “just”  language elements and at the same time have an eye (or two) for<br>&gt; the<br>&gt; broader picture. If one concentrates too much on the direct path in front,<br>&gt; one might<br>&gt; not see other paths or what lays further ahead, which limits progress.<br>&gt;<br>&gt; ————————————————<br>&gt; Let me write a small cartoon here, just intended as a little bit of humour<br>&gt; just to illustrate this:<br>&gt;<br>&gt; A few thousand years ago, two very nice beings ( just returned from<br>&gt; attending a<br>&gt; very primitive and awkward election debate, still shivering),  looking at<br>&gt; a pair<br>&gt; of fairly round stone slabs with a hole in the centre.<br>&gt;<br>&gt; “What’s this ?, Why round? why the holes? Nice job, but what is it? Is it<br>&gt; art?”<br>&gt;<br>&gt; “Errrrhmm, well.. I might call it ‘Wheelz&#39;, not sure yet, you can use two<br>&gt; of more of them<br>&gt; underneath or aside of things you’d like to move around more easily…<br>&gt; with less friction, which was a hell of a drag anyway.&quot;<br>&gt;<br>&gt; The other guy walks around it, apparently deeply thinking about it.<br>&gt; after some silence he says:<br>&gt; “Aha… hmm.. well.. Oh, i see, yeah, yep, that’s kinda cool.. might be<br>&gt; useful.<br>&gt; But let’’s postpone discussing it until  ball-bearings have been invented.<br>&gt; “<br>&gt; ————————————————<br>&gt;<br>&gt; hmmm, I really have too much time… :o)<br>&gt;<br>&gt; Kind Regards<br>&gt; Ted<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Tue, Oct 11, 2016 at 15:59 David Sweeris via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Oct 11, 2016, at 12:40, Anton Zhilin via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hello Ted,<br>&gt;&gt; First of all, this topic belongs to reflection, which is specifically<br>&gt;&gt; stated to be out of scope of Swift 4 Phase 1. So all considerations are<br>&gt;&gt; purely theoretical for now.<br>&gt;&gt; That said, I also thought about this problem. The best I could imagine is<br>&gt;&gt; something along the following lines:<br>&gt;&gt;<br>&gt;&gt; var builder = StructBuilder(name: &quot;Person&quot;)<br>&gt;&gt; builder.addProperty(name: &quot;name&quot;, type: String.self)<br>&gt;&gt; builder.addProperty(name: &quot;age&quot;, type: Int.self)<br>&gt;&gt; builder.addComputedProperty(name: &quot;description&quot;, getter: { (this: Any) -&gt; String in ... })<br>&gt;&gt; builder.addComformance(CustomStringConvertible.self)let type: Any.Type = builder.build()<br>&gt;&gt;<br>&gt;&gt; Obviously, to interact with such dynamic types and their objects, we need<br>&gt;&gt; the whole working reflection system that we don’t have right now.<br>&gt;&gt;<br>&gt;&gt; I *think* that&#39;s only true for non-generic code, and types that aren&#39;t<br>&gt;&gt; subclasses... I think...<br>&gt;&gt;<br>&gt;&gt; Anyway, I&#39;m starting to wonder if some code I&#39;m trying to write might be<br>&gt;&gt; impossible without either this feature, or some/all of the stuff from the<br>&gt;&gt; generics manifesto. So put me down as, in principle, a strong +1 (pending<br>&gt;&gt; details of the proposal when it actually gets written for Swift 10).<br>&gt;&gt;<br>&gt;&gt; - Dave Sweeris<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161012/1bd26e0b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>Dynamic Class/Struct Definition At Run Time</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>October 12, 2016 at 06:00:00pm</p></header><div class="content"><p>Hi Xiaodi,<br>please read in-line, thank you.<br></p><p>&gt; On 12 Oct 2016, at 15:58, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Wed, Oct 12, 2016 at 7:47 AM, Ted F.A. van Gaalen &lt;tedvgiosdev at gmail.com &lt;mailto:tedvgiosdev at gmail.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On 11 Oct 2016, at 23:04, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Reflection is likely to be tackled in Swift 5, no?<br>&gt; <br>&gt; I&#39;d think you don’t need reflection that much, because defining<br>&gt; dynamic classes (and other entities) are solely incremental compiler<br>&gt; tasks, for which it can use  previously compiled meta reference<br>&gt; information (xref symbols etc). <br>&gt; <br>&gt; Imho in that perspective it is more or less independent<br>&gt; of reflection. Reflection is as far as I can see is more intended to offer <br>&gt; meta information at the programming level.? <br>&gt; <br>&gt;&gt; So realistically, this could be on track for Swift 6 or 7.<br>&gt; <br>&gt; As already written, there is no timeframe/deadline for this idea, it is just an idea, <br>&gt; not a proposal (yet).<br>&gt; <br>&gt;&gt; Let&#39;s postpone discussion until then.<br>&gt; <br>&gt; Feel free to do so, but why postponing having ideas and discussing them?<br>&gt; <br>&gt; The core team has requested that discussions be focused on the priorities identified for the current phase of Swift 4. There&#39;s a sound rationale for this request. Per Chris: &quot;The community benefits from keeping focus on a limited number of topics, because if there is too much going on, no one can follow and keep track of it all.  It is important for the core team to be involved in key discussions up front.  In the Swift 3 cycle, it was problematic that many folks had no time to follow the threads until after the review period completed.”<br></p><p>You are pulling the above out of context hereunder: <br>&gt; <br>&gt; I&#39;m sure many people have ideas about dynamic facilities in Swift, as do we all about other ideas, and many have been trying to be respectful of this new proposed process. I think we can all agree that maximum participation and the best solutions are most likely when everyone stays on the same page with regard to the process by which we go about these discussions. No need to postpone having ideas about Swift or talking about them with your friends and colleagues, but let&#39;s respect the core team&#39;s urging to postpone discussing them on this particular list for the reasons identified above.<br>&gt; <br>1.  You are not a member of the core team, far from it, sorry.<br>     Don’t think for them, they can do that quite well themselves. and thus: <br></p><p>2.  If the core team would have problems with me bringing forward this topic, <br>      they might/will inform me that this is undesired, in that case I’ll stop writing about it. <br></p><p>3. My current subject is an extension spin-off from the topic “associated objects”, wherein<br>    “extending the language&quot; is discussed. Meta Programming and Adding Dynamic Features to Swift <br>    are currently strongly in focus and is surely one of the most important things to bring to Swift in the near future!<br></p><p>4. read this on Swift.org &lt;http://swift.org/&gt;: <br>&quot;Proposing New Features&quot;<br></p><p>&quot;New features or directions for the Swift language can come from anyone with a good idea.&quot;<br></p><p>&quot;Open discussion and iteration over the ideas in a public forum is essential to reaching the best possible solutions.&quot;<br></p><p>also <br></p><p>&quot;Everyone is welcome to propose, discuss, and review ideas to improve the Swift language and standard library on the swift-evolution mailing list &lt;https://swift.org/community/#swift-evolution&gt;.” <br></p><p><br></p><p>5. If a certain topic is not interesting for you personally then simply ignore it and don’t react.<br></p><p>6. Well meant advice: be a little less lofty,<br> <br></p><p>Kind Regards <br>TedvG<br></p><p><br>&gt; In this case for instance, thinking about dynamic facilities, will presumably <br>&gt; also influence thinking about reflection and vice versa. <br>&gt; Thinking “wider” and “further” broadens the horizon of course.<br>&gt; For example. what about a compiler/interpreter self improving based on artificial intelligence? is this 2016? <br>&gt; So one can (should) do both: that is think in small steps, like discussing<br>&gt; “just”  language elements and at the same time have an eye (or two) for the <br>&gt; broader picture. If one concentrates too much on the direct path in front, one might<br>&gt; not see other paths or what lays further ahead, which limits progress. <br>&gt; <br>&gt; ————————————————<br>&gt; Let me write a small cartoon here, just intended as a little bit of humour just to illustrate this:<br>&gt; <br>&gt; A few thousand years ago, two very nice beings ( just returned from attending a<br>&gt; very primitive and awkward election debate, still shivering),  looking at a pair <br>&gt; of fairly round stone slabs with a hole in the centre.<br>&gt; <br>&gt; “What’s this ?, Why round? why the holes? Nice job, but what is it? Is it art?”<br>&gt; <br>&gt; “Errrrhmm, well.. I might call it ‘Wheelz&#39;, not sure yet, you can use two of more of them<br>&gt; underneath or aside of things you’d like to move around more easily…<br>&gt; with less friction, which was a hell of a drag anyway.&quot;<br>&gt; <br>&gt; The other guy walks around it, apparently deeply thinking about it. <br>&gt; after some silence he says:<br>&gt; “Aha… hmm.. well.. Oh, i see, yeah, yep, that’s kinda cool.. might be useful. <br>&gt; But let’’s postpone discussing it until  ball-bearings have been invented. “<br>&gt; ————————————————<br>&gt; <br>&gt; hmmm, I really have too much time… :o)<br>&gt; <br>&gt; Kind Regards<br>&gt; Ted<br>&gt; <br>&gt; <br>&gt; <br>&gt;  <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Tue, Oct 11, 2016 at 15:59 David Sweeris via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Oct 11, 2016, at 12:40, Anton Zhilin via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Hello Ted,<br>&gt;&gt;&gt; First of all, this topic belongs to reflection, which is specifically stated to be out of scope of Swift 4 Phase 1. So all considerations are purely theoretical for now.<br>&gt;&gt;&gt; That said, I also thought about this problem. The best I could imagine is something along the following lines:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; var builder = StructBuilder(name: &quot;Person&quot;)<br>&gt;&gt;&gt; builder.addProperty(name: &quot;name&quot;, type: String.self)<br>&gt;&gt;&gt; builder.addProperty(name: &quot;age&quot;, type: Int.self)<br>&gt;&gt;&gt; builder.addComputedProperty(name: &quot;description&quot;, getter: { (this: Any) -&gt; String in ... })<br>&gt;&gt;&gt; builder.addComformance(CustomStringConvertible.self)<br>&gt;&gt;&gt; let type: Any.Type = builder.build()<br>&gt;&gt;&gt; Obviously, to interact with such dynamic types and their objects, we need the whole working reflection system that we don’t have right now.<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I *think* that&#39;s only true for non-generic code, and types that aren&#39;t subclasses... I think...<br>&gt;&gt; <br>&gt;&gt; Anyway, I&#39;m starting to wonder if some code I&#39;m trying to write might be impossible without either this feature, or some/all of the stuff from the generics manifesto. So put me down as, in principle, a strong +1 (pending details of the proposal when it actually gets written for Swift 10).<br>&gt;&gt; <br>&gt;&gt; - Dave Sweeris <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161012/f6a9ef26/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Dynamic Class/Struct Definition At Run Time</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>October 12, 2016 at 11:00:00am</p></header><div class="content"><p>On Wed, Oct 12, 2016 at 11:32 AM, Ted F.A. van Gaalen &lt;tedvgiosdev at gmail.com<br>&gt; wrote:<br></p><p>&gt; Hi Xiaodi,<br>&gt; please read in-line, thank you.<br>&gt;<br>&gt; On 12 Oct 2016, at 15:58, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; On Wed, Oct 12, 2016 at 7:47 AM, Ted F.A. van Gaalen &lt;<br>&gt; tedvgiosdev at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On 11 Oct 2016, at 23:04, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Reflection is likely to be tackled in Swift 5, no?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I&#39;d think you don’t need reflection that much, because defining<br>&gt;&gt; dynamic classes (and other entities) are solely incremental compiler<br>&gt;&gt; tasks, for which it can use  previously compiled meta reference<br>&gt;&gt; information (xref symbols etc).<br>&gt;&gt;<br>&gt;&gt; Imho in that perspective it is more or less independent<br>&gt;&gt; of reflection. Reflection is as far as I can see is more intended to<br>&gt;&gt; offer<br>&gt;&gt; meta information at the programming level.?<br>&gt;&gt;<br>&gt;&gt; So realistically, this could be on track for Swift 6 or 7.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; As already written, there is no timeframe/deadline for this idea, it is<br>&gt;&gt; just an idea,<br>&gt;&gt; not a proposal (yet).<br>&gt;&gt;<br>&gt;&gt; Let&#39;s postpone discussion until then.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Feel free to do so, but why postponing having ideas and discussing them?<br>&gt;&gt;<br>&gt;<br>&gt; The core team has requested that discussions be focused on the priorities<br>&gt; identified for the current phase of Swift 4. There&#39;s a sound rationale for<br>&gt; this request. Per Chris: &quot;The community benefits from keeping focus on a<br>&gt; limited number of topics, because if there is too much going on, no one can<br>&gt; follow and keep track of it all. It is important for the core team to be<br>&gt; involved in key discussions up front. In the Swift 3 cycle, it was<br>&gt; problematic that many folks had no time to follow the threads until after<br>&gt; the review period completed.”<br>&gt;<br>&gt;<br>&gt; You are pulling the above out of context hereunder:<br>&gt;<br>&gt;<br>&gt; I&#39;m sure many people have ideas about dynamic facilities in Swift, as do<br>&gt; we all about other ideas, and many have been trying to be respectful of<br>&gt; this new proposed process. I think we can all agree that maximum<br>&gt; participation and the best solutions are most likely when everyone stays on<br>&gt; the same page with regard to the process by which we go about these<br>&gt; discussions. No need to postpone having ideas about Swift or talking about<br>&gt; them with your friends and colleagues, but let&#39;s respect the core team&#39;s<br>&gt; urging to postpone discussing them on this particular list for the reasons<br>&gt; identified above.<br>&gt;<br>&gt; 1.  You are not a member of the core team, far from it, sorry.<br>&gt;      Don’t think for them, they can do that quite well themselves. and<br>&gt; thus:<br>&gt;<br></p><p>I&#39;m not trying to speak for the core team; sorry if I&#39;m giving off that<br>impression.<br></p><p><br>&gt; 2.  If the core team would have problems with me bringing forward this<br>&gt; topic,<br>&gt;       they might/will inform me that this is undesired, in that case I’ll<br>&gt; stop writing about it.<br>&gt;<br></p><p>As a member of the community, I&#39;m voicing *my* concern that this is not an<br>opportune time to discuss this topic. It&#39;s up to all participants, not just<br>the core team, to try to make sure that the evolution process works<br>effectively. So far, in the context of other threads, other community<br>members have also been active in pointing out when topics stray too far<br>from the suggested areas of focus. I think this is good practice and I&#39;m<br>trying to contribute to that effort.<br></p><p>3. My current subject is an extension spin-off from the topic “associated<br>&gt; objects”, wherein<br>&gt;     “extending the language&quot; is discussed. Meta Programming and Adding<br>&gt; Dynamic Features to Swift<br>&gt;     are currently strongly in focus and is surely one of the most<br>&gt; important things to bring to Swift in the near future!<br>&gt;<br></p><p>I&#39;m sorry, but this is not true. The list of focus topics for this phase of<br>Swift is on the swift-evolution GitHub project readme, and this is not one<br>of them.<br></p><p>4. read this on Swift.org:<br>&gt; &quot;Proposing New Features&quot;<br>&gt;<br>&gt; &quot;New features or directions for the Swift language can come from anyone<br>&gt; with a good idea.&quot;<br>&gt;<br>&gt; &quot;Open discussion and iteration over the ideas in a public forum is<br>&gt; essential to reaching the best possible solutions.&quot;<br>&gt; also<br>&gt;<br>&gt; &quot;Everyone is welcome to propose, discuss, and review ideas to improve the<br>&gt; Swift language and standard library on the swift-evolution mailing list<br>&gt; &lt;https://swift.org/community/#swift-evolution&gt;.”<br>&gt;<br>&gt;<br>&gt;<br>&gt; 5. If a certain topic is not interesting for you personally then simply<br>&gt; ignore it and don’t react.<br>&gt;<br></p><p>That is not what I&#39;m saying. I&#39;m very interested in this topic. However,<br>I&#39;m concerned that neither I nor others with intense interest can<br>contribute meaningfully at this phase, because the suggested focus for the<br>moment is not on this topic. I would not want to ignore the topic at all.<br></p><p><br>&gt; 6. Well meant advice: be a little less lofty,<br>&gt;<br>&gt;<br>&gt; Kind Regards<br>&gt; TedvG<br>&gt;<br>&gt;<br>&gt; In this case for instance, thinking about dynamic facilities, will<br>&gt;&gt; presumably<br>&gt;&gt; also influence thinking about reflection and vice versa.<br>&gt;&gt; Thinking “wider” and “further” broadens the horizon of course.<br>&gt;&gt; For example. what about a compiler/interpreter self improving based on<br>&gt;&gt; artificial intelligence? is this 2016?<br>&gt;&gt; So one can (should) do both: that is think in small steps, like discussing<br>&gt;&gt; “just”  language elements and at the same time have an eye (or two) for<br>&gt;&gt; the<br>&gt;&gt; broader picture. If one concentrates too much on the direct path in<br>&gt;&gt; front, one might<br>&gt;&gt; not see other paths or what lays further ahead, which limits progress.<br>&gt;&gt;<br>&gt;&gt; ————————————————<br>&gt;&gt; Let me write a small cartoon here, just intended as a little bit of<br>&gt;&gt; humour just to illustrate this:<br>&gt;&gt;<br>&gt;&gt; A few thousand years ago, two very nice beings ( just returned from<br>&gt;&gt; attending a<br>&gt;&gt; very primitive and awkward election debate, still shivering),  looking at<br>&gt;&gt; a pair<br>&gt;&gt; of fairly round stone slabs with a hole in the centre.<br>&gt;&gt;<br>&gt;&gt; “What’s this ?, Why round? why the holes? Nice job, but what is it? Is it<br>&gt;&gt; art?”<br>&gt;&gt;<br>&gt;&gt; “Errrrhmm, well.. I might call it ‘Wheelz&#39;, not sure yet, you can use two<br>&gt;&gt; of more of them<br>&gt;&gt; underneath or aside of things you’d like to move around more easily…<br>&gt;&gt; with less friction, which was a hell of a drag anyway.&quot;<br>&gt;&gt;<br>&gt;&gt; The other guy walks around it, apparently deeply thinking about it.<br>&gt;&gt; after some silence he says:<br>&gt;&gt; “Aha… hmm.. well.. Oh, i see, yeah, yep, that’s kinda cool.. might be<br>&gt;&gt; useful.<br>&gt;&gt; But let’’s postpone discussing it until  ball-bearings have been<br>&gt;&gt; invented. “<br>&gt;&gt; ————————————————<br>&gt;&gt;<br>&gt;&gt; hmmm, I really have too much time… :o)<br>&gt;&gt;<br>&gt;&gt; Kind Regards<br>&gt;&gt; Ted<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Tue, Oct 11, 2016 at 15:59 David Sweeris via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Oct 11, 2016, at 12:40, Anton Zhilin via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Hello Ted,<br>&gt;&gt;&gt; First of all, this topic belongs to reflection, which is specifically<br>&gt;&gt;&gt; stated to be out of scope of Swift 4 Phase 1. So all considerations are<br>&gt;&gt;&gt; purely theoretical for now.<br>&gt;&gt;&gt; That said, I also thought about this problem. The best I could imagine<br>&gt;&gt;&gt; is something along the following lines:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; var builder = StructBuilder(name: &quot;Person&quot;)<br>&gt;&gt;&gt; builder.addProperty(name: &quot;name&quot;, type: String.self)<br>&gt;&gt;&gt; builder.addProperty(name: &quot;age&quot;, type: Int.self)<br>&gt;&gt;&gt; builder.addComputedProperty(name: &quot;description&quot;, getter: { (this: Any) -&gt; String in ... })<br>&gt;&gt;&gt; builder.addComformance(CustomStringConvertible.self)let type: Any.Type = builder.build()<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Obviously, to interact with such dynamic types and their objects, we<br>&gt;&gt;&gt; need the whole working reflection system that we don’t have right now.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I *think* that&#39;s only true for non-generic code, and types that aren&#39;t<br>&gt;&gt;&gt; subclasses... I think...<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Anyway, I&#39;m starting to wonder if some code I&#39;m trying to write might be<br>&gt;&gt;&gt; impossible without either this feature, or some/all of the stuff from the<br>&gt;&gt;&gt; generics manifesto. So put me down as, in principle, a strong +1 (pending<br>&gt;&gt;&gt; details of the proposal when it actually gets written for Swift 10).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; - Dave Sweeris<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161012/af01891b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>Dynamic Class/Struct Definition At Run Time</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>October 12, 2016 at 06:00:00pm</p></header><div class="content"><p>Dear Xiaoid<br>I still don’t agree with you, there should be some flexibility, things should live<br>and also, if we adhere to this list you refer to on Github, than no new<br>topics would be discussable...<br>I am sorry if I wrote a bit harsh to you.<br>Kind Regards <br>尊敬的<br></p><p>Ted<br></p><p>&gt; On 12 Oct 2016, at 18:41, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Wed, Oct 12, 2016 at 11:32 AM, Ted F.A. van Gaalen &lt;tedvgiosdev at gmail.com &lt;mailto:tedvgiosdev at gmail.com&gt;&gt; wrote:<br>&gt; Hi Xiaodi,<br>&gt; please read in-line, thank you.<br>&gt; <br>&gt;&gt; On 12 Oct 2016, at 15:58, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Wed, Oct 12, 2016 at 7:47 AM, Ted F.A. van Gaalen &lt;tedvgiosdev at gmail.com &lt;mailto:tedvgiosdev at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On 11 Oct 2016, at 23:04, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Reflection is likely to be tackled in Swift 5, no?<br>&gt;&gt; <br>&gt;&gt; I&#39;d think you don’t need reflection that much, because defining<br>&gt;&gt; dynamic classes (and other entities) are solely incremental compiler<br>&gt;&gt; tasks, for which it can use  previously compiled meta reference<br>&gt;&gt; information (xref symbols etc). <br>&gt;&gt; <br>&gt;&gt; Imho in that perspective it is more or less independent<br>&gt;&gt; of reflection. Reflection is as far as I can see is more intended to offer <br>&gt;&gt; meta information at the programming level.? <br>&gt;&gt; <br>&gt;&gt;&gt; So realistically, this could be on track for Swift 6 or 7.<br>&gt;&gt; <br>&gt;&gt; As already written, there is no timeframe/deadline for this idea, it is just an idea, <br>&gt;&gt; not a proposal (yet).<br>&gt;&gt; <br>&gt;&gt;&gt; Let&#39;s postpone discussion until then.<br>&gt;&gt; <br>&gt;&gt; Feel free to do so, but why postponing having ideas and discussing them?<br>&gt;&gt; <br>&gt;&gt; The core team has requested that discussions be focused on the priorities identified for the current phase of Swift 4. There&#39;s a sound rationale for this request. Per Chris: &quot;The community benefits from keeping focus on a limited number of topics, because if there is too much going on, no one can follow and keep track of it all.  It is important for the core team to be involved in key discussions up front.  In the Swift 3 cycle, it was problematic that many folks had no time to follow the threads until after the review period completed.”<br>&gt; <br>&gt; You are pulling the above out of context hereunder: <br>&gt;&gt; <br>&gt;&gt; I&#39;m sure many people have ideas about dynamic facilities in Swift, as do we all about other ideas, and many have been trying to be respectful of this new proposed process. I think we can all agree that maximum participation and the best solutions are most likely when everyone stays on the same page with regard to the process by which we go about these discussions. No need to postpone having ideas about Swift or talking about them with your friends and colleagues, but let&#39;s respect the core team&#39;s urging to postpone discussing them on this particular list for the reasons identified above.<br>&gt;&gt; <br>&gt; <br>&gt; 1.  You are not a member of the core team, far from it, sorry.<br>&gt;      Don’t think for them, they can do that quite well themselves. and thus: <br>&gt; <br>&gt; I&#39;m not trying to speak for the core team; sorry if I&#39;m giving off that impression.<br>&gt;  <br>&gt; 2.  If the core team would have problems with me bringing forward this topic, <br>&gt;       they might/will inform me that this is undesired, in that case I’ll stop writing about it. <br>&gt; <br>&gt; As a member of the community, I&#39;m voicing *my* concern that this is not an opportune time to discuss this topic. It&#39;s up to all participants, not just the core team, to try to make sure that the evolution process works effectively. So far, in the context of other threads, other community members have also been active in pointing out when topics stray too far from the suggested areas of focus. I think this is good practice and I&#39;m trying to contribute to that effort.<br>&gt; <br>&gt; 3. My current subject is an extension spin-off from the topic “associated objects”, wherein<br>&gt;     “extending the language&quot; is discussed. Meta Programming and Adding Dynamic Features to Swift <br>&gt;     are currently strongly in focus and is surely one of the most important things to bring to Swift in the near future!<br>&gt; <br>&gt; I&#39;m sorry, but this is not true. The list of focus topics for this phase of Swift is on the swift-evolution GitHub project readme, and this is not one of them.<br>&gt; <br>&gt; 4. read this on Swift.org &lt;http://swift.org/&gt;: <br>&gt; &quot;Proposing New Features&quot;<br>&gt; <br>&gt; &quot;New features or directions for the Swift language can come from anyone with a good idea.&quot;<br>&gt; <br>&gt; &quot;Open discussion and iteration over the ideas in a public forum is essential to reaching the best possible solutions.&quot;<br>&gt; <br>&gt; also <br>&gt; <br>&gt; &quot;Everyone is welcome to propose, discuss, and review ideas to improve the Swift language and standard library on the swift-evolution mailing list &lt;https://swift.org/community/#swift-evolution&gt;.” <br>&gt; <br>&gt; <br>&gt; <br>&gt; 5. If a certain topic is not interesting for you personally then simply ignore it and don’t react.<br>&gt; <br>&gt; That is not what I&#39;m saying. I&#39;m very interested in this topic. However, I&#39;m concerned that neither I nor others with intense interest can contribute meaningfully at this phase, because the suggested focus for the moment is not on this topic. I would not want to ignore the topic at all.<br>&gt;  <br>&gt; 6. Well meant advice: be a little less lofty,<br>&gt;  <br>&gt; <br>&gt; Kind Regards <br>&gt; TedvG<br>&gt; <br>&gt; <br>&gt;&gt; In this case for instance, thinking about dynamic facilities, will presumably <br>&gt;&gt; also influence thinking about reflection and vice versa. <br>&gt;&gt; Thinking “wider” and “further” broadens the horizon of course.<br>&gt;&gt; For example. what about a compiler/interpreter self improving based on artificial intelligence? is this 2016? <br>&gt;&gt; So one can (should) do both: that is think in small steps, like discussing<br>&gt;&gt; “just”  language elements and at the same time have an eye (or two) for the <br>&gt;&gt; broader picture. If one concentrates too much on the direct path in front, one might<br>&gt;&gt; not see other paths or what lays further ahead, which limits progress. <br>&gt;&gt; <br>&gt;&gt; ————————————————<br>&gt;&gt; Let me write a small cartoon here, just intended as a little bit of humour just to illustrate this:<br>&gt;&gt; <br>&gt;&gt; A few thousand years ago, two very nice beings ( just returned from attending a<br>&gt;&gt; very primitive and awkward election debate, still shivering),  looking at a pair <br>&gt;&gt; of fairly round stone slabs with a hole in the centre.<br>&gt;&gt; <br>&gt;&gt; “What’s this ?, Why round? why the holes? Nice job, but what is it? Is it art?”<br>&gt;&gt; <br>&gt;&gt; “Errrrhmm, well.. I might call it ‘Wheelz&#39;, not sure yet, you can use two of more of them<br>&gt;&gt; underneath or aside of things you’d like to move around more easily…<br>&gt;&gt; with less friction, which was a hell of a drag anyway.&quot;<br>&gt;&gt; <br>&gt;&gt; The other guy walks around it, apparently deeply thinking about it. <br>&gt;&gt; after some silence he says:<br>&gt;&gt; “Aha… hmm.. well.. Oh, i see, yeah, yep, that’s kinda cool.. might be useful. <br>&gt;&gt; But let’’s postpone discussing it until  ball-bearings have been invented. “<br>&gt;&gt; ————————————————<br>&gt;&gt; <br>&gt;&gt; hmmm, I really have too much time… :o)<br>&gt;&gt; <br>&gt;&gt; Kind Regards<br>&gt;&gt; Ted<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Tue, Oct 11, 2016 at 15:59 David Sweeris via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Oct 11, 2016, at 12:40, Anton Zhilin via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hello Ted,<br>&gt;&gt;&gt;&gt; First of all, this topic belongs to reflection, which is specifically stated to be out of scope of Swift 4 Phase 1. So all considerations are purely theoretical for now.<br>&gt;&gt;&gt;&gt; That said, I also thought about this problem. The best I could imagine is something along the following lines:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; var builder = StructBuilder(name: &quot;Person&quot;)<br>&gt;&gt;&gt;&gt; builder.addProperty(name: &quot;name&quot;, type: String.self)<br>&gt;&gt;&gt;&gt; builder.addProperty(name: &quot;age&quot;, type: Int.self)<br>&gt;&gt;&gt;&gt; builder.addComputedProperty(name: &quot;description&quot;, getter: { (this: Any) -&gt; String in ... })<br>&gt;&gt;&gt;&gt; builder.addComformance(CustomStringConvertible.self)<br>&gt;&gt;&gt;&gt; let type: Any.Type = builder.build()<br>&gt;&gt;&gt;&gt; Obviously, to interact with such dynamic types and their objects, we need the whole working reflection system that we don’t have right now.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I *think* that&#39;s only true for non-generic code, and types that aren&#39;t subclasses... I think...<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Anyway, I&#39;m starting to wonder if some code I&#39;m trying to write might be impossible without either this feature, or some/all of the stuff from the generics manifesto. So put me down as, in principle, a strong +1 (pending details of the proposal when it actually gets written for Swift 10).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Dave Sweeris <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161012/e3e3b213/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Dynamic Class/Struct Definition At Run Time</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>October 12, 2016 at 10:00:00am</p></header><div class="content"><p>This is utterly ridiculous. Chris Lattner and the other core team members<br>posted repeatedly at the beginning of the Swift 3.x/4 development cycle<br>asking us expressly to keep the discussion focused on a number of specific<br>topics. Not only have you repeatedly ignored that request, now you are<br>being condescending and rude to a community member who has put in<br>tremendous effort over the last few months trying to make swift-evolution a<br>better place. Please consider whether or not disregarding the core team&#39;s<br>wishes in this matter is really the best way to show respect for the<br>community and the project.<br></p><p>Best regards,<br>Austin<br></p><p>On Wed, Oct 12, 2016 at 9:54 AM, Ted F.A. van Gaalen via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Dear Xiaoid<br>&gt; I still don’t agree with you, there should be some flexibility, things<br>&gt; should live<br>&gt; and also, if we adhere to this list you refer to on Github, than no new<br>&gt; topics would be discussable...<br>&gt; I am sorry if I wrote a bit harsh to you.<br>&gt; Kind Regards<br>&gt;<br>&gt; 尊敬的<br>&gt;<br>&gt;<br>&gt; Ted<br>&gt;<br>&gt; On 12 Oct 2016, at 18:41, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; On Wed, Oct 12, 2016 at 11:32 AM, Ted F.A. van Gaalen &lt;<br>&gt; tedvgiosdev at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; Hi Xiaodi,<br>&gt;&gt; please read in-line, thank you.<br>&gt;&gt;<br>&gt;&gt; On 12 Oct 2016, at 15:58, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Wed, Oct 12, 2016 at 7:47 AM, Ted F.A. van Gaalen &lt;<br>&gt;&gt; tedvgiosdev at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On 11 Oct 2016, at 23:04, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Reflection is likely to be tackled in Swift 5, no?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I&#39;d think you don’t need reflection that much, because defining<br>&gt;&gt;&gt; dynamic classes (and other entities) are solely incremental compiler<br>&gt;&gt;&gt; tasks, for which it can use  previously compiled meta reference<br>&gt;&gt;&gt; information (xref symbols etc).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Imho in that perspective it is more or less independent<br>&gt;&gt;&gt; of reflection. Reflection is as far as I can see is more intended to<br>&gt;&gt;&gt; offer<br>&gt;&gt;&gt; meta information at the programming level.?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; So realistically, this could be on track for Swift 6 or 7.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; As already written, there is no timeframe/deadline for this idea, it is<br>&gt;&gt;&gt; just an idea,<br>&gt;&gt;&gt; not a proposal (yet).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Let&#39;s postpone discussion until then.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Feel free to do so, but why postponing having ideas and discussing them?<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; The core team has requested that discussions be focused on the priorities<br>&gt;&gt; identified for the current phase of Swift 4. There&#39;s a sound rationale for<br>&gt;&gt; this request. Per Chris: &quot;The community benefits from keeping focus on a<br>&gt;&gt; limited number of topics, because if there is too much going on, no one can<br>&gt;&gt; follow and keep track of it all. It is important for the core team to be<br>&gt;&gt; involved in key discussions up front. In the Swift 3 cycle, it was<br>&gt;&gt; problematic that many folks had no time to follow the threads until after<br>&gt;&gt; the review period completed.”<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; You are pulling the above out of context hereunder:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I&#39;m sure many people have ideas about dynamic facilities in Swift, as do<br>&gt;&gt; we all about other ideas, and many have been trying to be respectful of<br>&gt;&gt; this new proposed process. I think we can all agree that maximum<br>&gt;&gt; participation and the best solutions are most likely when everyone stays on<br>&gt;&gt; the same page with regard to the process by which we go about these<br>&gt;&gt; discussions. No need to postpone having ideas about Swift or talking about<br>&gt;&gt; them with your friends and colleagues, but let&#39;s respect the core team&#39;s<br>&gt;&gt; urging to postpone discussing them on this particular list for the reasons<br>&gt;&gt; identified above.<br>&gt;&gt;<br>&gt;&gt; 1.  You are not a member of the core team, far from it, sorry.<br>&gt;&gt;      Don’t think for them, they can do that quite well themselves. and<br>&gt;&gt; thus:<br>&gt;&gt;<br>&gt;<br>&gt; I&#39;m not trying to speak for the core team; sorry if I&#39;m giving off that<br>&gt; impression.<br>&gt;<br>&gt;<br>&gt;&gt; 2.  If the core team would have problems with me bringing forward this<br>&gt;&gt; topic,<br>&gt;&gt;       they might/will inform me that this is undesired, in that case<br>&gt;&gt; I’ll stop writing about it.<br>&gt;&gt;<br>&gt;<br>&gt; As a member of the community, I&#39;m voicing *my* concern that this is not an<br>&gt; opportune time to discuss this topic. It&#39;s up to all participants, not just<br>&gt; the core team, to try to make sure that the evolution process works<br>&gt; effectively. So far, in the context of other threads, other community<br>&gt; members have also been active in pointing out when topics stray too far<br>&gt; from the suggested areas of focus. I think this is good practice and I&#39;m<br>&gt; trying to contribute to that effort.<br>&gt;<br>&gt; 3. My current subject is an extension spin-off from the topic “associated<br>&gt;&gt; objects”, wherein<br>&gt;&gt;     “extending the language&quot; is discussed. Meta Programming and Adding<br>&gt;&gt; Dynamic Features to Swift<br>&gt;&gt;     are currently strongly in focus and is surely one of the most<br>&gt;&gt; important things to bring to Swift in the near future!<br>&gt;&gt;<br>&gt;<br>&gt; I&#39;m sorry, but this is not true. The list of focus topics for this phase<br>&gt; of Swift is on the swift-evolution GitHub project readme, and this is not<br>&gt; one of them.<br>&gt;<br>&gt; 4. read this on Swift.org &lt;http://swift.org/&gt;:<br>&gt;&gt; &quot;Proposing New Features&quot;<br>&gt;&gt;<br>&gt;&gt; &quot;New features or directions for the Swift language can come from anyone<br>&gt;&gt; with a good idea.&quot;<br>&gt;&gt;<br>&gt;&gt; &quot;Open discussion and iteration over the ideas in a public forum is<br>&gt;&gt; essential to reaching the best possible solutions.&quot;<br>&gt;&gt; also<br>&gt;&gt;<br>&gt;&gt; &quot;Everyone is welcome to propose, discuss, and review ideas to improve the<br>&gt;&gt; Swift language and standard library on the swift-evolution mailing list<br>&gt;&gt; &lt;https://swift.org/community/#swift-evolution&gt;.”<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; 5. If a certain topic is not interesting for you personally then simply<br>&gt;&gt; ignore it and don’t react.<br>&gt;&gt;<br>&gt;<br>&gt; That is not what I&#39;m saying. I&#39;m very interested in this topic. However,<br>&gt; I&#39;m concerned that neither I nor others with intense interest can<br>&gt; contribute meaningfully at this phase, because the suggested focus for the<br>&gt; moment is not on this topic. I would not want to ignore the topic at all.<br>&gt;<br>&gt;<br>&gt;&gt; 6. Well meant advice: be a little less lofty,<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Kind Regards<br>&gt;&gt; TedvG<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; In this case for instance, thinking about dynamic facilities, will<br>&gt;&gt;&gt; presumably<br>&gt;&gt;&gt; also influence thinking about reflection and vice versa.<br>&gt;&gt;&gt; Thinking “wider” and “further” broadens the horizon of course.<br>&gt;&gt;&gt; For example. what about a compiler/interpreter self improving based on<br>&gt;&gt;&gt; artificial intelligence? is this 2016?<br>&gt;&gt;&gt; So one can (should) do both: that is think in small steps, like<br>&gt;&gt;&gt; discussing<br>&gt;&gt;&gt; “just”  language elements and at the same time have an eye (or two) for<br>&gt;&gt;&gt; the<br>&gt;&gt;&gt; broader picture. If one concentrates too much on the direct path in<br>&gt;&gt;&gt; front, one might<br>&gt;&gt;&gt; not see other paths or what lays further ahead, which limits progress.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; ————————————————<br>&gt;&gt;&gt; Let me write a small cartoon here, just intended as a little bit of<br>&gt;&gt;&gt; humour just to illustrate this:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; A few thousand years ago, two very nice beings ( just returned from<br>&gt;&gt;&gt; attending a<br>&gt;&gt;&gt; very primitive and awkward election debate, still shivering),  looking<br>&gt;&gt;&gt; at a pair<br>&gt;&gt;&gt; of fairly round stone slabs with a hole in the centre.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; “What’s this ?, Why round? why the holes? Nice job, but what is it? Is<br>&gt;&gt;&gt; it art?”<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; “Errrrhmm, well.. I might call it ‘Wheelz&#39;, not sure yet, you can use<br>&gt;&gt;&gt; two of more of them<br>&gt;&gt;&gt; underneath or aside of things you’d like to move around more easily…<br>&gt;&gt;&gt; with less friction, which was a hell of a drag anyway.&quot;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The other guy walks around it, apparently deeply thinking about it.<br>&gt;&gt;&gt; after some silence he says:<br>&gt;&gt;&gt; “Aha… hmm.. well.. Oh, i see, yeah, yep, that’s kinda cool.. might be<br>&gt;&gt;&gt; useful.<br>&gt;&gt;&gt; But let’’s postpone discussing it until  ball-bearings have been<br>&gt;&gt;&gt; invented. “<br>&gt;&gt;&gt; ————————————————<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; hmmm, I really have too much time… :o)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Kind Regards<br>&gt;&gt;&gt; Ted<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Tue, Oct 11, 2016 at 15:59 David Sweeris via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Oct 11, 2016, at 12:40, Anton Zhilin via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Hello Ted,<br>&gt;&gt;&gt;&gt; First of all, this topic belongs to reflection, which is specifically<br>&gt;&gt;&gt;&gt; stated to be out of scope of Swift 4 Phase 1. So all considerations are<br>&gt;&gt;&gt;&gt; purely theoretical for now.<br>&gt;&gt;&gt;&gt; That said, I also thought about this problem. The best I could imagine<br>&gt;&gt;&gt;&gt; is something along the following lines:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; var builder = StructBuilder(name: &quot;Person&quot;)<br>&gt;&gt;&gt;&gt; builder.addProperty(name: &quot;name&quot;, type: String.self)<br>&gt;&gt;&gt;&gt; builder.addProperty(name: &quot;age&quot;, type: Int.self)<br>&gt;&gt;&gt;&gt; builder.addComputedProperty(name: &quot;description&quot;, getter: { (this: Any) -&gt; String in ... })<br>&gt;&gt;&gt;&gt; builder.addComformance(CustomStringConvertible.self)let type: Any.Type = builder.build()<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Obviously, to interact with such dynamic types and their objects, we<br>&gt;&gt;&gt;&gt; need the whole working reflection system that we don’t have right now.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I *think* that&#39;s only true for non-generic code, and types that aren&#39;t<br>&gt;&gt;&gt;&gt; subclasses... I think...<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Anyway, I&#39;m starting to wonder if some code I&#39;m trying to write might<br>&gt;&gt;&gt;&gt; be impossible without either this feature, or some/all of the stuff from<br>&gt;&gt;&gt;&gt; the generics manifesto. So put me down as, in principle, a strong +1<br>&gt;&gt;&gt;&gt; (pending details of the proposal when it actually gets written for Swift<br>&gt;&gt;&gt;&gt; 10).<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; - Dave Sweeris<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161012/3c4046b5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>Dynamic Class/Struct Definition At Run Time</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>October 12, 2016 at 07:00:00pm</p></header><div class="content"><p>Hello Austin<br>I haven’t read that from Chris - Must have overlooked it due to the shear volume on swift-evolution.<br></p><p>Note that as you can see, I have apologised to Xiaodi for being <br>a bit too direct, such as perceived in your culture perhaps.<br></p><p>The Chinese characters should mean “respectful”” btw.<br></p><p>Apart from my perhaps fierce reaction, I am not aware of doing something wrong.<br>and I still find this topic very important. <br></p><p>&gt;&gt; 4. read this on Swift.org &lt;http://swift.org/&gt;: <br>&gt;&gt; &quot;Proposing New Features&quot;<br>&gt;&gt; <br>&gt;&gt; &quot;New features or directions for the Swift language can come from anyone with a good idea.&quot;<br>&gt;&gt; <br>&gt;&gt; &quot;Open discussion and iteration over the ideas in a public forum is essential to reaching the best possible solutions.&quot;<br>&gt;&gt; <br>&gt;&gt; also <br>&gt;&gt; <br>&gt;&gt; &quot;Everyone is welcome to propose, discuss, and review ideas to improve the Swift language and standard library on the swift-evolution mailing list &lt;https://swift.org/community/#swift-evolution&gt;.” <br></p><p>&gt; <br></p><p>Kind Regards<br>TedvG <br></p><p>&gt; On 12 Oct 2016, at 19:00, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt; <br>&gt; This is utterly ridiculous. Chris Lattner and the other core team members posted repeatedly at the beginning of the Swift 3.x/4 development cycle asking us expressly to keep the discussion focused on a number of specific topics. Not only have you repeatedly ignored that request, now you are being condescending and rude to a community member who has put in tremendous effort over the last few months trying to make swift-evolution a better place. Please consider whether or not disregarding the core team&#39;s wishes in this matter is really the best way to show respect for the community and the project.<br>&gt; <br>&gt; Best regards,<br>&gt; Austin<br>&gt; <br>&gt; On Wed, Oct 12, 2016 at 9:54 AM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Dear Xiaoid<br>&gt; I still don’t agree with you, there should be some flexibility, things should live<br>&gt; and also, if we adhere to this list you refer to on Github, than no new<br>&gt; topics would be discussable...<br>&gt; I am sorry if I wrote a bit harsh to you.<br>&gt; Kind Regards <br>&gt; 尊敬的<br>&gt; <br>&gt; Ted<br>&gt; <br>&gt;&gt; On 12 Oct 2016, at 18:41, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Wed, Oct 12, 2016 at 11:32 AM, Ted F.A. van Gaalen &lt;tedvgiosdev at gmail.com &lt;mailto:tedvgiosdev at gmail.com&gt;&gt; wrote:<br>&gt;&gt; Hi Xiaodi,<br>&gt;&gt; please read in-line, thank you.<br>&gt;&gt; <br>&gt;&gt;&gt; On 12 Oct 2016, at 15:58, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Wed, Oct 12, 2016 at 7:47 AM, Ted F.A. van Gaalen &lt;tedvgiosdev at gmail.com &lt;mailto:tedvgiosdev at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 11 Oct 2016, at 23:04, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Reflection is likely to be tackled in Swift 5, no?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;d think you don’t need reflection that much, because defining<br>&gt;&gt;&gt; dynamic classes (and other entities) are solely incremental compiler<br>&gt;&gt;&gt; tasks, for which it can use  previously compiled meta reference<br>&gt;&gt;&gt; information (xref symbols etc). <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Imho in that perspective it is more or less independent<br>&gt;&gt;&gt; of reflection. Reflection is as far as I can see is more intended to offer <br>&gt;&gt;&gt; meta information at the programming level.? <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; So realistically, this could be on track for Swift 6 or 7.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As already written, there is no timeframe/deadline for this idea, it is just an idea, <br>&gt;&gt;&gt; not a proposal (yet).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Let&#39;s postpone discussion until then.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Feel free to do so, but why postponing having ideas and discussing them?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The core team has requested that discussions be focused on the priorities identified for the current phase of Swift 4. There&#39;s a sound rationale for this request. Per Chris: &quot;The community benefits from keeping focus on a limited number of topics, because if there is too much going on, no one can follow and keep track of it all.  It is important for the core team to be involved in key discussions up front.  In the Swift 3 cycle, it was problematic that many folks had no time to follow the threads until after the review period completed.”<br>&gt;&gt; <br>&gt;&gt; You are pulling the above out of context hereunder: <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m sure many people have ideas about dynamic facilities in Swift, as do we all about other ideas, and many have been trying to be respectful of this new proposed process. I think we can all agree that maximum participation and the best solutions are most likely when everyone stays on the same page with regard to the process by which we go about these discussions. No need to postpone having ideas about Swift or talking about them with your friends and colleagues, but let&#39;s respect the core team&#39;s urging to postpone discussing them on this particular list for the reasons identified above.<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 1.  You are not a member of the core team, far from it, sorry.<br>&gt;&gt;      Don’t think for them, they can do that quite well themselves. and thus: <br>&gt;&gt; <br>&gt;&gt; I&#39;m not trying to speak for the core team; sorry if I&#39;m giving off that impression.<br>&gt;&gt;  <br>&gt;&gt; 2.  If the core team would have problems with me bringing forward this topic, <br>&gt;&gt;       they might/will inform me that this is undesired, in that case I’ll stop writing about it. <br>&gt;&gt; <br>&gt;&gt; As a member of the community, I&#39;m voicing *my* concern that this is not an opportune time to discuss this topic. It&#39;s up to all participants, not just the core team, to try to make sure that the evolution process works effectively. So far, in the context of other threads, other community members have also been active in pointing out when topics stray too far from the suggested areas of focus. I think this is good practice and I&#39;m trying to contribute to that effort.<br>&gt;&gt; <br>&gt;&gt; 3. My current subject is an extension spin-off from the topic “associated objects”, wherein<br>&gt;&gt;     “extending the language&quot; is discussed. Meta Programming and Adding Dynamic Features to Swift <br>&gt;&gt;     are currently strongly in focus and is surely one of the most important things to bring to Swift in the near future!<br>&gt;&gt; <br>&gt;&gt; I&#39;m sorry, but this is not true. The list of focus topics for this phase of Swift is on the swift-evolution GitHub project readme, and this is not one of them.<br>&gt;&gt; <br>&gt;&gt; 4. read this on Swift.org &lt;http://swift.org/&gt;: <br>&gt;&gt; &quot;Proposing New Features&quot;<br>&gt;&gt; <br>&gt;&gt; &quot;New features or directions for the Swift language can come from anyone with a good idea.&quot;<br>&gt;&gt; <br>&gt;&gt; &quot;Open discussion and iteration over the ideas in a public forum is essential to reaching the best possible solutions.&quot;<br>&gt;&gt; <br>&gt;&gt; also <br>&gt;&gt; <br>&gt;&gt; &quot;Everyone is welcome to propose, discuss, and review ideas to improve the Swift language and standard library on the swift-evolution mailing list &lt;https://swift.org/community/#swift-evolution&gt;.” <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 5. If a certain topic is not interesting for you personally then simply ignore it and don’t react.<br>&gt;&gt; <br>&gt;&gt; That is not what I&#39;m saying. I&#39;m very interested in this topic. However, I&#39;m concerned that neither I nor others with intense interest can contribute meaningfully at this phase, because the suggested focus for the moment is not on this topic. I would not want to ignore the topic at all.<br>&gt;&gt;  <br>&gt;&gt; 6. Well meant advice: be a little less lofty,<br>&gt;&gt;  <br>&gt;&gt; <br>&gt;&gt; Kind Regards <br>&gt;&gt; TedvG<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; In this case for instance, thinking about dynamic facilities, will presumably <br>&gt;&gt;&gt; also influence thinking about reflection and vice versa. <br>&gt;&gt;&gt; Thinking “wider” and “further” broadens the horizon of course.<br>&gt;&gt;&gt; For example. what about a compiler/interpreter self improving based on artificial intelligence? is this 2016? <br>&gt;&gt;&gt; So one can (should) do both: that is think in small steps, like discussing<br>&gt;&gt;&gt; “just”  language elements and at the same time have an eye (or two) for the <br>&gt;&gt;&gt; broader picture. If one concentrates too much on the direct path in front, one might<br>&gt;&gt;&gt; not see other paths or what lays further ahead, which limits progress. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ————————————————<br>&gt;&gt;&gt; Let me write a small cartoon here, just intended as a little bit of humour just to illustrate this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A few thousand years ago, two very nice beings ( just returned from attending a<br>&gt;&gt;&gt; very primitive and awkward election debate, still shivering),  looking at a pair <br>&gt;&gt;&gt; of fairly round stone slabs with a hole in the centre.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; “What’s this ?, Why round? why the holes? Nice job, but what is it? Is it art?”<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; “Errrrhmm, well.. I might call it ‘Wheelz&#39;, not sure yet, you can use two of more of them<br>&gt;&gt;&gt; underneath or aside of things you’d like to move around more easily…<br>&gt;&gt;&gt; with less friction, which was a hell of a drag anyway.&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The other guy walks around it, apparently deeply thinking about it. <br>&gt;&gt;&gt; after some silence he says:<br>&gt;&gt;&gt; “Aha… hmm.. well.. Oh, i see, yeah, yep, that’s kinda cool.. might be useful. <br>&gt;&gt;&gt; But let’’s postpone discussing it until  ball-bearings have been invented. “<br>&gt;&gt;&gt; ————————————————<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; hmmm, I really have too much time… :o)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Kind Regards<br>&gt;&gt;&gt; Ted<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Tue, Oct 11, 2016 at 15:59 David Sweeris via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Oct 11, 2016, at 12:40, Anton Zhilin via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hello Ted,<br>&gt;&gt;&gt;&gt;&gt; First of all, this topic belongs to reflection, which is specifically stated to be out of scope of Swift 4 Phase 1. So all considerations are purely theoretical for now.<br>&gt;&gt;&gt;&gt;&gt; That said, I also thought about this problem. The best I could imagine is something along the following lines:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; var builder = StructBuilder(name: &quot;Person&quot;)<br>&gt;&gt;&gt;&gt;&gt; builder.addProperty(name: &quot;name&quot;, type: String.self)<br>&gt;&gt;&gt;&gt;&gt; builder.addProperty(name: &quot;age&quot;, type: Int.self)<br>&gt;&gt;&gt;&gt;&gt; builder.addComputedProperty(name: &quot;description&quot;, getter: { (this: Any) -&gt; String in ... })<br>&gt;&gt;&gt;&gt;&gt; builder.addComformance(CustomStringConvertible.self)<br>&gt;&gt;&gt;&gt;&gt; let type: Any.Type = builder.build()<br>&gt;&gt;&gt;&gt;&gt; Obviously, to interact with such dynamic types and their objects, we need the whole working reflection system that we don’t have right now.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I *think* that&#39;s only true for non-generic code, and types that aren&#39;t subclasses... I think...<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Anyway, I&#39;m starting to wonder if some code I&#39;m trying to write might be impossible without either this feature, or some/all of the stuff from the generics manifesto. So put me down as, in principle, a strong +1 (pending details of the proposal when it actually gets written for Swift 10).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Dave Sweeris <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161012/b4978c24/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Dynamic Class/Struct Definition At Run Time</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>October 12, 2016 at 09:00:00pm</p></header><div class="content"><p>Hello Ted,<br></p><p>Please try to understand. As Xiaodi and others have said a few times, it has nothing to do with the topic being important or interesting. The current phase of Swift 4’s development does not allow any extensive discussion or review on topics which do not impact ABI stability:<br></p><p>Stage 1 focuses on the essentials required for source and ABI stability. Features that don&#39;t fundamentally change the ABI of existing language features or imply an ABI-breaking change to the standard library will not be considered in this stage.<br></p><p>&gt; On 12 Oct 2016, at 19:14, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Apart from my perhaps fierce reaction, I am not aware of doing something wrong.<br>&gt; and I still find this topic very important. <br></p><p>David.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161012/932d75d5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>Dynamic Class/Struct Definition At Run Time</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>October 12, 2016 at 10:00:00pm</p></header><div class="content"><p>Hi David,<br></p><p>Thanks for your reply., OK, I think I understand. <br></p><p>It then is a capacity problem, right?<br></p><p>In effect, it means restricting people from bringing perhaps very valuable <br>(not necessarily my contributions) <br>and essential ideas forward, which could play a crucial role improving Swift.<br></p><p>I think this is a very negative aspect. surely bouncing creative people away,<br>dropping their efforts and interest here altogether. <br></p><p>The question then remains, where / when / how can one bring topics <br>that are taking a longer stretch and are not bound to a certain release of Swift,<br>seemingly “outside” of this restriction under attention?<br></p><p>if swift evolution is (currently? ) not open for new ideas/topics:<br>I thought that was the primary purpose of Swift evolution?<br></p><p>Kind Regards<br>Ted<br></p><p><br>&gt; On 12 Oct 2016, at 21:48, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; <br>&gt; Hello Ted,<br>&gt; <br>&gt; Please try to understand. As Xiaodi and others have said a few times, it has nothing to do with the topic being important or interesting. The current phase of Swift 4’s development does not allow any extensive discussion or review on topics which do not impact ABI stability:<br>&gt; <br>&gt; Stage 1 focuses on the essentials required for source and ABI stability. Features that don&#39;t fundamentally change the ABI of existing language features or imply an ABI-breaking change to the standard library will not be considered in this stage.<br>&gt; <br>&gt;&gt; On 12 Oct 2016, at 19:14, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Apart from my perhaps fierce reaction, I am not aware of doing something wrong.<br>&gt;&gt; and I still find this topic very important. <br>&gt; <br>&gt; David.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161012/7e4f7797/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Dynamic Class/Struct Definition At Run Time</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>October 12, 2016 at 11:00:00pm</p></header><div class="content"><p>Hi Ted,<br></p><p>My replies inline:<br></p><p>&gt; On 12 Oct 2016, at 22:37, Ted F.A. van Gaalen &lt;tedvgiosdev at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hi David,<br>&gt; <br>&gt; Thanks for your reply., OK, I think I understand. <br>&gt; <br>&gt; It then is a capacity problem, right?<br></p><p>Mainly. We lived through a few months where there was very little focus, and everybody brought up all kind of ideas. It was great, but it was also very chaotic. Many proposals were accepted, but the implementation for them was a rush and a few couldn’t make it in the final release of Swift 3.<br></p><p>I think the decision of focusing releases is to improve the evolution process by trying to make sure we set the right priorities and to make them attainable. For example, if we do not focus on ABI stability, Swift 4 will not be able to set the ABI in stone, which would disappoint many many people.<br></p><p>&gt; In effect, it means restricting people from bringing perhaps very valuable <br>&gt; (not necessarily my contributions) <br>&gt; and essential ideas forward, which could play a crucial role improving Swift.<br></p><p>Not necessarily restrict. But politely ask them to keep a hold of those ideas until a more appropriate phase of Swift’s development allows those kind of proposals.<br></p><p>&gt; I think this is a very negative aspect. surely bouncing creative people away,<br>&gt; dropping their efforts and interest here altogether. <br></p><p>We try to be as kind and positive as possible as not to bounce create ideas away. But I think it is also important that we explain the priorities of the evolution process through time so Swift can move forward.<br></p><p>&gt; The question then remains, where / when / how can one bring topics <br>&gt; that are taking a longer stretch and are not bound to a certain release of Swift,<br>&gt; seemingly “outside” of this restriction under attention?<br></p><p>It all depends on the focus at the time. For example, the swift evolution README states that phase 2 of Swift 4 will allow new features to be discussed and implemented:<br></p><p>Stage 2 will commence once the implementation work on the Stage 1 features is cresting, and can contain a few other large and small features. We expect that stage 2 will commence some time in Spring 2017.<br></p><p>&gt; if swift evolution is (currently? ) not open for new ideas/topics:<br>&gt; I thought that was the primary purpose of Swift evolution?<br></p><p>The purpose of Swift evolution as I understand it is to bring ideas, proposals and discuss them to push Swift forward in line with the project priorities at the time. You can, for example, bring new features and topics forward now, but they need to concern ABI stability. For example, we are looking at the remaining Generics features which will allow the Standard Library to take its final form.<br></p><p>David.<br></p><p>&gt; Kind Regards<br>&gt; Ted<br>&gt; <br>&gt; <br>&gt;&gt; On 12 Oct 2016, at 21:48, David Hart &lt;david at hartbit.com &lt;mailto:david at hartbit.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Ted,<br>&gt;&gt; <br>&gt;&gt; Please try to understand. As Xiaodi and others have said a few times, it has nothing to do with the topic being important or interesting. The current phase of Swift 4’s development does not allow any extensive discussion or review on topics which do not impact ABI stability:<br>&gt;&gt; <br>&gt;&gt; Stage 1 focuses on the essentials required for source and ABI stability. Features that don&#39;t fundamentally change the ABI of existing language features or imply an ABI-breaking change to the standard library will not be considered in this stage.<br>&gt;&gt; <br>&gt;&gt;&gt; On 12 Oct 2016, at 19:14, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Apart from my perhaps fierce reaction, I am not aware of doing something wrong.<br>&gt;&gt;&gt; and I still find this topic very important. <br>&gt;&gt; <br>&gt;&gt; David.<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161012/3347a809/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>Dynamic Class/Struct Definition At Run Time</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>October 13, 2016 at 12:00:00am</p></header><div class="content"><p>Hi David, thanks for your explanation, most things are understandable. <br></p><p>However, I am challenged by all this to study this subject more in detail<br>and come back with it later at a more convenient time. <br></p><p>After all those years, now I have time for this to go in-depth, wait and see.<br></p><p>Met vriendelijke groeten<br>TedvG<br></p><p><br></p><p>&gt; On 12 Oct 2016, at 23:38, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; <br>&gt; Hi Ted,<br>&gt; <br>&gt; My replies inline:<br>&gt; <br>&gt;&gt; On 12 Oct 2016, at 22:37, Ted F.A. van Gaalen &lt;tedvgiosdev at gmail.com &lt;mailto:tedvgiosdev at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi David,<br>&gt;&gt; <br>&gt;&gt; Thanks for your reply., OK, I think I understand. <br>&gt;&gt; <br>&gt;&gt; It then is a capacity problem, right?<br>&gt; <br>&gt; Mainly. We lived through a few months where there was very little focus, and everybody brought up all kind of ideas. It was great, but it was also very chaotic. Many proposals were accepted, but the implementation for them was a rush and a few couldn’t make it in the final release of Swift 3.<br>&gt; <br>&gt; I think the decision of focusing releases is to improve the evolution process by trying to make sure we set the right priorities and to make them attainable. For example, if we do not focus on ABI stability, Swift 4 will not be able to set the ABI in stone, which would disappoint many many people.<br>&gt; <br>&gt;&gt; In effect, it means restricting people from bringing perhaps very valuable <br>&gt;&gt; (not necessarily my contributions) <br>&gt;&gt; and essential ideas forward, which could play a crucial role improving Swift.<br>&gt; <br>&gt; Not necessarily restrict. But politely ask them to keep a hold of those ideas until a more appropriate phase of Swift’s development allows those kind of proposals.<br>&gt; <br>&gt;&gt; I think this is a very negative aspect. surely bouncing creative people away,<br>&gt;&gt; dropping their efforts and interest here altogether. <br>&gt; <br>&gt; We try to be as kind and positive as possible as not to bounce create ideas away. But I think it is also important that we explain the priorities of the evolution process through time so Swift can move forward.<br>&gt; <br>&gt;&gt; The question then remains, where / when / how can one bring topics <br>&gt;&gt; that are taking a longer stretch and are not bound to a certain release of Swift,<br>&gt;&gt; seemingly “outside” of this restriction under attention?<br>&gt; <br>&gt; It all depends on the focus at the time. For example, the swift evolution README states that phase 2 of Swift 4 will allow new features to be discussed and implemented:<br>&gt; <br>&gt; Stage 2 will commence once the implementation work on the Stage 1 features is cresting, and can contain a few other large and small features. We expect that stage 2 will commence some time in Spring 2017.<br>&gt; <br>&gt;&gt; if swift evolution is (currently? ) not open for new ideas/topics:<br>&gt;&gt; I thought that was the primary purpose of Swift evolution?<br>&gt; <br>&gt; The purpose of Swift evolution as I understand it is to bring ideas, proposals and discuss them to push Swift forward in line with the project priorities at the time. You can, for example, bring new features and topics forward now, but they need to concern ABI stability. For example, we are looking at the remaining Generics features which will allow the Standard Library to take its final form.<br>&gt; <br>&gt; David.<br>&gt; <br>&gt;&gt; Kind Regards<br>&gt;&gt; Ted<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 12 Oct 2016, at 21:48, David Hart &lt;david at hartbit.com &lt;mailto:david at hartbit.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello Ted,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Please try to understand. As Xiaodi and others have said a few times, it has nothing to do with the topic being important or interesting. The current phase of Swift 4’s development does not allow any extensive discussion or review on topics which do not impact ABI stability:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Stage 1 focuses on the essentials required for source and ABI stability. Features that don&#39;t fundamentally change the ABI of existing language features or imply an ABI-breaking change to the standard library will not be considered in this stage.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 12 Oct 2016, at 19:14, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Apart from my perhaps fierce reaction, I am not aware of doing something wrong.<br>&gt;&gt;&gt;&gt; and I still find this topic very important. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; David.<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161013/5ff3aa7f/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Dynamic Class/Struct Definition At Run Time</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>October 12, 2016 at 04:00:00pm</p></header><div class="content"><p>On Wed, Oct 12, 2016 at 3:37 PM, Ted F.A. van Gaalen via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hi David,<br>&gt;<br>&gt; Thanks for your reply., OK, I think I understand.<br>&gt;<br>&gt; It then is a capacity problem, right?<br>&gt;<br>&gt; In effect, it means restricting people from bringing perhaps very valuable<br>&gt; (not necessarily my contributions)<br>&gt; and essential ideas forward, which could play a crucial role improving<br>&gt; Swift.<br>&gt;<br>&gt; I think this is a very negative aspect. surely bouncing creative people<br>&gt; away,<br>&gt; dropping their efforts and interest here altogether.<br>&gt;<br>&gt; The question then remains, where / when / how can one bring topics<br>&gt; that are taking a longer stretch and are not bound to a certain release of<br>&gt; Swift,<br>&gt; seemingly “outside” of this restriction under attention?<br>&gt;<br>&gt; if swift evolution is (currently? ) not open for new ideas/topics:<br>&gt; I thought that was the primary purpose of Swift evolution?<br>&gt;<br>&gt; Kind Regards<br>&gt; Ted<br>&gt;<br></p><p>[Edit: David just wrote a very nice reply, but since I&#39;m mostly done with<br>this email, I&#39;ll send it along anyway as a companion response.]<br></p><p>I think this is worth a reply, if only because I think we&#39;ve touched on the<br>underlying issues somewhat obliquely in the past.<br></p><p>It&#39;s enormously interesting to talk about important questions of language<br>design here on the list: that&#39;s why we&#39;re here. And it&#39;s been magical to<br>see that an idea written here, pitched convincingly, comes into being in<br>the next version of a programming language.<br></p><p>Except it&#39;s not magic. Dozens if not hundreds of people spend time thinking<br>about and debating concrete implementation details, then a group of people<br>painstakingly implements the result. During the Swift 3 time frame, the<br>illusion of magic fell apart because even some excellently pitched ideas,<br>carefully thought out, never became reality. This results in a huge loss of<br>time and effort. Everything that didn&#39;t make it into Swift 3 needs to be<br>re-evaluated to some extent because features are not designed in a vacuum<br>and must fit in with the rest of the language. The best solution for a<br>problem that we could design after the Swift 2 release would look very<br>different from the best solution that we can design now.<br></p><p>The point is, since nothing is really magic, we have to make a concession<br>to the reality that ideas too far from identified priorities are much less<br>likely to become part of the next release. It may be fun and creative to<br>think about how, hypothetically, one would design dynamic facilities to<br>support Swift 3, but the truth is that there will never be a release based<br>on Swift 3 that additionally has dynamic facilities. It is simply not a<br>productive use of anyone&#39;s creativity, time, or effort to imagine how that<br>might look; we&#39;re better off channeling everyone&#39;s energy towards making<br>the real, actual upcoming release of Swift even better.<br></p><p>On 12 Oct 2016, at 21:48, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt;<br>&gt; Hello Ted,<br>&gt;<br>&gt; Please try to understand. As Xiaodi and others have said a few times, it<br>&gt; has nothing to do with the topic being important or interesting. The<br>&gt; current phase of Swift 4’s development does not allow any extensive<br>&gt; discussion or review on topics which do not impact ABI stability:<br>&gt;<br>&gt; *Stage 1 focuses on the essentials required for source and ABI stability.<br>&gt; Features that don&#39;t fundamentally change the ABI of existing language<br>&gt; features or imply an ABI-breaking change to the standard library will not<br>&gt; be considered in this stage.*<br>&gt;<br>&gt; On 12 Oct 2016, at 19:14, Ted F.A. van Gaalen via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Apart from my perhaps fierce reaction, I am not aware of doing something<br>&gt; wrong.<br>&gt; and I still find this topic very important.<br>&gt;<br>&gt;<br>&gt; David.<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161012/708d144d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>Dynamic Class/Struct Definition At Run Time</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>October 13, 2016 at 12:00:00am</p></header><div class="content"><p>Hi Xiaodi,<br></p><p>thanks for you reply, yes, I am aware from most things you write here,<br>and also that what I wrote about dynamic facilities is probably not unique,<br>as there are so many people involved and interested etc. <br></p><p>then you wrote<br>&gt; … Swift 3, but the truth is that there will never be a release based on Swift 3 that additionally has dynamic facilities.  <br></p><p>You wanna make a bet? I see that as a challenge to work this out in detail much further, because I am convinced that<br>these dynamic features in one form or another can be implemented successfully and add great value to Swift !<br>I come back with it much later when there is time, capacity and interest.<br></p><p>Oh, btw I still do believe in magic. Since 1950.<br></p><p>TedvG<br></p><p>  <br></p><p><br></p><p>&gt; On 12 Oct 2016, at 23:45, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Wed, Oct 12, 2016 at 3:37 PM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Hi David,<br>&gt; <br>&gt; Thanks for your reply., OK, I think I understand. <br>&gt; <br>&gt; It then is a capacity problem, right?<br>&gt; <br>&gt; In effect, it means restricting people from bringing perhaps very valuable <br>&gt; (not necessarily my contributions) <br>&gt; and essential ideas forward, which could play a crucial role improving Swift.<br>&gt; <br>&gt; I think this is a very negative aspect. surely bouncing creative people away,<br>&gt; dropping their efforts and interest here altogether. <br>&gt; <br>&gt; The question then remains, where / when / how can one bring topics <br>&gt; that are taking a longer stretch and are not bound to a certain release of Swift,<br>&gt; seemingly “outside” of this restriction under attention?<br>&gt; <br>&gt; if swift evolution is (currently? ) not open for new ideas/topics:<br>&gt; I thought that was the primary purpose of Swift evolution?<br>&gt; <br>&gt; Kind Regards<br>&gt; Ted<br>&gt; <br>&gt; [Edit: David just wrote a very nice reply, but since I&#39;m mostly done with this email, I&#39;ll send it along anyway as a companion response.]<br>&gt; <br>&gt; I think this is worth a reply, if only because I think we&#39;ve touched on the underlying issues somewhat obliquely in the past.<br>&gt; <br>&gt; It&#39;s enormously interesting to talk about important questions of language design here on the list: that&#39;s why we&#39;re here. And it&#39;s been magical to see that an idea written here, pitched convincingly, comes into being in the next version of a programming language.<br>&gt; <br>&gt; Except it&#39;s not magic. Dozens if not hundreds of people spend time thinking about and debating concrete implementation details, then a group of people painstakingly implements the result. During the Swift 3 time frame, the illusion of magic fell apart because even some excellently pitched ideas, carefully thought out, never became reality. This results in a huge loss of time and effort. Everything that didn&#39;t make it into Swift 3 needs to be re-evaluated to some extent because features are not designed in a vacuum and must fit in with the rest of the language. The best solution for a problem that we could design after the Swift 2 release would look very different from the best solution that we can design now.<br>&gt; <br>&gt; The point is, since nothing is really magic, we have to make a concession to the reality that ideas too far from identified priorities are much less likely to become part of the next release. It may be fun and creative to think about how, hypothetically, one would design dynamic facilities to support Swift 3, but the truth is that there will never be a release based on Swift 3 that additionally has dynamic facilities. It is simply not a productive use of anyone&#39;s creativity, time, or effort to imagine how that might look; we&#39;re better off channeling everyone&#39;s energy towards making the real, actual upcoming release of Swift even better.<br>&gt; <br>&gt;&gt; On 12 Oct 2016, at 21:48, David Hart &lt;david at hartbit.com &lt;mailto:david at hartbit.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Ted,<br>&gt;&gt; <br>&gt;&gt; Please try to understand. As Xiaodi and others have said a few times, it has nothing to do with the topic being important or interesting. The current phase of Swift 4’s development does not allow any extensive discussion or review on topics which do not impact ABI stability:<br>&gt;&gt; <br>&gt;&gt; Stage 1 focuses on the essentials required for source and ABI stability. Features that don&#39;t fundamentally change the ABI of existing language features or imply an ABI-breaking change to the standard library will not be considered in this stage.<br>&gt;&gt; <br>&gt;&gt;&gt; On 12 Oct 2016, at 19:14, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Apart from my perhaps fierce reaction, I am not aware of doing something wrong.<br>&gt;&gt;&gt; and I still find this topic very important. <br>&gt;&gt; <br>&gt;&gt; David.<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161013/b3c98a01/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Dynamic Class/Struct Definition At Run Time</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>October 12, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Oct 12, 2016, at 5:25 PM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Xiaodi,<br>&gt; <br>&gt; thanks for you reply, yes, I am aware from most things you write here,<br>&gt; and also that what I wrote about dynamic facilities is probably not unique,<br>&gt; as there are so many people involved and interested etc. <br>&gt; <br>&gt; then you wrote<br>&gt;&gt; … Swift 3, but the truth is that there will never be a release based on Swift 3 that additionally has dynamic facilities.  <br>&gt; <br>&gt; You wanna make a bet? I see that as a challenge to work this out in detail much further, because I am convinced that<br>&gt; these dynamic features in one form or another can be implemented successfully and add great value to Swift !<br>&gt; I come back with it much later when there is time, capacity and interest.<br></p><p>I think Xiaodi was talking about an *official* Swift 3.x release. Meaning that Swift will be at least at version 4 before any of these features might be adopted into mainstream Swift.<br></p><p>- Dave Sweeris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161012/665a7e71/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Dynamic Class/Struct Definition At Run Time</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>October 12, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On Oct 12, 2016, at 10:14 AM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Austin<br>&gt; I haven’t read that from Chris - Must have overlooked it due to the shear volume on swift-evolution.<br></p><p>Completely understandable, I’m sure you’re not the only one who has missed this. <br></p><p>That said, FWIW, the goals for Swift 4 and the current planning stage are spelled out in the front-page of the swift-evolution repo:<br>https://github.com/apple/swift-evolution<br></p><p>As others’ have said, we are trying to approach the Swift 4 cycle based on what we learned from Swift 2.2 and Swift 3.  <br></p><p>Thanks for understanding, <br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>Dynamic Class/Struct Definition At Run Time</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>October 13, 2016 at 09:00:00pm</p></header><div class="content"><p>Hello Chris,<br></p><p>Thank you for updating me,<br>read this and other related info again thoroughly<br>and will act accordingly.<br>In the mean time I will work dynamically on dynamics :o)<br>Currently I suspend my topic. <br>and  bring this back again much later but<br>then tagged with [out of scope] If this is appropriate,<br></p><p>Have I understood this correctly, <br>Is that OK?<br></p><p>Ted<br></p><p><br>&gt; On 13 Oct 2016, at 07:58, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Oct 12, 2016, at 10:14 AM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Austin<br>&gt;&gt; I haven’t read that from Chris - Must have overlooked it due to the shear volume on swift-evolution.<br>&gt; <br>&gt; Completely understandable, I’m sure you’re not the only one who has missed this. <br>&gt; <br>&gt; That said, FWIW, the goals for Swift 4 and the current planning stage are spelled out in the front-page of the swift-evolution repo:<br>&gt; https://github.com/apple/swift-evolution<br>&gt; <br>&gt; As others’ have said, we are trying to approach the Swift 4 cycle based on what we learned from Swift 2.2 and Swift 3.  <br>&gt; <br>&gt; Thanks for understanding, <br>&gt; <br>&gt; -Chris<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Dynamic Class/Struct Definition At Run Time</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>October 13, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Oct 13, 2016, at 12:03 PM, Ted F.A. van Gaalen &lt;tedvgiosdev at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hello Chris,<br>&gt; <br>&gt; Thank you for updating me,<br>&gt; read this and other related info again thoroughly<br>&gt; and will act accordingly.<br>&gt; In the mean time I will work dynamically on dynamics :o)<br>&gt; Currently I suspend my topic. <br>&gt; and  bring this back again much later but<br>&gt; then tagged with [out of scope] If this is appropriate,<br>&gt; <br>&gt; Have I understood this correctly, <br>&gt; Is that OK?<br></p><p>Yep,<br></p><p>-Chris<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>Dynamic Class/Struct Definition At Run Time</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>October 12, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On 11 Oct 2016, at 14:15, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; While Swift is mainly a statically typed language, recompilation or additional <br>&gt; compilation and somehow link it al together is obviously necessary at run time, <br>&gt; each time a dynamic structure is defined. <br>&gt; Because of this, it will most probably have performance drawbacks <br>&gt; at run time<br></p><p>Not the least of which would be the need to install a Swift compiler toolchain on the target Mac - or iOS device.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>Dynamic Class/Struct Definition At Run Time</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>October 12, 2016 at 01:00:00pm</p></header><div class="content"><p>Hi Jeremy<br>&gt; On 12 Oct 2016, at 10:52, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 11 Oct 2016, at 14:15, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; While Swift is mainly a statically typed language, recompilation or additional <br>&gt;&gt; compilation and somehow link it al together is obviously necessary at run time, <br>&gt;&gt; each time a dynamic structure is defined. <br>&gt;&gt; Because of this, it will most probably have performance drawbacks <br>&gt;&gt; at run time<br>&gt; <br>&gt; Not the least of which would be the need to install a Swift compiler toolchain on the target Mac - or iOS device.<br>Yes that is true. Or at least a smaller more specialized  part of it that can do dynamic additions/plug-in…<br>TedvG<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
