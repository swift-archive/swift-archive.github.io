<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4ca02c0ca5c5d6a28bc48eebb3b000c7?s=50"></div><header><strong>[Design Question] Unexpected forced optional unwrapping behavior</strong> from <string>Michael Henson</string> &lt;mikehenson at gmail.com&gt;<p>January  8, 2016 at 05:00:00pm</p></header><div class="content"><p>I&#39;ve spent some time exploring different aspects of the language&#39;s type<br>system and came across a case where I wanted to know the type of the thing<br>an optional might hold, if it exists. The direct type of an optional<br>variable is, unsurprisingly, an optional:<br></p><p>&gt; var example: String? = &quot;example&quot;<br>example: String? = &quot;example&quot;<br>&gt; example.dynamicType<br>$R1: String?.Type = String?<br></p><p><br>Ok, that didn&#39;t work. What if I dereference?<br></p><p>&gt; example!.dynamicType<br>$R2: String.Type = String<br></p><p>Ok. What if the optional doesn&#39;t currently have a value? Does this still<br>work?<br></p><p>&gt; example = nil<br>$R3: String.Type = String<br></p><p>That&#39;s odd. I expected it not work, given how forced unwrapping of nil<br>optionals usually turns out.<br></p><p>Is this explicitly intended behavior, something that really shouldn&#39;t work<br>and shouldn&#39;t be relied on, or... other?<br></p><p>Mike<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160108/08cae6ed/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>[Design Question] Unexpected forced optional unwrapping behavior</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>January  8, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Jan 8, 2016, at 7:56 PM, Michael Henson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;ve spent some time exploring different aspects of the language&#39;s type system and came across a case where I wanted to know the type of the thing an optional might hold, if it exists. The direct type of an optional variable is, unsurprisingly, an optional:<br>&gt; <br>&gt; &gt; var example: String? = &quot;example&quot;<br>&gt; example: String? = &quot;example&quot;<br>&gt; &gt; example.dynamicType<br>&gt; $R1: String?.Type = String?<br>&gt; <br>&gt; <br>&gt; Ok, that didn&#39;t work. What if I dereference?<br>&gt; <br>&gt; &gt; example!.dynamicType<br>&gt; $R2: String.Type = String<br>&gt; <br>&gt; Ok. What if the optional doesn&#39;t currently have a value? Does this still work?<br>&gt; <br>&gt; &gt; example = nil<br>&gt; $R3: String.Type = String<br>&gt; <br>&gt; That&#39;s odd. I expected it not work, given how forced unwrapping of nil optionals usually turns out.<br>&gt; <br>&gt; Is this explicitly intended behavior, something that really shouldn&#39;t work and shouldn&#39;t be relied on, or... other?<br></p><p>Well, there’s at least one case where it doesn’t work, since this only seems to work with ‘var’ variables, and not with ‘let’ constants.<br></p><p> 1&gt; var variable: String? = nil<br>variable: String? = nil<br>  2&gt; let constant: String? = nil<br>constant: String? = nil<br>  3&gt; variable!.dynamicType<br>$R0: String.Type = String<br>  4&gt; constant!.dynamicType<br>fatal error: unexpectedly found nil while unwrapping an Optional value<br>Execution interrupted. Enter Swift code to recover and continue.<br>Enter LLDB commands to investigate (type :help for assistance.)<br></p><p>I, too, am confused as to why this ever works at all.<br></p><p>Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160108/353face1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>[Design Question] Unexpected forced optional unwrapping behavior</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>January  8, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On Jan 8, 2016, at 6:14 PM, Charles Srstka via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; On Jan 8, 2016, at 7:56 PM, Michael Henson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;ve spent some time exploring different aspects of the language&#39;s type system and came across a case where I wanted to know the type of the thing an optional might hold, if it exists. The direct type of an optional variable is, unsurprisingly, an optional:<br>&gt;&gt; <br>&gt;&gt; &gt; var example: String? = &quot;example&quot;<br>&gt;&gt; example: String? = &quot;example&quot;<br>&gt;&gt; &gt; example.dynamicType<br>&gt;&gt; $R1: String?.Type = String?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Ok, that didn&#39;t work. What if I dereference?<br>&gt;&gt; <br>&gt;&gt; &gt; example!.dynamicType<br>&gt;&gt; $R2: String.Type = String<br>&gt;&gt; <br>&gt;&gt; Ok. What if the optional doesn&#39;t currently have a value? Does this still work?<br>&gt;&gt; <br>&gt;&gt; &gt; example = nil<br>&gt;&gt; $R3: String.Type = String<br>&gt;&gt; <br>&gt;&gt; That&#39;s odd. I expected it not work, given how forced unwrapping of nil optionals usually turns out.<br>&gt;&gt; <br>&gt;&gt; Is this explicitly intended behavior, something that really shouldn&#39;t work and shouldn&#39;t be relied on, or... other?<br>&gt; <br>&gt; Well, there’s at least one case where it doesn’t work, since this only seems to work with ‘var’ variables, and not with ‘let’ constants.<br>&gt; <br>&gt;  1&gt; var variable: String? = nil<br>&gt; variable: String? = nil<br>&gt;   2&gt; let constant: String? = nil<br>&gt; constant: String? = nil<br>&gt;   3&gt; variable!.dynamicType<br>&gt; $R0: String.Type = String<br>&gt;   4&gt; constant!.dynamicType<br>&gt; fatal error: unexpectedly found nil while unwrapping an Optional value<br>&gt; Execution interrupted. Enter Swift code to recover and continue.<br>&gt; Enter LLDB commands to investigate (type :help for assistance.)<br>&gt; <br>&gt; I, too, am confused as to why this ever works at all.<br></p><p>Please file a bug; we might be failing to evaluate the base when we can statically fold the .dynamicType expression.<br></p><p>John.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160108/18e370d6/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
