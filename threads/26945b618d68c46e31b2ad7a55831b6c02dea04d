<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Idea] implicit protocols and type oriented protocols</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>April 23, 2016 at 10:00:00am</p></header><div class="content"><p>Hello Swift community, I’d like to throw a few more ideas on what features future Swift version might or should have.<br></p><p>I’d like to talk about implicit protocols for reference and value types first and then about type oriented protocols.<br>As everyone know Swift has a great differentiation between reference types (only class) and value types (struct, enum and tuples).<br></p><p>From my point of view Swift still lacks of implicit protocols for these types. Don’t get me wrong, we already have `AnyObject`, but this protocol is a bit tricky, because whenever you use it in your generic function, you &quot;might“ bridge your type to an Objective-C type.<br></p><p>In one of my little projects I could build a workaround, but this wasn’t on parameter level as I&#39;d like it to be:<br></p><p>So I used something like this inside the function scope to differentiate between reference or value types.<br></p><p>guard instance.dynamicType is AnyClass else { return }<br></p><p>This won’t bridge my type to an Objective-C type, but I will know that it’s a class type.<br></p><p>Lets sum up what we already have:<br></p><p>`Any = protocol&lt;&gt;`  - The protocol to which all types implicitly conform.<br>`@objc AnyObject` - The protocol to which all classes implicitly conform.<br></p><p>That been said I’d like to introduce you some new protocols I’d wish Swift to have.<br></p><p>protocol ReferenceType {} or protocol AnyReference {} - The protocol to which all (Swift) classes implicitly conform.<br></p><p>and<br></p><p>protocol ValueType {} or protocol AnyValue {} - The protocol to which all (Swift) value types implicitly conform.<br></p><p>Also it would be good that `AnyObject` would extend from `ReferenceType / AnyReference` protocol.<br></p><p>This will open a few new doors for us to build more specific code. For example we could finally differentiate between value and reference types and overload functions correctly for a specific desire. <br></p><p>Here is an abstract example:<br></p><p>func mutate&lt;T: AnyValue&gt;(value: T, scope: @noescape (value: inout T) -&gt; Void) -&gt; T {<br>		<br>    var mutableValue = value<br>    scope(value: &amp;mutableValue)<br>    return mutableValue<br>}<br></p><p>func mutate&lt;T: AnyReference&gt;(value: T, scope: @noescape (value: T) -&gt; Void) -&gt; T {<br>		<br>    scope(value: value)<br>    return value<br>}<br></p><p>class A { var x = 0 }<br>struct B { var y = 1 }<br></p><p>let a = mutate(A()) { $0.x = 10 }<br>let b = mutate(B()) { $0.y = 42 }<br></p><p>That’s all I have on my mind about implicit protocols right now. Now I’d like to scratch the surface of type oriented protocols.<br></p><p>We already have the ability to create class only protocols like so:<br></p><p>protocol SomeName: class {}<br></p><p>And there is no chance to limit these protocols to value types only, so a library user might be forced to design value types for some purpose.<br></p><p>Does Swift need something like `protocol SomeName: struct {}` or `protocol SomeName: value {}`? What do you think?<br></p><p>If we already had `AnyReference` and `AnyValue` protocols we could drop the `class` keyword for protocols and use `AnyReference` instead. This will also open us the way for creating value types only protocols like so: `protocol ValueProtocol: AnyValue {}`.<br></p><p>Migrating wouldn’t be that hard, because we only have to replace the `class` keyword on protocols with the new `AnyReference` protocol.<br></p><p>Im curious about your feedback.<br></p><p><br>-- <br>Adrian Zubarev<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160423/2694a04d/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
