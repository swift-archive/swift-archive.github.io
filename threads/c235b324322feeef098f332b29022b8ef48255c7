<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd033b3ed46d65c7d7394eab52d53e6b?s=50"></div><header><strong>Ability to set access control independently for getter &amp; setter of a property</strong> from <string>Evan Maloney</string> &lt;emaloney at gilt.com&gt;<p>December  4, 2015 at 02:00:00pm</p></header><div class="content"><p>Currently, Swift supports a single level of access controls for properties. If a read/write property is declared as public, both the getter and the setter of that property will be publicly visible.<br></p><p>However, it is often the case that you need a stored property that is publicly read-only but internally or privately writeable. The current way to achieve this is by doing something like:<br></p><p>    public var authenticationValidUntil: NSDate? {<br>        return _authenticationValidUntil<br>    }<br>    private var _authenticationValidUntil: NSDate?<br></p><p>This seems like a lot of boilerplate to achieve a common goal. Objective-C supported a similar concept by being able to declare a property as read-only in a .h file while being able to override this as a read-write property in the .m file.<br></p><p>I propose being able to declare separate access controls for a property&#39;s getter and setter, wherein the setter could have more restrictive access controls than the getter.<br></p><p>For example:<br></p><p>    var authenticationValidUntil: NSDate? { public get, private set }<br></p><p>This would result in a public getter, while the implementer could still set the value of the property.<br></p><p>Curious to get your thoughts on this.<br></p><p>Regards,<br></p><p>E. Maloney<br>Gilt Groupe<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/c23555c7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Ability to set access control independently for getter &amp; setter of a property</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December  4, 2015 at 11:00:00am</p></header><div class="content"><p>We have this, actually! It&#39;s spelled &quot;private(set)&quot; on the property.<br></p><p>We probably will need a way to put attributes on stored property accessors, though. @objc for custom getter or setter names is an interesting one already.<br></p><p>Jordan<br></p><p><br>&gt; On Dec 4, 2015, at 11:48 , Evan Maloney &lt;emaloney at gilt.com&gt; wrote:<br>&gt; <br>&gt; Currently, Swift supports a single level of access controls for properties. If a read/write property is declared as public, both the getter and the setter of that property will be publicly visible.<br>&gt; <br>&gt; However, it is often the case that you need a stored property that is publicly read-only but internally or privately writeable. The current way to achieve this is by doing something like:<br>&gt; <br>&gt;     public var authenticationValidUntil: NSDate? {<br>&gt;         return _authenticationValidUntil<br>&gt;     }<br>&gt;     private var _authenticationValidUntil: NSDate?<br>&gt; <br>&gt; This seems like a lot of boilerplate to achieve a common goal. Objective-C supported a similar concept by being able to declare a property as read-only in a .h file while being able to override this as a read-write property in the .m file.<br>&gt; <br>&gt; I propose being able to declare separate access controls for a property&#39;s getter and setter, wherein the setter could have more restrictive access controls than the getter.<br>&gt; <br>&gt; For example:<br>&gt; <br>&gt;     var authenticationValidUntil: NSDate? { public get, private set }<br>&gt; <br>&gt; This would result in a public getter, while the implementer could still set the value of the property.<br>&gt; <br>&gt; Curious to get your thoughts on this.<br>&gt; <br>&gt; Regards,<br>&gt; <br>&gt; E. Maloney<br>&gt; Gilt Groupe<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/a85f0dd5/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd033b3ed46d65c7d7394eab52d53e6b?s=50"></div><header><strong>Ability to set access control independently for getter &amp; setter of a property</strong> from <string>Evan Maloney</string> &lt;emaloney at gilt.com&gt;<p>December  4, 2015 at 02:00:00pm</p></header><div class="content"><p>Very cool! I hadn&#39;t seen that in use anywhere; glad I sent my e-mail or I wouldn&#39;t know it exists. :)<br></p><p>Thanks, Jordan!<br></p><p><br></p><p>&gt; On Dec 4, 2015, at 2:50 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; We have this, actually! It&#39;s spelled &quot;private(set)&quot; on the property.<br>&gt; <br>&gt; We probably will need a way to put attributes on stored property accessors, though. @objc for custom getter or setter names is an interesting one already.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 4, 2015, at 11:48 , Evan Maloney &lt;emaloney at gilt.com &lt;mailto:emaloney at gilt.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Currently, Swift supports a single level of access controls for properties. If a read/write property is declared as public, both the getter and the setter of that property will be publicly visible.<br>&gt;&gt; <br>&gt;&gt; However, it is often the case that you need a stored property that is publicly read-only but internally or privately writeable. The current way to achieve this is by doing something like:<br>&gt;&gt; <br>&gt;&gt;     public var authenticationValidUntil: NSDate? {<br>&gt;&gt;         return _authenticationValidUntil<br>&gt;&gt;     }<br>&gt;&gt;     private var _authenticationValidUntil: NSDate?<br>&gt;&gt; <br>&gt;&gt; This seems like a lot of boilerplate to achieve a common goal. Objective-C supported a similar concept by being able to declare a property as read-only in a .h file while being able to override this as a read-write property in the .m file.<br>&gt;&gt; <br>&gt;&gt; I propose being able to declare separate access controls for a property&#39;s getter and setter, wherein the setter could have more restrictive access controls than the getter.<br>&gt;&gt; <br>&gt;&gt; For example:<br>&gt;&gt; <br>&gt;&gt;     var authenticationValidUntil: NSDate? { public get, private set }<br>&gt;&gt; <br>&gt;&gt; This would result in a public getter, while the implementer could still set the value of the property.<br>&gt;&gt; <br>&gt;&gt; Curious to get your thoughts on this.<br>&gt;&gt; <br>&gt;&gt; Regards,<br>&gt;&gt; <br>&gt;&gt; E. Maloney<br>&gt;&gt; Gilt Groupe<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/8b2e23c0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/57885cfd0c4b4db16653e76d9e6f0266?s=50"></div><header><strong>Ability to set access control independently for getter &amp; setter of a property</strong> from <string>Johan Jensen</string> &lt;jj at johanjensen.dk&gt;<p>December  4, 2015 at 09:00:00pm</p></header><div class="content"><p>For reference, it can also be found in The Swift Programming Language Guide<br>under Access Control ? Constants, Variables, Properties, and<br>Subscripts ? Getters<br>and Setters<br>&lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AccessControl.html#//apple_ref/doc/uid/TP40014097-CH41-ID18&gt;<br>.<br></p><p>&gt; You can give a setter a *lower* access level than its corresponding<br>getter, to restrict the read-write scope of that variable, property, or<br>subscript. You assign a lower access level by writing private(set) or<br>internal(set) before the var or subscript introducer.<br></p><p>?Johan<br></p><p>On Fri, Dec 4, 2015 at 8:57 PM, Evan Maloney &lt;emaloney at gilt.com&gt; wrote:<br></p><p>&gt; Very cool! I hadn&#39;t seen that in use anywhere; glad I sent my e-mail or I<br>&gt; wouldn&#39;t know it exists. :)<br>&gt;<br>&gt; Thanks, Jordan!<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Dec 4, 2015, at 2:50 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt;<br>&gt; We have this, actually! It&#39;s spelled &quot;private(set)&quot; on the property.<br>&gt;<br>&gt; We probably will need a way to put attributes on stored property<br>&gt; accessors, though. @objc for custom getter or setter names is an<br>&gt; interesting one already.<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt;<br>&gt; On Dec 4, 2015, at 11:48 , Evan Maloney &lt;emaloney at gilt.com&gt; wrote:<br>&gt;<br>&gt; Currently, Swift supports a single level of access controls for<br>&gt; properties. If a read/write property is declared as public, both the getter<br>&gt; and the setter of that property will be publicly visible.<br>&gt;<br>&gt; However, it is often the case that you need a stored property that is<br>&gt; publicly read-only but internally or privately writeable. The current way<br>&gt; to achieve this is by doing something like:<br>&gt;<br>&gt;     public var authenticationValidUntil: NSDate? {<br>&gt;         return _authenticationValidUntil<br>&gt;     }<br>&gt;     private var _authenticationValidUntil: NSDate?<br>&gt;<br>&gt; This seems like a lot of boilerplate to achieve a common goal. Objective-C<br>&gt; supported a similar concept by being able to declare a property as<br>&gt; read-only in a .h file while being able to override this as a read-write<br>&gt; property in the .m file.<br>&gt;<br>&gt; I propose being able to declare separate access controls for a property&#39;s<br>&gt; getter and setter, wherein the setter could have more restrictive access<br>&gt; controls than the getter.<br>&gt;<br>&gt; For example:<br>&gt;<br>&gt;     var authenticationValidUntil: NSDate? { public get, private set }<br>&gt;<br>&gt; This would result in a public getter, while the implementer could still<br>&gt; set the value of the property.<br>&gt;<br>&gt; Curious to get your thoughts on this.<br>&gt;<br>&gt; Regards,<br>&gt;<br>&gt; E. Maloney<br>&gt; Gilt Groupe<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/c141222a/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
