<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/78174aaf5f7cb01c04b8f48b4a16ec38?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>David Knothe</string> &lt;dknothe314 at me.com&gt;<p>March 23, 2016 at 10:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>I am new to Swift mailing list so I don’t know if this topic has already been discussed.<br></p><p>I like Swift&#39;s range operators ..&lt; and …<br>What I am missing though is an easy operator to create a range with a specified step. Currently, if you would want to iterate over some odd numbers, you had to write:<br>for i in 1.stride(through: 7, by: 2) { … }<br>What I think would be simpler and more convenient would be something like the following:<br>for i in 1 … 7 step 2 { … } . Another option would be  for i in 1 … 7; 2 { … }<br>The keyword ‚step‘ in this context clearly corresponds to the step of the range to create or to iterate over.<br></p><p>Essentially this is a syntactic sugar that makes it easy to create ranges with a step ≠ 1. What do you think?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160323/731d3c1e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>March 23, 2016 at 11:00:00pm</p></header><div class="content"><p>I’m behind the idea in principle, but I’m not so sure we need a new keyword for this:<br></p><p>	for eachIndex in (1 ..&lt; 10).by(2) { … }<br></p><p>The above would be adequate I thin, and just requires a new method on ranges and similar types. This is being discussed, among other things, in the c-style for loop discussion, as these were recently removed but without a replacement for this type of use-case.<br></p><p>&gt; On 23 Mar 2016, at 21:40, David Knothe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; I am new to Swift mailing list so I don’t know if this topic has already been discussed.<br>&gt; <br>&gt; I like Swift&#39;s range operators ..&lt; and …<br>&gt; What I am missing though is an easy operator to create a range with a specified step. Currently, if you would want to iterate over some odd numbers, you had to write:<br>&gt; for i in 1.stride(through: 7, by: 2) { … }<br>&gt; What I think would be simpler and more convenient would be something like the following:<br>&gt; for i in 1 … 7 step 2 { … } . Another option would be  for i in 1 … 7; 2 { … }<br>&gt; The keyword ‚step‘ in this context clearly corresponds to the step of the range to create or to iterate over.<br>&gt; <br>&gt; Essentially this is a syntactic sugar that makes it easy to create ranges with a step ≠ 1. What do you think?<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160323/efeec29e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>March 23, 2016 at 09:00:00pm</p></header><div class="content"><p>So, in other words, you&#39;d be satisfied with the following addition to<br>the standard library?<br></p><p>```<br>extension Range where Element: Strideable {<br>    func by(step: Element.Stride) -&gt; StrideTo&lt;Element&gt; {<br>        return startIndex.stride(to: endIndex, by: step)<br>    }<br>}<br></p><p>/*<br>example of usage:<br></p><p>for i in (1..&lt;10).by(2) {<br>    print(i)<br>}<br>*/<br>```<br></p><p><br>On Wed, Mar 23, 2016 at 6:02 PM, Haravikk via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt; I’m behind the idea in principle, but I’m not so sure we need a new keyword<br>&gt; for this:<br>&gt;<br>&gt; for eachIndex in (1 ..&lt; 10).by(2) { … }<br>&gt;<br>&gt; The above would be adequate I thin, and just requires a new method on ranges<br>&gt; and similar types. This is being discussed, among other things, in the<br>&gt; c-style for loop discussion, as these were recently removed but without a<br>&gt; replacement for this type of use-case.<br>&gt;<br>&gt; On 23 Mar 2016, at 21:40, David Knothe via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hi,<br>&gt;<br>&gt; I am new to Swift mailing list so I don’t know if this topic has already<br>&gt; been discussed.<br>&gt;<br>&gt; I like Swift&#39;s range operators ..&lt; and …<br>&gt; What I am missing though is an easy operator to create a range with a<br>&gt; specified step. Currently, if you would want to iterate over some odd<br>&gt; numbers, you had to write:<br>&gt; for i in 1.stride(through: 7, by: 2) { … }<br>&gt; What I think would be simpler and more convenient would be something like<br>&gt; the following:<br>&gt; for i in 1 … 7 step 2 { … } . Another option would be  for i in 1 … 7; 2 { …<br>&gt; }<br>&gt; The keyword ‚step‘ in this context clearly corresponds to the step of the<br>&gt; range to create or to iterate over.<br>&gt;<br>&gt; Essentially this is a syntactic sugar that makes it easy to create ranges<br>&gt; with a step ≠ 1. What do you think?<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/78174aaf5f7cb01c04b8f48b4a16ec38?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>David Knothe</string> &lt;dknothe314 at me.com&gt;<p>March 24, 2016 at 08:00:00am</p></header><div class="content"><p>I see your point that a simple extension on ranges and similar types would also do the thing.<br></p><p>But I do think that this is not as easy as many users would expect.<br>For example, I try to avoid parentheses in for loops as much as I can, but in your example, 4 additional brackets are required. A simple keyword („step&quot; or „by“) would solve the problem seamlessly.<br></p><p>Also, a new template could be introduced that shows the existence of the new keyword:<br></p><p><br>I think adding such a new keyword would improve the ease and the clearness of the Swift language more than just adding some protocol extensions.<br></p><p>&gt; Am 24.03.2016 um 00:02 schrieb Haravikk &lt;swift-evolution at haravikk.me&gt;:<br>&gt; <br>&gt; I’m behind the idea in principle, but I’m not so sure we need a new keyword for this:<br>&gt; <br>&gt; 	for eachIndex in (1 ..&lt; 10).by(2) { … }<br>&gt; <br>&gt; The above would be adequate I thin, and just requires a new method on ranges and similar types. This is being discussed, among other things, in the c-style for loop discussion, as these were recently removed but without a replacement for this type of use-case.<br>&gt; <br>&gt;&gt; On 23 Mar 2016, at 21:40, David Knothe via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi,<br>&gt;&gt; <br>&gt;&gt; I am new to Swift mailing list so I don’t know if this topic has already been discussed.<br>&gt;&gt; <br>&gt;&gt; I like Swift&#39;s range operators ..&lt; and …<br>&gt;&gt; What I am missing though is an easy operator to create a range with a specified step. Currently, if you would want to iterate over some odd numbers, you had to write:<br>&gt;&gt; for i in 1.stride(through: 7, by: 2) { … }<br>&gt;&gt; What I think would be simpler and more convenient would be something like the following:<br>&gt;&gt; for i in 1 … 7 step 2 { … } . Another option would be  for i in 1 … 7; 2 { … }<br>&gt;&gt; The keyword ‚step‘ in this context clearly corresponds to the step of the range to create or to iterate over.<br>&gt;&gt; <br>&gt;&gt; Essentially this is a syntactic sugar that makes it easy to create ranges with a step ≠ 1. What do you think?<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160324/b5f28f41/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: PastedGraphic-1.png<br>Type: image/png<br>Size: 5278 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160324/b5f28f41/attachment.png&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>March 24, 2016 at 03:00:00am</p></header><div class="content"><p>If it&#39;s parentheses you want to avoid, you don&#39;t need a keyword to do that.<br>For example, I can make a stride operator `..+` in four lines like so:<br></p><p>```<br>infix operator ..+ { associativity left precedence 134 }<br>func ..+ &lt;Element: Strideable&gt;(left: Range&lt;Element&gt;, right: Element.Stride)<br>-&gt; StrideTo&lt;Element&gt; {<br>    return left.startIndex.stride(to: left.endIndex, by: right)<br>}<br></p><p>// example of usage:<br>for i in 1..&lt;10..+2 {<br>    print(i)<br>}<br>```<br></p><p>The point is, an extension on Range or a custom operator can be constrained<br>so that Element conforms to Strideable. By contrast, for loops are used to<br>traverse much more than just ranges. How do you envision your proposed<br>keyword to interact with everything else? What if I had `var s: Set&lt;Int&gt;`<br>and tried to write `for i in s by 2`--what do you think should happen? If<br>you wish to limit `by` to ranges only, what is it about this particular<br>function that makes it appropriate for a keyword of its own? You will need<br>more to demonstrate how your proposal achieves what you claim, which is<br>&quot;improved ease and clearness.&quot;<br></p><p><br>On Thu, Mar 24, 2016 at 2:34 AM, David Knothe via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I see your point that a simple extension on ranges and similar types would<br>&gt; also do the thing.<br>&gt;<br>&gt; But I do think that this is not as easy as many users would expect.<br>&gt; For example, I try to avoid parentheses in for loops as much as I can, but<br>&gt; in your example, 4 additional brackets are required. A simple keyword<br>&gt; („step&quot; or „by“) would solve the problem seamlessly.<br>&gt;<br>&gt; Also, a new template could be introduced that shows the existence of the<br>&gt; new keyword:<br>&gt;<br>&gt; I think adding such a new keyword would improve the ease and the clearness<br>&gt; of the Swift language more than just adding some protocol extensions.<br>&gt;<br>&gt; Am 24.03.2016 um 00:02 schrieb Haravikk &lt;swift-evolution at haravikk.me&gt;:<br>&gt;<br>&gt; I’m behind the idea in principle, but I’m not so sure we need a new<br>&gt; keyword for this:<br>&gt;<br>&gt; for eachIndex in (1 ..&lt; 10).by(2) { … }<br>&gt;<br>&gt; The above would be adequate I thin, and just requires a new method on<br>&gt; ranges and similar types. This is being discussed, among other things, in<br>&gt; the c-style for loop discussion, as these were recently removed but without<br>&gt; a replacement for this type of use-case.<br>&gt;<br>&gt; On 23 Mar 2016, at 21:40, David Knothe via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hi,<br>&gt;<br>&gt; I am new to Swift mailing list so I don’t know if this topic has already<br>&gt; been discussed.<br>&gt;<br>&gt; I like Swift&#39;s range operators ..&lt; and …<br>&gt; What I am missing though is an easy operator to create a range with a<br>&gt; specified step. Currently, if you would want to iterate over some odd<br>&gt; numbers, you had to write:<br>&gt; *for i in 1.stride(through: 7, by: 2) { … }*<br>&gt; What I think would be simpler and more convenient would be something like<br>&gt; the following:<br>&gt; *for i in 1 … 7 step 2 { … } . *Another option would be  *for i in 1 … 7;<br>&gt; 2 { … }*<br>&gt; The keyword ‚step‘ in this context clearly corresponds to the step of the<br>&gt; range to create or to iterate over.<br>&gt;<br>&gt; Essentially this is a syntactic sugar that makes it easy to create ranges<br>&gt; with a step ≠ 1. What do you think?<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160324/c6b484d8/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: PastedGraphic-1.png<br>Type: image/png<br>Size: 5278 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160324/c6b484d8/attachment.png&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/78174aaf5f7cb01c04b8f48b4a16ec38?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>David Knothe</string> &lt;dknothe314 at me.com&gt;<p>March 24, 2016 at 09:00:00am</p></header><div class="content"><p>This is true indeed. Traversing over sets or similar would not be possible with a &#39;step&#39; applied.<br>To fix this issue, an error could be generated when trying to apply &#39;step&#39; on a for loop that does not iterate over a &#39;Strideable&#39;.<br></p><p>I do not think an operator like ..+ is intuitive nor will it make code easier to read or write.<br></p><p>&gt; Am 24.03.2016 um 09:40 schrieb Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;:<br>&gt; <br>&gt; If it&#39;s parentheses you want to avoid, you don&#39;t need a keyword to do that. For example, I can make a stride operator `..+` in four lines like so:<br>&gt; <br>&gt; ```<br>&gt; infix operator ..+ { associativity left precedence 134 }<br>&gt; func ..+ &lt;Element: Strideable&gt;(left: Range&lt;Element&gt;, right: Element.Stride) -&gt; StrideTo&lt;Element&gt; {<br>&gt;     return left.startIndex.stride(to: left.endIndex, by: right)<br>&gt; }<br>&gt; <br>&gt; // example of usage:<br>&gt; for i in 1..&lt;10..+2 {<br>&gt;     print(i)<br>&gt; }<br>&gt; ```<br>&gt; <br>&gt; The point is, an extension on Range or a custom operator can be constrained so that Element conforms to Strideable. By contrast, for loops are used to traverse much more than just ranges. How do you envision your proposed keyword to interact with everything else? What if I had `var s: Set&lt;Int&gt;` and tried to write `for i in s by 2`--what do you think should happen? If you wish to limit `by` to ranges only, what is it about this particular function that makes it appropriate for a keyword of its own? You will need more to demonstrate how your proposal achieves what you claim, which is &quot;improved ease and clearness.&quot;<br>&gt; <br>&gt; <br>&gt;&gt; On Thu, Mar 24, 2016 at 2:34 AM, David Knothe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; I see your point that a simple extension on ranges and similar types would also do the thing.<br>&gt;&gt; <br>&gt;&gt; But I do think that this is not as easy as many users would expect.<br>&gt;&gt; For example, I try to avoid parentheses in for loops as much as I can, but in your example, 4 additional brackets are required. A simple keyword („step&quot; or „by“) would solve the problem seamlessly.<br>&gt;&gt; <br>&gt;&gt; Also, a new template could be introduced that shows the existence of the new keyword:<br>&gt;&gt; &lt;PastedGraphic-1.png&gt;<br>&gt;&gt; <br>&gt;&gt; I think adding such a new keyword would improve the ease and the clearness of the Swift language more than just adding some protocol extensions.<br>&gt;&gt; <br>&gt;&gt;&gt; Am 24.03.2016 um 00:02 schrieb Haravikk &lt;swift-evolution at haravikk.me&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m behind the idea in principle, but I’m not so sure we need a new keyword for this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	for eachIndex in (1 ..&lt; 10).by(2) { … }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The above would be adequate I thin, and just requires a new method on ranges and similar types. This is being discussed, among other things, in the c-style for loop discussion, as these were recently removed but without a replacement for this type of use-case.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 23 Mar 2016, at 21:40, David Knothe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I am new to Swift mailing list so I don’t know if this topic has already been discussed.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I like Swift&#39;s range operators ..&lt; and …<br>&gt;&gt;&gt;&gt; What I am missing though is an easy operator to create a range with a specified step. Currently, if you would want to iterate over some odd numbers, you had to write:<br>&gt;&gt;&gt;&gt; for i in 1.stride(through: 7, by: 2) { … }<br>&gt;&gt;&gt;&gt; What I think would be simpler and more convenient would be something like the following:<br>&gt;&gt;&gt;&gt; for i in 1 … 7 step 2 { … } . Another option would be  for i in 1 … 7; 2 { … }<br>&gt;&gt;&gt;&gt; The keyword ‚step‘ in this context clearly corresponds to the step of the range to create or to iterate over.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Essentially this is a syntactic sugar that makes it easy to create ranges with a step ≠ 1. What do you think?<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160324/9e165b57/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>March 24, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On 24 Mar 2016, at 08:54, David Knothe &lt;dknothe314 at me.com&gt; wrote:<br>&gt; <br>&gt; I do not think an operator like ..+ is intuitive nor will it make code easier to read or write.<br></p><p>While I agree that ..+ isn’t the nicest operator choice, there may be other possibilities. It would be interesting if we could use regular letters as operators, as you could actually just declare your by or step keyword yourself in that way, but it could be specific to strideable ranges, though it may not be worth the chaos of everyone then declaring custom keywords everywhere.<br></p><p>Personally I don’t see the issue of requiring parenthesis to use (1 ..&lt; 10).by(2), ultimately we’re still just iterating over a sequence, all we want is control over how a range’s sequence is generated, rather than it just using a stride of 1. A keyword is certainly prettier, but I think it’s better that developers know that there’s nothing new going on here, and that it’s still just a regular sequence like any other, rather than introducing a new structure that looks sort of like a new form of loop, but really isn’t.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/78174aaf5f7cb01c04b8f48b4a16ec38?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>David Knothe</string> &lt;dknothe314 at me.com&gt;<p>March 24, 2016 at 03:00:00pm</p></header><div class="content"><p>Well I would love to be able to create and use my own keywords / alphanumeric operators.<br>Depending on the type of code you are writing, these may be more or less helpful. The same is true for the &#39;step&#39; keyword - maybe most people won&#39;t ever use it - but I think there should certainly be a possiblity, be it a concrete keyword built into the language or the possibility to create my own ones.<br></p><p>&gt; Am 24.03.2016 um 12:41 schrieb Haravikk &lt;swift-evolution at haravikk.me&gt;:<br>&gt; <br>&gt; <br>&gt;&gt; On 24 Mar 2016, at 08:54, David Knothe &lt;dknothe314 at me.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I do not think an operator like ..+ is intuitive nor will it make code easier to read or write.<br>&gt; <br>&gt; While I agree that ..+ isn’t the nicest operator choice, there may be other possibilities. It would be interesting if we could use regular letters as operators, as you could actually just declare your by or step keyword yourself in that way, but it could be specific to strideable ranges, though it may not be worth the chaos of everyone then declaring custom keywords everywhere.<br>&gt; <br>&gt; Personally I don’t see the issue of requiring parenthesis to use (1 ..&lt; 10).by(2), ultimately we’re still just iterating over a sequence, all we want is control over how a range’s sequence is generated, rather than it just using a stride of 1. A keyword is certainly prettier, but I think it’s better that developers know that there’s nothing new going on here, and that it’s still just a regular sequence like any other, rather than introducing a new structure that looks sort of like a new form of loop, but really isn’t.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>March 25, 2016 at 09:00:00am</p></header><div class="content"><p>Huge +1 from me, but a character can&#39;t be valid for both function/variable names and operators because it&#39;d break something in the compiler. Or at least I think that’s what I remember reading here.<br></p><p>That doesn’t strictly rule out custom keywords, but those are probably part of the AFAIK-still-out-of-scope macro discussion.<br></p><p>- Dave Sweeris<br></p><p>&gt; On Mar 24, 2016, at 9:24 AM, David Knothe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Well I would love to be able to create and use my own keywords / alphanumeric operators.<br>&gt; Depending on the type of code you are writing, these may be more or less helpful. The same is true for the &#39;step&#39; keyword - maybe most people won&#39;t ever use it - but I think there should certainly be a possiblity, be it a concrete keyword built into the language or the possibility to create my own ones.<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>March 25, 2016 at 09:00:00am</p></header><div class="content"><p>I don’t think you&#39;d even need a new operator. This works with Ints (haven’t tried anything else):<br>extension Strideable {<br>    func stride(by by: Self.Stride) -&gt; (last: Self, by: Self.Stride) {<br>        return (self, by)<br>    }<br>}<br>func ..&lt; &lt;T: Strideable&gt; (first: T, rhs: (last: T, by: T.Stride)) -&gt; StrideTo&lt;T&gt; {<br>    return first.stride(to: rhs.last, by: rhs.by)<br>}<br>func ... &lt;T: Strideable&gt; (first: T, rhs: (last: T, by: T.Stride)) -&gt; StrideThrough&lt;T&gt; {<br>    return first.stride(through: rhs.last, by: rhs.by)<br>}<br></p><p>Array(0..&lt;10.stride(by: 2)) //[0, 2, 4, 6, 8]<br>Array(0...10.stride(by: 2)) //[0, 2, 4, 6, 8, 10]<br></p><p><br>&gt; On Mar 24, 2016, at 3:40 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; If it&#39;s parentheses you want to avoid, you don&#39;t need a keyword to do that. For example, I can make a stride operator `..+` in four lines like so:<br>&gt; <br>&gt; ```<br>&gt; infix operator ..+ { associativity left precedence 134 }<br>&gt; func ..+ &lt;Element: Strideable&gt;(left: Range&lt;Element&gt;, right: Element.Stride) -&gt; StrideTo&lt;Element&gt; {<br>&gt;     return left.startIndex.stride(to: left.endIndex, by: right)<br>&gt; }<br>&gt; <br>&gt; // example of usage:<br>&gt; for i in 1..&lt;10..+2 {<br>&gt;     print(i)<br>&gt; }<br>&gt; ```<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160325/f661671c/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
