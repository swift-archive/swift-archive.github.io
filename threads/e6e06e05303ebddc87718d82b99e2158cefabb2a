<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cf2e4441943974c6550424bb9fa45d6b?s=50"></div><header><strong>Proposal: Add scan, takeWhile, dropWhile, and iterate to the stdlib</strong> from <string>Susan Cheng</string> &lt;susan.doggie at gmail.com&gt;<p>December 29, 2015 at 10:00:00am</p></header><div class="content"><p>Consider:<br></p><p>extension CollectionType where Generator.Element : Equatable {<br></p><p>    /// Returns a subsequence, until a element equal to `value`, containing<br>the<br>    /// initial elements.<br>    ///<br>    /// If none of elements equal to `value`, the result contains all<br>    /// the elements of `self`.<br>    ///<br>    /// - Complexity: O(`self.count`)<br>    @warn_unused_result<br>    public func prefixUntil(element: Self.Generator.Element) -&gt;<br>Self.SubSequence {<br>        return self.prefixUpTo(self.indexOf(element) ?? self.endIndex)<br>    }<br>}<br></p><p><br>extension CollectionType {<br></p><p>    /// Returns a subsequence, until a element satisfying the predicate,<br>containing the<br>    /// initial elements.<br>    ///<br>    /// If none of elements satisfying the predicate, the result contains<br>all<br>    /// the elements of `self`.<br>    ///<br>    /// - Complexity: O(`self.count`)<br>    @warn_unused_result<br>    public func prefixUntil(@noescape predicate: (Self.Generator.Element)<br>throws -&gt; Bool) rethrows -&gt; Self.SubSequence {<br>        return self.prefixUpTo(try self.indexOf(predicate) ?? self.endIndex)<br>    }<br>}<br></p><p><br>extension CollectionType where Generator.Element : Equatable, Index :<br>BidirectionalIndexType {<br>    /// Returns a subsequence, until a element equal to `value`, containing<br>the<br>    /// final elements of `self`.<br>    ///<br>    /// If none of elements equal to `value`, the result contains all<br>    /// the elements of `self`.<br>    ///<br>    /// - Complexity: O(`self.count`)<br>    @warn_unused_result<br>    public func suffixUntil(element: Self.Generator.Element) -&gt;<br>Self.SubSequence {<br>        return self.suffixFrom(self.reverse().indexOf(element)?.base ??<br>self.startIndex)<br>    }<br>}<br></p><p><br>extension CollectionType where Index : BidirectionalIndexType {<br>    /// Returns a subsequence, until a element satisfying the predicate,<br>containing the<br>    /// final elements of `self`.<br>    ///<br>    /// If none of elements satisfying the predicate, the result contains<br>all<br>    /// the elements of `self`.<br>    ///<br>    /// - Complexity: O(`self.count`)<br>    @warn_unused_result<br>    public func suffixUntil(@noescape predicate: (Self.Generator.Element)<br>throws -&gt; Bool) rethrows -&gt; Self.SubSequence {<br>        return self.suffixFrom(try self.reverse().indexOf(predicate)?.base<br>?? self.startIndex)<br>    }<br>}<br></p><p>and here are my utilities:<br>https://github.com/SusanDoggie/Doggie/blob/master/Doggie/Foundation.swift<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151229/e6e0bb2a/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
