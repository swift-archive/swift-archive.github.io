<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c65faa002b79348ac10e1fb9c1a9ad83?s=50"></div><header><strong> [Review] Require self for accessing instance	members</strong> from <string>Colin Cornaby</string> &lt;colin.cornaby at mac.com&gt;<p>December 16, 2015 at 08:00:00pm</p></header><div class="content"><p>+1 to this proposal (again)<br></p><p>* What is your evaluation of the proposal?<br></p><p>I know that adding this requirement is something that could frustrate a number of people, both now and people who adopt Swift in the future... But I feel that the shadowing problem that it solves could be a significant issue for developers who are new. I also feel that it matches the idea behind Swift to encourage safe development practices. Concepts like optionals also are extra additions to the language that can frustrate and annoy developers, but in the end create safer and more clear code.<br></p><p> * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I feel Swift should have some sort of handling of this sort of shadowing. Unless a better proposal comes along to solve the same problem, I feel this problem is significant enough to warrant the change.<br></p><p> * Does this proposal fit well with the feel and direction of Swift?<br></p><p>See notes above. I feel like this fits will with the direction of Swift in adding new language requirements to force a developer to deal with common coding errors.<br></p><p> * If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>It was noted in an earlier thread that this feature was added to Obj-C not intentionally, but as a result of a collection of issues. I actually appreciated this feature of Obj-C and felt like it made Obj-C a more exacting language. I know there are similar complaints about Obj-C&#39;s verbosity, but I feel like this proposal outweighs that with the additional clarity that would be added.<br></p><p> * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I&#39;ve been actively watching this review and I&#39;ve hit this problem a few times in Swift. I understand that this issue is contentious, and that if this change happens, people might still be complaining years and years from now about it. But it reduces confusion in the language and eliminates possible developer error, which seems to align with the goals of Swift.<br></p><p>On Dec 16, 2015, at 10:55 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>Hello Swift community,<br></p><p>The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br></p><p> https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p> https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p> * What is your evaluation of the proposal?<br> * Is the problem being addressed significant enough to warrant a change to Swift?<br> * Does this proposal fit well with the feel and direction of Swift?<br> * If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br> * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p> https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p> Cheers,<br> Doug Gregor<br> Review Manager<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/abe2fcb5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>December 16, 2015 at 10:00:00pm</p></header><div class="content"><p>I don’t like that proposal, but if self becomes mandatory, I really hope that prefixes like „m“ or „_“ for member variables are officially forbidden ;-)<br></p><p>There is already one proposal (&quot;method cascading&quot;) that is quite the opposite of this one (already mentioned somewhere… it&#39;s really hard to keep an overview) — and another one that is even more contrary:<br>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/002628.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/002628.html&gt;<br></p><p>Someone should create a bugtracker where you can vote weather a &quot;bug&quot; should be fixed or extended ;-)<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/c25549b9/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>[Review] SE-0009 - Require self for accessing instance members</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>December 17, 2015 at 11:00:00am</p></header><div class="content"><p>-1 to this proposal<br></p><p>	• What is your evaluation of the proposal?<br></p><p>I think the proposal addresses a minor problem in the wrong way. I think it seeks to solve the issue of shadowing variables by forcing a particular coding style on programmers.<br></p><p>There is at least one error of fact in the proposal &quot;as is intrinsically the case in Objective-C”. This is not the case with Objective-C instance variables where “self-&gt;ivar” is not mandatory.<br></p><p>I also disagree with the assertion that it is &quot;more readable at the point of use”. I think that is entirely subjective and I and several other participants have disagreed with this assertion.<br></p><p>I agree that it is “more consistent than only requiring self in closure contexts”. However, the use of optional self in some situations and not others actually aids readability. The often cited instance is in closures to remind the programmer that self is captured.<br></p><p>It may be fractionally less confusing from a learning point of view, but I think a programmer that cannot grasp this is going to struggle with many of the more complex language features anyway. Other languages adopt the same pattern as Swift (e.g. Java, C++, Objective-C for instance variables) and learners in these languages do not seem to have problems in this respect.<br></p><p>I think this proposal  will lead to anti-patterns like the following because people will want to get rid of all the “unsightly” selfs:<br></p><p>    struct Point <br>    {<br>	var x: Int<br>	var y: Int<br></p><p>	func doSomethingWithXAndY()<br>	{<br>	    var x = self.x<br>	    var y = self.y<br>	    // Do complicated stuff with the local variables<br>        }<br>    }<br></p><p>The above could be, in itself, a source of bugs e.g. changing the local x and y and forgetting to write them back to the properties.<br> <br>Finally, the &quot;Alternatives Considered&quot; section does not consider any alternatives other than status quo. There is at least one alternative to resolve the issue the proposal seeks to address.<br></p><p>I’m also concerned that the “Community Responses” section includes only the positive feedback. There was quite a lot of negative feedback on the list too. Where is it?<br></p><p>	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes. However, the proposed solution is wrong. I would suggest a compiler warning for when a property or global is shadowed by a local variable would be sufficient.<br></p><p>	• Does this proposal fit well with the feel and direction of Swift?<br></p><p>No. As a rule, the drive with Swift is to remove unnecessary boilerplate. This is adding it in.<br></p><p>	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Only Javascript, but I find it really clunky in Javascript. I have done a lot of Java and C++ programming both of which have implicit this. I have never felt the need to have explicit this in those two languages except in certain well defined situations e.g. in the constructor where the parameters shadow the instance variables.<br></p><p>	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I have done a lot of reading of the thread on the swift-evolution list. Other than that, only the time to write this response.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/cdfb4f15/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
