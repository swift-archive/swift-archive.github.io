<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>Unify covariant return type behaviour</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>January  9, 2016 at 12:00:00pm</p></header><div class="content"><p>Currently Swift is inconsistent on how it handles covariant return types, consider the code below:<br></p><p>class Top {}<br>class Bottom: Top {}<br></p><p>protocol P {<br>    func mT() -&gt; Top<br>    typealias A: Top<br>    func mA() -&gt; A<br>}<br></p><p>struct S: P {<br>    func mT() -&gt; Top { // Must be `Top` otherwise *type&#39;s declaration* gets error &quot;does not conform to protocol P&quot;<br>        return Bottom()<br>    }<br>    typealias A = Top<br>    func mA() -&gt; Top { // Must be `Top` otherwise *type&#39;s declaration* gets error &quot;does not conform to protocol P&quot;<br>        return Bottom()<br>    }<br>}<br></p><p>class BC&lt;G: Top&gt;: P {<br>    func mG() -&gt; G {<br>        fatalError(&quot;Needs to be overridden&quot;)<br>    }<br>    func mT() -&gt; Top {  // Must be `Top` otherwise *type&#39;s declaration* gets error &quot;does not conform to protocol P&quot;<br>        fatalError(&quot;Needs to be overridden&quot;)<br>    }<br>    typealias A = Top<br>    func mA() -&gt; Top { // Must be `Top` otherwise *type&#39;s declaration* gets error &quot;does not conform to protocol P&quot;<br>        fatalError(&quot;Needs to be overridden&quot;)<br>    }<br>}<br></p><p>class DC: BC&lt;Top&gt; {<br>    override func mG() -&gt; Bottom { // Can be Bottom!<br>        return Bottom()<br>    }<br>    override func mT() -&gt; Bottom { // Can be ottom!<br>        return Bottom()<br>    }<br>    override func mA() -&gt; Bottom { // Can be Bottom!<br>        return Bottom()<br>    }<br>}<br></p><p>The behaviour is odd in that if a class overrides a method from another class then covariant return types are allowed. However if a class or struct implements a method from a protocol then it can’t implement with a covariant return type.<br></p><p>When you implement a method with a protocol extension you get similar behaviour in that a class that overrides the already implemented behaviour can now have a covariant return type:<br></p><p>protocol PE {<br>    func mT() -&gt; Top<br>}<br></p><p>extension PE {<br>    func mT() -&gt; Top { // Must be `Top` otherwise **compiler crashes** (seg. fault: 11)<br>        fatalError(&quot;Needs to be overridden&quot;)<br>    }<br>}<br></p><p>class CE: PE {<br>    func mT() -&gt; Bottom { // Can be Bottom!<br>        return Bottom()<br>    }<br>}<br></p><p><br>The suggestion is that like overrides, implementations of protocol methods can have covariant return types.<br></p><p>Thanks in advance for any comments,<br></p><p> — Howard.<br></p><p>PS another thing, though not part of the proposal, is that not requiring `override` when implementing a protocol method: <br></p><p>1. Is causing vague error messages and a compiler crash that do not finger the source of the problem.<br>2. Looks odd when some ‘inherited’ functions have override and other don’t, <br>3. Is inconsistent with other languages, i.e. Java (Java changed to @Override on interface methods - originally only on class methods - i.e. precedence for change), Scala, etc..<br>4. Is particularly jarring when an extension implements the method but then the overriding method cannot be marked with `override`.<br></p><p>PPS This proposal was originally part of “Protocols on Steroids” which was a collection of proposals that worked well together but comments indicated it would be easier to discuss as seperate proposals.<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160109/7ff6f3a7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Unify covariant return type behaviour</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>January  9, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jan 8, 2016, at 5:25 PM, Howard Lovatt via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Currently Swift is inconsistent on how it handles covariant return types, consider the code below:<br></p><p>Agreed, this looks like a bug.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>Unify covariant return type behaviour</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>January 10, 2016 at 07:00:00am</p></header><div class="content"><p>Do you want me to file a radar? Is there something better On Swift.org?<br></p><p>On Sunday, 10 January 2016, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Jan 8, 2016, at 5:25 PM, Howard Lovatt via swift-evolution &lt;<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Currently Swift is inconsistent on how it handles covariant return<br>&gt; types, consider the code below:<br>&gt;<br>&gt; Agreed, this looks like a bug.<br>&gt;<br>&gt; -Chris<br>&gt;<br>&gt;<br>&gt;<br></p><p>-- <br>  -- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160110/5dc272cf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Unify covariant return type behaviour</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>January  9, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Jan 9, 2016, at 12:32 PM, Howard Lovatt &lt;howard.lovatt at gmail.com&gt; wrote:<br>&gt; Do you want me to file a radar? Is there something better On Swift.org?<br></p><p>https://bugs.swift.org/ &lt;https://bugs.swift.org/&gt; would be best, thanks!<br></p><p>-Chris<br></p><p>&gt; <br>&gt; On Sunday, 10 January 2016, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt; <br>&gt; &gt; On Jan 8, 2016, at 5:25 PM, Howard Lovatt via swift-evolution &lt;swift-evolution at swift.org &lt;javascript:;&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Currently Swift is inconsistent on how it handles covariant return types, consider the code below:<br>&gt; <br>&gt; Agreed, this looks like a bug.<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt;   -- Howard.<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160109/99250b0d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>Unify covariant return type behaviour</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>January 12, 2016 at 08:00:00pm</p></header><div class="content"><p>Have logged on swift.org - SR-522 (https://bugs.swift.org/browse/SR-522)<br></p><p><br>&gt; On 10 Jan 2016, at 12:17 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 9, 2016, at 12:32 PM, Howard Lovatt &lt;howard.lovatt at gmail.com &lt;mailto:howard.lovatt at gmail.com&gt;&gt; wrote:<br>&gt;&gt; Do you want me to file a radar? Is there something better On Swift.org &lt;http://swift.org/&gt;?<br>&gt; <br>&gt; https://bugs.swift.org/ &lt;https://bugs.swift.org/&gt; would be best, thanks!<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Sunday, 10 January 2016, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt; On Jan 8, 2016, at 5:25 PM, Howard Lovatt via swift-evolution &lt;swift-evolution at swift.org &lt;javascript:;&gt;&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Currently Swift is inconsistent on how it handles covariant return types, consider the code below:<br>&gt;&gt; <br>&gt;&gt; Agreed, this looks like a bug.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt;   -- Howard.<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160112/ae2fb5a6/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
