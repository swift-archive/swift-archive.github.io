<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>March 11, 2016 at 09:00:00pm</p></header><div class="content"><p>When I started using Swift (on the whole a pleasant journey)<br>the most confusing thing to me was, and at times still is,  the parameter list,<br></p><p><br>I would prefer:<br></p><p>-uniform for functions(…) AND init(…)<br>-every parameter must be used with its name/label. Always, no exceptions.<br>-no shortcuts. <br>-allow arbitrary parameter sequence.<br>which is possible and very easy to implement when you always have to use names.<br>-no trailing commas.<br></p><p>Because you always have to specify parameter names/labels<br>it is easy to see (for the compiler) which parameters <br>are omitted.<br></p><p>Omitting a parameter for which no default value was <br>specified is still an error. <br></p><p>The confusing # and _  are no longer necessary. <br></p><p><br>‘inout’ and  external and local parameter names behavior remain as they are.<br></p><p>like so<br></p><p>     func foo(inout a: Type, b: Type = 12.34, c: Type)    // b may be omitted<br> or<br>     func foo(a alocal: Type, b blocal: Type = 12.34, c: Type= 3.14159)    // b and c may be omitted    <br></p><p><br> Valid calls:<br>    <br>    foo(a: v1, b: v2, c: v3)     // in sequence<br>    foo(c: v3, a: v1, b: v3)     // arbitrary parameter sequence is allowed.<br></p><p>    foo(c: v13)              // parms a and b are not present: default values wil be taken  <br>                                   // or error if no default specified.<br></p><p>Allow for more than 1 variadic parameter, why is this currently limited to one variadic parameter only? <br>    <br>    foo(a: Type, b:Type…, c: Type…,d: Type)<br></p><p><br>   foo(v1,b: v2,c: v3) // this is an error: parameter name missing with first parameter.<br>          <br></p><p>It would end the confusion.<br></p><p><br>TedvG<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>March 12, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On 11 Mar 2016, at 20:33, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; When I started using Swift (on the whole a pleasant journey)<br>&gt; the most confusing thing to me was, and at times still is,  the parameter list,<br>&gt; <br>&gt; <br>&gt; I would prefer:<br>&gt; <br>&gt; -uniform for functions(…) AND init(…)<br>&gt; -every parameter must be used with its name/label. Always, no exceptions.<br>&gt; -no shortcuts. <br>&gt; -allow arbitrary parameter sequence.<br>&gt; which is possible and very easy to implement when you always have to use names.<br>&gt; -no trailing commas.<br></p><p>I agree, except for labels always being required; sometimes there’s just nothing to be gained by having a label, such as simple initialisers. Also, well-named functions ought to be clear what the first parameter is, for example:<br></p><p>	func insert(_ element:Element) { … }<br></p><p>No-one’s really going to wonder what a value going into a .insert() method is for. However, requiring the developer to choose to add the underscore (as I did above) to enable this gives a balance between the consistency of having all parameters labelled by default, and being able to omit them where it makes sense to.<br></p><p>In other words, the parameter can be omitted if its label wouldn’t add anything useful to the call-site. There could be an argument that if .insertContentsOf() were restructured then the parameter might become necessary, resulting in the following:<br></p><p>	func insert(element:Element) { … }<br>	func insert(contentsOf:Sequence) { … }<br></p><p>But I think it’s still good for the API designer to have the option, as some cases just aren’t worth adding a label to (or would be redundant). It’s also handy for internal and private methods/initialisers that don’t need the extra clarity.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>March 12, 2016 at 08:00:00pm</p></header><div class="content"><p>( didn’t know it was on its way, so much to read here, missing things at times:<br></p><p>n.b. I’ve just read proposal SE-0046,<br>&quot;Establish consistent label behavior across all parameters including first labels”<br>Imho it’s an improvement, but it still does not give the consistency/simplicity I would like to see)<br></p><p>To Jake and Erica: <br>      Just in case you&#39;d think this is a better idea, feel free to adjust your proposal with it. thank you.<br></p><p>  ------------<br></p><p>Thank you Haravikk, <br>but I’d prefer to have a label obligatory on the first parm as well, for consistency,<br>simplicity and readability.   <br>Also for clarity:<br>     A parameter name should not be part of a function name.<br></p><p>As in your second example:<br></p><p>&gt; 	func insert( element:      Element   ) { … }<br>&gt; 	func insert( contentsOf: Sequence) { … }<br>&gt; <br></p><p><br>Always specifying  labels/names allows us also to have a simpler function syntax as well like so:<br></p><p>         func insert( element: Book inBooklist: Books reorder: true  dropOldVersions: true)       // no comma separators<br></p><p>or formatted like this for clarity : <br></p><p>         func insert(      element:  Book   <br>                              reorderBy:   .authorName <br>                   dropOldVersions:   true                      )  -&gt;  Bool    <br>         { … } <br></p><p><br>coincidentally, notice this is like in ObjC..  (which i liked) <br></p><p>It also makes the logic with omitted default parameter simpler.<br>and would allow an arbitrary parameter sequence in the call, if needed. <br></p><p>(i&#39;ve appended this possibility later)<br></p><p>I prefer overloading functions in this kind of cases instead of:<br></p><p>   insertBook(...<br>   insertBooks(...<br>   insertBooksFromArray(...<br></p><p>but maybe that’s just my personal taste.<br></p><p>At the moment I can’t find conflicts with any other language construct, <br>also for a new parameter list format without commas,<br>does anyone?<br></p><p>TedvG<br></p><p><br></p><p><br>&gt; On 12.03.2016, at 19:22, Haravikk &lt;swift-evolution at haravikk.me&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 11 Mar 2016, at 20:33, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; When I started using Swift (on the whole a pleasant journey)<br>&gt;&gt; the most confusing thing to me was, and at times still is,  the parameter list,<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I would prefer:<br>&gt;&gt; <br>&gt;&gt; -uniform for functions(…) AND init(…)<br>&gt;&gt; -every parameter must be used with its name/label. Always, no exceptions.<br>&gt;&gt; -no shortcuts. <br>&gt;&gt; -allow arbitrary parameter sequence.<br>&gt;&gt; which is possible and very easy to implement when you always have to use names.<br>&gt;&gt; -no trailing commas.<br>&gt; <br>&gt; I agree, except for labels always being required; sometimes there’s just nothing to be gained by having a label, such as simple initialisers. Also, well-named functions ought to be clear what the first parameter is, for example:<br>&gt; <br>&gt; 	func insert(_ element:Element) { … }<br>&gt; <br>&gt; No-one’s really going to wonder what a value going into a .insert() method is for. However, requiring the developer to choose to add the underscore (as I did above) to enable this gives a balance between the consistency of having all parameters labelled by default, and being able to omit them where it makes sense to.<br>&gt; <br>&gt; In other words, the parameter can be omitted if its label wouldn’t add anything useful to the call-site. There could be an argument that if .insertContentsOf() were restructured then the parameter might become necessary, resulting in the following:<br>&gt; <br>&gt; 	func insert(element:Element) { … }<br>&gt; 	func insert(contentsOf:Sequence) { … }<br>&gt; <br>&gt; But I think it’s still good for the API designer to have the option, as some cases just aren’t worth adding a label to (or would be redundant). It’s also handy for internal and private methods/initialisers that don’t need the extra clarity.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>March 12, 2016 at 09:00:00pm</p></header><div class="content"><p>oops !! Errata:<br>in my examples something went wrong:  here they are again, corrected:<br></p><p>&gt; Always specifying  labels/names allows us also to have a simpler function syntax as well like so:<br>&gt; <br>&gt;         bookList.insert( element: book  reorderBy: .authorName  dropOldVersions: true)       // no comma separators<br>&gt; <br>&gt; or formatted like this for clarity : <br>&gt; <br>&gt;         bookList.insert(      element:  book  <br>&gt;                                    reorderBy:  .authorName <br>&gt;                          dropOldVersions:  true                  )  <br>&gt;       <br>&gt; <br>&gt; <br></p><p>Sorry<br>TedvG<br></p><p><br></p><p><br>TedvG<br>&gt; On 12.03.2016, at 20:18, Ted F.A. van Gaalen &lt;tedvgiosdev at gmail.com&gt; wrote:<br>&gt; <br>&gt; ( didn’t know it was on its way, so much to read here, missing things at times:<br>&gt; <br>&gt; n.b. I’ve just read proposal SE-0046,<br>&gt; &quot;Establish consistent label behavior across all parameters including first labels”<br>&gt; Imho it’s an improvement, but it still does not give the consistency/simplicity I would like to see)<br>&gt; <br>&gt; To Jake and Erica: <br>&gt;      Just in case you&#39;d think this is a better idea, feel free to adjust your proposal with it. thank you.<br>&gt; <br>&gt;  ------------<br>&gt; <br>&gt; Thank you Haravikk, <br>&gt; but I’d prefer to have a label obligatory on the first parm as well, for consistency,<br>&gt; simplicity and readability.   <br>&gt; Also for clarity:<br>&gt;     A parameter name should not be part of a function name.<br>&gt; <br>&gt; As in your second example:<br>&gt; <br>&gt;&gt; 	func insert( element:      Element   ) { … }<br>&gt;&gt; 	func insert( contentsOf: Sequence) { … }<br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; Always specifying  labels/names allows us also to have a simpler function syntax as well like so:<br>&gt; <br>&gt;         func insert( element: Book inBooklist: Books reorder: true  dropOldVersions: true)       // no comma separators<br>&gt; <br>&gt; or formatted like this for clarity : <br>&gt; <br>&gt;         func insert(      element:  Book   <br>&gt;                              reorderBy:   .authorName <br>&gt;                   dropOldVersions:   true                      )  -&gt;  Bool    <br>&gt;         { … } <br>&gt; <br>&gt; <br>&gt; coincidentally, notice this is like in ObjC..  (which i liked) <br>&gt; <br>&gt; It also makes the logic with omitted default parameter simpler.<br>&gt; and would allow an arbitrary parameter sequence in the call, if needed. <br>&gt; <br>&gt; (i&#39;ve appended this possibility later)<br>&gt; <br>&gt; I prefer overloading functions in this kind of cases instead of:<br>&gt; <br>&gt;   insertBook(...<br>&gt;   insertBooks(...<br>&gt;   insertBooksFromArray(...<br>&gt; <br>&gt; but maybe that’s just my personal taste.<br>&gt; <br>&gt; At the moment I can’t find conflicts with any other language construct, <br>&gt; also for a new parameter list format without commas,<br>&gt; does anyone?<br>&gt; <br>&gt; TedvG<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On 12.03.2016, at 19:22, Haravikk &lt;swift-evolution at haravikk.me&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 11 Mar 2016, at 20:33, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; When I started using Swift (on the whole a pleasant journey)<br>&gt;&gt;&gt; the most confusing thing to me was, and at times still is,  the parameter list,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I would prefer:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -uniform for functions(…) AND init(…)<br>&gt;&gt;&gt; -every parameter must be used with its name/label. Always, no exceptions.<br>&gt;&gt;&gt; -no shortcuts. <br>&gt;&gt;&gt; -allow arbitrary parameter sequence.<br>&gt;&gt;&gt; which is possible and very easy to implement when you always have to use names.<br>&gt;&gt;&gt; -no trailing commas.<br>&gt;&gt; <br>&gt;&gt; I agree, except for labels always being required; sometimes there’s just nothing to be gained by having a label, such as simple initialisers. Also, well-named functions ought to be clear what the first parameter is, for example:<br>&gt;&gt; <br>&gt;&gt; 	func insert(_ element:Element) { … }<br>&gt;&gt; <br>&gt;&gt; No-one’s really going to wonder what a value going into a .insert() method is for. However, requiring the developer to choose to add the underscore (as I did above) to enable this gives a balance between the consistency of having all parameters labelled by default, and being able to omit them where it makes sense to.<br>&gt;&gt; <br>&gt;&gt; In other words, the parameter can be omitted if its label wouldn’t add anything useful to the call-site. There could be an argument that if .insertContentsOf() were restructured then the parameter might become necessary, resulting in the following:<br>&gt;&gt; <br>&gt;&gt; 	func insert(element:Element) { … }<br>&gt;&gt; 	func insert(contentsOf:Sequence) { … }<br>&gt;&gt; <br>&gt;&gt; But I think it’s still good for the API designer to have the option, as some cases just aren’t worth adding a label to (or would be redundant). It’s also handy for internal and private methods/initialisers that don’t need the extra clarity.<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4002684831b0a89736f4837d2e60f66a?s=50"></div><header><strong>Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Pierre Monod-Broca</string> &lt;pierremonodbroca at gmail.com&gt;<p>March 12, 2016 at 10:00:00pm</p></header><div class="content"><p>I&#39;m not for mandatory parameter names, it doesn&#39;t always make sense to have them. Besides I don&#39;t see much value in removing the commas or reordering the parameters.<br></p><p>By the way how would you do for variadics parameters ?<br></p><p>Pierre<br></p><p>&gt; Le 12 mars 2016 à 21:18, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; oops !! Errata:<br>&gt; in my examples something went wrong:  here they are again, corrected:<br>&gt; <br>&gt;&gt; Always specifying  labels/names allows us also to have a simpler function syntax as well like so:<br>&gt;&gt; <br>&gt;&gt;        bookList.insert( element: book  reorderBy: .authorName  dropOldVersions: true)       // no comma separators<br>&gt;&gt; <br>&gt;&gt; or formatted like this for clarity : <br>&gt;&gt; <br>&gt;&gt;        bookList.insert(      element:  book  <br>&gt;&gt;                                   reorderBy:  .authorName <br>&gt;&gt;                         dropOldVersions:  true                  )  <br>&gt; <br>&gt; Sorry<br>&gt; TedvG<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; TedvG<br>&gt;&gt; On 12.03.2016, at 20:18, Ted F.A. van Gaalen &lt;tedvgiosdev at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; ( didn’t know it was on its way, so much to read here, missing things at times:<br>&gt;&gt; <br>&gt;&gt; n.b. I’ve just read proposal SE-0046,<br>&gt;&gt; &quot;Establish consistent label behavior across all parameters including first labels”<br>&gt;&gt; Imho it’s an improvement, but it still does not give the consistency/simplicity I would like to see)<br>&gt;&gt; <br>&gt;&gt; To Jake and Erica: <br>&gt;&gt;     Just in case you&#39;d think this is a better idea, feel free to adjust your proposal with it. thank you.<br>&gt;&gt; <br>&gt;&gt; ------------<br>&gt;&gt; <br>&gt;&gt; Thank you Haravikk, <br>&gt;&gt; but I’d prefer to have a label obligatory on the first parm as well, for consistency,<br>&gt;&gt; simplicity and readability.   <br>&gt;&gt; Also for clarity:<br>&gt;&gt;    A parameter name should not be part of a function name.<br>&gt;&gt; <br>&gt;&gt; As in your second example:<br>&gt;&gt; <br>&gt;&gt;&gt;    func insert( element:      Element   ) { … }<br>&gt;&gt;&gt;    func insert( contentsOf: Sequence) { … }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Always specifying  labels/names allows us also to have a simpler function syntax as well like so:<br>&gt;&gt; <br>&gt;&gt;        func insert( element: Book inBooklist: Books reorder: true  dropOldVersions: true)       // no comma separators<br>&gt;&gt; <br>&gt;&gt; or formatted like this for clarity : <br>&gt;&gt; <br>&gt;&gt;        func insert(      element:  Book   <br>&gt;&gt;                             reorderBy:   .authorName <br>&gt;&gt;                  dropOldVersions:   true                      )  -&gt;  Bool    <br>&gt;&gt;        { … } <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; coincidentally, notice this is like in ObjC..  (which i liked) <br>&gt;&gt; <br>&gt;&gt; It also makes the logic with omitted default parameter simpler.<br>&gt;&gt; and would allow an arbitrary parameter sequence in the call, if needed. <br>&gt;&gt; <br>&gt;&gt; (i&#39;ve appended this possibility later)<br>&gt;&gt; <br>&gt;&gt; I prefer overloading functions in this kind of cases instead of:<br>&gt;&gt; <br>&gt;&gt;  insertBook(...<br>&gt;&gt;  insertBooks(...<br>&gt;&gt;  insertBooksFromArray(...<br>&gt;&gt; <br>&gt;&gt; but maybe that’s just my personal taste.<br>&gt;&gt; <br>&gt;&gt; At the moment I can’t find conflicts with any other language construct, <br>&gt;&gt; also for a new parameter list format without commas,<br>&gt;&gt; does anyone?<br>&gt;&gt; <br>&gt;&gt; TedvG<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 12.03.2016, at 19:22, Haravikk &lt;swift-evolution at haravikk.me&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 11 Mar 2016, at 20:33, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; When I started using Swift (on the whole a pleasant journey)<br>&gt;&gt;&gt;&gt; the most confusing thing to me was, and at times still is,  the parameter list,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I would prefer:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -uniform for functions(…) AND init(…)<br>&gt;&gt;&gt;&gt; -every parameter must be used with its name/label. Always, no exceptions.<br>&gt;&gt;&gt;&gt; -no shortcuts. <br>&gt;&gt;&gt;&gt; -allow arbitrary parameter sequence.<br>&gt;&gt;&gt;&gt; which is possible and very easy to implement when you always have to use names.<br>&gt;&gt;&gt;&gt; -no trailing commas.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I agree, except for labels always being required; sometimes there’s just nothing to be gained by having a label, such as simple initialisers. Also, well-named functions ought to be clear what the first parameter is, for example:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    func insert(_ element:Element) { … }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; No-one’s really going to wonder what a value going into a .insert() method is for. However, requiring the developer to choose to add the underscore (as I did above) to enable this gives a balance between the consistency of having all parameters labelled by default, and being able to omit them where it makes sense to.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In other words, the parameter can be omitted if its label wouldn’t add anything useful to the call-site. There could be an argument that if .insertContentsOf() were restructured then the parameter might become necessary, resulting in the following:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    func insert(element:Element) { … }<br>&gt;&gt;&gt;    func insert(contentsOf:Sequence) { … }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But I think it’s still good for the API designer to have the option, as some cases just aren’t worth adding a label to (or would be redundant). It’s also handy for internal and private methods/initialisers that don’t need the extra clarity.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>March 12, 2016 at 10:00:00pm</p></header><div class="content"><p>Variadic parameters? That’s very easy:<br></p><p>                                                                           // in this example, a:  b:  c: and d: are parameter names/labels<br></p><p>   fooVariadics( a:  thing                                      // Easy to parse: the colon :  always signifies it is a label, not a var/value<br>                         b:  12,45, 65, 56, 456                // b and c are variadic.  .<br>                         c:  “aeroplane”, ”car”, ”rocket”    // The commas in-between the variadic values are not interpreted as parameter separators.<br>                         d:  temperature ) <br></p><p><br> This would work too:   (different parameter sequence if you’d prefer to have the variadic parameters (optically) at the end,<br>                                     in spite of the sequence with which they are declared in the function declaration.)<br></p><p>   fooVariadics( a:  thing                                 // Parameter sequence can be arbitrary.<br>                         d:  temperature ) <br>                         c:  “boat”, ”car”, ”rocket”        // Note that a trailing comma behind a variadic row would attempt to include the next parameter label<br>                         b:  12,45, 65, 56, 456       )   // unless the compiler is a bit smart and sees the colon : of it: but it should raise a compile error in that case. <br></p><p><br>Two great advantages of this approach without commas would be:<br></p><p>-there is no obligation to put a variadic sequence at the end of the parameter list<br>-it is now possible to use mulitple variadic parameters.<br></p><p>Ain’t that cool?  <br>TedvG<br></p><p><br></p><p><br>&gt; On 12.03.2016, at 22:17, Pierre Monod-Broca &lt;pierremonodbroca at gmail.com&gt; wrote:<br>&gt; <br>&gt; I&#39;m not for mandatory parameter names, it doesn&#39;t always make sense to have them. Besides I don&#39;t see much value in removing the commas or reordering the parameters.<br>&gt; <br>&gt; By the way how would you do for variadics parameters ?<br>&gt; <br>&gt; Pierre<br>&gt; <br>&gt;&gt; Le 12 mars 2016 à 21:18, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; oops !! Errata:<br>&gt;&gt; in my examples something went wrong:  here they are again, corrected:<br>&gt;&gt; <br>&gt;&gt;&gt; Always specifying  labels/names allows us also to have a simpler function syntax as well like so:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;       bookList.insert( element: book  reorderBy: .authorName  dropOldVersions: true)       // no comma separators<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or formatted like this for clarity : <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;       bookList.insert(      element:  book  <br>&gt;&gt;&gt;                                  reorderBy:  .authorName <br>&gt;&gt;&gt;                        dropOldVersions:  true                  )  <br>&gt;&gt; <br>&gt;&gt; Sorry<br>&gt;&gt; TedvG<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; TedvG<br>&gt;&gt;&gt; On 12.03.2016, at 20:18, Ted F.A. van Gaalen &lt;tedvgiosdev at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ( didn’t know it was on its way, so much to read here, missing things at times:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; n.b. I’ve just read proposal SE-0046,<br>&gt;&gt;&gt; &quot;Establish consistent label behavior across all parameters including first labels”<br>&gt;&gt;&gt; Imho it’s an improvement, but it still does not give the consistency/simplicity I would like to see)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; To Jake and Erica: <br>&gt;&gt;&gt;    Just in case you&#39;d think this is a better idea, feel free to adjust your proposal with it. thank you.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ------------<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thank you Haravikk, <br>&gt;&gt;&gt; but I’d prefer to have a label obligatory on the first parm as well, for consistency,<br>&gt;&gt;&gt; simplicity and readability.   <br>&gt;&gt;&gt; Also for clarity:<br>&gt;&gt;&gt;   A parameter name should not be part of a function name.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As in your second example:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   func insert( element:      Element   ) { … }<br>&gt;&gt;&gt;&gt;   func insert( contentsOf: Sequence) { … }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Always specifying  labels/names allows us also to have a simpler function syntax as well like so:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;       func insert( element: Book inBooklist: Books reorder: true  dropOldVersions: true)       // no comma separators<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or formatted like this for clarity : <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;       func insert(      element:  Book   <br>&gt;&gt;&gt;                            reorderBy:   .authorName <br>&gt;&gt;&gt;                 dropOldVersions:   true                      )  -&gt;  Bool    <br>&gt;&gt;&gt;       { … } <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; coincidentally, notice this is like in ObjC..  (which i liked) <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It also makes the logic with omitted default parameter simpler.<br>&gt;&gt;&gt; and would allow an arbitrary parameter sequence in the call, if needed. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (i&#39;ve appended this possibility later)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I prefer overloading functions in this kind of cases instead of:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; insertBook(...<br>&gt;&gt;&gt; insertBooks(...<br>&gt;&gt;&gt; insertBooksFromArray(...<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; but maybe that’s just my personal taste.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; At the moment I can’t find conflicts with any other language construct, <br>&gt;&gt;&gt; also for a new parameter list format without commas,<br>&gt;&gt;&gt; does anyone?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; TedvG<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 12.03.2016, at 19:22, Haravikk &lt;swift-evolution at haravikk.me&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 11 Mar 2016, at 20:33, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; When I started using Swift (on the whole a pleasant journey)<br>&gt;&gt;&gt;&gt;&gt; the most confusing thing to me was, and at times still is,  the parameter list,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I would prefer:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -uniform for functions(…) AND init(…)<br>&gt;&gt;&gt;&gt;&gt; -every parameter must be used with its name/label. Always, no exceptions.<br>&gt;&gt;&gt;&gt;&gt; -no shortcuts. <br>&gt;&gt;&gt;&gt;&gt; -allow arbitrary parameter sequence.<br>&gt;&gt;&gt;&gt;&gt; which is possible and very easy to implement when you always have to use names.<br>&gt;&gt;&gt;&gt;&gt; -no trailing commas.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I agree, except for labels always being required; sometimes there’s just nothing to be gained by having a label, such as simple initialisers. Also, well-named functions ought to be clear what the first parameter is, for example:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   func insert(_ element:Element) { … }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; No-one’s really going to wonder what a value going into a .insert() method is for. However, requiring the developer to choose to add the underscore (as I did above) to enable this gives a balance between the consistency of having all parameters labelled by default, and being able to omit them where it makes sense to.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; In other words, the parameter can be omitted if its label wouldn’t add anything useful to the call-site. There could be an argument that if .insertContentsOf() were restructured then the parameter might become necessary, resulting in the following:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   func insert(element:Element) { … }<br>&gt;&gt;&gt;&gt;   func insert(contentsOf:Sequence) { … }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; But I think it’s still good for the API designer to have the option, as some cases just aren’t worth adding a label to (or would be redundant). It’s also handy for internal and private methods/initialisers that don’t need the extra clarity.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>March 12, 2016 at 11:00:00pm</p></header><div class="content"><p>arrhg! typo again!  Closing parenthesis)  removed in 2nd example from behind “temperature”, sorry<br>&gt; On 12.03.2016, at 22:51, Ted F.A. van Gaalen &lt;tedvgiosdev at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Variadic parameters? That’s very easy:<br>&gt; <br>&gt;                                                                           // in this example, a:  b:  c: and d: are parameter names/labels<br>&gt; <br>&gt;   fooVariadics( a:  thing                                      // Easy to parse: the colon :  always signifies it is a label, not a var/value<br>&gt;                         b:  12,45, 65, 56, 456                // b and c are variadic.  .<br>&gt;                         c:  “aeroplane”, ”car”, ”rocket”    // The commas in-between the variadic values are not interpreted as parameter separators.<br>&gt;                         d:  temperature ) <br>&gt; <br>&gt; <br>&gt; This would work too:   (different parameter sequence if you’d prefer to have the variadic parameters (optically) at the end,<br>&gt;                                     in spite of the sequence with which they are declared in the function declaration.)<br>&gt; <br>&gt;   fooVariadics( a:  thing                                 // Parameter sequence can be arbitrary.<br>&gt;                         d:  temperature  <br>&gt;                         c:  “boat”, ”car”, ”rocket”        // Note that a trailing comma behind a variadic row would attempt to include the next parameter label<br>&gt;                         b:  12,45, 65, 56, 456       )   // unless the compiler is a bit smart and sees the colon : of it: but it should raise a compile error in that case. <br>&gt; <br>&gt; <br>&gt; Two great advantages of this approach without commas would be:<br>&gt; <br>&gt; -there is no obligation to put a variadic sequence at the end of the parameter list<br>&gt; -it is now possible to use mulitple variadic parameters.<br>&gt; <br>&gt; Ain’t that cool?  <br>&gt; TedvG<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On 12.03.2016, at 22:17, Pierre Monod-Broca &lt;pierremonodbroca at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;m not for mandatory parameter names, it doesn&#39;t always make sense to have them. Besides I don&#39;t see much value in removing the commas or reordering the parameters.<br>&gt;&gt; <br>&gt;&gt; By the way how would you do for variadics parameters ?<br>&gt;&gt; <br>&gt;&gt; Pierre<br>&gt;&gt; <br>&gt;&gt;&gt; Le 12 mars 2016 à 21:18, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; oops !! Errata:<br>&gt;&gt;&gt; in my examples something went wrong:  here they are again, corrected:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Always specifying  labels/names allows us also to have a simpler function syntax as well like so:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;      bookList.insert( element: book  reorderBy: .authorName  dropOldVersions: true)       // no comma separators<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; or formatted like this for clarity : <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;      bookList.insert(      element:  book  <br>&gt;&gt;&gt;&gt;                                 reorderBy:  .authorName <br>&gt;&gt;&gt;&gt;                       dropOldVersions:  true                  )  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sorry<br>&gt;&gt;&gt; TedvG<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; TedvG<br>&gt;&gt;&gt;&gt; On 12.03.2016, at 20:18, Ted F.A. van Gaalen &lt;tedvgiosdev at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ( didn’t know it was on its way, so much to read here, missing things at times:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; n.b. I’ve just read proposal SE-0046,<br>&gt;&gt;&gt;&gt; &quot;Establish consistent label behavior across all parameters including first labels”<br>&gt;&gt;&gt;&gt; Imho it’s an improvement, but it still does not give the consistency/simplicity I would like to see)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; To Jake and Erica: <br>&gt;&gt;&gt;&gt;   Just in case you&#39;d think this is a better idea, feel free to adjust your proposal with it. thank you.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ------------<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thank you Haravikk, <br>&gt;&gt;&gt;&gt; but I’d prefer to have a label obligatory on the first parm as well, for consistency,<br>&gt;&gt;&gt;&gt; simplicity and readability.   <br>&gt;&gt;&gt;&gt; Also for clarity:<br>&gt;&gt;&gt;&gt;  A parameter name should not be part of a function name.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; As in your second example:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  func insert( element:      Element   ) { … }<br>&gt;&gt;&gt;&gt;&gt;  func insert( contentsOf: Sequence) { … }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Always specifying  labels/names allows us also to have a simpler function syntax as well like so:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;      func insert( element: Book inBooklist: Books reorder: true  dropOldVersions: true)       // no comma separators<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; or formatted like this for clarity : <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;      func insert(      element:  Book   <br>&gt;&gt;&gt;&gt;                           reorderBy:   .authorName <br>&gt;&gt;&gt;&gt;                dropOldVersions:   true                      )  -&gt;  Bool    <br>&gt;&gt;&gt;&gt;      { … } <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; coincidentally, notice this is like in ObjC..  (which i liked) <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It also makes the logic with omitted default parameter simpler.<br>&gt;&gt;&gt;&gt; and would allow an arbitrary parameter sequence in the call, if needed. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; (i&#39;ve appended this possibility later)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I prefer overloading functions in this kind of cases instead of:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; insertBook(...<br>&gt;&gt;&gt;&gt; insertBooks(...<br>&gt;&gt;&gt;&gt; insertBooksFromArray(...<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; but maybe that’s just my personal taste.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; At the moment I can’t find conflicts with any other language construct, <br>&gt;&gt;&gt;&gt; also for a new parameter list format without commas,<br>&gt;&gt;&gt;&gt; does anyone?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; TedvG<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 12.03.2016, at 19:22, Haravikk &lt;swift-evolution at haravikk.me&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On 11 Mar 2016, at 20:33, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; When I started using Swift (on the whole a pleasant journey)<br>&gt;&gt;&gt;&gt;&gt;&gt; the most confusing thing to me was, and at times still is,  the parameter list,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I would prefer:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; -uniform for functions(…) AND init(…)<br>&gt;&gt;&gt;&gt;&gt;&gt; -every parameter must be used with its name/label. Always, no exceptions.<br>&gt;&gt;&gt;&gt;&gt;&gt; -no shortcuts. <br>&gt;&gt;&gt;&gt;&gt;&gt; -allow arbitrary parameter sequence.<br>&gt;&gt;&gt;&gt;&gt;&gt; which is possible and very easy to implement when you always have to use names.<br>&gt;&gt;&gt;&gt;&gt;&gt; -no trailing commas.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I agree, except for labels always being required; sometimes there’s just nothing to be gained by having a label, such as simple initialisers. Also, well-named functions ought to be clear what the first parameter is, for example:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  func insert(_ element:Element) { … }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; No-one’s really going to wonder what a value going into a .insert() method is for. However, requiring the developer to choose to add the underscore (as I did above) to enable this gives a balance between the consistency of having all parameters labelled by default, and being able to omit them where it makes sense to.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; In other words, the parameter can be omitted if its label wouldn’t add anything useful to the call-site. There could be an argument that if .insertContentsOf() were restructured then the parameter might become necessary, resulting in the following:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  func insert(element:Element) { … }<br>&gt;&gt;&gt;&gt;&gt;  func insert(contentsOf:Sequence) { … }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; But I think it’s still good for the API designer to have the option, as some cases just aren’t worth adding a label to (or would be redundant). It’s also handy for internal and private methods/initialisers that don’t need the extra clarity.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
