<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c65faa002b79348ac10e1fb9c1a9ad83?s=50"></div><header><strong>C-style For Loops</strong> from <string>Colin Cornaby</string> &lt;colin.cornaby at mac.com&gt;<p>December  4, 2015 at 11:00:00pm</p></header><div class="content"><p>This is a nice solution that translates nicely without creating too much concern about changing the nature of an algorithm in a complex system. üëç<br></p><p>Should at least get a nice &quot;fix it&quot; in Xcode though. On survey, we do have developers using the C style syntax, but we&#39;re early in the process of transitioning.<br></p><p>On Dec 04, 2015, at 02:52 PM, Johan Jensen &lt;jj at johanjensen.dk&gt; wrote:<br></p><p>With the removal of post/pre-increment/decrement you might as well translate C-style for-loops to something akin to<br></p><p>for var i in 0..&lt;10 {<br>¬†¬†¬† ...<br>}<br></p><p>If more advanced C-style for-loops are needed, I am sure most developers can use a while-loop (as mentioned by Ray Fix) until they get accustomed to Swift‚Äôs syntax. <br></p><p>On Fri, Dec 4, 2015 at 11:37 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>You might ease the pain by approximating C-style &#39;for&#39; by a higher-order function:<br></p><p>func cStyleFor(@autoclosure init initializer: () -&gt; (), @autoclosure test: () -&gt; Bool, @autoclosure inc: () -&gt; (), body: () throws -&gt; ()) rethrows {<br>¬† // left as an exercise<br>}<br></p><p>var i = 0<br>cStyleFor(init: i = 0, test: i &lt; 10, inc: ++i) {<br>¬† print(i)<br>}<br></p><p>-Joe<br></p><p>On Dec 4, 2015, at 2:33 PM, Colin Cornaby &lt;colin.cornaby at mac.com&gt; wrote:<br></p><p>I was talking with people in the office about this proposal today, in since there has been such a long discussion already I&#39;ll just reply to the top of the tree just to get our take in before the review...<br></p><p>It&#39;s understood that Swift has better, more readable ways to do for loops, but C style for loops reduce friction for getting our C or C++ developers on board with Swift. Unless there is a gain elsewhere to be made in their removal, it would be nice to keep them. As we transition to Swift we can educate developers on better ways to iterate, but it would be nice to have one less thing in the way of getting people writing Swift code.<br></p><p>We work on a lot of algorithmic code which would be well suited for Swift. And again, I understand that C style for loops are redundant. But it&#39;s just one less speed bump in understanding for some of our developers or for porting pure C or C++ code without having to do as much re-validation of algorithms for accidental changes.<br></p><p>But if it&#39;s actively hurting some other part of the language we could probably be talked into it.<br></p><p>On Dec 03, 2015, at 03:32 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br></p><p>Does Swift still needs C-style for loops with conditions and incrementers?¬†<br></p><p>&lt;Screen Shot 2015-12-03 at 4.30.15 PM.png&gt;<br></p><p>More Swift-like construction is already available with for-in-statements and stride.¬†<br>This would naturally starve the most common point for -- and ++ operators as well.<br></p><p>-- E<br></p><p><br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/917597da/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>C-style For Loops</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>December  4, 2015 at 11:00:00pm</p></header><div class="content"><p>Indeed. Python doesn&#39;t have it, and there isn&#39;t much concern about the learning curve or the missing functionality there, it seems. I actually didn&#39;t even realize it was missing from Python until I stopped and thought about it.<br></p><p>At first I was concerned about losing C style for loops, but I really can imagine a scenario in which they are more succinct while still maintaining clarity of intent. Plus they&#39;re a pain to type out.<br></p><p>From time to time when programming in C or JS I will include more than one statement or more complicated logic in the increment part of the for loop (perhaps move 2 indices in a complicated way), but perhaps that would be clearer just to implement as a while loop with the logic at the end. <br></p><p>One thing I will say is that it&#39;s nice to have your loop variables scoped to the loop, which is more difficult (impossible?) to accomplish with a while loop.<br></p><p>Perhaps some while loop syntax like:<br></p><p>while (x &lt; someThing) start var x = 0, y = 11 {<br>	x += someOtherThing<br>}<br></p><p>Which is decidedly terrible syntax, but that&#39;s kind of the idea anyway.<br></p><p>Tyler<br></p><p><br></p><p><br></p><p>&gt; On Dec 4, 2015, at 3:21 PM, Colin Cornaby &lt;colin.cornaby at mac.com&gt; wrote:<br>&gt; <br>&gt; This is a nice solution that translates nicely without creating too much concern about changing the nature of an algorithm in a complex system. üëç<br>&gt; <br>&gt; Should at least get a nice &quot;fix it&quot; in Xcode though. On survey, we do have developers using the C style syntax, but we&#39;re early in the process of transitioning.<br>&gt; <br>&gt;&gt; On Dec 04, 2015, at 02:52 PM, Johan Jensen &lt;jj at johanjensen.dk&gt; wrote:<br>&gt;&gt; <br>&gt; <br>&gt;&gt; With the removal of post/pre-increment/decrement you might as well translate C-style for-loops to something akin to<br>&gt;&gt; <br>&gt;&gt; for var i in 0..&lt;10 {<br>&gt;&gt;     ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; If more advanced C-style for-loops are needed, I am sure most developers can use a while-loop (as mentioned by Ray Fix) until they get accustomed to Swift‚Äôs syntax. <br>&gt;&gt; <br>&gt;&gt;&gt; On Fri, Dec 4, 2015 at 11:37 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt; You might ease the pain by approximating C-style &#39;for&#39; by a higher-order function:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func cStyleFor(@autoclosure init initializer: () -&gt; (), @autoclosure test: () -&gt; Bool, @autoclosure inc: () -&gt; (), body: () throws -&gt; ()) rethrows {<br>&gt;&gt;&gt;   // left as an exercise<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; var i = 0<br>&gt;&gt;&gt; cStyleFor(init: i = 0, test: i &lt; 10, inc: ++i) {<br>&gt;&gt;&gt;   print(i)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 4, 2015, at 2:33 PM, Colin Cornaby &lt;colin.cornaby at mac.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I was talking with people in the office about this proposal today, in since there has been such a long discussion already I&#39;ll just reply to the top of the tree just to get our take in before the review...<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It&#39;s understood that Swift has better, more readable ways to do for loops, but C style for loops reduce friction for getting our C or C++ developers on board with Swift. Unless there is a gain elsewhere to be made in their removal, it would be nice to keep them. As we transition to Swift we can educate developers on better ways to iterate, but it would be nice to have one less thing in the way of getting people writing Swift code.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; We work on a lot of algorithmic code which would be well suited for Swift. And again, I understand that C style for loops are redundant. But it&#39;s just one less speed bump in understanding for some of our developers or for porting pure C or C++ code without having to do as much re-validation of algorithms for accidental changes.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; But if it&#39;s actively hurting some other part of the language we could probably be talked into it.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 03, 2015, at 03:32 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Does Swift still needs C-style for loops with conditions and incrementers? <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; &lt;Screen Shot 2015-12-03 at 4.30.15 PM.png&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; More Swift-like construction is already available with for-in-statements and stride. <br>&gt;&gt;&gt;&gt;&gt; This would naturally starve the most common point for -- and ++ operators as well.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -- E<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/21193072/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/32b9484a7a9c2d4c347a1dae9db3d1fe?s=50"></div><header><strong>C-style For Loops</strong> from <string>Roland King</string> &lt;rols at rols.org&gt;<p>December  5, 2015 at 03:00:00pm</p></header><div class="content"><p>I must be the only person who still likes C-style for loops on occasion. eg a loop with something floating point <br></p><p>for var floatingThing = start ; floatingThing &lt;= end ; floatingThing += delta<br>{<br>	// more than a few lines of code with early escape continues<br>}<br></p><p>shows intent of the loop very clearly, start, condition and increment all together at the top, and however you loop you always execute the increment part of the statement. Convert that to a while(), if you have a continue in the body, you have a good chance of not incrementing at all, or duplicating the increment code before every continue. So you can‚Äôt always nicely turn for into while. I second the point below about the loop variable being local to the for as well, I also like that. <br></p><p>In the float case yes you can use stride<br></p><p>for var floatingThing in start.stride( through : end, by : delta )<br>{<br>}<br></p><p>but it‚Äôs not terribly pretty and you have to be sure whether you mean stride( through:, end:) or stride( to:, end:)<br></p><p>That‚Äôs not a problem with integers where you have the ‚Äò0..&lt;n‚Äô syntax which reads very clearly in a for .. in construct but in other cases the old c-style for can be a clearer read than for .. in with an iterator. <br></p><p><br></p><p>&gt; On 5 Dec 2015, at 15:14, Tyler Cloutier &lt;cloutiertyler at aol.com&gt; wrote:<br>&gt; <br>&gt; Indeed. Python doesn&#39;t have it, and there isn&#39;t much concern about the learning curve or the missing functionality there, it seems. I actually didn&#39;t even realize it was missing from Python until I stopped and thought about it.<br>&gt; <br>&gt; At first I was concerned about losing C style for loops, but I really can imagine a scenario in which they are more succinct while still maintaining clarity of intent. Plus they&#39;re a pain to type out.<br>&gt; <br>&gt; From time to time when programming in C or JS I will include more than one statement or more complicated logic in the increment part of the for loop (perhaps move 2 indices in a complicated way), but perhaps that would be clearer just to implement as a while loop with the logic at the end. <br>&gt; <br>&gt; One thing I will say is that it&#39;s nice to have your loop variables scoped to the loop, which is more difficult (impossible?) to accomplish with a while loop.<br>&gt; <br>&gt; Perhaps some while loop syntax like:<br>&gt; <br>&gt; while (x &lt; someThing) start var x = 0, y = 11 {<br>&gt; 	x += someOtherThing<br>&gt; }<br>&gt; <br>&gt; Which is decidedly terrible syntax, but that&#39;s kind of the idea anyway.<br>&gt; <br>&gt; Tyler<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; On Dec 4, 2015, at 3:21 PM, Colin Cornaby &lt;colin.cornaby at mac.com &lt;mailto:colin.cornaby at mac.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; This is a nice solution that translates nicely without creating too much concern about changing the nature of an algorithm in a complex system. üëç<br>&gt;&gt; <br>&gt;&gt; Should at least get a nice &quot;fix it&quot; in Xcode though. On survey, we do have developers using the C style syntax, but we&#39;re early in the process of transitioning.<br>&gt;&gt; <br>&gt;&gt; On Dec 04, 2015, at 02:52 PM, Johan Jensen &lt;jj at johanjensen.dk &lt;mailto:jj at johanjensen.dk&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; With the removal of post/pre-increment/decrement you might as well translate C-style for-loops to something akin to<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for var i in 0..&lt;10 {<br>&gt;&gt;&gt;     ...<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If more advanced C-style for-loops are needed, I am sure most developers can use a while-loop (as mentioned by Ray Fix) until they get accustomed to Swift‚Äôs syntax. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Fri, Dec 4, 2015 at 11:37 PM, Joe Groff &lt;jgroff at apple.com &lt;mailto:jgroff at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; You might ease the pain by approximating C-style &#39;for&#39; by a higher-order function:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func cStyleFor(@autoclosure init initializer: () -&gt; (), @autoclosure test: () -&gt; Bool, @autoclosure inc: () -&gt; (), body: () throws -&gt; ()) rethrows {<br>&gt;&gt;&gt;   // left as an exercise<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; var i = 0<br>&gt;&gt;&gt; cStyleFor(init: i = 0, test: i &lt; 10, inc: ++i) {<br>&gt;&gt;&gt;   print(i)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 4, 2015, at 2:33 PM, Colin Cornaby &lt;colin.cornaby at mac.com &lt;mailto:colin.cornaby at mac.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I was talking with people in the office about this proposal today, in since there has been such a long discussion already I&#39;ll just reply to the top of the tree just to get our take in before the review...<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It&#39;s understood that Swift has better, more readable ways to do for loops, but C style for loops reduce friction for getting our C or C++ developers on board with Swift. Unless there is a gain elsewhere to be made in their removal, it would be nice to keep them. As we transition to Swift we can educate developers on better ways to iterate, but it would be nice to have one less thing in the way of getting people writing Swift code.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; We work on a lot of algorithmic code which would be well suited for Swift. And again, I understand that C style for loops are redundant. But it&#39;s just one less speed bump in understanding for some of our developers or for porting pure C or C++ code without having to do as much re-validation of algorithms for accidental changes.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; But if it&#39;s actively hurting some other part of the language we could probably be talked into it.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 03, 2015, at 03:32 PM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Does Swift still needs C-style for loops with conditions and incrementers? <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; &lt;Screen Shot 2015-12-03 at 4.30.15 PM.png&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; More Swift-like construction is already available with for-in-statements and stride. <br>&gt;&gt;&gt;&gt;&gt; This would naturally starve the most common point for -- and ++ operators as well.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -- E<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/ecf7a13a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3fe51901d36948779ddf2d144babf2c3?s=50"></div><header><strong>C-style For Loops</strong> from <string>Matthijs Hollemans</string> &lt;mail at hollance.com&gt;<p>December  5, 2015 at 11:00:00am</p></header><div class="content"><p>You‚Äôre not the only one, I like them too. :-)<br></p><p>I notice that the SE-0007 proposal only includes positive feedback from the community. I hope that counter arguments will be added too.<br></p><p>The thing that bothers me about this first batch of proposals is that they seem to be about ‚Äúdumbing down‚Äù the language. Personally, I think it would be a mistake to remove ‚Äúpower‚Äù features such as the C-style for loop. I like Swift but I don‚Äôt want it to hold my hand all the time.<br></p><p>You may think the following is horrible code ‚Äî I like the expressiveness:<br></p><p>extension LinkedList {<br>  public func reverse() {<br>    for var node = head; node != nil; head = node, node = node!.previous {<br>      // swap next and previous<br>    }<br>  }<br>}<br></p><p>Another example from the same LinkedList class. It finds the right place to insert a new node:<br></p><p>  for next = head; next != nil &amp;&amp; index &gt; 0; prev = next, next = next!.next, --index { }<br></p><p>Extreme? Probably, but I like it better than the same thing done in five lines of while loop.<br></p><p>Another benefit of a C-style for loop is that it simply ignores the loop when n &lt;= i, as in the following example,<br></p><p>  for var i = 100; i &lt; n; ++i { ...<br></p><p>while the Swifty version gives an error because it cannot create a range where the end is smaller than the start: <br></p><p>  for i in 100..&lt;n { ...<br></p><p>Of course, you can add an if-statement to catch this but in the C-style loop this is implicit. Hence, it is more expressive.<br></p><p>Personally, I tend to use for-in as much as possible but I dislike it for going backwards. It‚Äôs a style thing but I much prefer,<br></p><p>  for var i = 100; i &gt; 0; --i { ...<br></p><p>over: <br></p><p>  for i in 100.stride(to: 0, by: -1) { ...<br></p><p>Ideally I‚Äôd write this instead, but Swift doesn‚Äôt allow such ranges:<br></p><p>  for i in 100...1 {<br></p><p>In all these examples, I admit that a C-style for loop is harder to learn. So what? People are only beginners for a short time. I only have a little insight into this but from what I can tell, most beginners don‚Äôt have a problem learning the language so much as the frameworks.<br></p><p>We shouldn‚Äôt ‚Äúsimplify‚Äù the language in the belief that this will help beginners, without a clear understanding of what sort of problems beginners actually have. So far all I‚Äôve seen are assumptions, not actual data. (I only have anecdotal evidence myself.)<br></p><p>Just to be clear: I‚Äôm not against making the language easier to learn, but that should not get in the way of allowing more advanced programmers to do their jobs.<br></p><p>-Matthijs<br></p><p><br></p><p><br>&gt; On 5 dec. 2015, at 08:54, Roland King &lt;rols at rols.org&gt; wrote:<br>&gt; <br>&gt; I must be the only person who still likes C-style for loops on occasion. eg a loop with something floating point <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/5fd9c7ec/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/900e19fd7259c4962c14f7fee2cc9789?s=50"></div><header><strong>C-style For Loops</strong> from <string>Per Melin</string> &lt;p at greendale.se&gt;<p>December  5, 2015 at 02:00:00pm</p></header><div class="content"><p>On Sat, Dec 5, 2015 at 11:10 AM, Matthijs Hollemans &lt;mail at hollance.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt;<br>Another example from the same LinkedList class. It finds the right place to<br>&gt; insert a new node:<br>&gt;<br>&gt;   for next = head; next != nil &amp;&amp; index &gt; 0; prev = next, next = next!.<br>&gt; next, --index { }<br>&gt;<br>&gt; Extreme? Probably, but I like it better than the same thing done in five<br>&gt; lines of while loop.<br>&gt;<br></p><p>next = head; while next != nil &amp;&amp; index &gt; 0 { prev = next; next =<br>next!.next; --index }<br></p><p>A &#39;for&#39; statement gets away with a single line only because it substitutes<br>semicolons and commas for line breaks. You can do the same with &#39;while&#39;.<br></p><p>But as Joe pointed out, you can recreate an almost identical &#39;for&#39;<br>with autoclosures<br>anyway.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/03a80003/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>C-style For Loops</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>December  5, 2015 at 02:00:00am</p></header><div class="content"><p>Hmm, yeah, that is definitely a good point. It can be easy enough to throw a continue into a while loop an completely skip the increment step. Of course you could add syntax to a while loop to allow for block/loop scoping of variables and then it might be tempting to add some finally logic to ensure that the incrementing is never skipped. Which, then what you have is a C style for loop with unfamiliar/unprecedented syntax, which would be silly.<br></p><p>Perhaps the question is, is it worth keeping the C style around for loop syntax for these particular types of uses?<br></p><p><br>On a total side note, I figure while I&#39;m proposing silly things and decidedly terrible syntax, I might as well mention that when I originally began programming I was confused about the need for two different styles of loops. It seemed like &quot;while&quot; was a special case of &quot;for&quot; and was redundant (but made for a nicer looking syntax). An interesting thought experiment is to think about what dropping &quot;while&quot; might look like.<br></p><p>Just like there is for-in<br></p><p>for x in someGenerator {<br>	// code<br>}<br></p><p>There could also be for-if-repeat and for-repeat-if<br></p><p>for var x = 0 if x &lt; 7 repeat {<br>	// code<br>} then x + 7<br></p><p>for var x = 0 repeat {<br>	// code<br>} if x &lt; 7 then x + 7<br></p><p>Certainly an unnecessary change considering the problem at hand and has obvious downsides, but I think fun to think about.<br></p><p>Tyler<br></p><p><br>&gt; On Dec 4, 2015, at 11:54 PM, Roland King &lt;rols at rols.org&gt; wrote:<br>&gt; <br>&gt; I must be the only person who still likes C-style for loops on occasion. eg a loop with something floating point <br>&gt; <br>&gt; for var floatingThing = start ; floatingThing &lt;= end ; floatingThing += delta<br>&gt; {<br>&gt; 	// more than a few lines of code with early escape continues<br>&gt; }<br>&gt; <br>&gt; shows intent of the loop very clearly, start, condition and increment all together at the top, and however you loop you always execute the increment part of the statement. Convert that to a while(), if you have a continue in the body, you have a good chance of not incrementing at all, or duplicating the increment code before every continue. So you can‚Äôt always nicely turn for into while. I second the point below about the loop variable being local to the for as well, I also like that. <br>&gt; <br>&gt; In the float case yes you can use stride<br>&gt; <br>&gt; for var floatingThing in start.stride( through : end, by : delta )<br>&gt; {<br>&gt; }<br>&gt; <br>&gt; but it‚Äôs not terribly pretty and you have to be sure whether you mean stride( through:, end:) or stride( to:, end:)<br>&gt; <br>&gt; That‚Äôs not a problem with integers where you have the ‚Äò0..&lt;n‚Äô syntax which reads very clearly in a for .. in construct but in other cases the old c-style for can be a clearer read than for .. in with an iterator. <br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On 5 Dec 2015, at 15:14, Tyler Cloutier &lt;cloutiertyler at aol.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Indeed. Python doesn&#39;t have it, and there isn&#39;t much concern about the learning curve or the missing functionality there, it seems. I actually didn&#39;t even realize it was missing from Python until I stopped and thought about it.<br>&gt;&gt; <br>&gt;&gt; At first I was concerned about losing C style for loops, but I really can imagine a scenario in which they are more succinct while still maintaining clarity of intent. Plus they&#39;re a pain to type out.<br>&gt;&gt; <br>&gt;&gt; From time to time when programming in C or JS I will include more than one statement or more complicated logic in the increment part of the for loop (perhaps move 2 indices in a complicated way), but perhaps that would be clearer just to implement as a while loop with the logic at the end. <br>&gt;&gt; <br>&gt;&gt; One thing I will say is that it&#39;s nice to have your loop variables scoped to the loop, which is more difficult (impossible?) to accomplish with a while loop.<br>&gt;&gt; <br>&gt;&gt; Perhaps some while loop syntax like:<br>&gt;&gt; <br>&gt;&gt; while (x &lt; someThing) start var x = 0, y = 11 {<br>&gt;&gt; 	x += someOtherThing<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Which is decidedly terrible syntax, but that&#39;s kind of the idea anyway.<br>&gt;&gt; <br>&gt;&gt; Tyler<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 4, 2015, at 3:21 PM, Colin Cornaby &lt;colin.cornaby at mac.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is a nice solution that translates nicely without creating too much concern about changing the nature of an algorithm in a complex system. üëç<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Should at least get a nice &quot;fix it&quot; in Xcode though. On survey, we do have developers using the C style syntax, but we&#39;re early in the process of transitioning.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 04, 2015, at 02:52 PM, Johan Jensen &lt;jj at johanjensen.dk&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; With the removal of post/pre-increment/decrement you might as well translate C-style for-loops to something akin to<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; for var i in 0..&lt;10 {<br>&gt;&gt;&gt;&gt;     ...<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If more advanced C-style for-loops are needed, I am sure most developers can use a while-loop (as mentioned by Ray Fix) until they get accustomed to Swift‚Äôs syntax. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Fri, Dec 4, 2015 at 11:37 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; You might ease the pain by approximating C-style &#39;for&#39; by a higher-order function:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; func cStyleFor(@autoclosure init initializer: () -&gt; (), @autoclosure test: () -&gt; Bool, @autoclosure inc: () -&gt; (), body: () throws -&gt; ()) rethrows {<br>&gt;&gt;&gt;&gt;&gt;   // left as an exercise<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; var i = 0<br>&gt;&gt;&gt;&gt;&gt; cStyleFor(init: i = 0, test: i &lt; 10, inc: ++i) {<br>&gt;&gt;&gt;&gt;&gt;   print(i)<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Dec 4, 2015, at 2:33 PM, Colin Cornaby &lt;colin.cornaby at mac.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I was talking with people in the office about this proposal today, in since there has been such a long discussion already I&#39;ll just reply to the top of the tree just to get our take in before the review...<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s understood that Swift has better, more readable ways to do for loops, but C style for loops reduce friction for getting our C or C++ developers on board with Swift. Unless there is a gain elsewhere to be made in their removal, it would be nice to keep them. As we transition to Swift we can educate developers on better ways to iterate, but it would be nice to have one less thing in the way of getting people writing Swift code.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; We work on a lot of algorithmic code which would be well suited for Swift. And again, I understand that C style for loops are redundant. But it&#39;s just one less speed bump in understanding for some of our developers or for porting pure C or C++ code without having to do as much re-validation of algorithms for accidental changes.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; But if it&#39;s actively hurting some other part of the language we could probably be talked into it.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Dec 03, 2015, at 03:32 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Does Swift still needs C-style for loops with conditions and incrementers? <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;Screen Shot 2015-12-03 at 4.30.15 PM.png&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; More Swift-like construction is already available with for-in-statements and stride. <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; This would naturally starve the most common point for -- and ++ operators as well.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; -- E<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/abc41ea7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/32b9484a7a9c2d4c347a1dae9db3d1fe?s=50"></div><header><strong>C-style For Loops</strong> from <string>Roland King</string> &lt;rols at rols.org&gt;<p>December  5, 2015 at 07:00:00pm</p></header><div class="content"><p>&gt; On 5 Dec 2015, at 18:27, Tyler Cloutier &lt;cloutiertyler at aol.com&gt; wrote:<br>&gt; <br>&gt; Hmm, yeah, that is definitely a good point. It can be easy enough to throw a continue into a while loop an completely skip the increment step. Of course you could add syntax to a while loop to allow for block/loop scoping of variables and then it might be tempting to add some finally logic to ensure that the incrementing is never skipped. Which, then what you have is a C style for loop with unfamiliar/unprecedented syntax, which would be silly.<br></p><p>Yes - I‚Äôm still thinking it through. while() is really a special case of the c-style for, just without the initializer and the pre-test increment (which I don‚Äôt like calling increment because it‚Äôs far more useful than that). The fact it calls the increment code every time before the test, with the notable exception of the first time, makes for a powerful sequence of test-do-increment-test-do-increment-test ..  which while() alone doesn‚Äôt quite replicate. A continue in a for loop doesn‚Äôt translate well into a while() at all, obviously you can do it with nested ifs and other means but I think the power of the sequence for() gives you along with continue and break lets you write simple, understandable loop code. <br></p><p>So I‚Äôm not convinced by the argument that where you see a for() you can write a while() with a bit of code shuffling, for() is more powerful than while(), while() is the special case. <br></p><p>So that moves on to for .. in. That looks persuasively like a syntax which you can always change a C-style for into. And of course you can, you can make a generic generator which takes a few closures and does exactly what the c-style for does if you want. It‚Äôs easy however to just think in terms of things which have natural generators, 1..&lt;n, an array of things, and when you use those with for .. in you get a very understandable line of code<br></p><p>	for var element in myArray {} <br></p><p>is very clear because Array has a natural generator. Under the hood this is of course sugar for a c-style for loop where the initialisation and increment are predefined. <br></p><p>In other non-natural-generator cases, turning things into generators in order to use them with for .. in makes the code harder to read and understand. I brought up iterating floats, some of Matthijs‚Äô examples from a couple of mails ago really would look a bit nasty shoehorned into an iterator paradigm so for .. in could un-shoehorn them again and turn them into the original for test-do-modify-test-do-modify-test he started with. <br></p><p>I‚Äôve now had my 2c twice - I will be quiet. <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/52a625de/attachment-0001.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d933552ea7fda10a4488a74223c00988?s=50"></div><header><strong>C-style For Loops</strong> from <string>Thorsten Seitz</string> &lt;thorsten.seitz at web.de&gt;<p>December  5, 2015 at 12:00:00pm</p></header><div class="content"><p>I‚Äôm not a big fan of the C-style for loop, mostly because i find the parts of it badly separated by those tiny semicolons which are easily overlooked.<br></p><p>Therefore for me it would be ok if the C-style for loop would be dropped but transforming its syntax into more Swift like syntax like suggested by Tyler might be even better as Roland and Tyler made some good points about advantages of the for loop (especially the guaranteed execution of the increment part). Being able to have the loop variable scoped locally to the loop is another advantage over the while loop.<br></p><p>Moving the incrementation part after the loop body as suggested by Tyler puts too much distance between the parts defining the loop mechanics IMHO (although I have to admit that it makes the order very clear), so I‚Äôd rather stay more closely with the original syntax, just eliminating the semicolons.<br></p><p>Therefore I‚Äôd like to suggest the following syntax (for-while-loop):<br></p><p>for var x = start while x &lt;= end loop x += delta {<br>	// more than a few lines of code with early escape continues<br>}<br></p><p>The initialization part (between ‚Äûfor&quot; and ‚Äûwhile‚Äú) and the loop part (after ‚Äûloop‚Äú) are allowed to contain more than one statement.<br>The scope of all variables introduced (in the example ‚Äûx‚Äú) is local to the loop.<br></p><p>Additionally the following form (for-until-loop) could be provided:<br></p><p>for var x = start until x &gt; end loop x += delta {<br>	// more than a few lines of code with early escape continues<br>}<br></p><p>Question: should the initialization part be restricted to var declarations or should it allow all statements?<br></p><p>Alternatives to the ‚Äûloop‚Äú keyword might be: iterate (a bit long), step, advance, next<br></p><p>Thorsten<br></p><p><br>&gt; Am 05.12.2015 um 11:27 schrieb Tyler Cloutier &lt;cloutiertyler at aol.com&gt;:<br>&gt; <br>&gt; Hmm, yeah, that is definitely a good point. It can be easy enough to throw a continue into a while loop an completely skip the increment step. Of course you could add syntax to a while loop to allow for block/loop scoping of variables and then it might be tempting to add some finally logic to ensure that the incrementing is never skipped. Which, then what you have is a C style for loop with unfamiliar/unprecedented syntax, which would be silly.<br>&gt; <br>&gt; Perhaps the question is, is it worth keeping the C style around for loop syntax for these particular types of uses?<br>&gt; <br>&gt; <br>&gt; On a total side note, I figure while I&#39;m proposing silly things and decidedly terrible syntax, I might as well mention that when I originally began programming I was confused about the need for two different styles of loops. It seemed like &quot;while&quot; was a special case of &quot;for&quot; and was redundant (but made for a nicer looking syntax). An interesting thought experiment is to think about what dropping &quot;while&quot; might look like.<br>&gt; <br>&gt; Just like there is for-in<br>&gt; <br>&gt; for x in someGenerator {<br>&gt; 	// code<br>&gt; }<br>&gt; <br>&gt; There could also be for-if-repeat and for-repeat-if<br>&gt; <br>&gt; for var x = 0 if x &lt; 7 repeat {<br>&gt; 	// code<br>&gt; } then x + 7<br>&gt; <br>&gt; for var x = 0 repeat {<br>&gt; 	// code<br>&gt; } if x &lt; 7 then x + 7<br>&gt; <br>&gt; Certainly an unnecessary change considering the problem at hand and has obvious downsides, but I think fun to think about.<br>&gt; <br>&gt; Tyler<br>&gt; <br>&gt; <br>&gt; On Dec 4, 2015, at 11:54 PM, Roland King &lt;rols at rols.org &lt;mailto:rols at rols.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; I must be the only person who still likes C-style for loops on occasion. eg a loop with something floating point <br>&gt;&gt; <br>&gt;&gt; for var floatingThing = start ; floatingThing &lt;= end ; floatingThing += delta<br>&gt;&gt; {<br>&gt;&gt; 	// more than a few lines of code with early escape continues<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; shows intent of the loop very clearly, start, condition and increment all together at the top, and however you loop you always execute the increment part of the statement. Convert that to a while(), if you have a continue in the body, you have a good chance of not incrementing at all, or duplicating the increment code before every continue. So you can‚Äôt always nicely turn for into while. I second the point below about the loop variable being local to the for as well, I also like that. <br>&gt;&gt; <br>&gt;&gt; In the float case yes you can use stride<br>&gt;&gt; <br>&gt;&gt; for var floatingThing in start.stride( through : end, by : delta )<br>&gt;&gt; {<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; but it‚Äôs not terribly pretty and you have to be sure whether you mean stride( through:, end:) or stride( to:, end:)<br>&gt;&gt; <br>&gt;&gt; That‚Äôs not a problem with integers where you have the ‚Äò0..&lt;n‚Äô syntax which reads very clearly in a for .. in construct but in other cases the old c-style for can be a clearer read than for .. in with an iterator. <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 5 Dec 2015, at 15:14, Tyler Cloutier &lt;cloutiertyler at aol.com &lt;mailto:cloutiertyler at aol.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Indeed. Python doesn&#39;t have it, and there isn&#39;t much concern about the learning curve or the missing functionality there, it seems. I actually didn&#39;t even realize it was missing from Python until I stopped and thought about it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; At first I was concerned about losing C style for loops, but I really can imagine a scenario in which they are more succinct while still maintaining clarity of intent. Plus they&#39;re a pain to type out.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; From time to time when programming in C or JS I will include more than one statement or more complicated logic in the increment part of the for loop (perhaps move 2 indices in a complicated way), but perhaps that would be clearer just to implement as a while loop with the logic at the end. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; One thing I will say is that it&#39;s nice to have your loop variables scoped to the loop, which is more difficult (impossible?) to accomplish with a while loop.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Perhaps some while loop syntax like:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; while (x &lt; someThing) start var x = 0, y = 11 {<br>&gt;&gt;&gt; 	x += someOtherThing<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Which is decidedly terrible syntax, but that&#39;s kind of the idea anyway.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Tyler<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Dec 4, 2015, at 3:21 PM, Colin Cornaby &lt;colin.cornaby at mac.com &lt;mailto:colin.cornaby at mac.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This is a nice solution that translates nicely without creating too much concern about changing the nature of an algorithm in a complex system. üëç<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Should at least get a nice &quot;fix it&quot; in Xcode though. On survey, we do have developers using the C style syntax, but we&#39;re early in the process of transitioning.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 04, 2015, at 02:52 PM, Johan Jensen &lt;jj at johanjensen.dk &lt;mailto:jj at johanjensen.dk&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; With the removal of post/pre-increment/decrement you might as well translate C-style for-loops to something akin to<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; for var i in 0..&lt;10 {<br>&gt;&gt;&gt;&gt;&gt;     ...<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; If more advanced C-style for-loops are needed, I am sure most developers can use a while-loop (as mentioned by Ray Fix) until they get accustomed to Swift‚Äôs syntax. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Fri, Dec 4, 2015 at 11:37 PM, Joe Groff &lt;jgroff at apple.com &lt;mailto:jgroff at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; You might ease the pain by approximating C-style &#39;for&#39; by a higher-order function:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; func cStyleFor(@autoclosure init initializer: () -&gt; (), @autoclosure test: () -&gt; Bool, @autoclosure inc: () -&gt; (), body: () throws -&gt; ()) rethrows {<br>&gt;&gt;&gt;&gt;&gt;   // left as an exercise<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; var i = 0<br>&gt;&gt;&gt;&gt;&gt; cStyleFor(init: i = 0, test: i &lt; 10, inc: ++i) {<br>&gt;&gt;&gt;&gt;&gt;   print(i)<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Dec 4, 2015, at 2:33 PM, Colin Cornaby &lt;colin.cornaby at mac.com &lt;mailto:colin.cornaby at mac.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I was talking with people in the office about this proposal today, in since there has been such a long discussion already I&#39;ll just reply to the top of the tree just to get our take in before the review...<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s understood that Swift has better, more readable ways to do for loops, but C style for loops reduce friction for getting our C or C++ developers on board with Swift. Unless there is a gain elsewhere to be made in their removal, it would be nice to keep them. As we transition to Swift we can educate developers on better ways to iterate, but it would be nice to have one less thing in the way of getting people writing Swift code.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; We work on a lot of algorithmic code which would be well suited for Swift. And again, I understand that C style for loops are redundant. But it&#39;s just one less speed bump in understanding for some of our developers or for porting pure C or C++ code without having to do as much re-validation of algorithms for accidental changes.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; But if it&#39;s actively hurting some other part of the language we could probably be talked into it.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Dec 03, 2015, at 03:32 PM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Does Swift still needs C-style for loops with conditions and incrementers? <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;Screen Shot 2015-12-03 at 4.30.15 PM.png&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; More Swift-like construction is already available with for-in-statements and stride. <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; This would naturally starve the most common point for -- and ++ operators as well.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; -- E<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/cc2342e1/attachment-0001.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/283bdc6ec76dd4d16b7a8234222e55d4?s=50"></div><header><strong>C-style For Loops</strong> from <string>Michel Fortin</string> &lt;michel.fortin at michelf.ca&gt;<p>December  5, 2015 at 08:00:00am</p></header><div class="content"><p>Le 5 d√©c. 2015 √† 2:54, Roland King &lt;rols at rols.org&gt; a √©crit :<br></p><p>&gt; Convert that to a while(), if you have a continue in the body, you have a good chance of not incrementing at all, or duplicating the increment code before every continue. <br></p><p>Well... you can do that:<br></p><p>	var x = 0<br>	while x &lt; 10 {<br>		defer { x += 1 } // warning: also increment x if an exception is thrown<br>		continue<br>	}<br></p><p>Or maybe the C-style for loop could just be made more readable. You could replace the semicolons with words:<br></p><p>	for var x = 0 while x &lt; 10 defer x += 1 {<br>	}<br></p><p>But that might be slightly misleading. &quot;defer&quot; would imply that this part is executed when an exception is thrown, which would be unlike a regular for loop.<br></p><p>-- <br>Michel Fortin<br>michel.fortin at michelf.ca<br>https://michelf.ca<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>C-style For Loops</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>December  5, 2015 at 11:00:00am</p></header><div class="content"><p>Maybe a keyword like &quot;oncontinue&quot; would be a little more obvious about its behavior than &quot;defer&quot;?<br></p><p>&gt; On Dec 5, 2015, at 5:17 AM, Michel Fortin &lt;michel.fortin at michelf.ca&gt; wrote:<br>&gt; <br>&gt;&gt; Le 5 d√©c. 2015 √† 2:54, Roland King &lt;rols at rols.org&gt; a √©crit :<br>&gt;&gt; <br>&gt;&gt; Convert that to a while(), if you have a continue in the body, you have a good chance of not incrementing at all, or duplicating the increment code before every continue.<br>&gt; <br>&gt; Well... you can do that:<br>&gt; <br>&gt;    var x = 0<br>&gt;    while x &lt; 10 {<br>&gt;        defer { x += 1 } // warning: also increment x if an exception is thrown<br>&gt;        continue<br>&gt;    }<br>&gt; <br>&gt; Or maybe the C-style for loop could just be made more readable. You could replace the semicolons with words:<br>&gt; <br>&gt;    for var x = 0 while x &lt; 10 defer x += 1 {<br>&gt;    }<br>&gt; <br>&gt; But that might be slightly misleading. &quot;defer&quot; would imply that this part is executed when an exception is thrown, which would be unlike a regular for loop.<br>&gt; <br>&gt; -- <br>&gt; Michel Fortin<br>&gt; michel.fortin at michelf.ca<br>&gt; https://michelf.ca<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
