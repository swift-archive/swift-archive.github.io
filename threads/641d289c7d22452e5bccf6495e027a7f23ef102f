<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e969a28448063facfac45cce7a27120?s=50"></div><header><strong>[Proposal] Shorthand Argument Renaming</strong> from <string>Frédéric Blondiau</string> &lt;frederic.blondiau at douwere.com&gt;<p>May 30, 2016 at 06:00:00pm</p></header><div class="content"><p>Hello,<br></p><p>I was thinking about this, and would like to get some feedback before making my first proposal.<br></p><p>Best regards,<br></p><p><br>Fred.<br>---<br></p><p>Shorthand Argument Renaming<br></p><p><br>Introduction<br></p><p>Swift automatically provides shorthand argument names to inline closures which cleverly allows us to write<br></p><p>    reversed = names.sort( { $0 &gt; $1 } )<br></p><p>I would suggest to use another syntax, using these new “names”<br></p><p>    reversed = names.sort( { .0 &gt; .1 } )<br></p><p><br>Motivation<br></p><p>The $n notation is generally used with positional parameters using one-based numbering, $1 referring to argument 1; $2, to argument 2... with a special meaning for $0 (could be the name of the function, or the full list of parameters).<br></p><p>This $n notation is often handy, but feels strange in Swift... like imported from UNIX scripting (but here zero-based, anyway).<br></p><p><br>Proposed solution<br></p><p>The .n notation is more Swift-like — as used to access Tuple members, for example.<br></p><p><br>Detailed design<br></p><p>Today, .0 or .1 (as any .n&#39;s) are refused by the compiler, as being not valid floating point literals.<br></p><p>I’m not a compiler expert, but eventually fetching this error inside a closure body could easily be translated into accepting this new syntax.<br></p><p>There can’t be conflict with other shorthands (like accessing static members using dot notation) as members can’t consist of only digits characters.<br></p><p><br>Impact on existing code<br></p><p>$n need to be rewritten .n<br></p><p><br>Alternatives considered<br></p><p>Create a default argument named “arguments” (like “error” in catch, “newValue” in setters or “oldValue” in a a didSet observer) accessed like a Tuple<br></p><p>    reversed = names.sort( { arguments.0 &gt; arguments.1 } )<br></p><p>but this is (of course) much less convenient.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d02ed1b20fc3e0fa1592ce5982f24d2b?s=50"></div><header><strong>[Proposal] Shorthand Argument Renaming</strong> from <string>Leonardo Pessoa</string> &lt;me at lmpessoa.com&gt;<p>May 30, 2016 at 02:00:00pm</p></header><div class="content"><p>Fréderic, the idea and reasoning are good and do make sense but I&#39;m<br>not 100% go on this. When I started using this syntax I felt like I<br>was back in PHP but once I got used it&#39;s ok. I don&#39;t see anything<br>wrong that justifies the change in syntax. Looking at your examples I<br>even think it&#39;s easier to spot &quot;$n&quot; in my code than &quot;.n&quot;.<br></p><p><br>On 30 May 2016 at 13:44, Frédéric Blondiau &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Hello,<br>&gt;<br>&gt; I was thinking about this, and would like to get some feedback before making my first proposal.<br>&gt;<br>&gt; Best regards,<br>&gt;<br>&gt;<br>&gt; Fred.<br>&gt; ---<br>&gt;<br>&gt; Shorthand Argument Renaming<br>&gt;<br>&gt;<br>&gt; Introduction<br>&gt;<br>&gt; Swift automatically provides shorthand argument names to inline closures which cleverly allows us to write<br>&gt;<br>&gt;     reversed = names.sort( { $0 &gt; $1 } )<br>&gt;<br>&gt; I would suggest to use another syntax, using these new “names”<br>&gt;<br>&gt;     reversed = names.sort( { .0 &gt; .1 } )<br>&gt;<br>&gt;<br>&gt; Motivation<br>&gt;<br>&gt; The $n notation is generally used with positional parameters using one-based numbering, $1 referring to argument 1; $2, to argument 2... with a special meaning for $0 (could be the name of the function, or the full list of parameters).<br>&gt;<br>&gt; This $n notation is often handy, but feels strange in Swift... like imported from UNIX scripting (but here zero-based, anyway).<br>&gt;<br>&gt;<br>&gt; Proposed solution<br>&gt;<br>&gt; The .n notation is more Swift-like — as used to access Tuple members, for example.<br>&gt;<br>&gt;<br>&gt; Detailed design<br>&gt;<br>&gt; Today, .0 or .1 (as any .n&#39;s) are refused by the compiler, as being not valid floating point literals.<br>&gt;<br>&gt; I’m not a compiler expert, but eventually fetching this error inside a closure body could easily be translated into accepting this new syntax.<br>&gt;<br>&gt; There can’t be conflict with other shorthands (like accessing static members using dot notation) as members can’t consist of only digits characters.<br>&gt;<br>&gt;<br>&gt; Impact on existing code<br>&gt;<br>&gt; $n need to be rewritten .n<br>&gt;<br>&gt;<br>&gt; Alternatives considered<br>&gt;<br>&gt; Create a default argument named “arguments” (like “error” in catch, “newValue” in setters or “oldValue” in a a didSet observer) accessed like a Tuple<br>&gt;<br>&gt;     reversed = names.sort( { arguments.0 &gt; arguments.1 } )<br>&gt;<br>&gt; but this is (of course) much less convenient.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e969a28448063facfac45cce7a27120?s=50"></div><header><strong>[Proposal] Shorthand Argument Renaming</strong> from <string>Frédéric Blondiau</string> &lt;frederic.blondiau at douwere.com&gt;<p>May 30, 2016 at 10:00:00pm</p></header><div class="content"><p>Thanks for your feedback.<br></p><p>I personally never found that this “$n” convention was “Swift-like”... but it’s true that a “$n” is easier to spot than a “.n”, and I got used to also.<br></p><p>However, I realised how much this was disturbing for newcomers, when explaining closure shorthand argument names to a classroom of computer science students (aged 21) discovering Swift.<br></p><p>The feedback some gave me, during the course, was quite surprisingly strong and negative about this “$n” convention. This convinced me to write this proposal : for newcomers, the “$n” zero-based is something wrong.<br></p><p>I understand that association between tuples and function parameters in Swift is to be removed, but, in this case, as we have no parameters at all, I thought this was a distinct enough situation.<br></p><p>As suggested, considering this is a kind of compiler magic, using #0, #1 instead, may indeed be a better alternative.<br></p><p>I’m still waiting some feedback before writing an official proposal.<br></p><p>&gt; On 30 May 2016, at 19:12, Leonardo Pessoa &lt;me at lmpessoa.com&gt; wrote:<br>&gt; <br>&gt; Fréderic, the idea and reasoning are good and do make sense but I&#39;m<br>&gt; not 100% go on this. When I started using this syntax I felt like I<br>&gt; was back in PHP but once I got used it&#39;s ok. I don&#39;t see anything<br>&gt; wrong that justifies the change in syntax. Looking at your examples I<br>&gt; even think it&#39;s easier to spot &quot;$n&quot; in my code than &quot;.n&quot;.<br>&gt; <br>&gt; <br>&gt; On 30 May 2016 at 13:44, Frédéric Blondiau &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Hello,<br>&gt;&gt; <br>&gt;&gt; I was thinking about this, and would like to get some feedback before making my first proposal.<br>&gt;&gt; <br>&gt;&gt; Best regards,<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Fred.<br>&gt;&gt; ---<br>&gt;&gt; <br>&gt;&gt; Shorthand Argument Renaming<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Introduction<br>&gt;&gt; <br>&gt;&gt; Swift automatically provides shorthand argument names to inline closures which cleverly allows us to write<br>&gt;&gt; <br>&gt;&gt;    reversed = names.sort( { $0 &gt; $1 } )<br>&gt;&gt; <br>&gt;&gt; I would suggest to use another syntax, using these new “names”<br>&gt;&gt; <br>&gt;&gt;    reversed = names.sort( { .0 &gt; .1 } )<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Motivation<br>&gt;&gt; <br>&gt;&gt; The $n notation is generally used with positional parameters using one-based numbering, $1 referring to argument 1; $2, to argument 2... with a special meaning for $0 (could be the name of the function, or the full list of parameters).<br>&gt;&gt; <br>&gt;&gt; This $n notation is often handy, but feels strange in Swift... like imported from UNIX scripting (but here zero-based, anyway).<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Proposed solution<br>&gt;&gt; <br>&gt;&gt; The .n notation is more Swift-like — as used to access Tuple members, for example.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Detailed design<br>&gt;&gt; <br>&gt;&gt; Today, .0 or .1 (as any .n&#39;s) are refused by the compiler, as being not valid floating point literals.<br>&gt;&gt; <br>&gt;&gt; I’m not a compiler expert, but eventually fetching this error inside a closure body could easily be translated into accepting this new syntax.<br>&gt;&gt; <br>&gt;&gt; There can’t be conflict with other shorthands (like accessing static members using dot notation) as members can’t consist of only digits characters.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Impact on existing code<br>&gt;&gt; <br>&gt;&gt; $n need to be rewritten .n<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Alternatives considered<br>&gt;&gt; <br>&gt;&gt; Create a default argument named “arguments” (like “error” in catch, “newValue” in setters or “oldValue” in a a didSet observer) accessed like a Tuple<br>&gt;&gt; <br>&gt;&gt;    reversed = names.sort( { arguments.0 &gt; arguments.1 } )<br>&gt;&gt; <br>&gt;&gt; but this is (of course) much less convenient.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Proposal] Shorthand Argument Renaming</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>May 30, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On May 30, 2016, at 2:19 PM, Frédéric Blondiau via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I personally never found that this “$n” convention was “Swift-like”... but it’s true that a “$n” is easier to spot than a “.n”, and I got used to also.<br>&gt; <br>&gt; However, I realised how much this was disturbing for newcomers, when explaining closure shorthand argument names to a classroom of computer science students (aged 21) discovering Swift.<br>&gt; <br>&gt; The feedback some gave me, during the course, was quite surprisingly strong and negative about this “$n” convention. This convinced me to write this proposal : for newcomers, the “$n” zero-based is something wrong.<br>&gt; <br>&gt; I understand that association between tuples and function parameters in Swift is to be removed, but, in this case, as we have no parameters at all, I thought this was a distinct enough situation.<br>&gt; <br>&gt; As suggested, considering this is a kind of compiler magic, using #0, #1 instead, may indeed be a better alternative.<br>&gt; <br>&gt; I’m still waiting some feedback before writing an official proposal.<br></p><p>I really don&#39;t see a pressing need to change this. Zero-based counting is used in Swift arrays. I don&#39;t think the $-prefix is either superior or inferior to alternatives such as # or %, and has precedent in unix shell programming. Swift closures allow you to easily introduce meaningful names by using a closure signature with a parameter clause. <br></p><p>-- E<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e969a28448063facfac45cce7a27120?s=50"></div><header><strong>[Proposal] Shorthand Argument Renaming</strong> from <string>Frédéric Blondiau</string> &lt;frederic.blondiau at douwere.com&gt;<p>May 31, 2016 at 10:00:00am</p></header><div class="content"><p>This was the point :  $ has precedent in unix shell programming with one-based counting, and zero-based counting is used in Swift.  Replacing $n with #n helps on improving consistency of syntax in a small way (a focus of Swift 3), by removing this incoherence.<br></p><p>&gt; On 30 May 2016, at 23:17, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 30, 2016, at 2:19 PM, Frédéric Blondiau via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I personally never found that this “$n” convention was “Swift-like”... but it’s true that a “$n” is easier to spot than a “.n”, and I got used to also.<br>&gt;&gt; <br>&gt;&gt; However, I realised how much this was disturbing for newcomers, when explaining closure shorthand argument names to a classroom of computer science students (aged 21) discovering Swift.<br>&gt;&gt; <br>&gt;&gt; The feedback some gave me, during the course, was quite surprisingly strong and negative about this “$n” convention. This convinced me to write this proposal : for newcomers, the “$n” zero-based is something wrong.<br>&gt;&gt; <br>&gt;&gt; I understand that association between tuples and function parameters in Swift is to be removed, but, in this case, as we have no parameters at all, I thought this was a distinct enough situation.<br>&gt;&gt; <br>&gt;&gt; As suggested, considering this is a kind of compiler magic, using #0, #1 instead, may indeed be a better alternative.<br>&gt;&gt; <br>&gt;&gt; I’m still waiting some feedback before writing an official proposal.<br>&gt; <br>&gt; I really don&#39;t see a pressing need to change this. Zero-based counting is used in Swift arrays. I don&#39;t think the $-prefix is either superior or inferior to alternatives such as # or %, and has precedent in unix shell programming. Swift closures allow you to easily introduce meaningful names by using a closure signature with a parameter clause. <br>&gt; <br>&gt; -- E<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Proposal] Shorthand Argument Renaming</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 30, 2016 at 08:00:00pm</p></header><div class="content"><p>Personally I also don&#39;t like the `$N` syntax. But I don&#39;t suport `.N` <br>syntax as it looks like the closure argument is tuple, and like we use <br>tuple&#39;s values in body. But we removed association between tuples and <br>function parameters in Swift.<br></p><p>First my thoughts were about `_1` `_2` syntax.<br></p><p>reversed = names.sort( { _0 &gt; _1 } )<br></p><p>as `_` similar as unnamed variable/parameter like<br></p><p>let _ = something()<br></p><p>But I&#39;m also not sure if it worth to change this<br></p><p>On 30.05.2016 19:44, Frédéric Blondiau via swift-evolution wrote:<br>&gt; Hello,<br>&gt;<br>&gt; I was thinking about this, and would like to get some feedback before making my first proposal.<br>&gt;<br>&gt; Best regards,<br>&gt;<br>&gt;<br>&gt; Fred.<br>&gt; ---<br>&gt;<br>&gt; Shorthand Argument Renaming<br>&gt;<br>&gt;<br>&gt; Introduction<br>&gt;<br>&gt; Swift automatically provides shorthand argument names to inline closures which cleverly allows us to write<br>&gt;<br>&gt;     reversed = names.sort( { $0 &gt; $1 } )<br>&gt;<br>&gt; I would suggest to use another syntax, using these new “names”<br>&gt;<br>&gt;     reversed = names.sort( { .0 &gt; .1 } )<br>&gt;<br>&gt;<br>&gt; Motivation<br>&gt;<br>&gt; The $n notation is generally used with positional parameters using one-based numbering, $1 referring to argument 1; $2, to argument 2... with a special meaning for $0 (could be the name of the function, or the full list of parameters).<br>&gt;<br>&gt; This $n notation is often handy, but feels strange in Swift... like imported from UNIX scripting (but here zero-based, anyway).<br>&gt;<br>&gt;<br>&gt; Proposed solution<br>&gt;<br>&gt; The .n notation is more Swift-like — as used to access Tuple members, for example.<br>&gt;<br>&gt;<br>&gt; Detailed design<br>&gt;<br>&gt; Today, .0 or .1 (as any .n&#39;s) are refused by the compiler, as being not valid floating point literals.<br>&gt;<br>&gt; I’m not a compiler expert, but eventually fetching this error inside a closure body could easily be translated into accepting this new syntax.<br>&gt;<br>&gt; There can’t be conflict with other shorthands (like accessing static members using dot notation) as members can’t consist of only digits characters.<br>&gt;<br>&gt;<br>&gt; Impact on existing code<br>&gt;<br>&gt; $n need to be rewritten .n<br>&gt;<br>&gt;<br>&gt; Alternatives considered<br>&gt;<br>&gt; Create a default argument named “arguments” (like “error” in catch, “newValue” in setters or “oldValue” in a a didSet observer) accessed like a Tuple<br>&gt;<br>&gt;     reversed = names.sort( { arguments.0 &gt; arguments.1 } )<br>&gt;<br>&gt; but this is (of course) much less convenient.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Proposal] Shorthand Argument Renaming</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>May 30, 2016 at 06:00:00pm</p></header><div class="content"><p>I agree with the intent; I don’t especially like the dollar-sign syntax either, but I’m not a fan of this as an alternative either.<br></p><p>Considering this is a kind of compiler magic, what about using #0, #1 etc. instead?<br></p><p>&gt; On 30 May 2016, at 17:44, Frédéric Blondiau via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello,<br>&gt; <br>&gt; I was thinking about this, and would like to get some feedback before making my first proposal.<br>&gt; <br>&gt; Best regards,<br>&gt; <br>&gt; <br>&gt; Fred.<br>&gt; ---<br>&gt; <br>&gt; Shorthand Argument Renaming<br>&gt; <br>&gt; <br>&gt; Introduction<br>&gt; <br>&gt; Swift automatically provides shorthand argument names to inline closures which cleverly allows us to write<br>&gt; <br>&gt;    reversed = names.sort( { $0 &gt; $1 } )<br>&gt; <br>&gt; I would suggest to use another syntax, using these new “names”<br>&gt; <br>&gt;    reversed = names.sort( { .0 &gt; .1 } )<br>&gt; <br>&gt; <br>&gt; Motivation<br>&gt; <br>&gt; The $n notation is generally used with positional parameters using one-based numbering, $1 referring to argument 1; $2, to argument 2... with a special meaning for $0 (could be the name of the function, or the full list of parameters).<br>&gt; <br>&gt; This $n notation is often handy, but feels strange in Swift... like imported from UNIX scripting (but here zero-based, anyway).<br>&gt; <br>&gt; <br>&gt; Proposed solution<br>&gt; <br>&gt; The .n notation is more Swift-like — as used to access Tuple members, for example.<br>&gt; <br>&gt; <br>&gt; Detailed design<br>&gt; <br>&gt; Today, .0 or .1 (as any .n&#39;s) are refused by the compiler, as being not valid floating point literals.<br>&gt; <br>&gt; I’m not a compiler expert, but eventually fetching this error inside a closure body could easily be translated into accepting this new syntax.<br>&gt; <br>&gt; There can’t be conflict with other shorthands (like accessing static members using dot notation) as members can’t consist of only digits characters.<br>&gt; <br>&gt; <br>&gt; Impact on existing code<br>&gt; <br>&gt; $n need to be rewritten .n<br>&gt; <br>&gt; <br>&gt; Alternatives considered<br>&gt; <br>&gt; Create a default argument named “arguments” (like “error” in catch, “newValue” in setters or “oldValue” in a a didSet observer) accessed like a Tuple<br>&gt; <br>&gt;    reversed = names.sort( { arguments.0 &gt; arguments.1 } )<br>&gt; <br>&gt; but this is (of course) much less convenient.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>[Proposal] Shorthand Argument Renaming</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>June  1, 2016 at 10:00:00am</p></header><div class="content"><p>Not for or against a change in shorthand/defaulted names in general, but leading-dot in particular.<br></p><p>Leading dot already means something (access a static property/method of the expected type, including enum types). This usage has nothing to do with that existing behavior of the syntax other than being terse. Reusing syntax for wildly different behavior is also a recipe for confusion.<br></p><p>In addition, the dot syntax may make people think they are acting on a member of a type or tuple, while that is not currently the underlying behavior.<br></p><p>-DW<br></p><p>&gt; On May 30, 2016, at 12:44 PM, Frédéric Blondiau via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello,<br>&gt; <br>&gt; I was thinking about this, and would like to get some feedback before making my first proposal.<br>&gt; <br>&gt; Best regards,<br>&gt; <br>&gt; <br>&gt; Fred.<br>&gt; ---<br>&gt; <br>&gt; Shorthand Argument Renaming<br>&gt; <br>&gt; <br>&gt; Introduction<br>&gt; <br>&gt; Swift automatically provides shorthand argument names to inline closures which cleverly allows us to write<br>&gt; <br>&gt;    reversed = names.sort( { $0 &gt; $1 } )<br>&gt; <br>&gt; I would suggest to use another syntax, using these new “names”<br>&gt; <br>&gt;    reversed = names.sort( { .0 &gt; .1 } )<br>&gt; <br>&gt; <br>&gt; Motivation<br>&gt; <br>&gt; The $n notation is generally used with positional parameters using one-based numbering, $1 referring to argument 1; $2, to argument 2... with a special meaning for $0 (could be the name of the function, or the full list of parameters).<br>&gt; <br>&gt; This $n notation is often handy, but feels strange in Swift... like imported from UNIX scripting (but here zero-based, anyway).<br>&gt; <br>&gt; <br>&gt; Proposed solution<br>&gt; <br>&gt; The .n notation is more Swift-like — as used to access Tuple members, for example.<br>&gt; <br>&gt; <br>&gt; Detailed design<br>&gt; <br>&gt; Today, .0 or .1 (as any .n&#39;s) are refused by the compiler, as being not valid floating point literals.<br>&gt; <br>&gt; I’m not a compiler expert, but eventually fetching this error inside a closure body could easily be translated into accepting this new syntax.<br>&gt; <br>&gt; There can’t be conflict with other shorthands (like accessing static members using dot notation) as members can’t consist of only digits characters.<br>&gt; <br>&gt; <br>&gt; Impact on existing code<br>&gt; <br>&gt; $n need to be rewritten .n<br>&gt; <br>&gt; <br>&gt; Alternatives considered<br>&gt; <br>&gt; Create a default argument named “arguments” (like “error” in catch, “newValue” in setters or “oldValue” in a a didSet observer) accessed like a Tuple<br>&gt; <br>&gt;    reversed = names.sort( { arguments.0 &gt; arguments.1 } )<br>&gt; <br>&gt; but this is (of course) much less convenient.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: signature.asc<br>Type: application/pgp-signature<br>Size: 496 bytes<br>Desc: Message signed with OpenPGP using GPGMail<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160601/621f3d2b/attachment.sig&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
