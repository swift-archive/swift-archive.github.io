<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>Why can&#39;t protocols define constants or subtypes?</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>May 11, 2016 at 12:00:00pm</p></header><div class="content"><p>With a class or a struct, I can nest constants and subtypes within the type, like so:<br></p><p>class MyWidget {<br>	static let SomeConstant = “This string is useful to subclasses of MyWidget somehow&quot;<br>	<br>	enum Type {<br>		case Cog<br>		case Sprocket<br>	}<br></p><p>	enum Error {<br>		case SomethingWentWrong<br>		case SomethingElseWentWrong<br>	}<br></p><p>	var type: Self.Type // This doesn’t work yet, but it should after SE-0068 is implemented<br></p><p>	func doSomething() throws // might throw one of the errors above<br>}<br></p><p>This is nice for namespacing, and it makes the code clear and organized.<br></p><p>However, if I convert this to a protocol-based approach, I have to do this the old Objective-C way:<br></p><p>static let MyWidgetSomeConstant = “This string is useful to implementers of MyWidget somehow&quot;<br></p><p>enum MyWidgetType {<br>	case Cog<br>	case Sprocket<br>}<br></p><p>enum MyWidgetError {<br>	case SomethingWentWrong<br>	case SomethingElseWentWrong<br>}<br></p><p>protocol MyWidget {<br>	var type: MyWidgetType<br></p><p>	func doSomething() throws // might throw one of the errors above<br>}<br></p><p>This is ugly, and pollutes the global namespace with things that are only interesting to users and implementers of MyWidget. Is there a reason behind this? It seems that it could be useful to define constants and subtypes that could be useful for implementers of a protocol.<br></p><p>Charles<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
