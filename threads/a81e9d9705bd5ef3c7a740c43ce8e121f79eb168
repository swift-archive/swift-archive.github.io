<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6e0bf2aabb9fc16782586e834dc6e2d7?s=50"></div><header><strong>Extending declaration scope to condition for `repeat { } while ()`</strong> from <string>Braeden Profile</string> &lt;jhaezhyr12 at gmail.com&gt;<p>July 18, 2016 at 11:00:00am</p></header><div class="content"><p>Good morning, Swift community!<br></p><p>I’ve come across a situation a number of times where I write code that has to try something one or more times using a `repeat…while` loop and the condition relies upon variables that should be declared within the scope of the loop.<br></p><p>repeat<br>{<br>	let success = doSomething()<br>}<br>while !success<br></p><p>The compiler unnecessarily prohibits this:  “Use of unresolved identifier four.”  In this simple case, we can write:<br></p><p>repeat<br>{ }<br>while !doSomething()<br></p><p>But in a more complex situation, we are forced to write:<br></p><p>var success: Bool<br>repeat<br>{<br>	success = doSomething()<br>}<br>while !success<br></p><p><br>We could change this so that the declarations within the top level scope of the loop are accessible from the condition.<br></p><p>Thanks for reading my first post to the Swift discussion board!<br>—Braeden<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160718/a81eb168/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a6729e3608691552bd1c61373d0e5b08?s=50"></div><header><strong>Extending declaration scope to condition for `repeat { } while ()`</strong> from <string>Kevin Nattinger</string> &lt;swift at nattinger.net&gt;<p>July 18, 2016 at 11:00:00am</p></header><div class="content"><p>I would love this behavior, I ran into a case just a week or two ago where I was wishing for this behavior.<br></p><p>That said, I’m not sure whether it would be possible / feasible for the compiler. And it’s additive so it will have to wait for after Swift 3 is released.<br></p><p>&gt; On Jul 18, 2016, at 10:52 AM, Braeden Profile via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Good morning, Swift community!<br>&gt; <br>&gt; I’ve come across a situation a number of times where I write code that has to try something one or more times using a `repeat…while` loop and the condition relies upon variables that should be declared within the scope of the loop.<br>&gt; <br>&gt; repeat<br>&gt; {<br>&gt; 	let success = doSomething()<br>&gt; }<br>&gt; while !success<br>&gt; <br>&gt; The compiler unnecessarily prohibits this:  “Use of unresolved identifier four.”  In this simple case, we can write:<br>&gt; <br>&gt; repeat<br>&gt; { }<br>&gt; while !doSomething()<br>&gt; <br>&gt; But in a more complex situation, we are forced to write:<br>&gt; <br>&gt; var success: Bool<br>&gt; repeat<br>&gt; {<br>&gt; 	success = doSomething()<br>&gt; }<br>&gt; while !success<br>&gt; <br>&gt; <br>&gt; We could change this so that the declarations within the top level scope of the loop are accessible from the condition.<br>&gt; <br>&gt; Thanks for reading my first post to the Swift discussion board!<br>&gt; —Braeden<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Extending declaration scope to condition for `repeat { } while ()`</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>July 18, 2016 at 09:00:00pm</p></header><div class="content"><p>Strong +1 from me, I actually ran into a bunch of cases like this recently, having to put a tracking variable outside the loop feels weird; it makes sense for a regular while loop, but I see no reason that repeat/while couldn&#39;t have values from the loop be in scope for its condition.<br></p><p>There is a very slim chance of breakage if a variable is shadowed, can we use that as an excuse to get this done in Swift 3? =D<br></p><p>&gt; On 18 Jul 2016, at 18:52, Braeden Profile via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Good morning, Swift community!<br>&gt; <br>&gt; I’ve come across a situation a number of times where I write code that has to try something one or more times using a `repeat…while` loop and the condition relies upon variables that should be declared within the scope of the loop.<br>&gt; <br>&gt; repeat<br>&gt; {<br>&gt; 	let success = doSomething()<br>&gt; }<br>&gt; while !success<br>&gt; <br>&gt; The compiler unnecessarily prohibits this:  “Use of unresolved identifier four.”  In this simple case, we can write:<br>&gt; <br>&gt; repeat<br>&gt; { }<br>&gt; while !doSomething()<br>&gt; <br>&gt; But in a more complex situation, we are forced to write:<br>&gt; <br>&gt; var success: Bool<br>&gt; repeat<br>&gt; {<br>&gt; 	success = doSomething()<br>&gt; }<br>&gt; while !success<br>&gt; <br>&gt; <br>&gt; We could change this so that the declarations within the top level scope of the loop are accessible from the condition.<br>&gt; <br>&gt; Thanks for reading my first post to the Swift discussion board!<br>&gt; —Braeden<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160718/3fc08fb8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a5a2cebcb5559ab317c1ce5a5ed9a064?s=50"></div><header><strong>Extending declaration scope to condition for `repeat { } while ()`</strong> from <string>Garth Snyder</string> &lt;garth at garthsnyder.com&gt;<p>July 18, 2016 at 01:00:00pm</p></header><div class="content"><p>+1. Write it up.<br></p><p>Garth<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Extending declaration scope to condition for `repeat { } while ()`</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 18, 2016 at 08:00:00pm</p></header><div class="content"><p>Another +1 here.<br>On Mon, Jul 18, 2016 at 15:08 Garth Snyder via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; +1. Write it up.<br>&gt;<br>&gt; Garth<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160718/559e5d31/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>Extending declaration scope to condition for `repeat { } while ()`</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>July 18, 2016 at 03:00:00pm</p></header><div class="content"><p>I’ve wanted this myself, too, so I’m generally +1, although I’ve also wondered if maybe this syntax should be changed somehow. I’ve not put a lot of thought into it, and this perhaps has come up before, but I sort of wonder.. would it make more sense to get rid of the trailing “while” entirely?<br></p><p>Here’s what I’m thinking:<br></p><p>This repeats forever - infinite loop:<br></p><p>repeat {}<br></p><p>And to get out of the infinite loop, you’d just use an if or guard the same way you might in any other loop in some cases:<br></p><p>repeat {<br>  let success = doSomething()<br>  guard success else { break }<br>}<br></p><p>We could potentially even warn if you use a repeat {} without there being a break inside the body somewhere.<br></p><p>This way, we eliminate a special syntactical form (repeat/while has always felt weird in every brace-based language I’ve used) and just piggyback on the existing break/continue/guard/if mechanisms that are already there and common. Then we also don’t need to have a special “weird” rule where the scope of variables change magically for repeat/while.<br></p><p>l8r<br>Sean<br></p><p><br></p><p>&gt; On Jul 18, 2016, at 12:52 PM, Braeden Profile via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Good morning, Swift community!<br>&gt; <br>&gt; I’ve come across a situation a number of times where I write code that has to try something one or more times using a `repeat…while` loop and the condition relies upon variables that should be declared within the scope of the loop.<br>&gt; <br>&gt; repeat<br>&gt; {<br>&gt; 	let success = doSomething()<br>&gt; }<br>&gt; while !success<br>&gt; <br>&gt; The compiler unnecessarily prohibits this:  “Use of unresolved identifier four.”  In this simple case, we can write:<br>&gt; <br>&gt; repeat<br>&gt; { }<br>&gt; while !doSomething()<br>&gt; <br>&gt; But in a more complex situation, we are forced to write:<br>&gt; <br>&gt; var success: Bool<br>&gt; repeat<br>&gt; {<br>&gt; 	success = doSomething()<br>&gt; }<br>&gt; while !success<br>&gt; <br>&gt; <br>&gt; We could change this so that the declarations within the top level scope of the loop are accessible from the condition.<br>&gt; <br>&gt; Thanks for reading my first post to the Swift discussion board!<br>&gt; —Braeden<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Extending declaration scope to condition for `repeat { } while ()`</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>July 18, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On 18 Jul 2016, at 21:32, Sean Heber via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I’ve wanted this myself, too, so I’m generally +1, although I’ve also wondered if maybe this syntax should be changed somehow. I’ve not put a lot of thought into it, and this perhaps has come up before, but I sort of wonder.. would it make more sense to get rid of the trailing “while” entirely?<br>&gt; <br>&gt; Here’s what I’m thinking:<br>&gt; <br>&gt; This repeats forever - infinite loop:<br>&gt; <br>&gt; repeat {}<br>&gt; <br>&gt; And to get out of the infinite loop, you’d just use an if or guard the same way you might in any other loop in some cases:<br>&gt; <br>&gt; repeat {<br>&gt;  let success = doSomething()<br>&gt;  guard success else { break }<br>&gt; }<br>&gt; <br>&gt; We could potentially even warn if you use a repeat {} without there being a break inside the body somewhere.<br>&gt; <br>&gt; This way, we eliminate a special syntactical form (repeat/while has always felt weird in every brace-based language I’ve used) and just piggyback on the existing break/continue/guard/if mechanisms that are already there and common. Then we also don’t need to have a special “weird” rule where the scope of variables change magically for repeat/while.<br>&gt; <br>&gt; l8r<br>&gt; Sean<br></p><p>That&#39;s a very interesting alternative, especially with a warning when there&#39;s no break (or return), and it would be clearer about the scope. Actually now I think about it, the repeat/while is a little odd in Swift since the while condition doesn&#39;t require parenthesis, which is great for a regular while or if condition because the braces give it structure, but that&#39;s not quite the case with the repeat/while.<br></p><p>I&#39;m fine either way, but this should be explored as well; guard in particular goes well this style of repeat syntax. More interestingly though is that this would actually allow us to write while loops as:<br></p><p>	repeat {<br>		guard someCondition() else { break }<br>		doSomething()<br>	}<br></p><p>while would essentially just become a shorthand.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160718/b20b6691/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6e0bf2aabb9fc16782586e834dc6e2d7?s=50"></div><header><strong>Extending declaration scope to condition for `repeat { } while ()`</strong> from <string>Braeden Profile</string> &lt;jhaezhyr12 at gmail.com&gt;<p>July 18, 2016 at 05:00:00pm</p></header><div class="content"><p>Great point; an infinite loop syntax would make a lot of sense.  It seems good for it to have its own syntax, considering you must have a `break` or `return` to escape it.  `while true { }` provides the same functionality, though it seems a bit less direct in its purpose than `repeat {  }` could.<br></p><p>&gt; On Jul 18, 2016, at 4:16 PM, Haravikk &lt;swift-evolution at haravikk.me&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 18 Jul 2016, at 21:32, Sean Heber via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I’ve wanted this myself, too, so I’m generally +1, although I’ve also wondered if maybe this syntax should be changed somehow. I’ve not put a lot of thought into it, and this perhaps has come up before, but I sort of wonder.. would it make more sense to get rid of the trailing “while” entirely?<br>&gt;&gt; <br>&gt;&gt; Here’s what I’m thinking:<br>&gt;&gt; <br>&gt;&gt; This repeats forever - infinite loop:<br>&gt;&gt; <br>&gt;&gt; repeat {}<br>&gt;&gt; <br>&gt;&gt; And to get out of the infinite loop, you’d just use an if or guard the same way you might in any other loop in some cases:<br>&gt;&gt; <br>&gt;&gt; repeat {<br>&gt;&gt;  let success = doSomething()<br>&gt;&gt;  guard success else { break }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; We could potentially even warn if you use a repeat {} without there being a break inside the body somewhere.<br>&gt;&gt; <br>&gt;&gt; This way, we eliminate a special syntactical form (repeat/while has always felt weird in every brace-based language I’ve used) and just piggyback on the existing break/continue/guard/if mechanisms that are already there and common. Then we also don’t need to have a special “weird” rule where the scope of variables change magically for repeat/while.<br>&gt;&gt; <br>&gt;&gt; l8r<br>&gt;&gt; Sean<br>&gt; <br>&gt; That&#39;s a very interesting alternative, especially with a warning when there&#39;s no break (or return), and it would be clearer about the scope. Actually now I think about it, the repeat/while is a little odd in Swift since the while condition doesn&#39;t require parenthesis, which is great for a regular while or if condition because the braces give it structure, but that&#39;s not quite the case with the repeat/while.<br>&gt; <br>&gt; I&#39;m fine either way, but this should be explored as well; guard in particular goes well this style of repeat syntax. More interestingly though is that this would actually allow us to write while loops as:<br>&gt; <br>&gt; 	repeat {<br>&gt; 		guard someCondition() else { break }<br>&gt; 		doSomething()<br>&gt; 	}<br>&gt; <br>&gt; while would essentially just become a shorthand.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160718/a826b55a/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Extending declaration scope to condition for `repeat { } while ()`</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>July 18, 2016 at 06:00:00pm</p></header><div class="content"><p>A few quick points. Apologies for the brevity.<br></p><p>1. Please take a look at the stateful version of `sequence`<br>2. Additive, non-breaking proposals should be deferred until next month.<br></p><p>In regard to point 1, create a sequence that terminates on false. <br>So you can hack something up like this (of course, hopefully a little more elegant)<br></p><p>extension Bool {<br>    var optionalPresentation: Bool? { return self ? self : nil }<br>}<br></p><p>// a fake example of terminating check<br>func doSomething() -&gt; Bool {<br>    return arc4random_uniform(10) &lt; 9 // 10% chance of ending<br>}<br></p><p>for nextItem in Swift.sequence(<br>    state: doSomething().optionalPresentation,<br>    next: { _ in return doSomething().optionalPresentation }) {<br>        <br>        // use nextItem state here<br>        // body of loop<br>}<br></p><p>Best,<br></p><p>-- E<br></p><p><br>&gt; On Jul 18, 2016, at 11:52 AM, Braeden Profile via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Good morning, Swift community!<br>&gt; <br>&gt; I’ve come across a situation a number of times where I write code that has to try something one or more times using a `repeat…while` loop and the condition relies upon variables that should be declared within the scope of the loop.<br>&gt; <br>&gt; repeat<br>&gt; {<br>&gt; 	let success = doSomething()<br>&gt; }<br>&gt; while !success<br>&gt; <br>&gt; The compiler unnecessarily prohibits this:  “Use of unresolved identifier four.”  In this simple case, we can write:<br>&gt; <br>&gt; repeat<br>&gt; { }<br>&gt; while !doSomething()<br>&gt; <br>&gt; But in a more complex situation, we are forced to write:<br>&gt; <br>&gt; var success: Bool<br>&gt; repeat<br>&gt; {<br>&gt; 	success = doSomething()<br>&gt; }<br>&gt; while !success<br>&gt; <br>&gt; <br>&gt; We could change this so that the declarations within the top level scope of the loop are accessible from the condition.<br>&gt; <br>&gt; Thanks for reading my first post to the Swift discussion board!<br>&gt; —Braeden<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160718/30903f26/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>Extending declaration scope to condition for `repeat { } while ()`</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>July 19, 2016 at 04:00:00am</p></header><div class="content"><p>This is definitively something very useful but it also introduces a strong asymmetry into Swift statements. In all control-flow statements, the condition is part of the outer scope. Or, to be more precise, its part of an intermediate scope between the outer and the inner scope (as you can declare variables in the condition which are invisible to the outer scope but visible to the inner scope). Your suggestion essentially moves the condition of repeat {} while () to the inner scope. I think that the more complex semantics is not worth the change. <br></p><p>Here is how I deal with it btw:<br></p><p>process: do {<br></p><p>   let success = …<br></p><p><br>   guard success else { continue process }<br>}<br></p><p>Again, goto FTW :p<br></p><p>T.<br></p><p><br>&gt; On 18 Jul 2016, at 19:52, Braeden Profile via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Good morning, Swift community!<br>&gt; <br>&gt; I’ve come across a situation a number of times where I write code that has to try something one or more times using a `repeat…while` loop and the condition relies upon variables that should be declared within the scope of the loop.<br>&gt; <br>&gt; repeat<br>&gt; {<br>&gt; 	let success = doSomething()<br>&gt; }<br>&gt; while !success<br>&gt; <br>&gt; The compiler unnecessarily prohibits this:  “Use of unresolved identifier four.”  In this simple case, we can write:<br>&gt; <br>&gt; repeat<br>&gt; { }<br>&gt; while !doSomething()<br>&gt; <br>&gt; But in a more complex situation, we are forced to write:<br>&gt; <br>&gt; var success: Bool<br>&gt; repeat<br>&gt; {<br>&gt; 	success = doSomething()<br>&gt; }<br>&gt; while !success<br>&gt; <br>&gt; <br>&gt; We could change this so that the declarations within the top level scope of the loop are accessible from the condition.<br>&gt; <br>&gt; Thanks for reading my first post to the Swift discussion board!<br>&gt; —Braeden<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160719/5a9ed3a9/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
