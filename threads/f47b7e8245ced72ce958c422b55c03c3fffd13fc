<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/582b7183bda90126e385e2cc95cb7088?s=50"></div><header><strong>[Idea] Passing an Array to Variadic Functions</strong> from <string>Justin Jia</string> &lt;justin.jia.developer at gmail.com&gt;<p>April 17, 2016 at 10:00:00am</p></header><div class="content"><p>Hi!<br></p><p>Currently, we can’t call a variadic function with an array of arguments.<br></p><p>Reference:<br>1. http://stackoverflow.com/questions/24024376/passing-an-array-to-a-function-with-variable-number-of-args-in-swift &lt;http://stackoverflow.com/questions/24024376/passing-an-array-to-a-function-with-variable-number-of-args-in-swift&gt;<br>2. https://www.drivenbycode.com/the-missing-apply-function-in-swift/ &lt;https://www.drivenbycode.com/the-missing-apply-function-in-swift/&gt;<br></p><p>Consider the following use case:<br></p><p>```<br>func average(numbers: Double…) -&gt; Double {<br>   return sum(numbers) / numbers.count // Error: Cannot convert value of type ‘[Double]’ to expected argument type ‘Double&#39;<br>}<br></p><p>func sum(numbers: Double...) -&gt; Double { … }<br>```<br></p><p>Right now, there are two ways to fix it:<br></p><p>1. Add another function that accept `[Double]` as input.<br></p><p>```<br>func average(numbers: Double…) -&gt; Double {<br>   return sum(numbers) / numbers.count<br>}<br></p><p>func sum(numbers: Double...) -&gt; Double {<br>   return sum(numbers)<br>}<br></p><p>func sum(numbers: [Double]) -&gt; Double { … }<br>```<br></p><p>2. Implement an `apply()` function using `unsafeBitCast`.<br></p><p>```<br>func average(numbers: Double…) -&gt; Double {<br>   return sum(apply(numbers)) / numbers.count<br>}<br></p><p>func sum(numbers: [Double]) -&gt; Double { … }<br></p><p>func apply&lt;T, U&gt;(fn: (T...) -&gt; U, args: [T]) -&gt; U {<br>   typealias FunctionType = [T] -&gt; U<br>   return unsafeBitCast(fn, FunctionType.self)(args)<br>}<br>```<br></p><p>However, both solutions are not very elegant. The first solution requires the library author to implement both functions, and the second solution breaks the guarantees of Swift’s type system.<br></p><p>Swift should allow passing an array to variadic functions, or we should somehow implement a type-safe `apply()` function in the standard library.<br></p><p>Justin<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160417/f47b13fc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6ab7ae85b84ebb323fab427b11500742?s=50"></div><header><strong>[Idea] Passing an Array to Variadic Functions</strong> from <string>Keith Smiley</string> &lt;keithbsmiley at gmail.com&gt;<p>April 17, 2016 at 11:00:00am</p></header><div class="content"><p>We&#39;ve been dealing with this as well. We&#39;ve chosen to go with your option 1 for<br>most of our cases, sometimes dropping varargs all together and just using the<br>array signature.<br></p><p>It would be great if you could have a safe apply function for this.<br></p><p>--<br>Keith Smiley<br></p><p>On 04/17, Justin Jia via swift-evolution wrote:<br>&gt; Hi!<br>&gt;<br>&gt; Currently, we can’t call a variadic function with an array of arguments.<br>&gt;<br>&gt; Reference:<br>&gt; 1. http://stackoverflow.com/questions/24024376/passing-an-array-to-a-function-with-variable-number-of-args-in-swift &lt;http://stackoverflow.com/questions/24024376/passing-an-array-to-a-function-with-variable-number-of-args-in-swift&gt;<br>&gt; 2. https://www.drivenbycode.com/the-missing-apply-function-in-swift/ &lt;https://www.drivenbycode.com/the-missing-apply-function-in-swift/&gt;<br>&gt;<br>&gt; Consider the following use case:<br>&gt;<br>&gt; ```<br>&gt; func average(numbers: Double…) -&gt; Double {<br>&gt;    return sum(numbers) / numbers.count // Error: Cannot convert value of type ‘[Double]’ to expected argument type ‘Double&#39;<br>&gt; }<br>&gt;<br>&gt; func sum(numbers: Double...) -&gt; Double { … }<br>&gt; ```<br>&gt;<br>&gt; Right now, there are two ways to fix it:<br>&gt;<br>&gt; 1. Add another function that accept `[Double]` as input.<br>&gt;<br>&gt; ```<br>&gt; func average(numbers: Double…) -&gt; Double {<br>&gt;    return sum(numbers) / numbers.count<br>&gt; }<br>&gt;<br>&gt; func sum(numbers: Double...) -&gt; Double {<br>&gt;    return sum(numbers)<br>&gt; }<br>&gt;<br>&gt; func sum(numbers: [Double]) -&gt; Double { … }<br>&gt; ```<br>&gt;<br>&gt; 2. Implement an `apply()` function using `unsafeBitCast`.<br>&gt;<br>&gt; ```<br>&gt; func average(numbers: Double…) -&gt; Double {<br>&gt;    return sum(apply(numbers)) / numbers.count<br>&gt; }<br>&gt;<br>&gt; func sum(numbers: [Double]) -&gt; Double { … }<br>&gt;<br>&gt; func apply&lt;T, U&gt;(fn: (T...) -&gt; U, args: [T]) -&gt; U {<br>&gt;    typealias FunctionType = [T] -&gt; U<br>&gt;    return unsafeBitCast(fn, FunctionType.self)(args)<br>&gt; }<br>&gt; ```<br>&gt;<br>&gt; However, both solutions are not very elegant. The first solution requires the library author to implement both functions, and the second solution breaks the guarantees of Swift’s type system.<br>&gt;<br>&gt; Swift should allow passing an array to variadic functions, or we should somehow implement a type-safe `apply()` function in the standard library.<br>&gt;<br>&gt; Justin<br></p><p>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: signature.asc<br>Type: application/pgp-signature<br>Size: 819 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160417/108257e5/attachment.sig&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[Idea] Passing an Array to Variadic Functions</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>April 18, 2016 at 08:00:00am</p></header><div class="content"><p>Why not remove varargs altogether from Swift, it is easy enough to put []<br>round a list?<br></p><p>On Monday, 18 April 2016, Keith Smiley via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; We&#39;ve been dealing with this as well. We&#39;ve chosen to go with your option<br>&gt; 1 for<br>&gt; most of our cases, sometimes dropping varargs all together and just using<br>&gt; the<br>&gt; array signature.<br>&gt;<br>&gt; It would be great if you could have a safe apply function for this.<br>&gt;<br>&gt; --<br>&gt; Keith Smiley<br>&gt;<br>&gt; On 04/17, Justin Jia via swift-evolution wrote:<br>&gt; &gt; Hi!<br>&gt; &gt;<br>&gt; &gt; Currently, we can’t call a variadic function with an array of arguments.<br>&gt; &gt;<br>&gt; &gt; Reference:<br>&gt; &gt; 1.<br>&gt; http://stackoverflow.com/questions/24024376/passing-an-array-to-a-function-with-variable-number-of-args-in-swift<br>&gt; &lt;<br>&gt; http://stackoverflow.com/questions/24024376/passing-an-array-to-a-function-with-variable-number-of-args-in-swift<br>&gt; &gt;<br>&gt; &gt; 2. https://www.drivenbycode.com/the-missing-apply-function-in-swift/ &lt;<br>&gt; https://www.drivenbycode.com/the-missing-apply-function-in-swift/&gt;<br>&gt; &gt;<br>&gt; &gt; Consider the following use case:<br>&gt; &gt;<br>&gt; &gt; ```<br>&gt; &gt; func average(numbers: Double…) -&gt; Double {<br>&gt; &gt;    return sum(numbers) / numbers.count // Error: Cannot convert value of<br>&gt; type ‘[Double]’ to expected argument type ‘Double&#39;<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; func sum(numbers: Double...) -&gt; Double { … }<br>&gt; &gt; ```<br>&gt; &gt;<br>&gt; &gt; Right now, there are two ways to fix it:<br>&gt; &gt;<br>&gt; &gt; 1. Add another function that accept `[Double]` as input.<br>&gt; &gt;<br>&gt; &gt; ```<br>&gt; &gt; func average(numbers: Double…) -&gt; Double {<br>&gt; &gt;    return sum(numbers) / numbers.count<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; func sum(numbers: Double...) -&gt; Double {<br>&gt; &gt;    return sum(numbers)<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; func sum(numbers: [Double]) -&gt; Double { … }<br>&gt; &gt; ```<br>&gt; &gt;<br>&gt; &gt; 2. Implement an `apply()` function using `unsafeBitCast`.<br>&gt; &gt;<br>&gt; &gt; ```<br>&gt; &gt; func average(numbers: Double…) -&gt; Double {<br>&gt; &gt;    return sum(apply(numbers)) / numbers.count<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; func sum(numbers: [Double]) -&gt; Double { … }<br>&gt; &gt;<br>&gt; &gt; func apply&lt;T, U&gt;(fn: (T...) -&gt; U, args: [T]) -&gt; U {<br>&gt; &gt;    typealias FunctionType = [T] -&gt; U<br>&gt; &gt;    return unsafeBitCast(fn, FunctionType.self)(args)<br>&gt; &gt; }<br>&gt; &gt; ```<br>&gt; &gt;<br>&gt; &gt; However, both solutions are not very elegant. The first solution<br>&gt; requires the library author to implement both functions, and the second<br>&gt; solution breaks the guarantees of Swift’s type system.<br>&gt; &gt;<br>&gt; &gt; Swift should allow passing an array to variadic functions, or we should<br>&gt; somehow implement a type-safe `apply()` function in the standard library.<br>&gt; &gt;<br>&gt; &gt; Justin<br>&gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p>-- <br>-- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160418/539cd51d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ec8a60462a511e833c5c4a83b424c958?s=50"></div><header><strong>[Idea] Passing an Array to Variadic Functions</strong> from <string>Dennis Weissmann</string> &lt;dennis at dennisweissmann.me&gt;<p>April 18, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; Why not remove varargs altogether from Swift, it is easy enough to put [] round a list?<br></p><p>+1, that was my thought too. I can’t think of a use case where you can’t use an array instead of varargs (this assumes all vararg parameters are converted to array parameters).<br></p><p>- Dennis<br></p><p>&gt; On Apr 18, 2016, at 12:48 AM, Howard Lovatt via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Why not remove varargs altogether from Swift, it is easy enough to put [] round a list?<br>&gt; <br>&gt; On Monday, 18 April 2016, Keith Smiley via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; We&#39;ve been dealing with this as well. We&#39;ve chosen to go with your option 1 for<br>&gt; most of our cases, sometimes dropping varargs all together and just using the<br>&gt; array signature.<br>&gt; <br>&gt; It would be great if you could have a safe apply function for this.<br>&gt; <br>&gt; --<br>&gt; Keith Smiley<br>&gt; <br>&gt; On 04/17, Justin Jia via swift-evolution wrote:<br>&gt; &gt; Hi!<br>&gt; &gt;<br>&gt; &gt; Currently, we can’t call a variadic function with an array of arguments.<br>&gt; &gt;<br>&gt; &gt; Reference:<br>&gt; &gt; 1. http://stackoverflow.com/questions/24024376/passing-an-array-to-a-function-with-variable-number-of-args-in-swift &lt;http://stackoverflow.com/questions/24024376/passing-an-array-to-a-function-with-variable-number-of-args-in-swift&gt; &lt;http://stackoverflow.com/questions/24024376/passing-an-array-to-a-function-with-variable-number-of-args-in-swift &lt;http://stackoverflow.com/questions/24024376/passing-an-array-to-a-function-with-variable-number-of-args-in-swift&gt;&gt;<br>&gt; &gt; 2. https://www.drivenbycode.com/the-missing-apply-function-in-swift/ &lt;https://www.drivenbycode.com/the-missing-apply-function-in-swift/&gt; &lt;https://www.drivenbycode.com/the-missing-apply-function-in-swift/ &lt;https://www.drivenbycode.com/the-missing-apply-function-in-swift/&gt;&gt;<br>&gt; &gt;<br>&gt; &gt; Consider the following use case:<br>&gt; &gt;<br>&gt; &gt; ```<br>&gt; &gt; func average(numbers: Double…) -&gt; Double {<br>&gt; &gt;    return sum(numbers) / numbers.count // Error: Cannot convert value of type ‘[Double]’ to expected argument type ‘Double&#39;<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; func sum(numbers: Double...) -&gt; Double { … }<br>&gt; &gt; ```<br>&gt; &gt;<br>&gt; &gt; Right now, there are two ways to fix it:<br>&gt; &gt;<br>&gt; &gt; 1. Add another function that accept `[Double]` as input.<br>&gt; &gt;<br>&gt; &gt; ```<br>&gt; &gt; func average(numbers: Double…) -&gt; Double {<br>&gt; &gt;    return sum(numbers) / numbers.count<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; func sum(numbers: Double...) -&gt; Double {<br>&gt; &gt;    return sum(numbers)<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; func sum(numbers: [Double]) -&gt; Double { … }<br>&gt; &gt; ```<br>&gt; &gt;<br>&gt; &gt; 2. Implement an `apply()` function using `unsafeBitCast`.<br>&gt; &gt;<br>&gt; &gt; ```<br>&gt; &gt; func average(numbers: Double…) -&gt; Double {<br>&gt; &gt;    return sum(apply(numbers)) / numbers.count<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; func sum(numbers: [Double]) -&gt; Double { … }<br>&gt; &gt;<br>&gt; &gt; func apply&lt;T, U&gt;(fn: (T...) -&gt; U, args: [T]) -&gt; U {<br>&gt; &gt;    typealias FunctionType = [T] -&gt; U<br>&gt; &gt;    return unsafeBitCast(fn, FunctionType.self)(args)<br>&gt; &gt; }<br>&gt; &gt; ```<br>&gt; &gt;<br>&gt; &gt; However, both solutions are not very elegant. The first solution requires the library author to implement both functions, and the second solution breaks the guarantees of Swift’s type system.<br>&gt; &gt;<br>&gt; &gt; Swift should allow passing an array to variadic functions, or we should somehow implement a type-safe `apply()` function in the standard library.<br>&gt; &gt;<br>&gt; &gt; Justin<br>&gt; <br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org &lt;&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; -- Howard.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160418/6802f0ef/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a06dd7924588141b9c907543798c2524?s=50"></div><header><strong>[Idea] Passing an Array to Variadic Functions</strong> from <string>Gwendal Roué</string> &lt;gwendal.roue at gmail.com&gt;<p>April 18, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; Le 18 avr. 2016 à 09:35, Dennis Weissmann via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt;&gt; Why not remove varargs altogether from Swift, it is easy enough to put [] round a list?<br>&gt; <br>&gt; +1, that was my thought too. I can’t think of a use case where you can’t use an array instead of varargs (this assumes all vararg parameters are converted to array parameters).<br></p><p>Oh no please no. Of course a variadic function can always be rewritten as a function that takes an array. Of course. You always can use an array. Got it. But some APIs are nicer with varargs. And even nicer APIs go over the top by adding support for arrays too, because not all lists are known at compile time. It’s a matter of being sensible.<br></p><p>	DatabaseTable.select(id, name).order(name, id)		// What’s the problem?<br>	// vs.<br>	DatabaseTable.select([id, name]).order([name, id])	// OK, of course... But some people will find it a litle short<br></p><p>Gwendal Roué<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ec8a60462a511e833c5c4a83b424c958?s=50"></div><header><strong>[Idea] Passing an Array to Variadic Functions</strong> from <string>Dennis Weissmann</string> &lt;dennis at dennisweissmann.me&gt;<p>April 18, 2016 at 10:00:00am</p></header><div class="content"><p>That’s IMO already a problematic case:<br></p><p>&gt; 	DatabaseTable.select(id, name).order(name, id)		// What’s the problem?<br>&gt; 	// vs.<br>&gt; 	DatabaseTable.select([id, name]).order([name, id])	// OK, of course... But some people will find it a litle short<br></p><p><br>The problem is that you can’t tell by looking at the call site whether `select` takes an id and a name as parameter (the function being declared as `func select(id: String, _ name: String)` or a vararg `func select(string: String…)`.<br>Both call sites look like this:<br></p><p>&gt; select(id, name)<br></p><p><br>I think it would make the language clearer and more consistent if varargs were removed.<br></p><p>- Dennis<br></p><p>&gt; On Apr 18, 2016, at 9:48 AM, Gwendal Roué &lt;gwendal.roue at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; Le 18 avr. 2016 à 09:35, Dennis Weissmann via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt;&gt; Why not remove varargs altogether from Swift, it is easy enough to put [] round a list?<br>&gt;&gt; <br>&gt;&gt; +1, that was my thought too. I can’t think of a use case where you can’t use an array instead of varargs (this assumes all vararg parameters are converted to array parameters).<br>&gt; <br>&gt; Oh no please no. Of course a variadic function can always be rewritten as a function that takes an array. Of course. You always can use an array. Got it. But some APIs are nicer with varargs. And even nicer APIs go over the top by adding support for arrays too, because not all lists are known at compile time. It’s a matter of being sensible.<br>&gt; <br>&gt; 	DatabaseTable.select(id, name).order(name, id)		// What’s the problem?<br>&gt; 	// vs.<br>&gt; 	DatabaseTable.select([id, name]).order([name, id])	// OK, of course... But some people will find it a litle short<br>&gt; <br>&gt; Gwendal Roué<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160418/abcab174/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a06dd7924588141b9c907543798c2524?s=50"></div><header><strong>[Idea] Passing an Array to Variadic Functions</strong> from <string>Gwendal Roué</string> &lt;gwendal.roue at gmail.com&gt;<p>April 18, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; Le 18 avr. 2016 à 10:02, Dennis Weissmann &lt;dennis at dennisweissmann.me&gt; a écrit :<br>&gt; <br>&gt; That’s IMO already a problematic case:<br>&gt; <br>&gt;&gt; 	DatabaseTable.select(id, name).order(name, id)		// What’s the problem?<br>&gt;&gt; 	// vs.<br>&gt;&gt; 	DatabaseTable.select([id, name]).order([name, id])	// OK, of course... But some people will find it a litle short<br>&gt; <br>&gt; The problem is that you can’t tell by looking at the call site whether `select` takes an id and a name as parameter (the function being declared as `func select(id: String, _ name: String)` or a vararg `func select(string: String…)`.<br>&gt; Both call sites look like this:<br>&gt; <br>&gt;&gt; select(id, name)<br>&gt; <br>&gt; I think it would make the language clearer and more consistent if varargs were removed.<br></p><p>Sorry my example wasn’t clear enough, and that’s why you couldn’t tell by looking at the call site what was happening. You were missing context. &quot;id&quot; and &quot;name&quot; are not values, they’re database columns. It’s more something along:<br>	<br>	DatabaseTable {<br>		func select(columns: Column…) { … }<br>	}<br>	<br>	people.select(idColumn, nameColumn)<br>	furniture.select(nameColumn, widthColumn, heightColumn, depthColumn, priceColumn)<br></p><p>(Sometimes examples are too complex, and don&#39;t serve well their purpose - my mistake)<br></p><p>Maybe you’ll follow the counter argument now. Which is &quot;of course a variadic function can always be turned into a function that takes an array, what a surprise, but this is not always the good thing to do.&quot;<br></p><p>Regards,<br>Gwendal Roué<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/582b7183bda90126e385e2cc95cb7088?s=50"></div><header><strong>[Idea] Passing an Array to Variadic Functions</strong> from <string>Justin Jia</string> &lt;justin.jia.developer at gmail.com&gt;<p>April 18, 2016 at 02:00:00am</p></header><div class="content"><p>I agree with Gwendal. <br></p><p>I think it is a feature that is nice to have with few drawbacks. Personally I prefer the first solution. <br></p><p>&gt; On Apr 18, 2016, at 1:10 AM, Gwendal Roué &lt;gwendal.roue at gmail.com&gt; wrote:<br>&gt; <br>&gt; Gwendal<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ec8a60462a511e833c5c4a83b424c958?s=50"></div><header><strong>[Idea] Passing an Array to Variadic Functions</strong> from <string>Dennis Weissmann</string> &lt;dennis at dennisweissmann.me&gt;<p>April 18, 2016 at 02:00:00pm</p></header><div class="content"><p>Hm, sorry but I’m still not convinced :(<br></p><p>I still find it confusing and I think if it wasn’t in Swift already, it would not be added. Maybe someone can come up with a strong reason why it should be added if it weren’t there.<br></p><p>- Dennis<br></p><p>&gt; On Apr 18, 2016, at 10:10 AM, Gwendal Roué &lt;gwendal.roue at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; Le 18 avr. 2016 à 10:02, Dennis Weissmann &lt;dennis at dennisweissmann.me&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; That’s IMO already a problematic case:<br>&gt;&gt; <br>&gt;&gt;&gt; 	DatabaseTable.select(id, name).order(name, id)		// What’s the problem?<br>&gt;&gt;&gt; 	// vs.<br>&gt;&gt;&gt; 	DatabaseTable.select([id, name]).order([name, id])	// OK, of course... But some people will find it a litle short<br>&gt;&gt; <br>&gt;&gt; The problem is that you can’t tell by looking at the call site whether `select` takes an id and a name as parameter (the function being declared as `func select(id: String, _ name: String)` or a vararg `func select(string: String…)`.<br>&gt;&gt; Both call sites look like this:<br>&gt;&gt; <br>&gt;&gt;&gt; select(id, name)<br>&gt;&gt; <br>&gt;&gt; I think it would make the language clearer and more consistent if varargs were removed.<br>&gt; <br>&gt; Sorry my example wasn’t clear enough, and that’s why you couldn’t tell by looking at the call site what was happening. You were missing context. &quot;id&quot; and &quot;name&quot; are not values, they’re database columns. It’s more something along:<br>&gt; 	<br>&gt; 	DatabaseTable {<br>&gt; 		func select(columns: Column…) { … }<br>&gt; 	}<br>&gt; 	<br>&gt; 	people.select(idColumn, nameColumn)<br>&gt; 	furniture.select(nameColumn, widthColumn, heightColumn, depthColumn, priceColumn)<br>&gt; <br>&gt; (Sometimes examples are too complex, and don&#39;t serve well their purpose - my mistake)<br>&gt; <br>&gt; Maybe you’ll follow the counter argument now. Which is &quot;of course a variadic function can always be turned into a function that takes an array, what a surprise, but this is not always the good thing to do.&quot;<br>&gt; <br>&gt; Regards,<br>&gt; Gwendal Roué<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160418/fd68bbc3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Idea] Passing an Array to Variadic Functions</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 18, 2016 at 09:00:00pm</p></header><div class="content"><p>+1 to remove them(vararg) or introduce special marker for variadic params.<br></p><p>IMO: I think variadic parameters is alien construction in Swift, where we <br>expect that the method call explicitly tells us what is the purpose of each <br>parameter by using external param names.<br></p><p>Plus, variadic parameters are actually array of values. We don&#39;t like if <br>something is implicit in Swift. If we pass an array of values, why we <br>allows this without specifying array&#39;s [] explicity.<br>Or, why there is no explicit marker for such method that it has variadic <br>parameters(don&#39;t know, something like .select(:id, name)). Probably this <br>will be an OK solution also - to have special marker for variadic parameters.<br></p><p>Yes, I expect to see .select(id, withName: name). Construction like <br>.select(id, name) seems like incorrectly defined method(w/o external name <br>for second parameter).<br></p><p>Btw, for those who like variadic parameters: Do you support that Swift 3.0 <br>will not allow a tuple instead of prarameters for methods?<br>https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md<br>This feature also was used and probably can be handful in some situations. <br>But, one of the main reasons why it was(will be) removed (Quote):<br>* A call to foo(x) looks like a call to an overloaded version of foo, both <br>to the compiler and to the human who maintains the code. This is extremely <br>confusing if you don&#39;t know the feature exists.<br>*(?) The current implementation adds complexity to the type checker, <br>slowing it down and adding maintenance burden.<br></p><p><br>On 18.04.2016 15:55, Dennis Weissmann via swift-evolution wrote:<br> &gt; Hm, sorry but I’m still not convinced :(<br> &gt;<br> &gt; I still find it confusing and I think if it wasn’t in Swift already, it<br> &gt; would not be added. Maybe someone can come up with a strong reason why it<br> &gt; should be added if it weren’t there.<br> &gt;<br> &gt; - Dennis<br> &gt;<br> &gt;&gt; On Apr 18, 2016, at 10:10 AM, Gwendal Roué &lt;gwendal.roue at gmail.com<br> &gt;&gt; &lt;mailto:gwendal.roue at gmail.com&gt;&gt; wrote:<br> &gt;&gt;<br> &gt;&gt;<br> &gt;&gt;&gt; Le 18 avr. 2016 à 10:02, Dennis Weissmann &lt;dennis at dennisweissmann.me<br> &gt;&gt;&gt; &lt;mailto:dennis at dennisweissmann.me&gt;&gt; a écrit :<br> &gt;&gt;&gt;<br> &gt;&gt;&gt; That’s IMO already a problematic case:<br> &gt;&gt;&gt;<br> &gt;&gt;&gt;&gt; DatabaseTable.select(id, name).order(name, id)// What’s the problem?<br> &gt;&gt;&gt;&gt; // vs.<br> &gt;&gt;&gt;&gt; DatabaseTable.select([id, name]).order([name, id])// OK, of course...<br> &gt;&gt;&gt;&gt; But some people will find it a litle short<br> &gt;&gt;&gt;<br> &gt;&gt;&gt; The problem is that you can’t tell by looking at the call site whether<br> &gt;&gt;&gt; `select` takes an id and a name as parameter (the function being<br> &gt;&gt;&gt; declared as `func select(id: String, _ name: String)` or a vararg `func<br> &gt;&gt;&gt; select(string: String…)`.<br> &gt;&gt;&gt; Both call sites look like this:<br> &gt;&gt;&gt;<br> &gt;&gt;&gt;&gt; select(id, name)<br> &gt;&gt;&gt;<br> &gt;&gt;&gt; I think it would make the language clearer and more consistent if<br> &gt;&gt;&gt; varargs were removed.<br> &gt;&gt;<br> &gt;&gt; Sorry my example wasn’t clear enough, and that’s why you couldn’t tell by<br> &gt;&gt; looking at the call site what was happening. You were missing context.<br> &gt;&gt; &quot;id&quot; and &quot;name&quot; are not values, they’re database columns. It’s more<br> &gt;&gt; something along:<br> &gt;&gt;<br> &gt;&gt; DatabaseTable {<br> &gt;&gt; func select(columns: Column…) { … }<br> &gt;&gt; }<br> &gt;&gt;<br> &gt;&gt; people.select(idColumn, nameColumn)<br> &gt;&gt; furniture.select(nameColumn, widthColumn, heightColumn, depthColumn,<br> &gt;&gt; priceColumn)<br> &gt;&gt;<br> &gt;&gt; (Sometimes examples are too complex, and don&#39;t serve well their purpose -<br> &gt;&gt; my mistake)<br> &gt;&gt;<br> &gt;&gt; Maybe you’ll follow the counter argument now. Which is &quot;of course a<br> &gt;&gt; variadic function can always be turned into a function that takes an<br> &gt;&gt; array, what a surprise, but this is not always the good thing to do.&quot;<br> &gt;&gt;<br> &gt;&gt; Regards,<br> &gt;&gt; Gwendal Roué<br> &gt;<br> &gt;<br> &gt;<br> &gt; _______________________________________________<br> &gt; swift-evolution mailing list<br> &gt; swift-evolution at swift.org<br> &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br> &gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>[Idea] Passing an Array to Variadic Functions</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>April 18, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; Why not remove varargs altogether from Swift, it is easy enough to put [] round a list?<br>+1<br>I think it&#39;s much less useful than tuple-splat, Swifts array-syntax is very lightweight and &quot;…&quot; adds complexity that is rarely needed.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160418/7c7dfd15/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Idea] Passing an Array to Variadic Functions</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>April 18, 2016 at 09:00:00pm</p></header><div class="content"><p>I think it’s pretty clear that if we have a syntax for passing an array to a variadic argument it should be:<br></p><p>	func(array…)<br></p><p>This would be symmetric with variadic type signature, and similar to how other languages do it (i.e. in Ruby, declaration is `*args` and array splat is also `*args`). The operator is necessary for disambiguation (in the `Any…` case and the like).<br></p><p>My guess is that it just hasn’t been implemented, but if we get a formal proposal, then maybe we can put it to review and then it shouldn’t be hard to get it implemented in Swift 3.0 timeframe.<br></p><p>The `…` operator would also be great in a different, but similar case — tuple splat, i.e. if you have a function `(T, U) -&gt; Whatever`, and a tuple `(T, U)`, you could pass it to the function using `function(tuple…)`. (Implicit tuple splat was removed…)<br></p><p>Best,<br>— Radek<br></p><p>&gt; On 17 Apr 2016, at 19:12, Justin Jia via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi!<br>&gt; <br>&gt; Currently, we can’t call a variadic function with an array of arguments.<br>&gt; <br>&gt; Reference:<br>&gt; 1. http://stackoverflow.com/questions/24024376/passing-an-array-to-a-function-with-variable-number-of-args-in-swift &lt;http://stackoverflow.com/questions/24024376/passing-an-array-to-a-function-with-variable-number-of-args-in-swift&gt;<br>&gt; 2. https://www.drivenbycode.com/the-missing-apply-function-in-swift/ &lt;https://www.drivenbycode.com/the-missing-apply-function-in-swift/&gt;<br>&gt; <br>&gt; Consider the following use case:<br>&gt; <br>&gt; ```<br>&gt; func average(numbers: Double…) -&gt; Double {<br>&gt;    return sum(numbers) / numbers.count // Error: Cannot convert value of type ‘[Double]’ to expected argument type ‘Double&#39;<br>&gt; }<br>&gt; <br>&gt; func sum(numbers: Double...) -&gt; Double { … }<br>&gt; ```<br>&gt; <br>&gt; Right now, there are two ways to fix it:<br>&gt; <br>&gt; 1. Add another function that accept `[Double]` as input.<br>&gt; <br>&gt; ```<br>&gt; func average(numbers: Double…) -&gt; Double {<br>&gt;    return sum(numbers) / numbers.count<br>&gt; }<br>&gt; <br>&gt; func sum(numbers: Double...) -&gt; Double {<br>&gt;    return sum(numbers)<br>&gt; }<br>&gt; <br>&gt; func sum(numbers: [Double]) -&gt; Double { … }<br>&gt; ```<br>&gt; <br>&gt; 2. Implement an `apply()` function using `unsafeBitCast`.<br>&gt; <br>&gt; ```<br>&gt; func average(numbers: Double…) -&gt; Double {<br>&gt;    return sum(apply(numbers)) / numbers.count<br>&gt; }<br>&gt; <br>&gt; func sum(numbers: [Double]) -&gt; Double { … }<br>&gt; <br>&gt; func apply&lt;T, U&gt;(fn: (T...) -&gt; U, args: [T]) -&gt; U {<br>&gt;    typealias FunctionType = [T] -&gt; U<br>&gt;    return unsafeBitCast(fn, FunctionType.self)(args)<br>&gt; }<br>&gt; ```<br>&gt; <br>&gt; However, both solutions are not very elegant. The first solution requires the library author to implement both functions, and the second solution breaks the guarantees of Swift’s type system.<br>&gt; <br>&gt; Swift should allow passing an array to variadic functions, or we should somehow implement a type-safe `apply()` function in the standard library.<br>&gt; <br>&gt; Justin<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160418/8182b30c/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
