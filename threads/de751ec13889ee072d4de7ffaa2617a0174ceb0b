<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/62749cfcefbf700862299872a12b2d57?s=50"></div><header><strong>Declaring a function that always returns nil</strong> from <string>Andrew Duncan</string> &lt;andrewzboard at gmail.com&gt;<p>January  3, 2016 at 07:00:00pm</p></header><div class="content"><p>It should be possible to declare a function that returns only nil, and have its return type be substitutable for any function that returns and Optional. This is something like having a bottom type but not really. What I mean is:<br></p><p>func returnsNil(errCode:Int) -&gt; nil {<br>    logError(errCode)     // A side-effect. Not FP, sosumi.<br>    return nil<br>}<br></p><p>func returnAOptional() -&gt; A? {<br>    // Bla bla. We discover an error so we decide to bail and return nil.<br>    return returnsNil(errCode) // Would be legal.<br>}<br>func returnsBOptional() -&gt; B? {<br>    // Bla bla. We discover an error so we decide to bail and return nil.<br>    return returnsNil(errCode)  // Would also be legal.<br>}<br></p><p>I seek a return type that conforms to any Optional -- I think that implies it *must* (or correct me here) be nil.<br></p><p>Now perhaps this is already possible with wizardry from the Next Level. (There always is one.)<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d92e9730c561c120200f34e7e50ed46?s=50"></div><header><strong>Declaring a function that always returns nil</strong> from <string>Jeff Kelley</string> &lt;slaunchaman at gmail.com&gt;<p>January  3, 2016 at 10:00:00pm</p></header><div class="content"><p>Just spit-balling here, but couldn’t you do this with a generic extension on Optional?<br></p><p>&gt; extension Optional {<br>&gt;     func returnsNil(errorCode: Int) -&gt; Wrapped? {<br>&gt;         logError(errorCode)<br>&gt;         return nil<br>&gt;     }<br>&gt; }<br></p><p><br></p><p>Jeff Kelley<br></p><p>SlaunchaMan at gmail.com | @SlaunchaMan &lt;https://twitter.com/SlaunchaMan&gt; | jeffkelley.org &lt;http://jeffkelley.org/&gt;<br>&gt; On Jan 3, 2016, at 10:43 PM, Andrew Duncan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It should be possible to declare a function that returns only nil, and have its return type be substitutable for any function that returns and Optional. This is something like having a bottom type but not really. What I mean is:<br>&gt; <br>&gt; func returnsNil(errCode:Int) -&gt; nil {<br>&gt;    logError(errCode)     // A side-effect. Not FP, sosumi.<br>&gt;    return nil<br>&gt; }<br>&gt; <br>&gt; func returnAOptional() -&gt; A? {<br>&gt;    // Bla bla. We discover an error so we decide to bail and return nil.<br>&gt;    return returnsNil(errCode) // Would be legal.<br>&gt; }<br>&gt; func returnsBOptional() -&gt; B? {<br>&gt;    // Bla bla. We discover an error so we decide to bail and return nil.<br>&gt;    return returnsNil(errCode)  // Would also be legal.<br>&gt; }<br>&gt; <br>&gt; I seek a return type that conforms to any Optional -- I think that implies it *must* (or correct me here) be nil.<br>&gt; <br>&gt; Now perhaps this is already possible with wizardry from the Next Level. (There always is one.)<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160103/0aa1d44e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ec21faaf010581d3b9d6ef507644e622?s=50"></div><header><strong>Declaring a function that always returns nil</strong> from <string>Jack Lawrence</string> &lt;jackl at apple.com&gt;<p>January  3, 2016 at 07:00:00pm</p></header><div class="content"><p>You could also use type inference on the return type:<br></p><p>  1&gt; func returnsNil&lt;T&gt;(errCode: Int) -&gt; T? { <br>  2.     print(errCode) <br>  3.     return nil <br>  4. } <br>  5&gt; func returnsAnOptional() -&gt; Int? { <br>  6.     return returnsNil(5) <br>  7. }    <br></p><p><br>&gt; On Jan 3, 2016, at 7:51 PM, Jeff Kelley via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Just spit-balling here, but couldn’t you do this with a generic extension on Optional?<br>&gt; <br>&gt;&gt; extension Optional {<br>&gt;&gt;     func returnsNil(errorCode: Int) -&gt; Wrapped? {<br>&gt;&gt;         logError(errorCode)<br>&gt;&gt;         return nil<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt; <br>&gt; <br>&gt; <br>&gt; Jeff Kelley<br>&gt; <br>&gt; SlaunchaMan at gmail.com &lt;mailto:SlaunchaMan at gmail.com&gt; | @SlaunchaMan &lt;https://twitter.com/SlaunchaMan&gt; | jeffkelley.org &lt;http://jeffkelley.org/&gt;<br>&gt;&gt; On Jan 3, 2016, at 10:43 PM, Andrew Duncan via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; It should be possible to declare a function that returns only nil, and have its return type be substitutable for any function that returns and Optional. This is something like having a bottom type but not really. What I mean is:<br>&gt;&gt; <br>&gt;&gt; func returnsNil(errCode:Int) -&gt; nil {<br>&gt;&gt;    logError(errCode)     // A side-effect. Not FP, sosumi.<br>&gt;&gt;    return nil<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; func returnAOptional() -&gt; A? {<br>&gt;&gt;    // Bla bla. We discover an error so we decide to bail and return nil.<br>&gt;&gt;    return returnsNil(errCode) // Would be legal.<br>&gt;&gt; }<br>&gt;&gt; func returnsBOptional() -&gt; B? {<br>&gt;&gt;    // Bla bla. We discover an error so we decide to bail and return nil.<br>&gt;&gt;    return returnsNil(errCode)  // Would also be legal.<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; I seek a return type that conforms to any Optional -- I think that implies it *must* (or correct me here) be nil.<br>&gt;&gt; <br>&gt;&gt; Now perhaps this is already possible with wizardry from the Next Level. (There always is one.)<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160103/18c89412/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Declaring a function that always returns nil</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>January  3, 2016 at 11:00:00pm</p></header><div class="content"><p>IMO, this is the best way to approach it.<br></p><p>Félix<br></p><p>&gt; Le 3 janv. 2016 à 22:54:17, Jack Lawrence via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; You could also use type inference on the return type:<br>&gt; <br>&gt;   1&gt; func returnsNil&lt;T&gt;(errCode: Int) -&gt; T? { <br>&gt;   2.     print(errCode) <br>&gt;   3.     return nil <br>&gt;   4. } <br>&gt;   5&gt; func returnsAnOptional() -&gt; Int? { <br>&gt;   6.     return returnsNil(5) <br>&gt;   7. }    <br>&gt; <br>&gt; <br>&gt;&gt; On Jan 3, 2016, at 7:51 PM, Jeff Kelley via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Just spit-balling here, but couldn’t you do this with a generic extension on Optional?<br>&gt;&gt; <br>&gt;&gt;&gt; extension Optional {<br>&gt;&gt;&gt;     func returnsNil(errorCode: Int) -&gt; Wrapped? {<br>&gt;&gt;&gt;         logError(errorCode)<br>&gt;&gt;&gt;         return nil<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Jeff Kelley<br>&gt;&gt; <br>&gt;&gt; SlaunchaMan at gmail.com &lt;mailto:SlaunchaMan at gmail.com&gt; | @SlaunchaMan &lt;https://twitter.com/SlaunchaMan&gt; | jeffkelley.org &lt;http://jeffkelley.org/&gt;<br>&gt;&gt;&gt; On Jan 3, 2016, at 10:43 PM, Andrew Duncan via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It should be possible to declare a function that returns only nil, and have its return type be substitutable for any function that returns and Optional. This is something like having a bottom type but not really. What I mean is:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func returnsNil(errCode:Int) -&gt; nil {<br>&gt;&gt;&gt;    logError(errCode)     // A side-effect. Not FP, sosumi.<br>&gt;&gt;&gt;    return nil<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func returnAOptional() -&gt; A? {<br>&gt;&gt;&gt;    // Bla bla. We discover an error so we decide to bail and return nil.<br>&gt;&gt;&gt;    return returnsNil(errCode) // Would be legal.<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; func returnsBOptional() -&gt; B? {<br>&gt;&gt;&gt;    // Bla bla. We discover an error so we decide to bail and return nil.<br>&gt;&gt;&gt;    return returnsNil(errCode)  // Would also be legal.<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I seek a return type that conforms to any Optional -- I think that implies it *must* (or correct me here) be nil.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Now perhaps this is already possible with wizardry from the Next Level. (There always is one.)<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160103/6588ea65/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/62749cfcefbf700862299872a12b2d57?s=50"></div><header><strong>Declaring a function that always returns nil</strong> from <string>Andrew Duncan</string> &lt;andrewzboard at gmail.com&gt;<p>January  3, 2016 at 08:00:00pm</p></header><div class="content"><p>Yep, this has transformed from an evolution question to a how-to answer. exit(1).<br></p><p>Thanks Jack and Jaden for pointing out the retrospectively obvious. Just couldn’t see my own nose.<br></p><p>I liked Jeff’s Optional gambit though. Félix, je regrette that your name doesn’t start with ‘J’.<br></p><p>&gt; On 3 Jan, 2016, at 20:36, Félix Cloutier &lt;felixcca at yahoo.ca&gt;<br></p><p>&gt; wrote:<br>&gt; <br>&gt; IMO, this is the best way to approach it.<br>&gt; <br>&gt; Félix<br>&gt; <br>&gt;&gt; Le 3 janv. 2016 à 22:54:17, Jack Lawrence via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; You could also use type inference on the return type:<br>&gt;&gt; <br>&gt;&gt;   1&gt; func returnsNil&lt;T&gt;(errCode: Int) -&gt; T? { <br>&gt;&gt;   2.     print(errCode) <br>&gt;&gt;   3.     return nil <br>&gt;&gt;   4. } <br>&gt;&gt;   5&gt; func returnsAnOptional() -&gt; Int? { <br>&gt;&gt;   6.     return returnsNil(5) <br>&gt;&gt;   7. }    <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 3, 2016, at 7:51 PM, Jeff Kelley via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Just spit-balling here, but couldn’t you do this with a generic extension on Optional?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; extension Optional {<br>&gt;&gt;&gt;&gt;     func returnsNil(errorCode: Int) -&gt; Wrapped? {<br>&gt;&gt;&gt;&gt;         logError(errorCode)<br>&gt;&gt;&gt;&gt;         return nil<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jeff Kelley<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; SlaunchaMan at gmail.com | @SlaunchaMan | jeffkelley.org<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 3, 2016, at 10:43 PM, Andrew Duncan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It should be possible to declare a function that returns only nil, and have its return type be substitutable for any function that returns and Optional. This is something like having a bottom type but not really. What I mean is:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func returnsNil(errCode:Int) -&gt; nil {<br>&gt;&gt;&gt;&gt;    logError(errCode)     // A side-effect. Not FP, sosumi.<br>&gt;&gt;&gt;&gt;    return nil<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func returnAOptional() -&gt; A? {<br>&gt;&gt;&gt;&gt;    // Bla bla. We discover an error so we decide to bail and return nil.<br>&gt;&gt;&gt;&gt;    return returnsNil(errCode) // Would be legal.<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; func returnsBOptional() -&gt; B? {<br>&gt;&gt;&gt;&gt;    // Bla bla. We discover an error so we decide to bail and return nil.<br>&gt;&gt;&gt;&gt;    return returnsNil(errCode)  // Would also be legal.<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I seek a return type that conforms to any Optional -- I think that implies it *must* (or correct me here) be nil.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Now perhaps this is already possible with wizardry from the Next Level. (There always is one.)<br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d92e9730c561c120200f34e7e50ed46?s=50"></div><header><strong>Declaring a function that always returns nil</strong> from <string>Jeff Kelley</string> &lt;slaunchaman at gmail.com&gt;<p>January  3, 2016 at 10:00:00pm</p></header><div class="content"><p>Cleaned up a bit after I tried to actually use it:<br></p><p>&gt; extension Optional {<br>&gt;     static func returnsNil(errorCode: Int) -&gt; Wrapped? {<br>&gt;         logError(errorCode)<br>&gt;         return nil<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; extension Int {<br>&gt;     func foo() -&gt; Int? {<br>&gt;         return .returnsNil(12)<br>&gt;     }<br>&gt; }<br></p><p>You could write it as Optional.returnsNil(12), but the compiler can infer the type.<br></p><p><br>Jeff Kelley<br></p><p>SlaunchaMan at gmail.com | @SlaunchaMan &lt;https://twitter.com/SlaunchaMan&gt; | jeffkelley.org &lt;http://jeffkelley.org/&gt;<br>&gt; On Jan 3, 2016, at 10:51 PM, Jeff Kelley &lt;SlaunchaMan at gmail.com&gt; wrote:<br>&gt; <br>&gt; Just spit-balling here, but couldn’t you do this with a generic extension on Optional?<br>&gt; <br>&gt;&gt; extension Optional {<br>&gt;&gt;     func returnsNil(errorCode: Int) -&gt; Wrapped? {<br>&gt;&gt;         logError(errorCode)<br>&gt;&gt;         return nil<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt; <br>&gt; <br>&gt; <br>&gt; Jeff Kelley<br>&gt; <br>&gt; SlaunchaMan at gmail.com &lt;mailto:SlaunchaMan at gmail.com&gt; | @SlaunchaMan &lt;https://twitter.com/SlaunchaMan&gt; | jeffkelley.org &lt;http://jeffkelley.org/&gt;<br>&gt;&gt; On Jan 3, 2016, at 10:43 PM, Andrew Duncan via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; It should be possible to declare a function that returns only nil, and have its return type be substitutable for any function that returns and Optional. This is something like having a bottom type but not really. What I mean is:<br>&gt;&gt; <br>&gt;&gt; func returnsNil(errCode:Int) -&gt; nil {<br>&gt;&gt;    logError(errCode)     // A side-effect. Not FP, sosumi.<br>&gt;&gt;    return nil<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; func returnAOptional() -&gt; A? {<br>&gt;&gt;    // Bla bla. We discover an error so we decide to bail and return nil.<br>&gt;&gt;    return returnsNil(errCode) // Would be legal.<br>&gt;&gt; }<br>&gt;&gt; func returnsBOptional() -&gt; B? {<br>&gt;&gt;    // Bla bla. We discover an error so we decide to bail and return nil.<br>&gt;&gt;    return returnsNil(errCode)  // Would also be legal.<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; I seek a return type that conforms to any Optional -- I think that implies it *must* (or correct me here) be nil.<br>&gt;&gt; <br>&gt;&gt; Now perhaps this is already possible with wizardry from the Next Level. (There always is one.)<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160103/919785de/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
