<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/34b9659227ea084bb09a8ba4a450a162?s=50"></div><header><strong>Support for pure setters</strong> from <string>Jessy Catterwaul</string> &lt;mr.jessy at gmail.com&gt;<p>February  4, 2016 at 10:00:00am</p></header><div class="content"><p>My original post from yesterday, which describes the way that I am using set-only properties in Swift, still has not gotten through; attempting again:<br></p><p>I use set-only properties very, very often. I am interested to know how ubiquitous functions that begin with “set” are, in  frameworks. I’m currently under the impression that people usually don’t recognize that they could be using a setter, instead of a function, due to those frameworks, coming from a respected source, causing them to believe that the practice is reasonable.<br></p><p>/// Use this as the getter for set-only properties, <br>/// until Swift has real set-only properties.<br>///- Important: Causes a fatal error, logging the name of the property.<br>///- Parameter propertyName: Never use this; only use the default.<br>@noreturn public func setOnlyPropertyGetterError(propertyName: String = __FUNCTION__) {<br>   fatalError(&quot;\(propertyName) is set-only&quot;)<br>}<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160204/e1af8fd1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Support for pure setters</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>February  4, 2016 at 12:00:00pm</p></header><div class="content"><p>I remain unconvinced that any method that starts with &quot;set&quot; without a matching getter could be turned into a &quot;good property setter&quot;. I&#39;m not sure who you&#39;re trying to convince with this metric.<br></p><p>Maybe you should start by telling if you think that there can be a &quot;bad setter&quot;. For instance, can I replace a `sendResponse(String)` method that sends a string over the network with a `response` set-only property?<br></p><p>IMO, a good setter behaves like it&#39;s setting a variable, because this is exactly what the assignment operator suggests. That is:<br>you should be able to replace a sequence of writes to a setter by a single write with the last value and still have essentially the same end result;<br>you should be able to reorder setter operations and still essentially get the same end result.<br>&quot;Essentially the same end result&quot; means that it&#39;s okay if the logging output is different or if you wasted cycles in the process.<br></p><p>Félix<br></p><p>&gt; Le 4 févr. 2016 à 10:25:14, Jessy Catterwaul &lt;mr.jessy at gmail.com&gt; a écrit :<br>&gt; <br>&gt; My original post from yesterday, which describes the way that I am using set-only properties in Swift, still has not gotten through; attempting again:<br>&gt; <br>&gt; I use set-only properties very, very often. I am interested to know how ubiquitous functions that begin with “set” are, in  frameworks. I’m currently under the impression that people usually don’t recognize that they could be using a setter, instead of a function, due to those frameworks, coming from a respected source, causing them to believe that the practice is reasonable.<br>&gt; <br>&gt; /// Use this as the getter for set-only properties, <br>&gt; /// until Swift has real set-only properties.<br>&gt; ///- Important: Causes a fatal error, logging the name of the property.<br>&gt; ///- Parameter propertyName: Never use this; only use the default.<br>&gt; @noreturn public func setOnlyPropertyGetterError(propertyName: String = __FUNCTION__) {<br>&gt;    fatalError(&quot;\(propertyName) is set-only&quot;)<br>&gt; }<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160204/5440997f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f822334c2f6ebeafd3a41cd44c82a62b?s=50"></div><header><strong>Support for pure setters</strong> from <string>Andrey Tarantsov</string> &lt;andrey at tarantsov.com&gt;<p>February  5, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; IMO, a good setter behaves like it&#39;s setting a variable, because this is exactly what the assignment operator suggests. That is:<br>&gt; you should be able to replace a sequence of writes to a setter by a single write with the last value and still have essentially the same end result;<br>&gt; you should be able to reorder setter operations and still essentially get the same end result.<br>&gt; &quot;Essentially the same end result&quot; means that it&#39;s okay if the logging output is different or if you wasted cycles in the process.<br></p><p>This.<br></p><p>On the other hand, we have WatchKit as a counter-example. I&#39;m surprised nobody mentioned it. It&#39;s full of setters for properties that match the typical UIKit properties, but cannot be read.<br></p><p>A.<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160205/451b96dd/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
