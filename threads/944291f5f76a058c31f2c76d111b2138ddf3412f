<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/abab8a25de5c943e3481fd3f95f3d89a?s=50"></div><header><strong>[Proposal] Add property for negation to Bool</strong> from <string>Антон Миронов</string> &lt;antonvmironov at gmail.com&gt;<p>May 21, 2016 at 05:00:00pm</p></header><div class="content"><p>I found negation operator (!) the least detectable among the code. So I’ve decided to add property “not” to BooleanType (Swift 2.2) or Boolean on 3.0 with extension:<br></p><p>extension BooleanType {<br>	var not: Bool { return !self.boolValue }<br>}<br></p><p>This is code with negation operator:<br>	return !self.lanes[position.y][currentLaneRange].contains(.Gap)<br></p><p>As I sad before negation operation is hard to spot. Moreover at first it looks like I’m trying to negate self for some reason.<br></p><p>This is code with “not” property:<br>	return self.lanes[position.y][currentLaneRange].contains(.Gap).not<br></p><p>Now it is easy to spot the statement I am actually getting negation of.<br>On my experience negation operator can occasionally be missed while reading code. This happens less often with “not” property. So I’m proposing to add this property to standard library and prefer it in most cases.<br></p><p>Thanks,<br>Anton Mironov<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160521/9442412f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Proposal] Add property for negation to Bool</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>May 21, 2016 at 04:00:00pm</p></header><div class="content"><p>This would make sense as an operator (or actually it would have to be a keywod):<br></p><p>return not self.lanes[...].contains(.Gap)<br></p><p>Or if you don&#39;t mind having { } around the expression it could be defined as a function:<br></p><p>func not(@noescape block: (Void) -&gt; Bool) rethrows -&gt; Bool { return !block() }<br></p><p>Then you can have<br></p><p>return not { self.lanes[...].contains(.Gap) }<br></p><p>But I am personally not a fan of this.<br></p><p>Charlie<br></p><p>&gt; On May 21, 2016, at 4:50 PM, Антон Миронов via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I found negation operator (!) the least detectable among the code. So I’ve decided to add property “not” to BooleanType (Swift 2.2) or Boolean on 3.0 with extension:<br>&gt; <br>&gt; extension BooleanType {<br>&gt; 	var not: Bool { return !self.boolValue }<br>&gt; }<br>&gt; <br>&gt; This is code with negation operator:<br>&gt; 	return !self.lanes[position.y][currentLaneRange].contains(.Gap)<br>&gt; <br>&gt; As I sad before negation operation is hard to spot. Moreover at first it looks like I’m trying to negate self for some reason.<br>&gt; <br>&gt; This is code with “not” property:<br>&gt; 	return self.lanes[position.y][currentLaneRange].contains(.Gap).not<br>&gt; <br>&gt; Now it is easy to spot the statement I am actually getting negation of.<br>&gt; On my experience negation operator can occasionally be missed while reading code. This happens less often with “not” property. So I’m proposing to add this property to standard library and prefer it in most cases.<br>&gt; <br>&gt; Thanks,<br>&gt; Anton Mironov<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160521/2c95a257/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/abab8a25de5c943e3481fd3f95f3d89a?s=50"></div><header><strong>[Proposal] Add property for negation to Bool</strong> from <string>Антон Миронов</string> &lt;antonvmironov at gmail.com&gt;<p>May 21, 2016 at 06:00:00pm</p></header><div class="content"><p>Good point. In such a case it would be more rational to have “not&quot; as func not(value Bool) -&gt; Bool { … } . But I am not a fun of such solution either.<br>You see, in swift, there is a lot of code that looks like:<br></p><p>let newValue = rawValue<br>	.transformA(arg1) { ... }<br>	.transformB(arg2) { ... }<br>	.transformC(arg3) { ... }<br></p><p>It looks as a pipeline of transformations to me and I consider negation as one of those transformations. On the other hand negation operator totally breaks this pipeline. I personally prefer a bit longer list of transformations rather than list of transformations and negation operator as prefix to the list.<br></p><p>&gt; 21 трав. 2016 р. о 17:59 Charlie Monroe &lt;charlie at charliemonroe.net&gt; написав(ла):<br>&gt; <br>&gt; This would make sense as an operator (or actually it would have to be a keywod):<br>&gt; <br>&gt; return not self.lanes[...].contains(.Gap)<br>&gt; <br>&gt; Or if you don&#39;t mind having { } around the expression it could be defined as a function:<br>&gt; <br>&gt; func not(@noescape block: (Void) -&gt; Bool) rethrows -&gt; Bool { return !block() }<br>&gt; <br>&gt; Then you can have<br>&gt; <br>&gt; return not { self.lanes[...].contains(.Gap) }<br>&gt; <br>&gt; But I am personally not a fan of this.<br>&gt; <br>&gt; Charlie<br>&gt; <br>&gt;&gt; On May 21, 2016, at 4:50 PM, Антон Миронов via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I found negation operator (!) the least detectable among the code. So I’ve decided to add property “not” to BooleanType (Swift 2.2) or Boolean on 3.0 with extension:<br>&gt;&gt; <br>&gt;&gt; extension BooleanType {<br>&gt;&gt; 	var not: Bool { return !self.boolValue }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; This is code with negation operator:<br>&gt;&gt; 	return !self.lanes[position.y][currentLaneRange].contains(.Gap)<br>&gt;&gt; <br>&gt;&gt; As I sad before negation operation is hard to spot. Moreover at first it looks like I’m trying to negate self for some reason.<br>&gt;&gt; <br>&gt;&gt; This is code with “not” property:<br>&gt;&gt; 	return self.lanes[position.y][currentLaneRange].contains(.Gap).not<br>&gt;&gt; <br>&gt;&gt; Now it is easy to spot the statement I am actually getting negation of.<br>&gt;&gt; On my experience negation operator can occasionally be missed while reading code. This happens less often with “not” property. So I’m proposing to add this property to standard library and prefer it in most cases.<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; Anton Mironov<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160521/cc7e759c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Proposal] Add property for negation to Bool</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>May 21, 2016 at 06:00:00pm</p></header><div class="content"><p>If you have a pipeline like this, I&#39;d suggest to break it up into smaller segments also for the sake of readability...<br></p><p>The `not` var just doesn&#39;t seem right to me. Perhaps negatedValue? negatedBoolValue, since BooleanType has boolValue?<br></p><p>Question is whether this should be implemented on BooleanType or directly on Bool.<br></p><p>But I still have mixed feelings about this.<br></p><p>Charlie<br></p><p>&gt; On May 21, 2016, at 5:42 PM, Антон Миронов &lt;antonvmironov at gmail.com&gt; wrote:<br>&gt; <br>&gt; Good point. In such a case it would be more rational to have “not&quot; as func not(value Bool) -&gt; Bool { … } . But I am not a fun of such solution either.<br>&gt; You see, in swift, there is a lot of code that looks like:<br>&gt; <br>&gt; let newValue = rawValue<br>&gt; 	.transformA(arg1) { ... }<br>&gt; 	.transformB(arg2) { ... }<br>&gt; 	.transformC(arg3) { ... }<br>&gt; <br>&gt; It looks as a pipeline of transformations to me and I consider negation as one of those transformations. On the other hand negation operator totally breaks this pipeline. I personally prefer a bit longer list of transformations rather than list of transformations and negation operator as prefix to the list.<br>&gt; <br>&gt;&gt; 21 трав. 2016 р. о 17:59 Charlie Monroe &lt;charlie at charliemonroe.net &lt;mailto:charlie at charliemonroe.net&gt;&gt; написав(ла):<br>&gt;&gt; <br>&gt;&gt; This would make sense as an operator (or actually it would have to be a keywod):<br>&gt;&gt; <br>&gt;&gt; return not self.lanes[...].contains(.Gap)<br>&gt;&gt; <br>&gt;&gt; Or if you don&#39;t mind having { } around the expression it could be defined as a function:<br>&gt;&gt; <br>&gt;&gt; func not(@noescape block: (Void) -&gt; Bool) rethrows -&gt; Bool { return !block() }<br>&gt;&gt; <br>&gt;&gt; Then you can have<br>&gt;&gt; <br>&gt;&gt; return not { self.lanes[...].contains(.Gap) }<br>&gt;&gt; <br>&gt;&gt; But I am personally not a fan of this.<br>&gt;&gt; <br>&gt;&gt; Charlie<br>&gt;&gt; <br>&gt;&gt;&gt; On May 21, 2016, at 4:50 PM, Антон Миронов via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I found negation operator (!) the least detectable among the code. So I’ve decided to add property “not” to BooleanType (Swift 2.2) or Boolean on 3.0 with extension:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension BooleanType {<br>&gt;&gt;&gt; 	var not: Bool { return !self.boolValue }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is code with negation operator:<br>&gt;&gt;&gt; 	return !self.lanes[position.y][currentLaneRange].contains(.Gap)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As I sad before negation operation is hard to spot. Moreover at first it looks like I’m trying to negate self for some reason.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is code with “not” property:<br>&gt;&gt;&gt; 	return self.lanes[position.y][currentLaneRange].contains(.Gap).not<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Now it is easy to spot the statement I am actually getting negation of.<br>&gt;&gt;&gt; On my experience negation operator can occasionally be missed while reading code. This happens less often with “not” property. So I’m proposing to add this property to standard library and prefer it in most cases.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; Anton Mironov<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160521/46090b35/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/abab8a25de5c943e3481fd3f95f3d89a?s=50"></div><header><strong>[Proposal] Add property for negation to Bool</strong> from <string>Антон Миронов</string> &lt;antonvmironov at gmail.com&gt;<p>May 21, 2016 at 08:00:00pm</p></header><div class="content"><p>`negated` or `negatedValue` or `negatedBoolValue` looks good to me too.<br></p><p>I think that it should be implemented on BooleanType because you do not want to consider whether it is Bool or DarwinBoolean or ObjCBool when just need a negated value.<br></p><p>I also understand your mixed feelings because negation operator is so familiar to every developer. I suggest you to try using negation property on real code for a bit.<br></p><p>Code readability is a very important. But in my opinion pipelining can be more expressive in some cases. But this discussion is off topic.<br></p><p><br>&gt; 21 трав. 2016 р. о 19:49 Charlie Monroe &lt;charlie at charliemonroe.net&gt; написав(ла):<br>&gt; <br>&gt; If you have a pipeline like this, I&#39;d suggest to break it up into smaller segments also for the sake of readability...<br>&gt; <br>&gt; The `not` var just doesn&#39;t seem right to me. Perhaps negatedValue? negatedBoolValue, since BooleanType has boolValue?<br>&gt; <br>&gt; Question is whether this should be implemented on BooleanType or directly on Bool.<br>&gt; <br>&gt; But I still have mixed feelings about this.<br>&gt; <br>&gt; Charlie<br>&gt; <br>&gt;&gt; On May 21, 2016, at 5:42 PM, Антон Миронов &lt;antonvmironov at gmail.com &lt;mailto:antonvmironov at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Good point. In such a case it would be more rational to have “not&quot; as func not(value Bool) -&gt; Bool { … } . But I am not a fun of such solution either.<br>&gt;&gt; You see, in swift, there is a lot of code that looks like:<br>&gt;&gt; <br>&gt;&gt; let newValue = rawValue<br>&gt;&gt; 	.transformA(arg1) { ... }<br>&gt;&gt; 	.transformB(arg2) { ... }<br>&gt;&gt; 	.transformC(arg3) { ... }<br>&gt;&gt; <br>&gt;&gt; It looks as a pipeline of transformations to me and I consider negation as one of those transformations. On the other hand negation operator totally breaks this pipeline. I personally prefer a bit longer list of transformations rather than list of transformations and negation operator as prefix to the list.<br>&gt;&gt; <br>&gt;&gt;&gt; 21 трав. 2016 р. о 17:59 Charlie Monroe &lt;charlie at charliemonroe.net &lt;mailto:charlie at charliemonroe.net&gt;&gt; написав(ла):<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This would make sense as an operator (or actually it would have to be a keywod):<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; return not self.lanes[...].contains(.Gap)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Or if you don&#39;t mind having { } around the expression it could be defined as a function:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func not(@noescape block: (Void) -&gt; Bool) rethrows -&gt; Bool { return !block() }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Then you can have<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; return not { self.lanes[...].contains(.Gap) }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But I am personally not a fan of this.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Charlie<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 21, 2016, at 4:50 PM, Антон Миронов via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I found negation operator (!) the least detectable among the code. So I’ve decided to add property “not” to BooleanType (Swift 2.2) or Boolean on 3.0 with extension:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; extension BooleanType {<br>&gt;&gt;&gt;&gt; 	var not: Bool { return !self.boolValue }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This is code with negation operator:<br>&gt;&gt;&gt;&gt; 	return !self.lanes[position.y][currentLaneRange].contains(.Gap)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; As I sad before negation operation is hard to spot. Moreover at first it looks like I’m trying to negate self for some reason.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This is code with “not” property:<br>&gt;&gt;&gt;&gt; 	return self.lanes[position.y][currentLaneRange].contains(.Gap).not<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Now it is easy to spot the statement I am actually getting negation of.<br>&gt;&gt;&gt;&gt; On my experience negation operator can occasionally be missed while reading code. This happens less often with “not” property. So I’m proposing to add this property to standard library and prefer it in most cases.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt; Anton Mironov<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160521/f55d9ce5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Proposal] Add property for negation to Bool</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>May 21, 2016 at 06:00:00pm</p></header><div class="content"><p>Or .isFalse :)<br>On Sat, May 21, 2016 at 10:22 AM Антон Миронов &lt;swift-evolution at swift.org&gt;<br>wrote:<br></p><p>&gt; `negated` or `negatedValue` or `negatedBoolValue` looks good to me too.<br>&gt;<br>&gt; I think that it should be implemented on BooleanType because you do not<br>&gt; want to consider whether it is Bool or DarwinBoolean or ObjCBool when just<br>&gt; need a negated value.<br>&gt;<br>&gt; I also understand your mixed feelings because negation operator is so<br>&gt; familiar to every developer. I suggest you to try using negation property<br>&gt; on real code for a bit.<br>&gt;<br>&gt; Code readability is a very important. But in my opinion pipelining can be<br>&gt; more expressive in some cases. But this discussion is off topic.<br>&gt;<br>&gt;<br>&gt; 21 трав. 2016 р. о 19:49 Charlie Monroe &lt;charlie at charliemonroe.net&gt;<br>&gt; написав(ла):<br>&gt;<br>&gt;<br>&gt; If you have a pipeline like this, I&#39;d suggest to break it up into smaller<br>&gt; segments also for the sake of readability...<br>&gt;<br>&gt; The `not` var just doesn&#39;t seem right to me. Perhaps negatedValue?<br>&gt; negatedBoolValue, since BooleanType has boolValue?<br>&gt;<br>&gt; Question is whether this should be implemented on BooleanType or directly<br>&gt; on Bool.<br>&gt;<br>&gt; But I still have mixed feelings about this.<br>&gt;<br>&gt; Charlie<br>&gt;<br>&gt; On May 21, 2016, at 5:42 PM, Антон Миронов &lt;antonvmironov at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; Good point. In such a case it would be more rational to have “not&quot; as func<br>&gt; not(value Bool) -&gt; Bool { … } . But I am not a fun of such solution either.<br>&gt; You see, in swift, there is a lot of code that looks like:<br>&gt;<br>&gt; let newValue = rawValue<br>&gt; .transformA(arg1) { ... }<br>&gt; .transformB(arg2) { ... }<br>&gt; .transformC(arg3) { ... }<br>&gt;<br>&gt; It looks as a pipeline of transformations to me and I consider negation as<br>&gt; one of those transformations. On the other hand negation operator totally<br>&gt; breaks this pipeline. I personally prefer a bit longer list of<br>&gt; transformations rather than list of transformations and negation operator<br>&gt; as prefix to the list.<br>&gt;<br>&gt; 21 трав. 2016 р. о 17:59 Charlie Monroe &lt;charlie at charliemonroe.net&gt;<br>&gt; написав(ла):<br>&gt;<br>&gt; This would make sense as an operator (or actually it would have to be a<br>&gt; keywod):<br>&gt;<br>&gt; return not self.lanes[...].contains(.Gap)<br>&gt;<br>&gt; Or if you don&#39;t mind having { } around the expression it could be defined<br>&gt; as a function:<br>&gt;<br>&gt; func not(@noescape block: (Void) -&gt; Bool) rethrows -&gt; Bool { return<br>&gt; !block() }<br>&gt;<br>&gt; Then you can have<br>&gt;<br>&gt; return not { self.lanes[...].contains(.Gap) }<br>&gt;<br>&gt; But I am personally not a fan of this.<br>&gt;<br>&gt; Charlie<br>&gt;<br>&gt; On May 21, 2016, at 4:50 PM, Антон Миронов via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I found negation operator (!) the least detectable among the code. So I’ve<br>&gt; decided to add property “not” to BooleanType (Swift 2.2) or Boolean on 3.0<br>&gt; with extension:<br>&gt;<br>&gt; extension BooleanType {<br>&gt; var not: Bool { return !self.boolValue }<br>&gt; }<br>&gt;<br>&gt; This is code with negation operator:<br>&gt; return !self.lanes[position.y][currentLaneRange].contains(.Gap)<br>&gt;<br>&gt; As I sad before negation operation is hard to spot. Moreover at first it<br>&gt; looks like I’m trying to negate self for some reason.<br>&gt;<br>&gt; This is code with “not” property:<br>&gt; return self.lanes[position.y][currentLaneRange].contains(.Gap).not<br>&gt;<br>&gt;<br>&gt; Now it is easy to spot the statement I am actually getting negation of.<br>&gt; On my experience negation operator can occasionally be missed while<br>&gt; reading code. This happens less often with “not” property. So I’m proposing<br>&gt; to add this property to standard library and prefer it in most cases.<br>&gt;<br>&gt; Thanks,<br>&gt; Anton Mironov<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160521/124effbc/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Proposal] Add property for negation to Bool</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>May 21, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; This is code with negation operator:<br>&gt; 	return !self.lanes[position.y][currentLaneRange].contains(.Gap)<br>&gt; <br>&gt; As I sad before negation operation is hard to spot. Moreover at first it looks like I’m trying to negate self for some reason.<br>&gt; <br>&gt; This is code with “not” property:<br>&gt; 	return self.lanes[position.y][currentLaneRange].contains(.Gap).not<br></p><p>I do agree with you that `!` is sometimes hard to notice, but I think putting the &quot;not&quot; at the end is sort of burying the lede—&quot;if the lane at position y&#39;s current lane range contains a gap…NOT!&quot; I don&#39;t like making `not(_:)` a function, and I don&#39;t think we should introduce a freestanding keyword just for this, either.<br></p><p>One workaround is to write this instead:<br></p><p>	return !!!self.lanes[position.y][currentLaneRange].contains(.Gap)<br></p><p>Three nots is logically equivalent to one, but far more visible. Of course, then you have to worry about accidentally writing two or four, which would be the opposite.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Proposal] Add property for negation to Bool</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>May 21, 2016 at 07:00:00pm</p></header><div class="content"><p>I&#39;m going to courteously disagree. The not operator belongs on the leading edge and not the trailing edge of the expression:<br></p><p>* One writes ~TruthValue, ¬TruthValue, &quot;not TruthValue&quot;, etc. <br>* One does not write TruthValue~, TruthValue¬, or &quot;TruthValue not&quot;.<br></p><p>Reading code under the current system creates phrases like &quot;if-not expression&quot;, naturally conjoining &quot;if not&quot;. Under your proposed system, it reads as &quot;if expression not&quot; or &quot;if expression negated truth value&quot;. This places a higher cognitive burden on the person reading the code and delays recognition that an expression should be understood in its inverse form. I think it&#39;s *more* likely a code reader would miss the intent in scanning than they would miss the leading exclamation point which, although small, is common and often used. As for using a property, such as &quot;.not&quot;, &quot;.negativeTruthValue&quot;, etc., although it makes the operation bigger and more noticeable, it does so in the wrong place, and inelegantly.<br></p><p>I wouldn&#39;t support introducing a `not` keyword as in `if not expression` as this does not feel &quot;Swifty&quot;. It is neither concise, or more clear. All in all, this feels like a fix for something that isn&#39;t broken, and I cannot see any real world measurable benefit from changing the leading not operator. I believe the impact of the change would be larger than expected and to the detriment of the language.<br></p><p>-- E<br></p><p><br></p><p>&gt; On May 21, 2016, at 8:50 AM, Антон Миронов via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I found negation operator (!) the least detectable among the code. So I’ve decided to add property “not” to BooleanType (Swift 2.2) or Boolean on 3.0 with extension:<br>&gt; <br>&gt; extension BooleanType {<br>&gt; 	var not: Bool { return !self.boolValue }<br>&gt; }<br>&gt; <br>&gt; This is code with negation operator:<br>&gt; 	return !self.lanes[position.y][currentLaneRange].contains(.Gap)<br>&gt; <br>&gt; As I sad before negation operation is hard to spot. Moreover at first it looks like I’m trying to negate self for some reason.<br>&gt; <br>&gt; This is code with “not” property:<br>&gt; 	return self.lanes[position.y][currentLaneRange].contains(.Gap).not<br>&gt; <br>&gt; Now it is easy to spot the statement I am actually getting negation of.<br>&gt; On my experience negation operator can occasionally be missed while reading code. This happens less often with “not” property. So I’m proposing to add this property to standard library and prefer it in most cases.<br>&gt; <br>&gt; Thanks,<br>&gt; Anton Mironov<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160521/f7471fe3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/abab8a25de5c943e3481fd3f95f3d89a?s=50"></div><header><strong>[Proposal] Add property for negation to Bool</strong> from <string>Антон Миронов</string> &lt;antonvmironov at gmail.com&gt;<p>May 22, 2016 at 11:00:00am</p></header><div class="content"><p>You are completely right about ¬TruthValue. Going further I would say that in math list of transform looks like this: <br></p><p>	transformC(transformB(transformA(value)))<br></p><p>Negation operator fits perfectly in such notation. But since Swift 2 language moved to notation:<br></p><p>	value.transformA.transformB.transformC<br></p><p>This notation is inverse to the one we see in math. So in my opinion negation property fits in new Swift notation as another transformation appended to others.<br></p><p><br></p><p>I agree that negation operator looks better for “if !value” such as:<br></p><p>let containsEvenNumers = numbers.contains { ($0 % 2) == 0 }<br>if !containsEvenNumers {<br>	print(“No even numbers here&quot;)<br>}<br></p><p>Because in this case you directly negate “containsEvenNumers”. But in case:<br></p><p>func isEven(number: Int) -&gt; Bool { return (number % 2) == 0 }<br></p><p>if !numbers.contains(isEven) {<br>	print(“No even numbers here&quot;)	<br>}<br></p><p>negation operator actually has higher cognitive burden to me. I have to remember about prefix when I’m just trying to read expression from left to right.<br></p><p>On the other hand, negation property that looks like consecutive transformation lets me read expression in one direction. And since I’m used to reading expressions to the end it is easy to notice negation at the end.<br></p><p>func isEven(number: Int) -&gt; Bool { return (number % 2) == 0 }<br>if numbers.contains(isEven).not {<br>	print(“No even numbers here&quot;)	<br>}<br></p><p>Maybe this question goes too deep. Or maybe unidirectional instruction flow is not that important.<br></p><p>Thanks,<br>Anton Mironov<br></p><p>&gt; 22 трав. 2016 р. о 04:14 Erica Sadun &lt;erica at ericasadun.com&gt; написав(ла):<br>&gt; <br>&gt; I&#39;m going to courteously disagree. The not operator belongs on the leading edge and not the trailing edge of the expression:<br>&gt; <br>&gt; * One writes ~TruthValue, ¬TruthValue, &quot;not TruthValue&quot;, etc. <br>&gt; * One does not write TruthValue~, TruthValue¬, or &quot;TruthValue not&quot;.<br>&gt; <br>&gt; Reading code under the current system creates phrases like &quot;if-not expression&quot;, naturally conjoining &quot;if not&quot;. Under your proposed system, it reads as &quot;if expression not&quot; or &quot;if expression negated truth value&quot;. This places a higher cognitive burden on the person reading the code and delays recognition that an expression should be understood in its inverse form. I think it&#39;s *more* likely a code reader would miss the intent in scanning than they would miss the leading exclamation point which, although small, is common and often used. As for using a property, such as &quot;.not&quot;, &quot;.negativeTruthValue&quot;, etc., although it makes the operation bigger and more noticeable, it does so in the wrong place, and inelegantly.<br>&gt; <br>&gt; I wouldn&#39;t support introducing a `not` keyword as in `if not expression` as this does not feel &quot;Swifty&quot;. It is neither concise, or more clear. All in all, this feels like a fix for something that isn&#39;t broken, and I cannot see any real world measurable benefit from changing the leading not operator. I believe the impact of the change would be larger than expected and to the detriment of the language.<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On May 21, 2016, at 8:50 AM, Антон Миронов via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I found negation operator (!) the least detectable among the code. So I’ve decided to add property “not” to BooleanType (Swift 2.2) or Boolean on 3.0 with extension:<br>&gt;&gt; <br>&gt;&gt; extension BooleanType {<br>&gt;&gt; 	var not: Bool { return !self.boolValue }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; This is code with negation operator:<br>&gt;&gt; 	return !self.lanes[position.y][currentLaneRange].contains(.Gap)<br>&gt;&gt; <br>&gt;&gt; As I sad before negation operation is hard to spot. Moreover at first it looks like I’m trying to negate self for some reason.<br>&gt;&gt; <br>&gt;&gt; This is code with “not” property:<br>&gt;&gt; 	return self.lanes[position.y][currentLaneRange].contains(.Gap).not<br>&gt;&gt; <br>&gt;&gt; Now it is easy to spot the statement I am actually getting negation of.<br>&gt;&gt; On my experience negation operator can occasionally be missed while reading code. This happens less often with “not” property. So I’m proposing to add this property to standard library and prefer it in most cases.<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; Anton Mironov<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160522/3ce3e274/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Proposal] Add property for negation to Bool</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>May 22, 2016 at 08:00:00am</p></header><div class="content"><p>I think this would make more sense if we were to get more characters in operators, such that we could also replace &amp;&amp; with and, and || with or, this way we could make not an operator and write expressions like so:<br></p><p>	if foo and not bar { … }<br></p><p>Otherwise as others have said this seems strange as a method. If you don’t find the leading exclamation mark very readable then you could instead do:<br></p><p>	foo != true<br></p><p>It’s a few more characters, but it exists now and reads logically I think.<br></p><p>&gt; On 21 May 2016, at 15:50, Антон Миронов via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I found negation operator (!) the least detectable among the code. So I’ve decided to add property “not” to BooleanType (Swift 2.2) or Boolean on 3.0 with extension:<br>&gt; <br>&gt; extension BooleanType {<br>&gt; 	var not: Bool { return !self.boolValue }<br>&gt; }<br>&gt; <br>&gt; This is code with negation operator:<br>&gt; 	return !self.lanes[position.y][currentLaneRange].contains(.Gap)<br>&gt; <br>&gt; As I sad before negation operation is hard to spot. Moreover at first it looks like I’m trying to negate self for some reason.<br>&gt; <br>&gt; This is code with “not” property:<br>&gt; 	return self.lanes[position.y][currentLaneRange].contains(.Gap).not<br>&gt; <br>&gt; Now it is easy to spot the statement I am actually getting negation of.<br>&gt; On my experience negation operator can occasionally be missed while reading code. This happens less often with “not” property. So I’m proposing to add this property to standard library and prefer it in most cases.<br>&gt; <br>&gt; Thanks,<br>&gt; Anton Mironov<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160522/b4767c4d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[Proposal] Add property for negation to Bool</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>May 22, 2016 at 03:00:00am</p></header><div class="content"><p>`var isFalse: Bool` seems like a nice resolution to me. no need for new<br>keywords and it reads better than !foo<br></p><p>On Sun, May 22, 2016 at 3:28 AM, Haravikk via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I think this would make more sense if we were to get more characters in<br>&gt; operators, such that we could also replace &amp;&amp; with and, and || with or,<br>&gt; this way we could make not an operator and write expressions like so:<br>&gt;<br>&gt; if foo and not bar { … }<br>&gt;<br>&gt; Otherwise as others have said this seems strange as a method. If you don’t<br>&gt; find the leading exclamation mark very readable then you could instead do:<br>&gt;<br>&gt; foo != true<br>&gt;<br>&gt; It’s a few more characters, but it exists now and reads logically I think.<br>&gt;<br>&gt; On 21 May 2016, at 15:50, Антон Миронов via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I found negation operator (!) the least detectable among the code. So I’ve<br>&gt; decided to add property “not” to BooleanType (Swift 2.2) or Boolean on 3.0<br>&gt; with extension:<br>&gt;<br>&gt; extension BooleanType {<br>&gt; var not: Bool { return !self.boolValue }<br>&gt; }<br>&gt;<br>&gt; This is code with negation operator:<br>&gt; return !self.lanes[position.y][currentLaneRange].contains(.Gap)<br>&gt;<br>&gt; As I sad before negation operation is hard to spot. Moreover at first it<br>&gt; looks like I’m trying to negate self for some reason.<br>&gt;<br>&gt; This is code with “not” property:<br>&gt; return self.lanes[position.y][currentLaneRange].contains(.Gap).not<br>&gt;<br>&gt;<br>&gt; Now it is easy to spot the statement I am actually getting negation of.<br>&gt; On my experience negation operator can occasionally be missed while<br>&gt; reading code. This happens less often with “not” property. So I’m proposing<br>&gt; to add this property to standard library and prefer it in most cases.<br>&gt;<br>&gt; Thanks,<br>&gt; Anton Mironov<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160522/7fcddc90/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Proposal] Add property for negation to Bool</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>May 22, 2016 at 10:00:00am</p></header><div class="content"><p>If there is a proposal for this, I think it needs to be complete - i.e. adding:<br></p><p>var isFalse: Bool<br>var isTrue: Bool<br>var negatedValue: Self (on BooleanType)<br>var negatedBoolValue: Bool<br></p><p>In such terms, the BooleanType would be complete as you&#39;d be able to express all boolean operations using functions/properties. The question is where would it be used. I do not think adding a negating variable at the end of several transformations is a good idea, perhaps something like this could be used in predicate programming...<br></p><p>&gt; On May 22, 2016, at 9:30 AM, T.J. Usiyan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; `var isFalse: Bool` seems like a nice resolution to me. no need for new keywords and it reads better than !foo<br>&gt; <br>&gt; On Sun, May 22, 2016 at 3:28 AM, Haravikk via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I think this would make more sense if we were to get more characters in operators, such that we could also replace &amp;&amp; with and, and || with or, this way we could make not an operator and write expressions like so:<br>&gt; <br>&gt; 	if foo and not bar { … }<br>&gt; <br>&gt; Otherwise as others have said this seems strange as a method. If you don’t find the leading exclamation mark very readable then you could instead do:<br>&gt; <br>&gt; 	foo != true<br>&gt; <br>&gt; It’s a few more characters, but it exists now and reads logically I think.<br>&gt; <br>&gt;&gt; On 21 May 2016, at 15:50, Антон Миронов via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I found negation operator (!) the least detectable among the code. So I’ve decided to add property “not” to BooleanType (Swift 2.2) or Boolean on 3.0 with extension:<br>&gt;&gt; <br>&gt;&gt; extension BooleanType {<br>&gt;&gt; 	var not: Bool { return !self.boolValue }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; This is code with negation operator:<br>&gt;&gt; 	return !self.lanes[position.y][currentLaneRange].contains(.Gap)<br>&gt;&gt; <br>&gt;&gt; As I sad before negation operation is hard to spot. Moreover at first it looks like I’m trying to negate self for some reason.<br>&gt;&gt; <br>&gt;&gt; This is code with “not” property:<br>&gt;&gt; 	return self.lanes[position.y][currentLaneRange].contains(.Gap).not<br>&gt;&gt; <br>&gt;&gt; Now it is easy to spot the statement I am actually getting negation of.<br>&gt;&gt; On my experience negation operator can occasionally be missed while reading code. This happens less often with “not” property. So I’m proposing to add this property to standard library and prefer it in most cases.<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; Anton Mironov<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160522/27cc2cb6/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
