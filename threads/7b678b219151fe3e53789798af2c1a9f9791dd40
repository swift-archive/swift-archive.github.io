<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e62bc7ff99b728b118676baee26cd1ff?s=50"></div><header><strong>[Idea] Distinguishing code comments from text comments.</strong> from <string>DifferentApps info</string> &lt;andre_ponzo at differentapps.com&gt;<p>August 27, 2016 at 09:00:00pm</p></header><div class="content"><p>Good day, swift-evolution followers,<br></p><p>After reading Doug McKenna&#39;s email, I also see advantages in using specific syntax to disable code instead of commenting it out.<br></p><p>To illustrate these ideas lets pick the more appropriate syntax (in my opinion) proposed by Doug: /{ ... }<br></p><p>For example:<br>/{<br>   print(&quot;Disabled code&quot;)<br>}<br></p><p>will produce the same result as:<br>if false {<br>   print(&quot;Disabled code&quot;)<br>}<br></p><p><br>1) Advantages of disabled code ( /{ ... } ) instead of commented-out code (/* ... */):<br></p><p>1.1)<br>The disabled code will evolve in case of refactoring. Variable and function names will be still valid the day the developer decides to re-enable the code.<br>Similarly, it prevents dead code inside comments:<br>   let x = 0<br>   ...<br>   /{x += 1}  // will cause a compiler error if the first and last lines are deleted.<br>   print(x)<br></p><p>1.2)<br>Permits the use of dedicated syntax colouring in the IDE.<br></p><p>1.3)<br>Permits correct indentation of the commented code (taking surrounding enabled code into account).<br></p><p><br>2) Advantages of /{ ... } instead of &quot;if false { ... }&quot;:<br></p><p>2.1)<br>The IDE will not generate the warning &quot;Will never be executed&quot;.<br></p><p>2.2)<br>It is more convenient.<br>For example suppose we have cond = true and a variable x, and that we prefer to add 2 to x instead of 1:<br>   original code: if cond {x += 1}<br>   - &quot;if false { ... }&quot; syntax:          if cond if false {x += 1} {x += 2}      // compiler error.<br>   - &quot;/{ ... }&quot; syntax:          if cond /{x += 1} {x += 2}     // OK.<br></p><p>2.3)<br>Semantically:<br>&quot;/*&quot; initiates a text comment. The symbol * refers to text as it is used in typography to mark footnotes.<br>&quot;/{&quot; initiates a code which is not executed. &quot;/{&quot; looks like &quot;no {&quot;.<br></p><p><br></p><p>André Ponzo<br>DifferentApps.com<br>Geneva, Switzerland<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1cf189f1dc2613ba3f5c3967576ae16d?s=50"></div><header><strong>[Idea] Distinguishing code comments from text comments.</strong> from <string>Doug McKenna</string> &lt;doug at mathemaesthetics.com&gt;<p>August 27, 2016 at 06:00:00pm</p></header><div class="content"><p>All,<br></p><p>To add to Andre&#39;s comments about benefits of code commenting, /{ and }/ (or any equivalent that uses open and close braces) allows the IDE editor&#39;s brace-balancer to work, which in turn helps the user with finding endpoints of commented-out code.<br></p><p>Commented-out code should be *syntactically* distinguishable from standard comments (non-compilable text for humans) because, among other things, it allows programs *other than the Swift compiler* that might parse or analyze the Swift code to know how, for example, to typeset commented-out code which might have a different typestyle from whatever is found (and possibly marked up) in standard /* ... */ or // comments.<br></p><p>A program I&#39;ve been working on, which converts one&#39;s code directly to documentation using markup in /* ... */ and // comments only, recognizes<br>/*{...{<br></p><p>   &lt;code&gt;    /* with nested block commented text */<br></p><p>}...}*/<br></p><p>as a comment markup syntax to declare nested code comments, where the number of one or more {...{s must match an eventual }...} (same number of braces) and be different for each level.  This makes it possible to catch mismatched nested delimiters more easily, at the same time as dis-incentivizing more than, say, two levels.<br></p><p>Delimiters /{ and }/ would work more succinctly, and a non-compiler parsing program such as mine could still implement the multiple brace syntax, whether it was part of the Swift language syntax or not.<br></p><p>I&#39;ve also implemented (in my program) the recognition of<br></p><p>    &lt;code&gt;  //; &lt;commented other code&gt;<br></p><p>as a means of commenting one line of unused or related code, again as a means of distinguishing text from code in a gloss-type comment (one that terminates at the line&#39;s end), so as to treat this type of comment differently from the usual // &lt;comment text&gt; in a final document.<br></p><p><br>- Doug McKenna<br>Mathemaesthetics, Inc.<br>Boulder, Colorado<br></p><p>----- Original Message -----<br>From: &quot;Andre Ponzo&quot; &lt;andre_ponzo at differentapps.com&gt;<br>To: swift-evolution at swift.org<br>Cc: doug at mathemaesthetics.com<br>Sent: Saturday, August 27, 2016 1:03:11 PM<br>Subject: Re: [swift-evolution] [Idea] Distinguishing code comments from 	text comments.<br></p><p>Good day, swift-evolution followers,<br></p><p>After reading Doug McKenna&#39;s email, I also see advantages in using specific syntax to disable code instead of commenting it out.<br></p><p>To illustrate these ideas lets pick the more appropriate syntax (in my opinion) proposed by Doug: /{ ... }<br></p><p>For example:<br>/{<br>   print(&quot;Disabled code&quot;)<br>}<br></p><p>will produce the same result as:<br>if false {<br>   print(&quot;Disabled code&quot;)<br>}<br></p><p><br>1) Advantages of disabled code ( /{ ... } ) instead of commented-out code (/* ... */):<br></p><p>1.1)<br>The disabled code will evolve in case of refactoring. Variable and function names will be still valid the day the developer decides to re-enable the code.<br>Similarly, it prevents dead code inside comments:<br>   let x = 0<br>   ...<br>   /{x += 1}  // will cause a compiler error if the first and last lines are deleted.<br>   print(x)<br></p><p>1.2)<br>Permits the use of dedicated syntax colouring in the IDE.<br></p><p>1.3)<br>Permits correct indentation of the commented code (taking surrounding enabled code into account).<br></p><p><br>2) Advantages of /{ ... } instead of &quot;if false { ... }&quot;:<br></p><p>2.1)<br>The IDE will not generate the warning &quot;Will never be executed&quot;.<br></p><p>2.2)<br>It is more convenient.<br>For example suppose we have cond = true and a variable x, and that we prefer to add 2 to x instead of 1:<br>   original code: if cond {x += 1}<br>   - &quot;if false { ... }&quot; syntax:          if cond if false {x += 1} {x += 2}      // compiler error.<br>   - &quot;/{ ... }&quot; syntax:          if cond /{x += 1} {x += 2}     // OK.<br></p><p>2.3)<br>Semantically:<br>&quot;/*&quot; initiates a text comment. The symbol * refers to text as it is used in typography to mark footnotes.<br>&quot;/{&quot; initiates a code which is not executed. &quot;/{&quot; looks like &quot;no {&quot;.<br></p><p><br></p><p>André Ponzo<br>DifferentApps.com<br>Geneva, Switzerland<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/42eca71033ece251f2f194b7e343c2ec?s=50"></div><header><strong>[Idea] Distinguishing code comments from text comments.</strong> from <string>Magnus Ahltorp</string> &lt;map at kth.se&gt;<p>August 29, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; 27 Aug. 2016 21:03 Andre Ponzo via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; 1) Advantages of disabled code ( /{ ... } ) instead of commented-out code (/* ... */):<br></p><p>&gt; 2) Advantages of /{ ... } instead of &quot;if false { ... }&quot;:<br></p><p>What are the advantages of this compared to conditional compilation (#if)?<br></p><p>/Magnus<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>[Idea] Distinguishing code comments from text comments.</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>August 29, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; Am 29.08.2016 um 20:20 schrieb Magnus Ahltorp via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; What are the advantages of this compared to conditional compilation (#if)?<br>Just was about to propose this (existing) alternative.<br>I&#39;ve already used it to store complicated breakpoint-actions in source, and was pleased that goodies like autocompletion work for inactive code (sometimes… as it does with normal code ;-)<br></p><p>Tino<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e62bc7ff99b728b118676baee26cd1ff?s=50"></div><header><strong>[Idea] Distinguishing code comments from text comments.</strong> from <string>DifferentApps info</string> &lt;andre_ponzo at differentapps.com&gt;<p>August 29, 2016 at 10:00:00pm</p></header><div class="content"><p>The advantage is that you do not need to define a conditional flag for the #if.<br>It is also more concise.<br></p><p>Code disabling (with /{...}/) is a tool useful when developing algorithm, and disabled code should not be aimed to remain definitively in a Swift file.<br></p><p>Andre Ponzo<br></p><p>&gt; Le 29 août 2016 à 20:20, Magnus Ahltorp &lt;map at kth.se&gt; a écrit :<br>&gt; <br>&gt; <br>&gt;&gt; 27 Aug. 2016 21:03 Andre Ponzo via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; 1) Advantages of disabled code ( /{ ... } ) instead of commented-out code (/* ... */):<br>&gt; <br>&gt;&gt; 2) Advantages of /{ ... } instead of &quot;if false { ... }&quot;:<br>&gt; <br>&gt; What are the advantages of this compared to conditional compilation (#if)?<br>&gt; <br>&gt; /Magnus<br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e01e37acbfad671da1b94a61cf819d82?s=50"></div><header><strong>[Idea] Distinguishing code comments from text comments.</strong> from <string>Kenny Leung</string> &lt;kenny_leung at pobox.com&gt;<p>August 29, 2016 at 01:00:00pm</p></header><div class="content"><p>+1 from me.<br></p><p>-Kenny<br></p><p><br>&gt; On Aug 29, 2016, at 1:16 PM, DifferentApps info via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The advantage is that you do not need to define a conditional flag for the #if.<br>&gt; It is also more concise.<br>&gt; <br>&gt; Code disabling (with /{...}/) is a tool useful when developing algorithm, and disabled code should not be aimed to remain definitively in a Swift file.<br>&gt; <br>&gt; Andre Ponzo<br>&gt; <br>&gt;&gt; Le 29 août 2016 à 20:20, Magnus Ahltorp &lt;map at kth.se&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; 27 Aug. 2016 21:03 Andre Ponzo via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1) Advantages of disabled code ( /{ ... } ) instead of commented-out code (/* ... */):<br>&gt;&gt; <br>&gt;&gt;&gt; 2) Advantages of /{ ... } instead of &quot;if false { ... }&quot;:<br>&gt;&gt; <br>&gt;&gt; What are the advantages of this compared to conditional compilation (#if)?<br>&gt;&gt; <br>&gt;&gt; /Magnus<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e95942f1fe843f007ef5430b9acff78b?s=50"></div><header><strong>[Idea] Distinguishing code comments from text comments.</strong> from <string>Jaden Geller</string> &lt;jaden.geller at gmail.com&gt;<p>August 29, 2016 at 01:00:00pm</p></header><div class="content"><p>You don&#39;t have to.<br></p><p>#if false {<br>    // disabled code here<br>}<br></p><p>&gt; On Aug 29, 2016, at 1:16 PM, DifferentApps info via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The advantage is that you do not need to define a conditional flag for the #if.<br>&gt; It is also more concise.<br>&gt; <br>&gt; Code disabling (with /{...}/) is a tool useful when developing algorithm, and disabled code should not be aimed to remain definitively in a Swift file.<br>&gt; <br>&gt; Andre Ponzo<br>&gt; <br>&gt;&gt; Le 29 août 2016 à 20:20, Magnus Ahltorp &lt;map at kth.se&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; 27 Aug. 2016 21:03 Andre Ponzo via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1) Advantages of disabled code ( /{ ... } ) instead of commented-out code (/* ... */):<br>&gt;&gt; <br>&gt;&gt;&gt; 2) Advantages of /{ ... } instead of &quot;if false { ... }&quot;:<br>&gt;&gt; <br>&gt;&gt; What are the advantages of this compared to conditional compilation (#if)?<br>&gt;&gt; <br>&gt;&gt; /Magnus<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/42eca71033ece251f2f194b7e343c2ec?s=50"></div><header><strong>[Idea] Distinguishing code comments from text comments.</strong> from <string>Magnus Ahltorp</string> &lt;map at kth.se&gt;<p>August 29, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; 29 Aug. 2016 22:16 DifferentApps info &lt;andre_ponzo at differentapps.com&gt; wrote:<br>&gt; <br>&gt; The advantage is that you do not need to define a conditional flag for the #if.<br></p><p>The good news is, you don&#39;t.<br></p><p>#if false<br>  print(&quot;Disabled code&quot;)<br>#endif<br></p><p>which is a time-tested way of writing C code (using #if 0).<br></p><p>From the Swift changelog, where they even call it an idiom of C:<br></p><p>2014-04-30<br>[…]<br>* You can now use the `true` and `false` constants in build configurations,<br>  allowing you to emulate the C idioms of `#if 0` (but spelled `#if false`).<br></p><p>One pattern I use all the time, both in C and in Swift, is this:<br></p><p>#if false<br>&lt;experimental code&gt;<br>#else<br>&lt;old code&gt;<br>#endif<br></p><p>which makes it possible to switch between the implementations quickly, something you cannot do with the proposed syntax.<br></p><p>&gt; Code disabling (with /{...}/) is a tool useful when developing algorithm, and disabled code should not be aimed to remain definitively in a Swift file.<br></p><p>Which is in no way dependent on if you use the proposed syntax, traditional comments, or conditional compilation.<br></p><p>/Magnus<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Idea] Distinguishing code comments from text comments.</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>August 29, 2016 at 08:00:00pm</p></header><div class="content"><p>Nice! With that explanation, I too am -1 on another way of doing the same<br>thing.<br></p><p><br>On Mon, Aug 29, 2016 at 15:53 Magnus Ahltorp via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt; 29 Aug. 2016 22:16 DifferentApps info &lt;andre_ponzo at differentapps.com&gt;<br>&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; The advantage is that you do not need to define a conditional flag for<br>&gt; the #if.<br>&gt;<br>&gt; The good news is, you don&#39;t.<br>&gt;<br>&gt; #if false<br>&gt;   print(&quot;Disabled code&quot;)<br>&gt; #endif<br>&gt;<br>&gt; which is a time-tested way of writing C code (using #if 0).<br>&gt;<br>&gt; From the Swift changelog, where they even call it an idiom of C:<br>&gt;<br>&gt; 2014-04-30<br>&gt; […]<br>&gt; * You can now use the `true` and `false` constants in build configurations,<br>&gt;   allowing you to emulate the C idioms of `#if 0` (but spelled `#if<br>&gt; false`).<br>&gt;<br>&gt; One pattern I use all the time, both in C and in Swift, is this:<br>&gt;<br>&gt; #if false<br>&gt; &lt;experimental code&gt;<br>&gt; #else<br>&gt; &lt;old code&gt;<br>&gt; #endif<br>&gt;<br>&gt; which makes it possible to switch between the implementations quickly,<br>&gt; something you cannot do with the proposed syntax.<br>&gt;<br>&gt; &gt; Code disabling (with /{...}/) is a tool useful when developing<br>&gt; algorithm, and disabled code should not be aimed to remain definitively in<br>&gt; a Swift file.<br>&gt;<br>&gt; Which is in no way dependent on if you use the proposed syntax,<br>&gt; traditional comments, or conditional compilation.<br>&gt;<br>&gt; /Magnus<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160829/1a58428d/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e62bc7ff99b728b118676baee26cd1ff?s=50"></div><header><strong>[Idea] Distinguishing code comments from text comments.</strong> from <string>DifferentApps info</string> &lt;andre_ponzo at differentapps.com&gt;<p>August 29, 2016 at 11:00:00pm</p></header><div class="content"><p>Thanks for your pattern suggestion.<br>But it would be also possible to switch between implementations with the proposed syntax as shown bellow:<br></p><p>/{<br>   &lt;code 1&gt;<br>}/<br>do {<br>   &lt;code 2&gt;<br>}<br></p><p><br>Le 29 août 2016 à 22:53, Magnus Ahltorp &lt;map at kth.se&gt; a écrit :<br></p><p>&gt;&gt; 29 Aug. 2016 22:16 DifferentApps info &lt;andre_ponzo at differentapps.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The advantage is that you do not need to define a conditional flag for the #if.<br>&gt; <br>&gt; The good news is, you don&#39;t.<br>&gt; <br>&gt; #if false<br>&gt;  print(&quot;Disabled code&quot;)<br>&gt; #endif<br>&gt; <br>&gt; which is a time-tested way of writing C code (using #if 0).<br>&gt; <br>&gt; From the Swift changelog, where they even call it an idiom of C:<br>&gt; <br>&gt; 2014-04-30<br>&gt; […]<br>&gt; * You can now use the `true` and `false` constants in build configurations,<br>&gt;  allowing you to emulate the C idioms of `#if 0` (but spelled `#if false`).<br>&gt; <br>&gt; One pattern I use all the time, both in C and in Swift, is this:<br>&gt; <br>&gt; #if false<br>&gt; &lt;experimental code&gt;<br>&gt; #else<br>&gt; &lt;old code&gt;<br>&gt; #endif<br>&gt; <br>&gt; which makes it possible to switch between the implementations quickly, something you cannot do with the proposed syntax.<br>&gt; <br>&gt;&gt; Code disabling (with /{...}/) is a tool useful when developing algorithm, and disabled code should not be aimed to remain definitively in a Swift file.<br>&gt; <br>&gt; Which is in no way dependent on if you use the proposed syntax, traditional comments, or conditional compilation.<br>&gt; <br>&gt; /Magnus<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Idea] Distinguishing code comments from text comments.</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>August 29, 2016 at 04:00:00pm</p></header><div class="content"><p>On Mon, Aug 29, 2016 at 4:15 PM, DifferentApps info via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Thanks for your pattern suggestion.<br>&gt; But it would be also possible to switch between implementations with the<br>&gt; proposed syntax as shown bellow:<br>&gt;<br>&gt; /{<br>&gt;    &lt;code 1&gt;<br>&gt; }/<br>&gt; do {<br>&gt;    &lt;code 2&gt;<br>&gt; }<br>&gt;<br>&gt;<br>That would be greatly inferior, as you&#39;d have to edit the code in four<br>distinct places, versus a single one (change #if false to #if true).<br></p><p><br>&gt;<br>&gt; Le 29 août 2016 à 22:53, Magnus Ahltorp &lt;map at kth.se&gt; a écrit :<br>&gt;<br>&gt; &gt;&gt; 29 Aug. 2016 22:16 DifferentApps info &lt;andre_ponzo at differentapps.com&gt;<br>&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; The advantage is that you do not need to define a conditional flag for<br>&gt; the #if.<br>&gt; &gt;<br>&gt; &gt; The good news is, you don&#39;t.<br>&gt; &gt;<br>&gt; &gt; #if false<br>&gt; &gt;  print(&quot;Disabled code&quot;)<br>&gt; &gt; #endif<br>&gt; &gt;<br>&gt; &gt; which is a time-tested way of writing C code (using #if 0).<br>&gt; &gt;<br>&gt; &gt; From the Swift changelog, where they even call it an idiom of C:<br>&gt; &gt;<br>&gt; &gt; 2014-04-30<br>&gt; &gt; […]<br>&gt; &gt; * You can now use the `true` and `false` constants in build<br>&gt; configurations,<br>&gt; &gt;  allowing you to emulate the C idioms of `#if 0` (but spelled `#if<br>&gt; false`).<br>&gt; &gt;<br>&gt; &gt; One pattern I use all the time, both in C and in Swift, is this:<br>&gt; &gt;<br>&gt; &gt; #if false<br>&gt; &gt; &lt;experimental code&gt;<br>&gt; &gt; #else<br>&gt; &gt; &lt;old code&gt;<br>&gt; &gt; #endif<br>&gt; &gt;<br>&gt; &gt; which makes it possible to switch between the implementations quickly,<br>&gt; something you cannot do with the proposed syntax.<br>&gt; &gt;<br>&gt; &gt;&gt; Code disabling (with /{...}/) is a tool useful when developing<br>&gt; algorithm, and disabled code should not be aimed to remain definitively in<br>&gt; a Swift file.<br>&gt; &gt;<br>&gt; &gt; Which is in no way dependent on if you use the proposed syntax,<br>&gt; traditional comments, or conditional compilation.<br>&gt; &gt;<br>&gt; &gt; /Magnus<br>&gt; &gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160829/e5d3dfd1/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/42eca71033ece251f2f194b7e343c2ec?s=50"></div><header><strong>[Idea] Distinguishing code comments from text comments.</strong> from <string>Magnus Ahltorp</string> &lt;map at kth.se&gt;<p>August 29, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; 29 Aug. 2016 23:15 DifferentApps info &lt;andre_ponzo at differentapps.com&gt; wrote:<br>&gt; <br>&gt; Thanks for your pattern suggestion.<br>&gt; But it would be also possible to switch between implementations with the proposed syntax as shown bellow:<br>&gt; <br>&gt; /{<br>&gt;   &lt;code 1&gt;<br>&gt; }/<br>&gt; do {<br>&gt;   &lt;code 2&gt;<br>&gt; }<br></p><p>No, that would not be sufficient. A constructed example:<br></p><p>#if true<br>    let a : Int64<br>#else<br>    let a : Int32<br>#endif<br></p><p>Or, an actual example from some of my own code that i found (but, in this case, C-with-blocks):<br></p><p>#if 0<br>    int nrecords;<br>#else<br>    __block int nrecords;<br>#endif<br></p><p>/Magnus<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
