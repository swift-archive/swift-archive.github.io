<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  8, 2016 at 10:00:00am</p></header><div class="content"><p>on Mon Feb 08 2016, Erica Sadun &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I&#39;m going to throw this out there so I can get this off my<br>&gt; things-to-do list. This proposal puts forth `resetfilecontext` to<br>&gt; match Brent&#39;s &quot;reset&quot; with Chris&#39;s well-specified long symbol: it<br>&gt; describes what the command does and is unlikely to overlap with any<br>&gt; future identifiers.<br>&gt;<br>&gt; Feedback solicited. <br>&gt;<br>&gt; -- E, who is casting her eye on a few other bike sheds and would like<br>&gt; this one to be painted purple and done<br>&gt;<br>&gt; Disambiguating Line Control Statements from Debugging Identifiers<br>&gt;<br>&gt; Proposal: TBD<br>&gt; Author(s): Erica Sadun &lt;http://github.com/erica&gt;<br>&gt; Status: TBD<br>&gt; Review manager: TBD<br>&gt;  &lt;https://gist.github.com/erica/8decc791e1319987eadd#introduction&gt;Introduction<br>&gt;<br>&gt; In being accepted, Swift Evolution SE-0028<br>&gt; (https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md<br>&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md&gt;)<br>&gt; overloads the use of #line to mean both an identifier that maps to a<br>&gt; calling site&#39;s line number within a file and acts as part of a line<br>&gt; control statement. This proposal nominates #resetfilecontext to<br>&gt; replace #line for file and line syntactic source control.<br>&gt;<br>&gt;  &lt;https://gist.github.com/erica/8decc791e1319987eadd#motivation&gt;Motivation<br>&gt;<br>&gt; Swift uses the the following grammar to define line control statements:<br>&gt;<br>&gt; line-control-statement → #line­<br>&gt; line-control-statement → #line­line-number­file-name­<br>&gt; line-number → A decimal integer greater than zero<br>&gt; file-name → static-string-literal­<br>&gt; The accepted implementation of SE-0028 disambiguates the two uses by<br>&gt; requiring #line (the control statement) to appear at the first<br>&gt; column. This is a stop-gap solution best remedied by renaming #line.<br>&gt;<br>&gt; The core team was not satisfied with the &#39;first token on a line&#39;<br>&gt; whitespace behavior required for overloading #line. Chris Lattner<br>&gt; requested a discussion about renaming the old #line directive to<br>&gt; something more specific and tailored to its purpose: &quot;Once that name<br>&gt; and syntax is settled, we can rename the directive and remove the<br>&gt; whitespace rule.&quot; Chris also requested a well-specified long symbol,<br>&gt; adding:<br>&gt;<br>&gt; The existing #line feature exists for a very specific purpose: it is<br>&gt; generated by source generation tools (e.g. gyb), and they are designed<br>&gt; to change how compiler diagnostics and debug information are<br>&gt; emitted. Changing the function/symbol on the debugger isn’t something<br>&gt; that is obviously good, because the debugger has a structured notion<br>&gt; of the current frame which is a highly symbolic AST representation of<br>&gt; the function. A text string is probably not sufficient, and may not be<br>&gt; necessary for all cases. The important point though is that any<br>&gt; discussion about adding it should be motivated by a concrete use-case,<br>&gt; and what problem is being solved.<br>&gt; The discussion took place on-line in the [Discussion]: Renaming #line,<br>&gt; the line control statement thread.<br>&gt;<br>&gt;  &lt;https://gist.github.com/erica/8decc791e1319987eadd#detailed-design&gt;Detailed design<br>&gt;<br>&gt; line-control-statement → #resetfilecontext<br>&gt; line-control-statement → #resetfilecontext line-number file-name<br>&gt; line-number → A decimal integer greater than zero<br>&gt; file-name → static-string-literal­<br>&gt;  &lt;https://gist.github.com/erica/8decc791e1319987eadd#alternatives-considered&gt;Alternatives<br>&gt; considered<br>&gt;<br>&gt; Several alternatives were put forward, of which #setline was the most<br>&gt; popular. This failed the &quot;make it specific and long&quot; (and presumably<br>&gt; avoid future naming conflicts) request.<br>&gt;<br>&gt; A more flexible grammar was suggested, however, as Kevin Ballard<br>&gt; pointed out, &quot;This feature isn&#39;t something end users are going to<br>&gt; use. And it&#39;s not something that will ever reasonably apply to<br>&gt; anything except #file and #line. This feature is only ever intended to<br>&gt; be used by tools that auto-generate source files. The most important<br>&gt; concerns here really should just be that whatever we use is trivial to<br>&gt; generate correctly by even the simplest of tools and is readable. And<br>&gt; since this won&#39;t ever apply to anything beyond #file and #line,<br>&gt; there&#39;s no need to try to generalize this feature at all.&quot;<br></p><p>+1 for the idea, but...<br></p><p>I don&#39;t think we should make this change without also making the feature<br>useful for things like gyb, which has to use its own home-brew line<br>directive machinery because #line is AFAIK currently useless for any<br>known application.  The way it currently works you can only put the<br>directive at grammatical boundaries in the program where #if would also<br>work.  For #if this is a feature, but for #resetfilecontext it&#39;s a bug.<br></p><p>Isn&#39;t it the case that making this feature useful would require a lot<br>more than the simple syntactic shuffle being proposed here?<br></p><p>&gt; A variety of other keywords were put forward in the discussion and can<br>&gt; be found in the online discussion.<br>&gt;<br>&gt;&gt; On Feb 4, 2016, at 4:06 PM, Chris Lattner via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Feb 4, 2016, at 1:49 PM, Kevin Ballard via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t think we can support arbitrary replacements for #function,<br>&gt;&gt;&gt; since it&#39;s perfectly reasonable for people to write code that<br>&gt;&gt;&gt; expects the format of #function to match what Swift generates.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; With a theoretical #sourcecontext (or whatever the proposed name<br>&gt;&gt;&gt; is) that vends different properties for different representations,<br>&gt;&gt;&gt; it&#39;s reasonable to have a property that&#39;s explicitly intended to be<br>&gt;&gt;&gt; a human-readable description of the function and therefore suitable<br>&gt;&gt;&gt; for letting the description be overridden. But in that case, I&#39;d<br>&gt;&gt;&gt; suggest adding an @attribute to override the human-readable name<br>&gt;&gt;&gt; for the function instead of using a #directive. Two reasons why:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. It&#39;s reasonable to expect that the description of the function<br>&gt;&gt;&gt; remains constant for the entire function, which means it shouldn&#39;t<br>&gt;&gt;&gt; be possible to change the function description halfway through the<br>&gt;&gt;&gt; function, and<br>&gt;&gt;&gt; 2. Unlike file/line, the function context is a stack, and when the<br>&gt;&gt;&gt; function ends, the parent context takes over (e.g. if you have<br>&gt;&gt;&gt; nested functions or closures in a function). And allowing<br>&gt;&gt;&gt; #set-style directives to override the function description seems<br>&gt;&gt;&gt; like it would be confusing; does it replace the current info, or<br>&gt;&gt;&gt; push new info that has to be popped by another directive, or what?<br>&gt;&gt;&gt; Restricting this kind of overriding to an @attribute on the<br>&gt;&gt;&gt; function declaration eliminates this confusion.<br>&gt;&gt; <br>&gt;&gt; I agree, and I’d add one more point: you didn’t mention a use case.<br>&gt;&gt; <br>&gt;&gt; The existing #line (and I tend to agree with Kevin’s upthread<br>&gt;&gt; commentary about #setline) feature exists for a very specific<br>&gt;&gt; purpose: it is generated by source generation tools (e.g. gyb), and<br>&gt;&gt; they are designed to change how compiler diagnostics and *debug<br>&gt;&gt; information* are emitted.  Changing the function/symbol on the<br>&gt;&gt; debugger isn’t something that is obviously good, because the<br>&gt;&gt; debugger has a structured notion of the current frame which is a<br>&gt;&gt; highly symbolic AST representation of the function.  A text string<br>&gt;&gt; is probably not sufficient, and may not be necessary for all cases.<br>&gt;&gt; The important point though is that any discussion about adding it<br>&gt;&gt; should be motivated by a concrete use-case, and what problem is<br>&gt;&gt; being solved.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February  8, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; +1 for the idea, but...<br>&gt; <br>&gt; I don&#39;t think we should make this change without also making the feature<br>&gt; useful for things like gyb, which has to use its own home-brew line<br>&gt; directive machinery because #line is AFAIK currently useless for any<br>&gt; known application.  The way it currently works you can only put the<br>&gt; directive at grammatical boundaries in the program where #if would also<br>&gt; work.  For #if this is a feature, but for #resetfilecontext it&#39;s a bug.<br>&gt; <br>&gt; Isn&#39;t it the case that making this feature useful would require a lot<br>&gt; more than the simple syntactic shuffle being proposed here?<br></p><p>If so, I&#39;ll put it on my &quot;defer&quot; list. Let me know one way or the other.<br></p><p>Basically I have a bunch of dangling to-do&#39;s left over from SE-0028 and I&#39;d like to get them closed out.<br></p><p>-- E, who does not multitask gladly or well<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160208/4b93da98/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February  9, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; I don&#39;t think we should make this change without also making the feature<br>&gt; useful for things like gyb, which has to use its own home-brew line<br>&gt; directive machinery because #line is AFAIK currently useless for any<br>&gt; known application.  The way it currently works you can only put the<br>&gt; directive at grammatical boundaries in the program where #if would also<br>&gt; work.  For #if this is a feature, but for #resetfilecontext it&#39;s a bug.<br></p><p>Okay. Alternative syntax:<br></p><p>	/// - Source: &lt;line&gt; &lt;filename&gt;<br></p><p>or<br></p><p>	/** - Source: &lt;line&gt; &lt;filename&gt; */<br></p><p>In other words, make it a doc comment. Comments can go almost anywhere, and we already parse doc comments to extract documentation. Hell, in some cases, we might even be able to usefully set a column number with the inline comment syntax.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>February 11, 2016 at 01:00:00pm</p></header><div class="content"><p>On Feb 8, 2016, at 10:45 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; A more flexible grammar was suggested, however, as Kevin Ballard<br>&gt;&gt; pointed out, &quot;This feature isn&#39;t something end users are going to<br>&gt;&gt; use. And it&#39;s not something that will ever reasonably apply to<br>&gt;&gt; anything except #file and #line. This feature is only ever intended to<br>&gt;&gt; be used by tools that auto-generate source files. The most important<br>&gt;&gt; concerns here really should just be that whatever we use is trivial to<br>&gt;&gt; generate correctly by even the simplest of tools and is readable. And<br>&gt;&gt; since this won&#39;t ever apply to anything beyond #file and #line,<br>&gt;&gt; there&#39;s no need to try to generalize this feature at all.&quot;<br>&gt; <br>&gt; +1 for the idea, but...<br>&gt; <br>&gt; I don&#39;t think we should make this change without also making the feature<br>&gt; useful for things like gyb, which has to use its own home-brew line<br>&gt; directive machinery because #line is AFAIK currently useless for any<br>&gt; known application.  The way it currently works you can only put the<br>&gt; directive at grammatical boundaries in the program where #if would also<br>&gt; work.  For #if this is a feature, but for #resetfilecontext it&#39;s a bug.<br>&gt; <br>&gt; Isn&#39;t it the case that making this feature useful would require a lot<br>&gt; more than the simple syntactic shuffle being proposed here?<br></p><p>I completely disagree with this approach.  Making the existing feature “more useful” is orthogonal from repainting it.  Getting the paint right is a high priority for Swift 3, but making it “more useful” is low priority.<br></p><p>-Chris<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
