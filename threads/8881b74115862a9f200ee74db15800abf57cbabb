<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4ca02c0ca5c5d6a28bc48eebb3b000c7?s=50"></div><header><strong>[Design Question] Metaprogramming as a non-goal</strong> from <string>Michael Henson</string> &lt;mikehenson at gmail.com&gt;<p>January 23, 2016 at 11:00:00pm</p></header><div class="content"><p>In the swift/docs/Generics.rst documentation, I see:<br></p><p>&quot;<br>As important as the goals of a feature are the explicit non-goals, which we<br>don&#39;t want<br>or don&#39;t need to support:<br>* Compile-time &quot;metaprogramming&quot; in any form<br>* Expression-template tricks a la Boost.Spirit, POOMA<br>&quot;<br></p><p>What kinds of things count as compile-time metaprogramming? I&#39;ve been<br>tinkering with some ideas related to the type system and having a more<br>specific description here might help me pare many / most / all of them down.<br></p><p>Mike<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160123/8881babb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Design Question] Metaprogramming as a non-goal</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>January 24, 2016 at 01:00:00am</p></header><div class="content"><p>I&#39;d guess the point is that the generics system isn&#39;t meant to force the<br>compiler to perform the sorts of things C++&#39;s (Turing-complete) template<br>system can:<br></p><p>    template&lt;size_t... F&gt;<br>    struct Fibonacci { };<br></p><p>    // API<br>    template&lt;size_t n&gt;<br>    struct Fibonacci&lt;n&gt; {<br>        static constexpr size_t value = Fibonacci&lt;n, 1, 0&gt;::value;<br>    };<br></p><p>    // Recursive implementation<br>    template&lt;size_t n, size_t Fn, size_t Fm&gt;<br>    struct Fibonacci&lt;n, Fn, Fm&gt; {<br>        static constexpr size_t value = Fibonacci&lt;n-1, Fn+Fm, Fn&gt;::value;<br>    };<br></p><p>    // Base case<br>    template&lt;size_t Fn, size_t Fm&gt;<br>    struct Fibonacci&lt;0, Fn, Fm&gt; {<br>        static constexpr size_t value = Fn;<br>    };<br></p><p>    int main() {<br>        printf(&quot;F(200): %zu\n&quot;, Fibonacci&lt;200&gt;::value);<br>        return 0;<br>    }<br></p><p>Jacob<br></p><p>On Sat, Jan 23, 2016 at 11:17 PM, Michael Henson via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; In the swift/docs/Generics.rst documentation, I see:<br>&gt;<br>&gt; &quot;<br>&gt; As important as the goals of a feature are the explicit non-goals, which<br>&gt; we don&#39;t want<br>&gt; or don&#39;t need to support:<br>&gt; * Compile-time &quot;metaprogramming&quot; in any form<br>&gt; * Expression-template tricks a la Boost.Spirit, POOMA<br>&gt; &quot;<br>&gt;<br>&gt; What kinds of things count as compile-time metaprogramming? I&#39;ve been<br>&gt; tinkering with some ideas related to the type system and having a more<br>&gt; specific description here might help me pare many / most / all of them down.<br>&gt;<br>&gt; Mike<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160124/fec6da93/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Design Question] Metaprogramming as a non-goal</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>January 24, 2016 at 10:00:00am</p></header><div class="content"><p>Unfortunately that’s exactly what would make a library with typed units possible (see thread about „Epic: Typesafe calculations“).<br></p><p>-Thorsten<br></p><p><br>&gt; Am 24.01.2016 um 10:01 schrieb Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; I&#39;d guess the point is that the generics system isn&#39;t meant to force the compiler to perform the sorts of things C++&#39;s (Turing-complete) template system can:<br>&gt; <br>&gt;     template&lt;size_t... F&gt;<br>&gt;     struct Fibonacci { };<br>&gt; <br>&gt;     // API<br>&gt;     template&lt;size_t n&gt;<br>&gt;     struct Fibonacci&lt;n&gt; {<br>&gt;         static constexpr size_t value = Fibonacci&lt;n, 1, 0&gt;::value;<br>&gt;     };<br>&gt; <br>&gt;     // Recursive implementation<br>&gt;     template&lt;size_t n, size_t Fn, size_t Fm&gt;<br>&gt;     struct Fibonacci&lt;n, Fn, Fm&gt; {<br>&gt;         static constexpr size_t value = Fibonacci&lt;n-1, Fn+Fm, Fn&gt;::value;<br>&gt;     };<br>&gt; <br>&gt;     // Base case<br>&gt;     template&lt;size_t Fn, size_t Fm&gt;<br>&gt;     struct Fibonacci&lt;0, Fn, Fm&gt; {<br>&gt;         static constexpr size_t value = Fn;<br>&gt;     };<br>&gt; <br>&gt;     int main() {<br>&gt;         printf(&quot;F(200): %zu\n&quot;, Fibonacci&lt;200&gt;::value);<br>&gt;         return 0;<br>&gt;     }<br>&gt; <br>&gt; Jacob<br>&gt; <br>&gt; On Sat, Jan 23, 2016 at 11:17 PM, Michael Henson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; In the swift/docs/Generics.rst documentation, I see:<br>&gt; <br>&gt; &quot;<br>&gt; As important as the goals of a feature are the explicit non-goals, which we don&#39;t want<br>&gt; or don&#39;t need to support:<br>&gt; * Compile-time &quot;metaprogramming&quot; in any form<br>&gt; * Expression-template tricks a la Boost.Spirit, POOMA<br>&gt; &quot;<br>&gt; <br>&gt; What kinds of things count as compile-time metaprogramming? I&#39;ve been tinkering with some ideas related to the type system and having a more specific description here might help me pare many / most / all of them down.<br>&gt; <br>&gt; Mike<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160124/914af74e/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
