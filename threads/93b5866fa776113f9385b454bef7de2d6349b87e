<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2f61fa79919d9b1dc352f4ed16724f03?s=50"></div><header><strong>LazySequenceType: make prefix return a lazy collection</strong> from <string>Mark Aron Szulyovszky</string> &lt;mark.szulyovszky at gmail.com&gt;<p>January  4, 2016 at 01:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>I came across hit issue while chaining filter() and prefix() on lazy<br>sequences:<br>https://bugs.swift.org/browse/SR-461<br></p><p>And started wondering if it would be more consistent if<br>lazy.filter().prefix() returned a custom<br>LazySequenceType&lt;Generator.Element&gt; instead of<br>Slice&lt;LazyFilterCollection&lt;Range&lt;Generator.Element&gt;&gt;&gt;.<br></p><p>That way lazy.filter().prefix() could be used to chain *pure lazy<br>operations*, which can be actually quite useful in some cases.<br></p><p>I understand that this has implications, and it would make prefix() less<br>consistent in terms of return type, but it would eliminate confusion like<br>SR-461 &lt;https://bugs.swift.org/browse/SR-461&gt;.<br>Also, this wouldn&#39;t be a much different than how how lazy.filter() is<br>implemented, since it also returns a custom LazySequenceType instead of<br>SequenceType.<br></p><p>Has this been considered before? Would there be any cases where this would<br>create unintended side effects?<br>As far as I see, it wouldn&#39;t change the meaning of prefix(), only would it<br>extend its usefulness.<br></p><p>I submitted a PR to the SwiftSequence library that demonstrates the<br>implementation of this:<br>https://github.com/itchingpixels/SwiftSequence/commit/26101e5aec6c266048bbad4db7b44b9c453f07ca<br></p><p>And I&#39;m happy to contribute to contribute it to stdlib if people find it<br>useful.<br></p><p>Thanks a lot!<br></p><p>Mark<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160104/93b5b87e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>LazySequenceType: make prefix return a lazy collection</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>January  4, 2016 at 02:00:00pm</p></header><div class="content"><p>Hi Mark,<br></p><p>I’m going to loop in the swift-dev list for this question.<br></p><p>- Tony<br></p><p>&gt; On Jan 4, 2016, at 5:15 AM, Mark Aron Szulyovszky via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; I came across hit issue while chaining filter() and prefix() on lazy sequences:<br>&gt; https://bugs.swift.org/browse/SR-461 &lt;https://bugs.swift.org/browse/SR-461&gt;<br>&gt; <br>&gt; And started wondering if it would be more consistent if lazy.filter().prefix() returned a custom LazySequenceType&lt;Generator.Element&gt; instead of Slice&lt;LazyFilterCollection&lt;Range&lt;Generator.Element&gt;&gt;&gt;.<br>&gt; <br>&gt; That way lazy.filter().prefix() could be used to chain pure lazy operations, which can be actually quite useful in some cases.<br>&gt; <br>&gt; I understand that this has implications, and it would make prefix() less consistent in terms of return type, but it would eliminate confusion like SR-461 &lt;https://bugs.swift.org/browse/SR-461&gt;.<br>&gt; Also, this wouldn&#39;t be a much different than how how lazy.filter() is implemented, since it also returns a custom LazySequenceType instead of SequenceType.<br>&gt; <br>&gt; Has this been considered before? Would there be any cases where this would create unintended side effects?<br>&gt; As far as I see, it wouldn&#39;t change the meaning of prefix(), only would it extend its usefulness. <br>&gt; <br>&gt; I submitted a PR to the SwiftSequence library that demonstrates the implementation of this: https://github.com/itchingpixels/SwiftSequence/commit/26101e5aec6c266048bbad4db7b44b9c453f07ca &lt;https://github.com/itchingpixels/SwiftSequence/commit/26101e5aec6c266048bbad4db7b44b9c453f07ca&gt;<br>&gt; <br>&gt; And I&#39;m happy to contribute to contribute it to stdlib if people find it useful.<br>&gt; <br>&gt; Thanks a lot!<br>&gt; <br>&gt; Mark<br>&gt;  _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160104/9c72da08/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[swift-corelibs-dev] LazySequenceType: make prefix return a lazy collection</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>February 13, 2016 at 09:00:00pm</p></header><div class="content"><p>On Mon, Jan 4, 2016 at 2:21 PM, Tony Parker via swift-dev &lt;<br>swift-dev at swift.org&gt; wrote:<br></p><p>&gt; Hi Mark,<br>&gt;<br>&gt; I’m going to loop in the swift-dev list for this question.<br>&gt;<br></p><p>Thanks, Tony!<br></p><p><br>&gt; On Jan 4, 2016, at 5:15 AM, Mark Aron Szulyovszky via swift-corelibs-dev &lt;<br>&gt; swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;<br>&gt; Hi,<br>&gt;<br>&gt; I came across hit issue while chaining filter() and prefix() on lazy<br>&gt; sequences:<br>&gt; https://bugs.swift.org/browse/SR-461<br>&gt;<br>&gt; And started wondering if it would be more consistent if<br>&gt; lazy.filter().prefix() returned a custom<br>&gt; LazySequenceType&lt;Generator.Element&gt; instead of<br>&gt; Slice&lt;LazyFilterCollection&lt;Range&lt;Generator.Element&gt;&gt;&gt;.<br>&gt;<br>&gt; That way lazy.filter().prefix() could be used to chain *pure lazy<br>&gt; operations*, which can be actually quite useful in some cases.<br>&gt;<br>&gt;<br>Hi Mark,<br></p><p>I think this would make a lot of sense, since the lazy implementation of<br>prefix() would allow the operation to be performed in O(1) instead of<br>triggering the whole calculation chain.  But for random-access collections,<br>keeping the current implementation would be best, I think.  Would you mind<br>sending a quick summary of the proposed new API to swift-evolution?  That<br>mailing list is the preferred place for such discussions.  You can read<br>more about it here:<br>https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>The ambiguity issue that you are seeing, I think, should be viewed as a<br>type checker issue and should be solved separately.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160213/6cd23c41/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
