<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>[Idea] Use optionals for non-optional parameters</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>August 15, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; &gt; On 15 Aug 2016, at 08:02, Justin Jia via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; Hi!<br>&gt; &gt; <br>&gt; &gt; I don’t know if this has came up before. I tried to search though the mailing list but didn’t find any related threads.<br>&gt; &gt; <br>&gt; &gt; This is purely a syntactic thing (which I know it’s the lowest priority for Swift 4), but I think it’s an important one.<br>&gt; &gt; <br>&gt; &gt; Let’s say we have a struct with a function:<br>&gt; &gt; <br>&gt; &gt; ```<br>&gt; &gt; struct Foo {<br>&gt; &gt; func bar(x: Int)<br>&gt; &gt; }<br>&gt; &gt; ```<br>&gt; &gt; <br>&gt; &gt; We can use optionals:<br>&gt; &gt; <br>&gt; &gt; ```<br>&gt; &gt; let foo: Foo? = nil<br>&gt; &gt; let x = 1<br>&gt; &gt; foo!.bar(x: x) // Able to compile, but will cause runtime error<br>&gt; &gt; foo?.bar(x: x) // Able to compile, and won&#39;t cause runtime error<br>&gt; &gt; ```<br>&gt; &gt; <br>&gt; &gt; However:<br>&gt; &gt; <br>&gt; &gt; ```<br>&gt; &gt; let foo = Foo()<br>&gt; &gt; let x: Int? = nil<br>&gt; &gt; foo.bar(x: x!) // Able to compile, but will cause runtime error<br>&gt; &gt; foo.bar(x: x?) // Won&#39;t compile<br>&gt; &gt; ```<br>&gt; &gt; <br>&gt; &gt; I propose that we should allow `foo.bar(x: x?)`, which should be equivalent to:<br>&gt; &gt; <br>&gt; &gt; ```<br>&gt; &gt; if let x = x {<br>&gt; &gt; foo.bar(x: x)<br>&gt; &gt; }<br>&gt; &gt; ```<br>&gt; &gt; <br>&gt; &gt; What do you think?<br>&gt; I like the intent behind this, but personally I think it&#39;s not clear enough. For me, putting the statement in a conditional as you&#39;ve shown is the better solution, as it&#39;s a lot clearer exactly what&#39;s going on. Putting a question mark on a variable makes it look like something specific to that variable, rather than preventing the entire statement from executing.<br></p><p>I get where you’re coming from, but how would people react if optional chaining wasn’t in the language yet and someone proposed it now? I know it’s not strictly the same thing, but it’s still a single question mark that prevents the whole statement from being executed. I think it would be met with a lot of resistance from people saying that being more explicit with `if let` is the way to go.<br></p><p>&gt; There may be some alternatives though, for example, what about a shorthand for the conditional like so:<br>&gt; <br>&gt; if let x? { foo.bar(x: x) }<br>&gt; if x? { foo.bar(x: x) } // even shorter?<br></p><p>The alternatives you’ve come up with would only work if foo.bar doesn’t return anything. If it does return something, and you want to assign it to a variable, you have to declare the variable beforehand and it just becomes ugly. It’s then probably a better idea to use map/flatmap:<br></p><p>x.flatMap { foo.bar(x: $0) }<br></p><p>But IMO that&#39;s not as clean as `foo.bar(x: x?)`. flatMap is so hidden to most people that they resort to things like<br></p><p>myDictionary[myOptionalString ?? “”]<br></p><p>assuming that no key is the empty string. People might also make function overloads that accept and return optionals, just to avoid nesting. I’m sure you’ve seen something like this before:<br></p><p>if limit == nil || number &lt; limit! { /* … */ }<br></p><p>There’s no great way to “fix” this. We can do<br></p><p>if limit.map({ number &lt; $0 }) { /* … */ }<br></p><p>or we can overload the &lt; operator for optionals to return Bool?, which we can use with<br></p><p>if (number &lt; limit) ?? true { /* … */ }<br></p><p>With the new sugar, we’d be able to do<br></p><p>if (number &lt; limit?) ?? true { /* … */ }<br></p><p>out of the box.<br></p><p>&gt; But in general, I think it&#39;s best to be explicit about the entire statement being optional, which the conditional does but a postfix on a variable doesn&#39;t to the same degree._______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Idea] Use optionals for non-optional parameters</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>August 15, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On 15 Aug 2016, at 13:44, Tim Vermeulen &lt;tvermeulen at me.com&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On 15 Aug 2016, at 08:02, Justin Jia via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt;&gt;&gt; Hi!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don’t know if this has came up before. I tried to search though the mailing list but didn’t find any related threads.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is purely a syntactic thing (which I know it’s the lowest priority for Swift 4), but I think it’s an important one.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Let’s say we have a struct with a function:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; struct Foo {<br>&gt;&gt;&gt; func bar(x: Int)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We can use optionals:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; let foo: Foo? = nil<br>&gt;&gt;&gt; let x = 1<br>&gt;&gt;&gt; foo!.bar(x: x) // Able to compile, but will cause runtime error<br>&gt;&gt;&gt; foo?.bar(x: x) // Able to compile, and won&#39;t cause runtime error<br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; However:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; let foo = Foo()<br>&gt;&gt;&gt; let x: Int? = nil<br>&gt;&gt;&gt; foo.bar(x: x!) // Able to compile, but will cause runtime error<br>&gt;&gt;&gt; foo.bar(x: x?) // Won&#39;t compile<br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I propose that we should allow `foo.bar(x: x?)`, which should be equivalent to:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; if let x = x {<br>&gt;&gt;&gt; foo.bar(x: x)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What do you think?<br>&gt;&gt; I like the intent behind this, but personally I think it&#39;s not clear enough. For me, putting the statement in a conditional as you&#39;ve shown is the better solution, as it&#39;s a lot clearer exactly what&#39;s going on. Putting a question mark on a variable makes it look like something specific to that variable, rather than preventing the entire statement from executing.<br>&gt; <br>&gt; I get where you’re coming from, but how would people react if optional chaining wasn’t in the language yet and someone proposed it now? I know it’s not strictly the same thing, but it’s still a single question mark that prevents the whole statement from being executed. I think it would be met with a lot of resistance from people saying that being more explicit with `if let` is the way to go.<br></p><p>True, but with optional chaining the position of the question mark makes it a lot more clear where it stops, whereas in this proposal the question mark seems a bit less intuitive since it&#39;s within the parenthesis yet affecting the statement outside of it.<br></p><p>&gt;&gt; There may be some alternatives though, for example, what about a shorthand for the conditional like so:<br>&gt;&gt; <br>&gt;&gt; if let x? { foo.bar(x: x) }<br>&gt;&gt; if x? { foo.bar(x: x) } // even shorter?<br>&gt; <br>&gt; The alternatives you’ve come up with would only work if foo.bar doesn’t return anything. If it does return something, and you want to assign it to a variable, you have to declare the variable beforehand and it just becomes ugly. It’s then probably a better idea to use map/flatmap:<br></p><p>Hmm, what about something involving the where keyword? Something like:<br></p><p>let value = foo.bar(x: x) where x?<br></p><p>Some people have queried the ability to use where in assignments before, as another way to have a statement be nil if a condition isn&#39;t met, but in this case the condition is that x is unwrapped (thus valid for the call). This basically lets you use it like a &quot;retroactive&quot; conditional, it&#39;d be nice to get the same x? behaviour on for loops anyway (letting you unwrap values that way, and maybe test them too).<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160815/67fd0101/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Idea] Use optionals for non-optional parameters</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>August 15, 2016 at 02:00:00pm</p></header><div class="content"><p>On Mon, Aug 15, 2016 at 1:57 PM, Haravikk via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On 15 Aug 2016, at 13:44, Tim Vermeulen &lt;tvermeulen at me.com&gt; wrote:<br>&gt;<br>&gt; On 15 Aug 2016, at 08:02, Justin Jia via swift-evolution&lt;swift-<br>&gt; evolution at swift.org(mailto:swift-evolution at swift.org<br>&gt; &lt;swift-evolution at swift.org&gt;)&gt;wrote:<br>&gt; Hi!<br>&gt;<br>&gt; I don’t know if this has came up before. I tried to search though the<br>&gt; mailing list but didn’t find any related threads.<br>&gt;<br>&gt; This is purely a syntactic thing (which I know it’s the lowest priority<br>&gt; for Swift 4), but I think it’s an important one.<br>&gt;<br>&gt; Let’s say we have a struct with a function:<br>&gt;<br>&gt; ```<br>&gt; struct Foo {<br>&gt; func bar(x: Int)<br>&gt; }<br>&gt; ```<br>&gt;<br>&gt; We can use optionals:<br>&gt;<br>&gt; ```<br>&gt; let foo: Foo? = nil<br>&gt; let x = 1<br>&gt; foo!.bar(x: x) // Able to compile, but will cause runtime error<br>&gt; foo?.bar(x: x) // Able to compile, and won&#39;t cause runtime error<br>&gt; ```<br>&gt;<br>&gt; However:<br>&gt;<br>&gt; ```<br>&gt; let foo = Foo()<br>&gt; let x: Int? = nil<br>&gt; foo.bar(x: x!) // Able to compile, but will cause runtime error<br>&gt; foo.bar(x: x?) // Won&#39;t compile<br>&gt; ```<br>&gt;<br>&gt; I propose that we should allow `foo.bar(x: x?)`, which should be<br>&gt; equivalent to:<br>&gt;<br>&gt; ```<br>&gt; if let x = x {<br>&gt; foo.bar(x: x)<br>&gt; }<br>&gt; ```<br>&gt;<br>&gt; What do you think?<br>&gt;<br>&gt; I like the intent behind this, but personally I think it&#39;s not clear<br>&gt; enough. For me, putting the statement in a conditional as you&#39;ve shown is<br>&gt; the better solution, as it&#39;s a lot clearer exactly what&#39;s going on. Putting<br>&gt; a question mark on a variable makes it look like something specific to that<br>&gt; variable, rather than preventing the entire statement from executing.<br>&gt;<br>&gt;<br>&gt; I get where you’re coming from, but how would people react if optional<br>&gt; chaining wasn’t in the language yet and someone proposed it now? I know<br>&gt; it’s not strictly the same thing, but it’s still a single question mark<br>&gt; that prevents the whole statement from being executed. I think it would be<br>&gt; met with a lot of resistance from people saying that being more explicit<br>&gt; with `if let` is the way to go.<br>&gt;<br>&gt;<br>&gt; True, but with optional chaining the position of the question mark makes<br>&gt; it a lot more clear where it stops, whereas in this proposal the question<br>&gt; mark seems a bit less intuitive since it&#39;s within the parenthesis yet<br>&gt; affecting the statement outside of it.<br>&gt;<br>&gt; There may be some alternatives though, for example, what about a shorthand<br>&gt; for the conditional like so:<br>&gt;<br>&gt; if let x? { foo.bar(x: x) }<br>&gt; if x? { foo.bar(x: x) } // even shorter?<br>&gt;<br>&gt;<br>&gt; The alternatives you’ve come up with would only work if foo.bar doesn’t<br>&gt; return anything. If it does return something, and you want to assign it to<br>&gt; a variable, you have to declare the variable beforehand and it just becomes<br>&gt; ugly. It’s then probably a better idea to use map/flatmap:<br>&gt;<br>&gt;<br>&gt; Hmm, what about something involving the where keyword? Something like:<br>&gt;<br>&gt; let value = foo.bar(x: x) where x?<br>&gt;<br>&gt;<br>&gt; Some people have queried the ability to use where in assignments before,<br>&gt; as another way to have a statement be nil if a condition isn&#39;t met, but in<br>&gt; this case the condition is that x is unwrapped (thus valid for the call).<br>&gt; This basically lets you use it like a &quot;retroactive&quot; conditional, it&#39;d be<br>&gt; nice to get the same x? behaviour on for loops anyway (letting you unwrap<br>&gt; values that way, and maybe test them too).<br>&gt;<br></p><p>`let value = (x == nil) ? nil : foo.bar(x: x)` isn&#39;t so bad, is it? You<br>could even write a custom operator to sugar it.<br></p><p><br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160815/7bcafef9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>[Idea] Use optionals for non-optional parameters</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>August 15, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On 15 Aug 2016, at 21:27, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Mon, Aug 15, 2016 at 1:57 PM, Haravikk via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On 15 Aug 2016, at 13:44, Tim Vermeulen &lt;tvermeulen at me.com &lt;mailto:tvermeulen at me.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On 15 Aug 2016, at 08:02, Justin Jia via swift-evolution&lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;)&gt;wrote:<br>&gt;&gt;&gt;&gt; Hi!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don’t know if this has came up before. I tried to search though the mailing list but didn’t find any related threads.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This is purely a syntactic thing (which I know it’s the lowest priority for Swift 4), but I think it’s an important one.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Let’s say we have a struct with a function:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; struct Foo {<br>&gt;&gt;&gt;&gt; func bar(x: Int)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; We can use optionals:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; let foo: Foo? = nil<br>&gt;&gt;&gt;&gt; let x = 1<br>&gt;&gt;&gt;&gt; foo!.bar(x: x) // Able to compile, but will cause runtime error<br>&gt;&gt;&gt;&gt; foo?.bar(x: x) // Able to compile, and won&#39;t cause runtime error<br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; However:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; let foo = Foo()<br>&gt;&gt;&gt;&gt; let x: Int? = nil<br>&gt;&gt;&gt;&gt; foo.bar(x: x!) // Able to compile, but will cause runtime error<br>&gt;&gt;&gt;&gt; foo.bar(x: x?) // Won&#39;t compile<br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I propose that we should allow `foo.bar(x: x?)`, which should be equivalent to:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; if let x = x {<br>&gt;&gt;&gt;&gt; foo.bar(x: x)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What do you think?<br>&gt;&gt;&gt; I like the intent behind this, but personally I think it&#39;s not clear enough. For me, putting the statement in a conditional as you&#39;ve shown is the better solution, as it&#39;s a lot clearer exactly what&#39;s going on. Putting a question mark on a variable makes it look like something specific to that variable, rather than preventing the entire statement from executing.<br>&gt;&gt; <br>&gt;&gt; I get where you’re coming from, but how would people react if optional chaining wasn’t in the language yet and someone proposed it now? I know it’s not strictly the same thing, but it’s still a single question mark that prevents the whole statement from being executed. I think it would be met with a lot of resistance from people saying that being more explicit with `if let` is the way to go.<br>&gt; <br>&gt; True, but with optional chaining the position of the question mark makes it a lot more clear where it stops, whereas in this proposal the question mark seems a bit less intuitive since it&#39;s within the parenthesis yet affecting the statement outside of it.<br>&gt; <br>&gt;&gt;&gt; There may be some alternatives though, for example, what about a shorthand for the conditional like so:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if let x? { foo.bar(x: x) }<br>&gt;&gt;&gt; if x? { foo.bar(x: x) } // even shorter?<br>&gt;&gt; <br>&gt;&gt; The alternatives you’ve come up with would only work if foo.bar doesn’t return anything. If it does return something, and you want to assign it to a variable, you have to declare the variable beforehand and it just becomes ugly. It’s then probably a better idea to use map/flatmap:<br>&gt; <br>&gt; Hmm, what about something involving the where keyword? Something like:<br>&gt; <br>&gt; let value = foo.bar(x: x) where x?<br>&gt; <br>&gt; Some people have queried the ability to use where in assignments before, as another way to have a statement be nil if a condition isn&#39;t met, but in this case the condition is that x is unwrapped (thus valid for the call). This basically lets you use it like a &quot;retroactive&quot; conditional, it&#39;d be nice to get the same x? behaviour on for loops anyway (letting you unwrap values that way, and maybe test them too).<br>&gt; <br>&gt; `let value = (x == nil) ? nil : foo.bar(x: x)` isn&#39;t so bad, is it?<br></p><p>In my opinion, it is. And you’d even need to write `foo.bar(x: x!)`, right?<br></p><p>&gt; You could even write a custom operator to sugar it.<br>&gt;  <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160815/e058a4c5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Idea] Use optionals for non-optional parameters</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>August 15, 2016 at 02:00:00pm</p></header><div class="content"><p>On Mon, Aug 15, 2016 at 2:29 PM, Tim Vermeulen &lt;tvermeulen at me.com&gt; wrote:<br></p><p>&gt;<br>&gt; On 15 Aug 2016, at 21:27, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; On Mon, Aug 15, 2016 at 1:57 PM, Haravikk via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On 15 Aug 2016, at 13:44, Tim Vermeulen &lt;tvermeulen at me.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On 15 Aug 2016, at 08:02, Justin Jia via swift-evolution&lt;swift-evolutio<br>&gt;&gt; n at swift.org(mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; )&gt;wrote:<br>&gt;&gt; Hi!<br>&gt;&gt;<br>&gt;&gt; I don’t know if this has came up before. I tried to search though the<br>&gt;&gt; mailing list but didn’t find any related threads.<br>&gt;&gt;<br>&gt;&gt; This is purely a syntactic thing (which I know it’s the lowest priority<br>&gt;&gt; for Swift 4), but I think it’s an important one.<br>&gt;&gt;<br>&gt;&gt; Let’s say we have a struct with a function:<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt; struct Foo {<br>&gt;&gt; func bar(x: Int)<br>&gt;&gt; }<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; We can use optionals:<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt; let foo: Foo? = nil<br>&gt;&gt; let x = 1<br>&gt;&gt; foo!.bar(x: x) // Able to compile, but will cause runtime error<br>&gt;&gt; foo?.bar(x: x) // Able to compile, and won&#39;t cause runtime error<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; However:<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt; let foo = Foo()<br>&gt;&gt; let x: Int? = nil<br>&gt;&gt; foo.bar(x: x!) // Able to compile, but will cause runtime error<br>&gt;&gt; foo.bar(x: x?) // Won&#39;t compile<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; I propose that we should allow `foo.bar(x: x?)`, which should be<br>&gt;&gt; equivalent to:<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt; if let x = x {<br>&gt;&gt; foo.bar(x: x)<br>&gt;&gt; }<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; What do you think?<br>&gt;&gt;<br>&gt;&gt; I like the intent behind this, but personally I think it&#39;s not clear<br>&gt;&gt; enough. For me, putting the statement in a conditional as you&#39;ve shown is<br>&gt;&gt; the better solution, as it&#39;s a lot clearer exactly what&#39;s going on. Putting<br>&gt;&gt; a question mark on a variable makes it look like something specific to that<br>&gt;&gt; variable, rather than preventing the entire statement from executing.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I get where you’re coming from, but how would people react if optional<br>&gt;&gt; chaining wasn’t in the language yet and someone proposed it now? I know<br>&gt;&gt; it’s not strictly the same thing, but it’s still a single question mark<br>&gt;&gt; that prevents the whole statement from being executed. I think it would be<br>&gt;&gt; met with a lot of resistance from people saying that being more explicit<br>&gt;&gt; with `if let` is the way to go.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; True, but with optional chaining the position of the question mark makes<br>&gt;&gt; it a lot more clear where it stops, whereas in this proposal the question<br>&gt;&gt; mark seems a bit less intuitive since it&#39;s within the parenthesis yet<br>&gt;&gt; affecting the statement outside of it.<br>&gt;&gt;<br>&gt;&gt; There may be some alternatives though, for example, what about a<br>&gt;&gt; shorthand for the conditional like so:<br>&gt;&gt;<br>&gt;&gt; if let x? { foo.bar(x: x) }<br>&gt;&gt; if x? { foo.bar(x: x) } // even shorter?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; The alternatives you’ve come up with would only work if foo.bar doesn’t<br>&gt;&gt; return anything. If it does return something, and you want to assign it to<br>&gt;&gt; a variable, you have to declare the variable beforehand and it just becomes<br>&gt;&gt; ugly. It’s then probably a better idea to use map/flatmap:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Hmm, what about something involving the where keyword? Something like:<br>&gt;&gt;<br>&gt;&gt; let value = foo.bar(x: x) where x?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Some people have queried the ability to use where in assignments before,<br>&gt;&gt; as another way to have a statement be nil if a condition isn&#39;t met, but in<br>&gt;&gt; this case the condition is that x is unwrapped (thus valid for the call).<br>&gt;&gt; This basically lets you use it like a &quot;retroactive&quot; conditional, it&#39;d be<br>&gt;&gt; nice to get the same x? behaviour on for loops anyway (letting you unwrap<br>&gt;&gt; values that way, and maybe test them too).<br>&gt;&gt;<br>&gt;<br>&gt; `let value = (x == nil) ? nil : foo.bar(x: x)` isn&#39;t so bad, is it?<br>&gt;<br>&gt;<br>&gt; In my opinion, it is.<br>&gt;<br></p><p>It certainly isn&#39;t much longer, and its meaning is clear to anyone with a<br>basic grasp of Swift. What makes it bad, in your opinion?<br></p><p><br>&gt; And you’d even need to write `foo.bar(x: x!)`, right?<br>&gt;<br></p><p>You would. That&#39;s my bad.<br></p><p>&gt; You could even write a custom operator to sugar it.<br>&gt;<br>&gt;<br>```<br>infix operator ??? : NilCoalescingPrecedence<br>func ??? &lt;T&gt;(lhs: [Any?], rhs: @autoclosure () -&gt; T) -&gt; T? {<br>    for l in lhs {<br>        if l == nil { return nil }<br>    }<br>    return rhs()<br>}<br></p><p>var x: Int?<br>var y: Int?<br></p><p>(x, y) = (nil, nil)<br></p><p>[x, y] ??? x! * y!<br>// nil<br></p><p>(x, y) = (1, 2)<br></p><p>[x, y] ??? x! * y!<br>// Optional(2)<br>```<br></p><p><br>&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160815/43ba9834/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Idea] Use optionals for non-optional parameters</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>August 16, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On 15 Aug 2016, at 20:39, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Mon, Aug 15, 2016 at 2:29 PM, Tim Vermeulen &lt;tvermeulen at me.com &lt;mailto:tvermeulen at me.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On 15 Aug 2016, at 21:27, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Mon, Aug 15, 2016 at 1:57 PM, Haravikk via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On 15 Aug 2016, at 13:44, Tim Vermeulen &lt;tvermeulen at me.com &lt;mailto:tvermeulen at me.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 15 Aug 2016, at 08:02, Justin Jia via swift-evolution&lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;)&gt;wrote:<br>&gt;&gt;&gt;&gt;&gt; Hi!<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I don’t know if this has came up before. I tried to search though the mailing list but didn’t find any related threads.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This is purely a syntactic thing (which I know it’s the lowest priority for Swift 4), but I think it’s an important one.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Let’s say we have a struct with a function:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;&gt; struct Foo {<br>&gt;&gt;&gt;&gt;&gt; func bar(x: Int)<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; We can use optionals:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;&gt; let foo: Foo? = nil<br>&gt;&gt;&gt;&gt;&gt; let x = 1<br>&gt;&gt;&gt;&gt;&gt; foo!.bar(x: x) // Able to compile, but will cause runtime error<br>&gt;&gt;&gt;&gt;&gt; foo?.bar(x: x) // Able to compile, and won&#39;t cause runtime error<br>&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; However:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;&gt; let foo = Foo()<br>&gt;&gt;&gt;&gt;&gt; let x: Int? = nil<br>&gt;&gt;&gt;&gt;&gt; foo.bar(x: x!) // Able to compile, but will cause runtime error<br>&gt;&gt;&gt;&gt;&gt; foo.bar(x: x?) // Won&#39;t compile<br>&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I propose that we should allow `foo.bar(x: x?)`, which should be equivalent to:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;&gt; if let x = x {<br>&gt;&gt;&gt;&gt;&gt; foo.bar(x: x)<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; What do you think?<br>&gt;&gt;&gt;&gt; I like the intent behind this, but personally I think it&#39;s not clear enough. For me, putting the statement in a conditional as you&#39;ve shown is the better solution, as it&#39;s a lot clearer exactly what&#39;s going on. Putting a question mark on a variable makes it look like something specific to that variable, rather than preventing the entire statement from executing.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I get where you’re coming from, but how would people react if optional chaining wasn’t in the language yet and someone proposed it now? I know it’s not strictly the same thing, but it’s still a single question mark that prevents the whole statement from being executed. I think it would be met with a lot of resistance from people saying that being more explicit with `if let` is the way to go.<br>&gt;&gt; <br>&gt;&gt; True, but with optional chaining the position of the question mark makes it a lot more clear where it stops, whereas in this proposal the question mark seems a bit less intuitive since it&#39;s within the parenthesis yet affecting the statement outside of it.<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; There may be some alternatives though, for example, what about a shorthand for the conditional like so:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; if let x? { foo.bar(x: x) }<br>&gt;&gt;&gt;&gt; if x? { foo.bar(x: x) } // even shorter?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The alternatives you’ve come up with would only work if foo.bar doesn’t return anything. If it does return something, and you want to assign it to a variable, you have to declare the variable beforehand and it just becomes ugly. It’s then probably a better idea to use map/flatmap:<br>&gt;&gt; <br>&gt;&gt; Hmm, what about something involving the where keyword? Something like:<br>&gt;&gt; <br>&gt;&gt; let value = foo.bar(x: x) where x?<br>&gt;&gt; <br>&gt;&gt; Some people have queried the ability to use where in assignments before, as another way to have a statement be nil if a condition isn&#39;t met, but in this case the condition is that x is unwrapped (thus valid for the call). This basically lets you use it like a &quot;retroactive&quot; conditional, it&#39;d be nice to get the same x? behaviour on for loops anyway (letting you unwrap values that way, and maybe test them too).<br>&gt;&gt; <br>&gt;&gt; `let value = (x == nil) ? nil : foo.bar(x: x)` isn&#39;t so bad, is it?<br>&gt; <br>&gt; In my opinion, it is.<br>&gt; <br>&gt; It certainly isn&#39;t much longer, and its meaning is clear to anyone with a basic grasp of Swift. What makes it bad, in your opinion?<br>&gt;  <br>&gt; And you’d even need to write `foo.bar(x: x!)`, right?<br>&gt; <br>&gt; You would. That&#39;s my bad.<br></p><p>Forgot about the ternary conditional!<br>For the force unwrapping, that&#39;s something that could be avoided in future by type narrowing; just as we currently can&#39;t do:<br></p><p>	if value is String { value.somethingUniqueToString() } // Must cast first or use if let value = value as? String<br></p><p>Doing the same for optionality would allow force unwrapping to be removed in future; I find having to use force unwrapping when I know I don&#39;t need to annoying, but it&#39;s hardly much of an inconvenience to be sure of what&#39;s going on.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160816/3c4a92fe/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>[Idea] Use optionals for non-optional parameters</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>August 15, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Aug 15, 2016, at 2:27 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; `let value = (x == nil) ? nil : foo.bar(x: x)` isn&#39;t so bad, is it? You could even write a custom operator to sugar it.<br></p><p>It’s distasteful, due to the need to use the force-unwrap operator. In cases like this, I usually end up writing:<br></p><p>let value: Foo? = nil<br></p><p>if let x = x {<br>	value = foo.bar(x: x)<br>} else {<br>	value = nil<br>}<br></p><p>or:<br></p><p>let value: Foo? = {<br>	if let x = x {<br>		return foo.bar(x: x)<br>	} else {<br>		return nil<br>	}<br>}()<br></p><p>Both of which are unwieldy, but necessary to avoid the use of !.<br></p><p>I wouldn’t mind something like an overload on the ternary operator:<br></p><p>let value = x? ? foo.bar(x: x) : nil<br></p><p>in which a ? after the ternary condition indicates that it is an optional to be unwrapped for the positive condition.<br></p><p>Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160815/dcada7af/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>[Idea] Use optionals for non-optional parameters</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>August 15, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Aug 15, 2016, at 3:05 PM, Charles Srstka &lt;cocoadev at charlessoft.com&gt; wrote:<br>&gt; <br>&gt; let value: Foo? = nil<br></p><p>This line should have been just &#39;let value: Foo?&#39; .<br></p><p>(+1 on the proposal to move to a web-based forum that allows editing, if that’s still under consideration.)<br></p><p>Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160815/7d0f8777/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Idea] Use optionals for non-optional parameters</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>August 15, 2016 at 03:00:00pm</p></header><div class="content"><p>On Mon, Aug 15, 2016 at 3:05 PM, Charles Srstka &lt;cocoadev at charlessoft.com&gt;<br>wrote:<br></p><p>&gt; On Aug 15, 2016, at 2:27 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; `let value = (x == nil) ? nil : foo.bar(x: x)` isn&#39;t so bad, is it? You<br>&gt; could even write a custom operator to sugar it.<br>&gt;<br>&gt;<br>&gt; It’s distasteful, due to the need to use the force-unwrap operator. In<br>&gt; cases like this, I usually end up writing:<br>&gt;<br>&gt; let value: Foo? = nil<br>&gt;<br>&gt; if let x = x {<br>&gt; value = foo.bar(x: x)<br>&gt; } else {<br>&gt; value = nil<br>&gt; }<br>&gt;<br>&gt; or:<br>&gt;<br>&gt; let value: Foo? = {<br>&gt; if let x = x {<br>&gt; return foo.bar(x: x)<br>&gt; } else {<br>&gt; return nil<br>&gt; }<br>&gt; }()<br>&gt;<br>&gt; Both of which are unwieldy, but necessary to avoid the use of !.<br>&gt;<br></p><p>You are arguing that the force unwrap operator ! is, per se, distasteful?<br></p><p><br>&gt;<br>&gt; I wouldn’t mind something like an overload on the ternary operator:<br>&gt;<br>&gt; let value = x? ? foo.bar(x: x) : nil<br>&gt;<br>&gt; in which a ? after the ternary condition indicates that it is an optional<br>&gt; to be unwrapped for the positive condition.<br>&gt;<br>&gt; Charles<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160815/3691c32c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>[Idea] Use optionals for non-optional parameters</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>August 15, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On 15 Aug 2016, at 22:08, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Mon, Aug 15, 2016 at 3:05 PM, Charles Srstka &lt;cocoadev at charlessoft.com &lt;mailto:cocoadev at charlessoft.com&gt;&gt; wrote:<br>&gt;&gt; On Aug 15, 2016, at 2:27 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; `let value = (x == nil) ? nil : foo.bar(x: x)` isn&#39;t so bad, is it? You could even write a custom operator to sugar it.<br>&gt; <br>&gt; It’s distasteful, due to the need to use the force-unwrap operator. In cases like this, I usually end up writing:<br>&gt; <br>&gt; let value: Foo? = nil<br>&gt; <br>&gt; if let x = x {<br>&gt; 	value = foo.bar(x: x)<br>&gt; } else {<br>&gt; 	value = nil<br>&gt; }<br>&gt; <br>&gt; or:<br>&gt; <br>&gt; let value: Foo? = {<br>&gt; 	if let x = x {<br>&gt; 		return foo.bar(x: x)<br>&gt; 	} else {<br>&gt; 		return nil<br>&gt; 	}<br>&gt; }()<br>&gt; <br>&gt; Both of which are unwieldy, but necessary to avoid the use of !.<br>&gt; <br>&gt; You are arguing that the force unwrap operator ! is, per se, distasteful?<br></p><p>I wouldn&#39;t want ! all over my codebase, and I think the Swift language generally encourages that behaviour. In my opinion the use of ! is always caused by either a sloppy design or a language/compiler limitation. Directly comparing to nil is also something I try to avoid.<br></p><p>Not everyone feels this strongly about force unwrapping as I do, probably. But to me, force unwrapping is not a worthy alternative to the proposed new sugar, and I’d rather write some boilerplate code.<br></p><p>&gt;  <br>&gt; <br>&gt; I wouldn’t mind something like an overload on the ternary operator:<br>&gt; <br>&gt; let value = x? ? foo.bar(x: x) : nil<br>&gt; <br>&gt; in which a ? after the ternary condition indicates that it is an optional to be unwrapped for the positive condition.<br>&gt; <br>&gt; Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160815/b05149f5/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>[Idea] Use optionals for non-optional parameters</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>August 15, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Aug 15, 2016, at 3:08 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Mon, Aug 15, 2016 at 3:05 PM, Charles Srstka &lt;cocoadev at charlessoft.com &lt;mailto:cocoadev at charlessoft.com&gt;&gt; wrote:<br>&gt;&gt; On Aug 15, 2016, at 2:27 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; `let value = (x == nil) ? nil : foo.bar(x: x)` isn&#39;t so bad, is it? You could even write a custom operator to sugar it.<br>&gt; <br>&gt; It’s distasteful, due to the need to use the force-unwrap operator. In cases like this, I usually end up writing:<br>&gt; <br>&gt; let value: Foo? = nil<br>&gt; <br>&gt; if let x = x {<br>&gt; 	value = foo.bar(x: x)<br>&gt; } else {<br>&gt; 	value = nil<br>&gt; }<br>&gt; <br>&gt; or:<br>&gt; <br>&gt; let value: Foo? = {<br>&gt; 	if let x = x {<br>&gt; 		return foo.bar(x: x)<br>&gt; 	} else {<br>&gt; 		return nil<br>&gt; 	}<br>&gt; }()<br>&gt; <br>&gt; Both of which are unwieldy, but necessary to avoid the use of !.<br>&gt; <br>&gt; You are arguing that the force unwrap operator ! is, per se, distasteful?<br></p><p>If there are two ways to do something, and one uses the force-unwrap operator while the other does not, I’ll usually opt for the latter.<br></p><p>Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160815/7a3ee35d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Idea] Use optionals for non-optional parameters</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>August 15, 2016 at 10:00:00pm</p></header><div class="content"><p>To what benefit?<br></p><p><br>On Mon, Aug 15, 2016 at 16:23 Charles Srstka &lt;cocoadev at charlessoft.com&gt;<br>wrote:<br></p><p>&gt; On Aug 15, 2016, at 3:08 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Mon, Aug 15, 2016 at 3:05 PM, Charles Srstka &lt;cocoadev at charlessoft.com&gt;<br>&gt;  wrote:<br>&gt;<br>&gt;&gt; On Aug 15, 2016, at 2:27 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; `let value = (x == nil) ? nil : foo.bar(x: x)` isn&#39;t so bad, is it? You<br>&gt;&gt; could even write a custom operator to sugar it.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; It’s distasteful, due to the need to use the force-unwrap operator. In<br>&gt;&gt; cases like this, I usually end up writing:<br>&gt;&gt;<br>&gt;&gt; let value: Foo? = nil<br>&gt;&gt;<br>&gt;&gt; if let x = x {<br>&gt;&gt; value = foo.bar(x: x)<br>&gt;&gt; } else {<br>&gt;&gt; value = nil<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; or:<br>&gt;&gt;<br>&gt;&gt; let value: Foo? = {<br>&gt;&gt; if let x = x {<br>&gt;&gt; return foo.bar(x: x)<br>&gt;&gt; } else {<br>&gt;&gt; return nil<br>&gt;&gt; }<br>&gt;&gt; }()<br>&gt;&gt;<br>&gt;&gt; Both of which are unwieldy, but necessary to avoid the use of !.<br>&gt;&gt;<br>&gt;<br>&gt; You are arguing that the force unwrap operator ! is, per se, distasteful?<br>&gt;<br>&gt;<br>&gt; If there are two ways to do something, and one uses the force-unwrap<br>&gt; operator while the other does not, I’ll usually opt for the latter.<br>&gt;<br>&gt; Charles<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160815/8c84fe1e/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Idea] Use optionals for non-optional parameters</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>August 16, 2016 at 12:00:00am</p></header><div class="content"><p>I prefer the much simpler and natural:<br></p><p>let value = x.map { foo.bar(x: $0) }<br></p><p>Is it me or has everybody been avoiding the map solution for some reason. It&#39;s the most elegant way to do such operations IMHO.<br></p><p>&gt; On 15 Aug 2016, at 22:05, Charles Srstka via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Aug 15, 2016, at 2:27 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; `let value = (x == nil) ? nil : foo.bar(x: x)` isn&#39;t so bad, is it? You could even write a custom operator to sugar it.<br>&gt; <br>&gt; It’s distasteful, due to the need to use the force-unwrap operator. In cases like this, I usually end up writing:<br>&gt; <br>&gt; let value: Foo? = nil<br>&gt; <br>&gt; if let x = x {<br>&gt; 	value = foo.bar(x: x)<br>&gt; } else {<br>&gt; 	value = nil<br>&gt; }<br>&gt; <br>&gt; or:<br>&gt; <br>&gt; let value: Foo? = {<br>&gt; 	if let x = x {<br>&gt; 		return foo.bar(x: x)<br>&gt; 	} else {<br>&gt; 		return nil<br>&gt; 	}<br>&gt; }()<br>&gt; <br>&gt; Both of which are unwieldy, but necessary to avoid the use of !.<br>&gt; <br>&gt; I wouldn’t mind something like an overload on the ternary operator:<br>&gt; <br>&gt; let value = x? ? foo.bar(x: x) : nil<br>&gt; <br>&gt; in which a ? after the ternary condition indicates that it is an optional to be unwrapped for the positive condition.<br>&gt; <br>&gt; Charles<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160816/ac0ec55c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Idea] Use optionals for non-optional parameters</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>August 15, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Aug 15, 2016, at 17:51, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I prefer the much simpler and natural:<br>&gt; <br>&gt; let value = x.map { foo.bar(x: $0) }<br>&gt; <br>&gt; Is it me or has everybody been avoiding the map solution for some reason. It&#39;s the most elegant way to do such operations IMHO.<br>It doesn&#39;t help for functions with multiple parameters. At one point I&#39;d made a &quot;multimap&quot; top-level function for iterating over multiple sequences... maybe something like that?<br></p><p>- Dave Sweeris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160815/0a89f3cf/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
