<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[proposal] Either in the Swift Standard Library</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 29, 2016 at 08:00:00am</p></header><div class="content"><p>on Thu Jan 28 2016, Craig Cruden &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; So to summarize….<br>&gt;<br>&gt; Either is too specialized and thus not a good add…<br></p><p>I would say the opposite; what most people think of as Either is not<br>specialized enough, because it has no concrete semantics attached.<br></p><p>&gt; And the general implementation that is not specialized - is likely too complicated to easily add.<br>&gt;<br>&gt; :o<br>&gt;<br>&gt;&gt; On 2016-01-29, at 1:08:44, Chris Lattner via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 27, 2016, at 10:09 PM, Thorsten Seitz via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As an alternative to Either for expressing a sum type I&#39;d like to<br>&gt;&gt;&gt; throw real union types like Ceylon uses into the discussion.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; http://ceylon-lang.org/documentation/1.2/tour/types/ &lt;http://ceylon-lang.org/documentation/1.2/tour/types/&gt;<br>&gt;&gt; FWIW, this has been discussed before on swift-evolution.  Adding<br>&gt;&gt; them isn’t out of the question, but it is a lot more complicated<br>&gt;&gt; than it looks for the type checker.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[proposal] Either in the Swift Standard Library</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>January 29, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jan 29, 2016, at 9:53 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Thu Jan 28 2016, Craig Cruden &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; So to summarize….<br>&gt;&gt; <br>&gt;&gt; Either is too specialized and thus not a good add…<br>&gt; <br>&gt; I would say the opposite; what most people think of as Either is not<br>&gt; specialized enough, because it has no concrete semantics attached.<br></p><p>+1.<br></p><p>Result has a specific compelling use-case in threaded completion blocks.<br></p><p>-- E<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/582cb2be/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>[proposal] Either in the Swift Standard Library</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>January 30, 2016 at 05:00:00pm</p></header><div class="content"><p>What you want in the general language is important base types - generic implementations - building blocks…. things that allow different 3rd party libraries to interoperate….  <br></p><p>I would argue that Result is an application level - a specialized case…. that would not be used to communicate between 3rd party libraries and could easily be an external library that is imported and thus would just be bloat in the standard library.  It is just a wrapped exception.  Which up to this point people have said I want Result type not either but then they give nothing special to Result for anything to help simplify things like validation.<br></p><p>You are saying it should be Result, but you have not given Result anything special - something that makes validation more concise - and chained together.  And if you did give it an implementation it is going to be very specialized and not useable if the validation were anything but the utmost generic “result type”.   Someone will write result and it will handle errors, but then someone else has more requirements such as not everything is an error - there are errors, there are confirmations (warnings that the user has to confirm), warnings (informational), etc.<br></p><p>Either is more in line with Int, Float, Bool, and tuples.  Ideally you would want to the type system to handle it (as in Ceylon) which is 99% more work/impact to do it - but Either provides a starting point until that is implemented.  Usually when implementing things you want to implement what will handle the most use cases, with the least effort (80% of the way there) [in this case a single value], then the next iteration you come back and you implement something that gets you 98% there (Either), then you come back and implement a fully baked solution.  <br></p><p>Result is so specific that if you wanted to pass in a union / either into a function (i.e. either) you would have to actually type it as result - but then it is not a result.<br></p><p>Now if there were a multi-tier packaging - core, core-extended, incubation, and 3rd party.  Where core, core-extended, incubation were officially sanctioned and uniquely named… you could have the import locations where they come from as standard and only have to add an “import xxx” at the top and the package manager go out and fetch core-extended and incubation [3rd party you would have to specify the repository]…… THEN you could place the Either in something like core-extended until it is replaced with a fully baked type system (deprecated at that point).   Failing that you are going to have any functional paradigm library each implementing their own Either - each not being able to communicate with each other.  <br></p><p>Things that could be implemented without changes to the compiler would start out as a 3rd Party library, then if they wanted to move they would apply to be sanctioned and move to incubation which would require a community driven review to make sure the outline is good (i.e. experimental).  Once they are fully baked they would move to core-extended libraries.  These sanctioned libraries would be small in nature and be specialized (i.e. functional data structures, collections, functional data types, etc.) and not overlapping (to the extent possible).  An Either type would fit nicely into core-extended if that option were available and be the base for any 3rd party libraries (until or unless something in core used it).<br></p><p><br>&gt; On 2016-01-30, at 0:13:25, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 29, 2016, at 9:53 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Thu Jan 28 2016, Craig Cruden &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; So to summarize….<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Either is too specialized and thus not a good add…<br>&gt;&gt; <br>&gt;&gt; I would say the opposite; what most people think of as Either is not<br>&gt;&gt; specialized enough, because it has no concrete semantics attached.<br>&gt; <br>&gt; +1.<br>&gt; <br>&gt; Result has a specific compelling use-case in threaded completion blocks.<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/90122d1d/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
