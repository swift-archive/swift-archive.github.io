<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5e393bcde3a003bb7c1525c8e9877f2a?s=50"></div><header><strong>Stored Property on Protocol Extension</strong> from <string>Tanner Nelson</string> &lt;me at tanner.xyz&gt;<p>September 11, 2016 at 09:00:00pm</p></header><div class="content"><p>Hey Swift Users,<br></p><p>I was wondering how you all work around not being able to add stored properties in extensions (especially protocol extensions).<br></p><p>I ran into an issue recently where I needed an internal stored variable for a protocol, but I didn&#39;t want the conformer to worry about implementing the variable.<br></p><p>I ended up using something like this to achieve the effect.<br></p><p>    extension MyProtocol {<br>        private var address: String {<br>            mutating get {<br>                var id = &quot;&quot;<br>                withUnsafePointer(to: &amp;self) { id = &quot;\($0)&quot;}<br>                return id<br>            }<br>        }<br></p><p>        var myStoredVar: Bool {<br>            mutating get {<br>                return _storage[address] ?? false<br>            }<br>            set {<br>                _storage[address] = newValue<br>            }<br>        }<br>    }<br></p><p>Obviously not ideal, but I don&#39;t see another way to achieve this besides subclassing (which has its own problems for my situation).<br></p><p>Wondering if anyone has run into this and come up with a better solution or other type of work around.<br></p><p>Thanks!<br>Tanner<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Stored Property on Protocol Extension</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>September 12, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Sep 11, 2016, at 6:12 PM, Tanner Nelson via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hey Swift Users,<br>&gt; <br>&gt; I was wondering how you all work around not being able to add stored properties in extensions (especially protocol extensions).<br>&gt; <br>&gt; I ran into an issue recently where I needed an internal stored variable for a protocol, but I didn&#39;t want the conformer to worry about implementing the variable.<br>&gt; <br>&gt; I ended up using something like this to achieve the effect.<br>&gt; <br>&gt;    extension MyProtocol {<br>&gt;        private var address: String {<br>&gt;            mutating get {<br>&gt;                var id = &quot;&quot;<br>&gt;                withUnsafePointer(to: &amp;self) { id = &quot;\($0)&quot;}<br>&gt;                return id<br></p><p>BTW, you can write `return withUnsafePointer(to: &amp;self) { &quot;\($0)&quot; }` instead.<br></p><p>&gt;            }<br>&gt;        }<br>&gt; <br>&gt;        var myStoredVar: Bool {<br>&gt;            mutating get {<br>&gt;                return _storage[address] ?? false<br>&gt;            }<br>&gt;            set {<br>&gt;                _storage[address] = newValue<br>&gt;            }<br>&gt;        }<br>&gt;    }<br>&gt; <br>&gt; Obviously not ideal, but I don&#39;t see another way to achieve this besides subclassing (which has its own problems for my situation).<br>&gt; <br>&gt; Wondering if anyone has run into this and come up with a better solution or other type of work around.<br></p><p>I don&#39;t have a better answer to this part.<br></p><p>This particular solution only works if it is ok for `_storage[address]` to potentially be reused by a new instance, though (if the old instance is deallocated and the new one is allocated in its place).<br></p><p> - Daniel<br></p><p>&gt; <br>&gt; Thanks!<br>&gt; Tanner<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>Stored Property on Protocol Extension</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>September 13, 2016 at 06:00:00am</p></header><div class="content"><p>​I don&#39;t know why the limit exists. Technical or on purpose. I hope someone<br>inside can answer this.<br></p><p>Zhaoxin​<br></p><p>On Mon, Sep 12, 2016 at 11:55 PM, Daniel Dunbar via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Sep 11, 2016, at 6:12 PM, Tanner Nelson via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Hey Swift Users,<br>&gt; &gt;<br>&gt; &gt; I was wondering how you all work around not being able to add stored<br>&gt; properties in extensions (especially protocol extensions).<br>&gt; &gt;<br>&gt; &gt; I ran into an issue recently where I needed an internal stored variable<br>&gt; for a protocol, but I didn&#39;t want the conformer to worry about implementing<br>&gt; the variable.<br>&gt; &gt;<br>&gt; &gt; I ended up using something like this to achieve the effect.<br>&gt; &gt;<br>&gt; &gt;    extension MyProtocol {<br>&gt; &gt;        private var address: String {<br>&gt; &gt;            mutating get {<br>&gt; &gt;                var id = &quot;&quot;<br>&gt; &gt;                withUnsafePointer(to: &amp;self) { id = &quot;\($0)&quot;}<br>&gt; &gt;                return id<br>&gt;<br>&gt; BTW, you can write `return withUnsafePointer(to: &amp;self) { &quot;\($0)&quot; }`<br>&gt; instead.<br>&gt;<br>&gt; &gt;            }<br>&gt; &gt;        }<br>&gt; &gt;<br>&gt; &gt;        var myStoredVar: Bool {<br>&gt; &gt;            mutating get {<br>&gt; &gt;                return _storage[address] ?? false<br>&gt; &gt;            }<br>&gt; &gt;            set {<br>&gt; &gt;                _storage[address] = newValue<br>&gt; &gt;            }<br>&gt; &gt;        }<br>&gt; &gt;    }<br>&gt; &gt;<br>&gt; &gt; Obviously not ideal, but I don&#39;t see another way to achieve this besides<br>&gt; subclassing (which has its own problems for my situation).<br>&gt; &gt;<br>&gt; &gt; Wondering if anyone has run into this and come up with a better solution<br>&gt; or other type of work around.<br>&gt;<br>&gt; I don&#39;t have a better answer to this part.<br>&gt;<br>&gt; This particular solution only works if it is ok for `_storage[address]` to<br>&gt; potentially be reused by a new instance, though (if the old instance is<br>&gt; deallocated and the new one is allocated in its place).<br>&gt;<br>&gt;  - Daniel<br>&gt;<br>&gt; &gt;<br>&gt; &gt; Thanks!<br>&gt; &gt; Tanner<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-users mailing list<br>&gt; &gt; swift-users at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160913/81ab7dfb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e7452b650d9bd0dfeecb6b9830f0d892?s=50"></div><header><strong>Stored Property on Protocol Extension</strong> from <string>Dan Stenmark</string> &lt;daniel.j.stenmark at gmail.com&gt;<p>September 12, 2016 at 04:00:00pm</p></header><div class="content"><p>There&#39;s no good way of using extensions to expand the storage of an external module&#39;s type unless you&#39;re using Associated Objects underneath, but that has heavy performance implications (especially in threaded cases, which would require global locks on the associated object store).  At most, I&#39;d support a proposal for stored properties in extensions that reside in the same module  as the class declaration, but it sounds like the team has bigger fish to fry right now.<br></p><p>If possible, consider subclassing to extend a type&#39;s storage instead.<br></p><p>Dan<br></p><p>Sent from my iPhone<br></p><p>&gt; On Sep 12, 2016, at 3:50 PM, Zhao Xin via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; ​I don&#39;t know why the limit exists. Technical or on purpose. I hope someone inside can answer this.<br>&gt; <br>&gt; Zhaoxin​<br>&gt; <br>&gt;&gt; On Mon, Sep 12, 2016 at 11:55 PM, Daniel Dunbar via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt; On Sep 11, 2016, at 6:12 PM, Tanner Nelson via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Hey Swift Users,<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I was wondering how you all work around not being able to add stored properties in extensions (especially protocol extensions).<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I ran into an issue recently where I needed an internal stored variable for a protocol, but I didn&#39;t want the conformer to worry about implementing the variable.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I ended up using something like this to achieve the effect.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;    extension MyProtocol {<br>&gt;&gt; &gt;        private var address: String {<br>&gt;&gt; &gt;            mutating get {<br>&gt;&gt; &gt;                var id = &quot;&quot;<br>&gt;&gt; &gt;                withUnsafePointer(to: &amp;self) { id = &quot;\($0)&quot;}<br>&gt;&gt; &gt;                return id<br>&gt;&gt; <br>&gt;&gt; BTW, you can write `return withUnsafePointer(to: &amp;self) { &quot;\($0)&quot; }` instead.<br>&gt;&gt; <br>&gt;&gt; &gt;            }<br>&gt;&gt; &gt;        }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;        var myStoredVar: Bool {<br>&gt;&gt; &gt;            mutating get {<br>&gt;&gt; &gt;                return _storage[address] ?? false<br>&gt;&gt; &gt;            }<br>&gt;&gt; &gt;            set {<br>&gt;&gt; &gt;                _storage[address] = newValue<br>&gt;&gt; &gt;            }<br>&gt;&gt; &gt;        }<br>&gt;&gt; &gt;    }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Obviously not ideal, but I don&#39;t see another way to achieve this besides subclassing (which has its own problems for my situation).<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Wondering if anyone has run into this and come up with a better solution or other type of work around.<br>&gt;&gt; <br>&gt;&gt; I don&#39;t have a better answer to this part.<br>&gt;&gt; <br>&gt;&gt; This particular solution only works if it is ok for `_storage[address]` to potentially be reused by a new instance, though (if the old instance is deallocated and the new one is allocated in its place).<br>&gt;&gt; <br>&gt;&gt;  - Daniel<br>&gt;&gt; <br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Thanks!<br>&gt;&gt; &gt; Tanner<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-users mailing list<br>&gt;&gt; &gt; swift-users at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160912/a8ff34a9/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
