<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4de0bd0d87ade9cac3a76609a80c9af3?s=50"></div><header><strong>Reason for Swift not having readwrite reflection</strong> from <string>Gergely Orosz</string> &lt;gergely.orosz at gmail.com&gt;<p>December 17, 2015 at 06:00:00pm</p></header><div class="content"><p>As a user of swift, building projects on top of it, the single biggest<br>limitation I&#39;ve come across is that *all *my unit tests are significantly<br>more bloated compared to Objective C... because mocking &amp; stubbing is not<br>possible due to the static nature of the language and that readwrite<br>reflection is not supported.<br></p><p>I did some research and apart from C++ and C I couldn&#39;t find any other<br>popular language that does not support readwrite reflection (here&#39;s a post<br>I wrote on the topic: http://bit.ly/1PbgSys ).<br></p><p>Not having readwrite reflection makes it impossible to create any mocking<br>frameworks for unit testing, which is a very common tool in the testing<br>world. Without this we&#39;re left with using dummies and fakes - for now<br>creating them manually, in the future I&#39;m sure there will be plugins that<br>support generating these from e.g. protocols.<br></p><p>The iOS community seems to be somewhat behind when it comes to automation<br>compared to other languages and platforms - and in its current version<br>Swift seems to make the barrier to entry even higher compared to Objective<br>C, where mocking and stubbing is a possibility due to the dynamic nature of<br>the language.<br></p><p>Could anyone shed some light on why the decision was made to leave this<br>feature out? Is it just a feature that due to complexity will be pushed for<br>later? Or is it a security consideration?<br></p><p>Thanks,<br></p><p> Gergely<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151217/667ef1ec/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Reason for Swift not having readwrite reflection</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December 17, 2015 at 02:00:00pm</p></header><div class="content"><p>&gt; On Dec 17, 2015, at 10:54 AM, Gergely Orosz via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; As a user of swift, building projects on top of it, the single biggest limitation I&#39;ve come across is that all my unit tests are significantly more bloated compared to Objective C... because mocking &amp; stubbing is not possible due to the static nature of the language and that readwrite reflection is not supported.<br>&gt; <br>&gt; I did some research and apart from C++ and C I couldn&#39;t find any other popular language that does not support readwrite reflection (here&#39;s a post I wrote on the topic: http://bit.ly/1PbgSys &lt;http://bit.ly/1PbgSys&gt; ).<br>&gt; <br>&gt; Not having readwrite reflection makes it impossible to create any mocking frameworks for unit testing, which is a very common tool in the testing world. Without this we&#39;re left with using dummies and fakes - for now creating them manually, in the future I&#39;m sure there will be plugins that support generating these from e.g. protocols.<br>&gt; <br>&gt; The iOS community seems to be somewhat behind when it comes to automation compared to other languages and platforms - and in its current version Swift seems to make the barrier to entry even higher compared to Objective C, where mocking and stubbing is a possibility due to the dynamic nature of the language.<br>&gt; <br>&gt; Could anyone shed some light on why the decision was made to leave this feature out? Is it just a feature that due to complexity will be pushed for later? Or is it a security consideration?<br></p><p>Yes, yes, and yes. Better reflection is something we&#39;d like to support eventually, and a lot of the necessary metadata is already present at runtime, but not exposed. Designing interfaces takes time, and there are also security and secrecy concerns regarding what ought to be reflected, so there needs to be language design as well to control what is available to runtime reflection. All that said, runtime reflection is not the only way to approach mocking and stubbing. Swift&#39;s as static as you write it; if you define your component interfaces using protocols and generics, those protocols can be conformed to with mock or stub implementations without any need for runtime hacking.<br></p><p>-Joe<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151217/586301ea/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Reason for Swift not having readwrite reflection</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>December 17, 2015 at 04:00:00pm</p></header><div class="content"><p>&gt; On Dec 17, 2015, at 10:54 AM, Gergely Orosz via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Not having readwrite reflection makes it impossible to create any mocking frameworks for unit testing<br></p><p>I also strongly want reflection, but for a different purpose: data modeling. Core Data’s NSManagedObject is an example of what can be done with Objective-C: you just subclass it and add @property declarations, and the framework takes care of implementing those properties and backing them with data from a database. I happen to work on a different database (Couchbase Lite) that has a similar mechanism that uses the same Obj-C reflection capabilities. Our CBLModel class can be used in Swift since it inherits from NSObject, but in the long run I’d prefer to be able to do this with a pure-Swift class.<br></p><p>I’m glad to hear from Joe Groff that this is on the road-map. This would be a good topic to discuss on the swift-evolution list; swift-users seems more targeted at using Swift-as-it-is.<br></p><p>—Jens<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
