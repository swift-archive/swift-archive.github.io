<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>Discussion: Why is &quot;nil&quot; not &quot;none&quot;</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June  5, 2016 at 03:00:00pm</p></header><div class="content"><p>Quick thought:<br></p><p>If optional has a .none case, wouldn&#39;t it be more consistent to rename nil to none?<br></p><p>Also, would nil make it into Swift if not for other languages?<br></p><p>It also might make it somewhat clearer:<br></p><p>var someInt: Int? = none //looks less like a pointer and more like a value of nothing <br></p><p>1. It is more consistent with the optional enum<br>2. The intent is arguably clearer<br>3. nil makes it seem like it&#39;s a pointer <br>4. Would nil be included if not for prior languages? Would &quot;none&quot; have been chosen as the keyword if nil wasn&#39;t prior art?<br></p><p>One disadvantage is how close it is to .none, but with how common nil/none is used, some syntactic sugar might make it look nicer than always having the stray .<br></p><p>On vacation from Orlando, poolside, with a quick thought,<br>Brandon<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Discussion: Why is &quot;nil&quot; not &quot;none&quot;</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>June  7, 2016 at 04:00:00pm</p></header><div class="content"><p>There are NilLiteralConvertible types other than Optional, but they’re dwindling now that pointer nullability is represented by Optional. That said, I’m not convinced renaming “nil” is worth it at this point. Similarity with other languages is still a good thing.<br></p><p>It’s true that we might not have picked nil if it hadn’t been for Objective-C, but that doesn’t make it an invalid choice. There are lots of things in Swift we might have done differently if it weren’t for Objective-C and Cocoa.<br></p><p>Jordan<br></p><p><br>&gt; On Jun 5, 2016, at 12:35, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Quick thought:<br>&gt; <br>&gt; If optional has a .none case, wouldn&#39;t it be more consistent to rename nil to none?<br>&gt; <br>&gt; Also, would nil make it into Swift if not for other languages?<br>&gt; <br>&gt; It also might make it somewhat clearer:<br>&gt; <br>&gt; var someInt: Int? = none //looks less like a pointer and more like a value of nothing <br>&gt; <br>&gt; 1. It is more consistent with the optional enum<br>&gt; 2. The intent is arguably clearer<br>&gt; 3. nil makes it seem like it&#39;s a pointer <br>&gt; 4. Would nil be included if not for prior languages? Would &quot;none&quot; have been chosen as the keyword if nil wasn&#39;t prior art?<br>&gt; <br>&gt; One disadvantage is how close it is to .none, but with how common nil/none is used, some syntactic sugar might make it look nicer than always having the stray .<br>&gt; <br>&gt; On vacation from Orlando, poolside, with a quick thought,<br>&gt; Brandon <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>Discussion: Why is &quot;nil&quot; not &quot;none&quot;</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June  7, 2016 at 08:00:00pm</p></header><div class="content"><p>I guess for me it comes down to this:<br></p><p>Why were some and none chosen for as the cases for Optional?<br></p><p>As an extension of that, why does nil then represent none instead of the obvious none?<br></p><p>There has to be a reason why it&#39;s not:<br></p><p>enum Optional&lt;T&gt; {<br>case some(T)<br>case nil<br>}<br></p><p>None seems a lot more expressive and consistent with Optional. <br></p><p>I am comfortable and use to nil, but with swift being a new language, I thought it was worth opening up a discussion about possibly changing direction a little here. <br></p><p>Thanks,<br>Brandon <br></p><p>&gt; On Jun 7, 2016, at 7:57 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; There are NilLiteralConvertible types other than Optional, but they’re dwindling now that pointer nullability is represented by Optional. That said, I’m not convinced renaming “nil” is worth it at this point. Similarity with other languages is still a good thing.<br>&gt; <br>&gt; It’s true that we might not have picked nil if it hadn’t been for Objective-C, but that doesn’t make it an invalid choice. There are lots of things in Swift we might have done differently if it weren’t for Objective-C and Cocoa.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 5, 2016, at 12:35, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Quick thought:<br>&gt;&gt; <br>&gt;&gt; If optional has a .none case, wouldn&#39;t it be more consistent to rename nil to none?<br>&gt;&gt; <br>&gt;&gt; Also, would nil make it into Swift if not for other languages?<br>&gt;&gt; <br>&gt;&gt; It also might make it somewhat clearer:<br>&gt;&gt; <br>&gt;&gt; var someInt: Int? = none //looks less like a pointer and more like a value of nothing <br>&gt;&gt; <br>&gt;&gt; 1. It is more consistent with the optional enum<br>&gt;&gt; 2. The intent is arguably clearer<br>&gt;&gt; 3. nil makes it seem like it&#39;s a pointer <br>&gt;&gt; 4. Would nil be included if not for prior languages? Would &quot;none&quot; have been chosen as the keyword if nil wasn&#39;t prior art?<br>&gt;&gt; <br>&gt;&gt; One disadvantage is how close it is to .none, but with how common nil/none is used, some syntactic sugar might make it look nicer than always having the stray .<br>&gt;&gt; <br>&gt;&gt; On vacation from Orlando, poolside, with a quick thought,<br>&gt;&gt; Brandon <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160607/312efed9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2024f9524b1e51a54c4251abf0c34f50?s=50"></div><header><strong>Discussion: Why is &quot;nil&quot; not &quot;none&quot;</strong> from <string>Saagar Jha</string> &lt;saagarjha28 at gmail.com&gt;<p>June  8, 2016 at 12:00:00am</p></header><div class="content"><p>Well, some is the opposite of none in that if I don’t have some, I have<br>none. nil is just a carry-over from Objective-C.<br></p><p>On Tue, Jun 7, 2016 at 5:07 PM Brandon Knope via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I guess for me it comes down to this:<br>&gt;<br>&gt; *Why were some and none chosen for as the cases for Optional?*<br>&gt;<br>&gt; As an extension of that, why does nil then represent none instead of the<br>&gt; obvious none?<br>&gt;<br>&gt; There has to be a reason why it&#39;s not:<br>&gt;<br>&gt; enum Optional&lt;T&gt; {<br>&gt; case some(T)<br>&gt; case nil<br>&gt; }<br>&gt;<br>&gt; None seems a lot more expressive and consistent with Optional.<br>&gt;<br>&gt; I am comfortable and use to nil, but with swift being a new language, I<br>&gt; thought it was worth opening up a discussion about possibly changing<br>&gt; direction a little here.<br>&gt;<br>&gt; Thanks,<br>&gt; Brandon<br>&gt;<br>&gt; On Jun 7, 2016, at 7:57 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt;<br>&gt; There are NilLiteralConvertible types other than Optional, but they’re<br>&gt; dwindling now that pointer nullability is represented by Optional. That<br>&gt; said, I’m not convinced renaming “nil” is worth it at this point.<br>&gt; Similarity with other languages is still a good thing.<br>&gt;<br>&gt; It’s true that we might not have picked nil if it hadn’t been for<br>&gt; Objective-C, but that doesn’t make it an invalid choice. There are lots of<br>&gt; things in Swift we might have done differently if it weren’t for<br>&gt; Objective-C and Cocoa.<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt;<br>&gt; On Jun 5, 2016, at 12:35, Brandon Knope via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; Quick thought:<br>&gt;<br>&gt;<br>&gt; If optional has a .none case, wouldn&#39;t it be more consistent to rename nil<br>&gt; to none?<br>&gt;<br>&gt;<br>&gt; Also, would nil make it into Swift if not for other languages?<br>&gt;<br>&gt;<br>&gt; It also might make it somewhat clearer:<br>&gt;<br>&gt;<br>&gt; var someInt: Int? = none //looks less like a pointer and more like a value<br>&gt; of nothing<br>&gt;<br>&gt;<br>&gt; 1. It is more consistent with the optional enum<br>&gt;<br>&gt; 2. The intent is arguably clearer<br>&gt;<br>&gt; 3. nil makes it seem like it&#39;s a pointer<br>&gt;<br>&gt; 4. Would nil be included if not for prior languages? Would &quot;none&quot; have<br>&gt; been chosen as the keyword if nil wasn&#39;t prior art?<br>&gt;<br>&gt;<br>&gt; One disadvantage is how close it is to .none, but with how common nil/none<br>&gt; is used, some syntactic sugar might make it look nicer than always having<br>&gt; the stray .<br>&gt;<br>&gt;<br>&gt; On vacation from Orlando, poolside, with a quick thought,<br>&gt;<br>&gt; Brandon<br>&gt;<br>&gt; _______________________________________________<br>&gt;<br>&gt; swift-evolution mailing list<br>&gt;<br>&gt; swift-evolution at swift.org<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-- <br>-Saagar Jha<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160608/a2f75c7f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>Discussion: Why is &quot;nil&quot; not &quot;none&quot;</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June  7, 2016 at 08:00:00pm</p></header><div class="content"><p>That&#39;s exactly the point I was going for. <br></p><p>none makes more sense in this context than nil in my opinion<br></p><p>Brandon <br></p><p>&gt; On Jun 7, 2016, at 8:10 PM, Saagar Jha &lt;saagarjha28 at gmail.com&gt; wrote:<br>&gt; <br>&gt; Well, some is the opposite of none in that if I don’t have some, I have none. nil is just a carry-over from Objective-C.<br>&gt; <br>&gt;&gt; On Tue, Jun 7, 2016 at 5:07 PM Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; I guess for me it comes down to this:<br>&gt;&gt; <br>&gt;&gt; Why were some and none chosen for as the cases for Optional?<br>&gt;&gt; <br>&gt;&gt; As an extension of that, why does nil then represent none instead of the obvious none?<br>&gt;&gt; <br>&gt;&gt; There has to be a reason why it&#39;s not:<br>&gt;&gt; <br>&gt;&gt; enum Optional&lt;T&gt; {<br>&gt;&gt; case some(T)<br>&gt;&gt; case nil<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; None seems a lot more expressive and consistent with Optional. <br>&gt;&gt; <br>&gt;&gt; I am comfortable and use to nil, but with swift being a new language, I thought it was worth opening up a discussion about possibly changing direction a little here. <br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; Brandon <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 7, 2016, at 7:57 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There are NilLiteralConvertible types other than Optional, but they’re dwindling now that pointer nullability is represented by Optional. That said, I’m not convinced renaming “nil” is worth it at this point. Similarity with other languages is still a good thing.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It’s true that we might not have picked nil if it hadn’t been for Objective-C, but that doesn’t make it an invalid choice. There are lots of things in Swift we might have done differently if it weren’t for Objective-C and Cocoa.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 5, 2016, at 12:35, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Quick thought:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If optional has a .none case, wouldn&#39;t it be more consistent to rename nil to none?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Also, would nil make it into Swift if not for other languages?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It also might make it somewhat clearer:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; var someInt: Int? = none //looks less like a pointer and more like a value of nothing <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 1. It is more consistent with the optional enum<br>&gt;&gt;&gt;&gt; 2. The intent is arguably clearer<br>&gt;&gt;&gt;&gt; 3. nil makes it seem like it&#39;s a pointer <br>&gt;&gt;&gt;&gt; 4. Would nil be included if not for prior languages? Would &quot;none&quot; have been chosen as the keyword if nil wasn&#39;t prior art?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; One disadvantage is how close it is to .none, but with how common nil/none is used, some syntactic sugar might make it look nicer than always having the stray .<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On vacation from Orlando, poolside, with a quick thought,<br>&gt;&gt;&gt;&gt; Brandon <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; -Saagar Jha<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160607/9fef358c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2024f9524b1e51a54c4251abf0c34f50?s=50"></div><header><strong>Discussion: Why is &quot;nil&quot; not &quot;none&quot;</strong> from <string>Saagar Jha</string> &lt;saagarjha28 at gmail.com&gt;<p>June  8, 2016 at 12:00:00am</p></header><div class="content"><p>That’s not quite what I meant. nil feels right to refer to an object-you<br>can say “Foo is nil”, but you can’t really say that “Foo is none”, since<br>while you can’t really use none as an adjective, as you can with nil. It’s<br>really about what flows right-none is the opposite of some, but nil isn’t.<br></p><p><br>On Tue, Jun 7, 2016 at 5:16 PM Brandon Knope &lt;bknope at me.com&gt; wrote:<br></p><p>&gt; That&#39;s exactly the point I was going for.<br>&gt;<br>&gt; none makes more sense in this context than nil in my opinion<br>&gt;<br>&gt; Brandon<br>&gt;<br>&gt; On Jun 7, 2016, at 8:10 PM, Saagar Jha &lt;saagarjha28 at gmail.com&gt; wrote:<br>&gt;<br>&gt; Well, some is the opposite of none in that if I don’t have some, I have<br>&gt; none. nil is just a carry-over from Objective-C.<br>&gt;<br>&gt; On Tue, Jun 7, 2016 at 5:07 PM Brandon Knope via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; I guess for me it comes down to this:<br>&gt;&gt;<br>&gt;&gt; *Why were some and none chosen for as the cases for Optional?*<br>&gt;&gt;<br>&gt;&gt; As an extension of that, why does nil then represent none instead of the<br>&gt;&gt; obvious none?<br>&gt;&gt;<br>&gt;&gt; There has to be a reason why it&#39;s not:<br>&gt;&gt;<br>&gt;&gt; enum Optional&lt;T&gt; {<br>&gt;&gt; case some(T)<br>&gt;&gt; case nil<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; None seems a lot more expressive and consistent with Optional.<br>&gt;&gt;<br>&gt;&gt; I am comfortable and use to nil, but with swift being a new language, I<br>&gt;&gt; thought it was worth opening up a discussion about possibly changing<br>&gt;&gt; direction a little here.<br>&gt;&gt;<br>&gt;&gt; Thanks,<br>&gt;&gt; Brandon<br>&gt;&gt;<br>&gt;&gt; On Jun 7, 2016, at 7:57 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; There are NilLiteralConvertible types other than Optional, but they’re<br>&gt;&gt; dwindling now that pointer nullability is represented by Optional. That<br>&gt;&gt; said, I’m not convinced renaming “nil” is worth it at this point.<br>&gt;&gt; Similarity with other languages is still a good thing.<br>&gt;&gt;<br>&gt;&gt; It’s true that we might not have picked nil if it hadn’t been for<br>&gt;&gt; Objective-C, but that doesn’t make it an invalid choice. There are lots of<br>&gt;&gt; things in Swift we might have done differently if it weren’t for<br>&gt;&gt; Objective-C and Cocoa.<br>&gt;&gt;<br>&gt;&gt; Jordan<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Jun 5, 2016, at 12:35, Brandon Knope via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Quick thought:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; If optional has a .none case, wouldn&#39;t it be more consistent to rename<br>&gt;&gt; nil to none?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Also, would nil make it into Swift if not for other languages?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; It also might make it somewhat clearer:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; var someInt: Int? = none //looks less like a pointer and more like a<br>&gt;&gt; value of nothing<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; 1. It is more consistent with the optional enum<br>&gt;&gt;<br>&gt;&gt; 2. The intent is arguably clearer<br>&gt;&gt;<br>&gt;&gt; 3. nil makes it seem like it&#39;s a pointer<br>&gt;&gt;<br>&gt;&gt; 4. Would nil be included if not for prior languages? Would &quot;none&quot; have<br>&gt;&gt; been chosen as the keyword if nil wasn&#39;t prior art?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; One disadvantage is how close it is to .none, but with how common<br>&gt;&gt; nil/none is used, some syntactic sugar might make it look nicer than always<br>&gt;&gt; having the stray .<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On vacation from Orlando, poolside, with a quick thought,<br>&gt;&gt;<br>&gt;&gt; Brandon<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt;<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt;<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; --<br>&gt; -Saagar Jha<br>&gt;<br>&gt; --<br>-Saagar Jha<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160608/380a8c74/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>Discussion: Why is &quot;nil&quot; not &quot;none&quot;</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June  7, 2016 at 09:00:00pm</p></header><div class="content"><p>It depends how you frame it.<br></p><p>When I see nil I think of 0 or a pointer. <br></p><p>let someInt: Int? = nil<br></p><p>Does someInt really have a value of 0? Is it really a pointer (because it looks like one).  <br></p><p>let someInt: Int? = none<br>let someInt: Int? = .none<br></p><p>- Doesn&#39;t look like a pointer and can&#39;t be mistaken as one<br>- indicates the value is none: it contains absolutely nothing <br></p><p>Another example: dictionaries <br></p><p>someDict[key] = nil<br>someDict[key] = none<br>someDict[key] = .none<br></p><p>To me this reads as the value for this key is none. It has no value. <br></p><p>I&#39;m curious if &quot;Foo is nil&quot; reads better to you because it is what you/we are use to reading and not because it is actually better. <br></p><p>Also, it looks like Scala uses None for their option type so this isn&#39;t unprecedented. <br></p><p>Thanks,<br>Brandon <br></p><p>&gt; On Jun 7, 2016, at 8:30 PM, Saagar Jha &lt;saagarjha28 at gmail.com&gt; wrote:<br>&gt; <br>&gt; That’s not quite what I meant. nil feels right to refer to an object-you can say “Foo is nil”, but you can’t really say that “Foo is none”, since while you can’t really use none as an adjective, as you can with nil. It’s really about what flows right-none is the opposite of some, but nil isn’t.<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Tue, Jun 7, 2016 at 5:16 PM Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt; That&#39;s exactly the point I was going for. <br>&gt;&gt; <br>&gt;&gt; none makes more sense in this context than nil in my opinion<br>&gt;&gt; <br>&gt;&gt; Brandon <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 7, 2016, at 8:10 PM, Saagar Jha &lt;saagarjha28 at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Well, some is the opposite of none in that if I don’t have some, I have none. nil is just a carry-over from Objective-C.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Tue, Jun 7, 2016 at 5:07 PM Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; I guess for me it comes down to this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Why were some and none chosen for as the cases for Optional?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; As an extension of that, why does nil then represent none instead of the obvious none?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; There has to be a reason why it&#39;s not:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; enum Optional&lt;T&gt; {<br>&gt;&gt;&gt;&gt; case some(T)<br>&gt;&gt;&gt;&gt; case nil<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; None seems a lot more expressive and consistent with Optional. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I am comfortable and use to nil, but with swift being a new language, I thought it was worth opening up a discussion about possibly changing direction a little here. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt; Brandon <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 7, 2016, at 7:57 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; There are NilLiteralConvertible types other than Optional, but they’re dwindling now that pointer nullability is represented by Optional. That said, I’m not convinced renaming “nil” is worth it at this point. Similarity with other languages is still a good thing.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; It’s true that we might not have picked nil if it hadn’t been for Objective-C, but that doesn’t make it an invalid choice. There are lots of things in Swift we might have done differently if it weren’t for Objective-C and Cocoa.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jun 5, 2016, at 12:35, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Quick thought:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; If optional has a .none case, wouldn&#39;t it be more consistent to rename nil to none?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Also, would nil make it into Swift if not for other languages?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; It also might make it somewhat clearer:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; var someInt: Int? = none //looks less like a pointer and more like a value of nothing <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 1. It is more consistent with the optional enum<br>&gt;&gt;&gt;&gt;&gt;&gt; 2. The intent is arguably clearer<br>&gt;&gt;&gt;&gt;&gt;&gt; 3. nil makes it seem like it&#39;s a pointer <br>&gt;&gt;&gt;&gt;&gt;&gt; 4. Would nil be included if not for prior languages? Would &quot;none&quot; have been chosen as the keyword if nil wasn&#39;t prior art?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; One disadvantage is how close it is to .none, but with how common nil/none is used, some syntactic sugar might make it look nicer than always having the stray .<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On vacation from Orlando, poolside, with a quick thought,<br>&gt;&gt;&gt;&gt;&gt;&gt; Brandon <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; -Saagar Jha<br>&gt; <br>&gt; -- <br>&gt; -Saagar Jha<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160607/18eb52cf/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4ab486d7597af4cfe0be33a762150848?s=50"></div><header><strong>Discussion: Why is &quot;nil&quot; not &quot;none&quot;</strong> from <string>Dany St-Amant</string> &lt;dsa.mls at icloud.com&gt;<p>June  7, 2016 at 09:00:00pm</p></header><div class="content"><p>No clue as to the origins, but if you insist on using none. you can do:<br></p><p>let a : Int? = .none<br>let b : Int? = .some(5)<br></p><p>Using the simpler<br></p><p>let a : Int? = nil<br>let b : Int? = 5<br></p><p>is just sugar. <br>Maybe it was foresight to prevent people from saying, if I can do:<br></p><p>let a : Int? = none<br></p><p>Why can&#39;t I do:<br></p><p>let b : Int? = some(5)<br></p><p>And then go a step further by asking for all enum to be access without the leading dot; scary thought.<br></p><p>So it may be better to stick with &#39;.none&#39; and sugared &#39;nil&#39;.<br></p><p>Dany<br></p><p>&gt; Le 7 juin 2016 à 20:16, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; That&#39;s exactly the point I was going for. <br>&gt; <br>&gt; none makes more sense in this context than nil in my opinion<br>&gt; <br>&gt; Brandon <br>&gt; <br>&gt;&gt; On Jun 7, 2016, at 8:10 PM, Saagar Jha &lt;saagarjha28 at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Well, some is the opposite of none in that if I don’t have some, I have none. nil is just a carry-over from Objective-C.<br>&gt;&gt; <br>&gt;&gt;&gt; On Tue, Jun 7, 2016 at 5:07 PM Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; I guess for me it comes down to this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Why were some and none chosen for as the cases for Optional?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As an extension of that, why does nil then represent none instead of the obvious none?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There has to be a reason why it&#39;s not:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; enum Optional&lt;T&gt; {<br>&gt;&gt;&gt; case some(T)<br>&gt;&gt;&gt; case nil<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; None seems a lot more expressive and consistent with Optional. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I am comfortable and use to nil, but with swift being a new language, I thought it was worth opening up a discussion about possibly changing direction a little here. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; Brandon <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 7, 2016, at 7:57 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; There are NilLiteralConvertible types other than Optional, but they’re dwindling now that pointer nullability is represented by Optional. That said, I’m not convinced renaming “nil” is worth it at this point. Similarity with other languages is still a good thing.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It’s true that we might not have picked nil if it hadn’t been for Objective-C, but that doesn’t make it an invalid choice. There are lots of things in Swift we might have done differently if it weren’t for Objective-C and Cocoa.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 5, 2016, at 12:35, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Quick thought:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; If optional has a .none case, wouldn&#39;t it be more consistent to rename nil to none?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Also, would nil make it into Swift if not for other languages?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; It also might make it somewhat clearer:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; var someInt: Int? = none //looks less like a pointer and more like a value of nothing <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 1. It is more consistent with the optional enum<br>&gt;&gt;&gt;&gt;&gt; 2. The intent is arguably clearer<br>&gt;&gt;&gt;&gt;&gt; 3. nil makes it seem like it&#39;s a pointer <br>&gt;&gt;&gt;&gt;&gt; 4. Would nil be included if not for prior languages? Would &quot;none&quot; have been chosen as the keyword if nil wasn&#39;t prior art?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; One disadvantage is how close it is to .none, but with how common nil/none is used, some syntactic sugar might make it look nicer than always having the stray .<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On vacation from Orlando, poolside, with a quick thought,<br>&gt;&gt;&gt;&gt;&gt; Brandon <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Saagar Jha<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160607/9dbae696/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/68d21c811b4f037d9cbd43013319f9b4?s=50"></div><header><strong>Discussion: Why is &quot;nil&quot; not &quot;none&quot;</strong> from <string>Muse M</string> &lt;james.lei65 at gmail.com&gt;<p>June  8, 2016 at 10:00:00am</p></header><div class="content"><p>None would be similar to Null or nothing about the types in that sense<br>which None is not a type.<br>Nil would be interpret as Int, Float, String, etc<br></p><p><br></p><p>On Wed, Jun 8, 2016 at 9:17 AM, Dany St-Amant via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; No clue as to the origins, but if you insist on using none. you can do:<br>&gt;<br>&gt; let a : Int? = .none<br>&gt; let b : Int? = .some(5)<br>&gt;<br>&gt; Using the simpler<br>&gt;<br>&gt; let a : Int? = nil<br>&gt; let b : Int? = 5<br>&gt;<br>&gt; is just sugar.<br>&gt; Maybe it was foresight to prevent people from saying, if I can do:<br>&gt;<br>&gt; let a : Int? = none<br>&gt;<br>&gt; Why can&#39;t I do:<br>&gt;<br>&gt; let b : Int? = some(5)<br>&gt;<br>&gt; And then go a step further by asking for all enum to be access without the<br>&gt; leading dot; scary thought.<br>&gt;<br>&gt; So it may be better to stick with &#39;.none&#39; and sugared &#39;nil&#39;.<br>&gt;<br>&gt; Dany<br>&gt;<br>&gt; Le 7 juin 2016 à 20:16, Brandon Knope via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;<br>&gt; That&#39;s exactly the point I was going for.<br>&gt;<br>&gt; none makes more sense in this context than nil in my opinion<br>&gt;<br>&gt; Brandon<br>&gt;<br>&gt; On Jun 7, 2016, at 8:10 PM, Saagar Jha &lt;saagarjha28 at gmail.com&gt; wrote:<br>&gt;<br>&gt; Well, some is the opposite of none in that if I don’t have some, I have<br>&gt; none. nil is just a carry-over from Objective-C.<br>&gt;<br>&gt; On Tue, Jun 7, 2016 at 5:07 PM Brandon Knope via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; I guess for me it comes down to this:<br>&gt;&gt;<br>&gt;&gt; *Why were some and none chosen for as the cases for Optional?*<br>&gt;&gt;<br>&gt;&gt; As an extension of that, why does nil then represent none instead of the<br>&gt;&gt; obvious none?<br>&gt;&gt;<br>&gt;&gt; There has to be a reason why it&#39;s not:<br>&gt;&gt;<br>&gt;&gt; enum Optional&lt;T&gt; {<br>&gt;&gt; case some(T)<br>&gt;&gt; case nil<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; None seems a lot more expressive and consistent with Optional.<br>&gt;&gt;<br>&gt;&gt; I am comfortable and use to nil, but with swift being a new language, I<br>&gt;&gt; thought it was worth opening up a discussion about possibly changing<br>&gt;&gt; direction a little here.<br>&gt;&gt;<br>&gt;&gt; Thanks,<br>&gt;&gt; Brandon<br>&gt;&gt;<br>&gt;&gt; On Jun 7, 2016, at 7:57 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; There are NilLiteralConvertible types other than Optional, but they’re<br>&gt;&gt; dwindling now that pointer nullability is represented by Optional. That<br>&gt;&gt; said, I’m not convinced renaming “nil” is worth it at this point.<br>&gt;&gt; Similarity with other languages is still a good thing.<br>&gt;&gt;<br>&gt;&gt; It’s true that we might not have picked nil if it hadn’t been for<br>&gt;&gt; Objective-C, but that doesn’t make it an invalid choice. There are lots of<br>&gt;&gt; things in Swift we might have done differently if it weren’t for<br>&gt;&gt; Objective-C and Cocoa.<br>&gt;&gt;<br>&gt;&gt; Jordan<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Jun 5, 2016, at 12:35, Brandon Knope via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Quick thought:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; If optional has a .none case, wouldn&#39;t it be more consistent to rename<br>&gt;&gt; nil to none?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Also, would nil make it into Swift if not for other languages?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; It also might make it somewhat clearer:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; var someInt: Int? = none //looks less like a pointer and more like a<br>&gt;&gt; value of nothing<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; 1. It is more consistent with the optional enum<br>&gt;&gt;<br>&gt;&gt; 2. The intent is arguably clearer<br>&gt;&gt;<br>&gt;&gt; 3. nil makes it seem like it&#39;s a pointer<br>&gt;&gt;<br>&gt;&gt; 4. Would nil be included if not for prior languages? Would &quot;none&quot; have<br>&gt;&gt; been chosen as the keyword if nil wasn&#39;t prior art?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; One disadvantage is how close it is to .none, but with how common<br>&gt;&gt; nil/none is used, some syntactic sugar might make it look nicer than always<br>&gt;&gt; having the stray .<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On vacation from Orlando, poolside, with a quick thought,<br>&gt;&gt;<br>&gt;&gt; Brandon<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt;<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt;<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; --<br>&gt; -Saagar Jha<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160608/a42b416c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f64d9558601ff253a2faf75455059df6?s=50"></div><header><strong>Discussion: Why is &quot;nil&quot; not &quot;none&quot;</strong> from <string>J. Charles M. N.</string> &lt;jcharles.nmbiada at me.com&gt;<p>June  8, 2016 at 11:00:00am</p></header><div class="content"><p>I&#39;am not either for removing nil nor renaming it none, I think that they are conceptually different things.<br> <br>This syntactic sugar brings unfortunately many things around. One fastidious thing is it multiple semantics: As null pointer. As none value.<br>I am personally not favorable for multiples semantics keywords.<br></p><p>Aside, if it come up to revisiting nil concept we should bring the other chimera (unit, Void, bottom type etc).<br></p><p>--<br>J. Charles <br></p><p>&gt; Le 8 juin 2016 à 04:18, Muse M via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; None would be similar to Null or nothing about the types in that sense which None is not a type.<br>&gt; Nil would be interpret as Int, Float, String, etc<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Wed, Jun 8, 2016 at 9:17 AM, Dany St-Amant via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; No clue as to the origins, but if you insist on using none. you can do:<br>&gt;&gt; <br>&gt;&gt; let a : Int? = .none<br>&gt;&gt; let b : Int? = .some(5)<br>&gt;&gt; <br>&gt;&gt; Using the simpler<br>&gt;&gt; <br>&gt;&gt; let a : Int? = nil<br>&gt;&gt; let b : Int? = 5<br>&gt;&gt; <br>&gt;&gt; is just sugar. <br>&gt;&gt; Maybe it was foresight to prevent people from saying, if I can do:<br>&gt;&gt; <br>&gt;&gt; let a : Int? = none<br>&gt;&gt; <br>&gt;&gt; Why can&#39;t I do:<br>&gt;&gt; <br>&gt;&gt; let b : Int? = some(5)<br>&gt;&gt; <br>&gt;&gt; And then go a step further by asking for all enum to be access without the leading dot; scary thought.<br>&gt;&gt; <br>&gt;&gt; So it may be better to stick with &#39;.none&#39; and sugared &#39;nil&#39;.<br>&gt;&gt; <br>&gt;&gt; Dany<br>&gt;&gt; <br>&gt;&gt; Le 7 juin 2016 à 20:16, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt;&gt; That&#39;s exactly the point I was going for. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; none makes more sense in this context than nil in my opinion<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Brandon <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 7, 2016, at 8:10 PM, Saagar Jha &lt;saagarjha28 at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Well, some is the opposite of none in that if I don’t have some, I have none. nil is just a carry-over from Objective-C.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Tue, Jun 7, 2016 at 5:07 PM Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; I guess for me it comes down to this:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Why were some and none chosen for as the cases for Optional?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; As an extension of that, why does nil then represent none instead of the obvious none?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; There has to be a reason why it&#39;s not:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; enum Optional&lt;T&gt; {<br>&gt;&gt;&gt;&gt;&gt; case some(T)<br>&gt;&gt;&gt;&gt;&gt; case nil<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; None seems a lot more expressive and consistent with Optional. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I am comfortable and use to nil, but with swift being a new language, I thought it was worth opening up a discussion about possibly changing direction a little here. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt; Brandon <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jun 7, 2016, at 7:57 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; There are NilLiteralConvertible types other than Optional, but they’re dwindling now that pointer nullability is represented by Optional. That said, I’m not convinced renaming “nil” is worth it at this point. Similarity with other languages is still a good thing.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; It’s true that we might not have picked nil if it hadn’t been for Objective-C, but that doesn’t make it an invalid choice. There are lots of things in Swift we might have done differently if it weren’t for Objective-C and Cocoa.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 5, 2016, at 12:35, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Quick thought:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; If optional has a .none case, wouldn&#39;t it be more consistent to rename nil to none?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Also, would nil make it into Swift if not for other languages?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; It also might make it somewhat clearer:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; var someInt: Int? = none //looks less like a pointer and more like a value of nothing <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1. It is more consistent with the optional enum<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2. The intent is arguably clearer<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 3. nil makes it seem like it&#39;s a pointer <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 4. Would nil be included if not for prior languages? Would &quot;none&quot; have been chosen as the keyword if nil wasn&#39;t prior art?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; One disadvantage is how close it is to .none, but with how common nil/none is used, some syntactic sugar might make it look nicer than always having the stray .<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On vacation from Orlando, poolside, with a quick thought,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Brandon <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; -Saagar Jha<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160608/4984bffc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>Discussion: Why is &quot;nil&quot; not &quot;none&quot;</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June  8, 2016 at 05:00:00pm</p></header><div class="content"><p>Reading the thread.. I wonder if we need &quot;nil&quot; at all, why not use (just a <br>question, not a suggestion) .none ? I.e. now we can use nil and .none in <br>the same situations, .none is just 2 symbols longer, &#39;.none&#39; highlight that <br>Optional is a special type (that there is .some(T) in Optional), no <br>confusion if it is related to pointers etc.<br></p><p>var i : Int? = 10<br>if i != .none { print(i) }<br>i = .none<br>print(i)<br></p><p>var i : Int? = 10<br>if i != nil { print(i) }<br>i = nil<br>print(i)<br></p><p>i.e. the same thing expressed in 2 different but similar ways. Probably I&#39;m <br>missing something.<br></p><p>On 08.06.2016 12:33, J. Charles M. N. via swift-evolution wrote:<br>&gt; I&#39;am not either for removing nil nor renaming it none, I think that they<br>&gt; are conceptually different things.<br>&gt;<br>&gt; This syntactic sugar brings unfortunately many things around. One<br>&gt; fastidious thing is it multiple semantics: As null pointer. As none value.<br>&gt; I am personally not favorable for multiples semantics keywords.<br>&gt;<br>&gt; Aside, if it come up to revisiting nil concept we should bring the other<br>&gt; chimera (unit, Void, bottom type etc).<br>&gt;<br>&gt; --<br>&gt; J. Charles<br>&gt;<br>&gt; Le 8 juin 2016 à 04:18, Muse M via swift-evolution<br>&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;<br>&gt;&gt; None would be similar to Null or nothing about the types in that sense<br>&gt;&gt; which None is not a type.<br>&gt;&gt; Nil would be interpret as Int, Float, String, etc<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Wed, Jun 8, 2016 at 9:17 AM, Dany St-Amant via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;     No clue as to the origins, but if you insist on using none. you can do:<br>&gt;&gt;<br>&gt;&gt;     let a : Int? = .none<br>&gt;&gt;     let b : Int? = .some(5)<br>&gt;&gt;<br>&gt;&gt;     Using the simpler<br>&gt;&gt;<br>&gt;&gt;     let a : Int? = nil<br>&gt;&gt;     let b : Int? = 5<br>&gt;&gt;<br>&gt;&gt;     is just sugar.<br>&gt;&gt;     Maybe it was foresight to prevent people from saying, if I can do:<br>&gt;&gt;<br>&gt;&gt;     let a : Int? = none<br>&gt;&gt;<br>&gt;&gt;     Why can&#39;t I do:<br>&gt;&gt;<br>&gt;&gt;     let b : Int? = some(5)<br>&gt;&gt;<br>&gt;&gt;     And then go a step further by asking for all enum to be access<br>&gt;&gt;     without the leading dot; scary thought.<br>&gt;&gt;<br>&gt;&gt;     So it may be better to stick with &#39;.none&#39; and sugared &#39;nil&#39;.<br>&gt;&gt;<br>&gt;&gt;     Dany<br>&gt;&gt;<br>&gt;&gt;     Le 7 juin 2016 à 20:16, Brandon Knope via swift-evolution<br>&gt;&gt;     &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt;<br>&gt;&gt;&gt;     That&#39;s exactly the point I was going for.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     none makes more sense in this context than nil in my opinion<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     Brandon<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     On Jun 7, 2016, at 8:10 PM, Saagar Jha &lt;saagarjha28 at gmail.com<br>&gt;&gt;&gt;     &lt;mailto:saagarjha28 at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     Well, some is the opposite of none in that if I don’t have some, I<br>&gt;&gt;&gt;&gt;     have none. nil is just a carry-over from Objective-C.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     On Tue, Jun 7, 2016 at 5:07 PM Brandon Knope via swift-evolution<br>&gt;&gt;&gt;&gt;     &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         I guess for me it comes down to this:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         *Why were some and none chosen for as the cases for Optional?*<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         As an extension of that, why does nil then represent none<br>&gt;&gt;&gt;&gt;         instead of the obvious none?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         There has to be a reason why it&#39;s not:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         enum Optional&lt;T&gt; {<br>&gt;&gt;&gt;&gt;         case some(T)<br>&gt;&gt;&gt;&gt;         case nil<br>&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         None seems a lot more expressive and consistent with Optional.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         I am comfortable and use to nil, but with swift being a new<br>&gt;&gt;&gt;&gt;         language, I thought it was worth opening up a discussion about<br>&gt;&gt;&gt;&gt;         possibly changing direction a little here.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         Thanks,<br>&gt;&gt;&gt;&gt;         Brandon<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         On Jun 7, 2016, at 7:57 PM, Jordan Rose &lt;jordan_rose at apple.com<br>&gt;&gt;&gt;&gt;         &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;         There are NilLiteralConvertible types other than Optional, but<br>&gt;&gt;&gt;&gt;&gt;         they’re dwindling now that pointer nullability is represented<br>&gt;&gt;&gt;&gt;&gt;         by Optional. That said, I’m not convinced renaming “nil” is<br>&gt;&gt;&gt;&gt;&gt;         worth it at this point. Similarity with other languages is<br>&gt;&gt;&gt;&gt;&gt;         still a good thing.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;         It’s true that we might not have picked nil if it hadn’t been<br>&gt;&gt;&gt;&gt;&gt;         for Objective-C, but that doesn’t make it an invalid choice.<br>&gt;&gt;&gt;&gt;&gt;         There are lots of things in Swift we might have done<br>&gt;&gt;&gt;&gt;&gt;         differently if it weren’t for Objective-C and Cocoa.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;         Jordan<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;         On Jun 5, 2016, at 12:35, Brandon Knope via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;         &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;         &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;         Quick thought:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;         If optional has a .none case, wouldn&#39;t it be more consistent<br>&gt;&gt;&gt;&gt;&gt;&gt;         to rename nil to none?<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;         Also, would nil make it into Swift if not for other languages?<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;         It also might make it somewhat clearer:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;         var someInt: Int? = none //looks less like a pointer and more<br>&gt;&gt;&gt;&gt;&gt;&gt;         like a value of nothing<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;         1. It is more consistent with the optional enum<br>&gt;&gt;&gt;&gt;&gt;&gt;         2. The intent is arguably clearer<br>&gt;&gt;&gt;&gt;&gt;&gt;         3. nil makes it seem like it&#39;s a pointer<br>&gt;&gt;&gt;&gt;&gt;&gt;         4. Would nil be included if not for prior languages? Would<br>&gt;&gt;&gt;&gt;&gt;&gt;         &quot;none&quot; have been chosen as the keyword if nil wasn&#39;t prior art?<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;         One disadvantage is how close it is to .none, but with how<br>&gt;&gt;&gt;&gt;&gt;&gt;         common nil/none is used, some syntactic sugar might make it<br>&gt;&gt;&gt;&gt;&gt;&gt;         look nicer than always having the stray .<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;         On vacation from Orlando, poolside, with a quick thought,<br>&gt;&gt;&gt;&gt;&gt;&gt;         Brandon<br>&gt;&gt;&gt;&gt;&gt;&gt;         _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;         swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;         swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         _______________________________________________<br>&gt;&gt;&gt;&gt;         swift-evolution mailing list<br>&gt;&gt;&gt;&gt;         swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     --<br>&gt;&gt;&gt;&gt;     -Saagar Jha<br>&gt;&gt;&gt;     _______________________________________________<br>&gt;&gt;&gt;     swift-evolution mailing list<br>&gt;&gt;&gt;     swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;     _______________________________________________<br>&gt;&gt;     swift-evolution mailing list<br>&gt;&gt;     swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>Discussion: Why is &quot;nil&quot; not &quot;none&quot;</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June  8, 2016 at 11:00:00am</p></header><div class="content"><p>This is precisely the point I was trying to make.<br></p><p>“nil” is a holdover from other languages; i.e. we are comfortable with using it. I think there are better alternatives to consider.<br></p><p>However, when evaluating whether it makes sense with swift, I think it fails some of the criteria for inclusion.<br></p><p>My biggest bet why people are against .none is that the . looks noisy and unclean. This is why I am suggesting “none” as sugar for .none even though it might seem quite silly.<br></p><p>I also bet that 9 times out of 10, when people see nil they think of pointers and not optionals. Maybe this will take time to retrain ourselves to think optionality, but now nil is used for different things in different languages<br></p><p>Brandon<br></p><p>&gt; On Jun 8, 2016, at 10:56 AM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Reading the thread.. I wonder if we need &quot;nil&quot; at all, why not use (just a question, not a suggestion) .none ? I.e. now we can use nil and .none in the same situations, .none is just 2 symbols longer, &#39;.none&#39; highlight that Optional is a special type (that there is .some(T) in Optional), no confusion if it is related to pointers etc.<br>&gt; <br>&gt; var i : Int? = 10<br>&gt; if i != .none { print(i) }<br>&gt; i = .none<br>&gt; print(i)<br>&gt; <br>&gt; var i : Int? = 10<br>&gt; if i != nil { print(i) }<br>&gt; i = nil<br>&gt; print(i)<br>&gt; <br>&gt; i.e. the same thing expressed in 2 different but similar ways. Probably I&#39;m missing something.<br>&gt; <br>&gt; On 08.06.2016 12:33, J. Charles M. N. via swift-evolution wrote:<br>&gt;&gt; I&#39;am not either for removing nil nor renaming it none, I think that they<br>&gt;&gt; are conceptually different things.<br>&gt;&gt; <br>&gt;&gt; This syntactic sugar brings unfortunately many things around. One<br>&gt;&gt; fastidious thing is it multiple semantics: As null pointer. As none value.<br>&gt;&gt; I am personally not favorable for multiples semantics keywords.<br>&gt;&gt; <br>&gt;&gt; Aside, if it come up to revisiting nil concept we should bring the other<br>&gt;&gt; chimera (unit, Void, bottom type etc).<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; J. Charles<br>&gt;&gt; <br>&gt;&gt; Le 8 juin 2016 à 04:18, Muse M via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt;&gt; None would be similar to Null or nothing about the types in that sense<br>&gt;&gt;&gt; which None is not a type.<br>&gt;&gt;&gt; Nil would be interpret as Int, Float, String, etc<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Wed, Jun 8, 2016 at 9:17 AM, Dany St-Amant via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    No clue as to the origins, but if you insist on using none. you can do:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    let a : Int? = .none<br>&gt;&gt;&gt;    let b : Int? = .some(5)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    Using the simpler<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    let a : Int? = nil<br>&gt;&gt;&gt;    let b : Int? = 5<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    is just sugar.<br>&gt;&gt;&gt;    Maybe it was foresight to prevent people from saying, if I can do:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    let a : Int? = none<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    Why can&#39;t I do:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    let b : Int? = some(5)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    And then go a step further by asking for all enum to be access<br>&gt;&gt;&gt;    without the leading dot; scary thought.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    So it may be better to stick with &#39;.none&#39; and sugared &#39;nil&#39;.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    Dany<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    Le 7 juin 2016 à 20:16, Brandon Knope via swift-evolution<br>&gt;&gt;&gt;    &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; a écrit :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    That&#39;s exactly the point I was going for.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    none makes more sense in this context than nil in my opinion<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    Brandon<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    On Jun 7, 2016, at 8:10 PM, Saagar Jha &lt;saagarjha28 at gmail.com &lt;mailto:saagarjha28 at gmail.com&gt;<br>&gt;&gt;&gt;&gt;    &lt;mailto:saagarjha28 at gmail.com &lt;mailto:saagarjha28 at gmail.com&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    Well, some is the opposite of none in that if I don’t have some, I<br>&gt;&gt;&gt;&gt;&gt;    have none. nil is just a carry-over from Objective-C.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    On Tue, Jun 7, 2016 at 5:07 PM Brandon Knope via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;    &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;        I guess for me it comes down to this:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;        *Why were some and none chosen for as the cases for Optional?*<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;        As an extension of that, why does nil then represent none<br>&gt;&gt;&gt;&gt;&gt;        instead of the obvious none?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;        There has to be a reason why it&#39;s not:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;        enum Optional&lt;T&gt; {<br>&gt;&gt;&gt;&gt;&gt;        case some(T)<br>&gt;&gt;&gt;&gt;&gt;        case nil<br>&gt;&gt;&gt;&gt;&gt;        }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;        None seems a lot more expressive and consistent with Optional.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;        I am comfortable and use to nil, but with swift being a new<br>&gt;&gt;&gt;&gt;&gt;        language, I thought it was worth opening up a discussion about<br>&gt;&gt;&gt;&gt;&gt;        possibly changing direction a little here.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;        Thanks,<br>&gt;&gt;&gt;&gt;&gt;        Brandon<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;        On Jun 7, 2016, at 7:57 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;<br>&gt;&gt;&gt;&gt;&gt;        &lt;mailto:jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;        There are NilLiteralConvertible types other than Optional, but<br>&gt;&gt;&gt;&gt;&gt;&gt;        they’re dwindling now that pointer nullability is represented<br>&gt;&gt;&gt;&gt;&gt;&gt;        by Optional. That said, I’m not convinced renaming “nil” is<br>&gt;&gt;&gt;&gt;&gt;&gt;        worth it at this point. Similarity with other languages is<br>&gt;&gt;&gt;&gt;&gt;&gt;        still a good thing.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;        It’s true that we might not have picked nil if it hadn’t been<br>&gt;&gt;&gt;&gt;&gt;&gt;        for Objective-C, but that doesn’t make it an invalid choice.<br>&gt;&gt;&gt;&gt;&gt;&gt;        There are lots of things in Swift we might have done<br>&gt;&gt;&gt;&gt;&gt;&gt;        differently if it weren’t for Objective-C and Cocoa.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;        Jordan<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        On Jun 5, 2016, at 12:35, Brandon Knope via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        Quick thought:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        If optional has a .none case, wouldn&#39;t it be more consistent<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        to rename nil to none?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        Also, would nil make it into Swift if not for other languages?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        It also might make it somewhat clearer:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        var someInt: Int? = none //looks less like a pointer and more<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        like a value of nothing<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        1. It is more consistent with the optional enum<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        2. The intent is arguably clearer<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        3. nil makes it seem like it&#39;s a pointer<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        4. Would nil be included if not for prior languages? Would<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        &quot;none&quot; have been chosen as the keyword if nil wasn&#39;t prior art?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        One disadvantage is how close it is to .none, but with how<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        common nil/none is used, some syntactic sugar might make it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        look nicer than always having the stray .<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        On vacation from Orlando, poolside, with a quick thought,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        Brandon<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;        _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;        swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;        swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;        https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    --<br>&gt;&gt;&gt;&gt;&gt;    -Saagar Jha<br>&gt;&gt;&gt;&gt;    _______________________________________________<br>&gt;&gt;&gt;&gt;    swift-evolution mailing list<br>&gt;&gt;&gt;&gt;    swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    _______________________________________________<br>&gt;&gt;&gt;    swift-evolution mailing list<br>&gt;&gt;&gt;    swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160608/36e277b0/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>Discussion: Why is &quot;nil&quot; not &quot;none&quot;</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>June  8, 2016 at 10:00:00am</p></header><div class="content"><p>nil is not only usable with Optionals, although that is its most common usage.<br></p><p>Any type implementing NilLiteralConvertible can be initialized with a nil literal<br></p><p>-DW<br></p><p>&gt; On Jun 8, 2016, at 10:45 AM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; This is precisely the point I was trying to make.<br>&gt; <br>&gt; “nil” is a holdover from other languages; i.e. we are comfortable with using it. I think there are better alternatives to consider.<br>&gt; <br>&gt; However, when evaluating whether it makes sense with swift, I think it fails some of the criteria for inclusion.<br>&gt; <br>&gt; My biggest bet why people are against .none is that the . looks noisy and unclean. This is why I am suggesting “none” as sugar for .none even though it might seem quite silly.<br>&gt; <br>&gt; I also bet that 9 times out of 10, when people see nil they think of pointers and not optionals. Maybe this will take time to retrain ourselves to think optionality, but now nil is used for different things in different languages<br>&gt; <br>&gt; Brandon<br>&gt; <br>&gt;&gt; On Jun 8, 2016, at 10:56 AM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Reading the thread.. I wonder if we need &quot;nil&quot; at all, why not use (just a question, not a suggestion) .none ? I.e. now we can use nil and .none in the same situations, .none is just 2 symbols longer, &#39;.none&#39; highlight that Optional is a special type (that there is .some(T) in Optional), no confusion if it is related to pointers etc.<br>&gt;&gt; <br>&gt;&gt; var i : Int? = 10<br>&gt;&gt; if i != .none { print(i) }<br>&gt;&gt; i = .none<br>&gt;&gt; print(i)<br>&gt;&gt; <br>&gt;&gt; var i : Int? = 10<br>&gt;&gt; if i != nil { print(i) }<br>&gt;&gt; i = nil<br>&gt;&gt; print(i)<br>&gt;&gt; <br>&gt;&gt; i.e. the same thing expressed in 2 different but similar ways. Probably I&#39;m missing something.<br>&gt;&gt; <br>&gt;&gt; On 08.06.2016 12:33, J. Charles M. N. via swift-evolution wrote:<br>&gt;&gt;&gt; I&#39;am not either for removing nil nor renaming it none, I think that they<br>&gt;&gt;&gt; are conceptually different things.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This syntactic sugar brings unfortunately many things around. One<br>&gt;&gt;&gt; fastidious thing is it multiple semantics: As null pointer. As none value.<br>&gt;&gt;&gt; I am personally not favorable for multiples semantics keywords.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Aside, if it come up to revisiting nil concept we should bring the other<br>&gt;&gt;&gt; chimera (unit, Void, bottom type etc).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; J. Charles<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Le 8 juin 2016 à 04:18, Muse M via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; a écrit :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; None would be similar to Null or nothing about the types in that sense<br>&gt;&gt;&gt;&gt; which None is not a type.<br>&gt;&gt;&gt;&gt; Nil would be interpret as Int, Float, String, etc<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Wed, Jun 8, 2016 at 9:17 AM, Dany St-Amant via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    No clue as to the origins, but if you insist on using none. you can do:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    let a : Int? = .none<br>&gt;&gt;&gt;&gt;    let b : Int? = .some(5)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    Using the simpler<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    let a : Int? = nil<br>&gt;&gt;&gt;&gt;    let b : Int? = 5<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    is just sugar.<br>&gt;&gt;&gt;&gt;    Maybe it was foresight to prevent people from saying, if I can do:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    let a : Int? = none<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    Why can&#39;t I do:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    let b : Int? = some(5)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    And then go a step further by asking for all enum to be access<br>&gt;&gt;&gt;&gt;    without the leading dot; scary thought.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    So it may be better to stick with &#39;.none&#39; and sugared &#39;nil&#39;.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    Dany<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    Le 7 juin 2016 à 20:16, Brandon Knope via swift-evolution<br>&gt;&gt;&gt;&gt;    &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; a écrit :<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    That&#39;s exactly the point I was going for.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    none makes more sense in this context than nil in my opinion<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    Brandon<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    On Jun 7, 2016, at 8:10 PM, Saagar Jha &lt;saagarjha28 at gmail.com &lt;mailto:saagarjha28 at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt;    &lt;mailto:saagarjha28 at gmail.com &lt;mailto:saagarjha28 at gmail.com&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;    Well, some is the opposite of none in that if I don’t have some, I<br>&gt;&gt;&gt;&gt;&gt;&gt;    have none. nil is just a carry-over from Objective-C.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;    On Tue, Jun 7, 2016 at 5:07 PM Brandon Knope via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;    &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;        I guess for me it comes down to this:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;        *Why were some and none chosen for as the cases for Optional?*<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;        As an extension of that, why does nil then represent none<br>&gt;&gt;&gt;&gt;&gt;&gt;        instead of the obvious none?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;        There has to be a reason why it&#39;s not:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;        enum Optional&lt;T&gt; {<br>&gt;&gt;&gt;&gt;&gt;&gt;        case some(T)<br>&gt;&gt;&gt;&gt;&gt;&gt;        case nil<br>&gt;&gt;&gt;&gt;&gt;&gt;        }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;        None seems a lot more expressive and consistent with Optional.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;        I am comfortable and use to nil, but with swift being a new<br>&gt;&gt;&gt;&gt;&gt;&gt;        language, I thought it was worth opening up a discussion about<br>&gt;&gt;&gt;&gt;&gt;&gt;        possibly changing direction a little here.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;        Thanks,<br>&gt;&gt;&gt;&gt;&gt;&gt;        Brandon<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;        On Jun 7, 2016, at 7:57 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;        &lt;mailto:jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        There are NilLiteralConvertible types other than Optional, but<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        they’re dwindling now that pointer nullability is represented<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        by Optional. That said, I’m not convinced renaming “nil” is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        worth it at this point. Similarity with other languages is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        still a good thing.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        It’s true that we might not have picked nil if it hadn’t been<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        for Objective-C, but that doesn’t make it an invalid choice.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        There are lots of things in Swift we might have done<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        differently if it weren’t for Objective-C and Cocoa.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;        Jordan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;        On Jun 5, 2016, at 12:35, Brandon Knope via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;        &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;        &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;        Quick thought:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;        If optional has a .none case, wouldn&#39;t it be more consistent<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;        to rename nil to none?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;        Also, would nil make it into Swift if not for other languages?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;        It also might make it somewhat clearer:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;        var someInt: Int? = none //looks less like a pointer and more<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;        like a value of nothing<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;        1. It is more consistent with the optional enum<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;        2. The intent is arguably clearer<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;        3. nil makes it seem like it&#39;s a pointer<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;        4. Would nil be included if not for prior languages? Would<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;        &quot;none&quot; have been chosen as the keyword if nil wasn&#39;t prior art?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;        One disadvantage is how close it is to .none, but with how<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;        common nil/none is used, some syntactic sugar might make it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;        look nicer than always having the stray .<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;        On vacation from Orlando, poolside, with a quick thought,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;        Brandon<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;        _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;        swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;        swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;        https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;        _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;        swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;        swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;        https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;    --<br>&gt;&gt;&gt;&gt;&gt;&gt;    -Saagar Jha<br>&gt;&gt;&gt;&gt;&gt;    _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;    swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;    swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    _______________________________________________<br>&gt;&gt;&gt;&gt;    swift-evolution mailing list<br>&gt;&gt;&gt;&gt;    swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160608/e43c03ab/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: signature.asc<br>Type: application/pgp-signature<br>Size: 496 bytes<br>Desc: Message signed with OpenPGP using GPGMail<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160608/e43c03ab/attachment.sig&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>Discussion: Why is &quot;nil&quot; not &quot;none&quot;</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June  8, 2016 at 12:00:00pm</p></header><div class="content"><p>I know I know. <br></p><p>I should have framed this as removing NilLiteralConvertible from Optional and supplying it with a new keyword.<br></p><p>I don’t find nil to adequately represent what it is doing with optionals. It *looks* like it is setting a object to nil when this really isn’t the case. The optional is still very valid with a value of .none.<br></p><p>nil in swift is pretty different from nil in other languages. nil is mostly unsafe to access in other languages where in swift it is just a value representing no contained value.<br></p><p>nil in swift: safe to access. In other languages? Not so much (at least C / C++)<br></p><p>Brandon<br></p><p><br>&gt; On Jun 8, 2016, at 11:51 AM, David Waite &lt;david at alkaline-solutions.com&gt; wrote:<br>&gt; <br>&gt; i<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160608/345b4d79/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
