<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/89e9af7c5754673419c8fac930319700?s=50"></div><header><strong>What do to when stdlib guidelines conflict with proposal?</strong> from <string>Russ Bishop</string> &lt;xenadu at gmail.com&gt;<p>May 11, 2016 at 02:00:00pm</p></header><div class="content"><p>I’m implementing SE-0017 but based on the standard library guidelines I think Unmanaged should have initializers that take UnsafePointer/UnsafeMutablePointer and vice-versa which would fit more naturally with the way other conversions work. <br></p><p>A later commit already moved toOpaque to be an initializer on OpaquePointer. I would add convenience initializers to UnsafePointer as well.<br></p><p>Any objections to just implementing this as initializers and marking fromOpaque as deprecated? I’m not sure how strict we should be in sticking to the proposal.<br></p><p><br></p><p>Russ<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>What do to when stdlib guidelines conflict with proposal?</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>May 11, 2016 at 11:00:00pm</p></header><div class="content"><p>+1 from the proposal author, although since it went through community<br>review that doesn&#39;t make me an authority ;)<br>On Wed, May 11, 2016 at 2:53 PM Russ Bishop via swift-dev &lt;<br>swift-dev at swift.org&gt; wrote:<br></p><p>&gt; I’m implementing SE-0017 but based on the standard library guidelines I<br>&gt; think Unmanaged should have initializers that take<br>&gt; UnsafePointer/UnsafeMutablePointer and vice-versa which would fit more<br>&gt; naturally with the way other conversions work.<br>&gt;<br>&gt; A later commit already moved toOpaque to be an initializer on<br>&gt; OpaquePointer. I would add convenience initializers to UnsafePointer as<br>&gt; well.<br>&gt;<br>&gt; Any objections to just implementing this as initializers and marking<br>&gt; fromOpaque as deprecated? I’m not sure how strict we should be in sticking<br>&gt; to the proposal.<br>&gt;<br>&gt;<br>&gt;<br>&gt; Russ<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160511/8afd75c1/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>What do to when stdlib guidelines conflict with proposal?</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>May 11, 2016 at 04:00:00pm</p></header><div class="content"><p>On Wed, May 11, 2016 at 2:53 PM, Russ Bishop via swift-dev<br>&lt;swift-dev at swift.org&gt; wrote:<br>&gt; I’m implementing SE-0017 but based on the standard library guidelines I think Unmanaged should have initializers that take UnsafePointer/UnsafeMutablePointer and vice-versa which would fit more naturally with the way other conversions work.<br>&gt;<br>&gt; A later commit already moved toOpaque to be an initializer on OpaquePointer. I would add convenience initializers to UnsafePointer as well.<br>&gt;<br>&gt; Any objections to just implementing this as initializers and marking fromOpaque as deprecated? I’m not sure how strict we should be in sticking to the proposal.<br></p><p>Unmanaged shall be redesigned.  We thought about this change, and<br>decided to go for the incremental change as proposed.  Bigger changes<br>should be considered as a part of a cohesive Unmanaged redesign.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/89e9af7c5754673419c8fac930319700?s=50"></div><header><strong>What do to when stdlib guidelines conflict with proposal?</strong> from <string>Russ Bishop</string> &lt;xenadu at gmail.com&gt;<p>May 11, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On May 11, 2016, at 4:50 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Wed, May 11, 2016 at 2:53 PM, Russ Bishop via swift-dev<br>&gt; &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt; I’m implementing SE-0017 but based on the standard library guidelines I think Unmanaged should have initializers that take UnsafePointer/UnsafeMutablePointer and vice-versa which would fit more naturally with the way other conversions work.<br>&gt;&gt; <br>&gt;&gt; A later commit already moved toOpaque to be an initializer on OpaquePointer. I would add convenience initializers to UnsafePointer as well.<br>&gt;&gt; <br>&gt;&gt; Any objections to just implementing this as initializers and marking fromOpaque as deprecated? I’m not sure how strict we should be in sticking to the proposal.<br>&gt; <br>&gt; Unmanaged shall be redesigned.  We thought about this change, and<br>&gt; decided to go for the incremental change as proposed.  Bigger changes<br>&gt; should be considered as a part of a cohesive Unmanaged redesign.<br>&gt; <br></p><p>Why did someone move toOpaque then? It seems like the door was already opened there - it isn’t possible to stick to the proposal as approved anyway.<br></p><p>I can certainly move it back but the initializer vs static seems like a best-practices and library design issue orthogonal to Unmanaged itself. <br></p><p><br>At the end of the day if the core team still prefers to go with the fromOpaque/toOpaque approach I’m happy to implement it (in fact I have both implemented locally right now).<br></p><p><br>Russ<br></p><p><br>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>What do to when stdlib guidelines conflict with proposal?</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 11, 2016 at 10:00:00pm</p></header><div class="content"><p>On May 11, 2016, at 8:17 PM, Russ Bishop via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On May 11, 2016, at 4:50 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Wed, May 11, 2016 at 2:53 PM, Russ Bishop via swift-dev<br>&gt;&gt; &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; I’m implementing SE-0017 but based on the standard library guidelines I think Unmanaged should have initializers that take UnsafePointer/UnsafeMutablePointer and vice-versa which would fit more naturally with the way other conversions work.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A later commit already moved toOpaque to be an initializer on OpaquePointer. I would add convenience initializers to UnsafePointer as well.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Any objections to just implementing this as initializers and marking fromOpaque as deprecated? I’m not sure how strict we should be in sticking to the proposal.<br>&gt;&gt; <br>&gt;&gt; Unmanaged shall be redesigned.  We thought about this change, and<br>&gt;&gt; decided to go for the incremental change as proposed.  Bigger changes<br>&gt;&gt; should be considered as a part of a cohesive Unmanaged redesign.<br>&gt;&gt; <br>&gt; <br>&gt; Why did someone move toOpaque then? It seems like the door was already opened there - it isn’t possible to stick to the proposal as approved anyway.<br>&gt; <br>&gt; I can certainly move it back but the initializer vs static seems like a best-practices and library design issue orthogonal to Unmanaged itself. <br>&gt; <br>&gt; <br>&gt; At the end of the day if the core team still prefers to go with the fromOpaque/toOpaque approach I’m happy to implement it (in fact I have both implemented locally right now).<br></p><p>As Dmitri, we specifically discussed this in the core team meeting (I brought it up :-).  The problem is that we really only want the toOpaque() method to exist on UnsafePointer&lt;Void&gt; and don’t have the ability to model that in the language yet.  When that ability exists, we’ll revise these APIs and many others.<br></p><p>Until then, it is best to keep with the spirit of the current design, warts and all.  Thanks for bringing this up!<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/89e9af7c5754673419c8fac930319700?s=50"></div><header><strong>What do to when stdlib guidelines conflict with proposal?</strong> from <string>Russ Bishop</string> &lt;xenadu at gmail.com&gt;<p>May 11, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On May 11, 2016, at 10:18 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; As Dmitri, we specifically discussed this in the core team meeting (I brought it up :-).  The problem is that we really only want the toOpaque() method to exist on UnsafePointer&lt;Void&gt; and don’t have the ability to model that in the language yet.  When that ability exists, we’ll revise these APIs and many others.<br>&gt; <br></p><p>Ah good old “same-type requirement makes generic parameter non-generic” :)<br></p><p>I see what the objection is and it makes sense to me. I’ll implement it as closely as I can to the spirit of the proposal.<br></p><p><br>Russ<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160511/66666858/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>What do to when stdlib guidelines conflict with proposal?</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 12, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On May 11, 2016, at 10:18 PM, Chris Lattner via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; On May 11, 2016, at 8:17 PM, Russ Bishop via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On May 11, 2016, at 4:50 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Wed, May 11, 2016 at 2:53 PM, Russ Bishop via swift-dev<br>&gt;&gt;&gt; &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; I’m implementing SE-0017 but based on the standard library guidelines I think Unmanaged should have initializers that take UnsafePointer/UnsafeMutablePointer and vice-versa which would fit more naturally with the way other conversions work.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; A later commit already moved toOpaque to be an initializer on OpaquePointer. I would add convenience initializers to UnsafePointer as well.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Any objections to just implementing this as initializers and marking fromOpaque as deprecated? I’m not sure how strict we should be in sticking to the proposal.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Unmanaged shall be redesigned.  We thought about this change, and<br>&gt;&gt;&gt; decided to go for the incremental change as proposed.  Bigger changes<br>&gt;&gt;&gt; should be considered as a part of a cohesive Unmanaged redesign.<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Why did someone move toOpaque then? It seems like the door was already opened there - it isn’t possible to stick to the proposal as approved anyway.<br>&gt;&gt; <br>&gt;&gt; I can certainly move it back but the initializer vs static seems like a best-practices and library design issue orthogonal to Unmanaged itself. <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; At the end of the day if the core team still prefers to go with the fromOpaque/toOpaque approach I’m happy to implement it (in fact I have both implemented locally right now).<br>&gt; <br>&gt; As Dmitri, we specifically discussed this in the core team meeting (I brought it up :-).  The problem is that we really only want the toOpaque() method to exist on UnsafePointer&lt;Void&gt; and don’t have the ability to model that in the language yet.  When that ability exists, we’ll revise these APIs and many others.<br>&gt; <br>&gt; Until then, it is best to keep with the spirit of the current design, warts and all.  Thanks for bringing this up!<br></p><p>We might want to wait till we review Andy&#39;s UnsafeBytePointer proposal. If we accept that, it will separate UnsafePointer&lt;Void&gt; into its own type.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/89e9af7c5754673419c8fac930319700?s=50"></div><header><strong>What do to when stdlib guidelines conflict with proposal?</strong> from <string>Russ Bishop</string> &lt;xenadu at gmail.com&gt;<p>May 12, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On May 12, 2016, at 8:33 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; We might want to wait till we review Andy&#39;s UnsafeBytePointer proposal. If we accept that, it will separate UnsafePointer&lt;Void&gt; into its own type.<br>&gt; <br>&gt; -Joe<br></p><p><br>Fair enough; I can hold off on this branch until then.<br></p><p>Russ<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160512/c7d82cfa/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>What do to when stdlib guidelines conflict with proposal?</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 12, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On May 12, 2016, at 9:16 PM, Russ Bishop &lt;xenadu at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 12, 2016, at 8:33 AM, Joe Groff &lt;jgroff at apple.com &lt;mailto:jgroff at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; We might want to wait till we review Andy&#39;s UnsafeBytePointer proposal. If we accept that, it will separate UnsafePointer&lt;Void&gt; into its own type.<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt; <br>&gt; <br>&gt; Fair enough; I can hold off on this branch until then.<br></p><p>I’d suggest wrapping up this proposal as specified.  When/if Andy’s proposal goes through, we can move these APIs over.  This proposal is progress from the status quo, perfection is the enemy of good after all.<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160512/7d8c3296/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fe87aed0d64cdbc46378bf7596a7553?s=50"></div><header><strong>What do to when stdlib guidelines conflict with proposal?</strong> from <string>Andrew Trick</string> &lt;atrick at apple.com&gt;<p>May 13, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On May 12, 2016, at 9:57 PM, Chris Lattner via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 12, 2016, at 9:16 PM, Russ Bishop &lt;xenadu at gmail.com &lt;mailto:xenadu at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 12, 2016, at 8:33 AM, Joe Groff &lt;jgroff at apple.com &lt;mailto:jgroff at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We might want to wait till we review Andy&#39;s UnsafeBytePointer proposal. If we accept that, it will separate UnsafePointer&lt;Void&gt; into its own type.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Joe<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Fair enough; I can hold off on this branch until then.<br>&gt; <br>&gt; I’d suggest wrapping up this proposal as specified.  When/if Andy’s proposal goes through, we can move these APIs over.  This proposal is progress from the status quo, perfection is the enemy of good after all.<br></p><p>That’s the right call. For the record, I suggested moving to/fromOpaque to initializers during the community review and it was immediately shot down by Jordan because it’s incorrect for UnsafePointer&lt;T&gt; where T is non-Void.<br></p><p>-Andy<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160513/eecdf059/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
