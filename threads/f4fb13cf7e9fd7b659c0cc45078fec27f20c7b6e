<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>July 21, 2016 at 03:00:00am</p></header><div class="content"><p>Don’t Panic !<br></p><p>At the risk of seeing things in a somewhat trivial perspective,<br>combined with an almost complete absence of abstraction:<br></p><p>Note that to relatively simple persons like me: <br></p><p>String instances are just rows of characters (when not empty, of course) <br></p><p>There are only two kinds of Strings:<br></p><p>1. empty Strings, which do not contain amy characters at all<br></p><p>  and <br></p><p>2.  Strings containing 1 or more characters.<br></p><p>Ergo ad Infinitum :<br></p><p>Empty Strings do not occur in Strings that contain characters. <br></p><p><br>I’d say, please try to find possible empty strings<br>that might perhaps be embedded e.g. in the string below: <br> <br>“Don’t Panic: Please read Hitchhiker’s Guide to the Galaxy 42” <br></p><p><br>With all due respect: <br>This might void the discussion below :o)<br></p><p>I have nothing against Mathematics as long<br>as it is applicable.<br></p><p><br>Kind Regards<br>Ted<br></p><p><br></p><p>&gt; To the question of whether any given string has the empty string as prefix:<br>&gt; yes it does. This is a correct answer, and returning true is a correct<br>&gt; behaviour.<br>&gt; <br>&gt; To the question of how many times the empty string occurs in a string: yes,<br>&gt; this can be infinite. &quot;a&quot; == &quot;a&quot; + &quot;&quot; == &quot;a&quot; + &quot;&quot; + &quot;&quot; == &quot;a&quot; + &quot;&quot; + &quot;&quot; +<br>&gt; &quot;&quot; == &quot;a&quot; + &quot;&quot; + &quot;&quot; + &quot;&quot; + &quot;&quot; == ... etc.. Concatenating an empty string,<br>&gt; like adding zero or multiplying by zero for a numerical value, can be done<br>&gt; infinitely many times without making a difference.<br>&gt; <br>&gt; However, there&#39;s correctness and convenience. For example, every integer<br>&gt; can be expressed as a multiple of prime factors. 1 is technically a prime<br>&gt; number - it&#39;s divisible by 1 and itself - but for convenience we say it<br>&gt; isn&#39;t a prime number, because if it isn&#39;t, every integer can be expressed<br>&gt; uniquely as a multiple of prime factors, whereas if it is, there are an<br>&gt; infinite number of such expressions for each integer.<br>&gt; <br>&gt; There may be many algorithms which rely on an empty prefix returning false.<br>&gt; If hasPrefix and hasSuffix are corrected, those algorithms should be<br>&gt; altered to recognise that correction. For example, if breaking up a string<br>&gt; using the empty string as a separator, it seems sensible that the sequence<br>&gt; of substrings would never contain consecutive empty strings.<br>&gt; <br>&gt; On Wed, Jul 20, 2016 at 11:58 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; I&#39;d run this by someone who actually knows math, but afaik there are<br>&gt;&gt; finitely many empty strings in any given string.<br>&gt;&gt; <br>&gt;&gt; How many e&#39;s are in any given string? (Ignoring Unicode issues for now,)<br>&gt;&gt; for each index in the string&#39;s indices, form a substring one character in<br>&gt;&gt; length starting at that index and compare the value of that substring to e.<br>&gt;&gt; <br>&gt;&gt; How many empty strings are in any given string? For each index in the<br>&gt;&gt; string&#39;s indices, form a substring zero characters in length starting at<br>&gt;&gt; that index and compare the value of that substring to an empty string.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Wed, Jul 20, 2016 at 17:35 Guillaume Lessard &lt;<br>&gt;&gt; glessard at tffenterprises.com &lt;mailto:glessard at tffenterprises.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 20 juil. 2016, at 14:21, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Doesn&#39;t your second argument undermine your first? If it&#39;s a trivial<br>&gt;&gt;&gt; solution and one rarely ever considers empty strings when invoking<br>&gt;&gt;&gt; `hasPrefix`, then returning the technically correct result must be a<br>&gt;&gt;&gt; trivial departure in behavior.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I specifically used an example where the trivial solution (y=0 instead of<br>&gt;&gt;&gt; y=exp(x)) is a pitfall.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How many empty strings are contained in any given string?<br>&gt;&gt;&gt; If the answer is infinitely many, it sounds like a pitfall to me.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt; Guillaume Lessard<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; _______________________________________________<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160721/f4fb7b6e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e95942f1fe843f007ef5430b9acff78b?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>Jaden Geller</string> &lt;jaden.geller at gmail.com&gt;<p>July 20, 2016 at 07:00:00pm</p></header><div class="content"><p>This discussion is getting out of control. Both of these functions have mathematical precedent as well as consistent behaviors in other languages. Observe:<br></p><p>Python: `&quot;hello world&quot;.startswith(&quot;&quot;)` =&gt; `True`<br>Java: `&quot;hello world&quot;.startsWith(&quot;&quot;)` =&gt; `true`<br>JavaScript: `&quot;hello world&quot;.startsWith(&quot;&quot;)` =&gt; `true`<br>Ruby: `&quot;hello world&quot;.start_with? &quot;&quot;` =&gt; `true`<br>Rust: `&quot;hello world&quot;.starts_with(&quot;&quot;)` =&gt; `true`<br>Go: `strings.HasPrefix(&quot;hello world&quot;, &quot;&quot;)` =&gt; `true`<br></p><p>It&#39;s pretty hard to argue against this. Even if you think these other languages are wrong, Swift must regard the empty String as a prefix to be consistent with itself.<br></p><p>`str.hasPrefix(String(str.characters.prefix(0)))` =&gt; `false` ?!<br></p><p>I would expect every prefix of `str` to return true as an argument to `str.hasPrefix`…<br></p><p>&gt; On Jul 20, 2016, at 6:49 PM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Don’t Panic !<br>&gt; <br>&gt; At the risk of seeing things in a somewhat trivial perspective,<br>&gt; combined with an almost complete absence of abstraction:<br>&gt; <br>&gt; Note that to relatively simple persons like me: <br>&gt; <br>&gt; String instances are just rows of characters (when not empty, of course) <br>&gt; <br>&gt; There are only two kinds of Strings:<br>&gt; <br>&gt; 1. empty Strings, which do not contain amy characters at all<br>&gt; <br>&gt;   and <br>&gt; <br>&gt; 2.  Strings containing 1 or more characters.<br>&gt; <br>&gt; Ergo ad Infinitum :<br>&gt; <br>&gt; Empty Strings do not occur in Strings that contain characters. <br>&gt; <br>&gt; <br>&gt; I’d say, please try to find possible empty strings<br>&gt; that might perhaps be embedded e.g. in the string below: <br>&gt;  <br>&gt; “Don’t Panic: Please read Hitchhiker’s Guide to the Galaxy 42” <br>&gt; <br>&gt; <br>&gt; With all due respect: <br>&gt; This might void the discussion below :o)<br>&gt; <br>&gt; I have nothing against Mathematics as long<br>&gt; as it is applicable.<br>&gt; <br>&gt; <br>&gt; Kind Regards<br>&gt; Ted<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; To the question of whether any given string has the empty string as prefix:<br>&gt;&gt; yes it does. This is a correct answer, and returning true is a correct<br>&gt;&gt; behaviour.<br>&gt;&gt; <br>&gt;&gt; To the question of how many times the empty string occurs in a string: yes,<br>&gt;&gt; this can be infinite. &quot;a&quot; == &quot;a&quot; + &quot;&quot; == &quot;a&quot; + &quot;&quot; + &quot;&quot; == &quot;a&quot; + &quot;&quot; + &quot;&quot; +<br>&gt;&gt; &quot;&quot; == &quot;a&quot; + &quot;&quot; + &quot;&quot; + &quot;&quot; + &quot;&quot; == ... etc.. Concatenating an empty string,<br>&gt;&gt; like adding zero or multiplying by zero for a numerical value, can be done<br>&gt;&gt; infinitely many times without making a difference.<br>&gt;&gt; <br>&gt;&gt; However, there&#39;s correctness and convenience. For example, every integer<br>&gt;&gt; can be expressed as a multiple of prime factors. 1 is technically a prime<br>&gt;&gt; number - it&#39;s divisible by 1 and itself - but for convenience we say it<br>&gt;&gt; isn&#39;t a prime number, because if it isn&#39;t, every integer can be expressed<br>&gt;&gt; uniquely as a multiple of prime factors, whereas if it is, there are an<br>&gt;&gt; infinite number of such expressions for each integer.<br>&gt;&gt; <br>&gt;&gt; There may be many algorithms which rely on an empty prefix returning false.<br>&gt;&gt; If hasPrefix and hasSuffix are corrected, those algorithms should be<br>&gt;&gt; altered to recognise that correction. For example, if breaking up a string<br>&gt;&gt; using the empty string as a separator, it seems sensible that the sequence<br>&gt;&gt; of substrings would never contain consecutive empty strings.<br>&gt;&gt; <br>&gt;&gt; On Wed, Jul 20, 2016 at 11:58 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I&#39;d run this by someone who actually knows math, but afaik there are<br>&gt;&gt;&gt; finitely many empty strings in any given string.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How many e&#39;s are in any given string? (Ignoring Unicode issues for now,)<br>&gt;&gt;&gt; for each index in the string&#39;s indices, form a substring one character in<br>&gt;&gt;&gt; length starting at that index and compare the value of that substring to e.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How many empty strings are in any given string? For each index in the<br>&gt;&gt;&gt; string&#39;s indices, form a substring zero characters in length starting at<br>&gt;&gt;&gt; that index and compare the value of that substring to an empty string.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Wed, Jul 20, 2016 at 17:35 Guillaume Lessard &lt;<br>&gt;&gt;&gt; glessard at tffenterprises.com &lt;mailto:glessard at tffenterprises.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 20 juil. 2016, at 14:21, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Doesn&#39;t your second argument undermine your first? If it&#39;s a trivial<br>&gt;&gt;&gt;&gt; solution and one rarely ever considers empty strings when invoking<br>&gt;&gt;&gt;&gt; `hasPrefix`, then returning the technically correct result must be a<br>&gt;&gt;&gt;&gt; trivial departure in behavior.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I specifically used an example where the trivial solution (y=0 instead of<br>&gt;&gt;&gt;&gt; y=exp(x)) is a pitfall.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; How many empty strings are contained in any given string?<br>&gt;&gt;&gt;&gt; If the answer is infinitely many, it sounds like a pitfall to me.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt;&gt; Guillaume Lessard<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160720/4a0df630/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>July 21, 2016 at 08:00:00am</p></header><div class="content"><p>This is the best argument: lets not make the behaviour surprising to people coming from other languages out there.<br></p><p>&gt; On 21 Jul 2016, at 04:57, Jaden Geller via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; This discussion is getting out of control. Both of these functions have mathematical precedent as well as consistent behaviors in other languages. Observe:<br>&gt; <br>&gt; Python: `&quot;hello world&quot;.startswith(&quot;&quot;)` =&gt; `True`<br>&gt; Java: `&quot;hello world&quot;.startsWith(&quot;&quot;)` =&gt; `true`<br>&gt; JavaScript: `&quot;hello world&quot;.startsWith(&quot;&quot;)` =&gt; `true`<br>&gt; Ruby: `&quot;hello world&quot;.start_with? &quot;&quot;` =&gt; `true`<br>&gt; Rust: `&quot;hello world&quot;.starts_with(&quot;&quot;)` =&gt; `true`<br>&gt; Go: `strings.HasPrefix(&quot;hello world&quot;, &quot;&quot;)` =&gt; `true`<br>&gt; <br>&gt; It&#39;s pretty hard to argue against this. Even if you think these other languages are wrong, Swift must regard the empty String as a prefix to be consistent with itself.<br>&gt; <br>&gt; `str.hasPrefix(String(str.characters.prefix(0)))` =&gt; `false` ?!<br>&gt; <br>&gt; I would expect every prefix of `str` to return true as an argument to `str.hasPrefix`…<br>&gt; <br>&gt;&gt; On Jul 20, 2016, at 6:49 PM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Don’t Panic !<br>&gt;&gt; <br>&gt;&gt; At the risk of seeing things in a somewhat trivial perspective,<br>&gt;&gt; combined with an almost complete absence of abstraction:<br>&gt;&gt; <br>&gt;&gt; Note that to relatively simple persons like me: <br>&gt;&gt; <br>&gt;&gt; String instances are just rows of characters (when not empty, of course) <br>&gt;&gt; <br>&gt;&gt; There are only two kinds of Strings:<br>&gt;&gt; <br>&gt;&gt; 1. empty Strings, which do not contain amy characters at all<br>&gt;&gt; <br>&gt;&gt;   and <br>&gt;&gt; <br>&gt;&gt; 2.  Strings containing 1 or more characters.<br>&gt;&gt; <br>&gt;&gt; Ergo ad Infinitum :<br>&gt;&gt; <br>&gt;&gt; Empty Strings do not occur in Strings that contain characters. <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I’d say, please try to find possible empty strings<br>&gt;&gt; that might perhaps be embedded e.g. in the string below: <br>&gt;&gt;  <br>&gt;&gt; “Don’t Panic: Please read Hitchhiker’s Guide to the Galaxy 42” <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; With all due respect: <br>&gt;&gt; This might void the discussion below :o)<br>&gt;&gt; <br>&gt;&gt; I have nothing against Mathematics as long<br>&gt;&gt; as it is applicable.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Kind Regards<br>&gt;&gt; Ted<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; To the question of whether any given string has the empty string as prefix:<br>&gt;&gt;&gt; yes it does. This is a correct answer, and returning true is a correct<br>&gt;&gt;&gt; behaviour.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; To the question of how many times the empty string occurs in a string: yes,<br>&gt;&gt;&gt; this can be infinite. &quot;a&quot; == &quot;a&quot; + &quot;&quot; == &quot;a&quot; + &quot;&quot; + &quot;&quot; == &quot;a&quot; + &quot;&quot; + &quot;&quot; +<br>&gt;&gt;&gt; &quot;&quot; == &quot;a&quot; + &quot;&quot; + &quot;&quot; + &quot;&quot; + &quot;&quot; == ... etc.. Concatenating an empty string,<br>&gt;&gt;&gt; like adding zero or multiplying by zero for a numerical value, can be done<br>&gt;&gt;&gt; infinitely many times without making a difference.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; However, there&#39;s correctness and convenience. For example, every integer<br>&gt;&gt;&gt; can be expressed as a multiple of prime factors. 1 is technically a prime<br>&gt;&gt;&gt; number - it&#39;s divisible by 1 and itself - but for convenience we say it<br>&gt;&gt;&gt; isn&#39;t a prime number, because if it isn&#39;t, every integer can be expressed<br>&gt;&gt;&gt; uniquely as a multiple of prime factors, whereas if it is, there are an<br>&gt;&gt;&gt; infinite number of such expressions for each integer.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There may be many algorithms which rely on an empty prefix returning false.<br>&gt;&gt;&gt; If hasPrefix and hasSuffix are corrected, those algorithms should be<br>&gt;&gt;&gt; altered to recognise that correction. For example, if breaking up a string<br>&gt;&gt;&gt; using the empty string as a separator, it seems sensible that the sequence<br>&gt;&gt;&gt; of substrings would never contain consecutive empty strings.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Wed, Jul 20, 2016 at 11:58 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;d run this by someone who actually knows math, but afaik there are<br>&gt;&gt;&gt;&gt; finitely many empty strings in any given string.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; How many e&#39;s are in any given string? (Ignoring Unicode issues for now,)<br>&gt;&gt;&gt;&gt; for each index in the string&#39;s indices, form a substring one character in<br>&gt;&gt;&gt;&gt; length starting at that index and compare the value of that substring to e.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; How many empty strings are in any given string? For each index in the<br>&gt;&gt;&gt;&gt; string&#39;s indices, form a substring zero characters in length starting at<br>&gt;&gt;&gt;&gt; that index and compare the value of that substring to an empty string.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Wed, Jul 20, 2016 at 17:35 Guillaume Lessard &lt;<br>&gt;&gt;&gt;&gt; glessard at tffenterprises.com &lt;mailto:glessard at tffenterprises.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On 20 juil. 2016, at 14:21, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Doesn&#39;t your second argument undermine your first? If it&#39;s a trivial<br>&gt;&gt;&gt;&gt;&gt; solution and one rarely ever considers empty strings when invoking<br>&gt;&gt;&gt;&gt;&gt; `hasPrefix`, then returning the technically correct result must be a<br>&gt;&gt;&gt;&gt;&gt; trivial departure in behavior.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I specifically used an example where the trivial solution (y=0 instead of<br>&gt;&gt;&gt;&gt;&gt; y=exp(x)) is a pitfall.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; How many empty strings are contained in any given string?<br>&gt;&gt;&gt;&gt;&gt; If the answer is infinitely many, it sounds like a pitfall to me.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt;&gt;&gt; Guillaume Lessard<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160721/8e3c7528/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d172fa3c47108d84ee35a68e8d675c1?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>Ross O&#39;Brien</string> &lt;narrativium+swift at gmail.com&gt;<p>July 21, 2016 at 10:00:00am</p></header><div class="content"><p>Ted: here&#39;s the counter-challenge.<br></p><p>func emptyStringPrefixChallenge(inputString: String) -&gt; Bool<br>{<br>  let prefixedString = &quot;&quot; + inputString<br>  return (prefixedString == inputString)<br>}<br></p><p>The challenge: find a value for inputString such that this function returns<br>false. Because otherwise, if it returns true for every possible value of<br>inputString, then every String must be acknowledged as having the empty<br>string as a prefix.<br></p><p><br>On Thu, Jul 21, 2016 at 7:24 AM, David Hart via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; This is the best argument: lets not make the behaviour surprising to<br>&gt; people coming from other languages out there.<br>&gt;<br>&gt; On 21 Jul 2016, at 04:57, Jaden Geller via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; This discussion is getting out of control. Both of these functions have<br>&gt; mathematical precedent as well as consistent behaviors in other languages.<br>&gt; Observe:<br>&gt;<br>&gt; Python: `&quot;hello world&quot;.startswith(&quot;&quot;)` =&gt; `True`<br>&gt; Java: `&quot;hello world&quot;.startsWith(&quot;&quot;)` =&gt; `true`<br>&gt; JavaScript: `&quot;hello world&quot;.startsWith(&quot;&quot;)` =&gt; `true`<br>&gt; Ruby: `&quot;hello world&quot;.start_with? &quot;&quot;` =&gt; `true`<br>&gt; Rust: `&quot;hello world&quot;.starts_with(&quot;&quot;)` =&gt; `true`<br>&gt; Go: `strings.HasPrefix(&quot;hello world&quot;, &quot;&quot;)` =&gt; `true`<br>&gt;<br>&gt; It&#39;s pretty hard to argue against this. Even if you think these other<br>&gt; languages are wrong, Swift must regard the empty String as a prefix to be<br>&gt; consistent with itself.<br>&gt;<br>&gt; `str.hasPrefix(String(str.characters.prefix(0)))` =&gt; `false` ?!<br>&gt;<br>&gt; I would expect every prefix of `str` to return true as an argument to<br>&gt; `str.hasPrefix`…<br>&gt;<br>&gt; On Jul 20, 2016, at 6:49 PM, Ted F.A. van Gaalen via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Don’t Panic !<br>&gt;<br>&gt; At the risk of seeing things in a somewhat trivial perspective,<br>&gt; combined with an almost complete absence of abstraction:<br>&gt;<br>&gt; Note that to relatively simple persons like me:<br>&gt;<br>&gt; String instances are just rows of characters (when not empty, of course)<br>&gt;<br>&gt; There are only two kinds of Strings:<br>&gt;<br>&gt; 1. empty Strings, which do not contain amy characters at all<br>&gt;<br>&gt;   and<br>&gt;<br>&gt; 2.  Strings containing 1 or more characters.<br>&gt;<br>&gt; Ergo ad Infinitum :<br>&gt;<br>&gt; Empty Strings do not occur in Strings that contain characters.<br>&gt;<br>&gt;<br>&gt; I’d say, please try to find possible empty strings<br>&gt; that might perhaps be embedded e.g. in the string below:<br>&gt;<br>&gt; “Don’t Panic: Please read Hitchhiker’s Guide to the Galaxy 42”<br>&gt;<br>&gt;<br>&gt; With all due respect:<br>&gt; This might void the discussion below :o)<br>&gt;<br>&gt; I have nothing against Mathematics as long<br>&gt; as it is applicable.<br>&gt;<br>&gt;<br>&gt; Kind Regards<br>&gt; Ted<br>&gt;<br>&gt;<br>&gt;<br>&gt; To the question of whether any given string has the empty string as prefix:<br>&gt; yes it does. This is a correct answer, and returning true is a correct<br>&gt; behaviour.<br>&gt;<br>&gt; To the question of how many times the empty string occurs in a string: yes,<br>&gt; this can be infinite. &quot;a&quot; == &quot;a&quot; + &quot;&quot; == &quot;a&quot; + &quot;&quot; + &quot;&quot; == &quot;a&quot; + &quot;&quot; + &quot;&quot; +<br>&gt; &quot;&quot; == &quot;a&quot; + &quot;&quot; + &quot;&quot; + &quot;&quot; + &quot;&quot; == ... etc.. Concatenating an empty string,<br>&gt; like adding zero or multiplying by zero for a numerical value, can be done<br>&gt; infinitely many times without making a difference.<br>&gt;<br>&gt; However, there&#39;s correctness and convenience. For example, every integer<br>&gt; can be expressed as a multiple of prime factors. 1 is technically a prime<br>&gt; number - it&#39;s divisible by 1 and itself - but for convenience we say it<br>&gt; isn&#39;t a prime number, because if it isn&#39;t, every integer can be expressed<br>&gt; uniquely as a multiple of prime factors, whereas if it is, there are an<br>&gt; infinite number of such expressions for each integer.<br>&gt;<br>&gt; There may be many algorithms which rely on an empty prefix returning false.<br>&gt; If hasPrefix and hasSuffix are corrected, those algorithms should be<br>&gt; altered to recognise that correction. For example, if breaking up a string<br>&gt; using the empty string as a separator, it seems sensible that the sequence<br>&gt; of substrings would never contain consecutive empty strings.<br>&gt;<br>&gt; On Wed, Jul 20, 2016 at 11:58 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I&#39;d run this by someone who actually knows math, but afaik there are<br>&gt; finitely many empty strings in any given string.<br>&gt;<br>&gt; How many e&#39;s are in any given string? (Ignoring Unicode issues for now,)<br>&gt; for each index in the string&#39;s indices, form a substring one character in<br>&gt; length starting at that index and compare the value of that substring to e.<br>&gt;<br>&gt; How many empty strings are in any given string? For each index in the<br>&gt; string&#39;s indices, form a substring zero characters in length starting at<br>&gt; that index and compare the value of that substring to an empty string.<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Wed, Jul 20, 2016 at 17:35 Guillaume Lessard &lt;<br>&gt; glessard at tffenterprises.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On 20 juil. 2016, at 14:21, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; Doesn&#39;t your second argument undermine your first? If it&#39;s a trivial<br>&gt;<br>&gt; solution and one rarely ever considers empty strings when invoking<br>&gt; `hasPrefix`, then returning the technically correct result must be a<br>&gt; trivial departure in behavior.<br>&gt;<br>&gt; I specifically used an example where the trivial solution (y=0 instead of<br>&gt; y=exp(x)) is a pitfall.<br>&gt;<br>&gt; How many empty strings are contained in any given string?<br>&gt; If the answer is infinitely many, it sounds like a pitfall to me.<br>&gt;<br>&gt; Cheers,<br>&gt; Guillaume Lessard<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160721/36f2c49d/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e95942f1fe843f007ef5430b9acff78b?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>Jaden Geller</string> &lt;jaden.geller at gmail.com&gt;<p>July 20, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; I’d say, please try to find possible empty strings<br>&gt; that might perhaps be embedded e.g. in the string below: <br>&gt;  <br>&gt; “Don’t Panic: Please read Hitchhiker’s Guide to the Galaxy 42” <br></p><p>There are many empty strings in that string. In fact, there are infinite empty strings between each character, before the string, and after the string. Observe:<br></p><p>&quot;&quot; + &quot;Don’t Panic: Please read Hitchhiker’s Guide to the Galaxy 42&quot;<br>&quot;&quot; + &quot;&quot; + &quot;Don’t Panic: Please read Hitchhiker’s Guide to the Galaxy 42&quot;<br>&quot;&quot; + &quot;&quot; + &quot;&quot; + &quot;Don’t Panic: Please read Hitchhiker’s Guide to the Galaxy 42&quot;<br>&quot;&quot; + &quot;&quot; + &quot;&quot; + &quot;&quot; + &quot;Don’t Panic: Please read Hitchhiker’s Guide to the Galaxy 42&quot;<br>etc, and I didn&#39;t even get past the first character!<br></p><p>&gt; On Jul 20, 2016, at 6:49 PM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Don’t Panic !<br>&gt; <br>&gt; At the risk of seeing things in a somewhat trivial perspective,<br>&gt; combined with an almost complete absence of abstraction:<br>&gt; <br>&gt; Note that to relatively simple persons like me: <br>&gt; <br>&gt; String instances are just rows of characters (when not empty, of course) <br>&gt; <br>&gt; There are only two kinds of Strings:<br>&gt; <br>&gt; 1. empty Strings, which do not contain amy characters at all<br>&gt; <br>&gt;   and <br>&gt; <br>&gt; 2.  Strings containing 1 or more characters.<br>&gt; <br>&gt; Ergo ad Infinitum :<br>&gt; <br>&gt; Empty Strings do not occur in Strings that contain characters. <br>&gt; <br>&gt; <br>&gt; I’d say, please try to find possible empty strings<br>&gt; that might perhaps be embedded e.g. in the string below: <br>&gt;  <br>&gt; “Don’t Panic: Please read Hitchhiker’s Guide to the Galaxy 42” <br>&gt; <br>&gt; <br>&gt; With all due respect: <br>&gt; This might void the discussion below :o)<br>&gt; <br>&gt; I have nothing against Mathematics as long<br>&gt; as it is applicable.<br>&gt; <br>&gt; <br>&gt; Kind Regards<br>&gt; Ted<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; To the question of whether any given string has the empty string as prefix:<br>&gt;&gt; yes it does. This is a correct answer, and returning true is a correct<br>&gt;&gt; behaviour.<br>&gt;&gt; <br>&gt;&gt; To the question of how many times the empty string occurs in a string: yes,<br>&gt;&gt; this can be infinite. &quot;a&quot; == &quot;a&quot; + &quot;&quot; == &quot;a&quot; + &quot;&quot; + &quot;&quot; == &quot;a&quot; + &quot;&quot; + &quot;&quot; +<br>&gt;&gt; &quot;&quot; == &quot;a&quot; + &quot;&quot; + &quot;&quot; + &quot;&quot; + &quot;&quot; == ... etc.. Concatenating an empty string,<br>&gt;&gt; like adding zero or multiplying by zero for a numerical value, can be done<br>&gt;&gt; infinitely many times without making a difference.<br>&gt;&gt; <br>&gt;&gt; However, there&#39;s correctness and convenience. For example, every integer<br>&gt;&gt; can be expressed as a multiple of prime factors. 1 is technically a prime<br>&gt;&gt; number - it&#39;s divisible by 1 and itself - but for convenience we say it<br>&gt;&gt; isn&#39;t a prime number, because if it isn&#39;t, every integer can be expressed<br>&gt;&gt; uniquely as a multiple of prime factors, whereas if it is, there are an<br>&gt;&gt; infinite number of such expressions for each integer.<br>&gt;&gt; <br>&gt;&gt; There may be many algorithms which rely on an empty prefix returning false.<br>&gt;&gt; If hasPrefix and hasSuffix are corrected, those algorithms should be<br>&gt;&gt; altered to recognise that correction. For example, if breaking up a string<br>&gt;&gt; using the empty string as a separator, it seems sensible that the sequence<br>&gt;&gt; of substrings would never contain consecutive empty strings.<br>&gt;&gt; <br>&gt;&gt; On Wed, Jul 20, 2016 at 11:58 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I&#39;d run this by someone who actually knows math, but afaik there are<br>&gt;&gt;&gt; finitely many empty strings in any given string.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How many e&#39;s are in any given string? (Ignoring Unicode issues for now,)<br>&gt;&gt;&gt; for each index in the string&#39;s indices, form a substring one character in<br>&gt;&gt;&gt; length starting at that index and compare the value of that substring to e.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How many empty strings are in any given string? For each index in the<br>&gt;&gt;&gt; string&#39;s indices, form a substring zero characters in length starting at<br>&gt;&gt;&gt; that index and compare the value of that substring to an empty string.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Wed, Jul 20, 2016 at 17:35 Guillaume Lessard &lt;<br>&gt;&gt;&gt; glessard at tffenterprises.com &lt;mailto:glessard at tffenterprises.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 20 juil. 2016, at 14:21, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Doesn&#39;t your second argument undermine your first? If it&#39;s a trivial<br>&gt;&gt;&gt;&gt; solution and one rarely ever considers empty strings when invoking<br>&gt;&gt;&gt;&gt; `hasPrefix`, then returning the technically correct result must be a<br>&gt;&gt;&gt;&gt; trivial departure in behavior.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I specifically used an example where the trivial solution (y=0 instead of<br>&gt;&gt;&gt;&gt; y=exp(x)) is a pitfall.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; How many empty strings are contained in any given string?<br>&gt;&gt;&gt;&gt; If the answer is infinitely many, it sounds like a pitfall to me.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt;&gt; Guillaume Lessard<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160720/8ab6ec6a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>July 21, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; <br>&gt; There are many empty strings in that string. In fact, there are infinite empty strings between each character, before the string, and after the string. Observe:<br>&gt; <br>&gt; &quot;&quot; + &quot;Don’t Panic: Please read Hitchhiker’s Guide to the Galaxy 42&quot;<br>&gt; &quot;&quot; + &quot;&quot; + &quot;Don’t Panic: Please read Hitchhiker’s Guide to the Galaxy 42&quot;<br>&gt; &quot;&quot; + &quot;&quot; + &quot;&quot; + &quot;Don’t Panic: Please read Hitchhiker’s Guide to the Galaxy 42&quot;<br>&gt; &quot;&quot; + &quot;&quot; + &quot;&quot; + &quot;&quot; + &quot;Don’t Panic: Please read Hitchhiker’s Guide to the Galaxy 42&quot;<br>&gt; etc, and I didn&#39;t even get past the first character!<br>&gt; <br></p><p>Wel, maybe I am not intelligent enough to comprehend that,<br>or maybe it’s just a matter of definition/convention..<br> <br>Again, to me a string is ***just a row of characters***. <br></p><p>therefore, concatenating empty strings (that do not contain any characters)  with other strings have no effect: . <br>for example: <br></p><p>       let res = &quot;&quot; + &quot;&quot; + &quot;&quot; + &quot;&quot; + “The Art Of Learning To Fly”<br></p><p>after that: <br>  <br>     res == “The Art Of Learning To Fly”<br></p><p>and:<br></p><p>     res.count == “The Art Of Learning To Fly”.count<br></p><p>Regardless what in many  other programming languages  is done;<br>I prefer the Objective jC NSString hasPrefix(“&quot;) way of handling this,<br>which always returns False,e because a row of characters<br>is contiguous, without empty “” in between, leading or trailing.  <br></p><p>However, we don’t seem to share the same opinion, about this sorry. <br>nothing more to say about that, I guess.<br></p><p>TedvG<br></p><p><br></p><p>&gt;&gt; On Jul 20, 2016, at 6:49 PM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Don’t Panic !<br>&gt;&gt; <br>&gt;&gt; At the risk of seeing things in a somewhat trivial perspective,<br>&gt;&gt; combined with an almost complete absence of abstraction:<br>&gt;&gt; <br>&gt;&gt; Note that to relatively simple persons like me: <br>&gt;&gt; <br>&gt;&gt; String instances are just rows of characters (when not empty, of course) <br>&gt;&gt; <br>&gt;&gt; There are only two kinds of Strings:<br>&gt;&gt; <br>&gt;&gt; 1. empty Strings, which do not contain amy characters at all<br>&gt;&gt; <br>&gt;&gt;   and <br>&gt;&gt; <br>&gt;&gt; 2.  Strings containing 1 or more characters.<br>&gt;&gt; <br>&gt;&gt; Ergo ad Infinitum :<br>&gt;&gt; <br>&gt;&gt; Empty Strings do not occur in Strings that contain characters. <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I’d say, please try to find possible empty strings<br>&gt;&gt; that might perhaps be embedded e.g. in the string below: <br>&gt;&gt;  <br>&gt;&gt; “Don’t Panic: Please read Hitchhiker’s Guide to the Galaxy 42” <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; With all due respect: <br>&gt;&gt; This might void the discussion below :o)<br>&gt;&gt; <br>&gt;&gt; I have nothing against Mathematics as long<br>&gt;&gt; as it is applicable.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Kind Regards<br>&gt;&gt; Ted<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; To the question of whether any given string has the empty string as prefix:<br>&gt;&gt;&gt; yes it does. This is a correct answer, and returning true is a correct<br>&gt;&gt;&gt; behaviour.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; To the question of how many times the empty string occurs in a string: yes,<br>&gt;&gt;&gt; this can be infinite. &quot;a&quot; == &quot;a&quot; + &quot;&quot; == &quot;a&quot; + &quot;&quot; + &quot;&quot; == &quot;a&quot; + &quot;&quot; + &quot;&quot; +<br>&gt;&gt;&gt; &quot;&quot; == &quot;a&quot; + &quot;&quot; + &quot;&quot; + &quot;&quot; + &quot;&quot; == ... etc.. Concatenating an empty string,<br>&gt;&gt;&gt; like adding zero or multiplying by zero for a numerical value, can be done<br>&gt;&gt;&gt; infinitely many times without making a difference.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; However, there&#39;s correctness and convenience. For example, every integer<br>&gt;&gt;&gt; can be expressed as a multiple of prime factors. 1 is technically a prime<br>&gt;&gt;&gt; number - it&#39;s divisible by 1 and itself - but for convenience we say it<br>&gt;&gt;&gt; isn&#39;t a prime number, because if it isn&#39;t, every integer can be expressed<br>&gt;&gt;&gt; uniquely as a multiple of prime factors, whereas if it is, there are an<br>&gt;&gt;&gt; infinite number of such expressions for each integer.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There may be many algorithms which rely on an empty prefix returning false.<br>&gt;&gt;&gt; If hasPrefix and hasSuffix are corrected, those algorithms should be<br>&gt;&gt;&gt; altered to recognise that correction. For example, if breaking up a string<br>&gt;&gt;&gt; using the empty string as a separator, it seems sensible that the sequence<br>&gt;&gt;&gt; of substrings would never contain consecutive empty strings.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Wed, Jul 20, 2016 at 11:58 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;d run this by someone who actually knows math, but afaik there are<br>&gt;&gt;&gt;&gt; finitely many empty strings in any given string.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; How many e&#39;s are in any given string? (Ignoring Unicode issues for now,)<br>&gt;&gt;&gt;&gt; for each index in the string&#39;s indices, form a substring one character in<br>&gt;&gt;&gt;&gt; length starting at that index and compare the value of that substring to e.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; How many empty strings are in any given string? For each index in the<br>&gt;&gt;&gt;&gt; string&#39;s indices, form a substring zero characters in length starting at<br>&gt;&gt;&gt;&gt; that index and compare the value of that substring to an empty string.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Wed, Jul 20, 2016 at 17:35 Guillaume Lessard &lt;<br>&gt;&gt;&gt;&gt; glessard at tffenterprises.com &lt;mailto:glessard at tffenterprises.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On 20 juil. 2016, at 14:21, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Doesn&#39;t your second argument undermine your first? If it&#39;s a trivial<br>&gt;&gt;&gt;&gt;&gt; solution and one rarely ever considers empty strings when invoking<br>&gt;&gt;&gt;&gt;&gt; `hasPrefix`, then returning the technically correct result must be a<br>&gt;&gt;&gt;&gt;&gt; trivial departure in behavior.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I specifically used an example where the trivial solution (y=0 instead of<br>&gt;&gt;&gt;&gt;&gt; y=exp(x)) is a pitfall.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; How many empty strings are contained in any given string?<br>&gt;&gt;&gt;&gt;&gt; If the answer is infinitely many, it sounds like a pitfall to me.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt;&gt;&gt; Guillaume Lessard<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160721/5fb56edf/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>July 21, 2016 at 04:00:00pm</p></header><div class="content"><p>A deeper problem is that String is already internally inconsistent because<br>of the special case in hasPrefix/Suffix:<br></p><p>    String(&quot;abc&quot;).characters.prefix(0) == &quot;&quot;<br></p><p>which should imply that &quot;abc&quot;.hasPrefix(&quot;&quot;) == true.<br></p><p>The existing implementation of hasPrefix/Suffix inherited from NSString is<br>a bug, not a feature, and I can cite it as a source of actual bugs in<br>production code that I have personal experience with. The correct<br>implementation being proposed here is backed by formal set/sequence theory.<br></p><p>Unfortunately, just fixing hasPrefix/Suffix isn&#39;t enough—since the String<br>type in Swift gets many of its primitive operations via Foundation.NSString<br>bridging, it will still inherit a lot of wrong behavior from there:<br></p><p>    &quot;abc&quot;.rangeOfSubstring(&quot;&quot;) currently returns nil, when it should return<br>Range(startIndex: 0, endIndex: 0), because that is the location of the<br>earliest range where &quot;&quot; is found.<br>    &quot;abc&quot;.containsString(&quot;&quot;) currently returns false when it should return<br>true.<br></p><p>Since Dave Abrahams mentioned earlier that Swift 4 would re-work strings,<br>I&#39;m hopeful that a lot of this inherited behavior from Foundation will be<br>replaced by Swift-native code that does the right thing.<br></p><p><br>On Thu, Jul 21, 2016 at 8:46 AM Ted F.A. van Gaalen via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt;<br>&gt; There are many empty strings in that string. In fact, there are infinite<br>&gt; empty strings between each character, before the string, and after the<br>&gt; string. Observe:<br>&gt;<br>&gt; &quot;&quot; + &quot;Don’t Panic: Please read Hitchhiker’s Guide to the Galaxy 42&quot;<br>&gt; &quot;&quot; + &quot;&quot; + &quot;Don’t Panic: Please read Hitchhiker’s Guide to the Galaxy 42&quot;<br>&gt; &quot;&quot; + &quot;&quot; + &quot;&quot; + &quot;Don’t Panic: Please read Hitchhiker’s Guide to the Galaxy<br>&gt; 42&quot;<br>&gt; &quot;&quot; + &quot;&quot; + &quot;&quot; + &quot;&quot; + &quot;Don’t Panic: Please read Hitchhiker’s Guide to the<br>&gt; Galaxy 42&quot;<br>&gt; etc, and I didn&#39;t even get past the first character!<br>&gt;<br>&gt; Wel, maybe I am not intelligent enough to comprehend that,<br>&gt; or maybe it’s just a matter of definition/convention..<br>&gt;<br>&gt; Again, to me a string is ***just a row of characters***.<br>&gt;<br>&gt; therefore, concatenating empty strings (that do not contain any<br>&gt; characters)  with other strings have no effect: .<br>&gt; for example:<br>&gt;<br>&gt;        let res = &quot;&quot; + &quot;&quot; + &quot;&quot; + &quot;&quot; + “The Art Of Learning To Fly”<br>&gt;<br>&gt; after that:<br>&gt;<br>&gt;      res == “The Art Of Learning To Fly”<br>&gt;<br>&gt; and:<br>&gt;<br>&gt;      res.count == “The Art Of Learning To Fly”.count<br>&gt;<br>&gt; Regardless what in many  other programming languages  is done;<br>&gt; I prefer the Objective jC NSString hasPrefix(“&quot;) way of handling this,<br>&gt; which always returns False,e because a row of characters<br>&gt; is contiguous, without empty “” in between, leading or trailing.<br>&gt;<br>&gt; However, we don’t seem to share the same opinion, about this sorry.<br>&gt; nothing more to say about that, I guess.<br>&gt;<br>&gt; TedvG<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Jul 20, 2016, at 6:49 PM, Ted F.A. van Gaalen via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Don’t Panic !<br>&gt;<br>&gt; At the risk of seeing things in a somewhat trivial perspective,<br>&gt; combined with an almost complete absence of abstraction:<br>&gt;<br>&gt; Note that to relatively simple persons like me:<br>&gt;<br>&gt; String instances are just rows of characters (when not empty, of course)<br>&gt;<br>&gt; There are only two kinds of Strings:<br>&gt;<br>&gt; 1. empty Strings, which do not contain amy characters at all<br>&gt;<br>&gt;   and<br>&gt;<br>&gt; 2.  Strings containing 1 or more characters.<br>&gt;<br>&gt; Ergo ad Infinitum :<br>&gt;<br>&gt; Empty Strings do not occur in Strings that contain characters.<br>&gt;<br>&gt;<br>&gt; I’d say, please try to find possible empty strings<br>&gt; that might perhaps be embedded e.g. in the string below:<br>&gt;<br>&gt; “Don’t Panic: Please read Hitchhiker’s Guide to the Galaxy 42”<br>&gt;<br>&gt;<br>&gt; With all due respect:<br>&gt; This might void the discussion below :o)<br>&gt;<br>&gt; I have nothing against Mathematics as long<br>&gt; as it is applicable.<br>&gt;<br>&gt;<br>&gt; Kind Regards<br>&gt; Ted<br>&gt;<br>&gt;<br>&gt;<br>&gt; To the question of whether any given string has the empty string as prefix:<br>&gt; yes it does. This is a correct answer, and returning true is a correct<br>&gt; behaviour.<br>&gt;<br>&gt; To the question of how many times the empty string occurs in a string: yes,<br>&gt; this can be infinite. &quot;a&quot; == &quot;a&quot; + &quot;&quot; == &quot;a&quot; + &quot;&quot; + &quot;&quot; == &quot;a&quot; + &quot;&quot; + &quot;&quot; +<br>&gt; &quot;&quot; == &quot;a&quot; + &quot;&quot; + &quot;&quot; + &quot;&quot; + &quot;&quot; == ... etc.. Concatenating an empty string,<br>&gt; like adding zero or multiplying by zero for a numerical value, can be done<br>&gt; infinitely many times without making a difference.<br>&gt;<br>&gt; However, there&#39;s correctness and convenience. For example, every integer<br>&gt; can be expressed as a multiple of prime factors. 1 is technically a prime<br>&gt; number - it&#39;s divisible by 1 and itself - but for convenience we say it<br>&gt; isn&#39;t a prime number, because if it isn&#39;t, every integer can be expressed<br>&gt; uniquely as a multiple of prime factors, whereas if it is, there are an<br>&gt; infinite number of such expressions for each integer.<br>&gt;<br>&gt; There may be many algorithms which rely on an empty prefix returning false.<br>&gt; If hasPrefix and hasSuffix are corrected, those algorithms should be<br>&gt; altered to recognise that correction. For example, if breaking up a string<br>&gt; using the empty string as a separator, it seems sensible that the sequence<br>&gt; of substrings would never contain consecutive empty strings.<br>&gt;<br>&gt; On Wed, Jul 20, 2016 at 11:58 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I&#39;d run this by someone who actually knows math, but afaik there are<br>&gt; finitely many empty strings in any given string.<br>&gt;<br>&gt; How many e&#39;s are in any given string? (Ignoring Unicode issues for now,)<br>&gt; for each index in the string&#39;s indices, form a substring one character in<br>&gt; length starting at that index and compare the value of that substring to e.<br>&gt;<br>&gt; How many empty strings are in any given string? For each index in the<br>&gt; string&#39;s indices, form a substring zero characters in length starting at<br>&gt; that index and compare the value of that substring to an empty string.<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Wed, Jul 20, 2016 at 17:35 Guillaume Lessard &lt;<br>&gt; glessard at tffenterprises.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On 20 juil. 2016, at 14:21, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; Doesn&#39;t your second argument undermine your first? If it&#39;s a trivial<br>&gt;<br>&gt; solution and one rarely ever considers empty strings when invoking<br>&gt; `hasPrefix`, then returning the technically correct result must be a<br>&gt; trivial departure in behavior.<br>&gt;<br>&gt; I specifically used an example where the trivial solution (y=0 instead of<br>&gt; y=exp(x)) is a pitfall.<br>&gt;<br>&gt; How many empty strings are contained in any given string?<br>&gt; If the answer is infinitely many, it sounds like a pitfall to me.<br>&gt;<br>&gt; Cheers,<br>&gt; Guillaume Lessard<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160721/05afa309/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>July 21, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jul 21, 2016, at 5:46 PM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; There are many empty strings in that string. In fact, there are infinite empty strings between each character, before the string, and after the string. Observe:<br>&gt;&gt; <br>&gt;&gt; &quot;&quot; + &quot;Don’t Panic: Please read Hitchhiker’s Guide to the Galaxy 42&quot;<br>&gt;&gt; &quot;&quot; + &quot;&quot; + &quot;Don’t Panic: Please read Hitchhiker’s Guide to the Galaxy 42&quot;<br>&gt;&gt; &quot;&quot; + &quot;&quot; + &quot;&quot; + &quot;Don’t Panic: Please read Hitchhiker’s Guide to the Galaxy 42&quot;<br>&gt;&gt; &quot;&quot; + &quot;&quot; + &quot;&quot; + &quot;&quot; + &quot;Don’t Panic: Please read Hitchhiker’s Guide to the Galaxy 42&quot;<br>&gt;&gt; etc, and I didn&#39;t even get past the first character!<br>&gt;&gt; <br>&gt; <br>&gt; Wel, maybe I am not intelligent enough to comprehend that,<br>&gt; or maybe it’s just a matter of definition/convention..<br>&gt;  <br>&gt; Again, to me a string is ***just a row of characters***. <br></p><p>In which case it should be even more confusing to you:<br></p><p>let str = &quot;Hello&quot;<br>str.characters.starts(with: &quot;&quot;.characters) // true<br>str.hasPrefix(&quot;&quot;) // false<br></p><p>&gt; <br>&gt; therefore, concatenating empty strings (that do not contain any characters)  with other strings have no effect: . <br>&gt; for example: <br>&gt; <br>&gt;        let res = &quot;&quot; + &quot;&quot; + &quot;&quot; + &quot;&quot; + “The Art Of Learning To Fly”<br>&gt; <br>&gt; after that: <br>&gt;   <br>&gt;      res == “The Art Of Learning To Fly”<br>&gt; <br>&gt; and:<br>&gt; <br>&gt;      res.count == “The Art Of Learning To Fly”.count<br>&gt; <br>&gt; Regardless what in many  other programming languages  is done;<br>&gt; I prefer the Objective jC NSString hasPrefix(“&quot;) way of handling this,<br>&gt; which always returns False,e because a row of characters<br>&gt; is contiguous, without empty “” in between, leading or trailing.  <br>&gt; <br>&gt; However, we don’t seem to share the same opinion, about this sorry. <br>&gt; nothing more to say about that, I guess.<br>&gt; <br>&gt; TedvG<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt;&gt; On Jul 20, 2016, at 6:49 PM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Don’t Panic !<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; At the risk of seeing things in a somewhat trivial perspective,<br>&gt;&gt;&gt; combined with an almost complete absence of abstraction:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Note that to relatively simple persons like me: <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; String instances are just rows of characters (when not empty, of course) <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There are only two kinds of Strings:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. empty Strings, which do not contain amy characters at all<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   and <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 2.  Strings containing 1 or more characters.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Ergo ad Infinitum :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Empty Strings do not occur in Strings that contain characters. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’d say, please try to find possible empty strings<br>&gt;&gt;&gt; that might perhaps be embedded e.g. in the string below: <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; “Don’t Panic: Please read Hitchhiker’s Guide to the Galaxy 42” <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; With all due respect: <br>&gt;&gt;&gt; This might void the discussion below :o)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I have nothing against Mathematics as long<br>&gt;&gt;&gt; as it is applicable.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Kind Regards<br>&gt;&gt;&gt; Ted<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; To the question of whether any given string has the empty string as prefix:<br>&gt;&gt;&gt;&gt; yes it does. This is a correct answer, and returning true is a correct<br>&gt;&gt;&gt;&gt; behaviour.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; To the question of how many times the empty string occurs in a string: yes,<br>&gt;&gt;&gt;&gt; this can be infinite. &quot;a&quot; == &quot;a&quot; + &quot;&quot; == &quot;a&quot; + &quot;&quot; + &quot;&quot; == &quot;a&quot; + &quot;&quot; + &quot;&quot; +<br>&gt;&gt;&gt;&gt; &quot;&quot; == &quot;a&quot; + &quot;&quot; + &quot;&quot; + &quot;&quot; + &quot;&quot; == ... etc.. Concatenating an empty string,<br>&gt;&gt;&gt;&gt; like adding zero or multiplying by zero for a numerical value, can be done<br>&gt;&gt;&gt;&gt; infinitely many times without making a difference.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; However, there&#39;s correctness and convenience. For example, every integer<br>&gt;&gt;&gt;&gt; can be expressed as a multiple of prime factors. 1 is technically a prime<br>&gt;&gt;&gt;&gt; number - it&#39;s divisible by 1 and itself - but for convenience we say it<br>&gt;&gt;&gt;&gt; isn&#39;t a prime number, because if it isn&#39;t, every integer can be expressed<br>&gt;&gt;&gt;&gt; uniquely as a multiple of prime factors, whereas if it is, there are an<br>&gt;&gt;&gt;&gt; infinite number of such expressions for each integer.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; There may be many algorithms which rely on an empty prefix returning false.<br>&gt;&gt;&gt;&gt; If hasPrefix and hasSuffix are corrected, those algorithms should be<br>&gt;&gt;&gt;&gt; altered to recognise that correction. For example, if breaking up a string<br>&gt;&gt;&gt;&gt; using the empty string as a separator, it seems sensible that the sequence<br>&gt;&gt;&gt;&gt; of substrings would never contain consecutive empty strings.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Wed, Jul 20, 2016 at 11:58 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I&#39;d run this by someone who actually knows math, but afaik there are<br>&gt;&gt;&gt;&gt;&gt; finitely many empty strings in any given string.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; How many e&#39;s are in any given string? (Ignoring Unicode issues for now,)<br>&gt;&gt;&gt;&gt;&gt; for each index in the string&#39;s indices, form a substring one character in<br>&gt;&gt;&gt;&gt;&gt; length starting at that index and compare the value of that substring to e.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; How many empty strings are in any given string? For each index in the<br>&gt;&gt;&gt;&gt;&gt; string&#39;s indices, form a substring zero characters in length starting at<br>&gt;&gt;&gt;&gt;&gt; that index and compare the value of that substring to an empty string.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Wed, Jul 20, 2016 at 17:35 Guillaume Lessard &lt;<br>&gt;&gt;&gt;&gt;&gt; glessard at tffenterprises.com &lt;mailto:glessard at tffenterprises.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On 20 juil. 2016, at 14:21, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Doesn&#39;t your second argument undermine your first? If it&#39;s a trivial<br>&gt;&gt;&gt;&gt;&gt;&gt; solution and one rarely ever considers empty strings when invoking<br>&gt;&gt;&gt;&gt;&gt;&gt; `hasPrefix`, then returning the technically correct result must be a<br>&gt;&gt;&gt;&gt;&gt;&gt; trivial departure in behavior.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I specifically used an example where the trivial solution (y=0 instead of<br>&gt;&gt;&gt;&gt;&gt;&gt; y=exp(x)) is a pitfall.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; How many empty strings are contained in any given string?<br>&gt;&gt;&gt;&gt;&gt;&gt; If the answer is infinitely many, it sounds like a pitfall to me.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt;&gt;&gt;&gt; Guillaume Lessard<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160721/c2ad2ca9/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
