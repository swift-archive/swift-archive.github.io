<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: Rewrite Swift compiler in swift to get ideas for further language evolution.</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>December 19, 2015 at 04:00:00pm</p></header><div class="content"><p>Compiler code is probably more typical of what most programmers write than library code and so would be ideal for suggesting further language evolution ideas.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/268d9a6a10ecdf70a24fdf96d03cec1c?s=50"></div><header><strong>Proposal: Rewrite Swift compiler in swift to get ideas for further language evolution.</strong> from <string>Colin Barrett</string> &lt;colin at springsandstruts.com&gt;<p>December 19, 2015 at 07:00:00pm</p></header><div class="content"><p>I’d recommend you read http://tratt.net/laurie/blog/entries/the_bootstrapped_compiler_and_the_damage_done &lt;http://tratt.net/laurie/blog/entries/the_bootstrapped_compiler_and_the_damage_done&gt;, which has a number of rebuttals to what you’ve said below.<br></p><p>&gt; On Dec 19, 2015, at 4:41 PM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Compiler code is probably more typical of what most programmers write than library code and so would be ideal for suggesting further language evolution ideas.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/70cc904a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: Rewrite Swift compiler in swift to get ideas for further language evolution.</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>December 19, 2015 at 07:00:00pm</p></header><div class="content"><p>&gt; On Dec 19, 2015, at 7:21 PM, Colin Barrett &lt;colin at springsandstruts.com&gt; wrote:<br>&gt; <br>&gt; I’d recommend you read http://tratt.net/laurie/blog/entries/the_bootstrapped_compiler_and_the_damage_done &lt;http://tratt.net/laurie/blog/entries/the_bootstrapped_compiler_and_the_damage_done&gt;, which has a number of rebuttals to what you’ve said below.<br>&gt; <br></p><p>That’s an interesting article but it doesn’t address the issue of whether compiler code is more like normal programming than compiler standard library code.<br></p><p>&gt;&gt; On Dec 19, 2015, at 4:41 PM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Compiler code is probably more typical of what most programmers write than library code and so would be ideal for suggesting further language evolution ideas.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/e07c8e88/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/268d9a6a10ecdf70a24fdf96d03cec1c?s=50"></div><header><strong>Proposal: Rewrite Swift compiler in swift to get ideas for further language evolution.</strong> from <string>Colin Barrett</string> &lt;colin at springsandstruts.com&gt;<p>December 19, 2015 at 07:00:00pm</p></header><div class="content"><p>&gt; On Dec 19, 2015, at 7:32 PM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 19, 2015, at 7:21 PM, Colin Barrett &lt;colin at springsandstruts.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I’d recommend you read http://tratt.net/laurie/blog/entries/the_bootstrapped_compiler_and_the_damage_done, which has a number of rebuttals to what you’ve said below.<br>&gt;&gt; <br>&gt; <br>&gt; That’s an interesting article but it doesn’t address the issue of whether compiler code is more like normal programming than compiler standard library code.<br></p><p>Perhaps I don’t understand what you mean, but the article gives two good reasons why compiler code is special. The first reason is that we understand a lot about how to design a compiler, much more than we understand about how to design other types of programs. The second follows:<br></p><p>&gt; [C]ompilers are an atypical class of program. In essence, a compiler is a simple batch pipeline process. A program is read in and translated to a tree; a series of tree transformations are applied; and eventually one of those trees is saved out as some sort of binary data (e.g. machine code or bytecode). Most of the intermediate tree transformations calculate a relatively simple bit of information about the program and create a slightly modified tree based on it. A few calculations crop up time and time again, such as: maps from variables to scopes or types; and stacks to determine closures. Significantly, and unlike most programs in the real world, there is no interaction with users: the compiler knows all it needs about the outside world from the moment it is called.<br></p><p>Personally, I think the main reason not to rewrite the Swift compiler is that it would be a distraction from improving the Swift language and other associated tools.<br></p><p>-Colin<br></p><p>&gt;&gt;&gt; On Dec 19, 2015, at 4:41 PM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Compiler code is probably more typical of what most programmers write than library code and so would be ideal for suggesting further language evolution ideas.<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: Rewrite Swift compiler in swift to get ideas for further language evolution.</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>December 19, 2015 at 07:00:00pm</p></header><div class="content"><p>&gt; On Dec 19, 2015, at 7:37 PM, Colin Barrett &lt;colin at springsandstruts.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 19, 2015, at 7:32 PM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 19, 2015, at 7:21 PM, Colin Barrett &lt;colin at springsandstruts.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’d recommend you read http://tratt.net/laurie/blog/entries/the_bootstrapped_compiler_and_the_damage_done, which has a number of rebuttals to what you’ve said below.<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; That’s an interesting article but it doesn’t address the issue of whether compiler code is more like normal programming than compiler standard library code.<br>&gt; <br>&gt; Perhaps I don’t understand what you mean, but the article gives two good reasons why compiler code is special.<br></p><p>Compiler standard library code tends to be very abstract and full of generics. Normal code isn’t like that.<br></p><p>&gt; The first reason is that we understand a lot about how to design a compiler, much more than we understand about how to design other types of programs. The second follows:<br>&gt; <br>&gt;&gt; [C]ompilers are an atypical class of program. In essence, a compiler is a simple batch pipeline process. A program is read in and translated to a tree; a series of tree transformations are applied; and eventually one of those trees is saved out as some sort of binary data (e.g. machine code or bytecode). Most of the intermediate tree transformations calculate a relatively simple bit of information about the program and create a slightly modified tree based on it. A few calculations crop up time and time again, such as: maps from variables to scopes or types; and stacks to determine closures. Significantly, and unlike most programs in the real world, there is no interaction with users: the compiler knows all it needs about the outside world from the moment it is called.<br>&gt; <br>&gt; Personally, I think the main reason not to rewrite the Swift compiler is that it would be a distraction from improving the Swift language and other associated tools.<br>&gt; <br>&gt; -Colin<br>&gt; <br>&gt;&gt;&gt;&gt; On Dec 19, 2015, at 4:41 PM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Compiler code is probably more typical of what most programmers write than library code and so would be ideal for suggesting further language evolution ideas.<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/268d9a6a10ecdf70a24fdf96d03cec1c?s=50"></div><header><strong>Proposal: Rewrite Swift compiler in swift to get ideas for further language evolution.</strong> from <string>Colin Barrett</string> &lt;colin at springsandstruts.com&gt;<p>December 19, 2015 at 07:00:00pm</p></header><div class="content"><p>&gt; On Dec 19, 2015, at 7:39 PM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 19, 2015, at 7:37 PM, Colin Barrett &lt;colin at springsandstruts.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 19, 2015, at 7:32 PM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 19, 2015, at 7:21 PM, Colin Barrett &lt;colin at springsandstruts.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’d recommend you read http://tratt.net/laurie/blog/entries/the_bootstrapped_compiler_and_the_damage_done, which has a number of rebuttals to what you’ve said below.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That’s an interesting article but it doesn’t address the issue of whether compiler code is more like normal programming than compiler standard library code.<br>&gt;&gt; <br>&gt;&gt; Perhaps I don’t understand what you mean, but the article gives two good reasons why compiler code is special.<br>&gt; <br>&gt; Compiler standard library code tends to be very abstract and full of generics. Normal code isn’t like that.<br></p><p>Speak for yourself ;-)<br></p><p>&gt; <br>&gt;&gt; The first reason is that we understand a lot about how to design a compiler, much more than we understand about how to design other types of programs. The second follows:<br>&gt;&gt; <br>&gt;&gt;&gt; [C]ompilers are an atypical class of program. In essence, a compiler is a simple batch pipeline process. A program is read in and translated to a tree; a series of tree transformations are applied; and eventually one of those trees is saved out as some sort of binary data (e.g. machine code or bytecode). Most of the intermediate tree transformations calculate a relatively simple bit of information about the program and create a slightly modified tree based on it. A few calculations crop up time and time again, such as: maps from variables to scopes or types; and stacks to determine closures. Significantly, and unlike most programs in the real world, there is no interaction with users: the compiler knows all it needs about the outside world from the moment it is called.<br>&gt;&gt; <br>&gt;&gt; Personally, I think the main reason not to rewrite the Swift compiler is that it would be a distraction from improving the Swift language and other associated tools.<br>&gt;&gt; <br>&gt;&gt; -Colin<br>&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 19, 2015, at 4:41 PM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Compiler code is probably more typical of what most programmers write than library code and so would be ideal for suggesting further language evolution ideas.<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/f5c1e7c7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>Proposal: Rewrite Swift compiler in swift to get ideas for further language evolution.</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>December 20, 2015 at 12:00:00pm</p></header><div class="content"><p>My code is often abstract and full of generics, but the standard library<br>code does do several things that aren&#39;t the swift we all know and love,<br>from my brief tinkering I&#39;ve seen at least these things:<br> * It defines public protocols dependent on private protocols like<br>_MaxBuiltinIntegerType<br> * It uses special type annotations like @_transparent<br> * It extensively uses macro-like files (See FixedPoint.swift.gyb)<br> * The Builtin module, where do I find that?<br></p><p>I think to a certain extent these things are probably necessary to get the<br>work done and make it flexible, and I&#39;m sure the need for them will<br>decrease over time. However it does mean that the dev team doesn&#39;t have the<br>same restrictions on design and implementation that we do. This also means<br>that the dev team is essentially using a different version of Swift and<br>that will inform their decisions on what Swift needs and how it should be<br>used.<br></p><p>As for writing the compiler in Swift, I think this would be great, I<br>haven&#39;t read Colin&#39;s article yet but it sounds like a valid concern.<br></p><p>It&#39;s a huge undertaking and perhaps something that can be done<br>incrementally by the community as well. Chris Lattner has mentioned in the<br>past that many of the devs working on Swift would love to do this:<br></p><p>&gt;From his twitter (<br>https://twitter.com/clattner_llvm/status/613906970890801152):<br></p><p>@*siracusa* Many of us would love to rewrite the swift compiler in swift -<br>it would crash a lot less, and be a lot more joyful for us.<br></p><p>@*siracusa* that said, we have a ton of other higher priorities that affect<br>users of swift.  Poor compiler hackers just have to suffer for now<br></p><p>&lt;https://twitter.com/clattner_llvm/status/613906586050826241&gt;<br></p><p><br>On Sun, Dec 20, 2015 at 11:40 AM, Colin Barrett via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Dec 19, 2015, at 7:39 PM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Dec 19, 2015, at 7:37 PM, Colin Barrett &lt;colin at springsandstruts.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Dec 19, 2015, at 7:32 PM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Dec 19, 2015, at 7:21 PM, Colin Barrett &lt;colin at springsandstruts.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; I’d recommend you read<br>&gt; http://tratt.net/laurie/blog/entries/the_bootstrapped_compiler_and_the_damage_done,<br>&gt; which has a number of rebuttals to what you’ve said below.<br>&gt;<br>&gt;<br>&gt; That’s an interesting article but it doesn’t address the issue of whether<br>&gt; compiler code is more like normal programming than compiler standard<br>&gt; library code.<br>&gt;<br>&gt;<br>&gt; Perhaps I don’t understand what you mean, but the article gives two good<br>&gt; reasons why compiler code is special.<br>&gt;<br>&gt;<br>&gt; Compiler standard library code tends to be very abstract and full of<br>&gt; generics. Normal code isn’t like that.<br>&gt;<br>&gt;<br>&gt; Speak for yourself ;-)<br>&gt;<br>&gt;<br>&gt; The first reason is that we understand a lot about how to design a<br>&gt; compiler, much more than we understand about how to design other types of<br>&gt; programs. The second follows:<br>&gt;<br>&gt; [C]ompilers are an atypical class of program. In essence, a compiler is a<br>&gt; simple batch pipeline process. A program is read in and translated to a<br>&gt; tree; a series of tree transformations are applied; and eventually one of<br>&gt; those trees is saved out as some sort of binary data (e.g. machine code or<br>&gt; bytecode). Most of the intermediate tree transformations calculate a<br>&gt; relatively simple bit of information about the program and create a<br>&gt; slightly modified tree based on it. A few calculations crop up time and<br>&gt; time again, such as: maps from variables to scopes or types; and stacks to<br>&gt; determine closures. Significantly, and unlike most programs in the real<br>&gt; world, there is no interaction with users: the compiler knows all it needs<br>&gt; about the outside world from the moment it is called.<br>&gt;<br>&gt;<br>&gt; Personally, I think the main reason not to rewrite the Swift compiler is<br>&gt; that it would be a distraction from improving the Swift language and other<br>&gt; associated tools.<br>&gt;<br>&gt; -Colin<br>&gt;<br>&gt; On Dec 19, 2015, at 4:41 PM, Amir Michail via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Compiler code is probably more typical of what most programmers write than<br>&gt; library code and so would be ideal for suggesting further language<br>&gt; evolution ideas.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/177e14c9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Proposal: Rewrite Swift compiler in swift to get ideas for further language evolution.</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>December 19, 2015 at 09:00:00pm</p></header><div class="content"><p>Beyond whether or not a standard library provides a better simulation of &quot;actual programming&quot; than a standard library, making a Swift compiler in Swift is a massive undertaking. The Go maintainers started working on a self-hosting compiler 3 years after the language&#39;s initial release and it took them another two years to get it right.<br></p><p>Félix<br></p><p>&gt; Le 19 déc. 2015 à 20:06:48, Andrew Bennett via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; My code is often abstract and full of generics, but the standard library code does do several things that aren&#39;t the swift we all know and love, from my brief tinkering I&#39;ve seen at least these things:<br>&gt;  * It defines public protocols dependent on private protocols like _MaxBuiltinIntegerType<br>&gt;  * It uses special type annotations like @_transparent<br>&gt;  * It extensively uses macro-like files (See FixedPoint.swift.gyb)<br>&gt;  * The Builtin module, where do I find that?<br>&gt; <br>&gt; I think to a certain extent these things are probably necessary to get the work done and make it flexible, and I&#39;m sure the need for them will decrease over time. However it does mean that the dev team doesn&#39;t have the same restrictions on design and implementation that we do. This also means that the dev team is essentially using a different version of Swift and that will inform their decisions on what Swift needs and how it should be used.<br>&gt; <br>&gt; As for writing the compiler in Swift, I think this would be great, I haven&#39;t read Colin&#39;s article yet but it sounds like a valid concern.<br>&gt; <br>&gt; It&#39;s a huge undertaking and perhaps something that can be done incrementally by the community as well. Chris Lattner has mentioned in the past that many of the devs working on Swift would love to do this:<br>&gt; <br>&gt; From his twitter (https://twitter.com/clattner_llvm/status/613906970890801152 &lt;https://twitter.com/clattner_llvm/status/613906970890801152&gt;):<br>&gt; @siracusa Many of us would love to rewrite the swift compiler in swift - it would crash a lot less, and be a lot more joyful for us.<br>&gt; <br>&gt; @siracusa that said, we have a ton of other higher priorities that affect users of swift.  Poor compiler hackers just have to suffer for now<br>&gt;  &lt;https://twitter.com/clattner_llvm/status/613906586050826241&gt;<br>&gt; <br>&gt; <br>&gt; On Sun, Dec 20, 2015 at 11:40 AM, Colin Barrett via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Dec 19, 2015, at 7:39 PM, Amir Michail &lt;a.michail at me.com &lt;mailto:a.michail at me.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Dec 19, 2015, at 7:37 PM, Colin Barrett &lt;colin at springsandstruts.com &lt;mailto:colin at springsandstruts.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 19, 2015, at 7:32 PM, Amir Michail &lt;a.michail at me.com &lt;mailto:a.michail at me.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 19, 2015, at 7:21 PM, Colin Barrett &lt;colin at springsandstruts.com &lt;mailto:colin at springsandstruts.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I’d recommend you read http://tratt.net/laurie/blog/entries/the_bootstrapped_compiler_and_the_damage_done &lt;http://tratt.net/laurie/blog/entries/the_bootstrapped_compiler_and_the_damage_done&gt;, which has a number of rebuttals to what you’ve said below.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; That’s an interesting article but it doesn’t address the issue of whether compiler code is more like normal programming than compiler standard library code.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Perhaps I don’t understand what you mean, but the article gives two good reasons why compiler code is special.<br>&gt;&gt; <br>&gt;&gt; Compiler standard library code tends to be very abstract and full of generics. Normal code isn’t like that.<br>&gt; <br>&gt; Speak for yourself ;-)<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; The first reason is that we understand a lot about how to design a compiler, much more than we understand about how to design other types of programs. The second follows:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; [C]ompilers are an atypical class of program. In essence, a compiler is a simple batch pipeline process. A program is read in and translated to a tree; a series of tree transformations are applied; and eventually one of those trees is saved out as some sort of binary data (e.g. machine code or bytecode). Most of the intermediate tree transformations calculate a relatively simple bit of information about the program and create a slightly modified tree based on it. A few calculations crop up time and time again, such as: maps from variables to scopes or types; and stacks to determine closures. Significantly, and unlike most programs in the real world, there is no interaction with users: the compiler knows all it needs about the outside world from the moment it is called.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Personally, I think the main reason not to rewrite the Swift compiler is that it would be a distraction from improving the Swift language and other associated tools.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Colin<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Dec 19, 2015, at 4:41 PM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Compiler code is probably more typical of what most programmers write than library code and so would be ideal for suggesting further language evolution ideas.<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/6047bf82/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>Proposal: Rewrite Swift compiler in swift to get ideas for further language evolution.</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>December 20, 2015 at 09:00:00pm</p></header><div class="content"><p>https://github.com/apple/swift/blob/2c7b0b22831159396fe0e98e5944e64a483c356e/www/FAQ.rst<br></p><p>On Sat, Dec 19, 2015 at 5:06 PM, Andrew Bennett via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; My code is often abstract and full of generics, but the standard library<br>&gt; code does do several things that aren&#39;t the swift we all know and love,<br>&gt; from my brief tinkering I&#39;ve seen at least these things:<br>&gt;  * It defines public protocols dependent on private protocols like<br>&gt; _MaxBuiltinIntegerType<br>&gt;  * It uses special type annotations like @_transparent<br>&gt;  * It extensively uses macro-like files (See FixedPoint.swift.gyb)<br>&gt;  * The Builtin module, where do I find that?<br>&gt;<br>&gt; I think to a certain extent these things are probably necessary to get the<br>&gt; work done and make it flexible, and I&#39;m sure the need for them will<br>&gt; decrease over time. However it does mean that the dev team doesn&#39;t have the<br>&gt; same restrictions on design and implementation that we do. This also means<br>&gt; that the dev team is essentially using a different version of Swift and<br>&gt; that will inform their decisions on what Swift needs and how it should be<br>&gt; used.<br>&gt;<br>&gt; As for writing the compiler in Swift, I think this would be great, I<br>&gt; haven&#39;t read Colin&#39;s article yet but it sounds like a valid concern.<br>&gt;<br>&gt; It&#39;s a huge undertaking and perhaps something that can be done<br>&gt; incrementally by the community as well. Chris Lattner has mentioned in the<br>&gt; past that many of the devs working on Swift would love to do this:<br>&gt;<br>&gt; From his twitter (<br>&gt; https://twitter.com/clattner_llvm/status/613906970890801152):<br>&gt;<br>&gt; @*siracusa* Many of us would love to rewrite the swift compiler in swift<br>&gt; - it would crash a lot less, and be a lot more joyful for us.<br>&gt;<br>&gt; @*siracusa* that said, we have a ton of other higher priorities that<br>&gt; affect users of swift.  Poor compiler hackers just have to suffer for now<br>&gt;<br>&gt; &lt;https://twitter.com/clattner_llvm/status/613906586050826241&gt;<br>&gt;<br>&gt;<br>&gt; On Sun, Dec 20, 2015 at 11:40 AM, Colin Barrett via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Dec 19, 2015, at 7:39 PM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Dec 19, 2015, at 7:37 PM, Colin Barrett &lt;colin at springsandstruts.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Dec 19, 2015, at 7:32 PM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Dec 19, 2015, at 7:21 PM, Colin Barrett &lt;colin at springsandstruts.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I’d recommend you read<br>&gt;&gt; http://tratt.net/laurie/blog/entries/the_bootstrapped_compiler_and_the_damage_done,<br>&gt;&gt; which has a number of rebuttals to what you’ve said below.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; That’s an interesting article but it doesn’t address the issue of whether<br>&gt;&gt; compiler code is more like normal programming than compiler standard<br>&gt;&gt; library code.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Perhaps I don’t understand what you mean, but the article gives two good<br>&gt;&gt; reasons why compiler code is special.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Compiler standard library code tends to be very abstract and full of<br>&gt;&gt; generics. Normal code isn’t like that.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Speak for yourself ;-)<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; The first reason is that we understand a lot about how to design a<br>&gt;&gt; compiler, much more than we understand about how to design other types of<br>&gt;&gt; programs. The second follows:<br>&gt;&gt;<br>&gt;&gt; [C]ompilers are an atypical class of program. In essence, a compiler is a<br>&gt;&gt; simple batch pipeline process. A program is read in and translated to a<br>&gt;&gt; tree; a series of tree transformations are applied; and eventually one of<br>&gt;&gt; those trees is saved out as some sort of binary data (e.g. machine code or<br>&gt;&gt; bytecode). Most of the intermediate tree transformations calculate a<br>&gt;&gt; relatively simple bit of information about the program and create a<br>&gt;&gt; slightly modified tree based on it. A few calculations crop up time and<br>&gt;&gt; time again, such as: maps from variables to scopes or types; and stacks to<br>&gt;&gt; determine closures. Significantly, and unlike most programs in the real<br>&gt;&gt; world, there is no interaction with users: the compiler knows all it needs<br>&gt;&gt; about the outside world from the moment it is called.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Personally, I think the main reason not to rewrite the Swift compiler is<br>&gt;&gt; that it would be a distraction from improving the Swift language and other<br>&gt;&gt; associated tools.<br>&gt;&gt;<br>&gt;&gt; -Colin<br>&gt;&gt;<br>&gt;&gt; On Dec 19, 2015, at 4:41 PM, Amir Michail via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Compiler code is probably more typical of what most programmers write<br>&gt;&gt; than library code and so would be ideal for suggesting further language<br>&gt;&gt; evolution ideas.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/2c97cf8d/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/73a38bb7bc9528e31098defe30e68ea4?s=50"></div><header><strong>Proposal: Rewrite Swift compiler in swift to get ideas for further language evolution.</strong> from <string>Jean-Daniel Dupas</string> &lt;mailing at xenonium.com&gt;<p>December 21, 2015 at 12:00:00pm</p></header><div class="content"><p>&gt; Le 20 déc. 2015 à 01:37, Colin Barrett via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 19, 2015, at 7:32 PM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 19, 2015, at 7:21 PM, Colin Barrett &lt;colin at springsandstruts.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’d recommend you read http://tratt.net/laurie/blog/entries/the_bootstrapped_compiler_and_the_damage_done, which has a number of rebuttals to what you’ve said below.<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; That’s an interesting article but it doesn’t address the issue of whether compiler code is more like normal programming than compiler standard library code.<br>&gt; <br>&gt; Perhaps I don’t understand what you mean, but the article gives two good reasons why compiler code is special. The first reason is that we understand a lot about how to design a compiler, much more than we understand about how to design other types of programs. The second follows:<br>&gt; <br>&gt;&gt; [C]ompilers are an atypical class of program. In essence, a compiler is a simple batch pipeline process. A program is read in and translated to a tree; a series of tree transformations are applied; and eventually one of those trees is saved out as some sort of binary data (e.g. machine code or bytecode). Most of the intermediate tree transformations calculate a relatively simple bit of information about the program and create a slightly modified tree based on it. A few calculations crop up time and time again, such as: maps from variables to scopes or types; and stacks to determine closures. Significantly, and unlike most programs in the real world, there is no interaction with users: the compiler knows all it needs about the outside world from the moment it is called.<br>&gt; <br>&gt; Personally, I think the main reason not to rewrite the Swift compiler is that it would be a distraction from improving the Swift language and other associated tools.<br>&gt; <br>&gt; -Colin<br>&gt; <br></p><p>An other reason is that is make it harder to port to new platforms. You would have to do all the dev using cross compilation from another platform instead of just working on the target platform directly.<br></p><p>Jean-Daniel<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>Proposal: Rewrite Swift compiler in swift to get ideas for further language evolution.</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>December 26, 2015 at 01:00:00pm</p></header><div class="content"><p>This may address many of the concerns, and perhaps lower the barriers to<br>the community contributing:<br>     How about instead of rewriting the entire compiler in Swift, we just<br>rewrite the Swift -&gt; SIL component?<br></p><p>On Mon, Dec 21, 2015 at 10:54 PM, Jean-Daniel Dupas via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; Le 20 déc. 2015 à 01:37, Colin Barrett via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;&gt; On Dec 19, 2015, at 7:32 PM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On Dec 19, 2015, at 7:21 PM, Colin Barrett &lt;colin at springsandstruts.com&gt;<br>&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; I’d recommend you read<br>&gt; http://tratt.net/laurie/blog/entries/the_bootstrapped_compiler_and_the_damage_done,<br>&gt; which has a number of rebuttals to what you’ve said below.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; That’s an interesting article but it doesn’t address the issue of<br>&gt; whether compiler code is more like normal programming than compiler<br>&gt; standard library code.<br>&gt; &gt;<br>&gt; &gt; Perhaps I don’t understand what you mean, but the article gives two good<br>&gt; reasons why compiler code is special. The first reason is that we<br>&gt; understand a lot about how to design a compiler, much more than we<br>&gt; understand about how to design other types of programs. The second follows:<br>&gt; &gt;<br>&gt; &gt;&gt; [C]ompilers are an atypical class of program. In essence, a compiler is<br>&gt; a simple batch pipeline process. A program is read in and translated to a<br>&gt; tree; a series of tree transformations are applied; and eventually one of<br>&gt; those trees is saved out as some sort of binary data (e.g. machine code or<br>&gt; bytecode). Most of the intermediate tree transformations calculate a<br>&gt; relatively simple bit of information about the program and create a<br>&gt; slightly modified tree based on it. A few calculations crop up time and<br>&gt; time again, such as: maps from variables to scopes or types; and stacks to<br>&gt; determine closures. Significantly, and unlike most programs in the real<br>&gt; world, there is no interaction with users: the compiler knows all it needs<br>&gt; about the outside world from the moment it is called.<br>&gt; &gt;<br>&gt; &gt; Personally, I think the main reason not to rewrite the Swift compiler is<br>&gt; that it would be a distraction from improving the Swift language and other<br>&gt; associated tools.<br>&gt; &gt;<br>&gt; &gt; -Colin<br>&gt; &gt;<br>&gt;<br>&gt; An other reason is that is make it harder to port to new platforms. You<br>&gt; would have to do all the dev using cross compilation from another platform<br>&gt; instead of just working on the target platform directly.<br>&gt;<br>&gt; Jean-Daniel<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151226/f3589a75/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>Proposal: Rewrite Swift compiler in swift to get ideas for further language evolution.</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>December 26, 2015 at 12:00:00pm</p></header><div class="content"><p>We&#39;ve asked this a few times. Chris Lattner has said something about it<br>already.<br></p><p>&quot;There are no short term plans.  Unless you’d consider rewriting all of<br>LLVM as part of the project (something that would be awesome, but that I<br>wouldn’t recommend :-), we’d need Swift to be able to import C++ APIs.  I’m<br>personally hopeful that we’ll be able to tackle at least some of that in<br>Swift 4, but we’ll see - no planning can be done for Swift 4 until Swift 3<br>starts to wind down.&quot; - Chris<br></p><p><br></p><p><br>On Fri, Dec 25, 2015 at 8:26 PM, Andrew Bennett via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; This may address many of the concerns, and perhaps lower the barriers to<br>&gt; the community contributing:<br>&gt;      How about instead of rewriting the entire compiler in Swift, we just<br>&gt; rewrite the Swift -&gt; SIL component?<br>&gt;<br>&gt; On Mon, Dec 21, 2015 at 10:54 PM, Jean-Daniel Dupas via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; &gt; Le 20 déc. 2015 à 01:37, Colin Barrett via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; On Dec 19, 2015, at 7:32 PM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; On Dec 19, 2015, at 7:21 PM, Colin Barrett &lt;<br>&gt;&gt; colin at springsandstruts.com&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; I’d recommend you read<br>&gt;&gt; http://tratt.net/laurie/blog/entries/the_bootstrapped_compiler_and_the_damage_done,<br>&gt;&gt; which has a number of rebuttals to what you’ve said below.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; That’s an interesting article but it doesn’t address the issue of<br>&gt;&gt; whether compiler code is more like normal programming than compiler<br>&gt;&gt; standard library code.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Perhaps I don’t understand what you mean, but the article gives two<br>&gt;&gt; good reasons why compiler code is special. The first reason is that we<br>&gt;&gt; understand a lot about how to design a compiler, much more than we<br>&gt;&gt; understand about how to design other types of programs. The second follows:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; [C]ompilers are an atypical class of program. In essence, a compiler<br>&gt;&gt; is a simple batch pipeline process. A program is read in and translated to<br>&gt;&gt; a tree; a series of tree transformations are applied; and eventually one of<br>&gt;&gt; those trees is saved out as some sort of binary data (e.g. machine code or<br>&gt;&gt; bytecode). Most of the intermediate tree transformations calculate a<br>&gt;&gt; relatively simple bit of information about the program and create a<br>&gt;&gt; slightly modified tree based on it. A few calculations crop up time and<br>&gt;&gt; time again, such as: maps from variables to scopes or types; and stacks to<br>&gt;&gt; determine closures. Significantly, and unlike most programs in the real<br>&gt;&gt; world, there is no interaction with users: the compiler knows all it needs<br>&gt;&gt; about the outside world from the moment it is called.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Personally, I think the main reason not to rewrite the Swift compiler<br>&gt;&gt; is that it would be a distraction from improving the Swift language and<br>&gt;&gt; other associated tools.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; -Colin<br>&gt;&gt; &gt;<br>&gt;&gt;<br>&gt;&gt; An other reason is that is make it harder to port to new platforms. You<br>&gt;&gt; would have to do all the dev using cross compilation from another platform<br>&gt;&gt; instead of just working on the target platform directly.<br>&gt;&gt;<br>&gt;&gt; Jean-Daniel<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151226/c1057314/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Proposal: Rewrite Swift compiler in swift to get ideas for further language evolution.</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>December 20, 2015 at 11:00:00am</p></header><div class="content"><p>&gt; Compiler code is probably more typical of what most programmers write than library code and so would be ideal for suggesting further language evolution ideas.<br>Bootstrapping is a large investment with little practical value beside demonstrating that &quot;the child is mature enough for serious work&quot;.<br>That said, flying to the moon has little practical value as well, but I wouldn&#39;t say it was a stupid idea...<br>I&#39;m quite sure that there will be a Swift compiler written in Swift somewhere in the future, and that it will be a proud moment for those involved in the language.<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
