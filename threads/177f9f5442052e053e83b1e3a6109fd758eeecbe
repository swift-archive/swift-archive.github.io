<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>dispatch_block_t is imported wrong, breaks barrier blocks (SR-2246)</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>August  1, 2016 at 02:00:00pm</p></header><div class="content"><p>I just filed SR-2246 about how `queue.async(flags: .barrier)` is completely broken, and I think the problem comes down to `dispatch_block_t` is being imported as `() -&gt; ()` instead of as `@convention(block) () -&gt; ()`, and therefore `__dispatch_async` has the type `(DispatchQueue, () -&gt; Void) -&gt; Void` instead of `(DispatchQueue, @convention(block) () -&gt; Void) -&gt; Void`.<br></p><p>The reason I&#39;m sending this email is because I&#39;d like to fix this, but I have no idea how. In Swift 2.x the SDK overlay had an explicit definition for `dispatch_block_t` instead of importing it from the C header, but with the new Dispatch API, it seems to be relying on the clang importer to get __dispatch_async and friends (though I&#39;m not sure what causes the __ prefix since dispatch_async doesn&#39;t seem to have the relevant attribute). Swift 2.2 had a typealias for dispatch_block_t, but Swift 3 marks dispatch_block_t as being unavailable (although again I don&#39;t know how since I don&#39;t see the relevant attribute in the macOS SDK), so presumably reintroducing a typealias isn&#39;t a good idea, if it even works at all.<br></p><p>-Kevin Ballard<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>dispatch_block_t is imported wrong, breaks barrier blocks (SR-2246)</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>August  1, 2016 at 03:00:00pm</p></header><div class="content"><p>Hmm. The implementation of DispatchQueue.async(execute: DispatchWorkItem) is as follows:<br></p><p>	public func async(execute workItem: DispatchWorkItem) {<br>		// _swift_dispatch_async preserves the @convention(block) <br>		// for work item blocks.<br>		_swift_dispatch_async(self, workItem._block)<br>	}<br></p><p>This comment indicates that someone was already aware of the problem and fixed it in some places but not all. This also suggests that the problem itself can be fixed merely by replacing the remaining uses of __dispatch_async with _swift_dispatch_async(). I will try this out.<br></p><p>-Kevin<br></p><p>On Mon, Aug 1, 2016, at 02:53 PM, Kevin Ballard via swift-dev wrote:<br>&gt; I just filed SR-2246 about how `queue.async(flags: .barrier)` is completely broken, and I think the problem comes down to `dispatch_block_t` is being imported as `() -&gt; ()` instead of as `@convention(block) () -&gt; ()`, and therefore `__dispatch_async` has the type `(DispatchQueue, () -&gt; Void) -&gt; Void` instead of `(DispatchQueue, @convention(block) () -&gt; Void) -&gt; Void`.<br>&gt; <br>&gt; The reason I&#39;m sending this email is because I&#39;d like to fix this, but I have no idea how. In Swift 2.x the SDK overlay had an explicit definition for `dispatch_block_t` instead of importing it from the C header, but with the new Dispatch API, it seems to be relying on the clang importer to get __dispatch_async and friends (though I&#39;m not sure what causes the __ prefix since dispatch_async doesn&#39;t seem to have the relevant attribute). Swift 2.2 had a typealias for dispatch_block_t, but Swift 3 marks dispatch_block_t as being unavailable (although again I don&#39;t know how since I don&#39;t see the relevant attribute in the macOS SDK), so presumably reintroducing a typealias isn&#39;t a good idea, if it even works at all.<br>&gt; <br>&gt; -Kevin Ballard<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>dispatch_block_t is imported wrong, breaks barrier blocks (SR-2246)</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>August  1, 2016 at 05:00:00pm</p></header><div class="content"><p>For anyone following along, I&#39;ve submitted a PR to fix this as https://github.com/apple/swift/pull/3923.<br></p><p>-Kevin<br></p><p>On Mon, Aug 1, 2016, at 03:04 PM, Kevin Ballard wrote:<br>&gt; Hmm. The implementation of DispatchQueue.async(execute: DispatchWorkItem) is as follows:<br>&gt; <br>&gt; 	public func async(execute workItem: DispatchWorkItem) {<br>&gt; 		// _swift_dispatch_async preserves the @convention(block) <br>&gt; 		// for work item blocks.<br>&gt; 		_swift_dispatch_async(self, workItem._block)<br>&gt; 	}<br>&gt; <br>&gt; This comment indicates that someone was already aware of the problem and fixed it in some places but not all. This also suggests that the problem itself can be fixed merely by replacing the remaining uses of __dispatch_async with _swift_dispatch_async(). I will try this out.<br>&gt; <br>&gt; -Kevin<br>&gt; <br>&gt; On Mon, Aug 1, 2016, at 02:53 PM, Kevin Ballard via swift-dev wrote:<br>&gt; &gt; I just filed SR-2246 about how `queue.async(flags: .barrier)` is completely broken, and I think the problem comes down to `dispatch_block_t` is being imported as `() -&gt; ()` instead of as `@convention(block) () -&gt; ()`, and therefore `__dispatch_async` has the type `(DispatchQueue, () -&gt; Void) -&gt; Void` instead of `(DispatchQueue, @convention(block) () -&gt; Void) -&gt; Void`.<br>&gt; &gt; <br>&gt; &gt; The reason I&#39;m sending this email is because I&#39;d like to fix this, but I have no idea how. In Swift 2.x the SDK overlay had an explicit definition for `dispatch_block_t` instead of importing it from the C header, but with the new Dispatch API, it seems to be relying on the clang importer to get __dispatch_async and friends (though I&#39;m not sure what causes the __ prefix since dispatch_async doesn&#39;t seem to have the relevant attribute). Swift 2.2 had a typealias for dispatch_block_t, but Swift 3 marks dispatch_block_t as being unavailable (although again I don&#39;t know how since I don&#39;t see the relevant attribute in the macOS SDK), so presumably reintroducing a typealias isn&#39;t a good idea, if it even works at all.<br>&gt; &gt; <br>&gt; &gt; -Kevin Ballard<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-dev mailing list<br>&gt; &gt; swift-dev at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>dispatch_block_t is imported wrong, breaks barrier blocks (SR-2246)</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>August  1, 2016 at 07:00:00pm</p></header><div class="content"><p>I’d suggest putting this over on swift-corelibs-dev, since it’s a Dispatch-specific issue.<br></p><p>Jordan<br></p><p><br>&gt; On Aug 1, 2016, at 17:25, Kevin Ballard via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; For anyone following along, I&#39;ve submitted a PR to fix this as https://github.com/apple/swift/pull/3923.<br>&gt; <br>&gt; -Kevin<br>&gt; <br>&gt; On Mon, Aug 1, 2016, at 03:04 PM, Kevin Ballard wrote:<br>&gt;&gt; Hmm. The implementation of DispatchQueue.async(execute: DispatchWorkItem) is as follows:<br>&gt;&gt; <br>&gt;&gt; 	public func async(execute workItem: DispatchWorkItem) {<br>&gt;&gt; 		// _swift_dispatch_async preserves the @convention(block) <br>&gt;&gt; 		// for work item blocks.<br>&gt;&gt; 		_swift_dispatch_async(self, workItem._block)<br>&gt;&gt; 	}<br>&gt;&gt; <br>&gt;&gt; This comment indicates that someone was already aware of the problem and fixed it in some places but not all. This also suggests that the problem itself can be fixed merely by replacing the remaining uses of __dispatch_async with _swift_dispatch_async(). I will try this out.<br>&gt;&gt; <br>&gt;&gt; -Kevin<br>&gt;&gt; <br>&gt;&gt; On Mon, Aug 1, 2016, at 02:53 PM, Kevin Ballard via swift-dev wrote:<br>&gt;&gt;&gt; I just filed SR-2246 about how `queue.async(flags: .barrier)` is completely broken, and I think the problem comes down to `dispatch_block_t` is being imported as `() -&gt; ()` instead of as `@convention(block) () -&gt; ()`, and therefore `__dispatch_async` has the type `(DispatchQueue, () -&gt; Void) -&gt; Void` instead of `(DispatchQueue, @convention(block) () -&gt; Void) -&gt; Void`.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The reason I&#39;m sending this email is because I&#39;d like to fix this, but I have no idea how. In Swift 2.x the SDK overlay had an explicit definition for `dispatch_block_t` instead of importing it from the C header, but with the new Dispatch API, it seems to be relying on the clang importer to get __dispatch_async and friends (though I&#39;m not sure what causes the __ prefix since dispatch_async doesn&#39;t seem to have the relevant attribute). Swift 2.2 had a typealias for dispatch_block_t, but Swift 3 marks dispatch_block_t as being unavailable (although again I don&#39;t know how since I don&#39;t see the relevant attribute in the macOS SDK), so presumably reintroducing a typealias isn&#39;t a good idea, if it even works at all.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Kevin Ballard<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt; swift-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
