<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7667a0be61954139b36562c804c414ca?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>Chris Denter</string> &lt;chris at duolingo.com&gt;<p>July 18, 2016 at 05:00:00pm</p></header><div class="content"><p>Hello –<br></p><p>Currently, the standard library String functions .hasPrefix() and<br>.hasSuffix() will return false when given the empty string as input:<br></p><p>$ swift<br>  1&gt; &quot;&quot;.hasPrefix(&quot;&quot;)<br>$R0: Bool = false<br>  2&gt; &quot;foo&quot;.hasPrefix(&quot;&quot;)<br>$R1: Bool = false<br>  3&gt; &quot;foo&quot;.hasSuffix(&quot;&quot;)<br>$R2: Bool = false<br></p><p><br>This feels unexpected. The reason the methods behave this way seems to be a<br>leaked implementation detail<br>&lt;https://twitter.com/cdntr/status/755059959713427456&gt;.<br>Some languages, such as Python, return True in these cases -- perhaps<br>motivated by the `someSet.contains(emptySet) == true` analogy.<br></p><p>The ship has sailed for NSString and Foundation, but we might want to bite<br>the bullet and fix this for Swift before 3.0 makes that much harder.<br></p><p>Thank you so much for your time,<br></p><p>    Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160718/d1ac9c4f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a6729e3608691552bd1c61373d0e5b08?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>Kevin Nattinger</string> &lt;swift at nattinger.net&gt;<p>July 18, 2016 at 12:00:00pm</p></header><div class="content"><p>I agree, true is definitely the expected behavior. In particular, it seems absurd to me that `a.hasPrefix(b)` and `a.hasSuffix(b)` could be false when `a == b` is true.<br></p><p>&gt; On Jul 18, 2016, at 10:36 AM, Chris Denter via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello –<br>&gt; <br>&gt; Currently, the standard library String functions .hasPrefix() and .hasSuffix() will return false when given the empty string as input:<br>&gt; <br>&gt; $ swift<br>&gt;   1&gt; &quot;&quot;.hasPrefix(&quot;&quot;)<br>&gt; $R0: Bool = false<br>&gt;   2&gt; &quot;foo&quot;.hasPrefix(&quot;&quot;) <br>&gt; $R1: Bool = false<br>&gt;   3&gt; &quot;foo&quot;.hasSuffix(&quot;&quot;)<br>&gt; $R2: Bool = false<br>&gt; <br>&gt; <br>&gt; This feels unexpected. The reason the methods behave this way seems to be a leaked implementation detail.<br>&gt; Some languages, such as Python, return True in these cases -- perhaps motivated by the `someSet.contains(emptySet) == true` analogy.<br>&gt; <br>&gt; The ship has sailed for NSString and Foundation, but we might want to bite the bullet and fix this for Swift before 3.0 makes that much harder.<br>&gt; <br>&gt; Thank you so much for your time,<br>&gt; <br>&gt;     Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>July 18, 2016 at 10:00:00pm</p></header><div class="content"><p>+1 - this shouldn&#39;t be hard to fix either - in StringLegacy.swift, add a check for prefix.isEmpty and return true...<br></p><p>&gt; On Jul 18, 2016, at 7:36 PM, Chris Denter via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello –<br>&gt; <br>&gt; Currently, the standard library String functions .hasPrefix() and .hasSuffix() will return false when given the empty string as input:<br>&gt; <br>&gt; $ swift<br>&gt;   1&gt; &quot;&quot;.hasPrefix(&quot;&quot;)<br>&gt; $R0: Bool = false<br>&gt;   2&gt; &quot;foo&quot;.hasPrefix(&quot;&quot;) <br>&gt; $R1: Bool = false<br>&gt;   3&gt; &quot;foo&quot;.hasSuffix(&quot;&quot;)<br>&gt; $R2: Bool = false<br>&gt; <br>&gt; <br>&gt; This feels unexpected. The reason the methods behave this way seems to be a leaked implementation detail &lt;https://twitter.com/cdntr/status/755059959713427456&gt;.<br>&gt; Some languages, such as Python, return True in these cases -- perhaps motivated by the `someSet.contains(emptySet) == true` analogy.<br>&gt; <br>&gt; The ship has sailed for NSString and Foundation, but we might want to bite the bullet and fix this for Swift before 3.0 makes that much harder.<br>&gt; <br>&gt; Thank you so much for your time,<br>&gt; <br>&gt;     Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160718/7b303397/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7559ac465b184ec777f29d37c0e4b374?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>Michael Peternell</string> &lt;michael.peternell at gmx.at&gt;<p>July 20, 2016 at 08:00:00pm</p></header><div class="content"><p>+1<br>this should be a bugfix.<br></p><p>&gt; Am 18.07.2016 um 19:36 schrieb Chris Denter via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Hello –<br>&gt; <br>&gt; Currently, the standard library String functions .hasPrefix() and .hasSuffix() will return false when given the empty string as input:<br>&gt; <br>&gt; $ swift<br>&gt;   1&gt; &quot;&quot;.hasPrefix(&quot;&quot;)<br>&gt; $R0: Bool = false<br>&gt;   2&gt; &quot;foo&quot;.hasPrefix(&quot;&quot;) <br>&gt; $R1: Bool = false<br>&gt;   3&gt; &quot;foo&quot;.hasSuffix(&quot;&quot;)<br>&gt; $R2: Bool = false<br>&gt; <br>&gt; <br>&gt; This feels unexpected. The reason the methods behave this way seems to be a leaked implementation detail.<br>&gt; Some languages, such as Python, return True in these cases -- perhaps motivated by the `someSet.contains(emptySet) == true` analogy.<br>&gt; <br>&gt; The ship has sailed for NSString and Foundation, but we might want to bite the bullet and fix this for Swift before 3.0 makes that much harder.<br>&gt; <br>&gt; Thank you so much for your time,<br>&gt; <br>&gt;     Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7abf2ce34651dd5e97cd97b16ce21bae?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>Guillaume Lessard</string> &lt;glessard at tffenterprises.com&gt;<p>July 20, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On 20 juil. 2016, at 12:42, Michael Peternell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1<br>&gt; this should be a bugfix.<br></p><p>First, NSString’s prefix function returns false for empty string parameters, and this would be a significant departure in behaviour.<br></p><p>Second, while an empty string is technically a prefix to any other string, that is hardly ever an interesting answer; it is a trivial solution, just as y=0 is for y(x)=y’(x). It is easy to special-case if one really needs to consider the empty string.<br></p><p>Cheers,<br>Guillaume Lessard<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>July 20, 2016 at 08:00:00pm</p></header><div class="content"><p>On Wed, Jul 20, 2016 at 1:14 PM Guillaume Lessard via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On 20 juil. 2016, at 12:42, Michael Peternell via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; +1<br>&gt; &gt; this should be a bugfix.<br>&gt;<br>&gt; First, NSString’s prefix function returns false for empty string<br>&gt; parameters, and this would be a significant departure in behaviour.<br>&gt;<br></p><p>It would be a significant correction in behavior.<br></p><p><br>&gt; Second, while an empty string is technically a prefix to any other string,<br>&gt; that is hardly ever an interesting answer; it is a trivial solution, just<br>&gt; as y=0 is for y(x)=y’(x). It is easy to special-case if one really needs to<br>&gt; consider the empty string.<br>&gt;<br></p><p>On the contrary—I&#39;ve written code in the past that expected this behavior<br>(because why wouldn&#39;t I? It&#39;s the correct behavior) and was quite surprised<br>when NSString&#39;s behavior resulted in a bug.<br></p><p>NSString being plain wrong here should not consign us to wrongness forever.<br>Every other mainstream language I use day-to-day implements this correctly,<br>and so should Swift.<br></p><p><br>&gt;<br>&gt; Cheers,<br>&gt; Guillaume Lessard<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160720/f289f0a5/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 20, 2016 at 08:00:00pm</p></header><div class="content"><p>Doesn&#39;t your second argument undermine your first? If it&#39;s a trivial<br>solution and one rarely ever considers empty strings when invoking<br>`hasPrefix`, then returning the technically correct result must be a<br>trivial departure in behavior.<br></p><p><br>On Wed, Jul 20, 2016 at 15:14 Guillaume Lessard via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On 20 juil. 2016, at 12:42, Michael Peternell via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; +1<br>&gt; &gt; this should be a bugfix.<br>&gt;<br>&gt; First, NSString’s prefix function returns false for empty string<br>&gt; parameters, and this would be a significant departure in behaviour.<br>&gt;<br>&gt; Second, while an empty string is technically a prefix to any other string,<br>&gt; that is hardly ever an interesting answer; it is a trivial solution, just<br>&gt; as y=0 is for y(x)=y’(x). It is easy to special-case if one really needs to<br>&gt; consider the empty string.<br>&gt;<br>&gt; Cheers,<br>&gt; Guillaume Lessard<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160720/2ad0404c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7abf2ce34651dd5e97cd97b16ce21bae?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>Guillaume Lessard</string> &lt;glessard at tffenterprises.com&gt;<p>July 20, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On 20 juil. 2016, at 14:21, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; Doesn&#39;t your second argument undermine your first? If it&#39;s a trivial solution and one rarely ever considers empty strings when invoking `hasPrefix`, then returning the technically correct result must be a trivial departure in behavior.<br></p><p>I specifically used an example where the trivial solution (y=0 instead of y=exp(x)) is a pitfall.<br></p><p>How many empty strings are contained in any given string?<br>If the answer is infinitely many, it sounds like a pitfall to me.<br></p><p>Cheers,<br>Guillaume Lessard<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 20, 2016 at 10:00:00pm</p></header><div class="content"><p>I&#39;d run this by someone who actually knows math, but afaik there are<br>finitely many empty strings in any given string.<br></p><p>How many e&#39;s are in any given string? (Ignoring Unicode issues for now,)<br>for each index in the string&#39;s indices, form a substring one character in<br>length starting at that index and compare the value of that substring to e.<br></p><p>How many empty strings are in any given string? For each index in the<br>string&#39;s indices, form a substring zero characters in length starting at<br>that index and compare the value of that substring to an empty string.<br></p><p><br>On Wed, Jul 20, 2016 at 17:35 Guillaume Lessard &lt;glessard at tffenterprises.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt; &gt; On 20 juil. 2016, at 14:21, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Doesn&#39;t your second argument undermine your first? If it&#39;s a trivial<br>&gt; solution and one rarely ever considers empty strings when invoking<br>&gt; `hasPrefix`, then returning the technically correct result must be a<br>&gt; trivial departure in behavior.<br>&gt;<br>&gt; I specifically used an example where the trivial solution (y=0 instead of<br>&gt; y=exp(x)) is a pitfall.<br>&gt;<br>&gt; How many empty strings are contained in any given string?<br>&gt; If the answer is infinitely many, it sounds like a pitfall to me.<br>&gt;<br>&gt; Cheers,<br>&gt; Guillaume Lessard<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160720/51f0f51c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d172fa3c47108d84ee35a68e8d675c1?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>Ross O&#39;Brien</string> &lt;narrativium+swift at gmail.com&gt;<p>July 21, 2016 at 12:00:00am</p></header><div class="content"><p>To the question of whether any given string has the empty string as prefix:<br>yes it does. This is a correct answer, and returning true is a correct<br>behaviour.<br></p><p>To the question of how many times the empty string occurs in a string: yes,<br>this can be infinite. &quot;a&quot; == &quot;a&quot; + &quot;&quot; == &quot;a&quot; + &quot;&quot; + &quot;&quot; == &quot;a&quot; + &quot;&quot; + &quot;&quot; +<br>&quot;&quot; == &quot;a&quot; + &quot;&quot; + &quot;&quot; + &quot;&quot; + &quot;&quot; == ... etc.. Concatenating an empty string,<br>like adding zero or multiplying by zero for a numerical value, can be done<br>infinitely many times without making a difference.<br></p><p>However, there&#39;s correctness and convenience. For example, every integer<br>can be expressed as a multiple of prime factors. 1 is technically a prime<br>number - it&#39;s divisible by 1 and itself - but for convenience we say it<br>isn&#39;t a prime number, because if it isn&#39;t, every integer can be expressed<br>uniquely as a multiple of prime factors, whereas if it is, there are an<br>infinite number of such expressions for each integer.<br></p><p>There may be many algorithms which rely on an empty prefix returning false.<br>If hasPrefix and hasSuffix are corrected, those algorithms should be<br>altered to recognise that correction. For example, if breaking up a string<br>using the empty string as a separator, it seems sensible that the sequence<br>of substrings would never contain consecutive empty strings.<br></p><p>On Wed, Jul 20, 2016 at 11:58 PM, Xiaodi Wu via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I&#39;d run this by someone who actually knows math, but afaik there are<br>&gt; finitely many empty strings in any given string.<br>&gt;<br>&gt; How many e&#39;s are in any given string? (Ignoring Unicode issues for now,)<br>&gt; for each index in the string&#39;s indices, form a substring one character in<br>&gt; length starting at that index and compare the value of that substring to e.<br>&gt;<br>&gt; How many empty strings are in any given string? For each index in the<br>&gt; string&#39;s indices, form a substring zero characters in length starting at<br>&gt; that index and compare the value of that substring to an empty string.<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Wed, Jul 20, 2016 at 17:35 Guillaume Lessard &lt;<br>&gt; glessard at tffenterprises.com&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; &gt; On 20 juil. 2016, at 14:21, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Doesn&#39;t your second argument undermine your first? If it&#39;s a trivial<br>&gt;&gt; solution and one rarely ever considers empty strings when invoking<br>&gt;&gt; `hasPrefix`, then returning the technically correct result must be a<br>&gt;&gt; trivial departure in behavior.<br>&gt;&gt;<br>&gt;&gt; I specifically used an example where the trivial solution (y=0 instead of<br>&gt;&gt; y=exp(x)) is a pitfall.<br>&gt;&gt;<br>&gt;&gt; How many empty strings are contained in any given string?<br>&gt;&gt; If the answer is infinitely many, it sounds like a pitfall to me.<br>&gt;&gt;<br>&gt;&gt; Cheers,<br>&gt;&gt; Guillaume Lessard<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160721/45e36315/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
