<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>? suffix for &lt;, &gt;, &lt;=, &gt;= comparisons with optionals to prevent subtle bugs</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>December  3, 2015 at 06:00:00pm</p></header><div class="content"><p>Such comparisons with optionals can result in hard to find bugs.<br></p><p>For example consider:<br></p><p>let f = x &lt; 5  // x is of type Int? and may be nil<br></p><p>The proposed ? suffix would be used as follows and makes the possibility of nil very clear:<br></p><p>let f = x? &lt; 5<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>? suffix for &lt;, &gt;, &lt;=, &gt;= comparisons with optionals to prevent subtle bugs</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December  3, 2015 at 04:00:00pm</p></header><div class="content"><p>Agreed ? or, I think, these operators could/should simply be removed.<br></p><p>I filed &lt;rdar://22833869&gt; about this a while ago, which was marked as<br>Duplicate/&lt;rdar://16966712&gt;.<br></p><p>Summary:<br>&gt; This returns true:<br>&gt;     (nil as Int?) &lt; 0<br>&gt; This also returns true, which makes even less sense:<br>&gt;     (nil as Int?) &lt; Int.min<br></p><p><br></p><p>Expected Results:<br>&gt; nil &lt; 0, nil &gt; 0, and nil == 0, should all be false. nil != 0 should be true.<br>&gt; Alternatively, just *don&#39;t* provide &lt; and &gt; operators that accept optional arguments.<br></p><p><br></p><p>Actual Results:<br>&gt; nil &lt; 0 is true. Others are as expected.<br></p><p><br>See also: https://twitter.com/jtbandes/status/646914031433871364<br></p><p><br>Jacob<br></p><p>On Thu, Dec 3, 2015 at 3:42 PM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br></p><p>&gt; Such comparisons with optionals can result in hard to find bugs.<br>&gt;<br>&gt; For example consider:<br>&gt;<br>&gt; let f = x &lt; 5  // x is of type Int? and may be nil<br>&gt;<br>&gt; The proposed ? suffix would be used as follows and makes the possibility<br>&gt; of nil very clear:<br>&gt;<br>&gt; let f = x? &lt; 5<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151203/9f82f0c4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>? suffix for &lt;, &gt;, &lt;=, &gt;= comparisons with optionals to prevent subtle bugs</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December  3, 2015 at 04:00:00pm</p></header><div class="content"><p>I completely disagree. Being able to compare `Optional` values is very<br>handy in a lot of cases. Adding special syntax for this is just<br>unnecessary language complication, especially as the proposed syntax<br>conflicts with the existing meaning of the postfix-? operator and the<br>optional-chaining operator.<br></p><p>-Kevin Ballard<br></p><p>On Thu, Dec 3, 2015, at 04:17 PM, Jacob Bandes-Storch wrote:<br>&gt; Agreed ? or, I think, these operators could/should simply be removed.<br>&gt;<br>&gt; I filed &lt;rdar://22833869&gt; about this a while ago, which was marked as<br>&gt; Duplicate/&lt;rdar://16966712&gt;.<br>&gt;<br>&gt;&gt; Summary:<br>&gt;&gt;<br>&gt;&gt; This returns true:<br>    (nil as Int?) &lt; 0 This also returns true, which makes even less<br>    sense: (nil as Int?) &lt; Int.min<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Expected Results:<br>&gt;&gt;<br>&gt;&gt; nil &lt; 0, nil &gt; 0, and nil == 0, should all be false. nil != 0 should<br>&gt;&gt; be true.<br>Alternatively, just *don&#39;t* provide &lt; and &gt; operators that accept<br>optional arguments.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Actual Results:<br>&gt;&gt;<br>&gt;&gt; nil &lt; 0 is true. Others are as expected.<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; See also: https://twitter.com/jtbandes/status/646914031433871364<br>&gt;<br>&gt;<br>&gt; Jacob<br>&gt;<br>&gt; On Thu, Dec 3, 2015 at 3:42 PM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt;&gt; Such comparisons with optionals can result in hard to find bugs.<br>&gt;&gt;<br>&gt;&gt;<br>For example consider:<br>&gt;&gt;<br>&gt;&gt;<br>let f = x &lt; 5? // x is of type Int? and may be nil<br>&gt;&gt;<br>&gt;&gt;<br>The proposed ? suffix would be used as follows and makes the possibility<br>of nil very clear:<br>&gt;&gt;<br>&gt;&gt;<br>let f = x? &lt; 5<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>_______________________________________________<br>&gt;&gt;<br>swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _________________________________________________<br>&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151203/611af7d6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>? suffix for &lt;, &gt;, &lt;=, &gt;= comparisons with optionals to prevent subtle bugs</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December  3, 2015 at 04:00:00pm</p></header><div class="content"><p>To me it seems logical that comparing Optional&lt;Int&gt; with Int (or another<br>Optional&lt;Int&gt;), if it&#39;s allowed at all, should return Optional&lt;Bool&gt;. Since<br>conditional statements only accept Bool, the user is forced to handle the<br>nil case explicitly.<br></p><p>Jacob<br></p><p>On Thu, Dec 3, 2015 at 4:33 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br></p><p>&gt; I completely disagree. Being able to compare `Optional` values is very<br>&gt; handy in a lot of cases. Adding special syntax for this is just unnecessary<br>&gt; language complication, especially as the proposed syntax conflicts with the<br>&gt; existing meaning of the postfix-? operator and the optional-chaining<br>&gt; operator.<br>&gt;<br>&gt; -Kevin Ballard<br>&gt;<br>&gt; On Thu, Dec 3, 2015, at 04:17 PM, Jacob Bandes-Storch wrote:<br>&gt;<br>&gt; Agreed ? or, I think, these operators could/should simply be removed.<br>&gt;<br>&gt; I filed &lt;rdar://22833869&gt; about this a while ago, which was marked as<br>&gt; Duplicate/&lt;rdar://16966712&gt;.<br>&gt;<br>&gt;<br>&gt; Summary:<br>&gt; This returns true:<br>&gt;     (nil as Int?) &lt; 0<br>&gt; This also returns true, which makes even less sense:<br>&gt;     (nil as Int?) &lt; Int.min<br>&gt;<br>&gt;<br>&gt; Expected Results:<br>&gt; nil &lt; 0, nil &gt; 0, and nil == 0, should all be false. nil != 0 should be true.<br>&gt; Alternatively, just *don&#39;t* provide &lt; and &gt; operators that accept optional arguments.<br>&gt;<br>&gt;<br>&gt; Actual Results:<br>&gt; nil &lt; 0 is true. Others are as expected.<br>&gt;<br>&gt;<br>&gt; See also: https://twitter.com/jtbandes/status/646914031433871364<br>&gt;<br>&gt;<br>&gt; Jacob<br>&gt;<br>&gt; On Thu, Dec 3, 2015 at 3:42 PM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt;<br>&gt; Such comparisons with optionals can result in hard to find bugs.<br>&gt;<br>&gt; For example consider:<br>&gt;<br>&gt; let f = x &lt; 5  // x is of type Int? and may be nil<br>&gt;<br>&gt; The proposed ? suffix would be used as follows and makes the possibility<br>&gt; of nil very clear:<br>&gt;<br>&gt; let f = x? &lt; 5<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; *_______________________________________________*<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151203/81254b24/attachment-0001.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
