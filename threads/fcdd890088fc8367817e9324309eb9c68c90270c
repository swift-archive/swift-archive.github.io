<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Draft]: Introducing a striding(by:) method on 3.0 ranges</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 11, 2016 at 04:00:00pm</p></header><div class="content"><p>on Mon Apr 11 2016, Ross O&#39;Brien &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I think I&#39;d like to +1 a &#39;for x in loop(from: while: next:)&#39;. (Possibly<br>&gt; &#39;iterate&#39; rather than &#39;loop&#39;?)<br></p><p>Maybe &#39;iterations&#39;.  It should be a noun, I think.<br></p><p>&gt; I&#39;ve not missed the C-style for-loop so I&#39;ve not argued to keep it, but recently<br>&gt; I was refactoring a function which started with a UIView and iterated up the<br>&gt; hierarchy through the superview property, and it occurred to me recently that<br>&gt; neither stride nor sequences/generators handle recursive iterations well.<br>&gt;<br>&gt; So, I imagine that would look like this:<br>&gt; for view in loop(from: startingSubview, while: { $0 != nil }, next: { $0 =<br>&gt; $0.superview })<br>&gt;<br>&gt; On Mon, Apr 11, 2016 at 11:31 PM, Dave Abrahams via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;     on Mon Apr 11 2016, Michel Fortin &lt;michel.fortin-AT-michelf.ca&gt; wrote:<br>&gt;<br>&gt;     &gt; Le 11 avr. 2016 à 14:36, Dave Abrahams<br>&gt;     &lt;dabrahams at apple.com&gt; a écrit :<br>&gt;     &gt;<br>&gt;     &gt;&gt; 3. The fact that we&#39;re migrating C-style for loops to<br>&gt;     &gt;&gt; uses of stride, as noted in https://github.com/apple/swift/pull/2125,<br>&gt;     &gt;&gt; has convinced me that, sadly, we may need an answer that doesn&#39;t<br>&gt;     &gt;&gt; involve ranges. But maybe something like<br>&gt;     &gt;&gt;<br>&gt;     &gt;&gt; for x in loop(from: 0.1, while: { $0 &lt; 10 }, next: { $0 + .2 })<br>&gt;     &gt;&gt;<br>&gt;     &gt;&gt; is sufficient for this purpose.<br>&gt;     &gt;<br>&gt;     &gt; Please add that.<br>&gt;<br>&gt;     Please write a proposal and ideally, submit a patch :-).<br>&gt;<br>&gt;     Seriously, if this is something you believe in, we could really use the<br>&gt;     help.<br>&gt;<br>&gt;     &gt; First, it would relieve `stride` from some of the pressure of<br>&gt;     &gt; excelling at replacing existing C-style for loops. But it would also<br>&gt;     &gt; become pretty easy to write custom sequences like this one:<br>&gt;     &gt;<br>&gt;     &gt; func uniform(start: Double, end: Double, numberOfSteps totalSteps: Int) -&gt;<br>&gt;     Sequence {<br>&gt;     &gt; var currentStep = 0<br>&gt;     &gt; return loop(from: start, while: { _ in<br>&gt;     &gt; currentStep &lt; totalSteps<br>&gt;     &gt; }, next: { _ in<br>&gt;     &gt; currentStep += 1<br>&gt;     &gt; return start * (Double(totalSteps-currentStep) / Double(totalSteps)) +<br>&gt;     &gt; end * (Double(currentStep) / Double(totalSteps))<br>&gt;     &gt; })<br>&gt;     &gt; }<br>&gt;<br>&gt;     Aside from the fact that you can&#39;t return Sequence, this seems like a<br>&gt;     much better way to do that in Swift 3.0:<br>&gt;<br>&gt;     func uniform(<br>&gt;     start: Double, end: Double, numberOfSteps totalSteps: Int<br>&gt;     ) -&gt; LazyMapRandomAccessCollection&lt;CountableRange&lt;Int&gt;, Double&gt; {<br>&gt;     return (0..&lt;totalSteps).lazy.map {<br>&gt;     start * (Double(totalSteps-$0) / Double(totalSteps)) +<br>&gt;     end * (Double($0) / Double(totalSteps))<br>&gt;     }<br>&gt;     }<br>&gt;<br>&gt;     --<br>&gt;     Dave<br>&gt;<br>&gt;     _______________________________________________<br>&gt;     swift-evolution mailing list<br>&gt;     swift-evolution at swift.org<br>&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5f463dd4e7af28b64ad8f0e032ee82dc?s=50"></div><header><strong>[Draft]: Introducing a striding(by:) method on 3.0 ranges</strong> from <string>Nate Cook</string> &lt;natecook at gmail.com&gt;<p>April 11, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Apr 11, 2016, at 6:49 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; on Mon Apr 11 2016, Ross O&#39;Brien &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; I think I&#39;d like to +1 a &#39;for x in loop(from: while: next:)&#39;. (Possibly<br>&gt;&gt; &#39;iterate&#39; rather than &#39;loop&#39;?)<br>&gt; <br>&gt; Maybe &#39;iterations&#39;.  It should be a noun, I think.<br></p><p>There&#39;s a proposal awaiting review right now that would add an iterate function and takeWhile sequence method, so these could be written as:<br></p><p>for x in iterate(0.1, apply: { $0 + 2 }).takeWhile({ $0 &lt; 10 }) {<br>    // ...<br>}<br></p><p>and<br></p><p>for view in iterate(startingSubview, apply: { $0.superview }).takeWhile({ $0 != nil }) {<br>    // ...<br>}<br></p><p>If the iterate function were overloaded with a while argument, this would be exactly what we&#39;re discussing. Perhaps this proposal should be a jumping off point?<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md&gt;<br></p><p>Nate<br></p><p><br>&gt;&gt; I&#39;ve not missed the C-style for-loop so I&#39;ve not argued to keep it, but recently<br>&gt;&gt; I was refactoring a function which started with a UIView and iterated up the<br>&gt;&gt; hierarchy through the superview property, and it occurred to me recently that<br>&gt;&gt; neither stride nor sequences/generators handle recursive iterations well.<br>&gt;&gt; <br>&gt;&gt; So, I imagine that would look like this:<br>&gt;&gt; for view in loop(from: startingSubview, while: { $0 != nil }, next: { $0 =<br>&gt;&gt; $0.superview })<br>&gt;&gt; <br>&gt;&gt; On Mon, Apr 11, 2016 at 11:31 PM, Dave Abrahams via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;    on Mon Apr 11 2016, Michel Fortin &lt;michel.fortin-AT-michelf.ca&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Le 11 avr. 2016 à 14:36, Dave Abrahams<br>&gt;&gt;    &lt;dabrahams at apple.com&gt; a écrit :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 3. The fact that we&#39;re migrating C-style for loops to<br>&gt;&gt;&gt;&gt; uses of stride, as noted in https://github.com/apple/swift/pull/2125,<br>&gt;&gt;&gt;&gt; has convinced me that, sadly, we may need an answer that doesn&#39;t<br>&gt;&gt;&gt;&gt; involve ranges. But maybe something like<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; for x in loop(from: 0.1, while: { $0 &lt; 10 }, next: { $0 + .2 })<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; is sufficient for this purpose.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Please add that.<br>&gt;&gt; <br>&gt;&gt;    Please write a proposal and ideally, submit a patch :-).<br>&gt;&gt; <br>&gt;&gt;    Seriously, if this is something you believe in, we could really use the<br>&gt;&gt;    help.<br>&gt;&gt; <br>&gt;&gt;&gt; First, it would relieve `stride` from some of the pressure of<br>&gt;&gt;&gt; excelling at replacing existing C-style for loops. But it would also<br>&gt;&gt;&gt; become pretty easy to write custom sequences like this one:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func uniform(start: Double, end: Double, numberOfSteps totalSteps: Int) -&gt;<br>&gt;&gt;    Sequence {<br>&gt;&gt;&gt; var currentStep = 0<br>&gt;&gt;&gt; return loop(from: start, while: { _ in<br>&gt;&gt;&gt; currentStep &lt; totalSteps<br>&gt;&gt;&gt; }, next: { _ in<br>&gt;&gt;&gt; currentStep += 1<br>&gt;&gt;&gt; return start * (Double(totalSteps-currentStep) / Double(totalSteps)) +<br>&gt;&gt;&gt; end * (Double(currentStep) / Double(totalSteps))<br>&gt;&gt;&gt; })<br>&gt;&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt;    Aside from the fact that you can&#39;t return Sequence, this seems like a<br>&gt;&gt;    much better way to do that in Swift 3.0:<br>&gt;&gt; <br>&gt;&gt;    func uniform(<br>&gt;&gt;    start: Double, end: Double, numberOfSteps totalSteps: Int<br>&gt;&gt;    ) -&gt; LazyMapRandomAccessCollection&lt;CountableRange&lt;Int&gt;, Double&gt; {<br>&gt;&gt;    return (0..&lt;totalSteps).lazy.map {<br>&gt;&gt;    start * (Double(totalSteps-$0) / Double(totalSteps)) +<br>&gt;&gt;    end * (Double($0) / Double(totalSteps))<br>&gt;&gt;    }<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt;    --<br>&gt;&gt;    Dave<br>&gt;&gt; <br>&gt;&gt;    _______________________________________________<br>&gt;&gt;    swift-evolution mailing list<br>&gt;&gt;    swift-evolution at swift.org<br>&gt;&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160411/94b4b98c/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
