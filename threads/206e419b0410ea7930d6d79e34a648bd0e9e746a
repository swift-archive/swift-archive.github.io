<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f6b7154fd1d6a470d0b521a2e484bffc?s=50"></div><header><strong>[Review] SE-0110: Distinguish between single-tuple and multiple-argument function types</strong> from <string>Daniel Duan</string> &lt;daniel at duan.org&gt;<p>July  1, 2016 at 10:00:00pm</p></header><div class="content"><p>Chris Lattner via swift-evolution &lt;swift-evolution at ...&gt; writes:<br></p><p>I think there&#39;s an edge case that needs consideration: when there&#39;s zero<br>expected arguments and the &#39;_&#39; parameter is used:<br></p><p>let f: () -&gt; Void = { _ in }<br></p><p>According to the proposal, this is syntactically incorrect ( 0 != 1 ). But it<br>is legal now since &#39;_&#39; matches up with the empty tuple. Is there value to keep<br>it legal?<br></p><p>Either way, this may remain an implementation detail. But it might be<br>beneficial to make it explicit in the proposal.<br></p><p>- Daniel<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Review] SE-0110: Distinguish between single-tuple and multiple-argument function types</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>July  2, 2016 at 02:00:00am</p></header><div class="content"><p>On 02.07.2016 1:49, Daniel Duan via swift-evolution wrote:<br>&gt; Chris Lattner via swift-evolution &lt;swift-evolution at ...&gt; writes:<br>&gt;<br>&gt; I think there&#39;s an edge case that needs consideration: when there&#39;s zero<br>&gt; expected arguments and the &#39;_&#39; parameter is used:<br>&gt;<br>&gt; let f: () -&gt; Void = { _ in }<br></p><p>As I understand current syntax and logic, there is *one* expected argument <br>: Void. This is why we can call f(()). But we are allowed to omit that <br>empty tuple parameter in syntax(on caller side and in function parameter <br>list definition). So, IMO or this should be leaved as is, or we should move <br>away from association between Void and &quot;emptiness&quot; of parameters(I don&#39;t <br>understand if this is possible).<br></p><p>If we&#39;ll disallow this, will that be allowed:<br></p><p>func foo(_ x: Void) { print(x) }<br></p><p>foo()<br></p><p>and then question regarding<br></p><p>typealias MyFunc&lt;T&gt; = (T) -&gt; Void<br></p><p>let myfunc1 : MyFunc&lt;Int&gt; = {i in print(i)}<br>let myfunc2 : MyFunc&lt;String&gt; = {s in print(s)}<br>let myfunc3 : MyFunc&lt;Void&gt; = {_ in print(&quot;nothing&quot;)}<br></p><p><br>Probably there is no problem with current behavior for empty tuple(Void) as <br>soon as *one* parameter will be mapped to the same *one* argument(or zero <br>arguments for this very special case).<br></p><p>Btw, don&#39;t we want to stop these games with recursive empty tuples:<br></p><p>foo(())<br>foo(((())))<br></p><p><br>&gt;<br>&gt; According to the proposal, this is syntactically incorrect ( 0 != 1 ). But it<br>&gt; is legal now since &#39;_&#39; matches up with the empty tuple. Is there value to keep<br>&gt; it legal?<br>&gt;<br>&gt; Either way, this may remain an implementation detail. But it might be<br>&gt; beneficial to make it explicit in the proposal.<br>&gt;<br>&gt; - Daniel<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[Review] SE-0110: Distinguish between single-tuple and multiple-argument function types</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>July  1, 2016 at 07:00:00pm</p></header><div class="content"><p>+1 if SE-0111 is accepted. 0 otherwise.<br></p><p>On Fri, Jul 1, 2016 at 7:34 PM, Vladimir.S via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On 02.07.2016 1:49, Daniel Duan via swift-evolution wrote:<br>&gt;<br>&gt;&gt; Chris Lattner via swift-evolution &lt;swift-evolution at ...&gt; writes:<br>&gt;&gt;<br>&gt;&gt; I think there&#39;s an edge case that needs consideration: when there&#39;s zero<br>&gt;&gt; expected arguments and the &#39;_&#39; parameter is used:<br>&gt;&gt;<br>&gt;&gt; let f: () -&gt; Void = { _ in }<br>&gt;&gt;<br>&gt;<br>&gt; As I understand current syntax and logic, there is *one* expected argument<br>&gt; : Void. This is why we can call f(()). But we are allowed to omit that<br>&gt; empty tuple parameter in syntax(on caller side and in function parameter<br>&gt; list definition). So, IMO or this should be leaved as is, or we should move<br>&gt; away from association between Void and &quot;emptiness&quot; of parameters(I don&#39;t<br>&gt; understand if this is possible).<br>&gt;<br>&gt; If we&#39;ll disallow this, will that be allowed:<br>&gt;<br>&gt; func foo(_ x: Void) { print(x) }<br>&gt;<br>&gt; foo()<br>&gt;<br>&gt; and then question regarding<br>&gt;<br>&gt; typealias MyFunc&lt;T&gt; = (T) -&gt; Void<br>&gt;<br>&gt; let myfunc1 : MyFunc&lt;Int&gt; = {i in print(i)}<br>&gt; let myfunc2 : MyFunc&lt;String&gt; = {s in print(s)}<br>&gt; let myfunc3 : MyFunc&lt;Void&gt; = {_ in print(&quot;nothing&quot;)}<br>&gt;<br>&gt;<br>&gt; Probably there is no problem with current behavior for empty tuple(Void)<br>&gt; as soon as *one* parameter will be mapped to the same *one* argument(or<br>&gt; zero arguments for this very special case).<br>&gt;<br>&gt; Btw, don&#39;t we want to stop these games with recursive empty tuples:<br>&gt;<br>&gt; foo(())<br>&gt; foo(((())))<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;&gt; According to the proposal, this is syntactically incorrect ( 0 != 1 ).<br>&gt;&gt; But it<br>&gt;&gt; is legal now since &#39;_&#39; matches up with the empty tuple. Is there value to<br>&gt;&gt; keep<br>&gt;&gt; it legal?<br>&gt;&gt;<br>&gt;&gt; Either way, this may remain an implementation detail. But it might be<br>&gt;&gt; beneficial to make it explicit in the proposal.<br>&gt;&gt;<br>&gt;&gt; - Daniel<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/a28dac44/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
