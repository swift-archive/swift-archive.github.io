<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0074: Implementation of Binary Search functions</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May 17, 2016 at 04:00:00pm</p></header><div class="content"><p>on Fri May 13 2016, Joe Groff &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On May 13, 2016, at 7:30 AM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Mon May 09 2016, Joe Groff &lt;jgroff-AT-apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;<br>&gt;&gt;&gt;&gt; On May 9, 2016, at 6:23 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * Operations that depend on sorted-ness and use binary predicates should<br>&gt;&gt;&gt;&gt;&gt; not be available on all Collections; they&#39;re too easy to misuse,<br>&gt;&gt;&gt;&gt;&gt; they&#39;re hard to name well, and as Nicola Salmoria has noted, they<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; would not make any sense at all for a Set&lt;T&gt;.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * They should be scoped to a kind of collection that bundles<br>&gt;&gt;&gt;&gt;&gt; the predicate with the elements, e.g.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  let x = Sorted([3, 4, 1, 5, 2], &gt;)          // stores a sorted copy of the array<br>&gt;&gt;&gt;&gt;&gt;  let y = Sorted(preSorted: 0..&lt;100, &lt;)  // stores a copy of the range<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Maybe there should also be protocols for this; CountableRange&lt;T&gt; would<br>&gt;&gt;&gt;&gt;&gt; already already conform to the immutable version.  We might want a<br>&gt;&gt;&gt;&gt;&gt; mutable form of the protocol for sorted collections with<br>&gt;&gt;&gt;&gt;&gt; insertion/removal methods.  This whole area needs more design.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I agree with both of these statements, but not with your conclusion.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; There are three classes of collections:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 1) Those which are always sorted, like a SortedSet.<br>&gt;&gt;&gt;&gt; 2) Those which may or may not be sorted, like an Array.<br>&gt;&gt;&gt;&gt; 3) Those which are never sorted, like a Set.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; These APIs are useless on a #3, but #2 is still a valuable use case<br>&gt;&gt;&gt;&gt; to support. In particular, it&#39;s quite common to use sorted `Array`s,<br>&gt;&gt;&gt;&gt; and these APIs would help you do that.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What I might consider doing is tying this to<br>&gt;&gt;&gt;&gt; `RangeReplaceableCollection`. That protocol is applied only to types<br>&gt;&gt;&gt;&gt; which allow insertion at arbitrary indices, which is a good, though<br>&gt;&gt;&gt;&gt; not perfect, proxy for types which might allow you to manually<br>&gt;&gt;&gt;&gt; maintain a sort order. `Array`, `ArraySlice`, `ContiguousArray`, and<br>&gt;&gt;&gt;&gt; the mutable `String` views would get these methods, while `Set` and<br>&gt;&gt;&gt;&gt; `Dictionary` would not.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We could also introduce a new OrderedCollection protocol. (This would<br>&gt;&gt;&gt; also be useful in the future for supporting `case` pattern matching on<br>&gt;&gt;&gt; collections. It makes sense to pattern-match arrays and other ordered<br>&gt;&gt;&gt; collections in order by element, but you&#39;d expect very different<br>&gt;&gt;&gt; semantics pattern-matching an unordered Set.)<br>&gt;&gt; <br>&gt;&gt; What do you mean by “Ordered” here?  Please note that when Cocoa uses<br>&gt;&gt; “Ordered” it means something very different from “Sorted.”  I don&#39;t find<br>&gt;&gt; the Cocoa usage intuitive myself, but it might be best to avoid that<br>&gt;&gt; term to avoid confusion.<br>&gt;<br>&gt; By &quot;ordered&quot;, I only mean &quot;ordering is significant to the value of the<br>&gt; collection&quot;, so Array is ordered but Set is not.<br></p><p>That does not strike me as a useful-enough distinction to be worth<br>enshrining in a protocol.  What generic components would be constrained<br>on it?<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
