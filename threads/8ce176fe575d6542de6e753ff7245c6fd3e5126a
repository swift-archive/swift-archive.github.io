<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>Generic Subscripting</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>March  2, 2016 at 09:00:00pm</p></header><div class="content"><p>Hello, swift-dev!<br></p><p>I started diving into the Swift code base in December to see if I could wire together generic subscripts (https://bugs.swift.org/browse/SR-115), but I didn&#39;t have the time or know-how to get very far. I jumped back in again this past week and some of my earlier work was made obsolete by Chris&#39;s DeclContext plumbing at the end of last year :)<br></p><p>Michael Ilseman (cc&#39;d) also started working on this but I don&#39;t think he had time to get much farther.<br></p><p>Last weekend I rebased, updated my code, and pushed a branch that seems to satisfy the general lexer:<br></p><p>https://github.com/apple/swift/compare/master...stephencelis:generic-subscripts<br></p><p>I am, however, having a bit of trouble finding my way around the type checker and constraint generator. Trying to compile a simple example fails with this assertion: https://gist.github.com/stephencelis/10f9210a5409ee9bd79b<br></p><p>I know that I need to handle the generic type earlier, but I&#39;m not sure where and I&#39;m not sure where function decls are similarly handled.<br></p><p>I might be biting off more than I can chew, and it&#39;s possible that I should dive into some smaller, starter issues to get my feet wet to more gradually understand the code base. If you have the time, though, I&#39;d be grateful for a little push in the right direction!<br></p><p>Stephen<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8dfc6932943f38e7a7de48be3194f13c?s=50"></div><header><strong>Generic Subscripting</strong> from <string>Michael Ilseman</string> &lt;milseman at apple.com&gt;<p>March  2, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Mar 2, 2016, at 6:17 PM, Stephen Celis &lt;stephen.celis at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hello, swift-dev!<br>&gt; <br>&gt; I started diving into the Swift code base in December to see if I could wire together generic subscripts (https://bugs.swift.org/browse/SR-115), but I didn&#39;t have the time or know-how to get very far. I jumped back in again this past week and some of my earlier work was made obsolete by Chris&#39;s DeclContext plumbing at the end of last year :)<br>&gt; <br>&gt; Michael Ilseman (cc&#39;d) also started working on this but I don&#39;t think he had time to get much farther.<br>&gt; <br></p><p>You seem to be caught up to where I left off. Unfortunately, I don’t think I’ll be able to come back around to this anytime soon.<br></p><p>&gt; Last weekend I rebased, updated my code, and pushed a branch that seems to satisfy the general lexer:<br>&gt; <br>&gt; https://github.com/apple/swift/compare/master...stephencelis:generic-subscripts<br>&gt; <br>&gt; I am, however, having a bit of trouble finding my way around the type checker and constraint generator. Trying to compile a simple example fails with this assertion: https://gist.github.com/stephencelis/10f9210a5409ee9bd79b<br>&gt; <br>&gt; I know that I need to handle the generic type earlier, but I&#39;m not sure where and I&#39;m not sure where function decls are similarly handled.<br>&gt; <br>&gt; I might be biting off more than I can chew, and it&#39;s possible that I should dive into some smaller, starter issues to get my feet wet to more gradually understand the code base. If you have the time, though, I&#39;d be grateful for a little push in the right direction!<br>&gt; <br>&gt; Stephen<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>Generic Subscripting</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>March  2, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Mar 2, 2016, at 6:17 PM, Stephen Celis &lt;stephen.celis at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hello, swift-dev!<br>&gt; <br>&gt; I started diving into the Swift code base in December to see if I could wire together generic subscripts (https://bugs.swift.org/browse/SR-115), but I didn&#39;t have the time or know-how to get very far. I jumped back in again this past week and some of my earlier work was made obsolete by Chris&#39;s DeclContext plumbing at the end of last year :)<br>&gt; <br>&gt; Michael Ilseman (cc&#39;d) also started working on this but I don&#39;t think he had time to get much farther.<br>&gt; <br>&gt; Last weekend I rebased, updated my code, and pushed a branch that seems to satisfy the general lexer:<br>&gt; <br>&gt; https://github.com/apple/swift/compare/master...stephencelis:generic-subscripts<br>&gt; <br>&gt; I am, however, having a bit of trouble finding my way around the type checker and constraint generator. Trying to compile a simple example fails with this assertion: https://gist.github.com/stephencelis/10f9210a5409ee9bd79b<br></p><p>You need to make sure that ConstraintSystem::getTypeOfMemberReference “opens” the generic type of the subscript. The easiest way might be to make sure that the interface type of a generic subscript operator is a GenericFunctionType.<br></p><p>	- Doug<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
