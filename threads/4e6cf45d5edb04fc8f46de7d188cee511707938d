<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7cf8ed5c3a88e5cee2ce136fb3158cea?s=50"></div><header><strong>Low-level Swift</strong> from <string>Romain Goyet</string> &lt;r.goyet at gmail.com&gt;<p>January  7, 2016 at 12:00:00pm</p></header><div class="content"><p>Hi everyone,<br></p><p>In the introduction to Swift<br>&lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/&gt;,<br>it is presented as an &quot;industrial-quality systems programming language&quot;.<br>According to Wikipedia<br>&lt;https://en.wikipedia.org/wiki/System_programming_language&gt;, this means<br>that I could expect to be able to write device drivers or operating systems<br>in Swift.<br></p><p>However it seems like this claim is only partially true, since several<br>important low-level features seem to be completely missing:<br></p><p>- Is it possible to generate volatile memory accesses<br>&lt;http://llvm.org/docs/LangRef.html#volatile-memory-accesses&gt; in Swift?<br>Writing device drivers is virtually impossible without a way to guarantee<br>certain memory operations are actually made (and not optimized-out).<br></p><p>- Is it possible to embed raw binary data in Swift? For example, an<br>equivalent of the following C code &quot;const int8_t foo[6] =<br>{0x00,0x11,0x22,0x33,0x44,0x55};&quot;? The simple Swift equivalent, &quot;let foo:<br>[Int8] = [0x0,0x1,0x2,0x3,0x4,0x6];&quot; is obviously wildly different. Being<br>able to embed raw binary data is very important in a low-level environment:<br>for example, you may need to feed specific data to a device for an<br>initialization sequence at a point where you don&#39;t have a filesystem<br>available yet.<br></p><p>There might be other aspects that I&#39;m overlooking right now, but I think<br>that&#39;s enough to start a discussion: is Swift really meant to be a systems<br>programming language?<br></p><p>Thanks,<br></p><p> - Romain<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/4e6c938d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>Low-level Swift</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>January  7, 2016 at 05:00:00am</p></header><div class="content"><p>I think by &quot;systems programming language&quot; we&#39;re talking in relative terms,<br>but I don&#39;t know about writing drivers in Swift.<br></p><p>Have you filed a feature request in radar? If you have want to reference<br>mine, feel free: radar://21464610 &quot;Real-time Swift&quot; sister-language, or<br>&quot;real time&quot; feature subset<br></p><p>I think it would be sweet if Swift someday is able to replace C++ for<br>writing AudioUnits, etc. I know others hope the same thing. Eg: I heard<br>Chris Liscio say the same on a podcast a couple months back.<br></p><p><br></p><p><br>On Thu, Jan 7, 2016 at 3:52 AM, Romain Goyet via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hi everyone,<br>&gt;<br>&gt; In the introduction to Swift<br>&gt; &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/&gt;,<br>&gt; it is presented as an &quot;industrial-quality systems programming language&quot;.<br>&gt; According to Wikipedia<br>&gt; &lt;https://en.wikipedia.org/wiki/System_programming_language&gt;, this means<br>&gt; that I could expect to be able to write device drivers or operating systems<br>&gt; in Swift.<br>&gt;<br>&gt; However it seems like this claim is only partially true, since several<br>&gt; important low-level features seem to be completely missing:<br>&gt;<br>&gt; - Is it possible to generate volatile memory accesses<br>&gt; &lt;http://llvm.org/docs/LangRef.html#volatile-memory-accesses&gt; in Swift?<br>&gt; Writing device drivers is virtually impossible without a way to guarantee<br>&gt; certain memory operations are actually made (and not optimized-out).<br>&gt;<br>&gt; - Is it possible to embed raw binary data in Swift? For example, an<br>&gt; equivalent of the following C code &quot;const int8_t foo[6] =<br>&gt; {0x00,0x11,0x22,0x33,0x44,0x55};&quot;? The simple Swift equivalent, &quot;let foo:<br>&gt; [Int8] = [0x0,0x1,0x2,0x3,0x4,0x6];&quot; is obviously wildly different. Being<br>&gt; able to embed raw binary data is very important in a low-level environment:<br>&gt; for example, you may need to feed specific data to a device for an<br>&gt; initialization sequence at a point where you don&#39;t have a filesystem<br>&gt; available yet.<br>&gt;<br>&gt; There might be other aspects that I&#39;m overlooking right now, but I think<br>&gt; that&#39;s enough to start a discussion: is Swift really meant to be a systems<br>&gt; programming language?<br>&gt;<br>&gt; Thanks,<br>&gt;<br>&gt;  - Romain<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/c3cd528f/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Low-level Swift</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>January  7, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; - Is it possible to embed raw binary data in Swift? For example, an equivalent of the following C code &quot;const int8_t foo[6] = {0x00,0x11,0x22,0x33,0x44,0x55};&quot;? The simple Swift equivalent, &quot;let foo: [Int8] = [0x0,0x1,0x2,0x3,0x4,0x6];&quot; is obviously wildly different. Being able to embed raw binary data is very important in a low-level environment: for example, you may need to feed specific data to a device for an initialization sequence at a point where you don&#39;t have a filesystem available yet.<br></p><p>The raw binary data equivalent is a tuple. For instance, I believe this will have the exact memory layout you&#39;re looking for:<br></p><p>	let foo: (Int8, Int8, Int8, Int8, Int8, Int8) = (0x00, 0x11, 0x22, 0x33, 0x44, 0x55)<br></p><p>&gt; There might be other aspects that I&#39;m overlooking right now, but I think that&#39;s enough to start a discussion: is Swift really meant to be a systems programming language?<br></p><p>I think it&#39;s probably more accurate to say that Swift *aspires* to be a systems programming language. It is already fast enough and has low enough overhead, but some of the features needed aren&#39;t there yet, and aren&#39;t considered a priority over more common use cases like application programming.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Low-level Swift</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>January  9, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jan 7, 2016, at 12:33 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; - Is it possible to embed raw binary data in Swift? For example, an equivalent of the following C code &quot;const int8_t foo[6] = {0x00,0x11,0x22,0x33,0x44,0x55};&quot;? The simple Swift equivalent, &quot;let foo: [Int8] = [0x0,0x1,0x2,0x3,0x4,0x6];&quot; is obviously wildly different. Being able to embed raw binary data is very important in a low-level environment: for example, you may need to feed specific data to a device for an initialization sequence at a point where you don&#39;t have a filesystem available yet.<br>&gt; <br>&gt; The raw binary data equivalent is a tuple. For instance, I believe this will have the exact memory layout you&#39;re looking for:<br>&gt; <br>&gt; 	let foo: (Int8, Int8, Int8, Int8, Int8, Int8) = (0x00, 0x11, 0x22, 0x33, 0x44, 0x55)<br>&gt; <br>&gt;&gt; There might be other aspects that I&#39;m overlooking right now, but I think that&#39;s enough to start a discussion: is Swift really meant to be a systems programming language?<br>&gt; <br>&gt; I think it&#39;s probably more accurate to say that Swift *aspires* to be a systems programming language. It is already fast enough and has low enough overhead, but some of the features needed aren&#39;t there yet, and aren&#39;t considered a priority over more common use cases like application programming.<br></p><p>Yep, Brent is right here, this is currently an aspirational goal.  Rust and C (as two examples) are currently better than Swift at certain types of system programming tasks.<br></p><p>&quot;Certain types&quot; is key here, because (as with many terms) “system programming language” means different things to different people.  My goal is for [likely a subset of] Swift to eventually scale down to the smallest firmware, boot loaders, and micro-controllers.  At the same time, I think it should be able to be a fantastic kernel/driver programming language, a great compiler implementation language, and many other things that some people consider to be system programming tasks.<br></p><p>There is a bunch of different work that we need to do to make this happen, and it is likely post-Swift 3.  It is my belief that this will all slot into cleanly to the current design, but we’ll have to test that theory when we get there.  Volatile access, inline assembly, careful control over memory allocation and copies, control over struct field layout, and many other things are sure to come up.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>Low-level Swift</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>January  9, 2016 at 08:00:00pm</p></header><div class="content"><p>Hello Chris,<br></p><p>For many, this is also the era of domain specific languages and I think that maybe Swift&#39;s aspirational goal of doing everything (scaling from low level device driver code, to rapid prototyping, to graphically rich and versatile application, to embedded devices, etc...) might put a big burden on the language and on the compiler.<br></p><p>Do you see Swift putting more and more emphasis to interoperability with other languages which might have better characteristic at dealing with a specific domain than Swift does currently with maybe also some push to extend those languages to inter operate better and better?<br></p><p>Sent from my iPhone<br></p><p>&gt; On 9 Jan 2016, at 19:16, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt;&gt; On Jan 7, 2016, at 12:33 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Is it possible to embed raw binary data in Swift? For example, an equivalent of the following C code &quot;const int8_t foo[6] = {0x00,0x11,0x22,0x33,0x44,0x55};&quot;? The simple Swift equivalent, &quot;let foo: [Int8] = [0x0,0x1,0x2,0x3,0x4,0x6];&quot; is obviously wildly different. Being able to embed raw binary data is very important in a low-level environment: for example, you may need to feed specific data to a device for an initialization sequence at a point where you don&#39;t have a filesystem available yet.<br>&gt;&gt; <br>&gt;&gt; The raw binary data equivalent is a tuple. For instance, I believe this will have the exact memory layout you&#39;re looking for:<br>&gt;&gt; <br>&gt;&gt;    let foo: (Int8, Int8, Int8, Int8, Int8, Int8) = (0x00, 0x11, 0x22, 0x33, 0x44, 0x55)<br>&gt;&gt; <br>&gt;&gt;&gt; There might be other aspects that I&#39;m overlooking right now, but I think that&#39;s enough to start a discussion: is Swift really meant to be a systems programming language?<br>&gt;&gt; <br>&gt;&gt; I think it&#39;s probably more accurate to say that Swift *aspires* to be a systems programming language. It is already fast enough and has low enough overhead, but some of the features needed aren&#39;t there yet, and aren&#39;t considered a priority over more common use cases like application programming.<br>&gt; <br>&gt; Yep, Brent is right here, this is currently an aspirational goal.  Rust and C (as two examples) are currently better than Swift at certain types of system programming tasks.<br>&gt; <br>&gt; &quot;Certain types&quot; is key here, because (as with many terms) “system programming language” means different things to different people.  My goal is for [likely a subset of] Swift to eventually scale down to the smallest firmware, boot loaders, and micro-controllers.  At the same time, I think it should be able to be a fantastic kernel/driver programming language, a great compiler implementation language, and many other things that some people consider to be system programming tasks.<br>&gt; <br>&gt; There is a bunch of different work that we need to do to make this happen, and it is likely post-Swift 3.  It is my belief that this will all slot into cleanly to the current design, but we’ll have to test that theory when we get there.  Volatile access, inline assembly, careful control over memory allocation and copies, control over struct field layout, and many other things are sure to come up.<br>&gt; <br>&gt; -Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Low-level Swift</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>January  9, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Jan 9, 2016, at 12:27 PM, Goffredo Marocchi &lt;panajev at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hello Chris,<br>&gt; <br>&gt; For many, this is also the era of domain specific languages and I think that maybe Swift&#39;s aspirational goal of doing everything (scaling from low level device driver code, to rapid prototyping, to graphically rich and versatile application, to embedded devices, etc...) might put a big burden on the language and on the compiler.<br></p><p>Yes, this goal is loaded with engineering/design tradeoffs that we will have to carefully balance.<br></p><p>&gt; Do you see Swift putting more and more emphasis to interoperability with other languages which might have better characteristic at dealing with a specific domain than Swift does currently with maybe also some push to extend those languages to inter operate better and better?<br></p><p>Swift currently has pretty great interop with C and ObjC through the ClangImporter.  Extending that to C++ is natural once we have time to tackle it and do it right.<br></p><p>I see no reason that we couldn’t have importers for other languages implemented in the same way.  For example, it would be very interesting for swift to be able to import a Java or C# package and just call methods directly on their objects, just like we do for ObjC.<br></p><p>-Chris<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Low-level Swift</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>January  7, 2016 at 12:00:00pm</p></header><div class="content"><p>I&#39;d think the hypothetical way in Swift to write to configuration registers<br>would be to create an UnsafeMutablePointer&lt;Int64&gt; (or some other raw<br>integer type) from a raw memory address, and then get/set the contents<br>using the &#39;memory&#39; property. Not sure if the compiler is &quot;smart&quot; enough to<br>optimize out memory accesses made using that mechanism, although I would<br>assume no.<br></p><p>Austin<br></p><p>On Thu, Jan 7, 2016 at 3:52 AM, Romain Goyet via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hi everyone,<br>&gt;<br>&gt; In the introduction to Swift<br>&gt; &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/&gt;,<br>&gt; it is presented as an &quot;industrial-quality systems programming language&quot;.<br>&gt; According to Wikipedia<br>&gt; &lt;https://en.wikipedia.org/wiki/System_programming_language&gt;, this means<br>&gt; that I could expect to be able to write device drivers or operating systems<br>&gt; in Swift.<br>&gt;<br>&gt; However it seems like this claim is only partially true, since several<br>&gt; important low-level features seem to be completely missing:<br>&gt;<br>&gt; - Is it possible to generate volatile memory accesses<br>&gt; &lt;http://llvm.org/docs/LangRef.html#volatile-memory-accesses&gt; in Swift?<br>&gt; Writing device drivers is virtually impossible without a way to guarantee<br>&gt; certain memory operations are actually made (and not optimized-out).<br>&gt;<br>&gt; - Is it possible to embed raw binary data in Swift? For example, an<br>&gt; equivalent of the following C code &quot;const int8_t foo[6] =<br>&gt; {0x00,0x11,0x22,0x33,0x44,0x55};&quot;? The simple Swift equivalent, &quot;let foo:<br>&gt; [Int8] = [0x0,0x1,0x2,0x3,0x4,0x6];&quot; is obviously wildly different. Being<br>&gt; able to embed raw binary data is very important in a low-level environment:<br>&gt; for example, you may need to feed specific data to a device for an<br>&gt; initialization sequence at a point where you don&#39;t have a filesystem<br>&gt; available yet.<br>&gt;<br>&gt; There might be other aspects that I&#39;m overlooking right now, but I think<br>&gt; that&#39;s enough to start a discussion: is Swift really meant to be a systems<br>&gt; programming language?<br>&gt;<br>&gt; Thanks,<br>&gt;<br>&gt;  - Romain<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/42c1944e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Low-level Swift</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>January  7, 2016 at 04:00:00pm</p></header><div class="content"><p>It is. This:<br></p><p>&gt; func foo(ptr: UnsafeMutablePointer&lt;Int32&gt;) {<br>&gt; 	ptr.memory = 4<br>&gt; 	ptr.memory = 5<br>&gt; }<br></p><p>compiles to:<br></p><p>&gt; define hidden void @_TF4test3fooFGVSs20UnsafeMutablePointerVSs5Int32_T_(i8* nocapture) #1 {<br>&gt; entry:<br>&gt;   %.value = bitcast i8* %0 to i32*<br>&gt;   store i32 5, i32* %.value, align 4<br>&gt;   ret void<br>&gt; }<br></p><p>Notice how it&#39;s &quot;missing&quot; a store.<br></p><p>Félix<br></p><p>&gt; Le 7 janv. 2016 à 15:54:36, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; I&#39;d think the hypothetical way in Swift to write to configuration registers would be to create an UnsafeMutablePointer&lt;Int64&gt; (or some other raw integer type) from a raw memory address, and then get/set the contents using the &#39;memory&#39; property. Not sure if the compiler is &quot;smart&quot; enough to optimize out memory accesses made using that mechanism, although I would assume no.<br>&gt; <br>&gt; Austin<br>&gt; <br>&gt; On Thu, Jan 7, 2016 at 3:52 AM, Romain Goyet via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Hi everyone,<br>&gt; <br>&gt; In the introduction to Swift &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/&gt;, it is presented as an &quot;industrial-quality systems programming language&quot;.<br>&gt; According to Wikipedia &lt;https://en.wikipedia.org/wiki/System_programming_language&gt;, this means that I could expect to be able to write device drivers or operating systems in Swift.<br>&gt; <br>&gt; However it seems like this claim is only partially true, since several important low-level features seem to be completely missing:<br>&gt; <br>&gt; - Is it possible to generate volatile memory accesses &lt;http://llvm.org/docs/LangRef.html#volatile-memory-accesses&gt; in Swift? Writing device drivers is virtually impossible without a way to guarantee certain memory operations are actually made (and not optimized-out). <br>&gt; <br>&gt; - Is it possible to embed raw binary data in Swift? For example, an equivalent of the following C code &quot;const int8_t foo[6] = {0x00,0x11,0x22,0x33,0x44,0x55};&quot;? The simple Swift equivalent, &quot;let foo: [Int8] = [0x0,0x1,0x2,0x3,0x4,0x6];&quot; is obviously wildly different. Being able to embed raw binary data is very important in a low-level environment: for example, you may need to feed specific data to a device for an initialization sequence at a point where you don&#39;t have a filesystem available yet.<br>&gt; <br>&gt; There might be other aspects that I&#39;m overlooking right now, but I think that&#39;s enough to start a discussion: is Swift really meant to be a systems programming language?<br>&gt; <br>&gt; Thanks,<br>&gt; <br>&gt;  - Romain<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/86788236/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Low-level Swift</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>January  7, 2016 at 01:00:00pm</p></header><div class="content"><p>Indeed, that&#39;s good to know. Thanks for the clarification!<br></p><p>Austin<br></p><p>On Thu, Jan 7, 2016 at 1:22 PM, Félix Cloutier &lt;felixcca at yahoo.ca&gt; wrote:<br></p><p>&gt; It is. This:<br>&gt;<br>&gt; func foo(ptr: UnsafeMutablePointer&lt;Int32&gt;) {<br>&gt; ptr.memory = 4<br>&gt; ptr.memory = 5<br>&gt; }<br>&gt;<br>&gt;<br>&gt; compiles to:<br>&gt;<br>&gt; define hidden void<br>&gt; @_TF4test3fooFGVSs20UnsafeMutablePointerVSs5Int32_T_(i8* nocapture) #1 {<br>&gt; entry:<br>&gt;   %.value = bitcast i8* %0 to i32*<br>&gt;   store i32 5, i32* %.value, align 4<br>&gt;   ret void<br>&gt; }<br>&gt;<br>&gt;<br>&gt; Notice how it&#39;s &quot;missing&quot; a store.<br>&gt;<br>&gt; Félix<br>&gt;<br>&gt; Le 7 janv. 2016 à 15:54:36, Austin Zheng via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;<br>&gt; I&#39;d think the hypothetical way in Swift to write to configuration<br>&gt; registers would be to create an UnsafeMutablePointer&lt;Int64&gt; (or some other<br>&gt; raw integer type) from a raw memory address, and then get/set the contents<br>&gt; using the &#39;memory&#39; property. Not sure if the compiler is &quot;smart&quot; enough to<br>&gt; optimize out memory accesses made using that mechanism, although I would<br>&gt; assume no.<br>&gt;<br>&gt; Austin<br>&gt;<br>&gt; On Thu, Jan 7, 2016 at 3:52 AM, Romain Goyet via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Hi everyone,<br>&gt;&gt;<br>&gt;&gt; In the introduction to Swift<br>&gt;&gt; &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/&gt;,<br>&gt;&gt; it is presented as an &quot;industrial-quality systems programming language&quot;.<br>&gt;&gt; According to Wikipedia<br>&gt;&gt; &lt;https://en.wikipedia.org/wiki/System_programming_language&gt;, this means<br>&gt;&gt; that I could expect to be able to write device drivers or operating systems<br>&gt;&gt; in Swift.<br>&gt;&gt;<br>&gt;&gt; However it seems like this claim is only partially true, since several<br>&gt;&gt; important low-level features seem to be completely missing:<br>&gt;&gt;<br>&gt;&gt; - Is it possible to generate volatile memory accesses<br>&gt;&gt; &lt;http://llvm.org/docs/LangRef.html#volatile-memory-accesses&gt; in Swift?<br>&gt;&gt; Writing device drivers is virtually impossible without a way to guarantee<br>&gt;&gt; certain memory operations are actually made (and not optimized-out).<br>&gt;&gt;<br>&gt;&gt; - Is it possible to embed raw binary data in Swift? For example, an<br>&gt;&gt; equivalent of the following C code &quot;const int8_t foo[6] =<br>&gt;&gt; {0x00,0x11,0x22,0x33,0x44,0x55};&quot;? The simple Swift equivalent, &quot;let foo:<br>&gt;&gt; [Int8] = [0x0,0x1,0x2,0x3,0x4,0x6];&quot; is obviously wildly different. Being<br>&gt;&gt; able to embed raw binary data is very important in a low-level environment:<br>&gt;&gt; for example, you may need to feed specific data to a device for an<br>&gt;&gt; initialization sequence at a point where you don&#39;t have a filesystem<br>&gt;&gt; available yet.<br>&gt;&gt;<br>&gt;&gt; There might be other aspects that I&#39;m overlooking right now, but I think<br>&gt;&gt; that&#39;s enough to start a discussion: is Swift really meant to be a systems<br>&gt;&gt; programming language?<br>&gt;&gt;<br>&gt;&gt; Thanks,<br>&gt;&gt;<br>&gt;&gt;  - Romain<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/28ffe14f/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Low-level Swift</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>January  7, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jan 7, 2016, at 3:52 AM, Romain Goyet via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi everyone,<br>&gt; <br>&gt; In the introduction to Swift &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/&gt;, it is presented as an &quot;industrial-quality systems programming language&quot;.<br>&gt; According to Wikipedia &lt;https://en.wikipedia.org/wiki/System_programming_language&gt;, this means that I could expect to be able to write device drivers or operating systems in Swift.<br>&gt; <br>&gt; However it seems like this claim is only partially true, since several important low-level features seem to be completely missing:<br>&gt; <br>&gt; - Is it possible to generate volatile memory accesses &lt;http://llvm.org/docs/LangRef.html#volatile-memory-accesses&gt; in Swift? Writing device drivers is virtually impossible without a way to guarantee certain memory operations are actually made (and not optimized-out). <br></p><p>We haven&#39;t designed APIs for this yet, but the LLVM instructions for volatile and atomic operations are available in the stdlib-private &#39;Builtin&#39; module, should you want to experiment.<br></p><p>&gt; - Is it possible to embed raw binary data in Swift? For example, an equivalent of the following C code &quot;const int8_t foo[6] = {0x00,0x11,0x22,0x33,0x44,0x55};&quot;? The simple Swift equivalent, &quot;let foo: [Int8] = [0x0,0x1,0x2,0x3,0x4,0x6];&quot; is obviously wildly different. Being able to embed raw binary data is very important in a low-level environment: for example, you may need to feed specific data to a device for an initialization sequence at a point where you don&#39;t have a filesystem available yet.<br></p><p>We also haven&#39;t designed a story for this yet. We have some support for optimizing constant literal initializations like this into static initializers, but need to do more work to be able to guarantee it.<br></p><p>&gt; There might be other aspects that I&#39;m overlooking right now, but I think that&#39;s enough to start a discussion: is Swift really meant to be a systems programming language?<br></p><p>Like Austin said, that&#39;s a long term goal, and I think you can get pretty far today if you&#39;re careful and understand the compiler and runtime, but we&#39;re a long ways away from really productizing our low-level programming support to a degree I&#39;d feel comfortable advertising.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/5aa94aa5/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
