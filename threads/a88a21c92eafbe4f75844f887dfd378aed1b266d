<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>__swift__</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>August 24, 2016 at 03:00:00pm</p></header><div class="content"><p>Hey, all. I’m here to propose predefining a macro __swift__ when C code is compiled with Swift. We’ve gotten a few requests for it in the past and haven’t done it so that people don’t write header files that arbitrarily restrict features when used from Swift, or check for &quot;Swift&quot; when they really should be checking for modules support, or Objective-C mode, or nullability support. (Or worse, they guard code under __swift__ and then don’t ever test it, leading to failures to import the module from Swift.)<br></p><p>However, with Swift 3, it’s now become important for Objective-C authors to be able to control how their APIs look in modern Swift 3 without disrupting existing clients on Swift 2.3. (Or just because Swift 3 style looks out-of-place in Swift 2.3.) The most obvious way to do this would be to define a macro that has the Swift version in it. For Swift version X.Y.Z, we could use something like<br></p><p>-D__swift__=XYYZZ<br></p><p>e.g.<br></p><p>-D__swift__=30001<br></p><p>for Swift 3.0.1.<br></p><p>This is option (1). Option (2) would be to define __swift__ as a predicate that took version numbers:<br></p><p>-D__swift__(MAJOR, MINOR, PATCH)=(MAJOR * 10000 + MINOR * 100 + PATCH &lt;= XYYZZ)<br>-D__swift__(MAJOR, MINOR, PATCH)=(MAJOR * 10000 + MINOR * 100 + PATCH &lt;= 30001)<br></p><p>For completeness’ sake, option (3) would be to define a single macro __SWIFT3__, defined to 1. Clients can test for the presence or absence of this macro. I don’t like this option because (a) Swift 4 will also need to define __SWIFT3__, because it shouldn’t have the “old” behavior, and (b) we might very well want something like this again in the future; will we also define __SWIFT4__?<br></p><p>(Why __swift__ and not __SWIFT__? By analogy with __cplusplus [sic] and __clang__, although not __STDC__ or <br>__STDC_VERSION__. I don’t actually have a strong opinion here.)<br></p><p>Thoughts?<br>Jordan<br></p><p>P.S. For Apple folks, this is rdar://problem/26921435 &lt;rdar://problem/26921435&gt;.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160824/a88a266d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>__swift__</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>August 25, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Aug 24, 2016, at 3:57 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; Hey, all. I’m here to propose predefining a macro __swift__ when C code is compiled with Swift. We’ve gotten a few requests for it in the past and haven’t done it so that people don’t write header files that arbitrarily restrict features when used from Swift, or check for &quot;Swift&quot; when they really should be checking for modules support, or Objective-C mode, or nullability support. (Or worse, they guard code under __swift__ and then don’t ever test it, leading to failures to import the module from Swift.)<br>&gt; <br>&gt; However, with Swift 3, it’s now become important for Objective-C authors to be able to control how their APIs look in modern Swift 3 without disrupting existing clients on Swift 2.3. (Or just because Swift 3 style looks out-of-place in Swift 2.3.) The most obvious way to do this would be to define a macro that has the Swift version in it. For Swift version X.Y.Z, we could use something like<br>&gt; <br>&gt; -D__swift__=XYYZZ<br>&gt; <br>&gt; e.g.<br>&gt; <br>&gt; -D__swift__=30001<br>&gt; <br>&gt; for Swift 3.0.1.<br>&gt; <br>&gt; This is option (1). <br></p><p>Option (1) sounds good to me. We don’t need to make this complicated.<br></p><p>- Doug<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160825/b31fbdb9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>__swift__</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>August 25, 2016 at 09:00:00am</p></header><div class="content"><p>+1<br></p><p> - Daniel<br></p><p>&gt; On Aug 25, 2016, at 9:38 AM, Douglas Gregor via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Aug 24, 2016, at 3:57 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hey, all. I’m here to propose predefining a macro __swift__ when C code is compiled with Swift. We’ve gotten a few requests for it in the past and haven’t done it so that people don’t write header files that arbitrarily restrict features when used from Swift, or check for &quot;Swift&quot; when they really should be checking for modules support, or Objective-C mode, or nullability support. (Or worse, they guard code under __swift__ and then don’t ever test it, leading to failures to import the module from Swift.)<br>&gt;&gt; <br>&gt;&gt; However, with Swift 3, it’s now become important for Objective-C authors to be able to control how their APIs look in modern Swift 3 without disrupting existing clients on Swift 2.3. (Or just because Swift 3 style looks out-of-place in Swift 2.3.) The most obvious way to do this would be to define a macro that has the Swift version in it. For Swift version X.Y.Z, we could use something like<br>&gt;&gt; <br>&gt;&gt; -D__swift__=XYYZZ<br>&gt;&gt; <br>&gt;&gt; e.g.<br>&gt;&gt; <br>&gt;&gt; -D__swift__=30001<br>&gt;&gt; <br>&gt;&gt; for Swift 3.0.1.<br>&gt;&gt; <br>&gt;&gt; This is option (1). <br>&gt; <br>&gt; Option (1) sounds good to me. We don’t need to make this complicated.<br>&gt; <br>&gt; - Doug<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160825/91bdb491/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>__swift__</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>August 25, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Aug 25, 2016, at 9:38, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Aug 24, 2016, at 3:57 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hey, all. I’m here to propose predefining a macro __swift__ when C code is compiled with Swift. We’ve gotten a few requests for it in the past and haven’t done it so that people don’t write header files that arbitrarily restrict features when used from Swift, or check for &quot;Swift&quot; when they really should be checking for modules support, or Objective-C mode, or nullability support. (Or worse, they guard code under __swift__ and then don’t ever test it, leading to failures to import the module from Swift.)<br>&gt;&gt; <br>&gt;&gt; However, with Swift 3, it’s now become important for Objective-C authors to be able to control how their APIs look in modern Swift 3 without disrupting existing clients on Swift 2.3. (Or just because Swift 3 style looks out-of-place in Swift 2.3.) The most obvious way to do this would be to define a macro that has the Swift version in it. For Swift version X.Y.Z, we could use something like<br>&gt;&gt; <br>&gt;&gt; -D__swift__=XYYZZ<br>&gt;&gt; <br>&gt;&gt; e.g.<br>&gt;&gt; <br>&gt;&gt; -D__swift__=30001<br>&gt;&gt; <br>&gt;&gt; for Swift 3.0.1.<br>&gt;&gt; <br>&gt;&gt; This is option (1). <br>&gt; <br>&gt; Option (1) sounds good to me. We don’t need to make this complicated.<br></p><p>Okay. Next question: two digits or three digits for the minor and patch versions?<br></p><p>- Two digits: if we ever switch to year/month combinations like C/C++, those will be higher values (unless we get to Swift 20 first).<br>- Three digits: better for &quot;fake&quot; versions like 3.0.100.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160825/cee22531/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>__swift__</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>August 25, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Aug 25, 2016, at 2:48 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Aug 25, 2016, at 9:38, Douglas Gregor &lt;dgregor at apple.com &lt;mailto:dgregor at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Aug 24, 2016, at 3:57 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hey, all. I’m here to propose predefining a macro __swift__ when C code is compiled with Swift. We’ve gotten a few requests for it in the past and haven’t done it so that people don’t write header files that arbitrarily restrict features when used from Swift, or check for &quot;Swift&quot; when they really should be checking for modules support, or Objective-C mode, or nullability support. (Or worse, they guard code under __swift__ and then don’t ever test it, leading to failures to import the module from Swift.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; However, with Swift 3, it’s now become important for Objective-C authors to be able to control how their APIs look in modern Swift 3 without disrupting existing clients on Swift 2.3. (Or just because Swift 3 style looks out-of-place in Swift 2.3.) The most obvious way to do this would be to define a macro that has the Swift version in it. For Swift version X.Y.Z, we could use something like<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -D__swift__=XYYZZ<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; e.g.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -D__swift__=30001<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for Swift 3.0.1.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is option (1). <br>&gt;&gt; <br>&gt;&gt; Option (1) sounds good to me. We don’t need to make this complicated.<br>&gt; <br>&gt; Okay. Next question: two digits or three digits for the minor and patch versions?<br>&gt; <br>&gt; - Two digits: if we ever switch to year/month combinations like C/C++, those will be higher values (unless we get to Swift 20 first).<br>&gt; - Three digits: better for &quot;fake&quot; versions like 3.0.100.<br></p><p><br>I think we can just stick with 2 digits.<br></p><p>	- Doug<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160825/d0956e12/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>__swift__</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>August 25, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Aug 25, 2016, at 14:58, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Aug 25, 2016, at 2:48 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Aug 25, 2016, at 9:38, Douglas Gregor &lt;dgregor at apple.com &lt;mailto:dgregor at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Aug 24, 2016, at 3:57 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hey, all. I’m here to propose predefining a macro __swift__ when C code is compiled with Swift. We’ve gotten a few requests for it in the past and haven’t done it so that people don’t write header files that arbitrarily restrict features when used from Swift, or check for &quot;Swift&quot; when they really should be checking for modules support, or Objective-C mode, or nullability support. (Or worse, they guard code under __swift__ and then don’t ever test it, leading to failures to import the module from Swift.)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; However, with Swift 3, it’s now become important for Objective-C authors to be able to control how their APIs look in modern Swift 3 without disrupting existing clients on Swift 2.3. (Or just because Swift 3 style looks out-of-place in Swift 2.3.) The most obvious way to do this would be to define a macro that has the Swift version in it. For Swift version X.Y.Z, we could use something like<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -D__swift__=XYYZZ<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; e.g.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -D__swift__=30001<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; for Swift 3.0.1.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This is option (1). <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Option (1) sounds good to me. We don’t need to make this complicated.<br>&gt;&gt; <br>&gt;&gt; Okay. Next question: two digits or three digits for the minor and patch versions?<br>&gt;&gt; <br>&gt;&gt; - Two digits: if we ever switch to year/month combinations like C/C++, those will be higher values (unless we get to Swift 20 first).<br>&gt;&gt; - Three digits: better for &quot;fake&quot; versions like 3.0.100.<br>&gt; <br>&gt; <br>&gt; I think we can just stick with 2 digits.<br></p><p>Okay. PR here: https://github.com/apple/swift/pull/4510/ &lt;https://github.com/apple/swift/pull/4510/&gt;.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160825/51bffd79/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b6520643611a05fd040d0abcee3c883c?s=50"></div><header><strong>__swift__</strong> from <string>Ted Kremenek</string> &lt;kremenek at apple.com&gt;<p>August 26, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Aug 25, 2016, at 3:11 PM, Jordan Rose via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Aug 25, 2016, at 14:58, Douglas Gregor &lt;dgregor at apple.com &lt;mailto:dgregor at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Aug 25, 2016, at 2:48 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Aug 25, 2016, at 9:38, Douglas Gregor &lt;dgregor at apple.com &lt;mailto:dgregor at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Aug 24, 2016, at 3:57 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hey, all. I’m here to propose predefining a macro __swift__ when C code is compiled with Swift. We’ve gotten a few requests for it in the past and haven’t done it so that people don’t write header files that arbitrarily restrict features when used from Swift, or check for &quot;Swift&quot; when they really should be checking for modules support, or Objective-C mode, or nullability support. (Or worse, they guard code under __swift__ and then don’t ever test it, leading to failures to import the module from Swift.)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; However, with Swift 3, it’s now become important for Objective-C authors to be able to control how their APIs look in modern Swift 3 without disrupting existing clients on Swift 2.3. (Or just because Swift 3 style looks out-of-place in Swift 2.3.) The most obvious way to do this would be to define a macro that has the Swift version in it. For Swift version X.Y.Z, we could use something like<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -D__swift__=XYYZZ<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; e.g.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -D__swift__=30001<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; for Swift 3.0.1.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This is option (1). <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Option (1) sounds good to me. We don’t need to make this complicated.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Okay. Next question: two digits or three digits for the minor and patch versions?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Two digits: if we ever switch to year/month combinations like C/C++, those will be higher values (unless we get to Swift 20 first).<br>&gt;&gt;&gt; - Three digits: better for &quot;fake&quot; versions like 3.0.100.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I think we can just stick with 2 digits.<br>&gt; <br>&gt; Okay. PR here: https://github.com/apple/swift/pull/4510/ &lt;https://github.com/apple/swift/pull/4510/&gt;.<br>&gt; <br>&gt; Jordan<br></p><p>Thanks Jordan!<br></p><p>FWIW, it would be great if this was documented *somewhere*.  Not certain if we have a handy place to put documentation on Clang Importer behavior for Swift developers.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160826/c5a0cbbc/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
