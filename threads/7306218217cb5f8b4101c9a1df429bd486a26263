<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>There should be no reserved words (keywords) ?</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>March  4, 2016 at 01:00:00pm</p></header><div class="content"><p>Hello, <br></p><p>reserved words:<br></p><p>In short:<br>                 -=  there should be none =-<br></p><p>A compiler should have enough intelligence <br>to determine from the statementâ€™s context <br>if words are used as a keywords or not.  <br></p><p>Like e.g. in PL/1 as I posted here before.<br></p><p>Whatâ€™s your opinion?<br></p><p>Kind Regards, Ted.<br></p><p><br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160304/73066263/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[swift-evolution] There should be no reserved words (keywords) ?</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March  4, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Mar 4, 2016, at 4:43 AM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello, <br>&gt; <br>&gt; reserved words:<br>&gt; <br>&gt; In short:<br>&gt;                  -=  there should be none =-<br>&gt; <br>&gt; A compiler should have enough intelligence <br>&gt; to determine from the statementâ€™s context <br>&gt; if words are used as a keywords or not.  <br>&gt; <br>&gt; Like e.g. in PL/1 as I posted here before.<br>&gt; <br>&gt; Whatâ€™s your opinion?<br>&gt; <br>&gt; Kind Regards, Ted.<br></p><p>We&#39;re getting close. We already allow arbitrary keywords as argument labels, and Doug has proposed allowing them after `.` accesses as well, so you can freely define and use methods named foo.default(in:if:else:). Keywords at that point only interfere with the &quot;root&quot; identifier of a chain, and you could introduce module, type, or instance qualification to avoid that problem (saying Module.default instead of `default`).<br></p><p>-Joe<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160304/1e6ebe49/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[swift-evolution] There should be no reserved words (keywords) ?</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>March  7, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Mar 4, 2016, at 10:12, Joe Groff via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Mar 4, 2016, at 4:43 AM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello, <br>&gt;&gt; <br>&gt;&gt; reserved words:<br>&gt;&gt; <br>&gt;&gt; In short:<br>&gt;&gt;                  -=  there should be none =-<br>&gt;&gt; <br>&gt;&gt; A compiler should have enough intelligence <br>&gt;&gt; to determine from the statementâ€™s context <br>&gt;&gt; if words are used as a keywords or not.  <br>&gt;&gt; <br>&gt;&gt; Like e.g. in PL/1 as I posted here before.<br>&gt;&gt; <br>&gt;&gt; Whatâ€™s your opinion?<br>&gt;&gt; <br>&gt;&gt; Kind Regards, Ted.<br>&gt; <br>&gt; We&#39;re getting close. We already allow arbitrary keywords as argument labels, and Doug has proposed allowing them after `.` accesses as well, so you can freely define and use methods named foo.default(in:if:else:). Keywords at that point only interfere with the &quot;root&quot; identifier of a chain, and you could introduce module, type, or instance qualification to avoid that problem (saying Module.default instead of `default`).<br></p><p>Whenever possible, we should endeavour to make source code readable by humans; being easy for the compiler is nice, but shouldn&#39;t be a primary goal.<br></p><p>Humans reading code will have an easier time if identifiers consistently refer to the same thing. This doesn&#39;t always happenâ€”methods on different types, methods shadowing top-level functions, etcâ€”but in general we should not encourage people to change the meaning of symbols.<br></p><p>-1 from me.<br></p><p>Jordan<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160307/12af2816/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[swift-evolution] There should be no reserved words (keywords) ?</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March  7, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Mar 7, 2016, at 1:26 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Mar 4, 2016, at 10:12, Joe Groff via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Mar 4, 2016, at 4:43 AM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello, <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; reserved words:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In short:<br>&gt;&gt;&gt;                  -=  there should be none =-<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A compiler should have enough intelligence <br>&gt;&gt;&gt; to determine from the statementâ€™s context <br>&gt;&gt;&gt; if words are used as a keywords or not.  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Like e.g. in PL/1 as I posted here before.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Whatâ€™s your opinion?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Kind Regards, Ted.<br>&gt;&gt; <br>&gt;&gt; We&#39;re getting close. We already allow arbitrary keywords as argument labels, and Doug has proposed allowing them after `.` accesses as well, so you can freely define and use methods named foo.default(in:if:else:). Keywords at that point only interfere with the &quot;root&quot; identifier of a chain, and you could introduce module, type, or instance qualification to avoid that problem (saying Module.default instead of `default`).<br>&gt; <br>&gt; Whenever possible, we should endeavour to make source code readable by humans; being easy for the compiler is nice, but shouldn&#39;t be a primary goal.<br>&gt; <br>&gt; Humans reading code will have an easier time if identifiers consistently refer to the same thing. This doesn&#39;t always happenâ€”methods on different types, methods shadowing top-level functions, etcâ€”but in general we should not encourage people to change the meaning of symbols.<br>&gt; <br>&gt; -1 from me.<br></p><p>In the places where we do or plan to allow generalized keyword access, there isn&#39;t really anything else that makes sense than an identifier, so human readability doesn&#39;t strike me as an issue.<br></p><p>-Joe<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160307/71c2311a/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>[swift-evolution] There should be no reserved words (keywords) ?</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>March  4, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; func if&lt;T&gt;(@autoclosure condition: () -&gt; Bool, @noescape closure: () -&gt; T) -&gt; T? {<br>&gt; 	if(!condition()) {<br>&gt; 		return closure()<br>&gt; 	}<br>&gt; 	return nil<br>&gt; }<br>&gt; <br>&gt; if(2 + 2 == 4) {<br>&gt; 	return 5<br>&gt; }<br></p><p><br>In the world without reserved keywords, what should the above code do? ðŸ˜œ<br></p><p><br>Pozdrawiam â€“ Regards,<br>Adrian Kashivskyy<br></p><p>&gt; WiadomoÅ›Ä‡ napisana przez Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org&gt; w dniu 04.03.2016, o godz. 13:43:<br>&gt; <br>&gt; Hello, <br>&gt; <br>&gt; reserved words:<br>&gt; <br>&gt; In short:<br>&gt;                  -=  there should be none =-<br>&gt; <br>&gt; A compiler should have enough intelligence <br>&gt; to determine from the statementâ€™s context <br>&gt; if words are used as a keywords or not.  <br>&gt; <br>&gt; Like e.g. in PL/1 as I posted here before.<br>&gt; <br>&gt; Whatâ€™s your opinion?<br>&gt; <br>&gt; Kind Regards, Ted.<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160304/a8c95397/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
