<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c354b21edb9ba56fe6b42950e08195fa?s=50"></div><header><strong>[Idea] Set variables to &quot;_&quot; in two-stage init; remove IUO</strong> from <string>Jonathan Hull</string> &lt;jhull at gbis.com&gt;<p>June 15, 2016 at 11:00:00pm</p></header><div class="content"><p>I don’t remember a proposal for that, but I would definitely support one.  I use this pattern all the time (usually by initializing to a default value first), and it would be nice to have an explicit/safe way to handle it, (and to avoid waisting cycles creating an object I never use).<br></p><p>Perhaps we should spell it @init or @initHelp:<br></p><p>class MyClass : MySuperClass {<br></p><p>    let x:Int<br>    let y:String<br>    let z:Double<br></p><p>    @init func commonSetup() {<br>        self.y = “My String”<br>        self.z = 4.2<br>    }<br></p><p>   init(x: Int) {<br>        self.x = x<br>        commonSetup() //No error because commonSetup() sets the value of ‘y’ &amp; ‘z&#39;<br>        super.init()<br>   }<br>}<br></p><p>Basically the @init functions would be inlined into the init.  They would only be callable from inits, and could only be called a single time within each init.<br></p><p>Thanks,<br>Jon<br></p><p>&gt; I believe there was(was?) already a suggestion to introduce special methods <br>&gt; that could be called from initializers. IMO this is a better solution to <br>&gt; the problem as you really should not call &#39;usual&#39; instance method until the <br>&gt; instance is fully instantiated(super.init() called in your case):<br>&gt; <br>&gt; class MyClass : MySuperClass {<br>&gt; <br>&gt; 	let x : Int<br>&gt; 	let y : String  //let!<br>&gt; <br>&gt; 	initfunc calcY(somePatam: Int) -&gt; String {<br>&gt; 		return ....<br>&gt; 	}<br>&gt; <br>&gt; 	init(x: Int) {<br>&gt; 		self.x = x<br>&gt; 		self.y = assignY(5)<br>&gt; 		super.init()<br>&gt; 	}<br>&gt; }<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/6d84b9fe/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Idea] Set variables to &quot;_&quot; in two-stage init; remove IUO</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 16, 2016 at 02:00:00pm</p></header><div class="content"><p>The question is if we can solve the problem with special private init() and <br>convenience inits ?<br></p><p>class MyBase {<br>     init () {<br></p><p>     }<br>}<br></p><p>class MyClass : MyBase {<br></p><p>     let x:Int<br>     let y:String<br>     let z:Double<br></p><p>     private init(_ xValue: Int, _ zValue: Double) {<br>         self.x = xValue<br>         self.y = &quot;\(xValue) - \(zValue)&quot;<br>         self.z = zValue<br></p><p>         super.init()<br>     }<br></p><p>    convenience override init() {<br>         self.init(1, 1.0)<br>    }<br></p><p>    convenience init(x: Int) {<br>         self.init(x, 1.0)<br>    }<br></p><p>    convenience init(z: Double) {<br>         self.init(1, z)<br>    }<br>}<br></p><p>print(MyClass().y)<br>print(MyClass(x: 10).y)<br>print(MyClass(z: 10.0).y)<br></p><p>Seems like we can. Any drawbacks?<br></p><p>On 16.06.2016 9:27, Jonathan Hull via swift-evolution wrote:<br>&gt; I don’t remember a proposal for that, but I would definitely support one.<br>&gt;  I use this pattern all the time (usually by initializing to a default<br>&gt; value first), and it would be nice to have an explicit/safe way to handle<br>&gt; it, (and to avoid waisting cycles creating an object I never use).<br>&gt;<br>&gt; Perhaps we should spell it @init or @initHelp:<br>&gt;<br>&gt; class MyClass : MySuperClass {<br>&gt;<br>&gt;     let x:Int<br>&gt;     let y:String<br>&gt;     let z:Double<br>&gt;<br>&gt;     @init func commonSetup() {<br>&gt;         self.y = “My String”<br>&gt;         self.z = 4.2<br>&gt;     }<br>&gt;<br>&gt;    init(x: Int) {<br>&gt;         self.x = x<br>&gt;         commonSetup() //No error because commonSetup() sets the value of<br>&gt; ‘y’ &amp; ‘z&#39;<br>&gt;         super.init()<br>&gt;    }<br>&gt; }<br>&gt;<br>&gt; Basically the @init functions would be inlined into the init.  They would<br>&gt; only be callable from inits, and could only be called a single time within<br>&gt; each init.<br>&gt;<br>&gt; Thanks,<br>&gt; Jon<br>&gt;<br>&gt;&gt; I believe there was(was?) already a suggestion to introduce special methods<br>&gt;&gt; that could be called from initializers. IMO this is a better solution to<br>&gt;&gt; the problem as you really should not call &#39;usual&#39; instance method until the<br>&gt;&gt; instance is fully instantiated(super.init() called in your case):<br>&gt;&gt;<br>&gt;&gt; class MyClass : MySuperClass {<br>&gt;&gt;<br>&gt;&gt; 	let x : Int<br>&gt;&gt; 	let y : String  //let!<br>&gt;&gt;<br>&gt;&gt; 	initfunc calcY(somePatam: Int) -&gt; String {<br>&gt;&gt; 		return ....<br>&gt;&gt; 	}<br>&gt;&gt;<br>&gt;&gt; 	init(x: Int) {<br>&gt;&gt; 		self.x = x<br>&gt;&gt; 		self.y = assignY(5)<br>&gt;&gt; 		super.init()<br>&gt;&gt; 	}<br>&gt;&gt; }<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c354b21edb9ba56fe6b42950e08195fa?s=50"></div><header><strong>[Idea] Set variables to &quot;_&quot; in two-stage init; remove IUO</strong> from <string>Jonathan Hull</string> &lt;jhull at gbis.com&gt;<p>June 16, 2016 at 04:00:00am</p></header><div class="content"><p>Good question/idea.<br></p><p>The use case I have with this most often is -initWithCoder and some other init like -initWithFrame.  I don’t think you can make those convenience inits.  If there is a way to make that work though, I am all for it.<br></p><p>The thing I do most often, when possible, is lazily set each variable from a closure so that I don’t have to worry about it in the inits.  I find this especially useful for creating subviews/layers.  It isn’t always an option though…<br></p><p>Thanks,<br>Jon<br></p><p><br></p><p>&gt; On Jun 16, 2016, at 4:19 AM, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br>&gt; <br>&gt; The question is if we can solve the problem with special private init() and convenience inits ?<br>&gt; <br>&gt; class MyBase {<br>&gt;    init () {<br>&gt; <br>&gt;    }<br>&gt; }<br>&gt; <br>&gt; class MyClass : MyBase {<br>&gt; <br>&gt;    let x:Int<br>&gt;    let y:String<br>&gt;    let z:Double<br>&gt; <br>&gt;    private init(_ xValue: Int, _ zValue: Double) {<br>&gt;        self.x = xValue<br>&gt;        self.y = &quot;\(xValue) - \(zValue)&quot;<br>&gt;        self.z = zValue<br>&gt; <br>&gt;        super.init()<br>&gt;    }<br>&gt; <br>&gt;   convenience override init() {<br>&gt;        self.init(1, 1.0)<br>&gt;   }<br>&gt; <br>&gt;   convenience init(x: Int) {<br>&gt;        self.init(x, 1.0)<br>&gt;   }<br>&gt; <br>&gt;   convenience init(z: Double) {<br>&gt;        self.init(1, z)<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; print(MyClass().y)<br>&gt; print(MyClass(x: 10).y)<br>&gt; print(MyClass(z: 10.0).y)<br>&gt; <br>&gt; Seems like we can. Any drawbacks?<br>&gt; <br>&gt; On 16.06.2016 9:27, Jonathan Hull via swift-evolution wrote:<br>&gt;&gt; I don’t remember a proposal for that, but I would definitely support one.<br>&gt;&gt; I use this pattern all the time (usually by initializing to a default<br>&gt;&gt; value first), and it would be nice to have an explicit/safe way to handle<br>&gt;&gt; it, (and to avoid waisting cycles creating an object I never use).<br>&gt;&gt; <br>&gt;&gt; Perhaps we should spell it @init or @initHelp:<br>&gt;&gt; <br>&gt;&gt; class MyClass : MySuperClass {<br>&gt;&gt; <br>&gt;&gt;    let x:Int<br>&gt;&gt;    let y:String<br>&gt;&gt;    let z:Double<br>&gt;&gt; <br>&gt;&gt;    @init func commonSetup() {<br>&gt;&gt;        self.y = “My String”<br>&gt;&gt;        self.z = 4.2<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt;   init(x: Int) {<br>&gt;&gt;        self.x = x<br>&gt;&gt;        commonSetup() //No error because commonSetup() sets the value of<br>&gt;&gt; ‘y’ &amp; ‘z&#39;<br>&gt;&gt;        super.init()<br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Basically the @init functions would be inlined into the init.  They would<br>&gt;&gt; only be callable from inits, and could only be called a single time within<br>&gt;&gt; each init.<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; Jon<br>&gt;&gt; <br>&gt;&gt;&gt; I believe there was(was?) already a suggestion to introduce special methods<br>&gt;&gt;&gt; that could be called from initializers. IMO this is a better solution to<br>&gt;&gt;&gt; the problem as you really should not call &#39;usual&#39; instance method until the<br>&gt;&gt;&gt; instance is fully instantiated(super.init() called in your case):<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class MyClass : MySuperClass {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	let x : Int<br>&gt;&gt;&gt; 	let y : String  //let!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	initfunc calcY(somePatam: Int) -&gt; String {<br>&gt;&gt;&gt; 		return ....<br>&gt;&gt;&gt; 	}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	init(x: Int) {<br>&gt;&gt;&gt; 		self.x = x<br>&gt;&gt;&gt; 		self.y = assignY(5)<br>&gt;&gt;&gt; 		super.init()<br>&gt;&gt;&gt; 	}<br>&gt;&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Idea] Set variables to &quot;_&quot; in two-stage init; remove IUO</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 16, 2016 at 01:00:00pm</p></header><div class="content"><p>There&#39;s nothing stopping you from making init(frame:) and init?(coder:) convenience:<br></p><p>public class ColorView: NSView {<br>	<br>	public required convenience init?(coder: NSCoder) {<br>		self.init(frame: CGRect(x: 0.0, y: 0.0, width: 20.0, height: 20.0))<br>	}<br>	<br>	private convenience override init(frame frameRect: CGRect) {<br>		self.init(color: NSColor.whiteColor())<br>	}<br>	<br>	public init(color: NSColor) {<br>		super.init(frame: CGRect(x: 0.0, y: 0.0, width: 20.0, height: 20.0))<br>	}<br>	<br>}<br></p><p>The only drawback is that init?(coder:) will always need to be public since it&#39;s `required`.<br></p><p><br>&gt; On Jun 16, 2016, at 1:27 PM, Jonathan Hull via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Good question/idea.<br>&gt; <br>&gt; The use case I have with this most often is -initWithCoder and some other init like -initWithFrame.  I don’t think you can make those convenience inits.  If there is a way to make that work though, I am all for it.<br>&gt; <br>&gt; The thing I do most often, when possible, is lazily set each variable from a closure so that I don’t have to worry about it in the inits.  I find this especially useful for creating subviews/layers.  It isn’t always an option though…<br>&gt; <br>&gt; Thanks,<br>&gt; Jon<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Jun 16, 2016, at 4:19 AM, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The question is if we can solve the problem with special private init() and convenience inits ?<br>&gt;&gt; <br>&gt;&gt; class MyBase {<br>&gt;&gt;   init () {<br>&gt;&gt; <br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; class MyClass : MyBase {<br>&gt;&gt; <br>&gt;&gt;   let x:Int<br>&gt;&gt;   let y:String<br>&gt;&gt;   let z:Double<br>&gt;&gt; <br>&gt;&gt;   private init(_ xValue: Int, _ zValue: Double) {<br>&gt;&gt;       self.x = xValue<br>&gt;&gt;       self.y = &quot;\(xValue) - \(zValue)&quot;<br>&gt;&gt;       self.z = zValue<br>&gt;&gt; <br>&gt;&gt;       super.init()<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt;  convenience override init() {<br>&gt;&gt;       self.init(1, 1.0)<br>&gt;&gt;  }<br>&gt;&gt; <br>&gt;&gt;  convenience init(x: Int) {<br>&gt;&gt;       self.init(x, 1.0)<br>&gt;&gt;  }<br>&gt;&gt; <br>&gt;&gt;  convenience init(z: Double) {<br>&gt;&gt;       self.init(1, z)<br>&gt;&gt;  }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; print(MyClass().y)<br>&gt;&gt; print(MyClass(x: 10).y)<br>&gt;&gt; print(MyClass(z: 10.0).y)<br>&gt;&gt; <br>&gt;&gt; Seems like we can. Any drawbacks?<br>&gt;&gt; <br>&gt;&gt; On 16.06.2016 9:27, Jonathan Hull via swift-evolution wrote:<br>&gt;&gt;&gt; I don’t remember a proposal for that, but I would definitely support one.<br>&gt;&gt;&gt; I use this pattern all the time (usually by initializing to a default<br>&gt;&gt;&gt; value first), and it would be nice to have an explicit/safe way to handle<br>&gt;&gt;&gt; it, (and to avoid waisting cycles creating an object I never use).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Perhaps we should spell it @init or @initHelp:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class MyClass : MySuperClass {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   let x:Int<br>&gt;&gt;&gt;   let y:String<br>&gt;&gt;&gt;   let z:Double<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   @init func commonSetup() {<br>&gt;&gt;&gt;       self.y = “My String”<br>&gt;&gt;&gt;       self.z = 4.2<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  init(x: Int) {<br>&gt;&gt;&gt;       self.x = x<br>&gt;&gt;&gt;       commonSetup() //No error because commonSetup() sets the value of<br>&gt;&gt;&gt; ‘y’ &amp; ‘z&#39;<br>&gt;&gt;&gt;       super.init()<br>&gt;&gt;&gt;  }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Basically the @init functions would be inlined into the init.  They would<br>&gt;&gt;&gt; only be callable from inits, and could only be called a single time within<br>&gt;&gt;&gt; each init.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; Jon<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I believe there was(was?) already a suggestion to introduce special methods<br>&gt;&gt;&gt;&gt; that could be called from initializers. IMO this is a better solution to<br>&gt;&gt;&gt;&gt; the problem as you really should not call &#39;usual&#39; instance method until the<br>&gt;&gt;&gt;&gt; instance is fully instantiated(super.init() called in your case):<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; class MyClass : MySuperClass {<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	let x : Int<br>&gt;&gt;&gt;&gt; 	let y : String  //let!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	initfunc calcY(somePatam: Int) -&gt; String {<br>&gt;&gt;&gt;&gt; 		return ....<br>&gt;&gt;&gt;&gt; 	}<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	init(x: Int) {<br>&gt;&gt;&gt;&gt; 		self.x = x<br>&gt;&gt;&gt;&gt; 		self.y = assignY(5)<br>&gt;&gt;&gt;&gt; 		super.init()<br>&gt;&gt;&gt;&gt; 	}<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Idea] Set variables to &quot;_&quot; in two-stage init; remove IUO</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 16, 2016 at 03:00:00pm</p></header><div class="content"><p>Yes, using the same example, you can make required init to be convenience init:<br></p><p>class MyBase {<br>     required init (coder: Int) {<br></p><p>     }<br></p><p>     required init (frame: Int) {<br></p><p>     }<br>}<br></p><p>class MyClass : MyBase {<br></p><p>     let x:Int<br>     let y:String<br>     let z:Double<br></p><p>     private init(isCoder: Bool, _ xValue: Int, _ zValue: Double) {<br>         // here you can decide what constants should be set for properties<br></p><p>         self.x = xValue<br>         self.y = (isCoder ? &quot;Coder: &quot; : &quot;Frame: &quot;) + &quot;\(xValue) - \(zValue)&quot;<br>         self.z = zValue<br></p><p>         if isCoder {<br>             super.init(coder: 1)<br>         } else {<br>             super.init(frame: 2)<br>         }<br>     }<br></p><p>     convenience required init (coder: Int) {<br>         self.init(isCoder: true, 1, 1.0)<br>     }<br></p><p>     convenience required init (frame: Int) {<br>         self.init(isCoder: false, 1, 1.0)<br>     }<br></p><p>    convenience init(x: Int) {<br>         self.init(isCoder: false, x, 1.0)<br>    }<br></p><p>    convenience init(z: Double) {<br>         self.init(isCoder: false, 1, z)<br>    }<br>}<br></p><p>print(MyClass(coder: 0).y)<br>print(MyClass(frame: 0).y)<br>print(MyClass(x: 10).y)<br>print(MyClass(z: 10.0).y)<br></p><p><br>On 16.06.2016 14:37, Charlie Monroe wrote:<br>&gt; There&#39;s nothing stopping you from making init(frame:) and init?(coder:) convenience:<br>&gt;<br>&gt; public class ColorView: NSView {<br>&gt; 	<br>&gt; 	public required convenience init?(coder: NSCoder) {<br>&gt; 		self.init(frame: CGRect(x: 0.0, y: 0.0, width: 20.0, height: 20.0))<br>&gt; 	}<br>&gt; 	<br>&gt; 	private convenience override init(frame frameRect: CGRect) {<br>&gt; 		self.init(color: NSColor.whiteColor())<br>&gt; 	}<br>&gt; 	<br>&gt; 	public init(color: NSColor) {<br>&gt; 		super.init(frame: CGRect(x: 0.0, y: 0.0, width: 20.0, height: 20.0))<br>&gt; 	}<br>&gt; 	<br>&gt; }<br>&gt;<br>&gt; The only drawback is that init?(coder:) will always need to be public since it&#39;s `required`.<br>&gt;<br>&gt;<br>&gt;&gt; On Jun 16, 2016, at 1:27 PM, Jonathan Hull via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Good question/idea.<br>&gt;&gt;<br>&gt;&gt; The use case I have with this most often is -initWithCoder and some other init like -initWithFrame.  I don’t think you can make those convenience inits.  If there is a way to make that work though, I am all for it.<br>&gt;&gt;<br>&gt;&gt; The thing I do most often, when possible, is lazily set each variable from a closure so that I don’t have to worry about it in the inits.  I find this especially useful for creating subviews/layers.  It isn’t always an option though…<br>&gt;&gt;<br>&gt;&gt; Thanks,<br>&gt;&gt; Jon<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; On Jun 16, 2016, at 4:19 AM, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The question is if we can solve the problem with special private init() and convenience inits ?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; class MyBase {<br>&gt;&gt;&gt;   init () {<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; class MyClass : MyBase {<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;   let x:Int<br>&gt;&gt;&gt;   let y:String<br>&gt;&gt;&gt;   let z:Double<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;   private init(_ xValue: Int, _ zValue: Double) {<br>&gt;&gt;&gt;       self.x = xValue<br>&gt;&gt;&gt;       self.y = &quot;\(xValue) - \(zValue)&quot;<br>&gt;&gt;&gt;       self.z = zValue<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;       super.init()<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;  convenience override init() {<br>&gt;&gt;&gt;       self.init(1, 1.0)<br>&gt;&gt;&gt;  }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;  convenience init(x: Int) {<br>&gt;&gt;&gt;       self.init(x, 1.0)<br>&gt;&gt;&gt;  }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;  convenience init(z: Double) {<br>&gt;&gt;&gt;       self.init(1, z)<br>&gt;&gt;&gt;  }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; print(MyClass().y)<br>&gt;&gt;&gt; print(MyClass(x: 10).y)<br>&gt;&gt;&gt; print(MyClass(z: 10.0).y)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Seems like we can. Any drawbacks?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On 16.06.2016 9:27, Jonathan Hull via swift-evolution wrote:<br>&gt;&gt;&gt;&gt; I don’t remember a proposal for that, but I would definitely support one.<br>&gt;&gt;&gt;&gt; I use this pattern all the time (usually by initializing to a default<br>&gt;&gt;&gt;&gt; value first), and it would be nice to have an explicit/safe way to handle<br>&gt;&gt;&gt;&gt; it, (and to avoid waisting cycles creating an object I never use).<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Perhaps we should spell it @init or @initHelp:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; class MyClass : MySuperClass {<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;   let x:Int<br>&gt;&gt;&gt;&gt;   let y:String<br>&gt;&gt;&gt;&gt;   let z:Double<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;   @init func commonSetup() {<br>&gt;&gt;&gt;&gt;       self.y = “My String”<br>&gt;&gt;&gt;&gt;       self.z = 4.2<br>&gt;&gt;&gt;&gt;   }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;  init(x: Int) {<br>&gt;&gt;&gt;&gt;       self.x = x<br>&gt;&gt;&gt;&gt;       commonSetup() //No error because commonSetup() sets the value of<br>&gt;&gt;&gt;&gt; ‘y’ &amp; ‘z&#39;<br>&gt;&gt;&gt;&gt;       super.init()<br>&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Basically the @init functions would be inlined into the init.  They would<br>&gt;&gt;&gt;&gt; only be callable from inits, and could only be called a single time within<br>&gt;&gt;&gt;&gt; each init.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt; Jon<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I believe there was(was?) already a suggestion to introduce special methods<br>&gt;&gt;&gt;&gt;&gt; that could be called from initializers. IMO this is a better solution to<br>&gt;&gt;&gt;&gt;&gt; the problem as you really should not call &#39;usual&#39; instance method until the<br>&gt;&gt;&gt;&gt;&gt; instance is fully instantiated(super.init() called in your case):<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; class MyClass : MySuperClass {<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; 	let x : Int<br>&gt;&gt;&gt;&gt;&gt; 	let y : String  //let!<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; 	initfunc calcY(somePatam: Int) -&gt; String {<br>&gt;&gt;&gt;&gt;&gt; 		return ....<br>&gt;&gt;&gt;&gt;&gt; 	}<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; 	init(x: Int) {<br>&gt;&gt;&gt;&gt;&gt; 		self.x = x<br>&gt;&gt;&gt;&gt;&gt; 		self.y = assignY(5)<br>&gt;&gt;&gt;&gt;&gt; 		super.init()<br>&gt;&gt;&gt;&gt;&gt; 	}<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
