<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f526807a5a76bc96427760ca78707cfb?s=50"></div><header><strong>Specifying A Dynamic Type In Swift Generics</strong> from <string>Jon Akhtar</string> &lt;jona at herbalife.com&gt;<p>July  5, 2016 at 03:00:00pm</p></header><div class="content"><p>I have a generic class that I would like to use. I¹ll include the whole<br>source.<br></p><p>public final class EventRegistration&lt;E: AppEvent&gt; {<br>	private(set) var event: E?<br>	private var token: AnyObject?<br></p><p>	public init() {}<br></p><p>	public init(event: AppEvent, token: AnyObject) {<br>		self.event = event<br>		self.token = token<br>	}<br></p><p>	public func unregister() {<br>		if let token = self.token,<br>	   	   let event = self.event {<br>			event.unregister(token)<br>		}<br>		token = nil<br>		event = nil<br>	}<br></p><p>	public var isRegistered: Bool {<br>		return token != nil<br>	}<br></p><p>	deinit {<br>		unregister()<br>	}<br>}<br></p><p><br></p><p>I would like to use this class in my AppEvent class. Among other things<br>AppEvent has a method register()<br></p><p>public class AppEvent : CustomStringConvertible {<br></p><p><br>Š<br></p><p>	public func register(notification: (NSNotification! -&gt;<br>Void))-&gt;EventRegistration&lt;???&gt; {<br>		let eventName = self.dynamicType.eventName()<br></p><p>		let token = <br>NSNotificationCenter.defaultCenter().addObserverForName(eventName, object:<br>nil, queue: self.dynamicType.eventQueue(), usingBlock: notification)<br></p><p>		let registration = EventRegistration(event: self, token: token)<br></p><p>		return registration<br>}<br></p><p><br>I have 50-100 subclasses of AppEvent that I use directly.<br></p><p>public class SomeEvent: AppEvent {}<br>public class SomeOtherEvent: AppEvent {}<br>public class EvenSomeOtherEvent: AppEvent {}<br></p><p>They all inherit the register() function.<br></p><p>I would like the following.<br></p><p>Let some = SomeEvent().register() { note in }<br></p><p>some.event.self should be ³SomeEvent²<br></p><p>Because SomeEvent.register() returns EventRegistration&lt;SomeEvent&gt;<br></p><p>All the parts are there for this to be statically typed. If I implemented<br>register in each class I could get the behavior I want. What I am looking<br>for is a way to say ³the current dynamic type², sort of like ³Self².<br></p><p>Is there a signature for &quot;public func register(notification:<br>(NSNotification! -&gt; Void))-&gt;EventRegistration&lt;???&gt;&quot; that would accomplish<br>this, or does this break some type rule I am not aware of, or is it just a<br>missing language feature.<br></p><p>If you want points, see:<br>http://stackoverflow.com/questions/38193012/specifying-a-dynamic-type-in-sw<br>ift-generics<br></p><p>Thanks,<br></p><p>Jon<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e01e37acbfad671da1b94a61cf819d82?s=50"></div><header><strong>Specifying A Dynamic Type In Swift Generics</strong> from <string>Kenny Leung</string> &lt;kenny_leung at pobox.com&gt;<p>July  5, 2016 at 12:00:00pm</p></header><div class="content"><p>So, restating the question:<br></p><p>You want to have a method on a class such that it will return an object which is genericised with that class. Like:<br></p><p>class A {<br>    func createB() -&gt; B&lt;Self&gt; {<br>    }<br>}<br></p><p>So that if you have C which is a subclass of A, calling createB() would return B&lt;C&gt;, and not B&lt;A&gt;<br></p><p>Is that correct?<br></p><p>-Kenny<br></p><p><br>&gt; On Jul 5, 2016, at 8:40 AM, Jon Akhtar via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I have a generic class that I would like to use. I¹ll include the whole<br>&gt; source.<br>&gt; <br>&gt; public final class EventRegistration&lt;E: AppEvent&gt; {<br>&gt; 	private(set) var event: E?<br>&gt; 	private var token: AnyObject?<br>&gt; <br>&gt; 	public init() {}<br>&gt; <br>&gt; 	public init(event: AppEvent, token: AnyObject) {<br>&gt; 		self.event = event<br>&gt; 		self.token = token<br>&gt; 	}<br>&gt; <br>&gt; 	public func unregister() {<br>&gt; 		if let token = self.token,<br>&gt; 	   	   let event = self.event {<br>&gt; 			event.unregister(token)<br>&gt; 		}<br>&gt; 		token = nil<br>&gt; 		event = nil<br>&gt; 	}<br>&gt; <br>&gt; 	public var isRegistered: Bool {<br>&gt; 		return token != nil<br>&gt; 	}<br>&gt; <br>&gt; 	deinit {<br>&gt; 		unregister()<br>&gt; 	}<br>&gt; }<br>&gt; <br>&gt; <br>&gt; <br>&gt; I would like to use this class in my AppEvent class. Among other things<br>&gt; AppEvent has a method register()<br>&gt; <br>&gt; public class AppEvent : CustomStringConvertible {<br>&gt; <br>&gt; <br>&gt; Š<br>&gt; <br>&gt; 	public func register(notification: (NSNotification! -&gt;<br>&gt; Void))-&gt;EventRegistration&lt;???&gt; {<br>&gt; 		let eventName = self.dynamicType.eventName()<br>&gt; <br>&gt; 		let token = <br>&gt; NSNotificationCenter.defaultCenter().addObserverForName(eventName, object:<br>&gt; nil, queue: self.dynamicType.eventQueue(), usingBlock: notification)<br>&gt; <br>&gt; 		let registration = EventRegistration(event: self, token: token)<br>&gt; <br>&gt; 		return registration<br>&gt; }<br>&gt; <br>&gt; <br>&gt; I have 50-100 subclasses of AppEvent that I use directly.<br>&gt; <br>&gt; public class SomeEvent: AppEvent {}<br>&gt; public class SomeOtherEvent: AppEvent {}<br>&gt; public class EvenSomeOtherEvent: AppEvent {}<br>&gt; <br>&gt; They all inherit the register() function.<br>&gt; <br>&gt; I would like the following.<br>&gt; <br>&gt; Let some = SomeEvent().register() { note in }<br>&gt; <br>&gt; some.event.self should be ³SomeEvent²<br>&gt; <br>&gt; Because SomeEvent.register() returns EventRegistration&lt;SomeEvent&gt;<br>&gt; <br>&gt; All the parts are there for this to be statically typed. If I implemented<br>&gt; register in each class I could get the behavior I want. What I am looking<br>&gt; for is a way to say ³the current dynamic type², sort of like ³Self².<br>&gt; <br>&gt; Is there a signature for &quot;public func register(notification:<br>&gt; (NSNotification! -&gt; Void))-&gt;EventRegistration&lt;???&gt;&quot; that would accomplish<br>&gt; this, or does this break some type rule I am not aware of, or is it just a<br>&gt; missing language feature.<br>&gt; <br>&gt; If you want points, see:<br>&gt; http://stackoverflow.com/questions/38193012/specifying-a-dynamic-type-in-sw<br>&gt; ift-generics<br>&gt; <br>&gt; Thanks,<br>&gt; <br>&gt; Jon<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f526807a5a76bc96427760ca78707cfb?s=50"></div><header><strong>Specifying A Dynamic Type In Swift Generics</strong> from <string>Jon Akhtar</string> &lt;jona at herbalife.com&gt;<p>July  6, 2016 at 05:00:00pm</p></header><div class="content"><p>Yes, that is what I thought too. But when I try to do it, I get this error:<br></p><p>Error:(57, 23) &#39;Self&#39; is only available in a protocol or as the result of<br>a method in a class; did you mean &#39;AppEvent’?<br></p><p>Thanks,<br></p><p>Jon<br></p><p><br></p><p>On 7/5/16, 12:15, &quot;swift-users-bounces at swift.org on behalf of Kenny Leung<br>via swift-users&quot; &lt;swift-users-bounces at swift.org on behalf of<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt;So, restating the question:<br>&gt;<br>&gt;You want to have a method on a class such that it will return an object<br>&gt;which is genericised with that class. Like:<br>&gt;<br>&gt;class A {<br>&gt;    func createB() -&gt; B&lt;Self&gt; {<br>&gt;    }<br>&gt;}<br>&gt;<br>&gt;So that if you have C which is a subclass of A, calling createB() would<br>&gt;return B&lt;C&gt;, and not B&lt;A&gt;<br>&gt;<br>&gt;Is that correct?<br>&gt;<br>&gt;-Kenny<br>&gt;<br>&gt;<br>&gt;&gt; On Jul 5, 2016, at 8:40 AM, Jon Akhtar via swift-users<br>&gt;&gt;&lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I have a generic class that I would like to use. I¹ll include the whole<br>&gt;&gt; source.<br>&gt;&gt; <br>&gt;&gt; public final class EventRegistration&lt;E: AppEvent&gt; {<br>&gt;&gt; 	private(set) var event: E?<br>&gt;&gt; 	private var token: AnyObject?<br>&gt;&gt; <br>&gt;&gt; 	public init() {}<br>&gt;&gt; <br>&gt;&gt; 	public init(event: AppEvent, token: AnyObject) {<br>&gt;&gt; 		self.event = event<br>&gt;&gt; 		self.token = token<br>&gt;&gt; 	}<br>&gt;&gt; <br>&gt;&gt; 	public func unregister() {<br>&gt;&gt; 		if let token = self.token,<br>&gt;&gt; 	   	   let event = self.event {<br>&gt;&gt; 			event.unregister(token)<br>&gt;&gt; 		}<br>&gt;&gt; 		token = nil<br>&gt;&gt; 		event = nil<br>&gt;&gt; 	}<br>&gt;&gt; <br>&gt;&gt; 	public var isRegistered: Bool {<br>&gt;&gt; 		return token != nil<br>&gt;&gt; 	}<br>&gt;&gt; <br>&gt;&gt; 	deinit {<br>&gt;&gt; 		unregister()<br>&gt;&gt; 	}<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I would like to use this class in my AppEvent class. Among other things<br>&gt;&gt; AppEvent has a method register()<br>&gt;&gt; <br>&gt;&gt; public class AppEvent : CustomStringConvertible {<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Š<br>&gt;&gt; <br>&gt;&gt; 	public func register(notification: (NSNotification! -&gt;<br>&gt;&gt; Void))-&gt;EventRegistration&lt;???&gt; {<br>&gt;&gt; 		let eventName = self.dynamicType.eventName()<br>&gt;&gt; <br>&gt;&gt; 		let token = <br>&gt;&gt; NSNotificationCenter.defaultCenter().addObserverForName(eventName,<br>&gt;&gt;object:<br>&gt;&gt; nil, queue: self.dynamicType.eventQueue(), usingBlock: notification)<br>&gt;&gt; <br>&gt;&gt; 		let registration = EventRegistration(event: self, token: token)<br>&gt;&gt; <br>&gt;&gt; 		return registration<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I have 50-100 subclasses of AppEvent that I use directly.<br>&gt;&gt; <br>&gt;&gt; public class SomeEvent: AppEvent {}<br>&gt;&gt; public class SomeOtherEvent: AppEvent {}<br>&gt;&gt; public class EvenSomeOtherEvent: AppEvent {}<br>&gt;&gt; <br>&gt;&gt; They all inherit the register() function.<br>&gt;&gt; <br>&gt;&gt; I would like the following.<br>&gt;&gt; <br>&gt;&gt; Let some = SomeEvent().register() { note in }<br>&gt;&gt; <br>&gt;&gt; some.event.self should be ³SomeEvent²<br>&gt;&gt; <br>&gt;&gt; Because SomeEvent.register() returns EventRegistration&lt;SomeEvent&gt;<br>&gt;&gt; <br>&gt;&gt; All the parts are there for this to be statically typed. If I<br>&gt;&gt;implemented<br>&gt;&gt; register in each class I could get the behavior I want. What I am<br>&gt;&gt;looking<br>&gt;&gt; for is a way to say ³the current dynamic type², sort of like ³Self².<br>&gt;&gt; <br>&gt;&gt; Is there a signature for &quot;public func register(notification:<br>&gt;&gt; (NSNotification! -&gt; Void))-&gt;EventRegistration&lt;???&gt;&quot; that would<br>&gt;&gt;accomplish<br>&gt;&gt; this, or does this break some type rule I am not aware of, or is it<br>&gt;&gt;just a<br>&gt;&gt; missing language feature.<br>&gt;&gt; <br>&gt;&gt; If you want points, see:<br>&gt;&gt; <br>&gt;&gt;http://stackoverflow.com/questions/38193012/specifying-a-dynamic-type-in-<br>&gt;&gt;sw<br>&gt;&gt; ift-generics<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; <br>&gt;&gt; Jon<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;_______________________________________________<br>&gt;swift-users mailing list<br>&gt;swift-users at swift.org<br>&gt;https://lists.swift.org/mailman/listinfo/swift-users<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
