<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>Fw: Re: [Proposal Draft] Literal Syntax Protocols</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>June 24, 2016 at 05:00:00pm</p></header><div class="content"><p>I’m aware of that fact, but all types with underscore even in the stdlib telling me to keep my hands of them, because something might happen to them.<br></p><p>As an example we have _Strideable protocol which is visible by its name, but its declaration isn’t visible at all:<br></p><p>// FIXME(ABI)(compiler limitation): Remove `_Strideable`.<br>// WORKAROUND rdar://25214598 - should be:<br>// protocol Strideable : Comparable {...}<br></p><p>% for Self in [&#39;_Strideable&#39;, &#39;Strideable&#39;]:<br>From Stride.swift.gyb<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 24. Juni 2016 um 17:09:53, Matthew Johnson (matthew at anandabits.com) schrieb:<br></p><p>The underscore is used in the same way it is used elsewhere in the standard library.  The protocols must be public because they need to be visible to user code in order for the design to work correctly.  However, they are considered implementation details that users really shouldn’t know about.  This pattern is well established in the standard library.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/849e1f6c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Fw: Re: [Proposal Draft] Literal Syntax Protocols</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>June 24, 2016 at 10:00:00am</p></header><div class="content"><p>The design in this proposal comes from the standard library team.  The intent is for the use of underscore here to be consistent with other uses of underscore prefix in the standard library.  I’m not sure why you think this is different than the rest...<br></p><p><br>&gt; On Jun 24, 2016, at 10:22 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I’m aware of that fact, but all types with underscore even in the stdlib telling me to keep my hands of them, because something might happen to them.<br>&gt; <br>&gt; As an example we have _Strideable protocol which is visible by its name, but its declaration isn’t visible at all:<br>&gt; // FIXME(ABI)(compiler limitation): Remove `_Strideable`.<br>&gt; // WORKAROUND rdar://25214598 &lt;rdar://25214598&gt; - should be:<br>&gt; // protocol Strideable : Comparable {...}<br>&gt; <br>&gt; % for Self in [&#39;_Strideable&#39;, &#39;Strideable&#39;]:<br>&gt; From Stride.swift.gyb &lt;https://github.com/apple/swift/blob/63c36dff0a327874a5041d46335bde314bc108d8/stdlib/public/core/Stride.swift.gyb&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; Am 24. Juni 2016 um 17:09:53, Matthew Johnson (matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;) schrieb:<br>&gt; <br>&gt;&gt; The underscore is used in the same way it is used elsewhere in the standard library.  The protocols must be public because they need to be visible to user code in order for the design to work correctly.  However, they are considered implementation details that users really shouldn’t know about.  This pattern is well established in the standard library.<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/1da02435/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>Fw: Re: [Proposal Draft] Literal Syntax Protocols</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>June 24, 2016 at 05:00:00pm</p></header><div class="content"><p>Really? I must have overlooked that some pitched that design.<br></p><p>Okay now that I think through this whole scenario, I like the underscore iff there is a good name that will be present in the final version.<br></p><p>When Swift 3 drops, I’ll write a proposal for nested protocols which will refine your design (the original author went missing after pitching this idea, and Joe Groff told me that this probably out of scope for Swift 3)!<br></p><p>Your current design might become this in Swift 3.X and all protocols marked with an underscore will disappear:<br></p><p>public /* closed */ enum Syntax {<br>  public protocol NilLiteral { ... }<br>  public protocol BooleanLiteral { ... }<br>  public protocol IntegerLiteral { ... }<br>  public protocol FloatLiteral { ... }<br>  public protocol UnicodeScalarLiteral { ... }<br>  public protocol ExtendedGraphemeClusterLiteral { ... }<br>  public protocol StringLiteralLiteral { ... }<br>  public protocol StringInterplolationLiteral { ... }<br>  public protocol ArrayrLiteral { ... }<br>  public protocol DictionaryLiteral { ... }<br>}<br></p><p><br>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 24. Juni 2016 um 17:25:45, Matthew Johnson (matthew at anandabits.com) schrieb:<br></p><p>The design in this proposal comes from the standard library team.  The intent is for the use of underscore here to be consistent with other uses of underscore prefix in the standard library.  I’m not sure why you think this is different than the rest...<br></p><p><br>On Jun 24, 2016, at 10:22 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>I’m aware of that fact, but all types with underscore even in the stdlib telling me to keep my hands of them, because something might happen to them.<br></p><p>As an example we have _Strideable protocol which is visible by its name, but its declaration isn’t visible at all:<br>// FIXME(ABI)(compiler limitation): Remove `_Strideable`.<br>// WORKAROUND rdar://25214598 - should be:<br>// protocol Strideable : Comparable {...}<br></p><p>% for Self in [&#39;_Strideable&#39;, &#39;Strideable&#39;]:<br>From Stride.swift.gyb<br></p><p><br></p><p><br>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 24. Juni 2016 um 17:09:53, Matthew Johnson (matthew at anandabits.com) schrieb:<br></p><p>The underscore is used in the same way it is used elsewhere in the standard library.  The protocols must be public because they need to be visible to user code in order for the design to work correctly.  However, they are considered implementation details that users really shouldn’t know about.  This pattern is well established in the standard library.<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/01f7c063/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>Fw: Re: [Proposal Draft] Literal Syntax Protocols</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>June 24, 2016 at 05:00:00pm</p></header><div class="content"><p>That said, how about this design:<br></p><p>public protocol _LiteralNilProtocol { … }<br>…<br></p><p>public enum Literal {<br>     <br>    public typealias NilProtocol = …<br>    …<br>}<br>extension Array: Literal.ArrayProtocol  <br></p><p><br>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 24. Juni 2016 um 17:37:27, Adrian Zubarev (adrian.zubarev at devandartist.com) schrieb:<br></p><p>Really? I must have overlooked that some pitched that design.<br></p><p>Okay now that I think through this whole scenario, I like the underscore iff there is a good name that will be present in the final version.<br></p><p>When Swift 3 drops, I’ll write a proposal for nested protocols which will refine your design (the original author went missing after pitching this idea, and Joe Groff told me that this probably out of scope for Swift 3)!<br></p><p>Your current design might become this in Swift 3.X and all protocols marked with an underscore will disappear:<br></p><p>public /* closed */ enum Syntax {<br>  public protocol NilLiteral { ... }<br>  public protocol BooleanLiteral { ... }<br>  public protocol IntegerLiteral { ... }<br>  public protocol FloatLiteral { ... }<br>  public protocol UnicodeScalarLiteral { ... }<br>  public protocol ExtendedGraphemeClusterLiteral { ... }<br>  public protocol StringLiteralLiteral { ... }<br>  public protocol StringInterplolationLiteral { ... }<br>  public protocol ArrayrLiteral { ... }<br>  public protocol DictionaryLiteral { ... }<br>}<br></p><p><br>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 24. Juni 2016 um 17:25:45, Matthew Johnson (matthew at anandabits.com) schrieb:<br></p><p>The design in this proposal comes from the standard library team.  The intent is for the use of underscore here to be consistent with other uses of underscore prefix in the standard library.  I’m not sure why you think this is different than the rest...<br></p><p><br>On Jun 24, 2016, at 10:22 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>I’m aware of that fact, but all types with underscore even in the stdlib telling me to keep my hands of them, because something might happen to them.<br></p><p>As an example we have _Strideable protocol which is visible by its name, but its declaration isn’t visible at all:<br>// FIXME(ABI)(compiler limitation): Remove `_Strideable`.<br>// WORKAROUND rdar://25214598 - should be:<br>// protocol Strideable : Comparable {...}<br></p><p>% for Self in [&#39;_Strideable&#39;, &#39;Strideable&#39;]:<br>From Stride.swift.gyb<br></p><p><br></p><p><br>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 24. Juni 2016 um 17:09:53, Matthew Johnson (matthew at anandabits.com) schrieb:<br></p><p>The underscore is used in the same way it is used elsewhere in the standard library.  The protocols must be public because they need to be visible to user code in order for the design to work correctly.  However, they are considered implementation details that users really shouldn’t know about.  This pattern is well established in the standard library.<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/c7b146c3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Fw: Re: [Proposal Draft] Literal Syntax Protocols</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>June 24, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jun 24, 2016, at 10:41 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; That said, how about this design:<br>&gt; <br>&gt; public protocol _LiteralNilProtocol { … }<br>&gt; …<br>&gt; <br>&gt; public enum Literal {<br>&gt;      <br>&gt;     public typealias NilProtocol = …<br>&gt;     …<br>&gt; }<br>I’m pretty sure the standard library team intends to reserve the right to use this namespace for other protocols that only exist for syntactic support.  This may not always be literals - there may be other kinds of syntax supporting protocols in the future.  With that in mind I don’t think this design will work.<br>&gt; extension Array: Literal.ArrayProtocol  <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; Am 24. Juni 2016 um 17:37:27, Adrian Zubarev (adrian.zubarev at devandartist.com &lt;mailto:adrian.zubarev at devandartist.com&gt;) schrieb:<br>&gt; <br>&gt;&gt; Really? I must have overlooked that some pitched that design.<br>&gt;&gt; <br>&gt;&gt; Okay now that I think through this whole scenario, I like the underscore iff there is a good name that will be present in the final version.<br>&gt;&gt; <br>&gt;&gt; When Swift 3 drops, I’ll write a proposal for nested protocols which will refine your design (the original author went missing after pitching this idea, and Joe Groff told me that this probably out of scope for Swift 3)!<br>&gt;&gt; <br>&gt;&gt; Your current design might become this in Swift 3.X and all protocols marked with an underscore will disappear:<br>&gt;&gt; <br>&gt;&gt; public /* closed */ enum Syntax {<br>&gt;&gt;   public protocol NilLiteral { ... }<br>&gt;&gt;   public protocol BooleanLiteral { ... }<br>&gt;&gt;   public protocol IntegerLiteral { ... }<br>&gt;&gt;   public protocol FloatLiteral { ... }<br>&gt;&gt;   public protocol UnicodeScalarLiteral { ... }<br>&gt;&gt;   public protocol ExtendedGraphemeClusterLiteral { ... }<br>&gt;&gt;   public protocol StringLiteralLiteral { ... }<br>&gt;&gt;   public protocol StringInterplolationLiteral { ... }<br>&gt;&gt;   public protocol ArrayrLiteral { ... }<br>&gt;&gt;   public protocol DictionaryLiteral { ... }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Adrian Zubarev<br>&gt;&gt; Sent with Airmail<br>&gt;&gt; <br>&gt;&gt; Am 24. Juni 2016 um 17:25:45, Matthew Johnson (matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;) schrieb:<br>&gt;&gt; <br>&gt;&gt;&gt; The design in this proposal comes from the standard library team.  The intent is for the use of underscore here to be consistent with other uses of underscore prefix in the standard library.  I’m not sure why you think this is different than the rest...<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 24, 2016, at 10:22 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’m aware of that fact, but all types with underscore even in the stdlib telling me to keep my hands of them, because something might happen to them.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; As an example we have _Strideable protocol which is visible by its name, but its declaration isn’t visible at all:<br>&gt;&gt;&gt;&gt; // FIXME(ABI)(compiler limitation): Remove `_Strideable`.<br>&gt;&gt;&gt;&gt; // WORKAROUND rdar://25214598 &lt;rdar://25214598&gt; - should be:<br>&gt;&gt;&gt;&gt; // protocol Strideable : Comparable {...}<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; % for Self in [&#39;_Strideable&#39;, &#39;Strideable&#39;]:<br>&gt;&gt;&gt;&gt; From Stride.swift.gyb &lt;https://github.com/apple/swift/blob/63c36dff0a327874a5041d46335bde314bc108d8/stdlib/public/core/Stride.swift.gyb&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Adrian Zubarev<br>&gt;&gt;&gt;&gt; Sent with Airmail<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Am 24. Juni 2016 um 17:09:53, Matthew Johnson (matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;) schrieb:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The underscore is used in the same way it is used elsewhere in the standard library.  The protocols must be public because they need to be visible to user code in order for the design to work correctly.  However, they are considered implementation details that users really shouldn’t know about.  This pattern is well established in the standard library.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/ab16f549/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Fw: Re: [Proposal Draft] Literal Syntax Protocols</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 24, 2016 at 03:00:00pm</p></header><div class="content"><p>On Fri, Jun 24, 2016 at 2:50 PM, Matthew Johnson via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Jun 24, 2016, at 10:41 AM, Adrian Zubarev via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; That said, how about this design:<br>&gt;<br>&gt; public protocol _LiteralNilProtocol { … }<br>&gt; …<br>&gt;<br>&gt; public enum Literal {<br>&gt;<br>&gt;     public typealias NilProtocol = …<br>&gt;     …<br>&gt; }<br>&gt;<br>&gt; I’m pretty sure the standard library team intends to reserve the right to<br>&gt; use this namespace for other protocols that only exist for syntactic<br>&gt; support.  This may not always be literals - there may be other kinds of<br>&gt; syntax supporting protocols in the future.  With that in mind I don’t think<br>&gt; this design will work.<br>&gt;<br></p><p>That said, `IntegerLiteralProtocol` or `Syntax.IntegerLiteralProtocol` both<br>read very nicely, IMO, so that aspect of the idea is worth considering.<br></p><p><br>&gt;<br>&gt; extension Array: Literal.ArrayProtocol<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt;<br>&gt; Am 24. Juni 2016 um 17:37:27, Adrian Zubarev (<br>&gt; adrian.zubarev at devandartist.com) schrieb:<br>&gt;<br>&gt; Really? I must have overlooked that some pitched that design.<br>&gt;<br>&gt; Okay now that I think through this whole scenario, I like the underscore<br>&gt; iff there is a good name that will be present in the final version.<br>&gt;<br>&gt; When Swift 3 drops, I’ll write a proposal for nested protocols which will<br>&gt; refine your design (the original author went missing after pitching this<br>&gt; idea, and Joe Groff told me that this probably out of scope for Swift 3)!<br>&gt;<br>&gt; Your current design might become this in Swift 3.X and all protocols<br>&gt; marked with an underscore will disappear:<br>&gt;<br>&gt; public /* closed */ enum Syntax {<br>&gt;   public protocol NilLiteral { ... }<br>&gt;   public protocol BooleanLiteral { ... }<br>&gt;   public protocol IntegerLiteral { ... }<br>&gt;   public protocol FloatLiteral { ... }<br>&gt;   public protocol UnicodeScalarLiteral { ... }<br>&gt;   public protocol ExtendedGraphemeClusterLiteral { ... }<br>&gt;   public protocol StringLiteralLiteral { ... }<br>&gt;   public protocol StringInterplolationLiteral { ... }<br>&gt;   public protocol ArrayrLiteral { ... }<br>&gt;   public protocol DictionaryLiteral { ... }<br>&gt; }<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt;<br>&gt; Am 24. Juni 2016 um 17:25:45, Matthew Johnson (matthew at anandabits.com)<br>&gt; schrieb:<br>&gt;<br>&gt; The design in this proposal comes from the standard library team.  The<br>&gt; intent is for the use of underscore here to be consistent with other uses<br>&gt; of underscore prefix in the standard library.  I’m not sure why you think<br>&gt; this is different than the rest...<br>&gt;<br>&gt;<br>&gt; On Jun 24, 2016, at 10:22 AM, Adrian Zubarev via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I’m aware of that fact, but all types with underscore even in the stdlib<br>&gt; telling me to keep my hands of them, because something might happen to them.<br>&gt; As an example we have _Strideable protocol which is visible by its name,<br>&gt; but its declaration isn’t visible at all:<br>&gt;<br>&gt; // FIXME(ABI)(compiler limitation): Remove `_Strideable`.<br>&gt; // WORKAROUND rdar://25214598 - should be:<br>&gt; // protocol Strideable : Comparable {...}<br>&gt;<br>&gt; % for Self in [&#39;_Strideable&#39;, &#39;Strideable&#39;]:<br>&gt;<br>&gt; From Stride.swift.gyb<br>&gt; &lt;https://github.com/apple/swift/blob/63c36dff0a327874a5041d46335bde314bc108d8/stdlib/public/core/Stride.swift.gyb&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt;<br>&gt; Am 24. Juni 2016 um 17:09:53, Matthew Johnson (matthew at anandabits.com)<br>&gt; schrieb:<br>&gt;<br>&gt; The underscore is used in the same way it is used elsewhere in the<br>&gt; standard library.  The protocols must be public because they need to be<br>&gt; visible to user code in order for the design to work correctly.  However,<br>&gt; they are considered implementation details that users really shouldn’t know<br>&gt; about.  This pattern is well established in the standard library.<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/d28802f0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Fw: Re: [Proposal Draft] Literal Syntax Protocols</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>June 24, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jun 24, 2016, at 3:06 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Fri, Jun 24, 2016 at 2:50 PM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Jun 24, 2016, at 10:41 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; That said, how about this design:<br>&gt;&gt; <br>&gt;&gt; public protocol _LiteralNilProtocol { … }<br>&gt;&gt; …<br>&gt;&gt; <br>&gt;&gt; public enum Literal {<br>&gt;&gt;      <br>&gt;&gt;     public typealias NilProtocol = …<br>&gt;&gt;     …<br>&gt;&gt; }<br>&gt; I’m pretty sure the standard library team intends to reserve the right to use this namespace for other protocols that only exist for syntactic support.  This may not always be literals - there may be other kinds of syntax supporting protocols in the future.  With that in mind I don’t think this design will work.<br>&gt; <br>&gt; That said, `IntegerLiteralProtocol` or `Syntax.IntegerLiteralProtocol` both read very nicely, IMO, so that aspect of the idea is worth considering.<br></p><p>Yes, I have incorporated these into the alternatives section of the proposal.  I appreciate your suggestions!<br></p><p>I’ll be submitting a PR later today or tomorrow if no significant new feedback arises. <br></p><p>&gt;  <br>&gt; <br>&gt;&gt; extension Array: Literal.ArrayProtocol  <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Adrian Zubarev<br>&gt;&gt; Sent with Airmail<br>&gt;&gt; <br>&gt;&gt; Am 24. Juni 2016 um 17:37:27, Adrian Zubarev (adrian.zubarev at devandartist.com &lt;mailto:adrian.zubarev at devandartist.com&gt;) schrieb:<br>&gt;&gt; <br>&gt;&gt;&gt; Really? I must have overlooked that some pitched that design.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Okay now that I think through this whole scenario, I like the underscore iff there is a good name that will be present in the final version.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; When Swift 3 drops, I’ll write a proposal for nested protocols which will refine your design (the original author went missing after pitching this idea, and Joe Groff told me that this probably out of scope for Swift 3)!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Your current design might become this in Swift 3.X and all protocols marked with an underscore will disappear:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; public /* closed */ enum Syntax {<br>&gt;&gt;&gt;   public protocol NilLiteral { ... }<br>&gt;&gt;&gt;   public protocol BooleanLiteral { ... }<br>&gt;&gt;&gt;   public protocol IntegerLiteral { ... }<br>&gt;&gt;&gt;   public protocol FloatLiteral { ... }<br>&gt;&gt;&gt;   public protocol UnicodeScalarLiteral { ... }<br>&gt;&gt;&gt;   public protocol ExtendedGraphemeClusterLiteral { ... }<br>&gt;&gt;&gt;   public protocol StringLiteralLiteral { ... }<br>&gt;&gt;&gt;   public protocol StringInterplolationLiteral { ... }<br>&gt;&gt;&gt;   public protocol ArrayrLiteral { ... }<br>&gt;&gt;&gt;   public protocol DictionaryLiteral { ... }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Adrian Zubarev<br>&gt;&gt;&gt; Sent with Airmail<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Am 24. Juni 2016 um 17:25:45, Matthew Johnson (matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;) schrieb:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The design in this proposal comes from the standard library team.  The intent is for the use of underscore here to be consistent with other uses of underscore prefix in the standard library.  I’m not sure why you think this is different than the rest...<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 24, 2016, at 10:22 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I’m aware of that fact, but all types with underscore even in the stdlib telling me to keep my hands of them, because something might happen to them.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; As an example we have _Strideable protocol which is visible by its name, but its declaration isn’t visible at all:<br>&gt;&gt;&gt;&gt;&gt; // FIXME(ABI)(compiler limitation): Remove `_Strideable`.<br>&gt;&gt;&gt;&gt;&gt; // WORKAROUND rdar://25214598 &lt;&gt; - should be:<br>&gt;&gt;&gt;&gt;&gt; // protocol Strideable : Comparable {...}<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; % for Self in [&#39;_Strideable&#39;, &#39;Strideable&#39;]:<br>&gt;&gt;&gt;&gt;&gt; From Stride.swift.gyb &lt;https://github.com/apple/swift/blob/63c36dff0a327874a5041d46335bde314bc108d8/stdlib/public/core/Stride.swift.gyb&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt; Adrian Zubarev<br>&gt;&gt;&gt;&gt;&gt; Sent with Airmail<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Am 24. Juni 2016 um 17:09:53, Matthew Johnson (matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;) schrieb:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The underscore is used in the same way it is used elsewhere in the standard library.  The protocols must be public because they need to be visible to user code in order for the design to work correctly.  However, they are considered implementation details that users really shouldn’t know about.  This pattern is well established in the standard library.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/ef4c1d1a/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Fw: Re: [Proposal Draft] Literal Syntax Protocols</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>June 24, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jun 24, 2016, at 10:37 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Really? I must have overlooked that some pitched that design. <br>&gt; <br>It wasn’t pitched in its own thread.  It came up in discussions about the previous proposal a couple different times.<br>&gt; Okay now that I think through this whole scenario, I like the underscore iff there is a good name that will be present in the final version.<br>&gt; <br>&gt; When Swift 3 drops, I’ll write a proposal for nested protocols which will refine your design (the original author went missing after pitching this idea, and Joe Groff told me that this probably out of scope for Swift 3)!<br>&gt; <br>Yes, the plan is to take advantage of any relevant features Swift gets in the future.  This would allow removal of the underscore protocols.  If Swift gets submodules or real namespaces I’m sure `Syntax` would become one of those as well.  The good news is that all of this is considered implementation details that don’t affect user code so I don’t believe making these changes would require a proposal.<br>&gt; Your current design might become this in Swift 3.X and all protocols marked with an underscore will disappear:<br>&gt; <br>&gt; public /* closed */ enum Syntax {<br>&gt;   public protocol NilLiteral { ... }<br>&gt;   public protocol BooleanLiteral { ... }<br>&gt;   public protocol IntegerLiteral { ... }<br>&gt;   public protocol FloatLiteral { ... }<br>&gt;   public protocol UnicodeScalarLiteral { ... }<br>&gt;   public protocol ExtendedGraphemeClusterLiteral { ... }<br>&gt;   public protocol StringLiteralLiteral { ... }<br>&gt;   public protocol StringInterplolationLiteral { ... }<br>&gt;   public protocol ArrayrLiteral { ... }<br>&gt;   public protocol DictionaryLiteral { ... }<br>&gt; }<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; Am 24. Juni 2016 um 17:25:45, Matthew Johnson (matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;) schrieb:<br>&gt; <br>&gt;&gt; The design in this proposal comes from the standard library team.  The intent is for the use of underscore here to be consistent with other uses of underscore prefix in the standard library.  I’m not sure why you think this is different than the rest...<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 24, 2016, at 10:22 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m aware of that fact, but all types with underscore even in the stdlib telling me to keep my hands of them, because something might happen to them.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As an example we have _Strideable protocol which is visible by its name, but its declaration isn’t visible at all:<br>&gt;&gt;&gt; // FIXME(ABI)(compiler limitation): Remove `_Strideable`.<br>&gt;&gt;&gt; // WORKAROUND rdar://25214598 &lt;rdar://25214598&gt; - should be:<br>&gt;&gt;&gt; // protocol Strideable : Comparable {...}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; % for Self in [&#39;_Strideable&#39;, &#39;Strideable&#39;]:<br>&gt;&gt;&gt; From Stride.swift.gyb &lt;https://github.com/apple/swift/blob/63c36dff0a327874a5041d46335bde314bc108d8/stdlib/public/core/Stride.swift.gyb&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Adrian Zubarev<br>&gt;&gt;&gt; Sent with Airmail<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Am 24. Juni 2016 um 17:09:53, Matthew Johnson (matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;) schrieb:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The underscore is used in the same way it is used elsewhere in the standard library.  The protocols must be public because they need to be visible to user code in order for the design to work correctly.  However, they are considered implementation details that users really shouldn’t know about.  This pattern is well established in the standard library.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/e365ef02/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>Fw: Re: [Proposal Draft] Literal Syntax Protocols</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 24, 2016 at 05:00:00pm</p></header><div class="content"><p>I find these &#39;stay-off-my-property&#39; _ rather sub-par in a modern language (everything was different for c 40years ago). I find it rather sad to think that we r about to commit to using that pattern for another 30 years. If the demark between stdlib and compiler was cleaned up, it would even open the door to a clean way to make some embedded stdlib versions in the future<br>Regards<br>LM<br>(From mobile)<br></p><p>&gt; On Jun 24, 2016, at 5:22 PM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I’m aware of that fact, but all types with underscore even in the stdlib telling me to keep my hands of them, because something might happen to them.<br>&gt; <br>&gt; As an example we have _Strideable protocol which is visible by its name, but its declaration isn’t visible at all:<br>&gt; <br>&gt; // FIXME(ABI)(compiler limitation): Remove `_Strideable`.<br>&gt; // WORKAROUND rdar://25214598 - should be:<br>&gt; // protocol Strideable : Comparable {...}<br>&gt; <br>&gt; % for Self in [&#39;_Strideable&#39;, &#39;Strideable&#39;]:<br>&gt; From Stride.swift.gyb<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; Am 24. Juni 2016 um 17:09:53, Matthew Johnson (matthew at anandabits.com) schrieb:<br>&gt; <br>&gt;&gt; The underscore is used in the same way it is used elsewhere in the standard library.  The protocols must be public because they need to be visible to user code in order for the design to work correctly.  However, they are considered implementation details that users really shouldn’t know about.  This pattern is well established in the standard library.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/c4411a44/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
