<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/037c9f82468d60e3e18259ee124e2664?s=50"></div><header><strong>[Pitch] Instance var/let property as type member could be unbound function</strong> from <string>Tikitu de Jager</string> &lt;tikitu at logophile.org&gt;<p>March  4, 2016 at 10:00:00am</p></header><div class="content"><p>That is, given<br></p><p>     extension Int : CustomStringConvertible {<br>       var description: Swift.String {<br>         get {}<br>       }<br>     }<br></p><p>my proposal is to expose<br></p><p>     Int.description<br></p><p>as a function with type<br></p><p>     (Int) -&gt; String<br></p><p>This would make var/let properties behave more similarly to func <br>properties, where given<br></p><p>extension Int : PartOfRandomAccessIndexType {<br>   func successor() -&gt; Swift.Int<br>}<br></p><p>we have<br></p><p>     Int.successor<br></p><p>exposed with type<br></p><p>     (Int) -&gt; () -&gt; Int<br></p><p>Making var/let properties behave &quot;the same&quot; looks more consistent to me, <br>but that&#39;s as a naive Swift user with no real compiler/language-design <br>experience. For the same reason I can&#39;t see whether this would impact <br>the ABI, whether it&#39;s remotely feasible, and even whether what looks <br>like &quot;the same&quot; behaviour to me is *really* semantically equivalent. So <br>if there is some interest in this idea I&#39;d be happy to work up a formal <br>proposal, but I thought I would test the waters first.<br></p><p>Cheers,<br>Tikitu<br></p><p>-- <br>http://www.logophile.org/<br>@tTikitu<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/08e0e501c1b7f3d2ee6d0ed52f560702?s=50"></div><header><strong>[Pitch] Instance var/let property as type member could be unbound function</strong> from <string>Richard Ross</string> &lt;richardross at fb.com&gt;<p>March  7, 2016 at 09:00:00pm</p></header><div class="content"><p>+1. This would be very nice to have when dealing with computed properties.<br>--<br>Richard<br></p><p>&gt; On Mar 4, 2016, at 1:24 AM, Tikitu de Jager via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; That is, given<br>&gt; <br>&gt;    extension Int : CustomStringConvertible {<br>&gt;      var description: Swift.String {<br>&gt;        get {}<br>&gt;      }<br>&gt;    }<br>&gt; <br>&gt; my proposal is to expose<br>&gt; <br>&gt;    Int.description<br>&gt; <br>&gt; as a function with type<br>&gt; <br>&gt;    (Int) -&gt; String<br>&gt; <br>&gt; This would make var/let properties behave more similarly to func properties, where given<br>&gt; <br>&gt; extension Int : PartOfRandomAccessIndexType {<br>&gt;  func successor() -&gt; Swift.Int<br>&gt; }<br>&gt; <br>&gt; we have<br>&gt; <br>&gt;    Int.successor<br>&gt; <br>&gt; exposed with type<br>&gt; <br>&gt;    (Int) -&gt; () -&gt; Int<br>&gt; <br>&gt; Making var/let properties behave &quot;the same&quot; looks more consistent to me, but that&#39;s as a naive Swift user with no real compiler/language-design experience. For the same reason I can&#39;t see whether this would impact the ABI, whether it&#39;s remotely feasible, and even whether what looks like &quot;the same&quot; behaviour to me is *really* semantically equivalent. So if there is some interest in this idea I&#39;d be happy to work up a formal proposal, but I thought I would test the waters first.<br>&gt; <br>&gt; Cheers,<br>&gt; Tikitu<br>&gt; <br>&gt; -- <br>&gt; https://urldefense.proofpoint.com/v2/url?u=http-3A__www.logophile.org_&amp;d=CwIGaQ&amp;c=5VD0RTtNlTh3ycd41b3MUw&amp;r=Ezje1IF3xGXfUMfsj4fBc7oM7BcJys1dhQ6psfXzLMU&amp;m=fhXGdPVgIvFmabL5VwojkDaC2y5kpJuJHE_JZpMectU&amp;s=Ur-6l8yLJEQa0VziT4tk_Lj7-1MKmFodTJRiJb9UjTA&amp;e= @tTikitu<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://urldefense.proofpoint.com/v2/url?u=https-3A__lists.swift.org_mailman_listinfo_swift-2Devolution&amp;d=CwIGaQ&amp;c=5VD0RTtNlTh3ycd41b3MUw&amp;r=Ezje1IF3xGXfUMfsj4fBc7oM7BcJys1dhQ6psfXzLMU&amp;m=fhXGdPVgIvFmabL5VwojkDaC2y5kpJuJHE_JZpMectU&amp;s=TScYfkqqnKKQN9qKCwAjV3FO2TuNl69Yk61Ad6L8EMY&amp;e=<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
