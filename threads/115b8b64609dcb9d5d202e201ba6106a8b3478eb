<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3db3c0e8e3734ef93774f05199cbe713?s=50"></div><header><strong>=?windows-1256?q?Proposal_for_Replacing_Keyword?= =?windows-1256?q?_=22subscript=22_with_=22subs=22=FE?=</strong> from <string>Feijian Sun</string> &lt;feijian_sun at hotmail.com&gt;<p>December 10, 2015 at 09:00:00pm</p></header><div class="content"><p>Hello, I have a proposal to replace the long keyword &quot;subscript&quot; with the shorter version, &quot;subs&quot;. The idea is to keep the concise naming style on the language keywords, like &quot;init&quot; and &quot;func&quot;.So, Instead of:subscript(index: Int) -&gt; Int {        ... ...}we could simply do:subs(index: Int) -&gt; Int{        ... ...}Does this mean a big change on the parser side? what do you think?Thank you!<br></p><p><br></p><p><br> 		 	   		  <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/115b78eb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ec21faaf010581d3b9d6ef507644e622?s=50"></div><header><strong>Proposal for Replacing Keyword &quot;subscript&quot; with &quot;subs&quot;‏</strong> from <string>Jack Lawrence</string> &lt;jackl at apple.com&gt;<p>December 10, 2015 at 06:00:00pm</p></header><div class="content"><p>It’s non-obvious to me that “subs” is short for subscript, whereas “init” and “func” have only one obvious expansion.<br></p><p>Jack <br>&gt; On Dec 10, 2015, at 6:12 PM, Feijian Sun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello, <br>&gt; <br>&gt; I have a proposal to replace the long keyword &quot;subscript&quot; with the shorter version, &quot;subs&quot;. The idea is to keep the concise naming style on the language keywords, like &quot;init&quot; and &quot;func&quot;.<br>&gt; <br>&gt; So, Instead of:<br>&gt; <br>&gt; subscript(index: Int) -&gt; Int {<br>&gt;         ... ...<br>&gt; }<br>&gt; <br>&gt; we could simply do:<br>&gt; <br>&gt; subs(index: Int) -&gt; Int{<br>&gt;         ... ...<br>&gt; }<br>&gt; <br>&gt; Does this mean a big change on the parser side? what do you think?<br>&gt; <br>&gt; Thank you!<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/dac15807/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3db3c0e8e3734ef93774f05199cbe713?s=50"></div><header><strong>=?windows-1256?q?Proposal_for_Replacing_Keyword?= =?windows-1256?q?_=22subscript=22_with_=22subs=22=FE?=</strong> from <string>Feijian Sun</string> &lt;feijian_sun at hotmail.com&gt;<p>December 10, 2015 at 09:00:00pm</p></header><div class="content"><p>Thank you for responding so late!<br>I agree with you that &quot;subs&quot; is not very obvious for subscript. While learning swift, I have a feeling that it contains so many long words as the keywords, such as<br>fallthrough, dynamicType, associativity, convenience, nonmutating, precedence, etc..<br>I understand there is a need for clarity. But I think it&#39;s also important to keep a concise and simple naming style where it&#39;s possible.<br>Thanks again.<br>Subject: Re: [swift-evolution] Proposal for Replacing Keyword &quot;subscript&quot; with &quot;subs&quot;‏<br>From: jackl at apple.com<br>Date: Thu, 10 Dec 2015 18:22:55 -0800<br>CC: swift-evolution at swift.org<br>To: feijian_sun at hotmail.com<br></p><p>It’s non-obvious to me that “subs” is short for subscript, whereas “init” and “func” have only one obvious expansion.<br>Jack <br>On Dec 10, 2015, at 6:12 PM, Feijian Sun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:Hello, I have a proposal to replace the long keyword &quot;subscript&quot; with the shorter version, &quot;subs&quot;. The idea is to keep the concise naming style on the language keywords, like &quot;init&quot; and &quot;func&quot;.So, Instead of:subscript(index: Int) -&gt; Int {        ... ...}we could simply do:subs(index: Int) -&gt; Int{        ... ...}Does this mean a big change on the parser side? what do you think?Thank you! _______________________________________________swift-evolution mailing listswift-evolution at swift.orghttps://lists.swift.org/mailman/listinfo/swift-evolution<br> 		 	   		  <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/3626dcd0/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Proposal for Replacing Keyword &quot;subscript&quot; with &quot;subs&quot;‏</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 10, 2015 at 09:00:00pm</p></header><div class="content"><p>&gt; On Dec 10, 2015, at 6:12 PM, Feijian Sun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello, <br>&gt; <br>&gt; I have a proposal to replace the long keyword &quot;subscript&quot; with the shorter version, &quot;subs&quot;. The idea is to keep the concise naming style on the language keywords, like &quot;init&quot; and &quot;func&quot;.<br>&gt; <br>&gt; So, Instead of:<br>&gt; <br>&gt; subscript(index: Int) -&gt; Int {<br>&gt;         ... ...<br>&gt; }<br>&gt; <br>&gt; we could simply do:<br>&gt; <br>&gt; subs(index: Int) -&gt; Int{<br>&gt;         ... ...<br>&gt; }<br>&gt; <br>&gt; Does this mean a big change on the parser side? what do you think?<br></p><p>Hi Feijian,<br></p><p>I agree with Jack in this case that we should keep &quot;subscript&quot;.  Swift&#39;s rough approach to keywords is: <br></p><p>1) reuse contracted keywords that are widely known in the C family when the connotations are obvious (e.g. struct, enum, etc).  <br>2) contract some “new” keywords for the *most commonly occurring* situations (e.g. func/var, though var is precedented in a number of extended c family languages like javascript), because people are expected to be forced to learn these things in the first few days of their swift learning.<br>3) otherwise, use a full word (subscript, convenience, mutating, etc).<br></p><p>In the case of subscript, it doesn’t occur often enough to be worth forcing people to memorize, and thus we prefer obvious clarity in the situations when it occurs in code.<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/e0030d22/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2861bfeb71de9de58206bb6ae750bc2f?s=50"></div><header><strong>Proposal for Replacing Keyword &quot;subscript&quot; with &quot;subs&quot;</strong> from <string>ilya</string> &lt;ilya.nikokoshev at gmail.com&gt;<p>December 11, 2015 at 12:00:00pm</p></header><div class="content"><p>Functional programming style brings us a lot of joy, so the most important<br>keyword shortening to support is obviously func -&gt; fun.<br>On Fri, Dec 11, 2015 at 08:06 Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Dec 10, 2015, at 6:12 PM, Feijian Sun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hello,<br>&gt;<br>&gt; I have a proposal to replace the long keyword &quot;subscript&quot; with the shorter<br>&gt; version, &quot;subs&quot;. The idea is to keep the concise naming style on the<br>&gt; language keywords, like &quot;init&quot; and &quot;func&quot;.<br>&gt;<br>&gt; So, Instead of:<br>&gt;<br>&gt; subscript(index: Int) -&gt; Int {<br>&gt;         ... ...<br>&gt; }<br>&gt;<br>&gt; we could simply do:<br>&gt;<br>&gt; subs(index: Int) -&gt; Int{<br>&gt;         ... ...<br>&gt; }<br>&gt;<br>&gt; Does this mean a big change on the parser side? what do you think?<br>&gt;<br>&gt;<br>&gt; Hi Feijian,<br>&gt;<br>&gt; I agree with Jack in this case that we should keep &quot;subscript&quot;.  Swift&#39;s<br>&gt; rough approach to keywords is:<br>&gt;<br>&gt; 1) reuse contracted keywords that are widely known in the C family when<br>&gt; the connotations are obvious (e.g. struct, enum, etc).<br>&gt; 2) contract some “new” keywords for the *most commonly occurring*<br>&gt; situations (e.g. func/var, though var is precedented in a number of<br>&gt; extended c family languages like javascript), because people are expected<br>&gt; to be forced to learn these things in the first few days of their swift<br>&gt; learning.<br>&gt; 3) otherwise, use a full word (subscript, convenience, mutating, etc).<br>&gt;<br>&gt; In the case of subscript, it doesn’t occur often enough to be worth<br>&gt; forcing people to memorize, and thus we prefer obvious clarity in the<br>&gt; situations when it occurs in code.<br>&gt;<br>&gt; -Chris<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151211/2036d4fc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3db3c0e8e3734ef93774f05199cbe713?s=50"></div><header><strong>Proposal for Replacing Keyword &quot;subscript&quot; with &quot;subs&quot;</strong> from <string>Feijian Sun</string> &lt;feijian_sun at hotmail.com&gt;<p>December 11, 2015 at 08:00:00am</p></header><div class="content"><p>Interesting idea and I like it myself.<br>My idea of shortening the long keywords in swift came up when I was typing swift code using a simple text editor. Without the help from the auto-complete feature in xcode, I was really feeling the pain. Considering that the swift has been port to linux platforms and many developers now have chances to code swift with none-xcode editors on linux, they could feel the same pain like I did.<br>But I see Chris&#39;s points in his response email. Following the 3 point approach to keywords, it&#39;s clear that we should keep &quot;subscript&quot;.<br>Thanks,<br>Feijian<br></p><p>From: ilya.nikokoshev at gmail.com<br>Date: Fri, 11 Dec 2015 12:18:26 +0000<br>Subject: Re: [swift-evolution] Proposal for Replacing Keyword &quot;subscript&quot; with &quot;subs&quot;<br>To: clattner at apple.com; feijian_sun at hotmail.com<br>CC: swift-evolution at swift.org<br></p><p>Functional programming style brings us a lot of joy, so the most important keyword shortening to support is obviously func -&gt; fun. <br>On Fri, Dec 11, 2015 at 08:06 Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>On Dec 10, 2015, at 6:12 PM, Feijian Sun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>Hello, I have a proposal to replace the long keyword &quot;subscript&quot; with the shorter version, &quot;subs&quot;. The idea is to keep the concise naming style on the language keywords, like &quot;init&quot; and &quot;func&quot;.So, Instead of:subscript(index: Int) -&gt; Int {        ... ...}we could simply do:subs(index: Int) -&gt; Int{        ... ...}Does this mean a big change on the parser side? what do you think?<br>Hi Feijian,<br>I agree with Jack in this case that we should keep &quot;subscript&quot;.  Swift&#39;s rough approach to keywords is: <br>1) reuse contracted keywords that are widely known in the C family when the connotations are obvious (e.g. struct, enum, etc).  2) contract some “new” keywords for the *most commonly occurring* situations (e.g. func/var, though var is precedented in a number of extended c family languages like javascript), because people are expected to be forced to learn these things in the first few days of their swift learning.3) otherwise, use a full word (subscript, convenience, mutating, etc).<br>In the case of subscript, it doesn’t occur often enough to be worth forcing people to memorize, and thus we prefer obvious clarity in the situations when it occurs in code.<br>-Chris<br></p><p><br></p><p>_______________________________________________<br></p><p>swift-evolution mailing list<br></p><p>swift-evolution at swift.org<br></p><p>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br> 		 	   		  <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151211/c9f85485/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3db3c0e8e3734ef93774f05199cbe713?s=50"></div><header><strong>=?windows-1256?q?Proposal_for_Replacing_Keyword?= =?windows-1256?q?_=22subscript=22_with_=22subs=22=FE?=</strong> from <string>Feijian Sun</string> &lt;feijian_sun at hotmail.com&gt;<p>December 11, 2015 at 07:00:00am</p></header><div class="content"><p>Okay, I see your points. Thanks for response!<br></p><p>Subject: Re: [swift-evolution] Proposal for Replacing Keyword &quot;subscript&quot; with &quot;subs&quot;‏<br>From: clattner at apple.com<br>Date: Thu, 10 Dec 2015 21:06:52 -0800<br>CC: swift-evolution at swift.org<br>To: feijian_sun at hotmail.com<br></p><p><br>On Dec 10, 2015, at 6:12 PM, Feijian Sun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:Hello, I have a proposal to replace the long keyword &quot;subscript&quot; with the shorter version, &quot;subs&quot;. The idea is to keep the concise naming style on the language keywords, like &quot;init&quot; and &quot;func&quot;.So, Instead of:subscript(index: Int) -&gt; Int {        ... ...}we could simply do:subs(index: Int) -&gt; Int{        ... ...}Does this mean a big change on the parser side? what do you think?<br>Hi Feijian,<br>I agree with Jack in this case that we should keep &quot;subscript&quot;.  Swift&#39;s rough approach to keywords is: <br>1) reuse contracted keywords that are widely known in the C family when the connotations are obvious (e.g. struct, enum, etc).  2) contract some “new” keywords for the *most commonly occurring* situations (e.g. func/var, though var is precedented in a number of extended c family languages like javascript), because people are expected to be forced to learn these things in the first few days of their swift learning.3) otherwise, use a full word (subscript, convenience, mutating, etc).<br>In the case of subscript, it doesn’t occur often enough to be worth forcing people to memorize, and thus we prefer obvious clarity in the situations when it occurs in code.<br>-Chris<br> 		 	   		  <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151211/e72affe4/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
