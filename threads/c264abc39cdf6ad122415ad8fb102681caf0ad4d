<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Dropping NS Prefix in Foundation</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>May  6, 2016 at 01:00:00pm</p></header><div class="content"><p>Hi everyone,<br></p><p>Thanks to all of you for your feedback on SE-0069 (Foundation Value Types). I’m back again with more information on another part of our plan to integrate Foundation API into Swift: dropping the NS prefix.<br></p><p>When we originally proposed this as part of the API guidelines document (SE-0023, https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md), we took a very broad approach to which classes would drop their prefix. This time, we’ve narrowed the scope considerably, plus taken advantage of the ability to nest types inside classes to further reduce the possibility of introducing conflicting names.<br></p><p>I’ve written up a draft of the proposal, which includes an extensive section on motivation plus a list of changes. Please take a look and let me know what you think. We’ll start a formal review period soon.<br></p><p>https://github.com/parkera/swift-evolution/blob/parkera/drop_ns/proposals/NNNN-drop-foundation-ns.md<br></p><p>Thanks again for your help,<br>- Tony<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>Dropping NS Prefix in Foundation</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>May  6, 2016 at 03:00:00pm</p></header><div class="content"><p>-1 On the group as-is. I do not believe all of these classes have the behavior that would be expected if ‘foundation’ were a from-scratch foundational library for Swift (as it exists on non Apple platforms). This will lock Swift into an evolutionary path for these types going forward.<br></p><p>There is enough here that I will just pick one example to focus on - NSCoding/NSCoder, and elements I would suspect from such a from-scratch design<br></p><p>- Coding would incorporate SecureCoding into its design (I did not see NSSecureCoding even on the list of protocols to get the prefix dropped)<br>- Archiver/Unarchiver would not exist; we would only have keyed versions<br>- Coder would be a split in half to Coder and Decoder<br>- Coder and Decoder would be protocols<br>- The Coder protocol might have a single method, encode(value:Coding, forKey:String)<br>- The Decoder protocol might single method, &lt;T:Coding&gt; decode(type:T.Type, forKey: String) -&gt; T?<br>- Compiler generation of a default Coding implementation<br></p><p>And possibly more such as:<br>- Add Coders limited to trees of objects vs graphs, to allow the Coder/Decoder protocols to be used for more intuitive JSON/XML representations<br>- Custom/specific assignment operator for Decoder to capture desired type without requiring said type to be specified in decode(type:forKey:) calls<br></p><p>-DW<br></p><p>&gt; On May 6, 2016, at 2:52 PM, Tony Parker via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi everyone,<br>&gt; <br>&gt; Thanks to all of you for your feedback on SE-0069 (Foundation Value Types). I’m back again with more information on another part of our plan to integrate Foundation API into Swift: dropping the NS prefix.<br>&gt; <br>&gt; When we originally proposed this as part of the API guidelines document (SE-0023, https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md&gt;), we took a very broad approach to which classes would drop their prefix. This time, we’ve narrowed the scope considerably, plus taken advantage of the ability to nest types inside classes to further reduce the possibility of introducing conflicting names.<br>&gt; <br>&gt; I’ve written up a draft of the proposal, which includes an extensive section on motivation plus a list of changes. Please take a look and let me know what you think. We’ll start a formal review period soon.<br>&gt; <br>&gt; https://github.com/parkera/swift-evolution/blob/parkera/drop_ns/proposals/NNNN-drop-foundation-ns.md &lt;https://github.com/parkera/swift-evolution/blob/parkera/drop_ns/proposals/NNNN-drop-foundation-ns.md&gt;<br>&gt; <br>&gt; Thanks again for your help,<br>&gt; - Tony<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160506/f100b64c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Dropping NS Prefix in Foundation</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>May  6, 2016 at 03:00:00pm</p></header><div class="content"><p>Hi David,<br></p><p>&gt; On May 6, 2016, at 2:56 PM, David Waite &lt;david at alkaline-solutions.com&gt; wrote:<br>&gt; <br>&gt; -1 On the group as-is. I do not believe all of these classes have the behavior that would be expected if ‘foundation’ were a from-scratch foundational library for Swift (as it exists on non Apple platforms). This will lock Swift into an evolutionary path for these types going forward.<br>&gt; <br>&gt; There is enough here that I will just pick one example to focus on - NSCoding/NSCoder, and elements I would suspect from such a from-scratch design<br>&gt; <br>&gt; - Coding would incorporate SecureCoding into its design (I did not see NSSecureCoding even on the list of protocols to get the prefix dropped)<br></p><p>SecureCoding should be on the list actually.<br></p><p>&gt; - Archiver/Unarchiver would not exist; we would only have keyed versions<br>&gt; - Coder would be a split in half to Coder and Decoder<br>&gt; - Coder and Decoder would be protocols<br>&gt; - The Coder protocol might have a single method, encode(value:Coding, forKey:String)<br>&gt; - The Decoder protocol might single method, &lt;T:Coding&gt; decode(type:T.Type, forKey: String) -&gt; T?<br>&gt; - Compiler generation of a default Coding implementation<br>&gt; <br>&gt; And possibly more such as:<br>&gt; - Add Coders limited to trees of objects vs graphs, to allow the Coder/Decoder protocols to be used for more intuitive JSON/XML representations<br>&gt; - Custom/specific assignment operator for Decoder to capture desired type without requiring said type to be specified in decode(type:forKey:) calls<br>&gt; <br>&gt; -DW<br></p><p>There’s no question that we can improve Coding for Swift. I have actually explored this area quite a bit although I don’t have anything planned for Swift 3 at this time.<br></p><p>The general point is though, that we can do it by extending Foundation in that direction over time. In fact, keyed archiving is the perfect example of how we were able to do just that in the past in Objective-C. NSArchiver already existed and served a particular purpose, so we extended the concept into NSKeyedArchiver using the facilities available to us at the time.<br></p><p>It’s not a goal to rewrite Foundation from scratch in Swift. All Swift apps that are running out there today are in fact using a combination of Swift, Objective-C, C, C++, various flavors of assembly, and more. The goal is to present the existing API of Foundation in a way that fits in with the language today while allowing us to iteratively improve it over time.<br></p><p>- Tony<br></p><p>&gt; <br>&gt;&gt; On May 6, 2016, at 2:52 PM, Tony Parker via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi everyone,<br>&gt;&gt; <br>&gt;&gt; Thanks to all of you for your feedback on SE-0069 (Foundation Value Types). I’m back again with more information on another part of our plan to integrate Foundation API into Swift: dropping the NS prefix.<br>&gt;&gt; <br>&gt;&gt; When we originally proposed this as part of the API guidelines document (SE-0023, https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md&gt;), we took a very broad approach to which classes would drop their prefix. This time, we’ve narrowed the scope considerably, plus taken advantage of the ability to nest types inside classes to further reduce the possibility of introducing conflicting names.<br>&gt;&gt; <br>&gt;&gt; I’ve written up a draft of the proposal, which includes an extensive section on motivation plus a list of changes. Please take a look and let me know what you think. We’ll start a formal review period soon.<br>&gt;&gt; <br>&gt;&gt; https://github.com/parkera/swift-evolution/blob/parkera/drop_ns/proposals/NNNN-drop-foundation-ns.md &lt;https://github.com/parkera/swift-evolution/blob/parkera/drop_ns/proposals/NNNN-drop-foundation-ns.md&gt;<br>&gt;&gt; <br>&gt;&gt; Thanks again for your help,<br>&gt;&gt; - Tony<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160506/a008a776/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>Dropping NS Prefix in Foundation</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>May  7, 2016 at 07:00:00pm</p></header><div class="content"><p>Should deprecated / unsafe classes be renamed with some sort of prefix, such as UnsafeCoder? Or leave them as original, NSCoder? Just to highlight alternatives should be used instead.<br></p><p><br>&gt; On 7 May 2016, at 8:06 AM, Tony Parker via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi David,<br>&gt; <br>&gt;&gt; On May 6, 2016, at 2:56 PM, David Waite &lt;david at alkaline-solutions.com &lt;mailto:david at alkaline-solutions.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; -1 On the group as-is. I do not believe all of these classes have the behavior that would be expected if ‘foundation’ were a from-scratch foundational library for Swift (as it exists on non Apple platforms). This will lock Swift into an evolutionary path for these types going forward.<br>&gt;&gt; <br>&gt;&gt; There is enough here that I will just pick one example to focus on - NSCoding/NSCoder, and elements I would suspect from such a from-scratch design<br>&gt;&gt; <br>&gt;&gt; - Coding would incorporate SecureCoding into its design (I did not see NSSecureCoding even on the list of protocols to get the prefix dropped)<br>&gt; <br>&gt; SecureCoding should be on the list actually.<br>&gt; <br>&gt;&gt; - Archiver/Unarchiver would not exist; we would only have keyed versions<br>&gt;&gt; - Coder would be a split in half to Coder and Decoder<br>&gt;&gt; - Coder and Decoder would be protocols<br>&gt;&gt; - The Coder protocol might have a single method, encode(value:Coding, forKey:String)<br>&gt;&gt; - The Decoder protocol might single method, &lt;T:Coding&gt; decode(type:T.Type, forKey: String) -&gt; T?<br>&gt;&gt; - Compiler generation of a default Coding implementation<br>&gt;&gt; <br>&gt;&gt; And possibly more such as:<br>&gt;&gt; - Add Coders limited to trees of objects vs graphs, to allow the Coder/Decoder protocols to be used for more intuitive JSON/XML representations<br>&gt;&gt; - Custom/specific assignment operator for Decoder to capture desired type without requiring said type to be specified in decode(type:forKey:) calls<br>&gt;&gt; <br>&gt;&gt; -DW<br>&gt; <br>&gt; There’s no question that we can improve Coding for Swift. I have actually explored this area quite a bit although I don’t have anything planned for Swift 3 at this time.<br>&gt; <br>&gt; The general point is though, that we can do it by extending Foundation in that direction over time. In fact, keyed archiving is the perfect example of how we were able to do just that in the past in Objective-C. NSArchiver already existed and served a particular purpose, so we extended the concept into NSKeyedArchiver using the facilities available to us at the time.<br>&gt; <br>&gt; It’s not a goal to rewrite Foundation from scratch in Swift. All Swift apps that are running out there today are in fact using a combination of Swift, Objective-C, C, C++, various flavors of assembly, and more. The goal is to present the existing API of Foundation in a way that fits in with the language today while allowing us to iteratively improve it over time.<br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 6, 2016, at 2:52 PM, Tony Parker via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi everyone,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks to all of you for your feedback on SE-0069 (Foundation Value Types). I’m back again with more information on another part of our plan to integrate Foundation API into Swift: dropping the NS prefix.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; When we originally proposed this as part of the API guidelines document (SE-0023, https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md&gt;), we took a very broad approach to which classes would drop their prefix. This time, we’ve narrowed the scope considerably, plus taken advantage of the ability to nest types inside classes to further reduce the possibility of introducing conflicting names.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’ve written up a draft of the proposal, which includes an extensive section on motivation plus a list of changes. Please take a look and let me know what you think. We’ll start a formal review period soon.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/parkera/swift-evolution/blob/parkera/drop_ns/proposals/NNNN-drop-foundation-ns.md &lt;https://github.com/parkera/swift-evolution/blob/parkera/drop_ns/proposals/NNNN-drop-foundation-ns.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks again for your help,<br>&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160507/d6e5479e/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Dropping NS Prefix in Foundation</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May  7, 2016 at 12:00:00pm</p></header><div class="content"><p>Hi Tony,<br></p><p>I&#39;m very positive about the proposal but I have similar fears, even if less strong, to David Waite. I agree that the core libraries can be improved with time, but it&#39;s going to be difficult to rethink them profoundly. NSKeyedArchiver was an improvement, but a fairly mild one, to stay backwards-compatible. It&#39;s going to be difficult to introduce major changes, like the ones David Waite gave as example, post Swift 3.<br></p><p>But on a more pragmatic level, I know there is not much we can do about it, with the current deadlines. All we can hope for is make corelibs-foundation as Swifty as possible by the time Swift 3 comes out. And I imagine that third party libraries will come to replace the aspects of it that feel too alien to Swift.<br></p><p>Any thoughts?<br></p><p>David (Hart).<br></p><p>&gt; On 07 May 2016, at 00:06, Tony Parker via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi David,<br>&gt; <br>&gt;&gt; On May 6, 2016, at 2:56 PM, David Waite &lt;david at alkaline-solutions.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; -1 On the group as-is. I do not believe all of these classes have the behavior that would be expected if ‘foundation’ were a from-scratch foundational library for Swift (as it exists on non Apple platforms). This will lock Swift into an evolutionary path for these types going forward.<br>&gt;&gt; <br>&gt;&gt; There is enough here that I will just pick one example to focus on - NSCoding/NSCoder, and elements I would suspect from such a from-scratch design<br>&gt;&gt; <br>&gt;&gt; - Coding would incorporate SecureCoding into its design (I did not see NSSecureCoding even on the list of protocols to get the prefix dropped)<br>&gt; <br>&gt; SecureCoding should be on the list actually.<br>&gt; <br>&gt;&gt; - Archiver/Unarchiver would not exist; we would only have keyed versions<br>&gt;&gt; - Coder would be a split in half to Coder and Decoder<br>&gt;&gt; - Coder and Decoder would be protocols<br>&gt;&gt; - The Coder protocol might have a single method, encode(value:Coding, forKey:String)<br>&gt;&gt; - The Decoder protocol might single method, &lt;T:Coding&gt; decode(type:T.Type, forKey: String) -&gt; T?<br>&gt;&gt; - Compiler generation of a default Coding implementation<br>&gt;&gt; <br>&gt;&gt; And possibly more such as:<br>&gt;&gt; - Add Coders limited to trees of objects vs graphs, to allow the Coder/Decoder protocols to be used for more intuitive JSON/XML representations<br>&gt;&gt; - Custom/specific assignment operator for Decoder to capture desired type without requiring said type to be specified in decode(type:forKey:) calls<br>&gt;&gt; <br>&gt;&gt; -DW<br>&gt; <br>&gt; There’s no question that we can improve Coding for Swift. I have actually explored this area quite a bit although I don’t have anything planned for Swift 3 at this time.<br>&gt; <br>&gt; The general point is though, that we can do it by extending Foundation in that direction over time. In fact, keyed archiving is the perfect example of how we were able to do just that in the past in Objective-C. NSArchiver already existed and served a particular purpose, so we extended the concept into NSKeyedArchiver using the facilities available to us at the time.<br>&gt; <br>&gt; It’s not a goal to rewrite Foundation from scratch in Swift. All Swift apps that are running out there today are in fact using a combination of Swift, Objective-C, C, C++, various flavors of assembly, and more. The goal is to present the existing API of Foundation in a way that fits in with the language today while allowing us to iteratively improve it over time.<br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 6, 2016, at 2:52 PM, Tony Parker via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi everyone,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks to all of you for your feedback on SE-0069 (Foundation Value Types). I’m back again with more information on another part of our plan to integrate Foundation API into Swift: dropping the NS prefix.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; When we originally proposed this as part of the API guidelines document (SE-0023, https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md), we took a very broad approach to which classes would drop their prefix. This time, we’ve narrowed the scope considerably, plus taken advantage of the ability to nest types inside classes to further reduce the possibility of introducing conflicting names.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’ve written up a draft of the proposal, which includes an extensive section on motivation plus a list of changes. Please take a look and let me know what you think. We’ll start a formal review period soon.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/parkera/swift-evolution/blob/parkera/drop_ns/proposals/NNNN-drop-foundation-ns.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks again for your help,<br>&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160507/6d4a8300/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Dropping NS Prefix in Foundation</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May  7, 2016 at 07:00:00am</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On May 7, 2016, at 5:03 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Tony,<br>&gt; <br>&gt; I&#39;m very positive about the proposal but I have similar fears, even if less strong, to David Waite. I agree that the core libraries can be improved with time, but it&#39;s going to be difficult to rethink them profoundly. NSKeyedArchiver was an improvement, but a fairly mild one, to stay backwards-compatible. It&#39;s going to be difficult to introduce major changes, like the ones David Waite gave as example, post Swift 3.<br>&gt; <br>&gt; But on a more pragmatic level, I know there is not much we can do about it, with the current deadlines. All we can hope for is make corelibs-foundation as Swifty as possible by the time Swift 3 comes out. And I imagine that third party libraries will come to replace the aspects of it that feel too alien to Swift.<br>&gt; <br>&gt; Any thoughts?<br></p><p>+1.  I have similar concerns.  The worst case would be if Foundation does not eventually get the appropriate Swift-native rethinking and third party libraries with the same functionality are developed for that reason.  If that happens the community will be split between those who favor various libraries.  That should not happen just because corelibs doesn&#39;t feel Swift-native.<br></p><p>It would be far better to see that happen as part of the evolution process so we eventually end up with fully Swift-native types in Foundation itself.  I think a strong commitment to doing this over the next couple years would go a long way towards addressing the concerns many of us have about this.<br></p><p>&gt; <br>&gt; David (Hart).<br>&gt; <br>&gt;&gt; On 07 May 2016, at 00:06, Tony Parker via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi David,<br>&gt;&gt; <br>&gt;&gt;&gt; On May 6, 2016, at 2:56 PM, David Waite &lt;david at alkaline-solutions.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -1 On the group as-is. I do not believe all of these classes have the behavior that would be expected if ‘foundation’ were a from-scratch foundational library for Swift (as it exists on non Apple platforms). This will lock Swift into an evolutionary path for these types going forward.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There is enough here that I will just pick one example to focus on - NSCoding/NSCoder, and elements I would suspect from such a from-scratch design<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Coding would incorporate SecureCoding into its design (I did not see NSSecureCoding even on the list of protocols to get the prefix dropped)<br>&gt;&gt; <br>&gt;&gt; SecureCoding should be on the list actually.<br>&gt;&gt; <br>&gt;&gt;&gt; - Archiver/Unarchiver would not exist; we would only have keyed versions<br>&gt;&gt;&gt; - Coder would be a split in half to Coder and Decoder<br>&gt;&gt;&gt; - Coder and Decoder would be protocols<br>&gt;&gt;&gt; - The Coder protocol might have a single method, encode(value:Coding, forKey:String)<br>&gt;&gt;&gt; - The Decoder protocol might single method, &lt;T:Coding&gt; decode(type:T.Type, forKey: String) -&gt; T?<br>&gt;&gt;&gt; - Compiler generation of a default Coding implementation<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And possibly more such as:<br>&gt;&gt;&gt; - Add Coders limited to trees of objects vs graphs, to allow the Coder/Decoder protocols to be used for more intuitive JSON/XML representations<br>&gt;&gt;&gt; - Custom/specific assignment operator for Decoder to capture desired type without requiring said type to be specified in decode(type:forKey:) calls<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -DW<br>&gt;&gt; <br>&gt;&gt; There’s no question that we can improve Coding for Swift. I have actually explored this area quite a bit although I don’t have anything planned for Swift 3 at this time.<br>&gt;&gt; <br>&gt;&gt; The general point is though, that we can do it by extending Foundation in that direction over time. In fact, keyed archiving is the perfect example of how we were able to do just that in the past in Objective-C. NSArchiver already existed and served a particular purpose, so we extended the concept into NSKeyedArchiver using the facilities available to us at the time.<br>&gt;&gt; <br>&gt;&gt; It’s not a goal to rewrite Foundation from scratch in Swift. All Swift apps that are running out there today are in fact using a combination of Swift, Objective-C, C, C++, various flavors of assembly, and more. The goal is to present the existing API of Foundation in a way that fits in with the language today while allowing us to iteratively improve it over time.<br>&gt;&gt; <br>&gt;&gt; - Tony<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 6, 2016, at 2:52 PM, Tony Parker via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi everyone,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks to all of you for your feedback on SE-0069 (Foundation Value Types). I’m back again with more information on another part of our plan to integrate Foundation API into Swift: dropping the NS prefix.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; When we originally proposed this as part of the API guidelines document (SE-0023, https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md), we took a very broad approach to which classes would drop their prefix. This time, we’ve narrowed the scope considerably, plus taken advantage of the ability to nest types inside classes to further reduce the possibility of introducing conflicting names.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’ve written up a draft of the proposal, which includes an extensive section on motivation plus a list of changes. Please take a look and let me know what you think. We’ll start a formal review period soon.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://github.com/parkera/swift-evolution/blob/parkera/drop_ns/proposals/NNNN-drop-foundation-ns.md<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks again for your help,<br>&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160507/875b293c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Dropping NS Prefix in Foundation</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>May  7, 2016 at 09:00:00am</p></header><div class="content"><p>Hi Matthew,<br></p><p>&gt; On May 7, 2016, at 5:22 AM, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt; On May 7, 2016, at 5:03 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Hi Tony,<br>&gt;&gt; <br>&gt;&gt; I&#39;m very positive about the proposal but I have similar fears, even if less strong, to David Waite. I agree that the core libraries can be improved with time, but it&#39;s going to be difficult to rethink them profoundly. NSKeyedArchiver was an improvement, but a fairly mild one, to stay backwards-compatible. It&#39;s going to be difficult to introduce major changes, like the ones David Waite gave as example, post Swift 3.<br>&gt;&gt; <br>&gt;&gt; But on a more pragmatic level, I know there is not much we can do about it, with the current deadlines. All we can hope for is make corelibs-foundation as Swifty as possible by the time Swift 3 comes out. And I imagine that third party libraries will come to replace the aspects of it that feel too alien to Swift.<br>&gt;&gt; <br>&gt;&gt; Any thoughts?<br>&gt; <br>&gt; +1.  I have similar concerns.  The worst case would be if Foundation does not eventually get the appropriate Swift-native rethinking and third party libraries with the same functionality are developed for that reason.  If that happens the community will be split between those who favor various libraries.  That should not happen just because corelibs doesn&#39;t feel Swift-native.<br>&gt; <br>&gt; It would be far better to see that happen as part of the evolution process so we eventually end up with fully Swift-native types in Foundation itself.  I think a strong commitment to doing this over the next couple years would go a long way towards addressing the concerns many of us have about this.<br>&gt; <br></p><p>I totally understand what you’re saying. I believe we’ve made that commitment, by virtue of placing Foundation (dispatch and XCTest too) into swift-corelibs and also by sending this proposal and the value types one to this list. We are trying to avoid exactly the split you are concerned about.<br></p><p>There is always going to be new functionality in Foundation and other frameworks in the SDK that is tied to OS releases, which we simply cannot talk about here until those releases are made public. However, the rest of the Foundation team and I are always advocating for the best possible Swift API wherever and whenever we can.<br></p><p>There is no doubt it will take time to make the many thousands of APIs that you use every day feel native and natural in Swift. I’ll beat the drum of iterative improvement again: the best way to get there from here is to make continuous adjustments and improvements from release to release. You will see the rethinking you are looking for over the course of that process.<br></p><p>Thanks,<br>- Tony<br></p><p>&gt;&gt; <br>&gt;&gt; David (Hart).<br>&gt;&gt; <br>&gt;&gt; On 07 May 2016, at 00:06, Tony Parker via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Hi David,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 6, 2016, at 2:56 PM, David Waite &lt;david at alkaline-solutions.com &lt;mailto:david at alkaline-solutions.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -1 On the group as-is. I do not believe all of these classes have the behavior that would be expected if ‘foundation’ were a from-scratch foundational library for Swift (as it exists on non Apple platforms). This will lock Swift into an evolutionary path for these types going forward.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; There is enough here that I will just pick one example to focus on - NSCoding/NSCoder, and elements I would suspect from such a from-scratch design<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Coding would incorporate SecureCoding into its design (I did not see NSSecureCoding even on the list of protocols to get the prefix dropped)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; SecureCoding should be on the list actually.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Archiver/Unarchiver would not exist; we would only have keyed versions<br>&gt;&gt;&gt;&gt; - Coder would be a split in half to Coder and Decoder<br>&gt;&gt;&gt;&gt; - Coder and Decoder would be protocols<br>&gt;&gt;&gt;&gt; - The Coder protocol might have a single method, encode(value:Coding, forKey:String)<br>&gt;&gt;&gt;&gt; - The Decoder protocol might single method, &lt;T:Coding&gt; decode(type:T.Type, forKey: String) -&gt; T?<br>&gt;&gt;&gt;&gt; - Compiler generation of a default Coding implementation<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; And possibly more such as:<br>&gt;&gt;&gt;&gt; - Add Coders limited to trees of objects vs graphs, to allow the Coder/Decoder protocols to be used for more intuitive JSON/XML representations<br>&gt;&gt;&gt;&gt; - Custom/specific assignment operator for Decoder to capture desired type without requiring said type to be specified in decode(type:forKey:) calls<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -DW<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There’s no question that we can improve Coding for Swift. I have actually explored this area quite a bit although I don’t have anything planned for Swift 3 at this time.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The general point is though, that we can do it by extending Foundation in that direction over time. In fact, keyed archiving is the perfect example of how we were able to do just that in the past in Objective-C. NSArchiver already existed and served a particular purpose, so we extended the concept into NSKeyedArchiver using the facilities available to us at the time.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It’s not a goal to rewrite Foundation from scratch in Swift. All Swift apps that are running out there today are in fact using a combination of Swift, Objective-C, C, C++, various flavors of assembly, and more. The goal is to present the existing API of Foundation in a way that fits in with the language today while allowing us to iteratively improve it over time.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On May 6, 2016, at 2:52 PM, Tony Parker via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hi everyone,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Thanks to all of you for your feedback on SE-0069 (Foundation Value Types). I’m back again with more information on another part of our plan to integrate Foundation API into Swift: dropping the NS prefix.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; When we originally proposed this as part of the API guidelines document (SE-0023, https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md&gt;), we took a very broad approach to which classes would drop their prefix. This time, we’ve narrowed the scope considerably, plus taken advantage of the ability to nest types inside classes to further reduce the possibility of introducing conflicting names.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I’ve written up a draft of the proposal, which includes an extensive section on motivation plus a list of changes. Please take a look and let me know what you think. We’ll start a formal review period soon.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; https://github.com/parkera/swift-evolution/blob/parkera/drop_ns/proposals/NNNN-drop-foundation-ns.md &lt;https://github.com/parkera/swift-evolution/blob/parkera/drop_ns/proposals/NNNN-drop-foundation-ns.md&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Thanks again for your help,<br>&gt;&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160507/ae372e3c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Dropping NS Prefix in Foundation</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May  7, 2016 at 02:00:00pm</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On May 7, 2016, at 11:14 AM, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt; <br>&gt; Hi Matthew,<br>&gt; <br>&gt;&gt; On May 7, 2016, at 5:22 AM, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; <br>&gt;&gt;&gt; On May 7, 2016, at 5:03 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi Tony,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m very positive about the proposal but I have similar fears, even if less strong, to David Waite. I agree that the core libraries can be improved with time, but it&#39;s going to be difficult to rethink them profoundly. NSKeyedArchiver was an improvement, but a fairly mild one, to stay backwards-compatible. It&#39;s going to be difficult to introduce major changes, like the ones David Waite gave as example, post Swift 3.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But on a more pragmatic level, I know there is not much we can do about it, with the current deadlines. All we can hope for is make corelibs-foundation as Swifty as possible by the time Swift 3 comes out. And I imagine that third party libraries will come to replace the aspects of it that feel too alien to Swift.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Any thoughts?<br>&gt;&gt; <br>&gt;&gt; +1.  I have similar concerns.  The worst case would be if Foundation does not eventually get the appropriate Swift-native rethinking and third party libraries with the same functionality are developed for that reason.  If that happens the community will be split between those who favor various libraries.  That should not happen just because corelibs doesn&#39;t feel Swift-native.<br>&gt;&gt; <br>&gt;&gt; It would be far better to see that happen as part of the evolution process so we eventually end up with fully Swift-native types in Foundation itself.  I think a strong commitment to doing this over the next couple years would go a long way towards addressing the concerns many of us have about this.<br>&gt; <br>&gt; I totally understand what you’re saying. I believe we’ve made that commitment, by virtue of placing Foundation (dispatch and XCTest too) into swift-corelibs and also by sending this proposal and the value types one to this list. We are trying to avoid exactly the split you are concerned about.<br>&gt; <br>&gt; There is always going to be new functionality in Foundation and other frameworks in the SDK that is tied to OS releases, which we simply cannot talk about here until those releases are made public. However, the rest of the Foundation team and I are always advocating for the best possible Swift API wherever and whenever we can.<br>&gt; <br>&gt; There is no doubt it will take time to make the many thousands of APIs that you use every day feel native and natural in Swift. I’ll beat the drum of iterative improvement again: the best way to get there from here is to make continuous adjustments and improvements from release to release. You will see the rethinking you are looking for over the course of that process.<br></p><p>Thank you for the reply and openness Tony.  <br></p><p>I think our concern stems from a couple of places.  Possibly most important is that there has been significant effort to introduce as many breaking changes into Swift 3 as possible and a general sense that there will be a pretty high bar for breaking changes in the future.  Many of changes we hope to see in a Swift native rethink / redesign will be significant breaking changes if they are made to the existing types.  We are focused on the *design* of the APIs, not just the naming of specific methods.  Their Cocoa and Objective-C origin will be quite apparent despite the renaming which will make them somewhat more comfortable in Swift.  Is there really appetite for making breaking changes on the scale necessary for a Swift native design in Swift 4, 5, 6, etc (assuming it takes several iterations to complete)?<br></p><p>Secondarily, as long as the design of Foundation is constrained by the need to be usable from Objective-C this constraint is likely to influence the Swift interface in some way.  I imagine this constraint will be around for a while quite a while.  That could slow the the arrival of designs that are true to the spirit of Swift.<br></p><p>I understand the need for pragmatism and appreciate the desire to make our experience in Swift 3 be as pleasant as possible.  At the same time, I fear that taking the approach of evolving Foundation as the long term strategy will lead to a suboptimal result and / or the split in the community I mentioned.  There are several factors that could contribute to this:<br></p><p>1. Evolving existing API rather than designing from scratch will lead to different results.  Designing from scratch will likely lead to a better result from a &quot;pure Swift&quot; perspective as there will not be any legacy baggage.<br></p><p>2. If the underlying implementation is going to need to be available in Objective-C as well for quite a while it will probably delay highly desired changes, thus leaving a window where the community may split.<br></p><p>3. We may reach a place in 3 years where everyone acknowledges the library API are not close to what we would design if we could do it over, but the will for breaking changes of the scale necessary just isn&#39;t there.<br></p><p>Can you elaborate on why Foundation must be the long term solution?  I wonder if it wouldn&#39;t be better if the long term solution was a new, Swift native module.  This would allow us to make Foundation more comfortable in the near term while avoiding breaking changes when Swift native designs are introduced.  It would also encourage community members who wish to design something more Swifty to work on that as part of the evolution process or as a precursor to evolution (along the lines of Boost).<br></p><p>If Foundation must be the long term solution it looks to me like these are our options:<br></p><p>1. Keep the NS prefixes until types are redesigned.<br>2. Face significant breaking changes in the future when Swift native designs are introduced<br>3. Live with designs in Foundation that don&#39;t feel Swift native, likely leading to an alternative from the community that feels more Swifty.<br></p><p>If these are the options we have available my preference is for #1.  However, maybe we can achieve the benefits of this approach while simultaneously enabling a more comfortable Foundation experience in the near term simply by deciding to treat Foundation as a bridge to a future that will eventually move beyond it.<br></p><p>Matthew<br></p><p>&gt; <br>&gt; Thanks,<br>&gt; - Tony<br>&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; David (Hart).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 07 May 2016, at 00:06, Tony Parker via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi David,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On May 6, 2016, at 2:56 PM, David Waite &lt;david at alkaline-solutions.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -1 On the group as-is. I do not believe all of these classes have the behavior that would be expected if ‘foundation’ were a from-scratch foundational library for Swift (as it exists on non Apple platforms). This will lock Swift into an evolutionary path for these types going forward.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; There is enough here that I will just pick one example to focus on - NSCoding/NSCoder, and elements I would suspect from such a from-scratch design<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; - Coding would incorporate SecureCoding into its design (I did not see NSSecureCoding even on the list of protocols to get the prefix dropped)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; SecureCoding should be on the list actually.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; - Archiver/Unarchiver would not exist; we would only have keyed versions<br>&gt;&gt;&gt;&gt;&gt; - Coder would be a split in half to Coder and Decoder<br>&gt;&gt;&gt;&gt;&gt; - Coder and Decoder would be protocols<br>&gt;&gt;&gt;&gt;&gt; - The Coder protocol might have a single method, encode(value:Coding, forKey:String)<br>&gt;&gt;&gt;&gt;&gt; - The Decoder protocol might single method, &lt;T:Coding&gt; decode(type:T.Type, forKey: String) -&gt; T?<br>&gt;&gt;&gt;&gt;&gt; - Compiler generation of a default Coding implementation<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; And possibly more such as:<br>&gt;&gt;&gt;&gt;&gt; - Add Coders limited to trees of objects vs graphs, to allow the Coder/Decoder protocols to be used for more intuitive JSON/XML representations<br>&gt;&gt;&gt;&gt;&gt; - Custom/specific assignment operator for Decoder to capture desired type without requiring said type to be specified in decode(type:forKey:) calls<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -DW<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; There’s no question that we can improve Coding for Swift. I have actually explored this area quite a bit although I don’t have anything planned for Swift 3 at this time.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The general point is though, that we can do it by extending Foundation in that direction over time. In fact, keyed archiving is the perfect example of how we were able to do just that in the past in Objective-C. NSArchiver already existed and served a particular purpose, so we extended the concept into NSKeyedArchiver using the facilities available to us at the time.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It’s not a goal to rewrite Foundation from scratch in Swift. All Swift apps that are running out there today are in fact using a combination of Swift, Objective-C, C, C++, various flavors of assembly, and more. The goal is to present the existing API of Foundation in a way that fits in with the language today while allowing us to iteratively improve it over time.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On May 6, 2016, at 2:52 PM, Tony Parker via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Hi everyone,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Thanks to all of you for your feedback on SE-0069 (Foundation Value Types). I’m back again with more information on another part of our plan to integrate Foundation API into Swift: dropping the NS prefix.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; When we originally proposed this as part of the API guidelines document (SE-0023, https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md), we took a very broad approach to which classes would drop their prefix. This time, we’ve narrowed the scope considerably, plus taken advantage of the ability to nest types inside classes to further reduce the possibility of introducing conflicting names.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I’ve written up a draft of the proposal, which includes an extensive section on motivation plus a list of changes. Please take a look and let me know what you think. We’ll start a formal review period soon.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; https://github.com/parkera/swift-evolution/blob/parkera/drop_ns/proposals/NNNN-drop-foundation-ns.md<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Thanks again for your help,<br>&gt;&gt;&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160507/3d61bbf1/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Dropping NS Prefix in Foundation</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>May  7, 2016 at 09:00:00am</p></header><div class="content"><p>Hi David,<br></p><p>&gt; On May 7, 2016, at 3:03 AM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; <br>&gt; Hi Tony,<br>&gt; <br>&gt; I&#39;m very positive about the proposal but I have similar fears, even if less strong, to David Waite. I agree that the core libraries can be improved with time, but it&#39;s going to be difficult to rethink them profoundly. NSKeyedArchiver was an improvement, but a fairly mild one, to stay backwards-compatible. It&#39;s going to be difficult to introduce major changes, like the ones David Waite gave as example, post Swift 3.<br></p><p>&gt; <br>&gt; But on a more pragmatic level, I know there is not much we can do about it, with the current deadlines. All we can hope for is make corelibs-foundation as Swifty as possible by the time Swift 3 comes out. And I imagine that third party libraries will come to replace the aspects of it that feel too alien to Swift.<br>&gt; <br>&gt; Any thoughts?<br>&gt; <br></p><p>I’m confident we can still introduce major changes if and when we need to. The value types stuff is a pretty major change, and we are able to find a way to introduce it in the 3rd major version of Swift instead of having to do it in the 1st. I see future improvements the same way. We may not even know right now what the most important improvement to Foundation is to make it fit in with Swift 4 or Swift 5. That is why I’m focusing on improving what we have so that we can iterate and improve alongside the language itself.<br></p><p>- Tony<br></p><p>&gt; David (Hart).<br>&gt; <br>&gt; On 07 May 2016, at 00:06, Tony Parker via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Hi David,<br>&gt;&gt; <br>&gt;&gt;&gt; On May 6, 2016, at 2:56 PM, David Waite &lt;david at alkaline-solutions.com &lt;mailto:david at alkaline-solutions.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -1 On the group as-is. I do not believe all of these classes have the behavior that would be expected if ‘foundation’ were a from-scratch foundational library for Swift (as it exists on non Apple platforms). This will lock Swift into an evolutionary path for these types going forward.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There is enough here that I will just pick one example to focus on - NSCoding/NSCoder, and elements I would suspect from such a from-scratch design<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Coding would incorporate SecureCoding into its design (I did not see NSSecureCoding even on the list of protocols to get the prefix dropped)<br>&gt;&gt; <br>&gt;&gt; SecureCoding should be on the list actually.<br>&gt;&gt; <br>&gt;&gt;&gt; - Archiver/Unarchiver would not exist; we would only have keyed versions<br>&gt;&gt;&gt; - Coder would be a split in half to Coder and Decoder<br>&gt;&gt;&gt; - Coder and Decoder would be protocols<br>&gt;&gt;&gt; - The Coder protocol might have a single method, encode(value:Coding, forKey:String)<br>&gt;&gt;&gt; - The Decoder protocol might single method, &lt;T:Coding&gt; decode(type:T.Type, forKey: String) -&gt; T?<br>&gt;&gt;&gt; - Compiler generation of a default Coding implementation<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And possibly more such as:<br>&gt;&gt;&gt; - Add Coders limited to trees of objects vs graphs, to allow the Coder/Decoder protocols to be used for more intuitive JSON/XML representations<br>&gt;&gt;&gt; - Custom/specific assignment operator for Decoder to capture desired type without requiring said type to be specified in decode(type:forKey:) calls<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -DW<br>&gt;&gt; <br>&gt;&gt; There’s no question that we can improve Coding for Swift. I have actually explored this area quite a bit although I don’t have anything planned for Swift 3 at this time.<br>&gt;&gt; <br>&gt;&gt; The general point is though, that we can do it by extending Foundation in that direction over time. In fact, keyed archiving is the perfect example of how we were able to do just that in the past in Objective-C. NSArchiver already existed and served a particular purpose, so we extended the concept into NSKeyedArchiver using the facilities available to us at the time.<br>&gt;&gt; <br>&gt;&gt; It’s not a goal to rewrite Foundation from scratch in Swift. All Swift apps that are running out there today are in fact using a combination of Swift, Objective-C, C, C++, various flavors of assembly, and more. The goal is to present the existing API of Foundation in a way that fits in with the language today while allowing us to iteratively improve it over time.<br>&gt;&gt; <br>&gt;&gt; - Tony<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 6, 2016, at 2:52 PM, Tony Parker via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi everyone,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks to all of you for your feedback on SE-0069 (Foundation Value Types). I’m back again with more information on another part of our plan to integrate Foundation API into Swift: dropping the NS prefix.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; When we originally proposed this as part of the API guidelines document (SE-0023, https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md&gt;), we took a very broad approach to which classes would drop their prefix. This time, we’ve narrowed the scope considerably, plus taken advantage of the ability to nest types inside classes to further reduce the possibility of introducing conflicting names.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’ve written up a draft of the proposal, which includes an extensive section on motivation plus a list of changes. Please take a look and let me know what you think. We’ll start a formal review period soon.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://github.com/parkera/swift-evolution/blob/parkera/drop_ns/proposals/NNNN-drop-foundation-ns.md &lt;https://github.com/parkera/swift-evolution/blob/parkera/drop_ns/proposals/NNNN-drop-foundation-ns.md&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks again for your help,<br>&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160507/3650323e/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>Dropping NS Prefix in Foundation</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>May  7, 2016 at 12:00:00pm</p></header><div class="content"><p>On May 6, 2016, at 5:06 PM, Tony Parker via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi David,<br>&gt; <br>&gt;&gt; On May 6, 2016, at 2:56 PM, David Waite &lt;david at alkaline-solutions.com &lt;mailto:david at alkaline-solutions.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; -1 On the group as-is. I do not believe all of these classes have the behavior that would be expected if ‘foundation’ were a from-scratch foundational library for Swift (as it exists on non Apple platforms). This will lock Swift into an evolutionary path for these types going forward.<br>&gt;&gt; <br>&gt;&gt; There is enough here that I will just pick one example to focus on - NSCoding/NSCoder, and elements I would suspect from such a from-scratch design<br>&gt;&gt; <br>&gt;&gt; - Coding would incorporate SecureCoding into its design (I did not see NSSecureCoding even on the list of protocols to get the prefix dropped)<br>&gt; <br>&gt; SecureCoding should be on the list actually.<br>&gt; <br>&gt;&gt; - Archiver/Unarchiver would not exist; we would only have keyed versions<br>&gt;&gt; - Coder would be a split in half to Coder and Decoder<br>&gt;&gt; - Coder and Decoder would be protocols<br>&gt;&gt; - The Coder protocol might have a single method, encode(value:Coding, forKey:String)<br>&gt;&gt; - The Decoder protocol might single method, &lt;T:Coding&gt; decode(type:T.Type, forKey: String) -&gt; T?<br>&gt;&gt; - Compiler generation of a default Coding implementation<br>&gt;&gt; <br>&gt;&gt; And possibly more such as:<br>&gt;&gt; - Add Coders limited to trees of objects vs graphs, to allow the Coder/Decoder protocols to be used for more intuitive JSON/XML representations<br>&gt;&gt; - Custom/specific assignment operator for Decoder to capture desired type without requiring said type to be specified in decode(type:forKey:) calls<br>&gt;&gt; <br>&gt;&gt; -DW<br>&gt; <br>&gt; There’s no question that we can improve Coding for Swift. I have actually explored this area quite a bit although I don’t have anything planned for Swift 3 at this time.<br>&gt; <br>&gt; The general point is though, that we can do it by extending Foundation in that direction over time. In fact, keyed archiving is the perfect example of how we were able to do just that in the past in Objective-C. NSArchiver already existed and served a particular purpose, so we extended the concept into NSKeyedArchiver using the facilities available to us at the time.<br>&gt; <br>&gt; It’s not a goal to rewrite Foundation from scratch in Swift. All Swift apps that are running out there today are in fact using a combination of Swift, Objective-C, C, C++, various flavors of assembly, and more. The goal is to present the existing API of Foundation in a way that fits in with the language today while allowing us to iteratively improve it over time.<br>&gt; <br>&gt; - Tony<br></p><p>The trouble with (NS)Coding is that due to the legacy cruft, you have to consider the possibility that the coder sent to your -initWithCoder: and similar methods could be insecure coders and/or non-keyed coders, and either support each branch (making your method three times as long as it needs to be), or add code to error out if you get one of the legacy coder types.<br></p><p>A brand new coding mechanism, built from scratch, would be kind of refreshing in that regard.<br></p><p>Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160507/43f12f84/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>Dropping NS Prefix in Foundation</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>May  8, 2016 at 01:00:00am</p></header><div class="content"><p>&gt; It’s not a goal to rewrite Foundation from scratch in Swift. All Swift apps that are running out there today are in fact using a combination of Swift, Objective-C, C, C++, various flavors of assembly, and more. The goal is to present the existing API of Foundation in a way that fits in with the language today while allowing us to iteratively improve it over time.<br></p><p>Perhaps my concern is a higher level - I don’t understand where Foundation is envisioned going.<br></p><p>From my perspective, Foundation is highly coupled to Apple platforms and Objective-C on one side, and part of the Swift standard library on the other. Perhaps long-term Foundation should be split into two new things - a core library for cross-platform swift development, and the infrastructure for Objective-C interoperability on apple platforms only.<br></p><p>-DW<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160508/0347532f/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: signature.asc<br>Type: application/pgp-signature<br>Size: 496 bytes<br>Desc: Message signed with OpenPGP using GPGMail<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160508/0347532f/attachment.sig&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2b74cd4039f0c53145a186868ab569c0?s=50"></div><header><strong>Dropping NS Prefix in Foundation</strong> from <string>Josh Parmenter</string> &lt;jparmenter at vectorform.com&gt;<p>May  8, 2016 at 03:00:00pm</p></header><div class="content"><p>David has articulated what I couldn&#39;t quite put my finger on, and I agree.<br>This also comes around to something I probably missed elsewhere in the discussion- but is the proposal to make NS classes just look like thus don&#39;t have NS in Swift? Or is it to write Swift versions of those classes that duplicate the functionality of those classes in Swift (for instance, giving String the full interface of NSString without actually having it call into NSString obj-c code?).<br>I tried glancing through the discussion and couldn&#39;t really find an answer to this (though I did it quickly, so my apologies if this is an obvious question that has already been answered).<br>Best<br>Josh<br></p><p>Sent from my iPhone<br></p><p>On May 8, 2016, at 00:41, David Waite via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>It&#39;s not a goal to rewrite Foundation from scratch in Swift. All Swift apps that are running out there today are in fact using a combination of Swift, Objective-C, C, C++, various flavors of assembly, and more. The goal is to present the existing API of Foundation in a way that fits in with the language today while allowing us to iteratively improve it over time.<br></p><p>Perhaps my concern is a higher level - I don&#39;t understand where Foundation is envisioned going.<br></p><p>&gt;From my perspective, Foundation is highly coupled to Apple platforms and Objective-C on one side, and part of the Swift standard library on the other. Perhaps long-term Foundation should be split into two new things - a core library for cross-platform swift development, and the infrastructure for Objective-C interoperability on apple platforms only.<br></p><p>-DW<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b0a7b39c65a0f7e24adf8047141b2227?s=50"></div><header><strong>Dropping NS Prefix in Foundation</strong> from <string>Michael Sheaver</string> &lt;msheaver at me.com&gt;<p>May  8, 2016 at 01:00:00pm</p></header><div class="content"><p>Foundation is indeed tightly coupled with the Apple ecosystem; however with the movement to open source, I think we are approaching a fork in the <br>road regarding this discussion. Like David articulated, Foundation either will need to her decoupled from its Apple historical roots or a parallel non-Apple Foundation will need to be developed. We all know how difficult and painful it is to maintain two different code sets that do mostly the same thing. My humble recommendation is that we start looking at decoupling foundation from its roots and a good first step would be to remove the NS- prefix. This change would do many positive things, including alerting developers that change is coming.<br></p><p>A long-term concern that I have is that if you do not begin the enormous task of at least beginning to remove Apple-centric dependencies, then sometime down the road someone outside the Apple environment will fork Swift and take it in ways out of our control.<br></p><p>In short, I am in favor of at least beginning the move toward removing NS- from Foundation.<br></p><p>&gt; On May 8, 2016, at 11:16 AM, Josh Parmenter via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; David has articulated what I couldn&#39;t quite put my finger on, and I agree.<br>&gt; This also comes around to something I probably missed elsewhere in the discussion- but is the proposal to make NS classes just look like thus don&#39;t have NS in Swift? Or is it to write Swift versions of those classes that duplicate the functionality of those classes in Swift (for instance, giving String the full interface of NSString without actually having it call into NSString obj-c code?).<br>&gt; I tried glancing through the discussion and couldn&#39;t really find an answer to this (though I did it quickly, so my apologies if this is an obvious question that has already been answered).<br>&gt; Best<br>&gt; Josh<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On May 8, 2016, at 00:41, David Waite via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; It&#39;s not a goal to rewrite Foundation from scratch in Swift. All Swift apps that are running out there today are in fact using a combination of Swift, Objective-C, C, C++, various flavors of assembly, and more. The goal is to present the existing API of Foundation in a way that fits in with the language today while allowing us to iteratively improve it over time.<br>&gt; <br>&gt; Perhaps my concern is a higher level - I don&#39;t understand where Foundation is envisioned going.<br>&gt; <br>&gt; From my perspective, Foundation is highly coupled to Apple platforms and Objective-C on one side, and part of the Swift standard library on the other. Perhaps long-term Foundation should be split into two new things - a core library for cross-platform swift development, and the infrastructure for Objective-C interoperability on apple platforms only.<br>&gt; <br>&gt; -DW<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160508/c8b104ad/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: smime.p7s<br>Type: application/pkcs7-signature<br>Size: 1799 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160508/c8b104ad/attachment.p7s&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>Dropping NS Prefix in Foundation</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>May  9, 2016 at 02:00:00pm</p></header><div class="content"><p>But if the NS- prefix is removed now, then it will make it more painful to have breaking changes down the road. I’d prefer to see breaking changes happen and the introduction of new completely modern APIs. Even just protocols that the NS- Foundation can implement.<br></p><p>Say for example, a FileReferenceProtocol and a URLProtocol, where NSURL could conform to both, but a modern implementation could have two separate concrete struct types. Maybe that’s not feasible.<br></p><p>It’s just a shame to say ‘goodbye Objective-C, hello Swift clean slate’, and then bring Foundation along for the ride as a core part for writing new modern applications.<br></p><p>It would be great in my mind to have a plan to transition to a modern ‘Foundation 2.0’. Say made using Swift 4.0 and its possible concurrency operators. I think that would be the time to drop the NS- prefixes.<br></p><p>&gt; On 9 May 2016, at 3:09 AM, Michael Sheaver via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Foundation is indeed tightly coupled with the Apple ecosystem; however with the movement to open source, I think we are approaching a fork in the <br>&gt; road regarding this discussion. Like David articulated, Foundation either will need to her decoupled from its Apple historical roots or a parallel non-Apple Foundation will need to be developed. We all know how difficult and painful it is to maintain two different code sets that do mostly the same thing. My humble recommendation is that we start looking at decoupling foundation from its roots and a good first step would be to remove the NS- prefix. This change would do many positive things, including alerting developers that change is coming.<br>&gt; <br>&gt; A long-term concern that I have is that if you do not begin the enormous task of at least beginning to remove Apple-centric dependencies, then sometime down the road someone outside the Apple environment will fork Swift and take it in ways out of our control.<br>&gt; <br>&gt; In short, I am in favor of at least beginning the move toward removing NS- from Foundation.<br>&gt; <br>&gt;&gt; On May 8, 2016, at 11:16 AM, Josh Parmenter via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; David has articulated what I couldn&#39;t quite put my finger on, and I agree.<br>&gt;&gt; This also comes around to something I probably missed elsewhere in the discussion- but is the proposal to make NS classes just look like thus don&#39;t have NS in Swift? Or is it to write Swift versions of those classes that duplicate the functionality of those classes in Swift (for instance, giving String the full interface of NSString without actually having it call into NSString obj-c code?).<br>&gt;&gt; I tried glancing through the discussion and couldn&#39;t really find an answer to this (though I did it quickly, so my apologies if this is an obvious question that has already been answered).<br>&gt;&gt; Best<br>&gt;&gt; Josh<br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt; On May 8, 2016, at 00:41, David Waite via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; It&#39;s not a goal to rewrite Foundation from scratch in Swift. All Swift apps that are running out there today are in fact using a combination of Swift, Objective-C, C, C++, various flavors of assembly, and more. The goal is to present the existing API of Foundation in a way that fits in with the language today while allowing us to iteratively improve it over time.<br>&gt;&gt; <br>&gt;&gt; Perhaps my concern is a higher level - I don&#39;t understand where Foundation is envisioned going.<br>&gt;&gt; <br>&gt;&gt; From my perspective, Foundation is highly coupled to Apple platforms and Objective-C on one side, and part of the Swift standard library on the other. Perhaps long-term Foundation should be split into two new things - a core library for cross-platform swift development, and the infrastructure for Objective-C interoperability on apple platforms only.<br>&gt;&gt; <br>&gt;&gt; -DW<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160509/0f016c6a/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Dropping NS Prefix in Foundation</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May  9, 2016 at 05:00:00am</p></header><div class="content"><p>I&#39;m +1 for this proposal. It is, IMO, a sensible way to evolve the current<br>situation to provide for a nicer experience.<br></p><p>As far as I can tell, arguments against the proposal argue for the<br>elimination of Foundation and a totally new set of Swift-native facilities,<br>which unless I&#39;m mistaken is not at all on the roadmap. I just cannot agree<br>that a superior alternative to this proposal is &quot;wait for Swift 4.&quot; Why<br>stop there? I hear Swift 9 is going to be pretty great...<br>On Sun, May 8, 2016 at 11:24 PM Patrick Smith via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; But if the NS- prefix is removed now, then it will make it more painful to<br>&gt; have breaking changes down the road. I’d prefer to see breaking changes<br>&gt; happen and the introduction of new completely modern APIs. Even just<br>&gt; protocols that the NS- Foundation can implement.<br>&gt;<br>&gt; Say for example, a FileReferenceProtocol and a URLProtocol, where NSURL<br>&gt; could conform to both, but a modern implementation could have two separate<br>&gt; concrete struct types. Maybe that’s not feasible.<br>&gt;<br>&gt; It’s just a shame to say ‘goodbye Objective-C, hello Swift clean slate’,<br>&gt; and then bring Foundation along for the ride as a core part for writing new<br>&gt; modern applications.<br>&gt;<br>&gt; It would be great in my mind to have a plan to transition to a modern<br>&gt; ‘Foundation 2.0’. Say made using Swift 4.0 and its possible concurrency<br>&gt; operators. I think that would be the time to drop the NS- prefixes.<br>&gt;<br>&gt; On 9 May 2016, at 3:09 AM, Michael Sheaver via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Foundation is indeed tightly coupled with the Apple ecosystem; however<br>&gt; with the movement to open source, I think we are approaching a fork in the<br>&gt; road regarding this discussion. Like David articulated, Foundation either<br>&gt; will need to her decoupled from its Apple historical roots or a parallel<br>&gt; non-Apple Foundation will need to be developed. We all know how difficult<br>&gt; and painful it is to maintain two different code sets that do mostly the<br>&gt; same thing. My humble recommendation is that we start looking at decoupling<br>&gt; foundation from its roots and a good first step would be to remove the NS-<br>&gt; prefix. This change would do many positive things, including alerting<br>&gt; developers that change is coming.<br>&gt;<br>&gt; A long-term concern that I have is that if you do not begin the enormous<br>&gt; task of at least beginning to remove Apple-centric dependencies, then<br>&gt; sometime down the road someone outside the Apple environment will fork<br>&gt; Swift and take it in ways out of our control.<br>&gt;<br>&gt; In short, I am in favor of at least beginning the move toward removing NS-<br>&gt; from Foundation.<br>&gt;<br>&gt; On May 8, 2016, at 11:16 AM, Josh Parmenter via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; David has articulated what I couldn&#39;t quite put my finger on, and I agree.<br>&gt; This also comes around to something I probably missed elsewhere in the<br>&gt; discussion- but is the proposal to make NS classes just look like thus<br>&gt; don&#39;t have NS in Swift? Or is it to write Swift versions of those classes<br>&gt; that duplicate the functionality of those classes in Swift (for instance,<br>&gt; giving String the full interface of NSString without actually having it<br>&gt; call into NSString obj-c code?).<br>&gt; I tried glancing through the discussion and couldn&#39;t really find an answer<br>&gt; to this (though I did it quickly, so my apologies if this is an obvious<br>&gt; question that has already been answered).<br>&gt; Best<br>&gt; Josh<br>&gt;<br>&gt; Sent from my iPhone<br>&gt;<br>&gt; On May 8, 2016, at 00:41, David Waite via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org<br>&gt; &lt;swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt;<br>&gt; It&#39;s not a goal to rewrite Foundation from scratch in Swift. All Swift<br>&gt; apps that are running out there today are in fact using a combination of<br>&gt; Swift, Objective-C, C, C++, various flavors of assembly, and more. The goal<br>&gt; is to present the existing API of Foundation in a way that fits in with the<br>&gt; language today while allowing us to iteratively improve it over time.<br>&gt;<br>&gt; Perhaps my concern is a higher level - I don&#39;t understand where Foundation<br>&gt; is envisioned going.<br>&gt;<br>&gt; From my perspective, Foundation is highly coupled to Apple platforms and<br>&gt; Objective-C on one side, and part of the Swift standard library on the<br>&gt; other. Perhaps long-term Foundation should be split into two new things - a<br>&gt; core library for cross-platform swift development, and the infrastructure<br>&gt; for Objective-C interoperability on apple platforms only.<br>&gt;<br>&gt; -DW<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org<br>&gt; &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160509/ba98b3d7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>Dropping NS Prefix in Foundation</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>May  9, 2016 at 05:00:00pm</p></header><div class="content"><p>My point isn’t about what Swift 4 could be, but a timeline for something new to be made. Swift 3 is almost here. Personally I think Foundation, while venerable for its time, is a poor fit for the new world of Swift. Anyway, I’ll let the others speak as they had valid arguments.<br></p><p>&gt; On 9 May 2016, at 3:40 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; I&#39;m +1 for this proposal. It is, IMO, a sensible way to evolve the current situation to provide for a nicer experience.<br>&gt; <br>&gt; As far as I can tell, arguments against the proposal argue for the elimination of Foundation and a totally new set of Swift-native facilities, which unless I&#39;m mistaken is not at all on the roadmap. I just cannot agree that a superior alternative to this proposal is &quot;wait for Swift 4.&quot; Why stop there? I hear Swift 9 is going to be pretty great...<br>&gt; On Sun, May 8, 2016 at 11:24 PM Patrick Smith via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; But if the NS- prefix is removed now, then it will make it more painful to have breaking changes down the road. I’d prefer to see breaking changes happen and the introduction of new completely modern APIs. Even just protocols that the NS- Foundation can implement.<br>&gt; <br>&gt; Say for example, a FileReferenceProtocol and a URLProtocol, where NSURL could conform to both, but a modern implementation could have two separate concrete struct types. Maybe that’s not feasible.<br>&gt; <br>&gt; It’s just a shame to say ‘goodbye Objective-C, hello Swift clean slate’, and then bring Foundation along for the ride as a core part for writing new modern applications.<br>&gt; <br>&gt; It would be great in my mind to have a plan to transition to a modern ‘Foundation 2.0’. Say made using Swift 4.0 and its possible concurrency operators. I think that would be the time to drop the NS- prefixes.<br>&gt; <br>&gt;&gt; On 9 May 2016, at 3:09 AM, Michael Sheaver via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Foundation is indeed tightly coupled with the Apple ecosystem; however with the movement to open source, I think we are approaching a fork in the <br>&gt;&gt; road regarding this discussion. Like David articulated, Foundation either will need to her decoupled from its Apple historical roots or a parallel non-Apple Foundation will need to be developed. We all know how difficult and painful it is to maintain two different code sets that do mostly the same thing. My humble recommendation is that we start looking at decoupling foundation from its roots and a good first step would be to remove the NS- prefix. This change would do many positive things, including alerting developers that change is coming.<br>&gt;&gt; <br>&gt;&gt; A long-term concern that I have is that if you do not begin the enormous task of at least beginning to remove Apple-centric dependencies, then sometime down the road someone outside the Apple environment will fork Swift and take it in ways out of our control.<br>&gt;&gt; <br>&gt;&gt; In short, I am in favor of at least beginning the move toward removing NS- from Foundation.<br>&gt;&gt; <br>&gt;&gt;&gt; On May 8, 2016, at 11:16 AM, Josh Parmenter via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; David has articulated what I couldn&#39;t quite put my finger on, and I agree.<br>&gt;&gt;&gt; This also comes around to something I probably missed elsewhere in the discussion- but is the proposal to make NS classes just look like thus don&#39;t have NS in Swift? Or is it to write Swift versions of those classes that duplicate the functionality of those classes in Swift (for instance, giving String the full interface of NSString without actually having it call into NSString obj-c code?).<br>&gt;&gt;&gt; I tried glancing through the discussion and couldn&#39;t really find an answer to this (though I did it quickly, so my apologies if this is an obvious question that has already been answered).<br>&gt;&gt;&gt; Best<br>&gt;&gt;&gt; Josh<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On May 8, 2016, at 00:41, David Waite via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It&#39;s not a goal to rewrite Foundation from scratch in Swift. All Swift apps that are running out there today are in fact using a combination of Swift, Objective-C, C, C++, various flavors of assembly, and more. The goal is to present the existing API of Foundation in a way that fits in with the language today while allowing us to iteratively improve it over time.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Perhaps my concern is a higher level - I don&#39;t understand where Foundation is envisioned going.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; From my perspective, Foundation is highly coupled to Apple platforms and Objective-C on one side, and part of the Swift standard library on the other. Perhaps long-term Foundation should be split into two new things - a core library for cross-platform swift development, and the infrastructure for Objective-C interoperability on apple platforms only.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -DW<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160509/716802b8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Dropping NS Prefix in Foundation</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May  9, 2016 at 03:00:00am</p></header><div class="content"><p>On Mon, May 9, 2016 at 2:47 AM, Patrick Smith &lt;pgwsmith at gmail.com&gt; wrote:<br></p><p>&gt; My point isn’t about what Swift 4 could be, but a timeline for something<br>&gt; new to be made. Swift 3 is almost here. Personally I think Foundation,<br>&gt; while venerable for its time, is a poor fit for the new world of Swift.<br>&gt; Anyway, I’ll let the others speak as they had valid arguments.<br>&gt;<br></p><p>I don&#39;t disagree with you that Foundation is venerable and a little out of<br>place. I just think some future replacement for Foundation is entirely<br>orthogonal to proposals about present-day improvements that improve it.<br></p><p>And please don&#39;t take my comments to be calling you out specifically; you<br>happened to be the most recent person to mention a future version of Swift,<br>but in earlier comments there are mentions of Swift 5 or Swift 6 being the<br>point at which language facilities will permit a pure Swift replacement for<br>Foundation. Let&#39;s say one of those Swift 6 features then slips to Swift 7,<br>after which we finally start work on NewFoundation, to be shipped with<br>Swift 8. Now the year is 2021 and we&#39;ve already colonized Mars...<br></p><p>On 9 May 2016, at 3:40 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; I&#39;m +1 for this proposal. It is, IMO, a sensible way to evolve the current<br>&gt; situation to provide for a nicer experience.<br>&gt;<br>&gt; As far as I can tell, arguments against the proposal argue for the<br>&gt; elimination of Foundation and a totally new set of Swift-native facilities,<br>&gt; which unless I&#39;m mistaken is not at all on the roadmap. I just cannot agree<br>&gt; that a superior alternative to this proposal is &quot;wait for Swift 4.&quot; Why<br>&gt; stop there? I hear Swift 9 is going to be pretty great...<br>&gt; On Sun, May 8, 2016 at 11:24 PM Patrick Smith via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; But if the NS- prefix is removed now, then it will make it more painful<br>&gt;&gt; to have breaking changes down the road. I’d prefer to see breaking changes<br>&gt;&gt; happen and the introduction of new completely modern APIs. Even just<br>&gt;&gt; protocols that the NS- Foundation can implement.<br>&gt;&gt;<br>&gt;&gt; Say for example, a FileReferenceProtocol and a URLProtocol, where NSURL<br>&gt;&gt; could conform to both, but a modern implementation could have two separate<br>&gt;&gt; concrete struct types. Maybe that’s not feasible.<br>&gt;&gt;<br>&gt;&gt; It’s just a shame to say ‘goodbye Objective-C, hello Swift clean slate’,<br>&gt;&gt; and then bring Foundation along for the ride as a core part for writing new<br>&gt;&gt; modern applications.<br>&gt;&gt;<br>&gt;&gt; It would be great in my mind to have a plan to transition to a modern<br>&gt;&gt; ‘Foundation 2.0’. Say made using Swift 4.0 and its possible concurrency<br>&gt;&gt; operators. I think that would be the time to drop the NS- prefixes.<br>&gt;&gt;<br>&gt;&gt; On 9 May 2016, at 3:09 AM, Michael Sheaver via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Foundation is indeed tightly coupled with the Apple ecosystem; however<br>&gt;&gt; with the movement to open source, I think we are approaching a fork in the<br>&gt;&gt; road regarding this discussion. Like David articulated, Foundation either<br>&gt;&gt; will need to her decoupled from its Apple historical roots or a parallel<br>&gt;&gt; non-Apple Foundation will need to be developed. We all know how difficult<br>&gt;&gt; and painful it is to maintain two different code sets that do mostly the<br>&gt;&gt; same thing. My humble recommendation is that we start looking at decoupling<br>&gt;&gt; foundation from its roots and a good first step would be to remove the NS-<br>&gt;&gt; prefix. This change would do many positive things, including alerting<br>&gt;&gt; developers that change is coming.<br>&gt;&gt;<br>&gt;&gt; A long-term concern that I have is that if you do not begin the enormous<br>&gt;&gt; task of at least beginning to remove Apple-centric dependencies, then<br>&gt;&gt; sometime down the road someone outside the Apple environment will fork<br>&gt;&gt; Swift and take it in ways out of our control.<br>&gt;&gt;<br>&gt;&gt; In short, I am in favor of at least beginning the move toward removing<br>&gt;&gt; NS- from Foundation.<br>&gt;&gt;<br>&gt;&gt; On May 8, 2016, at 11:16 AM, Josh Parmenter via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; David has articulated what I couldn&#39;t quite put my finger on, and I agree.<br>&gt;&gt; This also comes around to something I probably missed elsewhere in the<br>&gt;&gt; discussion- but is the proposal to make NS classes just look like thus<br>&gt;&gt; don&#39;t have NS in Swift? Or is it to write Swift versions of those classes<br>&gt;&gt; that duplicate the functionality of those classes in Swift (for instance,<br>&gt;&gt; giving String the full interface of NSString without actually having it<br>&gt;&gt; call into NSString obj-c code?).<br>&gt;&gt; I tried glancing through the discussion and couldn&#39;t really find an<br>&gt;&gt; answer to this (though I did it quickly, so my apologies if this is an<br>&gt;&gt; obvious question that has already been answered).<br>&gt;&gt; Best<br>&gt;&gt; Josh<br>&gt;&gt;<br>&gt;&gt; Sent from my iPhone<br>&gt;&gt;<br>&gt;&gt; On May 8, 2016, at 00:41, David Waite via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org<br>&gt;&gt; &lt;swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; It&#39;s not a goal to rewrite Foundation from scratch in Swift. All Swift<br>&gt;&gt; apps that are running out there today are in fact using a combination of<br>&gt;&gt; Swift, Objective-C, C, C++, various flavors of assembly, and more. The goal<br>&gt;&gt; is to present the existing API of Foundation in a way that fits in with the<br>&gt;&gt; language today while allowing us to iteratively improve it over time.<br>&gt;&gt;<br>&gt;&gt; Perhaps my concern is a higher level - I don&#39;t understand where<br>&gt;&gt; Foundation is envisioned going.<br>&gt;&gt;<br>&gt;&gt; From my perspective, Foundation is highly coupled to Apple platforms and<br>&gt;&gt; Objective-C on one side, and part of the Swift standard library on the<br>&gt;&gt; other. Perhaps long-term Foundation should be split into two new things - a<br>&gt;&gt; core library for cross-platform swift development, and the infrastructure<br>&gt;&gt; for Objective-C interoperability on apple platforms only.<br>&gt;&gt;<br>&gt;&gt; -DW<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org<br>&gt;&gt; &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160509/20dadece/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e9b374b9587bd8da1a1a027c8716ac0d?s=50"></div><header><strong>Dropping NS Prefix in Foundation</strong> from <string>Rod Brown</string> &lt;rodney.brown6 at icloud.com&gt;<p>May  7, 2016 at 08:00:00am</p></header><div class="content"><p>I am definitely +1 to this proposal direction<br></p><p>I was in the crowd thinking &quot;don&#39;t drop the NS on types that should be value types&quot; but I think you make fair points that there can be planned optimizations in the future, and we should focus on getting a good set of naming rules in place. You make decent rules about how to migrate going forward.<br></p><p>I&#39;m definitely in favor of the hoisted types, enum updates etc.<br></p><p>I found it interesting that NSOrderedSet has been left out of this proposal. Is there any reason for this? I only thought about it in regard to the previous mention a few days ago heh.<br></p><p>Thanks Tony for pushing this forward.<br></p><p>- Rod<br></p><p>&gt; On 7 May 2016, at 6:52 AM, Tony Parker via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi everyone,<br>&gt; <br>&gt; Thanks to all of you for your feedback on SE-0069 (Foundation Value Types). I’m back again with more information on another part of our plan to integrate Foundation API into Swift: dropping the NS prefix.<br>&gt; <br>&gt; When we originally proposed this as part of the API guidelines document (SE-0023, https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md), we took a very broad approach to which classes would drop their prefix. This time, we’ve narrowed the scope considerably, plus taken advantage of the ability to nest types inside classes to further reduce the possibility of introducing conflicting names.<br>&gt; <br>&gt; I’ve written up a draft of the proposal, which includes an extensive section on motivation plus a list of changes. Please take a look and let me know what you think. We’ll start a formal review period soon.<br>&gt; <br>&gt; https://github.com/parkera/swift-evolution/blob/parkera/drop_ns/proposals/NNNN-drop-foundation-ns.md<br>&gt; <br>&gt; Thanks again for your help,<br>&gt; - Tony<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Dropping NS Prefix in Foundation</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>May  9, 2016 at 11:00:00am</p></header><div class="content"><p>I have mixed feelings about this; while I agree that prefixing names isn’t a good fit for Swift, at the same time that’s kind of the appeal of it. Assuming that Foundation will eventually be replaced by a more Swift-like alternative, or will be incrementally reworked, I think it makes sense for it to feel a little weird to use as it is right now.<br></p><p>The NS prefix makes it clear that this is something different, something not originally designed with Swift in mind, and in a way that’s a good thing. I know in my own case it makes me instinctively shy away from it, and actually encourages me to wrap NS constructs in something more Swift-like for convenience.<br></p><p>&gt; On 6 May 2016, at 21:52, Tony Parker via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi everyone,<br>&gt; <br>&gt; Thanks to all of you for your feedback on SE-0069 (Foundation Value Types). I’m back again with more information on another part of our plan to integrate Foundation API into Swift: dropping the NS prefix.<br>&gt; <br>&gt; When we originally proposed this as part of the API guidelines document (SE-0023, https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md), we took a very broad approach to which classes would drop their prefix. This time, we’ve narrowed the scope considerably, plus taken advantage of the ability to nest types inside classes to further reduce the possibility of introducing conflicting names.<br>&gt; <br>&gt; I’ve written up a draft of the proposal, which includes an extensive section on motivation plus a list of changes. Please take a look and let me know what you think. We’ll start a formal review period soon.<br>&gt; <br>&gt; https://github.com/parkera/swift-evolution/blob/parkera/drop_ns/proposals/NNNN-drop-foundation-ns.md<br>&gt; <br>&gt; Thanks again for your help,<br>&gt; - Tony<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>Dropping NS Prefix in Foundation</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>May  9, 2016 at 09:00:00am</p></header><div class="content"><p>If I am coming to Swift as a new user (possibly as a first language, even) without any prior Objective-C experience and very little knowledge of the long history of Foundation, the NS prefix, etc, this is going to feel worse than a little out of place - it will feel downright wrong, broken, and confusing to see these weird NS prefixes on some seemingly “standard” classes and not on others.<br></p><p>I’m +1 for removing the NS and evolving forward from there - let’s not create a confusing tangle of old and new that is navigable only by those with knowledge of the esoteric.<br></p><p>l8r<br>Sean<br></p><p><br>&gt; On May 9, 2016, at 5:33 AM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I have mixed feelings about this; while I agree that prefixing names isn’t a good fit for Swift, at the same time that’s kind of the appeal of it. Assuming that Foundation will eventually be replaced by a more Swift-like alternative, or will be incrementally reworked, I think it makes sense for it to feel a little weird to use as it is right now.<br>&gt; <br>&gt; The NS prefix makes it clear that this is something different, something not originally designed with Swift in mind, and in a way that’s a good thing. I know in my own case it makes me instinctively shy away from it, and actually encourages me to wrap NS constructs in something more Swift-like for convenience.<br>&gt; <br>&gt;&gt; On 6 May 2016, at 21:52, Tony Parker via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi everyone,<br>&gt;&gt; <br>&gt;&gt; Thanks to all of you for your feedback on SE-0069 (Foundation Value Types). I’m back again with more information on another part of our plan to integrate Foundation API into Swift: dropping the NS prefix.<br>&gt;&gt; <br>&gt;&gt; When we originally proposed this as part of the API guidelines document (SE-0023, https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md), we took a very broad approach to which classes would drop their prefix. This time, we’ve narrowed the scope considerably, plus taken advantage of the ability to nest types inside classes to further reduce the possibility of introducing conflicting names.<br>&gt;&gt; <br>&gt;&gt; I’ve written up a draft of the proposal, which includes an extensive section on motivation plus a list of changes. Please take a look and let me know what you think. We’ll start a formal review period soon.<br>&gt;&gt; <br>&gt;&gt; https://github.com/parkera/swift-evolution/blob/parkera/drop_ns/proposals/NNNN-drop-foundation-ns.md<br>&gt;&gt; <br>&gt;&gt; Thanks again for your help,<br>&gt;&gt; - Tony<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76eb9711d45c1c9a71c0f24004072a22?s=50"></div><header><strong>Dropping NS Prefix in Foundation</strong> from <string>Zach Waldowski</string> &lt;zach at waldowski.me&gt;<p>May  9, 2016 at 11:00:00am</p></header><div class="content"><p>This is exactly the way I see it, too. Many people are coming to Swift<br>and immediately decrying the language because it doesn&#39;t have built-in<br>support for regex, date parsing, collections beyond the built-in 3,<br>etc., when it in fact has a rich tapestry of things from Foundation.<br></p><p>While I agree with many of the points made in the thread, I think we&#39;re<br>missing the forest for the trees. Foundation is the best at many of the<br>things it does on any platform. This is in spite of many of the points<br>made: it *has* an Objective-C API. It *is* coupled to Apple platforms.<br>It *does* have crufty edges.<br></p><p>Foundation not having a super-Swifty API is a solvable problem over<br>time, of which this is a first step down that road. Revamping the<br>Foundation API in the Swift 3 timeframe is not a solvable problem.<br></p><p>Cheers<br>  Zach Waldowski<br>  zach at waldowski.me<br></p><p>On Mon, May 9, 2016, at 10:42 AM, Sean Heber via swift-evolution wrote:<br>&gt; If I am coming to Swift as a new user (possibly as a first language,<br>&gt; even) without any prior Objective-C experience and very little knowledge<br>&gt; of the long history of Foundation, the NS prefix, etc, this is going to<br>&gt; feel worse than a little out of place - it will feel downright wrong,<br>&gt; broken, and confusing to see these weird NS prefixes on some seemingly<br>&gt; “standard” classes and not on others.<br>&gt; <br>&gt; I’m +1 for removing the NS and evolving forward from there - let’s not<br>&gt; create a confusing tangle of old and new that is navigable only by those<br>&gt; with knowledge of the esoteric.<br>&gt; <br>&gt; l8r<br>&gt; Sean<br>&gt; <br>&gt; <br>&gt; &gt; On May 9, 2016, at 5:33 AM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; I have mixed feelings about this; while I agree that prefixing names isn’t a good fit for Swift, at the same time that’s kind of the appeal of it. Assuming that Foundation will eventually be replaced by a more Swift-like alternative, or will be incrementally reworked, I think it makes sense for it to feel a little weird to use as it is right now.<br>&gt; &gt; <br>&gt; &gt; The NS prefix makes it clear that this is something different, something not originally designed with Swift in mind, and in a way that’s a good thing. I know in my own case it makes me instinctively shy away from it, and actually encourages me to wrap NS constructs in something more Swift-like for convenience.<br>&gt; &gt; <br>&gt; &gt;&gt; On 6 May 2016, at 21:52, Tony Parker via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; Hi everyone,<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; Thanks to all of you for your feedback on SE-0069 (Foundation Value Types). I’m back again with more information on another part of our plan to integrate Foundation API into Swift: dropping the NS prefix.<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; When we originally proposed this as part of the API guidelines document (SE-0023, https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md), we took a very broad approach to which classes would drop their prefix. This time, we’ve narrowed the scope considerably, plus taken advantage of the ability to nest types inside classes to further reduce the possibility of introducing conflicting names.<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; I’ve written up a draft of the proposal, which includes an extensive section on motivation plus a list of changes. Please take a look and let me know what you think. We’ll start a formal review period soon.<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; https://github.com/parkera/swift-evolution/blob/parkera/drop_ns/proposals/NNNN-drop-foundation-ns.md<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; Thanks again for your help,<br>&gt; &gt;&gt; - Tony<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; <br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Dropping NS Prefix in Foundation</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May  9, 2016 at 11:00:00am</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On May 9, 2016, at 10:49 AM, Zach Waldowski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; This is exactly the way I see it, too. Many people are coming to Swift<br>&gt; and immediately decrying the language because it doesn&#39;t have built-in<br>&gt; support for regex, date parsing, collections beyond the built-in 3,<br>&gt; etc., when it in fact has a rich tapestry of things from Foundation.<br>&gt; <br>&gt; While I agree with many of the points made in the thread, I think we&#39;re<br>&gt; missing the forest for the trees. Foundation is the best at many of the<br>&gt; things it does on any platform. This is in spite of many of the points<br>&gt; made: it *has* an Objective-C API. It *is* coupled to Apple platforms.<br>&gt; It *does* have crufty edges.<br>&gt; <br>&gt; Foundation not having a super-Swifty API is a solvable problem over<br>&gt; time, of which this is a first step down that road. Revamping the<br>&gt; Foundation API in the Swift 3 timeframe is not a solvable problem.<br></p><p>I agree with everything you say here.  My only concern is trying to ensure we don&#39;t take steps today that will make it difficult to implement the best design down the road.  <br></p><p>&gt; <br>&gt; Cheers<br>&gt;   Zach Waldowski<br>&gt;   zach at waldowski.me<br>&gt; <br>&gt;&gt; On Mon, May 9, 2016, at 10:42 AM, Sean Heber via swift-evolution wrote:<br>&gt;&gt; If I am coming to Swift as a new user (possibly as a first language,<br>&gt;&gt; even) without any prior Objective-C experience and very little knowledge<br>&gt;&gt; of the long history of Foundation, the NS prefix, etc, this is going to<br>&gt;&gt; feel worse than a little out of place - it will feel downright wrong,<br>&gt;&gt; broken, and confusing to see these weird NS prefixes on some seemingly<br>&gt;&gt; “standard” classes and not on others.<br>&gt;&gt; <br>&gt;&gt; I’m +1 for removing the NS and evolving forward from there - let’s not<br>&gt;&gt; create a confusing tangle of old and new that is navigable only by those<br>&gt;&gt; with knowledge of the esoteric.<br>&gt;&gt; <br>&gt;&gt; l8r<br>&gt;&gt; Sean<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 9, 2016, at 5:33 AM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I have mixed feelings about this; while I agree that prefixing names isn’t a good fit for Swift, at the same time that’s kind of the appeal of it. Assuming that Foundation will eventually be replaced by a more Swift-like alternative, or will be incrementally reworked, I think it makes sense for it to feel a little weird to use as it is right now.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The NS prefix makes it clear that this is something different, something not originally designed with Swift in mind, and in a way that’s a good thing. I know in my own case it makes me instinctively shy away from it, and actually encourages me to wrap NS constructs in something more Swift-like for convenience.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 6 May 2016, at 21:52, Tony Parker via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi everyone,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks to all of you for your feedback on SE-0069 (Foundation Value Types). I’m back again with more information on another part of our plan to integrate Foundation API into Swift: dropping the NS prefix.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; When we originally proposed this as part of the API guidelines document (SE-0023, https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md), we took a very broad approach to which classes would drop their prefix. This time, we’ve narrowed the scope considerably, plus taken advantage of the ability to nest types inside classes to further reduce the possibility of introducing conflicting names.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’ve written up a draft of the proposal, which includes an extensive section on motivation plus a list of changes. Please take a look and let me know what you think. We’ll start a formal review period soon.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://github.com/parkera/swift-evolution/blob/parkera/drop_ns/proposals/NNNN-drop-foundation-ns.md<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks again for your help,<br>&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Dropping NS Prefix in Foundation</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>May  9, 2016 at 09:00:00am</p></header><div class="content"><p>In addition to the points that have been raised, it&#39;s my opinion that some<br>of the stuff in Foundation should really be implemented in the stdlib in<br>the future (for example, collections that weakly reference their items, and<br>a native binary data blob type). The fact that the delineation between what<br>goes in the stdlib and what goes in Foundation is the result of historical<br>happenstance does not really sit well with me. I think that Foundation&#39;s<br>evolution should be done with this in mind, such that in the future certain<br>Foundation classes might be implemented as stubs built on top of native<br>data structures, with additional functionality for legacy compatibility<br>(sort of like how String works today).<br></p><p>Best,<br>Austin<br></p><p>On Mon, May 9, 2016 at 9:03 AM, Matthew Johnson via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt;<br>&gt; Sent from my iPad<br>&gt;<br>&gt; &gt; On May 9, 2016, at 10:49 AM, Zach Waldowski via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; This is exactly the way I see it, too. Many people are coming to Swift<br>&gt; &gt; and immediately decrying the language because it doesn&#39;t have built-in<br>&gt; &gt; support for regex, date parsing, collections beyond the built-in 3,<br>&gt; &gt; etc., when it in fact has a rich tapestry of things from Foundation.<br>&gt; &gt;<br>&gt; &gt; While I agree with many of the points made in the thread, I think we&#39;re<br>&gt; &gt; missing the forest for the trees. Foundation is the best at many of the<br>&gt; &gt; things it does on any platform. This is in spite of many of the points<br>&gt; &gt; made: it *has* an Objective-C API. It *is* coupled to Apple platforms.<br>&gt; &gt; It *does* have crufty edges.<br>&gt; &gt;<br>&gt; &gt; Foundation not having a super-Swifty API is a solvable problem over<br>&gt; &gt; time, of which this is a first step down that road. Revamping the<br>&gt; &gt; Foundation API in the Swift 3 timeframe is not a solvable problem.<br>&gt;<br>&gt; I agree with everything you say here.  My only concern is trying to ensure<br>&gt; we don&#39;t take steps today that will make it difficult to implement the best<br>&gt; design down the road.<br>&gt;<br>&gt; &gt;<br>&gt; &gt; Cheers<br>&gt; &gt;   Zach Waldowski<br>&gt; &gt;   zach at waldowski.me<br>&gt; &gt;<br>&gt; &gt;&gt; On Mon, May 9, 2016, at 10:42 AM, Sean Heber via swift-evolution wrote:<br>&gt; &gt;&gt; If I am coming to Swift as a new user (possibly as a first language,<br>&gt; &gt;&gt; even) without any prior Objective-C experience and very little knowledge<br>&gt; &gt;&gt; of the long history of Foundation, the NS prefix, etc, this is going to<br>&gt; &gt;&gt; feel worse than a little out of place - it will feel downright wrong,<br>&gt; &gt;&gt; broken, and confusing to see these weird NS prefixes on some seemingly<br>&gt; &gt;&gt; “standard” classes and not on others.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I’m +1 for removing the NS and evolving forward from there - let’s not<br>&gt; &gt;&gt; create a confusing tangle of old and new that is navigable only by those<br>&gt; &gt;&gt; with knowledge of the esoteric.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; l8r<br>&gt; &gt;&gt; Sean<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On May 9, 2016, at 5:33 AM, Haravikk via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; I have mixed feelings about this; while I agree that prefixing names<br>&gt; isn’t a good fit for Swift, at the same time that’s kind of the appeal of<br>&gt; it. Assuming that Foundation will eventually be replaced by a more<br>&gt; Swift-like alternative, or will be incrementally reworked, I think it makes<br>&gt; sense for it to feel a little weird to use as it is right now.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; The NS prefix makes it clear that this is something different,<br>&gt; something not originally designed with Swift in mind, and in a way that’s a<br>&gt; good thing. I know in my own case it makes me instinctively shy away from<br>&gt; it, and actually encourages me to wrap NS constructs in something more<br>&gt; Swift-like for convenience.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; On 6 May 2016, at 21:52, Tony Parker via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; Hi everyone,<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; Thanks to all of you for your feedback on SE-0069 (Foundation Value<br>&gt; Types). I’m back again with more information on another part of our plan to<br>&gt; integrate Foundation API into Swift: dropping the NS prefix.<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; When we originally proposed this as part of the API guidelines<br>&gt; document (SE-0023,<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md),<br>&gt; we took a very broad approach to which classes would drop their prefix.<br>&gt; This time, we’ve narrowed the scope considerably, plus taken advantage of<br>&gt; the ability to nest types inside classes to further reduce the possibility<br>&gt; of introducing conflicting names.<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; I’ve written up a draft of the proposal, which includes an extensive<br>&gt; section on motivation plus a list of changes. Please take a look and let me<br>&gt; know what you think. We’ll start a formal review period soon.<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; https://github.com/parkera/swift-evolution/blob/parkera/drop_ns/proposals/NNNN-drop-foundation-ns.md<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; Thanks again for your help,<br>&gt; &gt;&gt;&gt;&gt; - Tony<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160509/0387dc95/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Dropping NS Prefix in Foundation</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>May  9, 2016 at 10:00:00am</p></header><div class="content"><p>Hi Matthew (and others),<br></p><p>&gt; On May 9, 2016, at 9:03 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt;&gt; On May 9, 2016, at 10:49 AM, Zach Waldowski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; This is exactly the way I see it, too. Many people are coming to Swift<br>&gt;&gt; and immediately decrying the language because it doesn&#39;t have built-in<br>&gt;&gt; support for regex, date parsing, collections beyond the built-in 3,<br>&gt;&gt; etc., when it in fact has a rich tapestry of things from Foundation.<br>&gt;&gt; <br>&gt;&gt; While I agree with many of the points made in the thread, I think we&#39;re<br>&gt;&gt; missing the forest for the trees. Foundation is the best at many of the<br>&gt;&gt; things it does on any platform. This is in spite of many of the points<br>&gt;&gt; made: it *has* an Objective-C API. It *is* coupled to Apple platforms.<br>&gt;&gt; It *does* have crufty edges.<br>&gt;&gt; <br>&gt;&gt; Foundation not having a super-Swifty API is a solvable problem over<br>&gt;&gt; time, of which this is a first step down that road. Revamping the<br>&gt;&gt; Foundation API in the Swift 3 timeframe is not a solvable problem.<br>&gt; <br>&gt; I agree with everything you say here.  My only concern is trying to ensure we don&#39;t take steps today that will make it difficult to implement the best design down the road.  <br></p><p>It’s true that Foundation is the foundation of the Objective-C stack. However, while some see this as a weakness, I see it as a great opportunity. The role of this library puts it in a unique spot as a leverage point: low enough level to be used in nearly all applications on all platforms, but high enough level to establish API and patterns that you see across the SDK.<br></p><p>The idea of leaving existing API behind somehow by keeping the prefix means that the leverage would be gone. With all existing API in terms of those existing types, any new types are effectively unused in all API above Foundation. We would need to introduce conversion methods to move between the two types (if that is even possible).<br></p><p>If, instead, we evolve the existing API to be better for Swift, then we benefit the entire stack without having a boil-the-ocean type of adoption problem. Therefore, we have already made the decision that we are not going to invent an entirely new set of a fundamental types but to instead iteratively improve the API of the ones we have.<br></p><p>- Tony<br></p><p>&gt; <br>&gt;&gt; <br>&gt;&gt; Cheers<br>&gt;&gt;  Zach Waldowski<br>&gt;&gt;  zach at waldowski.me<br>&gt;&gt; <br>&gt;&gt;&gt; On Mon, May 9, 2016, at 10:42 AM, Sean Heber via swift-evolution wrote:<br>&gt;&gt;&gt; If I am coming to Swift as a new user (possibly as a first language,<br>&gt;&gt;&gt; even) without any prior Objective-C experience and very little knowledge<br>&gt;&gt;&gt; of the long history of Foundation, the NS prefix, etc, this is going to<br>&gt;&gt;&gt; feel worse than a little out of place - it will feel downright wrong,<br>&gt;&gt;&gt; broken, and confusing to see these weird NS prefixes on some seemingly<br>&gt;&gt;&gt; “standard” classes and not on others.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m +1 for removing the NS and evolving forward from there - let’s not<br>&gt;&gt;&gt; create a confusing tangle of old and new that is navigable only by those<br>&gt;&gt;&gt; with knowledge of the esoteric.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; l8r<br>&gt;&gt;&gt; Sean<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 9, 2016, at 5:33 AM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I have mixed feelings about this; while I agree that prefixing names isn’t a good fit for Swift, at the same time that’s kind of the appeal of it. Assuming that Foundation will eventually be replaced by a more Swift-like alternative, or will be incrementally reworked, I think it makes sense for it to feel a little weird to use as it is right now.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The NS prefix makes it clear that this is something different, something not originally designed with Swift in mind, and in a way that’s a good thing. I know in my own case it makes me instinctively shy away from it, and actually encourages me to wrap NS constructs in something more Swift-like for convenience.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 6 May 2016, at 21:52, Tony Parker via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hi everyone,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Thanks to all of you for your feedback on SE-0069 (Foundation Value Types). I’m back again with more information on another part of our plan to integrate Foundation API into Swift: dropping the NS prefix.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; When we originally proposed this as part of the API guidelines document (SE-0023, https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md), we took a very broad approach to which classes would drop their prefix. This time, we’ve narrowed the scope considerably, plus taken advantage of the ability to nest types inside classes to further reduce the possibility of introducing conflicting names.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I’ve written up a draft of the proposal, which includes an extensive section on motivation plus a list of changes. Please take a look and let me know what you think. We’ll start a formal review period soon.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; https://github.com/parkera/swift-evolution/blob/parkera/drop_ns/proposals/NNNN-drop-foundation-ns.md<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Thanks again for your help,<br>&gt;&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160509/727ef187/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Dropping NS Prefix in Foundation</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May  9, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On May 9, 2016, at 12:26 PM, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt; <br>&gt; Hi Matthew (and others),<br>&gt; <br>&gt;&gt; On May 9, 2016, at 9:03 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; <br>&gt;&gt;&gt; On May 9, 2016, at 10:49 AM, Zach Waldowski via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is exactly the way I see it, too. Many people are coming to Swift<br>&gt;&gt;&gt; and immediately decrying the language because it doesn&#39;t have built-in<br>&gt;&gt;&gt; support for regex, date parsing, collections beyond the built-in 3,<br>&gt;&gt;&gt; etc., when it in fact has a rich tapestry of things from Foundation.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; While I agree with many of the points made in the thread, I think we&#39;re<br>&gt;&gt;&gt; missing the forest for the trees. Foundation is the best at many of the<br>&gt;&gt;&gt; things it does on any platform. This is in spite of many of the points<br>&gt;&gt;&gt; made: it *has* an Objective-C API. It *is* coupled to Apple platforms.<br>&gt;&gt;&gt; It *does* have crufty edges.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Foundation not having a super-Swifty API is a solvable problem over<br>&gt;&gt;&gt; time, of which this is a first step down that road. Revamping the<br>&gt;&gt;&gt; Foundation API in the Swift 3 timeframe is not a solvable problem.<br>&gt;&gt; <br>&gt;&gt; I agree with everything you say here.  My only concern is trying to ensure we don&#39;t take steps today that will make it difficult to implement the best design down the road.  <br>&gt; <br>&gt; It’s true that Foundation is the foundation of the Objective-C stack. However, while some see this as a weakness, I see it as a great opportunity. The role of this library puts it in a unique spot as a leverage point: low enough level to be used in nearly all applications on all platforms, but high enough level to establish API and patterns that you see across the SDK.<br>&gt; <br>&gt; The idea of leaving existing API behind somehow by keeping the prefix means that the leverage would be gone. With all existing API in terms of those existing types, any new types are effectively unused in all API above Foundation. We would need to introduce conversion methods to move between the two types (if that is even possible).<br>&gt; <br>&gt; If, instead, we evolve the existing API to be better for Swift, then we benefit the entire stack without having a boil-the-ocean type of adoption problem. Therefore, we have already made the decision that we are not going to invent an entirely new set of a fundamental types but to instead iteratively improve the API of the ones we have.<br></p><p>I understand where you’re coming from and appreciate the reasons for the decision.  As a developer working on Apple platforms I will receive immediate benefit from this direction in the near term.<br></p><p>At the same time I do think it is a path that could lead to a less cohesive community.  We may see alternative, Swift-native libraries emerge especially from those using Swift on non-Apple platforms (server side, etc).  I hope the “Swiftification of Foundation” is able to move quickly enough and feel idiomatic enough to prevent that from happening.  I’m sure you’ve given this plenty of thought already internally.<br></p><p>-Matthew<br></p><p>&gt; <br>&gt; - Tony<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Cheers<br>&gt;&gt;&gt;  Zach Waldowski<br>&gt;&gt;&gt;  zach at waldowski.me &lt;mailto:zach at waldowski.me&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Mon, May 9, 2016, at 10:42 AM, Sean Heber via swift-evolution wrote:<br>&gt;&gt;&gt;&gt; If I am coming to Swift as a new user (possibly as a first language,<br>&gt;&gt;&gt;&gt; even) without any prior Objective-C experience and very little knowledge<br>&gt;&gt;&gt;&gt; of the long history of Foundation, the NS prefix, etc, this is going to<br>&gt;&gt;&gt;&gt; feel worse than a little out of place - it will feel downright wrong,<br>&gt;&gt;&gt;&gt; broken, and confusing to see these weird NS prefixes on some seemingly<br>&gt;&gt;&gt;&gt; “standard” classes and not on others.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’m +1 for removing the NS and evolving forward from there - let’s not<br>&gt;&gt;&gt;&gt; create a confusing tangle of old and new that is navigable only by those<br>&gt;&gt;&gt;&gt; with knowledge of the esoteric.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On May 9, 2016, at 5:33 AM, Haravikk via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I have mixed feelings about this; while I agree that prefixing names isn’t a good fit for Swift, at the same time that’s kind of the appeal of it. Assuming that Foundation will eventually be replaced by a more Swift-like alternative, or will be incrementally reworked, I think it makes sense for it to feel a little weird to use as it is right now.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The NS prefix makes it clear that this is something different, something not originally designed with Swift in mind, and in a way that’s a good thing. I know in my own case it makes me instinctively shy away from it, and actually encourages me to wrap NS constructs in something more Swift-like for convenience.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On 6 May 2016, at 21:52, Tony Parker via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Hi everyone,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Thanks to all of you for your feedback on SE-0069 (Foundation Value Types). I’m back again with more information on another part of our plan to integrate Foundation API into Swift: dropping the NS prefix.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; When we originally proposed this as part of the API guidelines document (SE-0023, https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md&gt;), we took a very broad approach to which classes would drop their prefix. This time, we’ve narrowed the scope considerably, plus taken advantage of the ability to nest types inside classes to further reduce the possibility of introducing conflicting names.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I’ve written up a draft of the proposal, which includes an extensive section on motivation plus a list of changes. Please take a look and let me know what you think. We’ll start a formal review period soon.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; https://github.com/parkera/swift-evolution/blob/parkera/drop_ns/proposals/NNNN-drop-foundation-ns.md &lt;https://github.com/parkera/swift-evolution/blob/parkera/drop_ns/proposals/NNNN-drop-foundation-ns.md&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Thanks again for your help,<br>&gt;&gt;&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160509/4738056c/attachment-0001.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
