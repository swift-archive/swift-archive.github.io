<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Pre-proposal] Enforcing Correct use of Array Indices</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>October  3, 2016 at 08:00:00am</p></header><div class="content"><p>on Mon Oct 03 2016, Haravikk &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On 30 Sep 2016, at 13:10, Dave Abrahams via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; on Thu Sep 29 2016, Haravikk<br>&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;&gt; So the issue of Array index safety came up on the discussion for the<br>&gt;&gt;&gt; .indexed() proposal. Now of course there&#39;s nothing wrong with arrays<br>&gt;&gt;&gt; using integers as indices as such, but it does mean that indices can<br>&gt;&gt;&gt; be manipulated outside of the array, which somewhat defeats the idea<br>&gt;&gt;&gt; of the indexing model requiring them to be passed back to the parent<br>&gt;&gt;&gt; collection for manipulation.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In a few types of my own I&#39;ve avoided this problem by doing the<br>&gt;&gt;&gt; following:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; public struct MyMaskedIndex : Comparable { fileprivate var raw:Int }<br>&gt;&gt;&gt; // Comparable conformance omitted<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; public struct MyType : Collection {<br>&gt;&gt;&gt;    // Lots of stuff omitted<br>&gt;&gt;&gt;    public func distance(from start:MyMaskedIndex, to<br>&gt;&gt;&gt; end:MyMaskedIndex) -&gt; Int {<br>&gt;&gt;&gt;        return end.raw - start.raw;<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In essence MaskedIndex is still just an Int, and should optimise as<br>&gt;&gt;&gt; such, but in development the use of a type like this ensures that<br>&gt;&gt;&gt; indices from my collection can&#39;t be manipulated externally, which<br>&gt;&gt;&gt; enables the type-checker to conveniently prevent any mistakes I might<br>&gt;&gt;&gt; make. It&#39;s a handy pattern for other things like hashed values,<br>&gt;&gt;&gt; ensuring I can&#39;t use unhashed values of the same type by accident and<br>&gt;&gt;&gt; so-on.<br>&gt;&gt; <br>&gt;&gt; Yeah, but it doesn&#39;t really ensure you won&#39;t use an invalid index.<br>&gt;&gt; Among many other things, you can always reset the collection to an empty<br>&gt;&gt; state and all the old indices become invalid with respect to it.<br>&gt;&gt; <br>&gt;&gt;&gt; I just wanted to raise the topic to see what other people thought<br>&gt;&gt;&gt; about the idea of doing something similar for Array and any other<br>&gt;&gt;&gt; types that use integer types directly as indices? For convenience it<br>&gt;&gt;&gt; is still possible to have a public initialiser on the masking type(s),<br>&gt;&gt;&gt; so that custom values can be used, but by using MaskedIndex(raw:) it<br>&gt;&gt;&gt; should be much more obvious what&#39;s happening.<br>&gt;&gt; <br>&gt;&gt; Believe me, we considered this when doing the Array design.  Being able<br>&gt;&gt; to index an Array with Ints is pretty fundamental to its usability and<br>&gt;&gt; adoptability, and wrapping the index doesn&#39;t buy any real safety.<br>&gt;<br>&gt; It certainly doesn&#39;t solve all the problems, but then it really is<br>&gt; just intended to avoid the simple mistake of manipulating the index<br>&gt; externally; like I say, the wrapped value should optimise away (since<br>&gt; all it is is an Int in reality), and if it&#39;s given a public<br>&gt; constructor then a person can still do external manipulation if they<br>&gt; must, they just have to be explicit about it.<br>&gt;<br>&gt; The idea is literally just to let the type-checker catch some simple,<br>&gt; but easy to make, errors that purpose-made index types like<br>&gt; DictionaryIndex aren&#39;t vulnerable to.<br></p><p>Yes, I understand.  You asked what “people thought;” I was saying we<br>thought about it and explaining the rationale for our choice.  The<br>benefits don&#39;t seem to outweigh the costs.<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
