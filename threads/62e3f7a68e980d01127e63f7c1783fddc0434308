<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>More layering changes...</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>May 17, 2016 at 05:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>As a heads up, I&#39;m planning on doing some more work on the internal module layering of SwiftPM. The intent is to define a clear conceptual purpose to each of the modules in the layering, so that it is more obvious exactly what the dependencies between modules are, and where new code should go. My current plan is this:<br></p><p>libc, POSIX, Basic, Utility<br> - I already sent a mail on the purpose of these, but roughly speaking this is the general &quot;Support&quot; layer.<br></p><p>PackageDescription:<br> - This is a special snowflake, it defines the APIs used in the `Package.swift` files and so needs to stay as decoupled as possible<br></p><p>PackageModel (renamed from PackageType):<br> - This defines the basic model objects for Packages. The rename is to try and convey the intent more clearly. This module is intended to define &quot;pure&quot; model objects.<br></p><p>PackageLoader<br> - This is a new module combining what is currently `Transmute`, the conceptual purpose of which is to take an input Package, apply the convention system and transformations, and output a completed Package (in terms of the same model objects exposed from `PackageModel`).<br></p><p>PackageGraph<br> - This is a new module which is intended to export the organized group of packages which together constitute what is needed for the higher level operations. This module will probably export derived data structures on top of the basic model objects, for example target-level dependencies at this point should be fully resolved (and efficiently queryable) and the semantics of the targets should be well defined. This is so that higher level libraries like `Build` or `Xcodeproj` can operate on a model object which describes as fully as possible the semantics of the project.<br></p><p>Build, Xcodeproj<br> - These are the &quot;build&quot; implementations we have today.<br></p><p>Tools<br> - This is a new high-level module to encapsulate the tooling layers (option parsing, usage, command line diagnostics). We can avoid this if we decide on an implementation of `swift-build` and `swift-test` that just indirects to `swift-package`, in which case this would just be the `swift-package` module for now.<br></p><p>swift-build, swift-test, swift-package<br> - These will be thin executables on top of Tools and ultimately everything else, which we will probably move to enclosing in a libSwiftPM DSO, as part of implementing the `swift package` rename proposal.<br></p><p>I&#39;m still sorting out where exactly the (package-level) dependency graph resolution and SCM interactions will all live in this organization, one possibility is that much of that logic lives in its own module, another possibility is that it is built out of much more basic infrastructure and then the high-level plumbing lives at the PackageGraph level.<br></p><p>Feedback welcome!<br> - Daniel<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fd5bd4566ee1f286333b7dbf2df6fadb?s=50"></div><header><strong>More layering changes...</strong> from <string>Anders Bertelrud</string> &lt;anders at apple.com&gt;<p>May 18, 2016 at 09:00:00am</p></header><div class="content"><p>On 2016-05-17, at 17.26, Daniel Dunbar via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br></p><p>&gt; PackageModel (renamed from PackageType):<br>&gt; - This defines the basic model objects for Packages. The rename is to try and convey the intent more clearly. This module is intended to define &quot;pure&quot; model objects.<br></p><p>Just to clarify what we mean by “pure” here — there should be no conventions or other magic applied at this level, and no intermixed resolution policies etc.  That’s added by higher levels.  Also, at this level there are no connection between packages — that happens in PackageGraph.<br></p><p>Anders<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>More layering changes...</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>May 19, 2016 at 06:00:00pm</p></header><div class="content"><p>The layering refactoring is now done, PRs are safe from gratuitous conflicting once again!<br></p><p>I have added a couple README files, e.g.:<br>  https://github.com/apple/swift-package-manager/blob/master/Sources/PackageModel/README.md<br>to documentation the layering intent for each module, and our own `Package.swift` has an overview of the structure:<br>  https://github.com/apple/swift-package-manager/blob/master/Package.swift<br></p><p>&gt; On May 18, 2016, at 9:01 AM, Anders Bertelrud &lt;anders at apple.com&gt; wrote:<br>&gt; <br>&gt; On 2016-05-17, at 17.26, Daniel Dunbar via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; PackageModel (renamed from PackageType):<br>&gt;&gt; - This defines the basic model objects for Packages. The rename is to try and convey the intent more clearly. This module is intended to define &quot;pure&quot; model objects.<br>&gt; <br>&gt; Just to clarify what we mean by “pure” here — there should be no conventions or other magic applied at this level, and no intermixed resolution policies etc.  That’s added by higher levels.  Also, at this level there are no connection between packages — that happens in PackageGraph.<br></p><p>Indeed. I stole your pure terminology for the README above.<br></p><p> - Daniel<br></p><p>&gt; <br>&gt; Anders<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05540cd6be96706f76aa66a4519f7db9?s=50"></div><header><strong>More layering changes...</strong> from <string>Ankit Agarwal</string> &lt;ankit at ankit.im&gt;<p>May 20, 2016 at 11:00:00am</p></header><div class="content"><p>Awesome!<br></p><p>On Friday 20 May 2016, Daniel Dunbar via swift-build-dev &lt;<br>swift-build-dev at swift.org&gt; wrote:<br></p><p>&gt; The layering refactoring is now done, PRs are safe from gratuitous<br>&gt; conflicting once again!<br>&gt;<br>&gt; I have added a couple README files, e.g.:<br>&gt;<br>&gt; https://github.com/apple/swift-package-manager/blob/master/Sources/PackageModel/README.md<br>&gt; to documentation the layering intent for each module, and our own<br>&gt; `Package.swift` has an overview of the structure:<br>&gt;   https://github.com/apple/swift-package-manager/blob/master/Package.swift<br>&gt;<br>&gt; &gt; On May 18, 2016, at 9:01 AM, Anders Bertelrud &lt;anders at apple.com<br>&gt; &lt;javascript:;&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; On 2016-05-17, at 17.26, Daniel Dunbar via swift-build-dev &lt;<br>&gt; swift-build-dev at swift.org &lt;javascript:;&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; PackageModel (renamed from PackageType):<br>&gt; &gt;&gt; - This defines the basic model objects for Packages. The rename is to<br>&gt; try and convey the intent more clearly. This module is intended to define<br>&gt; &quot;pure&quot; model objects.<br>&gt; &gt;<br>&gt; &gt; Just to clarify what we mean by “pure” here — there should be no<br>&gt; conventions or other magic applied at this level, and no intermixed<br>&gt; resolution policies etc.  That’s added by higher levels.  Also, at this<br>&gt; level there are no connection between packages — that happens in<br>&gt; PackageGraph.<br>&gt;<br>&gt; Indeed. I stole your pure terminology for the README above.<br>&gt;<br>&gt;  - Daniel<br>&gt;<br>&gt; &gt;<br>&gt; &gt; Anders<br>&gt; &gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;<br></p><p><br>-- <br>Ankit<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160520/dd9e4399/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
