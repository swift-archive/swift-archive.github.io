<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a83279e420d8a16da6441b8333b93775?s=50"></div><header><strong>[Review] SE-0026 Abstract classes and methods</strong> from <string>David Scrève</string> &lt;david.screve at dlta-studio.com&gt;<p>February 26, 2016 at 11:00:00pm</p></header><div class="content"><p>Actually, protocols and extensions cannot handle methods that requires attributes and data storage.<br></p><p>	So, by design, protocols and extensions can only be used to implement stateless interface where abstract classes are true classes with a state supported with attributes and properties.<br></p><p>	Abstract class can also enforce methods to be implemented and avoid misuse of default method implementation.<br></p><p>	For example, NSOperation is a good candidat to abstract class because NSOperation itself is useless as a standalone class and should not be used as-it.  -(void)main should be made abstract because I don’t think NSOperation does not have any internal property and has default behavior.<br></p><p>David<br>&gt; <br>&gt; I am against the proposal. I believe that protocols, mix-ins and composition are better answers to the problems that abstract classes are usually called to solve. In my experience, abstract classes lead to subpar design decisions.<br>&gt; <br>&gt; &gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; I do not believe so. There are most likely cases where current tools could be improved, by that should be done by improving support for behavior composition rather than forced subclassing<br>&gt; <br>&gt; &gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; I do not believe so, for the reason outlined above<br>&gt; <br>&gt; &gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; &gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; A quick glance. <br>&gt; <br>&gt; <br>&gt; &gt; On 26 Feb 2016, at 19:11, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; Hello Swift community,<br>&gt; &gt; <br>&gt; &gt; The review of “Abstract classes and methods” begins now and runs through March 4, 2016. The proposal is available here:<br>&gt; &gt; <br>&gt; &gt; https://github.com/apple/swift-evolution/blob/master/proposals/0026-abstract-classes-and-methods.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0026-abstract-classes-and-methods.md&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0026-abstract-classes-and-methods.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0026-abstract-classes-and-methods.md&gt;&gt;<br>&gt; &gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; &gt; <br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt; &gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; &gt; <br>&gt; &gt; Proposal link:<br>&gt; &gt; <br>&gt; &gt; https://github.com/apple/swift-evolution/blob/master/proposals/0026-abstract-classes-and-methods.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0026-abstract-classes-and-methods.md&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0026-abstract-classes-and-methods.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0026-abstract-classes-and-methods.md&gt;&gt;<br>&gt; &gt; Reply text<br>&gt; &gt; <br>&gt; &gt; Other replies<br>&gt; &gt; <br>&gt; &gt; What goes into a review?<br>&gt; &gt; <br>&gt; &gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; &gt; <br>&gt; &gt; 	• What is your evaluation of the proposal?<br>&gt; &gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; &gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt; &gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; &gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; &gt; <br>&gt; &gt; More information about the Swift evolution process is available at:<br>&gt; &gt; <br>&gt; &gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt; &lt;https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;&gt;<br>&gt; &gt; Thank you,<br>&gt; &gt; <br>&gt; &gt; -Joe<br>&gt; &gt; Review Manager<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160226/5c779d12/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: smime.p7s<br>Type: application/pkcs7-signature<br>Size: 4233 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160226/5c779d12/attachment.p7s&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/73a38bb7bc9528e31098defe30e68ea4?s=50"></div><header><strong>[Review] SE-0026 Abstract classes and methods</strong> from <string>Jean-Daniel Dupas</string> &lt;mailing at xenonium.com&gt;<p>February 26, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; Le 26 févr. 2016 à 23:21, David Scrève via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; 	Actually, protocols and extensions cannot handle methods that requires attributes and data storage.<br>&gt; <br>&gt; 	So, by design, protocols and extensions can only be used to implement stateless interface where abstract classes are true classes with a state supported with attributes and properties.<br>&gt; <br>&gt; 	Abstract class can also enforce methods to be implemented and avoid misuse of default method implementation.<br>&gt; <br>&gt; 	For example, NSOperation is a good candidat to abstract class because NSOperation itself is useless as a standalone class and should not be used as-it.  -(void)main should be made abstract because I don’t think NSOperation does not have any internal property and has default behavior.<br></p><p>IMHO, NSOperation could be better design using closure. Abstract class is probably a concept that fit well with API that where design with it in mind, but it does not mean it is needed in Swift.<br></p><p>&gt; David<br>&gt;&gt; I am against the proposal. I believe that protocols, mix-ins and composition are better answers to the problems that abstract classes are usually called to solve. In my experience, abstract classes lead to subpar design decisions.<br>&gt;&gt; <br>&gt;&gt; &gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; <br>&gt;&gt; I do not believe so. There are most likely cases where current tools could be improved, by that should be done by improving support for behavior composition rather than forced subclassing<br>&gt;&gt; <br>&gt;&gt; &gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; <br>&gt;&gt; I do not believe so, for the reason outlined above<br>&gt;&gt; <br>&gt;&gt; &gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; &gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; A quick glance. <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; &gt; On 26 Feb 2016, at 19:11, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt; wrote:<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; Hello Swift community,<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; The review of “Abstract classes and methods” begins now and runs through March 4, 2016. The proposal is available here:<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; https://github.com/apple/swift-evolution/blob/master/proposals/0026-abstract-classes-and-methods.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0026-abstract-classes-and-methods.md&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0026-abstract-classes-and-methods.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0026-abstract-classes-and-methods.md&gt;&gt;<br>&gt;&gt; &gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt; &gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; Proposal link:<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; https://github.com/apple/swift-evolution/blob/master/proposals/0026-abstract-classes-and-methods.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0026-abstract-classes-and-methods.md&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0026-abstract-classes-and-methods.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0026-abstract-classes-and-methods.md&gt;&gt;<br>&gt;&gt; &gt; Reply text<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; Other replies<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; What goes into a review?<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; 	• What is your evaluation of the proposal?<br>&gt;&gt; &gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; &gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; &gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; &gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; More information about the Swift evolution process is available at:<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt; &lt;https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;&gt;<br>&gt;&gt; &gt; Thank you,<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; -Joe<br>&gt;&gt; &gt; Review Manager<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160226/52d3f4fc/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5818a8a9211c31af95d6db8974457683?s=50"></div><header><strong>[Review] SE-0026 Abstract classes and methods</strong> from <string>Joseph Lord</string> &lt;joseph at human-friendly.com&gt;<p>February 27, 2016 at 01:00:00am</p></header><div class="content"><p>&gt; On Feb 26, 2016, at 10:21 PM, David Scrève via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; 	Actually, protocols and extensions cannot handle methods that requires attributes and data storage.<br></p><p>You don&#39;t implement the required code in the protocol/extension you provide a concrete instance conforming to the protocol. <br></p><p>&gt; 	So, by design, protocols and extensions can only be used to implement stateless interface where abstract classes are true classes with a state supported with attributes and properties.<br></p><p>It is safer to share state only through the specific interface of the protocol.<br></p><p>&gt; 	Abstract class can also enforce methods to be implemented and avoid misuse of default method implementation.<br></p><p>Require the object conforming to the protocol in the initializer. <br></p><p>&gt; 	For example, NSOperation is a good candidat to abstract class because NSOperation itself is useless as a standalone class and should not be used as-it.  -(void)main should be made abstract because I don’t think NSOperation does not have any internal property and has default behavior.<br></p><p>As mentioned it could just be initialised with a closure (or a simple delegate). With the delegate approach you could still subclass and just return self as the delegate if you really wanted to of some reason. <br></p><p>Joseph<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>[Review] SE-0026 Abstract classes and methods</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>February 26, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Feb 26, 2016, at 5:21 PM, David Scrève via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Actually, protocols and extensions cannot handle methods that requires attributes and data storage.<br>&gt; <br>&gt; So, by design, protocols and extensions can only be used to implement stateless interface where abstract classes are true classes with a state supported with attributes and properties.<br></p><p>This is true, but maybe that&#39;s the problem. A proposal for protocol and extension storage makes more sense to me.<br></p><p>&gt; Abstract class can also enforce methods to be implemented and avoid misuse of default method implementation.<br></p><p>Protocols can enforce that methods are implemented. Protocol extensions can avoid misuse of the default method implementation.<br></p><p>&gt; For example, NSOperation is a good candidat to abstract class because NSOperation itself is useless as a standalone class and should not be used as-it.  -(void)main should be made abstract because I don’t think NSOperation does not have any internal property and has default behavior.<br></p><p>NSBlockOperation (or something like it) can work on its own just fine.<br></p><p>--<br>Stephen<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
