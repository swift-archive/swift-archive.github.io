<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0eaab3d5d1d4428f74a711f724f2eb47?s=50"></div><header><strong>POSIX getaddrinfo memory behaviour</strong> from <string>Etan Kissling</string> &lt;kissling at oberon.ch&gt;<p>October  4, 2016 at 04:00:00pm</p></header><div class="content"><p>POSIX getaddrinfo allocates memory that must later be freed using freeaddrinfo.<br>See http://manpages.ubuntu.com/manpages/xenial/en/man3/getaddrinfo.3.html<br></p><p>To simplify the API, I&#39;ve created this function:<br></p><p>        import Foundation<br>        <br>        enum SystemError: Swift.Error {<br>            case getaddrinfo(Int32, Int32?)<br>        }<br>        <br>        public func getaddrinfo(node: String?, service: String?, hints: addrinfo?) throws -&gt; [addrinfo] {<br>            var err: Int32<br>            var res: UnsafeMutablePointer&lt;addrinfo&gt;?<br>            if var hints = hints {<br>                err = getaddrinfo(node, service, &amp;hints, &amp;res)<br>            } else {<br>                err = getaddrinfo(node, service, nil, &amp;res)<br>            }<br>            if err == EAI_SYSTEM {<br>                throw SystemError.getaddrinfo(err, errno)<br>            }<br>            if err != 0 {<br>                throw SystemError.getaddrinfo(err, nil)<br>            }<br>            defer {<br>                freeaddrinfo(res)<br>            }<br>            var result = [addrinfo]()<br>            var ai = res?.pointee<br>            while ai != nil {<br>                result.append(ai!)<br>                ai = ai!.ai_next?.pointee<br>            }<br>            return result<br>        }<br>        <br>I don&#39;t feel that the function is correct, though.<br></p><p>• How can the Swift memory model know that getaddrinfo allocates memory, and that Swift should not overwrite that memory with own stuff?<br>• How can Swift know that freeaddrinfo deletes the whole list, and that it should copy out ai information that has been assigned to the result array?<br></p><p>What&#39;s the correct way to interface with getaddrinfo?<br></p><p>Thanks<br></p><p>Etan<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2bc666e29724cd3bdf46b6cbbe4a07bb?s=50"></div><header><strong>POSIX getaddrinfo memory behaviour</strong> from <string>Quinn &quot;The Eskimo!&quot;</string> &lt;eskimo1 at apple.com&gt;<p>October  4, 2016 at 06:00:00pm</p></header><div class="content"><p>On 4 Oct 2016, at 17:46, Etan Kissling via swift-users &lt;swift-users at swift.org&gt; wrote:<br></p><p>&gt; I don&#39;t feel that the function is correct<br></p><p>It’s definitely not correct.  The problem is that each `addrinfo` structure in your function has pointers to memory that’s freed by the `freeaddrinfo()` call.<br></p><p>You have a bunch of options here:<br></p><p>A. avoid `getaddrinfo` — The POSIX ‘resolve then connect’ approach is deeply painful when dealing with the random mix of IPv4 and IPv6 addresses you find in the real world.  I strongly recommend that you use a connect-by-name API instead, like CFSocketStream (which you access via `Stream.getStreamsToHost(withName:port:inputStream:outputStream:)`).<br></p><p>The only reason /not/ to do this is if you’re using the address list for something other than opening a TCP connection.<br></p><p>Even if you back end is BSD Sockets, you can extract the file descriptor from the stream once it’s connected.<br></p><p>B. capture the addresses referenced by each `addrinfo`<br></p><p>C. wrap the address list in a class that holds it in memory while you access it<br></p><p>All of these options work but, realistically, A is the easiest and the best.<br></p><p>Share and Enjoy<br>--<br>Quinn &quot;The Eskimo!&quot;                    &lt;http://www.apple.com/developer/&gt;<br>Apple Developer Relations, Developer Technical Support, Core OS/Hardware<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c23a24dd9f358575e9764f1a535e2ce0?s=50"></div><header><strong>POSIX getaddrinfo memory behaviour</strong> from <string>Mike Ferenduros</string> &lt;mike.ferenduros at gmail.com&gt;<p>October  4, 2016 at 08:00:00pm</p></header><div class="content"><p>Swift won&#39;t mess with memory it does&#39;t own, and memory the addrinfo list<br>falls into that category.<br></p><p>The addrinfo you&#39;re accessing through pointee  is a struct which means that<br>when you assign it somewhere you get a *copy* of the thing pointed to.<br>Swift owns that copy and will manage it properly, and leave the original<br>alone.<br></p><p>Fwiw, this is the wrapper I&#39;m using for sockets right now:<br>https://github.com/mike-ferenduros/SwiftySockets<br></p><p><br>On Tuesday, October 4, 2016, Etan Kissling via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; POSIX getaddrinfo allocates memory that must later be freed using<br>&gt; freeaddrinfo.<br>&gt; See http://manpages.ubuntu.com/manpages/xenial/en/man3/getaddrinfo.3.html<br>&gt;<br>&gt; To simplify the API, I&#39;ve created this function:<br>&gt;<br>&gt;         import Foundation<br>&gt;<br>&gt;         enum SystemError: Swift.Error {<br>&gt;             case getaddrinfo(Int32, Int32?)<br>&gt;         }<br>&gt;<br>&gt;         public func getaddrinfo(node: String?, service: String?, hints:<br>&gt; addrinfo?) throws -&gt; [addrinfo] {<br>&gt;             var err: Int32<br>&gt;             var res: UnsafeMutablePointer&lt;addrinfo&gt;?<br>&gt;             if var hints = hints {<br>&gt;                 err = getaddrinfo(node, service, &amp;hints, &amp;res)<br>&gt;             } else {<br>&gt;                 err = getaddrinfo(node, service, nil, &amp;res)<br>&gt;             }<br>&gt;             if err == EAI_SYSTEM {<br>&gt;                 throw SystemError.getaddrinfo(err, errno)<br>&gt;             }<br>&gt;             if err != 0 {<br>&gt;                 throw SystemError.getaddrinfo(err, nil)<br>&gt;             }<br>&gt;             defer {<br>&gt;                 freeaddrinfo(res)<br>&gt;             }<br>&gt;             var result = [addrinfo]()<br>&gt;             var ai = res?.pointee<br>&gt;             while ai != nil {<br>&gt;                 result.append(ai!)<br>&gt;                 ai = ai!.ai_next?.pointee<br>&gt;             }<br>&gt;             return result<br>&gt;         }<br>&gt;<br>&gt; I don&#39;t feel that the function is correct, though.<br>&gt;<br>&gt; • How can the Swift memory model know that getaddrinfo allocates memory,<br>&gt; and that Swift should not overwrite that memory with own stuff?<br>&gt; • How can Swift know that freeaddrinfo deletes the whole list, and that it<br>&gt; should copy out ai information that has been assigned to the result array?<br>&gt;<br>&gt; What&#39;s the correct way to interface with getaddrinfo?<br>&gt;<br>&gt; Thanks<br>&gt;<br>&gt; Etan<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161004/a9e474d8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c23a24dd9f358575e9764f1a535e2ce0?s=50"></div><header><strong>POSIX getaddrinfo memory behaviour</strong> from <string>Mike Ferenduros</string> &lt;mike.ferenduros at gmail.com&gt;<p>October  4, 2016 at 08:00:00pm</p></header><div class="content"><p>Ach, apologies - I forgot that addrinfo contains pointers. Ignore what I<br>said :)<br></p><p>On Tuesday, October 4, 2016, Mike Ferenduros &lt;mike.ferenduros at gmail.com&gt;<br>wrote:<br></p><p>&gt; Swift won&#39;t mess with memory it does&#39;t own, and memory the addrinfo list<br>&gt; falls into that category.<br>&gt;<br>&gt; The addrinfo you&#39;re accessing through pointee  is a struct which means<br>&gt; that when you assign it somewhere you get a *copy* of the thing pointed to.<br>&gt; Swift owns that copy and will manage it properly, and leave the original<br>&gt; alone.<br>&gt;<br>&gt; Fwiw, this is the wrapper I&#39;m using for sockets right now:<br>&gt; https://github.com/mike-ferenduros/SwiftySockets<br>&gt;<br>&gt;<br>&gt; On Tuesday, October 4, 2016, Etan Kissling via swift-users &lt;<br>&gt; swift-users at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-users at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt;&gt; POSIX getaddrinfo allocates memory that must later be freed using<br>&gt;&gt; freeaddrinfo.<br>&gt;&gt; See http://manpages.ubuntu.com/manpages/xenial/en/man3/getaddrinfo.3.html<br>&gt;&gt;<br>&gt;&gt; To simplify the API, I&#39;ve created this function:<br>&gt;&gt;<br>&gt;&gt;         import Foundation<br>&gt;&gt;<br>&gt;&gt;         enum SystemError: Swift.Error {<br>&gt;&gt;             case getaddrinfo(Int32, Int32?)<br>&gt;&gt;         }<br>&gt;&gt;<br>&gt;&gt;         public func getaddrinfo(node: String?, service: String?, hints:<br>&gt;&gt; addrinfo?) throws -&gt; [addrinfo] {<br>&gt;&gt;             var err: Int32<br>&gt;&gt;             var res: UnsafeMutablePointer&lt;addrinfo&gt;?<br>&gt;&gt;             if var hints = hints {<br>&gt;&gt;                 err = getaddrinfo(node, service, &amp;hints, &amp;res)<br>&gt;&gt;             } else {<br>&gt;&gt;                 err = getaddrinfo(node, service, nil, &amp;res)<br>&gt;&gt;             }<br>&gt;&gt;             if err == EAI_SYSTEM {<br>&gt;&gt;                 throw SystemError.getaddrinfo(err, errno)<br>&gt;&gt;             }<br>&gt;&gt;             if err != 0 {<br>&gt;&gt;                 throw SystemError.getaddrinfo(err, nil)<br>&gt;&gt;             }<br>&gt;&gt;             defer {<br>&gt;&gt;                 freeaddrinfo(res)<br>&gt;&gt;             }<br>&gt;&gt;             var result = [addrinfo]()<br>&gt;&gt;             var ai = res?.pointee<br>&gt;&gt;             while ai != nil {<br>&gt;&gt;                 result.append(ai!)<br>&gt;&gt;                 ai = ai!.ai_next?.pointee<br>&gt;&gt;             }<br>&gt;&gt;             return result<br>&gt;&gt;         }<br>&gt;&gt;<br>&gt;&gt; I don&#39;t feel that the function is correct, though.<br>&gt;&gt;<br>&gt;&gt; • How can the Swift memory model know that getaddrinfo allocates memory,<br>&gt;&gt; and that Swift should not overwrite that memory with own stuff?<br>&gt;&gt; • How can Swift know that freeaddrinfo deletes the whole list, and that<br>&gt;&gt; it should copy out ai information that has been assigned to the result<br>&gt;&gt; array?<br>&gt;&gt;<br>&gt;&gt; What&#39;s the correct way to interface with getaddrinfo?<br>&gt;&gt;<br>&gt;&gt; Thanks<br>&gt;&gt;<br>&gt;&gt; Etan<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161004/e13515ac/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0eaab3d5d1d4428f74a711f724f2eb47?s=50"></div><header><strong>POSIX getaddrinfo memory behaviour</strong> from <string>Etan Kissling</string> &lt;kissling at oberon.ch&gt;<p>October  4, 2016 at 05:00:00pm</p></header><div class="content"><p>Yup (BTW I&#39;m fine with the &quot;ai_next&quot; item becoming useless in the copies. I just want to copy out the other parts in a way that gets copied reliably)<br></p><p>On 4 Oct 2016, at 19:26, Mike Ferenduros via swift-users &lt;swift-users at swift.org&lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br></p><p>Ach, apologies - I forgot that addrinfo contains pointers. Ignore what I said :)<br></p><p>On Tuesday, October 4, 2016, Mike Ferenduros &lt;mike.ferenduros at gmail.com&lt;mailto:mike.ferenduros at gmail.com&gt;&gt; wrote:<br>Swift won&#39;t mess with memory it does&#39;t own, and memory the addrinfo list falls into that category.<br></p><p>The addrinfo you&#39;re accessing through pointee  is a struct which means that when you assign it somewhere you get a *copy* of the thing pointed to. Swift owns that copy and will manage it properly, and leave the original alone.<br></p><p>Fwiw, this is the wrapper I&#39;m using for sockets right now:<br>https://github.com/mike-ferenduros/SwiftySockets<br></p><p><br>On Tuesday, October 4, 2016, Etan Kissling via swift-users &lt;swift-users at swift.org&lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-users at swift.org&#39;);&gt;&gt; wrote:<br>POSIX getaddrinfo allocates memory that must later be freed using freeaddrinfo.<br>See http://manpages.ubuntu.com/manpages/xenial/en/man3/getaddrinfo.3.html<br></p><p>To simplify the API, I&#39;ve created this function:<br></p><p>        import Foundation<br></p><p>        enum SystemError: Swift.Error {<br>            case getaddrinfo(Int32, Int32?)<br>        }<br></p><p>        public func getaddrinfo(node: String?, service: String?, hints: addrinfo?) throws -&gt; [addrinfo] {<br>            var err: Int32<br>            var res: UnsafeMutablePointer&lt;addrinfo&gt;?<br>            if var hints = hints {<br>                err = getaddrinfo(node, service, &amp;hints, &amp;res)<br>            } else {<br>                err = getaddrinfo(node, service, nil, &amp;res)<br>            }<br>            if err == EAI_SYSTEM {<br>                throw SystemError.getaddrinfo(err, errno)<br>            }<br>            if err != 0 {<br>                throw SystemError.getaddrinfo(err, nil)<br>            }<br>            defer {<br>                freeaddrinfo(res)<br>            }<br>            var result = [addrinfo]()<br>            var ai = res?.pointee<br>            while ai != nil {<br>                result.append(ai!)<br>                ai = ai!.ai_next?.pointee<br>            }<br>            return result<br>        }<br></p><p>I don&#39;t feel that the function is correct, though.<br></p><p>• How can the Swift memory model know that getaddrinfo allocates memory, and that Swift should not overwrite that memory with own stuff?<br>• How can Swift know that freeaddrinfo deletes the whole list, and that it should copy out ai information that has been assigned to the result array?<br></p><p>What&#39;s the correct way to interface with getaddrinfo?<br></p><p>Thanks<br></p><p>Etan<br></p><p><br>_______________________________________________<br>swift-users mailing list<br>swift-users at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-users<br>_______________________________________________<br>swift-users mailing list<br>swift-users at swift.org&lt;mailto:swift-users at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161004/9a721c97/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0eaab3d5d1d4428f74a711f724f2eb47?s=50"></div><header><strong>POSIX getaddrinfo memory behaviour</strong> from <string>Etan Kissling</string> &lt;kissling at oberon.ch&gt;<p>October  4, 2016 at 09:00:00pm</p></header><div class="content"><p>Got an answer here:<br>http://stackoverflow.com/questions/39857435/swift-getaddrinfo<br></p><p>Current version:<br>http://pastebin.com/y7nDATSH<br></p><p><br>On 4 Oct 2016, at 19:30, Etan Kissling via swift-users &lt;swift-users at swift.org&lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br></p><p>Yup (BTW I&#39;m fine with the &quot;ai_next&quot; item becoming useless in the copies. I just want to copy out the other parts in a way that gets copied reliably)<br></p><p>On 4 Oct 2016, at 19:26, Mike Ferenduros via swift-users &lt;swift-users at swift.org&lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br></p><p>Ach, apologies - I forgot that addrinfo contains pointers. Ignore what I said :)<br></p><p>On Tuesday, October 4, 2016, Mike Ferenduros &lt;mike.ferenduros at gmail.com&lt;mailto:mike.ferenduros at gmail.com&gt;&gt; wrote:<br>Swift won&#39;t mess with memory it does&#39;t own, and memory the addrinfo list falls into that category.<br></p><p>The addrinfo you&#39;re accessing through pointee  is a struct which means that when you assign it somewhere you get a *copy* of the thing pointed to. Swift owns that copy and will manage it properly, and leave the original alone.<br></p><p>Fwiw, this is the wrapper I&#39;m using for sockets right now:<br>https://github.com/mike-ferenduros/SwiftySockets<br></p><p><br>On Tuesday, October 4, 2016, Etan Kissling via swift-users &lt;swift-users at swift.org&lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-users at swift.org&#39;);&gt;&gt; wrote:<br>POSIX getaddrinfo allocates memory that must later be freed using freeaddrinfo.<br>See http://manpages.ubuntu.com/manpages/xenial/en/man3/getaddrinfo.3.html<br></p><p>To simplify the API, I&#39;ve created this function:<br></p><p>        import Foundation<br></p><p>        enum SystemError: Swift.Error {<br>            case getaddrinfo(Int32, Int32?)<br>        }<br></p><p>        public func getaddrinfo(node: String?, service: String?, hints: addrinfo?) throws -&gt; [addrinfo] {<br>            var err: Int32<br>            var res: UnsafeMutablePointer&lt;addrinfo&gt;?<br>            if var hints = hints {<br>                err = getaddrinfo(node, service, &amp;hints, &amp;res)<br>            } else {<br>                err = getaddrinfo(node, service, nil, &amp;res)<br>            }<br>            if err == EAI_SYSTEM {<br>                throw SystemError.getaddrinfo(err, errno)<br>            }<br>            if err != 0 {<br>                throw SystemError.getaddrinfo(err, nil)<br>            }<br>            defer {<br>                freeaddrinfo(res)<br>            }<br>            var result = [addrinfo]()<br>            var ai = res?.pointee<br>            while ai != nil {<br>                result.append(ai!)<br>                ai = ai!.ai_next?.pointee<br>            }<br>            return result<br>        }<br></p><p>I don&#39;t feel that the function is correct, though.<br></p><p>• How can the Swift memory model know that getaddrinfo allocates memory, and that Swift should not overwrite that memory with own stuff?<br>• How can Swift know that freeaddrinfo deletes the whole list, and that it should copy out ai information that has been assigned to the result array?<br></p><p>What&#39;s the correct way to interface with getaddrinfo?<br></p><p>Thanks<br></p><p>Etan<br></p><p><br>_______________________________________________<br>swift-users mailing list<br>swift-users at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-users<br>_______________________________________________<br>swift-users mailing list<br>swift-users at swift.org&lt;mailto:swift-users at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>_______________________________________________<br>swift-users mailing list<br>swift-users at swift.org&lt;mailto:swift-users at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161004/525d3b76/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
