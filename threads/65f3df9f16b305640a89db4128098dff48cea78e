<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cc80e78263eebbb13817a36ed5f3a701?s=50"></div><header><strong>[Discussion] Static curried versions for variables and constants.</strong> from <string>Nikita Leonov</string> &lt;nikita.leonov at gmail.com&gt;<p>July  2, 2016 at 12:00:00pm</p></header><div class="content"><p>Currently Swift provides a static curried function for every instance function defined. It pretty often allows to avoid closures and be explicit about functions used. For example:<br>//flip — flipping an order of arguments for curried functions.<br>var foo = [[0, 1], [1, 2], [2, 3], [3, 4]].map(flip(Array&lt;Int&gt;.prefix)(1)) //[[0], [1], [2], [3]]<br></p><p>However this behavior is not unified, there is no such behavior available for variables or constants. For example code like following is impossible as Array.first is a variable but not a function:<br>var foo = [[0, 1], [1, 2], [2, 3], [3, 4]].map(Array&lt;Int&gt;.first) //Does not compile, but should be [0, 1, 2, 3]<br></p><p>I was trying to find what cause to not define static curried functions for variables and constants and was not able to find a good reason. It is especially interesting as currently if you define both variable and instance function with the same name, Swift complains about redeclaration of function, so it it treat variable already as a function, but does not provide an alternative way to call it. Moreover following definitions of variable and static functions a conflicting, as variable definitely has its hidden curried implementation somewhere but invisible for others:<br>class Foo {<br>    var bar: Int = 0<br>    static func bar(self: Foo) -&gt; Int {} //Definition conflicts with previous value<br>}<br></p><p>One of assumptions why curried functions for variables are hidden — it will cause ambiguity in code, but I was not able to find examples of ambiguity. <br>Could someone explain why this behavior is not consistent across functions, variables and constants? Should we change it to be consistent and make visible curried static functions for variables and functions? Especially since it is in a nature of current implementation.<br></p><p>Best,<br>Nikita Leonov<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160702/65f3a78e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Discussion] Static curried versions for variables and constants.</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>July  2, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jul 2, 2016, at 12:14 PM, Nikita Leonov via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I was trying to find what cause to not define static curried functions for variables and constants and was not able to find a good reason.<br></p><p>In brief: This has been deferred until after Swift 3. We want to be able to provide read-write access to read-write properties, but Swift can&#39;t do that yet. (And at this point in Swift&#39;s release cycle, we&#39;re not really accepting new features unless they have very large source compatibility impacts, which this change wouldn&#39;t.)<br></p><p>Here&#39;s one previous discussion from December: &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003008.html&gt; If you want to look at more discussions on this topic, &quot;lens&quot; is a good keyword, although it&#39;ll also pick up some unrelated stuff. &lt;https://www.google.com/?client=safari#q=lens+site:lists.swift.org&gt;<br></p><p>Hope this helps,<br>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cc80e78263eebbb13817a36ed5f3a701?s=50"></div><header><strong>[Discussion] Static curried versions for variables and constants.</strong> from <string>Nikita Leonov</string> &lt;nikita.leonov at gmail.com&gt;<p>July  2, 2016 at 03:00:00pm</p></header><div class="content"><p>Great! I was trying to find it in a history, but was not able to do so. Thanks for suggestion regarding lens keyword.<br></p><p>&gt; On Jul 2, 2016, at 3:10 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Jul 2, 2016, at 12:14 PM, Nikita Leonov via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I was trying to find what cause to not define static curried functions for variables and constants and was not able to find a good reason.<br>&gt; <br>&gt; In brief: This has been deferred until after Swift 3. We want to be able to provide read-write access to read-write properties, but Swift can&#39;t do that yet. (And at this point in Swift&#39;s release cycle, we&#39;re not really accepting new features unless they have very large source compatibility impacts, which this change wouldn&#39;t.)<br>&gt; <br>&gt; Here&#39;s one previous discussion from December: &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003008.html&gt; If you want to look at more discussions on this topic, &quot;lens&quot; is a good keyword, although it&#39;ll also pick up some unrelated stuff. &lt;https://www.google.com/?client=safari#q=lens+site:lists.swift.org&gt;<br>&gt; <br>&gt; Hope this helps,<br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
