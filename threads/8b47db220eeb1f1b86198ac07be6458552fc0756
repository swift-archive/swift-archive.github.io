<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Proposal] More lenient half-open range operator (was: [Proposal] Safer half-open range operator)</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 27, 2016 at 01:00:00pm</p></header><div class="content"><p>on Wed Apr 27 2016, &quot;Luis Henrique B. Sousa via swift-evolution&quot; &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Actually I had already modified the initial proposal to introduce those new<br>&gt; subscripts methods.<br>&gt;<br>&gt; It is here now: (any help to improve that is very welcome)<br>&gt; https://github.com/luish/swift-evolution/blob/safer-collection-subscripts/proposals/nnnn-safer-collections-subscript-methods.md<br>&gt;<br>&gt; As the motivation and *problem* addressed remain the same, should I really<br>&gt; create a new thread?<br></p><p>I dunno, but IMO you should change the title of this thread and the<br>proposal and the keywords therein.  It&#39;s not about making indexing<br>safer, at least not in the sense we use the term “safety” around Swift.<br>Array indexing is currently perfectly memory- and type-safe in the<br>absence of race conditions.  You&#39;re talking about making it more lenient<br>with respect to bounds checks.<br></p><p>&gt; Best regards,<br>&gt;<br>&gt; - Luis<br>&gt;<br>&gt; On Wed, Apr 27, 2016 at 12:17 PM, Maximilian Hünenberger<br>&gt; &lt;m.huenenberger at me.com&gt; wrote:<br>&gt;<br>&gt;     Do you change the proposal to introduce new (default) subscripts to<br>&gt;     CollectionType/ RangeReplacableCollectionType?<br>&gt;<br>&gt;     subscript(safe index: Index) -&gt; Element?<br>&gt;     subscript(truncate range: Range&lt;Index&gt;) -&gt; SubSequence<br>&gt;<br>&gt;     Maybe a new proposal would be appropriate (and a new thread).<br>&gt;<br>&gt;     Best regards<br>&gt;     - Maximilian<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1c20add0141a66d37f9bcb554d40084b?s=50"></div><header><strong>[Proposal] More lenient half-open range operator (was: [Proposal] Safer half-open range operator)</strong> from <string>Luis Henrique B. Sousa</string> &lt;lshsousa at gmail.com&gt;<p>April 27, 2016 at 10:00:00pm</p></header><div class="content"><p>Thanks Dave. I couldn&#39;t find a better word before. That&#39;s why I had written<br>a note there previously: &quot;The label *safe* is just an idea, it might be<br>improved as it does not sound very appropriate in this context&quot;. :-)<br></p><p>I&#39;ve updated the document removing references to safety. I don&#39;t really<br>know if &quot;lenient&quot; is the best label for the subscript method, but it does<br>sound more appropriate:<br>*https://github.com/luish/swift-evolution/commit/7edd2e0173586e8e2864f598a27f3e42c0f849c2<br>&lt;https://github.com/luish/swift-evolution/commit/7edd2e0173586e8e2864f598a27f3e42c0f849c2&gt;*<br></p><p>New link to the proposal (file renamed):<br>https://github.com/luish/swift-evolution/blob/more-lenient-subscripts/proposals/nnnn-more-lenient-collections-subscripts.md<br></p><p>- Luis<br></p><p>On Wed, Apr 27, 2016 at 9:26 PM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Wed Apr 27 2016, &quot;Luis Henrique B. Sousa via swift-evolution&quot; &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; Actually I had already modified the initial proposal to introduce those<br>&gt; new<br>&gt; &gt; subscripts methods.<br>&gt; &gt;<br>&gt; &gt; It is here now: (any help to improve that is very welcome)<br>&gt; &gt;<br>&gt; https://github.com/luish/swift-evolution/blob/safer-collection-subscripts/proposals/nnnn-safer-collections-subscript-methods.md<br>&gt; &gt;<br>&gt; &gt; As the motivation and *problem* addressed remain the same, should I<br>&gt; really<br>&gt; &gt; create a new thread?<br>&gt;<br>&gt; I dunno, but IMO you should change the title of this thread and the<br>&gt; proposal and the keywords therein.  It&#39;s not about making indexing<br>&gt; safer, at least not in the sense we use the term “safety” around Swift.<br>&gt; Array indexing is currently perfectly memory- and type-safe in the<br>&gt; absence of race conditions.  You&#39;re talking about making it more lenient<br>&gt; with respect to bounds checks.<br>&gt;<br>&gt; &gt; Best regards,<br>&gt; &gt;<br>&gt; &gt; - Luis<br>&gt; &gt;<br>&gt; &gt; On Wed, Apr 27, 2016 at 12:17 PM, Maximilian Hünenberger<br>&gt; &gt; &lt;m.huenenberger at me.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;     Do you change the proposal to introduce new (default) subscripts to<br>&gt; &gt;     CollectionType/ RangeReplacableCollectionType?<br>&gt; &gt;<br>&gt; &gt;     subscript(safe index: Index) -&gt; Element?<br>&gt; &gt;     subscript(truncate range: Range&lt;Index&gt;) -&gt; SubSequence<br>&gt; &gt;<br>&gt; &gt;     Maybe a new proposal would be appropriate (and a new thread).<br>&gt; &gt;<br>&gt; &gt;     Best regards<br>&gt; &gt;     - Maximilian<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160427/48db321d/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
