<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Proposal] Fix lazy filter</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>June 19, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt;<br>&gt; It&#39;s not a bug.  Measuring the length of the source before allocating<br>&gt; the destination array is usually a big win when compared to repeatedly<br>&gt; growing the array&#39;s memory and copying all its elements.<br>&gt; --<br>&gt; -Dave<br></p><p><br>Usually yes, but not in the case of lazy filter. If predicate contains<br>anything more than a dozen CPU instructions, single-pass version is faster.<br></p><p>We often want the predicate to have side effects, but we cannot with<br>current implementation: the side effects will be doubled.<br></p><p>I also wonder if it&#39;s possible to allocate array with capacity of<br>underlying collection (before all lazy stuff) and shrink it in the end.<br></p><p>- Anton<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160619/be0d403b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Proposal] Fix lazy filter</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>June 19, 2016 at 10:00:00pm</p></header><div class="content"><p>I&#39;ve written a simple wrapper sequence that should be optimized out, and<br>performed a couple of microbenchmarks. Code:<br></p><p>===begin===<br>struct WrapperSequence&lt;S: Sequence&gt; : Sequence {<br>    let base: S<br>    init(_ base: S) { self.base = base }<br>    func makeIterator() -&gt; S.Iterator { return base.makeIterator() }<br>}<br></p><p>func predicate(num: Int) -&gt; Bool {<br>    return true<br>}<br></p><p>let sequence = WrapperSequence(1...400000000).lazy.filter(predicate)  // or<br>remove WrapperSequence<br>let array = Array(sequence)<br>===end===<br></p><p>Results:<br></p><p>1. Double-pass wins: num % 2 == 0<br>2. Single-pass wins: num % 2 == 0 &amp;&amp; num % 3 == 0<br>3. Double-pass wins: num % 2 == 0 || num % 3 == 0<br>4. Double-pass wins: num % 2 == 0 || num % 3 == 0 || num % 5 == 0 || num %<br>7 == 0 || num % 11 == 0<br>5. Single-pass wins: num % 2 == 0 || num % 3 == 0 || num % 5 == 0 || num %<br>7 == 0 || num % 11 == 0 || num % 13 == 0<br></p><p>But I have to admit that double-pass algorithm CAN be faster if the one<br>knows what he is doing.<br>I conclude that we need an API to choose between the two algorithms, and<br>single-pass should be the safe default.<br></p><p>- Anton<br></p><p>2016-06-19 19:56 GMT+03:00 Антон Жилин &lt;antonyzhilin at gmail.com&gt;:<br></p><p>&gt; It&#39;s not a bug.  Measuring the length of the source before allocating<br>&gt;&gt; the destination array is usually a big win when compared to repeatedly<br>&gt;&gt; growing the array&#39;s memory and copying all its elements.<br>&gt;&gt; --<br>&gt;&gt; -Dave<br>&gt;<br>&gt;<br>&gt; Usually yes, but not in the case of lazy filter. If predicate contains<br>&gt; anything more than a dozen CPU instructions, single-pass version is faster.<br>&gt;<br>&gt; We often want the predicate to have side effects, but we cannot with<br>&gt; current implementation: the side effects will be doubled.<br>&gt;<br>&gt; I also wonder if it&#39;s possible to allocate array with capacity of<br>&gt; underlying collection (before all lazy stuff) and shrink it in the end.<br>&gt;<br>&gt; - Anton<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160619/89a95198/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Proposal] Fix lazy filter</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>June 19, 2016 at 10:00:00pm</p></header><div class="content"><p>I tested that behavior a bit more.<br>When lazy is called on non-collection that is converted to Array, it is<br>iterated once. `underestimatedCount` is not used.<br>When lazy is called on collection that is converted to Array, `count`<br>computed property is retrieved. Lazy collection types define `count` as<br>iterating and filtering through the underlying collection.<br></p><p>I think there are two issues:<br>1. underestimatedCount should require O(1) complexity. Array initializer<br>should always call it, as it perfectly suits its purpose<br>2. For collections, there should be choice to either use underestimateCount<br>(safe default) or count<br></p><p>The &quot;right&quot; interface should look like:<br></p><p>init&lt;S: SequenceType&gt;(_ s: S)<br>init&lt;S: CollectionType&gt;(_ c: C, preciseCount: Bool = false)<br></p><p>If getting precise count requires computations (otherwise it would be in<br>underestimatedCount), but programmer is sure that computations are cheap in<br>the specific case, he can opt in explicitly.<br></p><p>- Anton<br></p><p>Sun Jun 19 13:03:03 CDT 2016, Haravikk &lt;swift-evolution at haravikk.me&gt; wrote:<br></p><p>&gt; I think I agree that it’s a bug; as stated in the proposal the current<br>&gt; behaviour allows .underestimatedCount to consume the entire sequence<br>&gt; because sequences are potentially destructive (so its only possible to<br>&gt; guarantee access to each element once). Actually, the fact that this hasn’t<br>&gt; been discovered sooner suggests the current tests don’t include the use of<br>&gt; destructive sequences, which may need to be considered too, as all Sequence<br>&gt; methods should work correctly with both destructive and non-destructive<br>&gt; sequences.<br>&gt; So yeah, I think having lazy sequences of this type return 0 for<br>&gt; underestimateCount is the right solution for the time being.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160619/2f5dac3d/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
