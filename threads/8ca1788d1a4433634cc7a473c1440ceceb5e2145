<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/212199c56fae3d6b09dbf788f1c5e313?s=50"></div><header><strong>[Idea] Wrap switch cases in curly braces</strong> from <string>G B</string> &lt;g.c.b.at.work at gmail.com&gt;<p>July  7, 2016 at 01:00:00pm</p></header><div class="content"><p>It has always seemed odd to me that `case`s use a colon as a delimiter rather than curly braces like everything else.  Is there a reason for this other than the legacy of C-like languages?  <br></p><p>If I wanted to write a series of branching `if` \ `else` statements I would do it like so:<br></p><p>if x==0      { print(0) }<br>else if x==1 { print (1) }<br>else if x==2 { print(2) }<br>else         { print(&quot;other”) }<br></p><p>I believe all flow control is wrapped in curly braces, except for `case`s inside a `switch`:<br></p><p>switch x {<br>case 0: print(0)<br>case 1: print(1)<br>case 2: print(2)<br>default: print(&quot;other&quot;)<br>}<br></p><p><br>I feel like this would be more consistent with the rest of the syntax:<br></p><p>switch x {<br>case 0 { print(0) }<br>case 1 { print(1) }<br>case 2 { print(2) }<br>default { print(&quot;other”) }<br>}<br></p><p>The colon syntax evokes a label, but the modern, complex `case` statements in Swift don’t act much like labels.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Idea] Wrap switch cases in curly braces</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>July  7, 2016 at 04:00:00pm</p></header><div class="content"><p>When each case only takes up one line, it may look nice and concise. But what happens in the common case when your case takes up more lines and you indent your braces?<br></p><p>&gt; switch x {<br>&gt; case 0 { print(0) }<br>&gt; case 1 { print(1) }<br>&gt; case 2 { print(2) }<br>&gt; default { print(&quot;other”) }<br>&gt; }<br></p><p>switch x {<br>case 0 { <br>    print(0) <br>}<br>case 1 { <br>    print(1) <br>}<br>case 2 { <br>    print(2)<br>}<br>default { <br>    print(&quot;other”) <br>}<br>}<br></p><p>I think this looks much heavier and harder to read.  All the braces detract from the important stuff<br></p><p>Brandon <br></p><p><br></p><p>&gt; <br>&gt; The colon syntax evokes a label, but the modern, complex `case` statements in Swift don’t act much like labels.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160707/7ead24b7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/212199c56fae3d6b09dbf788f1c5e313?s=50"></div><header><strong>[Idea] Wrap switch cases in curly braces</strong> from <string>G B</string> &lt;g.c.b.at.work at gmail.com&gt;<p>July  7, 2016 at 01:00:00pm</p></header><div class="content"><p>The same can be said for if/else constructs though— all those braces get heavy if they’re all wrapping one line each.  Python does away with the braces and relies on indentation, but Swift has explicitly stated that it will not follow that path— yet case statements seem an exception.  It’s a collection of statements, they should be grouped in braces.<br></p><p>Your example is still only one line per case, but those braces are less of a problem when amortized over more lines (note that there are extra braces enforced by the `if` and `else`):<br></p><p>switch x {<br>case 0 {<br>    //a comment or two describing what&#39;s happening in this particular case<br>    //because commenting is good practice<br>    result=runSomeCode()<br>    if result {<br>        //do something here<br>    }<br>    else {<br>        //maybe some more stuff<br>        print(0)<br>    }<br>}<br></p><p>case 1 {<br>    //a comment or two describing what&#39;s happening in this particular case<br>    //because commenting is good practice<br>    result=runSomeCode()<br>    if result {<br>        //do something here<br>    }<br>    else {<br>        //maybe some more stuff<br>        print(1)<br>    }<br>}<br></p><p>case 2 {<br>    //a comment or two describing what&#39;s happening in this particular case<br>    //because commenting is good practice<br>    result=runSomeCode()<br>    if result {<br>        //do something here<br>    }<br>    else {<br>        //maybe some more stuff<br>        print(2)<br>    }<br>}<br></p><p>default {<br>    //a comment or two describing what&#39;s happening in this particular case<br>    //because commenting is good practice<br>    result=runSomeCode()<br>    if result {<br>        //do something here<br>    }<br>    else {<br>        //maybe some more stuff<br>        print(0)<br>    }<br>}<br>}<br></p><p><br></p><p>&gt; On Jul 7, 2016, at 13:24 , Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt; <br>&gt; When each case only takes up one line, it may look nice and concise. But what happens in the common case when your case takes up more lines and you indent your braces?<br>&gt; <br>&gt;&gt; switch x {<br>&gt;&gt; case 0 { print(0) }<br>&gt;&gt; case 1 { print(1) }<br>&gt;&gt; case 2 { print(2) }<br>&gt;&gt; default { print(&quot;other”) }<br>&gt;&gt; }<br>&gt; <br>&gt; switch x {<br>&gt; case 0 { <br>&gt;     print(0) <br>&gt; }<br>&gt; case 1 { <br>&gt;     print(1) <br>&gt; }<br>&gt; case 2 { <br>&gt;     print(2)<br>&gt; }<br>&gt; default { <br>&gt;     print(&quot;other”) <br>&gt; }<br>&gt; }<br>&gt; <br>&gt; I think this looks much heavier and harder to read.  All the braces detract from the important stuff<br>&gt; <br>&gt; Brandon <br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; The colon syntax evokes a label, but the modern, complex `case` statements in Swift don’t act much like labels.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160707/fde63bb5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Idea] Wrap switch cases in curly braces</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>July  7, 2016 at 04:00:00pm</p></header><div class="content"><p>But in general, if I use enums, I have more cases than I normally would have of if-else statements.<br></p><p>I try not to have many if-else chains but I generally have 2+ cases which would result in more braces than my typical if-else<br></p><p>&gt; On Jul 7, 2016, at 4:41 PM, G B via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The same can be said for if/else constructs though— all those braces get heavy if they’re all wrapping one line each.  Python does away with the braces and relies on indentation, but Swift has explicitly stated that it will not follow that path— yet case statements seem an exception.  It’s a collection of statements, they should be grouped in braces.<br>&gt; <br>&gt; Your example is still only one line per case, but those braces are less of a problem when amortized over more lines (note that there are extra braces enforced by the `if` and `else`):<br>&gt; <br>&gt; switch x {<br>&gt; case 0 {<br>&gt;     //a comment or two describing what&#39;s happening in this particular case<br>&gt;     //because commenting is good practice<br>&gt;     result=runSomeCode()<br>&gt;     if result {<br>&gt;         //do something here<br>&gt;     }<br>&gt;     else {<br>&gt;         //maybe some more stuff<br>&gt;         print(0)<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; case 1 {<br>&gt;     //a comment or two describing what&#39;s happening in this particular case<br>&gt;     //because commenting is good practice<br>&gt;     result=runSomeCode()<br>&gt;     if result {<br>&gt;         //do something here<br>&gt;     }<br>&gt;     else {<br>&gt;         //maybe some more stuff<br>&gt;         print(1)<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; case 2 {<br>&gt;     //a comment or two describing what&#39;s happening in this particular case<br>&gt;     //because commenting is good practice<br>&gt;     result=runSomeCode()<br>&gt;     if result {<br>&gt;         //do something here<br>&gt;     }<br>&gt;     else {<br>&gt;         //maybe some more stuff<br>&gt;         print(2)<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; default {<br>&gt;     //a comment or two describing what&#39;s happening in this particular case<br>&gt;     //because commenting is good practice<br>&gt;     result=runSomeCode()<br>&gt;     if result {<br>&gt;         //do something here<br>&gt;     }<br>&gt;     else {<br>&gt;         //maybe some more stuff<br>&gt;         print(0)<br>&gt;     }<br>&gt; }<br>&gt; }<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Jul 7, 2016, at 13:24 , Brandon Knope &lt;bknope at me.com &lt;mailto:bknope at me.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; When each case only takes up one line, it may look nice and concise. But what happens in the common case when your case takes up more lines and you indent your braces?<br>&gt;&gt; <br>&gt;&gt;&gt; switch x {<br>&gt;&gt;&gt; case 0 { print(0) }<br>&gt;&gt;&gt; case 1 { print(1) }<br>&gt;&gt;&gt; case 2 { print(2) }<br>&gt;&gt;&gt; default { print(&quot;other”) }<br>&gt;&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; switch x {<br>&gt;&gt; case 0 { <br>&gt;&gt;     print(0) <br>&gt;&gt; }<br>&gt;&gt; case 1 { <br>&gt;&gt;     print(1) <br>&gt;&gt; }<br>&gt;&gt; case 2 { <br>&gt;&gt;     print(2)<br>&gt;&gt; }<br>&gt;&gt; default { <br>&gt;&gt;     print(&quot;other”) <br>&gt;&gt; }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; I think this looks much heavier and harder to read.  All the braces detract from the important stuff<br>&gt;&gt; <br>&gt;&gt; Brandon <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The colon syntax evokes a label, but the modern, complex `case` statements in Swift don’t act much like labels.<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160707/d4831795/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/212199c56fae3d6b09dbf788f1c5e313?s=50"></div><header><strong>[Idea] Wrap switch cases in curly braces</strong> from <string>G B</string> &lt;g.c.b.at.work at gmail.com&gt;<p>July  7, 2016 at 02:00:00pm</p></header><div class="content"><p>Don’t get me wrong, I’m not a huge fan of having extra punctuation around, but as a matter of syntactic consistency, it seems the right thing to do.  It’s adding a single character (less than the `do` alternative that some are suggesting.  <br></p><p>It seems like the arguments against it are the same as the arguments for eliminating curly braces entirely— they’re ugly.  However it’s been decided that we’re going to use curly braces everywhere but here.<br></p><p>As an instructor, I’m not sure how I would explain to a student why everywhere else there is the potential for more than one statement in a syntactic slot they should use curly braces but that `case` is the sole exception because somebody did it that way in the 70’s.  We’ve already decided to throw away legacy C syntax in `for` loops, why not here while we have a shot at consistency?<br></p><p>Is there anywhere else that a sequence of statements isn&#39;t wrapped?<br></p><p><br>for &lt;#item#&gt; in &lt;#items#&gt; {<br>    &lt;#code#&gt;<br>}<br></p><p>if &lt;#condition#&gt; {<br>    &lt;#code#&gt;<br>} else if &lt;#condition#&gt; {<br>    &lt;#code#&gt;<br>} else {<br>    &lt;#code#&gt;<br>}<br></p><p>while &lt;#condition#&gt; {<br>    &lt;#code#&gt;<br>}<br></p><p>repeat {<br>    &lt;#code#&gt;<br>} while &lt;#condition#&gt;<br></p><p>var x:Type {<br>get {<br>    return _x<br>}<br>set {<br>    _x=newValue<br>}<br>}<br></p><p><br></p><p>&gt; On Jul 7, 2016, at 13:47 , Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt; <br>&gt; But in general, if I use enums, I have more cases than I normally would have of if-else statements.<br>&gt; <br>&gt; I try not to have many if-else chains but I generally have 2+ cases which would result in more braces than my typical if-else<br>&gt; <br>&gt;&gt; On Jul 7, 2016, at 4:41 PM, G B via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The same can be said for if/else constructs though— all those braces get heavy if they’re all wrapping one line each.  Python does away with the braces and relies on indentation, but Swift has explicitly stated that it will not follow that path— yet case statements seem an exception.  It’s a collection of statements, they should be grouped in braces.<br>&gt;&gt; <br>&gt;&gt; Your example is still only one line per case, but those braces are less of a problem when amortized over more lines (note that there are extra braces enforced by the `if` and `else`):<br>&gt;&gt; <br>&gt;&gt; switch x {<br>&gt;&gt; case 0 {<br>&gt;&gt;     //a comment or two describing what&#39;s happening in this particular case<br>&gt;&gt;     //because commenting is good practice<br>&gt;&gt;     result=runSomeCode()<br>&gt;&gt;     if result {<br>&gt;&gt;         //do something here<br>&gt;&gt;     }<br>&gt;&gt;     else {<br>&gt;&gt;         //maybe some more stuff<br>&gt;&gt;         print(0)<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; case 1 {<br>&gt;&gt;     //a comment or two describing what&#39;s happening in this particular case<br>&gt;&gt;     //because commenting is good practice<br>&gt;&gt;     result=runSomeCode()<br>&gt;&gt;     if result {<br>&gt;&gt;         //do something here<br>&gt;&gt;     }<br>&gt;&gt;     else {<br>&gt;&gt;         //maybe some more stuff<br>&gt;&gt;         print(1)<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; case 2 {<br>&gt;&gt;     //a comment or two describing what&#39;s happening in this particular case<br>&gt;&gt;     //because commenting is good practice<br>&gt;&gt;     result=runSomeCode()<br>&gt;&gt;     if result {<br>&gt;&gt;         //do something here<br>&gt;&gt;     }<br>&gt;&gt;     else {<br>&gt;&gt;         //maybe some more stuff<br>&gt;&gt;         print(2)<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; default {<br>&gt;&gt;     //a comment or two describing what&#39;s happening in this particular case<br>&gt;&gt;     //because commenting is good practice<br>&gt;&gt;     result=runSomeCode()<br>&gt;&gt;     if result {<br>&gt;&gt;         //do something here<br>&gt;&gt;     }<br>&gt;&gt;     else {<br>&gt;&gt;         //maybe some more stuff<br>&gt;&gt;         print(0)<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 7, 2016, at 13:24 , Brandon Knope &lt;bknope at me.com &lt;mailto:bknope at me.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; When each case only takes up one line, it may look nice and concise. But what happens in the common case when your case takes up more lines and you indent your braces?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; switch x {<br>&gt;&gt;&gt;&gt; case 0 { print(0) }<br>&gt;&gt;&gt;&gt; case 1 { print(1) }<br>&gt;&gt;&gt;&gt; case 2 { print(2) }<br>&gt;&gt;&gt;&gt; default { print(&quot;other”) }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; switch x {<br>&gt;&gt;&gt; case 0 { <br>&gt;&gt;&gt;     print(0) <br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; case 1 { <br>&gt;&gt;&gt;     print(1) <br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; case 2 { <br>&gt;&gt;&gt;     print(2)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; default { <br>&gt;&gt;&gt;     print(&quot;other”) <br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think this looks much heavier and harder to read.  All the braces detract from the important stuff<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Brandon <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The colon syntax evokes a label, but the modern, complex `case` statements in Swift don’t act much like labels.<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160707/1a04b424/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Idea] Wrap switch cases in curly braces</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>July  7, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On 7 Jul 2016, at 21:07, G B via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It has always seemed odd to me that `case`s use a colon as a delimiter rather than curly braces like everything else.  Is there a reason for this other than the legacy of C-like languages?  <br>&gt; <br>&gt; If I wanted to write a series of branching `if` \ `else` statements I would do it like so:<br>&gt; <br>&gt; if x==0      { print(0) }<br>&gt; else if x==1 { print (1) }<br>&gt; else if x==2 { print(2) }<br>&gt; else         { print(&quot;other”) }<br>&gt; <br>&gt; I believe all flow control is wrapped in curly braces, except for `case`s inside a `switch`:<br>&gt; <br>&gt; switch x {<br>&gt; case 0: print(0)<br>&gt; case 1: print(1)<br>&gt; case 2: print(2)<br>&gt; default: print(&quot;other&quot;)<br>&gt; }<br>&gt; <br>&gt; <br>&gt; I feel like this would be more consistent with the rest of the syntax:<br>&gt; <br>&gt; switch x {<br>&gt; case 0 { print(0) }<br>&gt; case 1 { print(1) }<br>&gt; case 2 { print(2) }<br>&gt; default { print(&quot;other”) }<br>&gt; }<br>&gt; <br>&gt; The colon syntax evokes a label, but the modern, complex `case` statements in Swift don’t act much like labels.<br></p><p>While I could maybe see this being an option, we already kind of have it thanks to do{} blocks:<br></p><p>	switch x {<br>		case 0: do {<br>			print(0)<br>		}<br>		case 1: do {<br>			print(1)<br>		}<br>		case 2: do {<br>			print(2)<br>		}<br>		default: do {<br>			print(&quot;other&quot;)<br>		}<br>	}<br></p><p>Not quite as pretty, but perfectly functional right now, but will many people use it if given the chance? If you need scoping then you probably have conditionals anyway, or you can just do{} blocks for those cases only, I don&#39;t really see the need to require them on all of them.<br></p><p>Personally I don&#39;t see the need; the case labels themselves are highlighted pretty clearly thanks to being keywords, and act as both the opening for their block, and the close of any previous block, meanwhile the whole switch has enclosing braces already. There&#39;s also the issue of scope; you can fall through from a case, so technically speaking the only scope may be the switch itself, as you could fall through every single case and thus visit everything on the way down.<br></p><p>So yeah, I think the construct kind of already makes sense as it is, it&#39;s just a bit of weird one conceptually.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160707/3e8e0dd9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Idea] Wrap switch cases in curly braces</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>July  7, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jul 7, 2016, at 2:05 PM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; There&#39;s also the issue of scope; you can fall through from a case, so technically speaking the only scope may be the switch itself, as you could fall through every single case and thus visit everything on the way down.<br></p><p>But they *are* separate scopes. A `let` in one case doesn&#39;t remain available in the next.<br></p><p>I prefer braces to colons, but I think I&#39;ve made this argument before and lost to the &quot;we don&#39;t deviate from C just for the hell of it&quot; rule.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f526807a5a76bc96427760ca78707cfb?s=50"></div><header><strong>[Idea] Wrap switch cases in curly braces</strong> from <string>Jon Akhtar</string> &lt;jona at herbalife.com&gt;<p>July  7, 2016 at 09:00:00pm</p></header><div class="content"><p>You can have this now:<br></p><p>switch x {<br>case 0: { print(0) }()<br>case 1: { print(1) }()<br>case 2: { print(2) }()<br>default: { print(&quot;other²) }()<br>}<br></p><p><br>However it isn¹t quite the same.<br></p><p>Case with a colon has far too many parallels in other very common<br>languages IMHO. I am not sure being consistent is always a must, it should<br>add something, ease of understanding, readability, etc. I don¹t think<br>braces here really do. Like I mentioned though, you can have them now if<br>you don¹t mind the extra parens.<br></p><p>Cheers<br></p><p>On 7/7/16, 13:07, &quot;swift-evolution-bounces at swift.org on behalf of G B via<br>swift-evolution&quot; &lt;swift-evolution-bounces at swift.org on behalf of<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;It has always seemed odd to me that `case`s use a colon as a delimiter<br>&gt;rather than curly braces like everything else.  Is there a reason for<br>&gt;this other than the legacy of C-like languages?<br>&gt;<br>&gt;If I wanted to write a series of branching `if` \ `else` statements I<br>&gt;would do it like so:<br>&gt;<br>&gt;if x==0      { print(0) }<br>&gt;else if x==1 { print (1) }<br>&gt;else if x==2 { print(2) }<br>&gt;else         { print(&quot;other²) }<br>&gt;<br>&gt;I believe all flow control is wrapped in curly braces, except for `case`s<br>&gt;inside a `switch`:<br>&gt;<br>&gt;switch x {<br>&gt;case 0: print(0)<br>&gt;case 1: print(1)<br>&gt;case 2: print(2)<br>&gt;default: print(&quot;other&quot;)<br>&gt;}<br>&gt;<br>&gt;<br>&gt;I feel like this would be more consistent with the rest of the syntax:<br>&gt;<br>&gt;switch x {<br>&gt;case 0 { print(0) }<br>&gt;case 1 { print(1) }<br>&gt;case 2 { print(2) }<br>&gt;default { print(&quot;other²) }<br>&gt;}<br>&gt;<br>&gt;The colon syntax evokes a label, but the modern, complex `case`<br>&gt;statements in Swift don¹t act much like labels.<br>&gt;_______________________________________________<br>&gt;swift-evolution mailing list<br>&gt;swift-evolution at swift.org<br>&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Idea] Wrap switch cases in curly braces</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>July  8, 2016 at 12:00:00am</p></header><div class="content"><p>What would be the proposed syntax for cases with associated values?<br></p><p>In general, +1 for simplifying the syntax, but I&#39;m not sure it&#39;d work well, given that enums take on a larger roll in Swift than they do in other languages. Or maybe it&#39;d be fine... I&#39;m just too tired to picture it in my head.<br></p><p>- Dave Sweeris<br></p><p>&gt; On Jul 7, 2016, at 15:07, G B via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It has always seemed odd to me that `case`s use a colon as a delimiter rather than curly braces like everything else.  Is there a reason for this other than the legacy of C-like languages?  <br>&gt; <br>&gt; If I wanted to write a series of branching `if` \ `else` statements I would do it like so:<br>&gt; <br>&gt; if x==0      { print(0) }<br>&gt; else if x==1 { print (1) }<br>&gt; else if x==2 { print(2) }<br>&gt; else         { print(&quot;other”) }<br>&gt; <br>&gt; I believe all flow control is wrapped in curly braces, except for `case`s inside a `switch`:<br>&gt; <br>&gt; switch x {<br>&gt; case 0: print(0)<br>&gt; case 1: print(1)<br>&gt; case 2: print(2)<br>&gt; default: print(&quot;other&quot;)<br>&gt; }<br>&gt; <br>&gt; <br>&gt; I feel like this would be more consistent with the rest of the syntax:<br>&gt; <br>&gt; switch x {<br>&gt; case 0 { print(0) }<br>&gt; case 1 { print(1) }<br>&gt; case 2 { print(2) }<br>&gt; default { print(&quot;other”) }<br>&gt; }<br>&gt; <br>&gt; The colon syntax evokes a label, but the modern, complex `case` statements in Swift don’t act much like labels.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/212199c56fae3d6b09dbf788f1c5e313?s=50"></div><header><strong>[Idea] Wrap switch cases in curly braces</strong> from <string>G B</string> &lt;g.c.b.at.work at gmail.com&gt;<p>July  7, 2016 at 10:00:00pm</p></header><div class="content"><p>I’d imagine it would be the same just without the colon and with the braces:<br></p><p><br>enum MyEnum {<br>    case IntEnum(Int)<br>    case StringEnum(String)<br>}<br></p><p><br>var x=MyEnum.StringEnum(&quot;Hello&quot;)<br></p><p>switch x {<br>    case .IntEnum(let x) {<br>        print(x)<br>    }<br></p><p>    case .StringEnum(let x) {<br>        print(x)<br>    }<br></p><p>}<br></p><p><br></p><p>Not much different than:<br></p><p>if case .StringEnum(let v) = x {<br>    print(v+&quot; again&quot;)<br>}<br></p><p>except that the switch compares all case statements against x.<br></p><p><br></p><p>&gt; On Jul 7, 2016, at 10:37 PM, David Sweeris &lt;davesweeris at mac.com&gt; wrote:<br>&gt; <br>&gt; What would be the proposed syntax for cases with associated values?<br>&gt; <br>&gt; In general, +1 for simplifying the syntax, but I&#39;m not sure it&#39;d work well, given that enums take on a larger roll in Swift than they do in other languages. Or maybe it&#39;d be fine... I&#39;m just too tired to picture it in my head.<br>&gt; <br>&gt; - Dave Sweeris<br>&gt; <br>&gt;&gt; On Jul 7, 2016, at 15:07, G B via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; It has always seemed odd to me that `case`s use a colon as a delimiter rather than curly braces like everything else.  Is there a reason for this other than the legacy of C-like languages?  <br>&gt;&gt; <br>&gt;&gt; If I wanted to write a series of branching `if` \ `else` statements I would do it like so:<br>&gt;&gt; <br>&gt;&gt; if x==0      { print(0) }<br>&gt;&gt; else if x==1 { print (1) }<br>&gt;&gt; else if x==2 { print(2) }<br>&gt;&gt; else         { print(&quot;other”) }<br>&gt;&gt; <br>&gt;&gt; I believe all flow control is wrapped in curly braces, except for `case`s inside a `switch`:<br>&gt;&gt; <br>&gt;&gt; switch x {<br>&gt;&gt; case 0: print(0)<br>&gt;&gt; case 1: print(1)<br>&gt;&gt; case 2: print(2)<br>&gt;&gt; default: print(&quot;other&quot;)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I feel like this would be more consistent with the rest of the syntax:<br>&gt;&gt; <br>&gt;&gt; switch x {<br>&gt;&gt; case 0 { print(0) }<br>&gt;&gt; case 1 { print(1) }<br>&gt;&gt; case 2 { print(2) }<br>&gt;&gt; default { print(&quot;other”) }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; The colon syntax evokes a label, but the modern, complex `case` statements in Swift don’t act much like labels.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3ad74a0b72273db84c85d67253fe5982?s=50"></div><header><strong>[Idea] Wrap switch cases in curly braces</strong> from <string>Peter Eddy</string> &lt;peter.eddy at gmail.com&gt;<p>July 10, 2016 at 02:00:00pm</p></header><div class="content"><p>I appreciate the desire for consistency but I really don&#39;t like this<br>proposal. I agree with others who&#39;ve said that it makes the code look heavy<br>and that the extra parens only obscure the actual code, at least when the<br>code is short. I don&#39;t think there is any way in which the parens make the<br>code clearer, they&#39;re just visual noise.<br></p><p>If we insist on consistency then shouldn&#39;t we also do away with implicit<br>returns from single-expression closures? After all this behavior is<br>inconsistent with named functions. And shouldn&#39;t closures also declare<br>their signature before their opening brace, rather than after, also to be<br>consistent with named functions?<br></p><p>All these breaks with consistency have the effect of making the language<br>easier and more pleasant to read, and they don&#39;t seem to be major stumbling<br>blocks for people learning Swift. I hate to see them go away.<br></p><p>- Peter<br></p><p>On Fri, Jul 8, 2016 at 1:58 AM, G B via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I’d imagine it would be the same just without the colon and with the<br>&gt; braces:<br>&gt;<br>&gt;<br>&gt; enum MyEnum {<br>&gt;     case IntEnum(Int)<br>&gt;     case StringEnum(String)<br>&gt; }<br>&gt;<br>&gt;<br>&gt; var x=MyEnum.StringEnum(&quot;Hello&quot;)<br>&gt;<br>&gt; switch x {<br>&gt;     case .IntEnum(let x) {<br>&gt;         print(x)<br>&gt;     }<br>&gt;<br>&gt;     case .StringEnum(let x) {<br>&gt;         print(x)<br>&gt;     }<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt;<br>&gt; Not much different than:<br>&gt;<br>&gt; if case .StringEnum(let v) = x {<br>&gt;     print(v+&quot; again&quot;)<br>&gt; }<br>&gt;<br>&gt; except that the switch compares all case statements against x.<br>&gt;<br>&gt;<br>&gt;<br>&gt; &gt; On Jul 7, 2016, at 10:37 PM, David Sweeris &lt;davesweeris at mac.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; What would be the proposed syntax for cases with associated values?<br>&gt; &gt;<br>&gt; &gt; In general, +1 for simplifying the syntax, but I&#39;m not sure it&#39;d work<br>&gt; well, given that enums take on a larger roll in Swift than they do in other<br>&gt; languages. Or maybe it&#39;d be fine... I&#39;m just too tired to picture it in my<br>&gt; head.<br>&gt; &gt;<br>&gt; &gt; - Dave Sweeris<br>&gt; &gt;<br>&gt; &gt;&gt; On Jul 7, 2016, at 15:07, G B via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; It has always seemed odd to me that `case`s use a colon as a delimiter<br>&gt; rather than curly braces like everything else.  Is there a reason for this<br>&gt; other than the legacy of C-like languages?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; If I wanted to write a series of branching `if` \ `else` statements I<br>&gt; would do it like so:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; if x==0      { print(0) }<br>&gt; &gt;&gt; else if x==1 { print (1) }<br>&gt; &gt;&gt; else if x==2 { print(2) }<br>&gt; &gt;&gt; else         { print(&quot;other”) }<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I believe all flow control is wrapped in curly braces, except for<br>&gt; `case`s inside a `switch`:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; switch x {<br>&gt; &gt;&gt; case 0: print(0)<br>&gt; &gt;&gt; case 1: print(1)<br>&gt; &gt;&gt; case 2: print(2)<br>&gt; &gt;&gt; default: print(&quot;other&quot;)<br>&gt; &gt;&gt; }<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I feel like this would be more consistent with the rest of the syntax:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; switch x {<br>&gt; &gt;&gt; case 0 { print(0) }<br>&gt; &gt;&gt; case 1 { print(1) }<br>&gt; &gt;&gt; case 2 { print(2) }<br>&gt; &gt;&gt; default { print(&quot;other”) }<br>&gt; &gt;&gt; }<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; The colon syntax evokes a label, but the modern, complex `case`<br>&gt; statements in Swift don’t act much like labels.<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160710/6128a169/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b044339bf3ee0c9738b99dbd6331811?s=50"></div><header><strong>[Idea] Wrap switch cases in curly braces</strong> from <string>Dennis De Mars</string> &lt;demars at fractaldomains.com&gt;<p>July 10, 2016 at 01:00:00pm</p></header><div class="content"><p>I don’t like this idea at all. The current switch syntax is really clean, one of the nicest parts of Swift, and this would really turn it into something messy.<br></p><p>I’ll make a possibly controversial statement here: one of the worst aspects of C syntax, which is unfortunately perpetuated by many modern languages, Swift included, is the use of curly braces everywhere to demarcate every kind of block: every control structure, every data structure and every function body.<br></p><p>This leads to a proliferation of nested braces which all have to be placed correctly in order for the code to be correct. Of course, we all use indentation to help manage this, but I think we all know that once the closing brace is sufficiently far from the opening brace, it becomes difficult to tell which brace matches which even with indentation. I think I spend a significant amount of my development time just eyeballing those closing braces. Of course, we also have editor features to help match them up but relying on such editor features might be an indication of a flaw in the language. At any rate, it impedes readability of the code, editor or no editor.<br></p><p>Not having the braces for each case is, to me, analogous to the way Swift removed the outermost parenthesis in the if statement conditional part. When you have a complex conditional expression with nested parentheses, removing that unnecessary outermost pair really improves readability (and reduces possibility of error). This can be done because the outermost parentheses aren’t really necessary to demarcate the boundaries of the expression.<br></p><p>Similarly, the case keywords in the switch statement sufficiently demarcate the extent of the statement block; it is unnecessary to toss in an extra pair of these brace characters that may already be heavily used in the statement block itself.<br></p><p>I think the extra burden on readability (and writability) of having the extra pair of nested braces is not justified by the desire for consistency. If consistency is so important, then rather than detracting from the quality of the switch statement by adding the braces, why don’t we improve the quality of the rest of the language by getting rid of some of those braces in the other constructs that use them! (Note: I don’t really expect that to happen…)<br></p><p>- Dennis D.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/212199c56fae3d6b09dbf788f1c5e313?s=50"></div><header><strong>[Idea] Wrap switch cases in curly braces</strong> from <string>G B</string> &lt;g.c.b.at.work at gmail.com&gt;<p>July 10, 2016 at 04:00:00pm</p></header><div class="content"><p>The discussion so far has given me a chance to organize my thinking, so here’s a more complete train of thought.<br></p><p>I get that people don’t like extra punctuation.  The commonly rejected proposals, however, make it clear that braces are here to stay and we should be designing the syntax right now with that in mind.  It took me a long time to get used to not using them in Python, now I’m getting used to using them again in Swift.  Swift has a long life ahead of it, and there are going to be plenty of places where the syntax is going to become inconsistent in the service of supporting new features.  Now is when we set the starting point though and try to set ourselves up in a way that requires a minimum of syntax goofs in the future.<br></p><p><br>—=Philosophy=— <br></p><p>As philosophical backdrop, here’s the link on removing braces in the “commonly rejected proposals” section:<br>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003656.html<br></p><p>I’ll pull out two quotes from that post, one from Kevin Ballard:<br>&quot;There is not in fact an emphasis on conciseness. This has been repeated many times by the swift team. Conciseness is not a goal of Swift, but expressiveness absolutely is. Braces are a well-understood and simple way to express the notion of a scope/closure.”<br></p><p>and another edited as suggested by Chris Lattner:<br>&quot;&#39;Be like C&#39; isn&#39;t a goal either of course, but when deciding between two alternatives that have no compelling arguments either way, picking the one that is most familiar to programmers in the extended C family is a good idea.&quot;<br></p><p><br>So, from that I take:<br>1) braces indicate scoping<br>2) conciseness isn’t an end in itself<br>3) we should err on the side of being Cish when no other arguments prevail.<br></p><p><br></p><p><br>—=In C `cases` Aren’t Scopes, in Swift They Are=—<br></p><p>Starting from what’s Cish, here’s a snippet of Swift code:<br></p><p>let x=5<br>switch x {<br>  case 3:<br>    let y=5<br>    print(x,&quot; &quot;,y)<br></p><p>  case 5:<br>    print(&quot;Two&quot;,x,&quot;s”)<br></p><p>  default:<br>    print(“default&quot;)<br>}<br></p><p><br>This runs fine and prints “Two 5 s” to the console.<br></p><p>This is something similar in C:<br></p><p>int x=5;<br>switch (x) {<br>  case 3:<br>    int y=5;<br>    printf(&quot;%d %d&quot;,x,y);<br>    break;<br></p><p>  case 5:<br>    printf(&quot;Two %d s&quot;,x);<br>    break;<br></p><p>  default:<br>    printf(“default&quot;);<br>}<br></p><p><br>This code fails.  C gives me an error pointing at `int y=5;` complaining that it expected an expression there.  C++ gives me an error that it can’t jump to `case 5:` because it would skip over the declaration of `y`.<br></p><p>I can fix this in both C and C++ by wrapping the `case 3:` in curly braces, creating a local scope:<br></p><p>int x=5;<br>switch (x) {<br>  case 3:  {<br>    int y=5;<br>    printf(&quot;%d %d&quot;,x,y);<br>    break;<br>  }<br></p><p>  case 5:<br>    printf(&quot;Two %d s&quot;,x);<br>    break;<br></p><p>  default:<br>    printf(&quot;default&quot;);<br>}<br></p><p>This code compiles fine in both C and C++.  A new scope has been delimited and created, and `y` only exists in that scope.<br></p><p><br>So, by both criteria 1) and 3), Swift should be using braces on `case` statements.  Each case is a scope unto itself, and the extended C family of languages would require braces in that event.<br></p><p><br></p><p><br></p><p>—=Conciseness, Ugliness and Nested Braces=—<br></p><p>Conciseness is not an emphasis of Swift, but even if it were then this is not a particularly in-concise change to the syntax.  The suggestion here is to remove one punctuation mark and add two for a net gain of 1 character.  This doesn’t strike me as unduly burdensome.<br></p><p>The better arguments are those on aesthetics and ease of use.  Each of these seems to focus on opposite situations.  The ugliness is when there is only one line per case, the ease of use challenge is when there are many and the developer needs to determine how many braces to close.<br></p><p>How common is it to have a single line per case?<br></p><p>Aesthetics, at least, are mostly subjective.  Ease of use, in part, depends on habits.  In both cases, however, I’d argue that the aesthetically preferable design, and the method least likely to introduce errors, is the one that is most consistent with the rest of the language.  Things tend to be uglier when they stand out as unusual, and habits force us to follow patterns, introducing errors when the pattern doesn’t hold.<br></p><p>From that perspective, this is what Swift looks like everywhere else:<br></p><p>if x = 3      { print(“Three”) }<br>else if x = 5 { print(“Five”) }<br>else          { print(“Default”) }<br></p><p>It also doesn’t shy away from nested braces:<br></p><p>var x:Int {<br>  get { return _x }<br>  set { _x = newValue }<br>}<br></p><p><br>Aesthetically, is it less ugly to have some scopes require braces and others not?  I really thought the square bracket messaging syntax of Obj-C was ugly until I got used to it because square brackets were for subscripting and looked “heavy” for method calls.  <br></p><p>From an ease of use perspective, it is more likely to forget to add a closing brace when braces are used everywhere, or to accidentally add one in the one place they aren’t?<br></p><p><br></p><p><br>—=What Isn’t Like C Shouldn’t Look Like C=—<br></p><p>There’s also the point that `switch` statements in Swift aren’t the same as those in C.  The different scoping rules are one difference. The lack of default fall through is another.  And of course the additional capabilities of the `case` condition itself.<br></p><p>For those reasons, deviating from the C syntax might not only be justified, but desirable as a notational reminder that this isn’t your father’s `switch` statement.  The closing brace in particular gives a visual cue that fall through isn’t going to happen.<br></p><p><br></p><p><br>—=Leaving the Door Open for a `switch` Expression=—<br></p><p>Another commonly rejected proposal is the request for a `switch` expression:<br>https://lists.swift.org/pipermail/swift-evolution/2015-December/000393.html<br></p><p>To my eyes, the rejection of this proposal is not as iron clad as the rejection of removing curly braces.  Here’s a quote from Chris Lattner:<br></p><p>&quot;FWIW, I (and many other people) would like to consider turning many statement-y things in swift into expressions.  I’d love to see the weird ?: ternary operator get nuked and replaced with an if/else expression of some sort.  This is an area that the apple team hasn’t had bandwidth to consider carefully.<br></p><p>That said, there are challenges here in the details.  How will the grammar work?”<br></p><p><br>I think wrapping the `case` statements in curly braces in the statement version of `switch` gets us closer to a reasonable answer for how the grammar might work on an expression version:  the expression version would be delimited with colons similar to how the ternary operator is.<br></p><p>Something like this might work:<br></p><p>let s:String? = switch x <br>                case 3: “Three” <br>                case 5: “Five” <br>                default: nil<br></p><p>In the expression, the `case` clauses don’t represent scopes and shouldn’t be curly braced so the colons give a nice syntactic distinction.<br></p><p>I’m not holding by breath for such a feature, but this change to the `switch` statement makes such a thing easier to adopt.<br></p><p><br></p><p><br></p><p>&gt; On Jul 10, 2016, at 13:37 , Dennis De Mars &lt;demars at fractaldomains.com&gt; wrote:<br>&gt; <br>&gt; I don’t like this idea at all. The current switch syntax is really clean, one of the nicest parts of Swift, and this would really turn it into something messy.<br>&gt; <br>&gt; I’ll make a possibly controversial statement here: one of the worst aspects of C syntax, which is unfortunately perpetuated by many modern languages, Swift included, is the use of curly braces everywhere to demarcate every kind of block: every control structure, every data structure and every function body.<br>&gt; <br>&gt; This leads to a proliferation of nested braces which all have to be placed correctly in order for the code to be correct. Of course, we all use indentation to help manage this, but I think we all know that once the closing brace is sufficiently far from the opening brace, it becomes difficult to tell which brace matches which even with indentation. I think I spend a significant amount of my development time just eyeballing those closing braces. Of course, we also have editor features to help match them up but relying on such editor features might be an indication of a flaw in the language. At any rate, it impedes readability of the code, editor or no editor.<br>&gt; <br>&gt; Not having the braces for each case is, to me, analogous to the way Swift removed the outermost parenthesis in the if statement conditional part. When you have a complex conditional expression with nested parentheses, removing that unnecessary outermost pair really improves readability (and reduces possibility of error). This can be done because the outermost parentheses aren’t really necessary to demarcate the boundaries of the expression.<br>&gt; <br>&gt; Similarly, the case keywords in the switch statement sufficiently demarcate the extent of the statement block; it is unnecessary to toss in an extra pair of these brace characters that may already be heavily used in the statement block itself.<br>&gt; <br>&gt; I think the extra burden on readability (and writability) of having the extra pair of nested braces is not justified by the desire for consistency. If consistency is so important, then rather than detracting from the quality of the switch statement by adding the braces, why don’t we improve the quality of the rest of the language by getting rid of some of those braces in the other constructs that use them! (Note: I don’t really expect that to happen…)<br>&gt; <br>&gt; - Dennis D.<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
