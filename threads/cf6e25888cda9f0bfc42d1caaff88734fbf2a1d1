<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e5bf5d39881b91eb515f07d65c57b1fa?s=50"></div><header><strong>Updating C-wrapper to Swift 3</strong> from <string>John Brownie</string> &lt;john_brownie at sil.org&gt;<p>September 28, 2016 at 09:00:00am</p></header><div class="content"><p>I have a Swift wrapper for the expat XML parser, and I just went through <br>the update to Swift 3, and I&#39;m thrown a series of errors that mostly <br>appear to be of two types. Here is a representative function of the <br>first type:<br></p><p>     func parse() throws {<br>         var done = false<br>         while !done {<br>             let buffer: UnsafeMutablePointer&lt;Void&gt; = <br>XML_GetBuffer(parser, Int32(bufsize))<br>             if buffer == nil {<br>                 let errorCode = XML_GetErrorCode(parser)<br>                 throw ExpatError(reason: &quot;Error \(errorCode), <br>\(XML_ErrorString(errorCode))&quot;)<br>             }<br>             let bytesRead = <br>readData(UnsafeMutablePointer&lt;UInt8&gt;(buffer), bufferLength: bufsize)<br>             done = bytesRead &lt; bufsize<br>             if XML_ParseBuffer(parser, Int32(bytesRead), Int32(done ? 1 <br>: 0)) != XML_STATUS_OK {<br>                 let errorCode = XML_GetErrorCode(parser)<br>                 throw ExpatError(reason: &quot;Error \(errorCode), <br>\(XML_ErrorString(errorCode))&quot;)<br>             }<br>         }<br>     }<br></p><p>Xcode 8&#39;s migrator changed the declaration of buffer to <br>UnsafeMutableRawPointer?, but the readData call gives an error:<br></p><p>Cannot invoke initializer for type &#39;UnsafeMutablePointer&lt;UInt8&gt;&#39; with an <br>argument list of type &#39;(UnsafeMutableRawPointer?)&#39;<br>Pointer conversion restricted: use &#39;.assumingMemoryBound(to:)&#39; or <br>&#39;.bindMemory(to:capacity:)&#39; to view memory as a type.<br>Overloads for &#39;UnsafeMutablePointer&lt;UInt8&gt;&#39; exist with these partially <br>matching parameter lists: (RawPointer), (OpaquePointer), <br>(OpaquePointer?), (UnsafeMutablePointer&lt;Pointee&gt;), <br>(UnsafeMutablePointer&lt;Pointee&gt;?)<br></p><p>Where can I read up on how to make the conversion? My initial effort is:<br></p><p>             let bytesRead = readData(buffer!.bindMemory(to: UInt8.self, <br>capacity: bufsize), bufferLength: bufsize)<br></p><p>That&#39;s more or less thrashing around with no real understanding.<br></p><p>The second type is turning a closure into the appropriate C function <br>pointer. For example:<br></p><p>             XML_SetEndElementHandler(parser) { (userData: <br>UnsafeMutableRawPointer, name: UnsafePointer&lt;XML_Char&gt;) -&gt; Void in<br>                 let theParser = unsafeBitCast(userData, to: <br>ExpatSwift.self)<br>                 let theName = ExpatSwift.getString(name)<br>                 theParser.endElement(theName)<br>             }<br></p><p>This gets an error:<br></p><p>Cannot convert value of type &#39;(UnsafeMutableRawPointer, <br>UnsafePointer&lt;XML_Char&gt;) -&gt; Void&#39; to expected argument type <br>&#39;XML_EndElementHandler!&#39;<br></p><p>XML_EndElementHandler is defined as:<br></p><p>typedef void (XMLCALL *XML_EndElementHandler) (void *userData,<br>                                                const XML_Char *name);<br></p><p>Here I have no real clue as to how to fix it.<br></p><p>So, any pointers to either how to fix these problems or to a good source <br>to read to understand them?<br></p><p>John<br>-- <br>John Brownie<br>In Finland on furlough from SIL Papua New Guinea<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2bc666e29724cd3bdf46b6cbbe4a07bb?s=50"></div><header><strong>Updating C-wrapper to Swift 3</strong> from <string>Quinn &quot;The Eskimo!&quot;</string> &lt;eskimo1 at apple.com&gt;<p>September 28, 2016 at 09:00:00am</p></header><div class="content"><p>On 28 Sep 2016, at 07:29, John Brownie via swift-users &lt;swift-users at swift.org&gt; wrote:<br></p><p>&gt; Where can I read up on how to make the conversion?<br></p><p>I recommend reading the whole “Migrating to Swift 2.3 or Swift 3 from Swift 2.2” doc, but for this specific issue you should start with the “UnsafeRawPointer Migration” doc that it links to.<br></p><p>&lt;https://swift.org/migration-guide/&gt;<br></p><p>&lt;https://swift.org/migration-guide/se-0107-migrate.html&gt;<br></p><p>Share and Enjoy<br>--<br>Quinn &quot;The Eskimo!&quot;                    &lt;http://www.apple.com/developer/&gt;<br>Apple Developer Relations, Developer Technical Support, Core OS/Hardware<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e5bf5d39881b91eb515f07d65c57b1fa?s=50"></div><header><strong>Updating C-wrapper to Swift 3</strong> from <string>John Brownie</string> &lt;john_brownie at sil.org&gt;<p>September 28, 2016 at 08:00:00pm</p></header><div class="content"><p>Thanks for the pointers. Good reading, but I&#39;m still confused. I think <br>that the first issue is clear to me now, but I don&#39;t know what I have to <br>do to make the closure be seen as satisfying the type of the function <br>pointer. It worked in Swift 2.2 as<br></p><p>             XML_SetEndElementHandler(parser) { (userData: <br>UnsafeMutablePointer&lt;Void&gt;, name: UnsafePointer&lt;XML_Char&gt;) -&gt; Void in<br></p><p>All that&#39;s changed is making the UnsafeMutablePointer&lt;Void&gt; into <br>UnsafeMutableRawPointer, unless it&#39;s the unwrapped nature of the <br>parameter in the error message:<br></p><p>Cannot convert value of type &#39;(UnsafeMutableRawPointer, <br>UnsafePointer&lt;XML_Char&gt;) -&gt; Void&#39; to expected argument type <br>&#39;XML_EndElementHandler!&#39;<br></p><p>I don&#39;t know what I need to do next. Any help is much appreciated.<br>&gt; Quinn &quot;The Eskimo!&quot; via swift-users &lt;mailto:swift-users at swift.org&gt;<br>&gt; 28 September 2016 at 11:26<br>&gt;<br>&gt; I recommend reading the whole “Migrating to Swift 2.3 or Swift 3 from <br>&gt; Swift 2.2” doc, but for this specific issue you should start with the <br>&gt; “UnsafeRawPointer Migration” doc that it links to.<br>&gt;<br>&gt; &lt;https://swift.org/migration-guide/&gt;<br>&gt;<br>&gt; &lt;https://swift.org/migration-guide/se-0107-migrate.html&gt;<br>&gt;<br>&gt; Share and Enjoy<br>&gt; --<br>&gt; Quinn &quot;The Eskimo!&quot; &lt;http://www.apple.com/developer/&gt;<br>&gt; Apple Developer Relations, Developer Technical Support, Core OS/Hardware<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; John Brownie &lt;mailto:john_brownie at sil.org&gt;<br>&gt; 28 September 2016 at 9:29<br>&gt; I have a Swift wrapper for the expat XML parser, and I just went <br>&gt; through the update to Swift 3, and I&#39;m thrown a series of errors that <br>&gt; mostly appear to be of two types. Here is a representative function of <br>&gt; the first type:<br>&gt;<br>&gt;     func parse() throws {<br>&gt;         var done = false<br>&gt;         while !done {<br>&gt;             let buffer: UnsafeMutablePointer&lt;Void&gt; = <br>&gt; XML_GetBuffer(parser, Int32(bufsize))<br>&gt;             if buffer == nil {<br>&gt;                 let errorCode = XML_GetErrorCode(parser)<br>&gt;                 throw ExpatError(reason: &quot;Error \(errorCode), <br>&gt; \(XML_ErrorString(errorCode))&quot;)<br>&gt;             }<br>&gt;             let bytesRead = <br>&gt; readData(UnsafeMutablePointer&lt;UInt8&gt;(buffer), bufferLength: bufsize)<br>&gt;             done = bytesRead &lt; bufsize<br>&gt;             if XML_ParseBuffer(parser, Int32(bytesRead), Int32(done ? <br>&gt; 1 : 0)) != XML_STATUS_OK {<br>&gt;                 let errorCode = XML_GetErrorCode(parser)<br>&gt;                 throw ExpatError(reason: &quot;Error \(errorCode), <br>&gt; \(XML_ErrorString(errorCode))&quot;)<br>&gt;             }<br>&gt;         }<br>&gt;     }<br>&gt;<br>&gt; Xcode 8&#39;s migrator changed the declaration of buffer to <br>&gt; UnsafeMutableRawPointer?, but the readData call gives an error:<br>&gt;<br>&gt; Cannot invoke initializer for type &#39;UnsafeMutablePointer&lt;UInt8&gt;&#39; with <br>&gt; an argument list of type &#39;(UnsafeMutableRawPointer?)&#39;<br>&gt; Pointer conversion restricted: use &#39;.assumingMemoryBound(to:)&#39; or <br>&gt; &#39;.bindMemory(to:capacity:)&#39; to view memory as a type.<br>&gt; Overloads for &#39;UnsafeMutablePointer&lt;UInt8&gt;&#39; exist with these partially <br>&gt; matching parameter lists: (RawPointer), (OpaquePointer), <br>&gt; (OpaquePointer?), (UnsafeMutablePointer&lt;Pointee&gt;), <br>&gt; (UnsafeMutablePointer&lt;Pointee&gt;?)<br>&gt;<br>&gt; Where can I read up on how to make the conversion? My initial effort is:<br>&gt;<br>&gt;             let bytesRead = readData(buffer!.bindMemory(to: <br>&gt; UInt8.self, capacity: bufsize), bufferLength: bufsize)<br>&gt;<br>&gt; That&#39;s more or less thrashing around with no real understanding.<br>&gt;<br>&gt; The second type is turning a closure into the appropriate C function <br>&gt; pointer. For example:<br>&gt;<br>&gt;             XML_SetEndElementHandler(parser) { (userData: <br>&gt; UnsafeMutableRawPointer, name: UnsafePointer&lt;XML_Char&gt;) -&gt; Void in<br>&gt;                 let theParser = unsafeBitCast(userData, to: <br>&gt; ExpatSwift.self)<br>&gt;                 let theName = ExpatSwift.getString(name)<br>&gt;                 theParser.endElement(theName)<br>&gt;             }<br>&gt;<br>&gt; This gets an error:<br>&gt;<br>&gt; Cannot convert value of type &#39;(UnsafeMutableRawPointer, <br>&gt; UnsafePointer&lt;XML_Char&gt;) -&gt; Void&#39; to expected argument type <br>&gt; &#39;XML_EndElementHandler!&#39;<br>&gt;<br>&gt; XML_EndElementHandler is defined as:<br>&gt;<br>&gt; typedef void (XMLCALL *XML_EndElementHandler) (void *userData,<br>&gt;                                                const XML_Char *name);<br>&gt;<br>&gt; Here I have no real clue as to how to fix it.<br>&gt;<br>&gt; So, any pointers to either how to fix these problems or to a good <br>&gt; source to read to understand them?<br>&gt;<br>&gt; John<br></p><p>-- <br>John Brownie<br>In Finland on furlough from SIL Papua New Guinea<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160928/4de67acc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8dfc6932943f38e7a7de48be3194f13c?s=50"></div><header><strong>Updating C-wrapper to Swift 3</strong> from <string>Michael Ilseman</string> &lt;milseman at apple.com&gt;<p>September 28, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Sep 28, 2016, at 10:03 AM, John Brownie via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Thanks for the pointers. Good reading, but I&#39;m still confused. I think that the first issue is clear to me now, but I don&#39;t know what I have to do to make the closure be seen as satisfying the type of the function pointer. It worked in Swift 2.2 as<br>&gt; <br>&gt;             XML_SetEndElementHandler(parser) { (userData: UnsafeMutablePointer&lt;Void&gt;, name: UnsafePointer&lt;XML_Char&gt;) -&gt; Void in<br>&gt; <br>&gt; All that&#39;s changed is making the UnsafeMutablePointer&lt;Void&gt; into UnsafeMutableRawPointer, unless it&#39;s the unwrapped nature of the parameter in the error message:<br>&gt; <br>&gt; Cannot convert value of type &#39;(UnsafeMutableRawPointer, UnsafePointer&lt;XML_Char&gt;) -&gt; Void&#39; to expected argument type &#39;XML_EndElementHandler!&#39; <br>&gt; <br>&gt; I don&#39;t know what I need to do next. Any help is much appreciated.<br></p><p><br>Could you share the generated interface for these functions, so that we can see how they are being imported into Swift? Also, do you know exactly what version of the Swift compiler you’re using (I ask because there have been recent improvements in error messages)?<br>&gt;&gt; Quinn &quot;The Eskimo!&quot; via swift-users &lt;mailto:swift-users at swift.org&gt;  28 September 2016 at 11:26<br>&gt;&gt; <br>&gt;&gt; I recommend reading the whole “Migrating to Swift 2.3 or Swift 3 from Swift 2.2” doc, but for this specific issue you should start with the “UnsafeRawPointer Migration” doc that it links to.<br>&gt;&gt; <br>&gt;&gt; &lt;https://swift.org/migration-guide/&gt; &lt;https://swift.org/migration-guide/&gt;<br>&gt;&gt; <br>&gt;&gt; &lt;https://swift.org/migration-guide/se-0107-migrate.html&gt; &lt;https://swift.org/migration-guide/se-0107-migrate.html&gt;<br>&gt;&gt; <br>&gt;&gt; Share and Enjoy<br>&gt;&gt; --<br>&gt;&gt; Quinn &quot;The Eskimo!&quot;  &lt;http://www.apple.com/developer/&gt; &lt;http://www.apple.com/developer/&gt;<br>&gt;&gt; Apple Developer Relations, Developer Technical Support, Core OS/Hardware<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt; John Brownie &lt;mailto:john_brownie at sil.org&gt;  28 September 2016 at 9:29<br>&gt;&gt; I have a Swift wrapper for the expat XML parser, and I just went through the update to Swift 3, and I&#39;m thrown a series of errors that mostly appear to be of two types. Here is a representative function of the first type: <br>&gt;&gt; <br>&gt;&gt;     func parse() throws { <br>&gt;&gt;         var done = false <br>&gt;&gt;         while !done { <br>&gt;&gt;             let buffer: UnsafeMutablePointer&lt;Void&gt; = XML_GetBuffer(parser, Int32(bufsize)) <br>&gt;&gt;             if buffer == nil { <br>&gt;&gt;                 let errorCode = XML_GetErrorCode(parser) <br>&gt;&gt;                 throw ExpatError(reason: &quot;Error \(errorCode), \(XML_ErrorString(errorCode))&quot;) <br>&gt;&gt;             } <br>&gt;&gt;             let bytesRead = readData(UnsafeMutablePointer&lt;UInt8&gt;(buffer), bufferLength: bufsize) <br>&gt;&gt;             done = bytesRead &lt; bufsize <br>&gt;&gt;             if XML_ParseBuffer(parser, Int32(bytesRead), Int32(done ? 1 : 0)) != XML_STATUS_OK { <br>&gt;&gt;                 let errorCode = XML_GetErrorCode(parser) <br>&gt;&gt;                 throw ExpatError(reason: &quot;Error \(errorCode), \(XML_ErrorString(errorCode))&quot;) <br>&gt;&gt;             } <br>&gt;&gt;         } <br>&gt;&gt;     } <br>&gt;&gt; <br>&gt;&gt; Xcode 8&#39;s migrator changed the declaration of buffer to UnsafeMutableRawPointer?, but the readData call gives an error: <br>&gt;&gt; <br>&gt;&gt; Cannot invoke initializer for type &#39;UnsafeMutablePointer&lt;UInt8&gt;&#39; with an argument list of type &#39;(UnsafeMutableRawPointer?)&#39; <br>&gt;&gt; Pointer conversion restricted: use &#39;.assumingMemoryBound(to:)&#39; or &#39;.bindMemory(to:capacity:)&#39; to view memory as a type. <br>&gt;&gt; Overloads for &#39;UnsafeMutablePointer&lt;UInt8&gt;&#39; exist with these partially matching parameter lists: (RawPointer), (OpaquePointer), (OpaquePointer?), (UnsafeMutablePointer&lt;Pointee&gt;), (UnsafeMutablePointer&lt;Pointee&gt;?) <br>&gt;&gt; <br>&gt;&gt; Where can I read up on how to make the conversion? My initial effort is: <br>&gt;&gt; <br>&gt;&gt;             let bytesRead = readData(buffer!.bindMemory(to: UInt8.self, capacity: bufsize), bufferLength: bufsize) <br>&gt;&gt; <br>&gt;&gt; That&#39;s more or less thrashing around with no real understanding. <br>&gt;&gt; <br>&gt;&gt; The second type is turning a closure into the appropriate C function pointer. For example: <br>&gt;&gt; <br>&gt;&gt;             XML_SetEndElementHandler(parser) { (userData: UnsafeMutableRawPointer, name: UnsafePointer&lt;XML_Char&gt;) -&gt; Void in <br>&gt;&gt;                 let theParser = unsafeBitCast(userData, to: ExpatSwift.self) <br>&gt;&gt;                 let theName = ExpatSwift.getString(name) <br>&gt;&gt;                 theParser.endElement(theName) <br>&gt;&gt;             } <br>&gt;&gt; <br>&gt;&gt; This gets an error: <br>&gt;&gt; <br>&gt;&gt; Cannot convert value of type &#39;(UnsafeMutableRawPointer, UnsafePointer&lt;XML_Char&gt;) -&gt; Void&#39; to expected argument type &#39;XML_EndElementHandler!&#39; <br>&gt;&gt; <br>&gt;&gt; XML_EndElementHandler is defined as: <br>&gt;&gt; <br>&gt;&gt; typedef void (XMLCALL *XML_EndElementHandler) (void *userData, <br>&gt;&gt;                                                const XML_Char *name); <br>&gt;&gt; <br>&gt;&gt; Here I have no real clue as to how to fix it. <br>&gt;&gt; <br>&gt;&gt; So, any pointers to either how to fix these problems or to a good source to read to understand them? <br>&gt;&gt; <br>&gt;&gt; John <br>&gt; <br>&gt; -- <br>&gt; John Brownie<br>&gt; In Finland on furlough from SIL Papua New Guinea<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160928/d4834d87/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2bc666e29724cd3bdf46b6cbbe4a07bb?s=50"></div><header><strong>Updating C-wrapper to Swift 3</strong> from <string>Quinn &quot;The Eskimo!&quot;</string> &lt;eskimo1 at apple.com&gt;<p>September 29, 2016 at 09:00:00am</p></header><div class="content"><p>On 28 Sep 2016, at 18:39, Michael Ilseman &lt;milseman at apple.com&gt; wrote:<br></p><p>&gt; Could you share the generated interface for these functions, so that we can see how they are being imported into Swift?<br></p><p>Based on some random expat docs I found on the ’net [1], I grabbed the relevant declarations and put them in a bridging header.<br></p><p>---------------------------------------------------------------------------<br>typedef struct XML_Parser_struct * XML_Parser;<br>typedef uint8_t XML_Char;<br></p><p>typedef void<br>(*XML_EndElementHandler)(void *userData,<br>                         const XML_Char *name);<br></p><p>void XML_SetEndElementHandler(XML_Parser p,<br>                         XML_EndElementHandler);<br>---------------------------------------------------------------------------<br></p><p>With that I see that XML_EndElementHandler has the signature:<br></p><p>typealias XML_EndElementHandler = (UnsafeMutableRawPointer?, UnsafePointer&lt;XML_Char&gt;?) -&gt; Void<br></p><p>However, John is trying to use:<br></p><p>{ (userData: UnsafeMutableRawPointer, name: UnsafePointer&lt;XML_Char&gt;) -&gt; Void in … }<br></p><p>where the parameters differ in optionality.  The fix is to make both parameters optional:<br></p><p>{ (userData: UnsafeMutableRawPointer?, name: UnsafePointer&lt;XML_Char&gt;?) in … }<br></p><p>I belive this change is the result of:<br></p><p>* SE-0055 “Make unsafe pointer nullability explicit using Optional”<br></p><p>&lt;https://github.com/apple/swift-evolution/blob/master/proposals/0055-optional-unsafe-pointers.md&gt;<br></p><p>* SE-0054 “Abolish ImplicitlyUnwrappedOptional type”<br></p><p>&lt;https://github.com/apple/swift-evolution/blob/master/proposals/0054-abolish-iuo.md&gt;<br></p><p>Share and Enjoy<br>--<br>Quinn &quot;The Eskimo!&quot;                    &lt;http://www.apple.com/developer/&gt;<br>Apple Developer Relations, Developer Technical Support, Core OS/Hardware<br></p><p>[1] &lt;http://www.hpc.wm.edu/SciClone/documentation/software/misc/expat/reference.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
