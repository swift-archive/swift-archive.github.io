<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/49f329a0267f5a1773a77017882a82a8?s=50"></div><header><strong>Review for: Remove C-style for-loops with conditions and incrementers</strong> from <string>Rainer Brockerhoff</string> &lt;rainer at brockerhoff.net&gt;<p>December 12, 2015 at 12:00:00pm</p></header><div class="content"><p>Review of SE-0007<br></p><p>Note: haven&#39;t had time to write this up during the week, apologies for<br>the late comment.<br></p><p>	* What is your evaluation of the proposal?<br></p><p>+1 on the proposal, as long as my suggestion below (&quot;repeat&quot; clause) is<br>also implemented.<br></p><p>I always felt the C-style `for var i = 0; i &lt; n; i += 1 {...}` loop was<br>an anachronism. A semicolon-separated list of heterogeneous items:<br>- a declaration and/or initialization;<br>- a boolean expression;<br>- a statement which is executed not there, but between loop iterations.<br></p><p>I do remember in the early C days that (some) people delighted in<br>cramming stuff inside the for header and have an empty loop body. This<br>was fun, but needlessly obscure/tricky. Enumerating a linked list was a<br>frequent sample.<br></p><p>Also, for many purposes one had to use tricks, like extra booleans, or a<br>switch on the index, to special-handle the first or last time through<br>the loop.<br></p><p>Substituting a `while` loop can be, as many have already pointed out,<br>seriously problematic when `break`, `continue` and `throw` are used<br>inside the loop, and `defer` is not a good solution for that, either.<br></p><p>So, I propose that the `while` loop should get an optional `repeat`<br>clause at the end, like this:<br></p><p>var item = firstItem		// declaration/initialization<br>while item != nil {	// condition<br>	if SomeExtraCondition(item) {<br>		break;<br>	}<br>	process(item)<br>} repeat {			// increment<br>	item = NextItemFor(item)<br>}<br></p><p>Where the statements inside `repeat` are executed after each loop, but<br>only if the loop will continue. I think this offers the necessary<br>conceptual clearness and existing for-loops are easily converted<br>automatically. The eye will skip over the `repeat` clause for the last<br>iteration as it now does for `else`.<br></p><p>Also, `break`, `continue` and `throw` will all continue to work as expected.<br></p><p>I also propose that the `repeat` clause be extended to the remaining<br>`for-in` loop:<br></p><p>for item in sequence {<br>	print(&quot;\(item)&quot;)<br>} repeat {<br>	print(&quot;, &quot;)<br>}<br></p><p>which will be handy in many situations.<br></p><p>Finally, I think that `for i in 0..&lt;n` is acceptable for counting.<br>Having reverse ranges would help but is not as frequent.<br></p><p>BTW: `loop` or whatever is felt to be more readable could be used in<br>place of `repeat`.<br></p><p>	* Is the problem being addressed significant enough to warrant a change<br>to Swift?<br></p><p>Yes, I do think that it will remove a source of errors for programmers<br>migrating in from C/C++/ObjC, and the &quot;repeat&quot; clause will offer a more<br>functionality for the loops.<br></p><p>	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>	* If you have you used other languages or libraries with a similar<br>feature, how do you feel that this proposal compares to those?<br></p><p>I&#39;ve used C/ObjC extensively for decades, older languages are probably<br>not useful by now :-)<br></p><p>	* How much effort did you put into your review? A glance, a quick<br>reading, or an in-depth study?<br></p><p>I&#39;ve read (and now, re-read most comments on this list. I haven&#39;t<br>checked the Swift sources for implementation implications (nor do I feel<br>yet qualified to do so).<br></p><p>-- <br>Rainer Brockerhoff  &lt;rainer at brockerhoff.net&gt;<br>Belo Horizonte, Brazil<br>&quot;In the affairs of others even fools are wise<br>In their own business even sages err.&quot;<br>http://brockerhoff.net/blog/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Review for: Remove C-style for-loops with conditions and incrementers</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December 12, 2015 at 09:00:00am</p></header><div class="content"><p>&gt; <br>&gt; So, I propose that the `while` loop should get an optional `repeat`<br>&gt; clause at the end, like this:<br>&gt; <br>&gt; var item = firstItem		// declaration/initialization<br>&gt; while item != nil {	// condition<br>&gt; 	if SomeExtraCondition(item) {<br>&gt; 		break;<br>&gt; 	}<br>&gt; 	process(item)<br>&gt; } repeat {			// increment<br>&gt; 	item = NextItemFor(item)<br>&gt; }<br>&gt; <br>&gt; Where the statements inside `repeat` are executed after each loop, but<br>&gt; only if the loop will continue. I think this offers the necessary<br>&gt; conceptual clearness and existing for-loops are easily converted<br>&gt; automatically. The eye will skip over the `repeat` clause for the last<br>&gt; iteration as it now does for `else`.<br>&gt; <br>&gt; Also, `break`, `continue` and `throw` will all continue to work as expected.<br>&gt; <br>&gt; I also propose that the `repeat` clause be extended to the remaining<br>&gt; `for-in` loop:<br>&gt; <br>&gt; for item in sequence {<br>&gt; 	print(&quot;\(item)&quot;)<br>&gt; } repeat {<br>&gt; 	print(&quot;, &quot;)<br>&gt; }<br>&gt; <br>&gt; which will be handy in many situations.<br></p><p><br>I haven’t had time to do a thorough review of the proposal myself but I have read the proposal and have been following the responses.  My impression is that most people who don’t support this proposal would do so if there was an acceptable alternative which retains the performance characteristics of the C-style for loop.  <br></p><p>Rainer’s proposal looks like a good way to provide an alternative that addresses semantic and performance concerns while also providing a tool that generalizes to all loops.  It feels “Swifty” and seems like a win to me.  <br></p><p>I can’t think of any reason to oppose the proposal with Ranier’s solution other than old habits, familiarity from other languages, etc.<br></p><p>I do think we need to consider whether “repeat” is the best keyword due to potential confusion with &quot;repeat while” loops.  The advantage of using it is avoiding adding a new keyword.  The disadvantage is overloading its meaning.<br></p><p>Matthew<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/49f329a0267f5a1773a77017882a82a8?s=50"></div><header><strong>Review for: Remove C-style for-loops with conditions and incrementers</strong> from <string>Rainer Brockerhoff</string> &lt;rainer at brockerhoff.net&gt;<p>December 12, 2015 at 04:00:00pm</p></header><div class="content"><p>On 12/12/15 13:44, Matthew Johnson wrote:<br>&gt; I do think we need to consider whether “repeat” is the best keyword<br>&gt; due to potential confusion with &quot;repeat while” loops.  The advantage<br>&gt; of using it is avoiding adding a new keyword.  The disadvantage is<br>&gt; overloading its meaning.<br></p><p>Ouch. I had a vague idea I was overlooking some use of `repeat`, and<br>right, I&#39;d forgotten about that usage. But other keywords would do, as I<br>said.<br></p><p>-- <br>Rainer Brockerhoff  &lt;rainer at brockerhoff.net&gt;<br>Belo Horizonte, Brazil<br>&quot;In the affairs of others even fools are wise<br>In their own business even sages err.&quot;<br>http://brockerhoff.net/blog/<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/283bdc6ec76dd4d16b7a8234222e55d4?s=50"></div><header><strong>Review for: Remove C-style for-loops with conditions and incrementers</strong> from <string>Michel Fortin</string> &lt;michel.fortin at michelf.ca&gt;<p>December 12, 2015 at 12:00:00pm</p></header><div class="content"><p>Le 12 déc. 2015 à 9:41, Rainer Brockerhoff via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br></p><p>&gt; I also propose that the `repeat` clause be extended to the remaining<br>&gt; `for-in` loop:<br>&gt; <br>&gt; for item in sequence {<br>&gt; 	print(&quot;\(item)&quot;)<br>&gt; } repeat {<br>&gt; 	print(&quot;, &quot;)<br>&gt; }<br>&gt; <br>&gt; which will be handy in many situations.<br></p><p>Are you sure this does what you expect?<br></p><p><br>-- <br>Michel Fortin<br>michel.fortin at michelf.ca<br>https://michelf.ca<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/49f329a0267f5a1773a77017882a82a8?s=50"></div><header><strong>Review for: Remove C-style for-loops with conditions and incrementers</strong> from <string>Rainer Brockerhoff</string> &lt;rainer at brockerhoff.net&gt;<p>December 12, 2015 at 04:00:00pm</p></header><div class="content"><p>On 12/12/15 15:00, Michel Fortin wrote:<br>&gt; Le 12 déc. 2015 à 9:41, Rainer Brockerhoff via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt;&gt; I also propose that the `repeat` clause be extended to the remaining<br>&gt;&gt; `for-in` loop:<br>&gt;&gt;<br>&gt;&gt; for item in sequence {<br>&gt;&gt; 	print(&quot;\(item)&quot;)<br>&gt;&gt; } repeat {<br>&gt;&gt; 	print(&quot;, &quot;)<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; which will be handy in many situations.<br>&gt; <br>&gt; Are you sure this does what you expect?<br></p><p>Apparently Swift 2.x isn&#39;t properly in my brain yet, should&#39;ve added<br>`terminator:&quot;&quot;` to those prints. Or thought of a better example.<br></p><p>Or added more coffee... :-)<br></p><p>-- <br>Rainer Brockerhoff  &lt;rainer at brockerhoff.net&gt;<br>Belo Horizonte, Brazil<br>&quot;In the affairs of others even fools are wise<br>In their own business even sages err.&quot;<br>http://brockerhoff.net/blog/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/283bdc6ec76dd4d16b7a8234222e55d4?s=50"></div><header><strong>Review for: Remove C-style for-loops with conditions and incrementers</strong> from <string>Michel Fortin</string> &lt;michel.fortin at michelf.ca&gt;<p>December 12, 2015 at 01:00:00pm</p></header><div class="content"><p>Le 12 déc. 2015 à 13:22, Rainer Brockerhoff &lt;rainer at brockerhoff.net&gt; a écrit :<br></p><p>&gt; On 12/12/15 15:00, Michel Fortin wrote:<br>&gt;&gt; Le 12 déc. 2015 à 9:41, Rainer Brockerhoff via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt;&gt; I also propose that the `repeat` clause be extended to the remaining<br>&gt;&gt;&gt; `for-in` loop:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for item in sequence {<br>&gt;&gt;&gt; 	print(&quot;\(item)&quot;)<br>&gt;&gt;&gt; } repeat {<br>&gt;&gt;&gt; 	print(&quot;, &quot;)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; which will be handy in many situations.<br>&gt;&gt; <br>&gt;&gt; Are you sure this does what you expect?<br>&gt; <br>&gt; Apparently Swift 2.x isn&#39;t properly in my brain yet, should&#39;ve added<br>&gt; `terminator:&quot;&quot;` to those prints. Or thought of a better example.<br></p><p>True. But that&#39;s not what I meant here. Your example produces the same result as this one:<br></p><p>	for item in sequence {<br>		print(&quot;\(item)&quot;)<br>		print(&quot;, &quot;)<br>	}<br></p><p>Since there is no `continue` in the loop body, there&#39;s no point in having a `repeat` block.<br></p><p>My guess is that your intent was to have &quot;, &quot; between each item, but not after the last one. That&#39;s not how the increment block works in a C-style for loop. Try this loop if you want to convince yourself:<br></p><p>	for var i = 0; i &lt; 5; i += 1, print(&quot;, &quot;, terminator: &quot;&quot;) {<br>		print(i, terminator: &quot;&quot;)<br>	}<br></p><p>Prints:<br></p><p>	0, 1, 2, 3, 4,<br></p><p>-- <br>Michel Fortin<br>michel.fortin at michelf.ca<br>https://michelf.ca<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/49f329a0267f5a1773a77017882a82a8?s=50"></div><header><strong>Review for: Remove C-style for-loops with conditions and incrementers</strong> from <string>Rainer Brockerhoff</string> &lt;rainer at brockerhoff.net&gt;<p>December 12, 2015 at 04:00:00pm</p></header><div class="content"><p>On 12/12/15 16:30, Michel Fortin wrote:<br>&gt; My guess is that your intent was to have &quot;, &quot; between each item, but<br>not after the last one. That&#39;s not how the increment block works in a<br>C-style for loop. Try this loop if you want to convince yourself:<br>&gt;<br>&gt; 	for var i = 0; i &lt; 5; i += 1, print(&quot;, &quot;, terminator: &quot;&quot;) {<br>&gt; 		print(i, terminator: &quot;&quot;)<br>&gt; 	}<br></p><p>Yikes. This is why I dislike the C-stye for loop; I never remember such<br>details properly, and avoid putting multiple items in there. (Same goes<br>for function pointer syntax and ObjC block pointer syntax, nested<br>typedefs, etc.)<br></p><p>Offhand (can&#39;t test right now) I suppose that means there&#39;s no use in<br>adding `repeat` (or, `loop`, or whatever) to `for ... in`?<br></p><p>Would you say it&#39;d still be useful for the `while` loop?<br></p><p>-- <br>Rainer Brockerhoff  &lt;rainer at brockerhoff.net&gt;<br>Belo Horizonte, Brazil<br>&quot;In the affairs of others even fools are wise<br>In their own business even sages err.&quot;<br>http://brockerhoff.net/blog/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Review for: Remove C-style for-loops with conditions and incrementers</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December 12, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; Offhand (can&#39;t test right now) I suppose that means there&#39;s no use in<br>&gt; adding `repeat` (or, `loop`, or whatever) to `for ... in`?<br></p><p>It could simplify for … in loops where there are early continue statements if there is also some logic that needs to be executed following *every* iteration, including those exited by a continue statement.  I’m not sure how common examples of this would be but they probably exist.  Where such logic exists the ‘repeat’ / ‘loop’ / etc construct would simplify it and make it less prone to error especially over time as maintenance is performed on the code.<br></p><p>If we introduce a construct like this we could also introduce a companion ‘between’ (keyword doesn’t really matter) which *would* do exactly what you intended.<br></p><p>for item in sequence {<br>	print(&quot;\(item)&quot;)<br>} between {<br>	print(&quot;, &quot;)<br>}<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/283bdc6ec76dd4d16b7a8234222e55d4?s=50"></div><header><strong>Review for: Remove C-style for-loops with conditions and incrementers</strong> from <string>Michel Fortin</string> &lt;michel.fortin at michelf.ca&gt;<p>December 12, 2015 at 02:00:00pm</p></header><div class="content"><p>Le 12 déc. 2015 à 13:42, Rainer Brockerhoff &lt;rainer at brockerhoff.net&gt; a écrit :<br></p><p>&gt; Yikes. This is why I dislike the C-stye for loop; I never remember such<br>&gt; details properly, and avoid putting multiple items in there. (Same goes<br>&gt; for function pointer syntax and ObjC block pointer syntax, nested<br>&gt; typedefs, etc.)<br>&gt; <br>&gt; Offhand (can&#39;t test right now) I suppose that means there&#39;s no use in<br>&gt; adding `repeat` (or, `loop`, or whatever) to `for ... in`?<br>&gt; <br>&gt; Would you say it&#39;d still be useful for the `while` loop?<br></p><p>I don&#39;t think it&#39;s particularly intuitive that the two consecutive blocks separated by a keyword are part of the same loop body in the first place. Somebody is prone to do the same mistake you did with a while loop, although maybe it&#39;s less likely (I don&#39;t really know).<br></p><p>It&#39;d certainly be useful if the C-style for loop disappear to have a decent way to express it using a while loop, but I&#39;m not sure this is the way to go. As things stand, we have the following ideas about augmenting a while loop (with various keywords I won&#39;t enumerate):<br></p><p>	while condition() next increment() {<br>		body()<br>	}<br></p><p>	while condition() {<br>		body()<br>	} repeat {<br>		increment()<br>	}<br></p><p>Perhaps we could consider adding something like `defer` but that would not execute on `break` or `throw`:<br></p><p>	while condition() {<br>		reloop { increment() }<br>		body()<br>	}<br></p><p>Or maybe just make the whole C-style for loop a special kind of while loop by replacing semicolons with keywords:<br></p><p>	for var i = 0 while condition() next increment() {<br>		body()<br>	}<br></p><p>There&#39;s so many ideas floating around, but it doesn&#39;t seem like any of them is getting much traction right now.<br></p><p>My personal preference goes to this last one that essentially keeps the C-style for loop but with keywords. It&#39;s easily recognizable to those who already know the C-style for loop, easier to understand to those who don&#39;t, and it does not force all C-style for loops to be rewritten using a different control flow.<br></p><p>Moreover, if you accompany this change with a fix-it having a special case that migrates the old forms &quot;for;;&quot; and &quot;for(;;)&quot; by proposing the appropriate range-based for-in loop as a replacement for simple forward iteration over integers, beginners writing &quot;for;;&quot; will likely switch to using the for-in form after being shown the way once or twice.<br></p><p><br>-- <br>Michel Fortin<br>michel.fortin at michelf.ca<br>https://michelf.ca<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/49f329a0267f5a1773a77017882a82a8?s=50"></div><header><strong>Review for: Remove C-style for-loops with conditions and incrementers</strong> from <string>Rainer Brockerhoff</string> &lt;rainer at brockerhoff.net&gt;<p>December 12, 2015 at 09:00:00pm</p></header><div class="content"><p>On 12/12/15 17:48, Michel Fortin wrote:<br>&gt; It&#39;d certainly be useful if the C-style for loop disappear to have a<br>&gt; decent way to express it using a while loop, but I&#39;m not sure this is<br>&gt; the way to go. As things stand, we have the following ideas about<br>&gt; augmenting a while loop (with various keywords I won&#39;t enumerate):<br>&gt; <br>&gt; while condition() next increment() { body() }<br>&gt; <br>&gt; while condition() { body() } repeat { increment() }<br>&gt; <br>&gt; Perhaps we could consider adding something like `defer` but that<br>&gt; would not execute on `break` or `throw`:<br>&gt; <br>&gt; while condition() { reloop { increment() } body() }<br>&gt; <br>&gt; Or maybe just make the whole C-style for loop a special kind of while<br>&gt; loop by replacing semicolons with keywords:<br>&gt; <br>&gt; for var i = 0 while condition() next increment() { body() }<br>&gt; <br>&gt; There&#39;s so many ideas floating around, but it doesn&#39;t seem like any<br>&gt; of them is getting much traction right now.<br></p><p>Thanks for the round-up. You&#39;re right.<br></p><p>I&#39;ll think this over and re-read the grammar before commenting further.<br></p><p>-- <br>Rainer Brockerhoff  &lt;rainer at brockerhoff.net&gt;<br>Belo Horizonte, Brazil<br>&quot;In the affairs of others even fools are wise<br>In their own business even sages err.&quot;<br>http://brockerhoff.net/blog/<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
