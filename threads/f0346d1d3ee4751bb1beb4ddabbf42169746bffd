<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Move where clause to end of declaration</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May  2, 2016 at 09:00:00am</p></header><div class="content"><p>Hello swift-evolution,<br></p><p>I took the pitch originally from Developer to move the where clause out of the generic parameter list, with improvements brought up by Pyry Jahkola, and wrote a proposal for it. I opened a Pull Request, but if anybody wants to bring some modifications to it before it is merged, please let me know what you think:<br></p><p>Move where clause to end of declaration<br></p><p>Proposal: SE-XXXX &lt;https://github.com/apple/swift-evolution/blob/master/proposals/XXXX-move-where-expression.md&gt;<br>Author(s): David Hart &lt;https://github.com/hartbit&gt;, Developer, Pry Jahkola &lt;https://github.com/hartbit/swift-evolution/blob/move-where-clause/proposals/pyry.jahkola at iki.fi&gt;<br>Status: TBD<br>Review manager: TBD<br> &lt;https://github.com/hartbit/swift-evolution/blob/move-where-clause/proposals/XXXX-move-where-expression.md#introduction&gt;Introduction<br></p><p>This proposal suggests moving the where clause to the end of the declaration syntax, but before the body, for readability reasons. It has been discussed at length on the following swift-evolution thread:<br></p><p>[Pitch] Moving where Clauses Out Of Parameter Lists &lt;https://github.com/hartbit/swift-evolution/blob/move-where-clause/proposals/GMANE_DOWN_FOR_NOW&gt;<br> &lt;https://github.com/hartbit/swift-evolution/blob/move-where-clause/proposals/XXXX-move-where-expression.md#motivation&gt;Motivation<br></p><p>The where clause in declarations can become quite long. When that happens, it breaks the declaration syntax in two, hurting its readability. There is also no good way of formatting the declaration syntax to make it much better.<br></p><p> &lt;https://github.com/hartbit/swift-evolution/blob/move-where-clause/proposals/XXXX-move-where-expression.md#proposed-solution&gt;Proposed solution<br></p><p>The proposal suggests moving the where clause at the end of the declaration, but before the body of concerned declarations. With the proposed change, where clauses do not impede the main declaration and are also more easily formattable. For example, here is the same function declaration before and after the change: <br></p><p>func anyCommonElements&lt;T : SequenceType, U : SequenceType where<br>    T.Generator.Element: Equatable,<br>    T.Generator.Element == U.Generator.Element&gt;(lhs: T, _ rhs: U) -&gt; Bool where<br>{<br>    ...<br>}<br></p><p>func anyCommonElements&lt;T : SequenceType, U : SequenceType&gt;(lhs: T, _ rhs: U) -&gt; Bool where<br>    T.Generator.Element: Equatable,<br>    T.Generator.Element == U.Generator.Element<br>{<br>    ...<br>}<br>This proposal has no impact on extension declarations with constraints because those declarations already have the where clauses right before the body. In that regard, the proposal makes the other declarations more consistent with extension declarations.<br></p><p> &lt;https://github.com/hartbit/swift-evolution/blob/move-where-clause/proposals/XXXX-move-where-expression.md#detailed-design&gt;Detailed design<br></p><p>First of all, the grammar of generic-parameter-clause is modified to loose the requirement- clause:<br></p><p>generic-parameter-clause → &lt; ­generic-parameter-list­­ &gt;­<br></p><p>The grammar of declarations are then amended to gain the requirement-clause: <br></p><p>function-declaration → function-head­ function-name­ generic-parameter-clause­opt­ function-signature requirement-clause­opt ­function-body­opt<br></p><p>union-style-enum → indirect­­opt­ ­enum ­enum-name ­generic-parameter-clause­­opt ­type-inheritance-clause­­opt­ requirement-clause­opt { ­union-style-enum-members­­opt­ }<br></p><p>raw-value-style-enum → enum ­enum-name­ generic-parameter-clause­­opt ­type-inheritance-clause requirement-clause­opt ­{ ­raw-value-style-enum-members­ *}­*<br></p><p>struct-declaration → attributes­­opt ­access-level-modifier­­opt ­struct ­struct-name ­generic-parameter-clause­­opt ­type-inheritance-clause­­opt requirement-clause­opt ­struct-body­<br></p><p>class-declaration → attributes­­opt ­access-level-modifier­opt ­final­opt ­class ­class-name ­generic-parameter-clause­opt ­type-inheritance-clause­opt requirement-clause­opt ­class-body­<br></p><p>protocol-method-declaration → function-head ­function-name ­generic-parameter-clause­­opt ­function-signature­ requirement-clause­opt<br></p><p>protocol-initializer-declaration → initializer-head ­generic-parameter-clause­­opt ­parameter-clause ­throws­­opt­ requirement-clause­opt<br></p><p>protocol-initializer-declaration → initializer-head ­generic-parameter-clause­opt ­parameter-clause­ rethrows­ requirement-clause­opt<br></p><p>initializer-declaration → initializer-head ­generic-parameter-clause­­opt ­parameter-clause ­throws­opt requirement-clause­opt ­initializer-body­<br></p><p>initializer-declaration → initializer-head ­generic-parameter-clause­opt ­parameter-clause ­rethrows requirement-clause­opt ­initializer-body­<br></p><p> &lt;https://github.com/hartbit/swift-evolution/blob/move-where-clause/proposals/XXXX-move-where-expression.md#impact-on-existing-code&gt;Impact on existing code<br></p><p>This proposal impacts all declarations which contain where clauses expect for extension declarations and will therefore require a Fix-It. <br></p><p> &lt;https://github.com/hartbit/swift-evolution/blob/move-where-clause/proposals/XXXX-move-where-expression.md#alternatives-considered&gt;Alternatives considered<br></p><p>The first post in the swift-evolution thread originally proposed moving the where clause just after the generic type declaration. Since then, the original author and many other participants in the thread have agreed that the current proposal is superior.<br></p><p>It was also proposed to remove the simple inheritance constraints from the generic parameter list, but several arguments were brought up that it would complicate declarations of simple generics which only needed inheritance constraints.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/f034bffd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>Move where clause to end of declaration</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>May  2, 2016 at 03:00:00am</p></header><div class="content"><p>Hi there, just wanted to let you know I have a name!  It&#39;s unfortunate that the mailing list won&#39;t accept the update I&#39;ve made (this has been the 3rd-ish time I&#39;ve tried).<br></p><p>~Robert Widmann<br></p><p>2016/05/02 3:16、David Hart &lt;david at hartbit.com&gt; のメッセージ:<br></p><p>&gt; Hello swift-evolution,<br>&gt; <br>&gt; I took the pitch originally from Developer to move the where clause out of the generic parameter list, with improvements brought up by Pyry Jahkola, and wrote a proposal for it. I opened a Pull Request, but if anybody wants to bring some modifications to it before it is merged, please let me know what you think:<br>&gt; <br>&gt; Move where clause to end of declaration<br>&gt; Proposal: SE-XXXX<br>&gt; Author(s): David Hart, Developer, Pry Jahkola<br>&gt; Status: TBD<br>&gt; Review manager: TBD<br>&gt; Introduction<br>&gt; <br>&gt; This proposal suggests moving the where clause to the end of the declaration syntax, but before the body, for readability reasons. It has been discussed at length on the following swift-evolution thread:<br>&gt; <br>&gt; [Pitch] Moving where Clauses Out Of Parameter Lists<br>&gt; <br>&gt; Motivation<br>&gt; <br>&gt; The where clause in declarations can become quite long. When that happens, it breaks the declaration syntax in two, hurting its readability. There is also no good way of formatting the declaration syntax to make it much better.<br>&gt; <br>&gt; Proposed solution<br>&gt; <br>&gt; The proposal suggests moving the where clause at the end of the declaration, but before the body of concerned declarations. With the proposed change, where clauses do not impede the main declaration and are also more easily formattable. For example, here is the same function declaration before and after the change: <br>&gt; <br>&gt; func anyCommonElements&lt;T : SequenceType, U : SequenceType where<br>&gt;     T.Generator.Element: Equatable,<br>&gt;     T.Generator.Element == U.Generator.Element&gt;(lhs: T, _ rhs: U) -&gt; Bool where<br>&gt; {<br>&gt;     ...<br>&gt; }<br>&gt; <br>&gt; func anyCommonElements&lt;T : SequenceType, U : SequenceType&gt;(lhs: T, _ rhs: U) -&gt; Bool where<br>&gt;     T.Generator.Element: Equatable,<br>&gt;     T.Generator.Element == U.Generator.Element<br>&gt; {<br>&gt;     ...<br>&gt; }<br>&gt; This proposal has no impact on extension declarations with constraints because those declarations already have the where clauses right before the body. In that regard, the proposal makes the other declarations more consistent with extension declarations.<br>&gt; <br>&gt; Detailed design<br>&gt; <br>&gt; First of all, the grammar of generic-parameter-clause is modified to loose the requirement- clause:<br>&gt; <br>&gt; generic-parameter-clause → &lt; generic-parameter-list &gt;<br>&gt; <br>&gt; The grammar of declarations are then amended to gain the requirement-clause: <br>&gt; <br>&gt; function-declaration → function-head function-name generic-parameter-clauseopt function-signature requirement-clauseopt function-bodyopt<br>&gt; <br>&gt; union-style-enum → indirectopt enum enum-name  generic-parameter-clauseopt type-inheritance-clauseopt requirement-clauseopt { union-style-enum-membersopt }<br>&gt; <br>&gt; raw-value-style-enum → enum enum-name generic-parameter-clauseopt type-inheritance-clause requirement-clauseopt { raw-value-style-enum-members *}*<br>&gt; <br>&gt; struct-declaration → attributesopt access-level-modifieropt struct struct-name generic-parameter-clauseopt type-inheritance-clauseopt requirement-clauseopt struct-body<br>&gt; <br>&gt; class-declaration → attributesopt access-level-modifieropt finalopt class class-name generic-parameter-clauseopt type-inheritance-clauseopt requirement-clauseopt class-body<br>&gt; <br>&gt; protocol-method-declaration → function-head function-name generic-parameter-clauseopt function-signature requirement-clauseopt<br>&gt; <br>&gt; protocol-initializer-declaration → initializer-head generic-parameter-clauseopt parameter-clause throwsopt requirement-clauseopt<br>&gt; <br>&gt; protocol-initializer-declaration → initializer-head generic-parameter-clauseopt parameter-clause rethrows requirement-clauseopt<br>&gt; <br>&gt; initializer-declaration → initializer-head generic-parameter-clauseopt parameter-clause throwsopt requirement-clauseopt initializer-body<br>&gt; <br>&gt; initializer-declaration → initializer-head generic-parameter-clauseopt parameter-clause rethrows requirement-clauseopt initializer-body<br>&gt; <br>&gt; Impact on existing code<br>&gt; <br>&gt; This proposal impacts all declarations which contain where clauses expect for extension declarations and will therefore require a Fix-It. <br>&gt; <br>&gt; Alternatives considered<br>&gt; <br>&gt; The first post in the swift-evolution thread originally proposed moving the where clause just after the generic type declaration. Since then, the original author and many other participants in the thread have agreed that the current proposal is superior.<br>&gt; <br>&gt; It was also proposed to remove the simple inheritance constraints from the generic parameter list, but several arguments were brought up that it would complicate declarations of simple generics which only needed inheritance constraints.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/920b1961/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Move where clause to end of declaration</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May  2, 2016 at 09:00:00am</p></header><div class="content"><p>I&#39;ll update the proposal ASAP :) Btw, wasn&#39;t sure if you wanted to be cited as co-author because I did not have your express approval, but I thought it was the right thing to do. Was in a bit in a hurry to send the Pull Request before going to work.<br></p><p>&gt; On 02 May 2016, at 09:20, Developer &lt;devteam.codafi at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hi there, just wanted to let you know I have a name!  It&#39;s unfortunate that the mailing list won&#39;t accept the update I&#39;ve made (this has been the 3rd-ish time I&#39;ve tried).<br>&gt; <br>&gt; ~Robert Widmann<br>&gt; <br>&gt; 2016/05/02 3:16、David Hart &lt;david at hartbit.com&gt; のメッセージ:<br>&gt; <br>&gt;&gt; Hello swift-evolution,<br>&gt;&gt; <br>&gt;&gt; I took the pitch originally from Developer to move the where clause out of the generic parameter list, with improvements brought up by Pyry Jahkola, and wrote a proposal for it. I opened a Pull Request, but if anybody wants to bring some modifications to it before it is merged, please let me know what you think:<br>&gt;&gt; <br>&gt;&gt; Move where clause to end of declaration<br>&gt;&gt; Proposal: SE-XXXX<br>&gt;&gt; Author(s): David Hart, Developer, Pry Jahkola<br>&gt;&gt; Status: TBD<br>&gt;&gt; Review manager: TBD<br>&gt;&gt; Introduction<br>&gt;&gt; <br>&gt;&gt; This proposal suggests moving the where clause to the end of the declaration syntax, but before the body, for readability reasons. It has been discussed at length on the following swift-evolution thread:<br>&gt;&gt; <br>&gt;&gt; [Pitch] Moving where Clauses Out Of Parameter Lists<br>&gt;&gt; <br>&gt;&gt; Motivation<br>&gt;&gt; <br>&gt;&gt; The where clause in declarations can become quite long. When that happens, it breaks the declaration syntax in two, hurting its readability. There is also no good way of formatting the declaration syntax to make it much better.<br>&gt;&gt; <br>&gt;&gt; Proposed solution<br>&gt;&gt; <br>&gt;&gt; The proposal suggests moving the where clause at the end of the declaration, but before the body of concerned declarations. With the proposed change, where clauses do not impede the main declaration and are also more easily formattable. For example, here is the same function declaration before and after the change: <br>&gt;&gt; <br>&gt;&gt; func anyCommonElements&lt;T : SequenceType, U : SequenceType where<br>&gt;&gt;     T.Generator.Element: Equatable,<br>&gt;&gt;     T.Generator.Element == U.Generator.Element&gt;(lhs: T, _ rhs: U) -&gt; Bool where<br>&gt;&gt; {<br>&gt;&gt;     ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; func anyCommonElements&lt;T : SequenceType, U : SequenceType&gt;(lhs: T, _ rhs: U) -&gt; Bool where<br>&gt;&gt;     T.Generator.Element: Equatable,<br>&gt;&gt;     T.Generator.Element == U.Generator.Element<br>&gt;&gt; {<br>&gt;&gt;     ...<br>&gt;&gt; }<br>&gt;&gt; This proposal has no impact on extension declarations with constraints because those declarations already have the where clauses right before the body. In that regard, the proposal makes the other declarations more consistent with extension declarations.<br>&gt;&gt; <br>&gt;&gt; Detailed design<br>&gt;&gt; <br>&gt;&gt; First of all, the grammar of generic-parameter-clause is modified to loose the requirement- clause:<br>&gt;&gt; <br>&gt;&gt; generic-parameter-clause → &lt; ­generic-parameter-list­­ &gt;­<br>&gt;&gt; <br>&gt;&gt; The grammar of declarations are then amended to gain the requirement-clause: <br>&gt;&gt; <br>&gt;&gt; function-declaration → function-head­ function-name­ generic-parameter-clause­opt­ function-signature requirement-clause­opt ­function-body­opt<br>&gt;&gt; <br>&gt;&gt; union-style-enum → indirect­­opt­ ­enum ­enum-name ­generic-parameter-clause­­opt ­type-inheritance-clause­­opt­ requirement-clause­opt { ­union-style-enum-members­­opt­ }<br>&gt;&gt; <br>&gt;&gt; raw-value-style-enum → enum ­enum-name­ generic-parameter-clause­­opt ­type-inheritance-clause requirement-clause­opt ­{ ­raw-value-style-enum-members­ *}­*<br>&gt;&gt; <br>&gt;&gt; struct-declaration → attributes­­opt ­access-level-modifier­­opt ­struct ­struct-name ­generic-parameter-clause­­opt ­type-inheritance-clause­­opt requirement-clause­opt ­struct-body­<br>&gt;&gt; <br>&gt;&gt; class-declaration → attributes­­opt ­access-level-modifier­opt ­final­opt ­class ­class-name ­generic-parameter-clause­opt ­type-inheritance-clause­opt requirement-clause­opt ­class-body­<br>&gt;&gt; <br>&gt;&gt; protocol-method-declaration → function-head ­function-name ­generic-parameter-clause­­opt ­function-signature­ requirement-clause­opt<br>&gt;&gt; <br>&gt;&gt; protocol-initializer-declaration → initializer-head ­generic-parameter-clause­­opt ­parameter-clause ­throws­­opt­ requirement-clause­opt<br>&gt;&gt; <br>&gt;&gt; protocol-initializer-declaration → initializer-head ­generic-parameter-clause­opt ­parameter-clause­ rethrows­ requirement-clause­opt<br>&gt;&gt; <br>&gt;&gt; initializer-declaration → initializer-head ­generic-parameter-clause­­opt ­parameter-clause ­throws­opt requirement-clause­opt ­initializer-body­<br>&gt;&gt; <br>&gt;&gt; initializer-declaration → initializer-head ­generic-parameter-clause­opt ­parameter-clause ­rethrows requirement-clause­opt ­initializer-body­<br>&gt;&gt; <br>&gt;&gt; Impact on existing code<br>&gt;&gt; <br>&gt;&gt; This proposal impacts all declarations which contain where clauses expect for extension declarations and will therefore require a Fix-It. <br>&gt;&gt; <br>&gt;&gt; Alternatives considered<br>&gt;&gt; <br>&gt;&gt; The first post in the swift-evolution thread originally proposed moving the where clause just after the generic type declaration. Since then, the original author and many other participants in the thread have agreed that the current proposal is superior.<br>&gt;&gt; <br>&gt;&gt; It was also proposed to remove the simple inheritance constraints from the generic parameter list, but several arguments were brought up that it would complicate declarations of simple generics which only needed inheritance constraints.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/329f4c5f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Move where clause to end of declaration</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May  2, 2016 at 10:00:00am</p></header><div class="content"><p>Name updated: https://github.com/apple/swift-evolution/pull/281<br></p><p>&gt; On 02 May 2016, at 09:39, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; <br>&gt; I&#39;ll update the proposal ASAP :) Btw, wasn&#39;t sure if you wanted to be cited as co-author because I did not have your express approval, but I thought it was the right thing to do. Was in a bit in a hurry to send the Pull Request before going to work.<br>&gt; <br>&gt; On 02 May 2016, at 09:20, Developer &lt;devteam.codafi at gmail.com &lt;mailto:devteam.codafi at gmail.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Hi there, just wanted to let you know I have a name!  It&#39;s unfortunate that the mailing list won&#39;t accept the update I&#39;ve made (this has been the 3rd-ish time I&#39;ve tried).<br>&gt;&gt; <br>&gt;&gt; ~Robert Widmann<br>&gt;&gt; <br>&gt;&gt; 2016/05/02 3:16、David Hart &lt;david at hartbit.com &lt;mailto:david at hartbit.com&gt;&gt; のメッセージ:<br>&gt;&gt; <br>&gt;&gt;&gt; Hello swift-evolution,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I took the pitch originally from Developer to move the where clause out of the generic parameter list, with improvements brought up by Pyry Jahkola, and wrote a proposal for it. I opened a Pull Request, but if anybody wants to bring some modifications to it before it is merged, please let me know what you think:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Move where clause to end of declaration<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Proposal: SE-XXXX &lt;https://github.com/apple/swift-evolution/blob/master/proposals/XXXX-move-where-expression.md&gt;<br>&gt;&gt;&gt; Author(s): David Hart &lt;https://github.com/hartbit&gt;, Developer, Pry Jahkola &lt;https://github.com/hartbit/swift-evolution/blob/move-where-clause/proposals/pyry.jahkola at iki.fi&gt;<br>&gt;&gt;&gt; Status: TBD<br>&gt;&gt;&gt; Review manager: TBD<br>&gt;&gt;&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/move-where-clause/proposals/XXXX-move-where-expression.md#introduction&gt;Introduction<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This proposal suggests moving the where clause to the end of the declaration syntax, but before the body, for readability reasons. It has been discussed at length on the following swift-evolution thread:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; [Pitch] Moving where Clauses Out Of Parameter Lists &lt;https://github.com/hartbit/swift-evolution/blob/move-where-clause/proposals/GMANE_DOWN_FOR_NOW&gt;<br>&gt;&gt;&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/move-where-clause/proposals/XXXX-move-where-expression.md#motivation&gt;Motivation<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The where clause in declarations can become quite long. When that happens, it breaks the declaration syntax in two, hurting its readability. There is also no good way of formatting the declaration syntax to make it much better.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/move-where-clause/proposals/XXXX-move-where-expression.md#proposed-solution&gt;Proposed solution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The proposal suggests moving the where clause at the end of the declaration, but before the body of concerned declarations. With the proposed change, where clauses do not impede the main declaration and are also more easily formattable. For example, here is the same function declaration before and after the change: <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func anyCommonElements&lt;T : SequenceType, U : SequenceType where<br>&gt;&gt;&gt;     T.Generator.Element: Equatable,<br>&gt;&gt;&gt;     T.Generator.Element == U.Generator.Element&gt;(lhs: T, _ rhs: U) -&gt; Bool where<br>&gt;&gt;&gt; {<br>&gt;&gt;&gt;     ...<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func anyCommonElements&lt;T : SequenceType, U : SequenceType&gt;(lhs: T, _ rhs: U) -&gt; Bool where<br>&gt;&gt;&gt;     T.Generator.Element: Equatable,<br>&gt;&gt;&gt;     T.Generator.Element == U.Generator.Element<br>&gt;&gt;&gt; {<br>&gt;&gt;&gt;     ...<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; This proposal has no impact on extension declarations with constraints because those declarations already have the where clauses right before the body. In that regard, the proposal makes the other declarations more consistent with extension declarations.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/move-where-clause/proposals/XXXX-move-where-expression.md#detailed-design&gt;Detailed design<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; First of all, the grammar of generic-parameter-clause is modified to loose the requirement- clause:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; generic-parameter-clause → &lt; ­generic-parameter-list­­ &gt;­<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The grammar of declarations are then amended to gain the requirement-clause: <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; function-declaration → function-head­ function-name­ generic-parameter-clause­opt­ function-signature requirement-clause­opt ­function-body­opt<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; union-style-enum → indirect­­opt­ ­enum ­enum-name ­generic-parameter-clause­­opt ­type-inheritance-clause­­opt­ requirement-clause­opt { ­union-style-enum-members­­opt­ }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; raw-value-style-enum → enum ­enum-name­ generic-parameter-clause­­opt ­type-inheritance-clause requirement-clause­opt ­{ ­raw-value-style-enum-members­ *}­*<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; struct-declaration → attributes­­opt ­access-level-modifier­­opt ­struct ­struct-name ­generic-parameter-clause­­opt ­type-inheritance-clause­­opt requirement-clause­opt ­struct-body­<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class-declaration → attributes­­opt ­access-level-modifier­opt ­final­opt ­class ­class-name ­generic-parameter-clause­opt ­type-inheritance-clause­opt requirement-clause­opt ­class-body­<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; protocol-method-declaration → function-head ­function-name ­generic-parameter-clause­­opt ­function-signature­ requirement-clause­opt<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; protocol-initializer-declaration → initializer-head ­generic-parameter-clause­­opt ­parameter-clause ­throws­­opt­ requirement-clause­opt<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; protocol-initializer-declaration → initializer-head ­generic-parameter-clause­opt ­parameter-clause­ rethrows­ requirement-clause­opt<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; initializer-declaration → initializer-head ­generic-parameter-clause­­opt ­parameter-clause ­throws­opt requirement-clause­opt ­initializer-body­<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; initializer-declaration → initializer-head ­generic-parameter-clause­opt ­parameter-clause ­rethrows requirement-clause­opt ­initializer-body­<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/move-where-clause/proposals/XXXX-move-where-expression.md#impact-on-existing-code&gt;Impact on existing code<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This proposal impacts all declarations which contain where clauses expect for extension declarations and will therefore require a Fix-It. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/move-where-clause/proposals/XXXX-move-where-expression.md#alternatives-considered&gt;Alternatives considered<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The first post in the swift-evolution thread originally proposed moving the where clause just after the generic type declaration. Since then, the original author and many other participants in the thread have agreed that the current proposal is superior.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It was also proposed to remove the simple inheritance constraints from the generic parameter list, but several arguments were brought up that it would complicate declarations of simple generics which only needed inheritance constraints.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/275957d2/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e0a5152b275c43b493a94b5a6a868905?s=50"></div><header><strong>Move where clause to end of declaration</strong> from <string>Pyry Jahkola</string> &lt;pyry.jahkola at iki.fi&gt;<p>May  2, 2016 at 11:00:00am</p></header><div class="content"><p>Thank you for the effort David, this is great!<br></p><p>Considering this example:<br></p><p>&gt; On 02 May 2016, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; <br>&gt; For example, here is the same function declaration (…) after the change: <br>&gt; func anyCommonElements&lt;T : SequenceType, U : SequenceType&gt;(lhs: T, _ rhs: U) -&gt; Bool where<br>&gt;     T.Generator.Element: Equatable,<br>&gt;     T.Generator.Element == U.Generator.Element<br>&gt; {<br>&gt;     ...<br>&gt; }<br>I originally had the opinion that this should be further changed for consistency into the following form:<br></p><p>func anyCommonElements&lt;T, U&gt;(lhs: T, _ rhs: U) -&gt; Bool where<br>    T : SequenceType,<br>    U : SequenceType,<br>    T.Generator.Element : Equatable,<br>    T.Generator.Element == U.Generator.Element<br>{<br>    ...<br>}<br>However, I do agree now that in the simple case highlighted below it makes no sense to use the where clause at all:<br></p><p>&gt; It was also proposed to remove the simple inheritance constraints from the generic parameter list, but several arguments were brought up that it would complicate declarations of simple generics which only needed inheritance constraints.<br>&gt; <br>Of course, the proposal doesn&#39;t prevent anyone from moving all inheritance constraints into the where clause, so maybe we should point out that it&#39;s also possible to further simplify the first line of function declarations that way. It just remains a stylistic choice left for the developer to choose.<br></p><p>Anyway, +1! Did you make a pull request already?<br></p><p>— Pyry<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/9a7b3de9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Move where clause to end of declaration</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May  2, 2016 at 10:00:00am</p></header><div class="content"><p>Yep, I made a pull request already, but I still need to fix the thread link once games becomes available again. I’ll add an example about the current proposal allowing you to move the inheritance constraints out :) It’s good to have the choice.<br></p><p>&gt; On 02 May 2016, at 10:11, Pyry Jahkola &lt;pyry.jahkola at iki.fi&gt; wrote:<br>&gt; <br>&gt; Thank you for the effort David, this is great!<br>&gt; <br>&gt; Considering this example:<br>&gt; <br>&gt;&gt; On 02 May 2016, David Hart &lt;david at hartbit.com &lt;mailto:david at hartbit.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; For example, here is the same function declaration (…) after the change: <br>&gt;&gt; func anyCommonElements&lt;T : SequenceType, U : SequenceType&gt;(lhs: T, _ rhs: U) -&gt; Bool where<br>&gt;&gt;     T.Generator.Element: Equatable,<br>&gt;&gt;     T.Generator.Element == U.Generator.Element<br>&gt;&gt; {<br>&gt;&gt;     ...<br>&gt;&gt; }<br>&gt; I originally had the opinion that this should be further changed for consistency into the following form:<br>&gt; <br>&gt; func anyCommonElements&lt;T, U&gt;(lhs: T, _ rhs: U) -&gt; Bool where<br>&gt;     T : SequenceType,<br>&gt;     U : SequenceType,<br>&gt;     T.Generator.Element : Equatable,<br>&gt;     T.Generator.Element == U.Generator.Element<br>&gt; {<br>&gt;     ...<br>&gt; }<br>&gt; However, I do agree now that in the simple case highlighted below it makes no sense to use the where clause at all:<br>&gt; <br>&gt;&gt; It was also proposed to remove the simple inheritance constraints from the generic parameter list, but several arguments were brought up that it would complicate declarations of simple generics which only needed inheritance constraints.<br>&gt;&gt; <br>&gt; Of course, the proposal doesn&#39;t prevent anyone from moving all inheritance constraints into the where clause, so maybe we should point out that it&#39;s also possible to further simplify the first line of function declarations that way. It just remains a stylistic choice left for the developer to choose.<br>&gt; <br>&gt; Anyway, +1! Did you make a pull request already?<br>&gt; <br>&gt; — Pyry<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/49d58b0f/attachment-0001.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4ab486d7597af4cfe0be33a762150848?s=50"></div><header><strong>Move where clause to end of declaration</strong> from <string>Dany St-Amant</string> &lt;dsa.mls at icloud.com&gt;<p>May  2, 2016 at 05:00:00am</p></header><div class="content"><p>Hello<br></p><p>You have an extra where dangling in the from example<br></p><p>Dany<br></p><p>&gt; Le 2 mai 2016 à 03:16, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; : <br>&gt; func anyCommonElements&lt;T : SequenceType, U : SequenceType where<br>&gt;     T.Generator.Element: Equatable,<br>&gt;     T.Generator.Element == U.Generator.Element&gt;(lhs: T, _ rhs: U) -&gt; Bool where<br>&gt; {<br>&gt;     ...<br>&gt; }<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/f4de8b9b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Move where clause to end of declaration</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May  2, 2016 at 02:00:00pm</p></header><div class="content"><p>Nice catch!<br></p><p>&gt; On 02 May 2016, at 11:58, Dany St-Amant via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello<br>&gt; <br>&gt; You have an extra where dangling in the from example<br>&gt; <br>&gt; Dany<br>&gt; <br>&gt; Le 2 mai 2016 à 03:16, David Hart via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt; : <br>&gt;&gt; func anyCommonElements&lt;T : SequenceType, U : SequenceType where<br>&gt;&gt;     T.Generator.Element: Equatable,<br>&gt;&gt;     T.Generator.Element == U.Generator.Element&gt;(lhs: T, _ rhs: U) -&gt; Bool where<br>&gt;&gt; {<br>&gt;&gt;     ...<br>&gt;&gt; }<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/1abfb731/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>Move where clause to end of declaration</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>May  9, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On May 2, 2016, at 12:16 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello swift-evolution,<br>&gt; <br>&gt; I took the pitch originally from Developer to move the where clause out of the generic parameter list, with improvements brought up by Pyry Jahkola, and wrote a proposal for it. I opened a Pull Request, but if anybody wants to bring some modifications to it before it is merged, please let me know what you think:<br>&gt; <br>&gt; Move where clause to end of declaration<br>&gt; <br>&gt; Proposal: SE-XXXX &lt;https://github.com/apple/swift-evolution/blob/master/proposals/XXXX-move-where-expression.md&gt;<br>&gt; Author(s): David Hart &lt;https://github.com/hartbit&gt;, Developer, Pry Jahkola &lt;https://github.com/hartbit/swift-evolution/blob/move-where-clause/proposals/pyry.jahkola at iki.fi&gt;<br>&gt; Status: TBD<br>&gt; Review manager: TBD<br>&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/move-where-clause/proposals/XXXX-move-where-expression.md#introduction&gt;Introduction<br>&gt; <br>&gt; This proposal suggests moving the where clause to the end of the declaration syntax, but before the body, for readability reasons. It has been discussed at length on the following swift-evolution thread:<br>&gt; <br>&gt; [Pitch] Moving where Clauses Out Of Parameter Lists &lt;https://github.com/hartbit/swift-evolution/blob/move-where-clause/proposals/GMANE_DOWN_FOR_NOW&gt;<br>&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/move-where-clause/proposals/XXXX-move-where-expression.md#motivation&gt;Motivation<br>&gt; <br>&gt; The where clause in declarations can become quite long. When that happens, it breaks the declaration syntax in two, hurting its readability. There is also no good way of formatting the declaration syntax to make it much better.<br>&gt; <br>&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/move-where-clause/proposals/XXXX-move-where-expression.md#proposed-solution&gt;Proposed solution<br>&gt; <br>&gt; The proposal suggests moving the where clause at the end of the declaration, but before the body of concerned declarations. With the proposed change, where clauses do not impede the main declaration and are also more easily formattable. For example, here is the same function declaration before and after the change: <br>&gt; <br>&gt; func anyCommonElements&lt;T : SequenceType, U : SequenceType where<br>&gt;     T.Generator.Element: Equatable,<br>&gt;     T.Generator.Element == U.Generator.Element&gt;(lhs: T, _ rhs: U) -&gt; Bool where<br>&gt; {<br>&gt;     ...<br>&gt; }<br>&gt; <br>&gt; func anyCommonElements&lt;T : SequenceType, U : SequenceType&gt;(lhs: T, _ rhs: U) -&gt; Bool where<br>&gt;     T.Generator.Element: Equatable,<br>&gt;     T.Generator.Element == U.Generator.Element<br>&gt; {<br>&gt;     …<br>Random minor comment: I find that putting the “where” at the end makes this almost unreadable, and would very much have preferred<br></p><p>&gt; func anyCommonElements&lt;T : SequenceType, U : SequenceType&gt;(lhs: T, _ rhs: U) -&gt; Bool<br>&gt;     where T.Generator.Element: Equatable, T.Generator.Element == U.Generator.Element<br></p><p><br>	- Doug<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160509/6c4d131a/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
