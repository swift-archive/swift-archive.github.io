<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Local tool configuration</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>October 27, 2016 at 09:00:00am</p></header><div class="content"><p>Hi all,<br></p><p>We have a need for local tool (swift build, swift package) configuration data to be able to be present in a repository. Currently, many projects *require* some amount of `-Xcc` or `-Xswiftc` arguments be passed to the tools, and are documenting this in their README files. This is lame... we should support a mechanism by which that data can live inside the project repository.<br></p><p>I *do not* think we should put this data in the manifest -- the manifest should aim to have a good schema for all of the things a package requires. However, we need a stop gap solution to make the package manager easier to use.<br></p><p>I would like to propose that we invent some simple mechanism by which:<br>1. Local configuration data can live in a checked in location, like `.swiftpm-config`. This would be a simple JSON file with a limited number of options, starting with the -Xcc &amp; -Xswiftc ones.<br>2. User local configuration data could live in `.swiftpm-config.local`. This would usually be put in .gitignore.<br>3. The command line tool would use these by default, but with have `--no-config` style options for testing without it. It could also have a `--package-config path/to/config` option to use a different config.<br>4. We would eventually add `git config` like options under `swift package config`.<br>5. We would never inherit this data across a package dependency. This is not intended to be a long term solution for how we manage this problem, it is just intended to be something which makes the tool more usable *today*, and thus lets us focus on the bigger problems without ignoring this pain point.<br>6. As with Git, we would eventually support ~/.swiftpm-config<br></p><p>What do others think?<br></p><p> - Daniel<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7b2fdba8077c8495b3caa6f36d0928da?s=50"></div><header><strong>Local tool configuration</strong> from <string>Marcin Krzyzanowski</string> &lt;marcin.krzyzanowski at gmail.com&gt;<p>October 29, 2016 at 12:00:00am</p></header><div class="content"><p>This is interesting and I&#39;m happy you rise it here.<br>So if I have case where I want something like this:<br></p><p>$ swift build -c release -Xswiftc -static-stdlib<br></p><p>then I add something like this to .swiftpm:<br>[Xswiftc]<br>    -static-stdlib<br></p><p>and there will be no way to make this parameter public via<br>Package.swift for every build when released?<br>In general I think it&#39;s good idea to have such local file that add<br>specific paths etc. though, I feel that we should have this mechanism<br>as part of manifest file too (Local override manifest setup).<br></p><p>btw. maybe Package.swift.local and have it all there?<br></p><p><br>--<br>Marcin<br></p><p><br>On Thu, Oct 27, 2016 at 6:27 PM, Daniel Dunbar via swift-build-dev<br>&lt;swift-build-dev at swift.org&gt; wrote:<br>&gt; Hi all,<br>&gt;<br>&gt; We have a need for local tool (swift build, swift package) configuration data to be able to be present in a repository. Currently, many projects *require* some amount of `-Xcc` or `-Xswiftc` arguments be passed to the tools, and are documenting this in their README files. This is lame... we should support a mechanism by which that data can live inside the project repository.<br>&gt;<br>&gt; I *do not* think we should put this data in the manifest -- the manifest should aim to have a good schema for all of the things a package requires. However, we need a stop gap solution to make the package manager easier to use.<br>&gt;<br>&gt; I would like to propose that we invent some simple mechanism by which:<br>&gt; 1. Local configuration data can live in a checked in location, like `.swiftpm-config`. This would be a simple JSON file with a limited number of options, starting with the -Xcc &amp; -Xswiftc ones.<br>&gt; 2. User local configuration data could live in `.swiftpm-config.local`. This would usually be put in .gitignore.<br>&gt; 3. The command line tool would use these by default, but with have `--no-config` style options for testing without it. It could also have a `--package-config path/to/config` option to use a different config.<br>&gt; 4. We would eventually add `git config` like options under `swift package config`.<br>&gt; 5. We would never inherit this data across a package dependency. This is not intended to be a long term solution for how we manage this problem, it is just intended to be something which makes the tool more usable *today*, and thus lets us focus on the bigger problems without ignoring this pain point.<br>&gt; 6. As with Git, we would eventually support ~/.swiftpm-config<br>&gt;<br>&gt; What do others think?<br>&gt;<br>&gt;  - Daniel<br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Local tool configuration</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>October 28, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Oct 28, 2016, at 3:35 PM, Marcin Krzyzanowski &lt;marcin.krzyzanowski at gmail.com&gt; wrote:<br>&gt; <br>&gt; This is interesting and I&#39;m happy you rise it here.<br>&gt; So if I have case where I want something like this:<br>&gt; <br>&gt; $ swift build -c release -Xswiftc -static-stdlib<br>&gt; <br>&gt; then I add something like this to .swiftpm:<br>&gt; [Xswiftc]<br>&gt;    -static-stdlib<br></p><p>This is correct.<br></p><p>&gt; <br>&gt; and there will be no way to make this parameter public via<br>&gt; Package.swift for every build when released?<br></p><p>Yes, the intention is not that this be the way for packages which require additional build configuration specify it. That should be done through properly design mechanisms in the manifest.<br></p><p>... but in the meantime, it allows for developers *using* such a package to at least document what is necessary in a project level configuration that can be shared.<br></p><p>Does that clarify things?<br></p><p> - Daniel<br></p><p>&gt; In general I think it&#39;s good idea to have such local file that add<br>&gt; specific paths etc. though, I feel that we should have this mechanism<br>&gt; as part of manifest file too (Local override manifest setup).<br>&gt; <br>&gt; btw. maybe Package.swift.local and have it all there?<br>&gt; <br>&gt; <br>&gt; --<br>&gt; Marcin<br>&gt; <br>&gt; <br>&gt; On Thu, Oct 27, 2016 at 6:27 PM, Daniel Dunbar via swift-build-dev<br>&gt; &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt;&gt; Hi all,<br>&gt;&gt; <br>&gt;&gt; We have a need for local tool (swift build, swift package) configuration data to be able to be present in a repository. Currently, many projects *require* some amount of `-Xcc` or `-Xswiftc` arguments be passed to the tools, and are documenting this in their README files. This is lame... we should support a mechanism by which that data can live inside the project repository.<br>&gt;&gt; <br>&gt;&gt; I *do not* think we should put this data in the manifest -- the manifest should aim to have a good schema for all of the things a package requires. However, we need a stop gap solution to make the package manager easier to use.<br>&gt;&gt; <br>&gt;&gt; I would like to propose that we invent some simple mechanism by which:<br>&gt;&gt; 1. Local configuration data can live in a checked in location, like `.swiftpm-config`. This would be a simple JSON file with a limited number of options, starting with the -Xcc &amp; -Xswiftc ones.<br>&gt;&gt; 2. User local configuration data could live in `.swiftpm-config.local`. This would usually be put in .gitignore.<br>&gt;&gt; 3. The command line tool would use these by default, but with have `--no-config` style options for testing without it. It could also have a `--package-config path/to/config` option to use a different config.<br>&gt;&gt; 4. We would eventually add `git config` like options under `swift package config`.<br>&gt;&gt; 5. We would never inherit this data across a package dependency. This is not intended to be a long term solution for how we manage this problem, it is just intended to be something which makes the tool more usable *today*, and thus lets us focus on the bigger problems without ignoring this pain point.<br>&gt;&gt; 6. As with Git, we would eventually support ~/.swiftpm-config<br>&gt;&gt; <br>&gt;&gt; What do others think?<br>&gt;&gt; <br>&gt;&gt; - Daniel<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-build-dev mailing list<br>&gt;&gt; swift-build-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7b2fdba8077c8495b3caa6f36d0928da?s=50"></div><header><strong>Local tool configuration</strong> from <string>Marcin Krzyzanowski</string> &lt;marcin.krzyzanowski at gmail.com&gt;<p>October 29, 2016 at 12:00:00am</p></header><div class="content"><p>It does. Thanks, Daniel.<br></p><p>The thing is that if you introduce this dotfile now, it will last forever.<br></p><p>I had this impression that SPM manifest and configuration in Swift is<br>the desired approach, therefore &quot;properly design mechanisms in the<br>manifest&quot; is the way to go IMHO. Don&#39;t have to be in &quot;final form&quot; but<br>there. I&#39;d love to be able to specify &quot;-static-stdlib&quot; in<br>Package.swift for executable and don&#39;t put in in README.<br></p><p>then Package.swift.local or (.Package.swift) where it could be added<br>locally. I don&#39;t have strong opinion about naming, though, just don&#39;t<br>feel like I need another json/yaml dotfile in context of SPM.<br></p><p>Maybe we don&#39;t need another dotfile (maybe we do).<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=50"></div><header><strong>Local tool configuration</strong> from <string>Drew Crawford</string> &lt;drew at sealedabstract.com&gt;<p>October 28, 2016 at 08:00:00pm</p></header><div class="content"><p>The lack of command line flags was something several of us needed last year, and was the straw that drove a few of us to build our own tooling.  So my vote is obviously that this is a &quot;table stakes&quot; kind of feature.<br></p><p>I have two concerns about the specific proposal.  One is that I share Marcin&#39;s view that this deserves a space in the manifest.  We implemented it that way, and having used that system for six months and a dozen packages I would never voluntarily go back to an out-of-band mechanism for compiler flags.  I don&#39;t mean to reopen a dead horse here, it&#39;s just that manifest inclusion solved all my compiler flags problems, and I experienced zero of the bogeymen that were foretold.  Maybe my usecase is somehow unique.<br></p><p>The other is that we have a long-standing bug open to improve our interoperability with SwiftPM that we hope to get to eventually.  Increasing the complexity of the &quot;package specification&quot; – and in particular introducing new files and entire formats, like JSON, that we don&#39;t currently have a reason to parse – significantly raises the complexity of interoperability on our side.  Plain text would be better, and a unified manifest would be better still.<br></p><p>Drew<br></p><p>On October 28, 2016 at 5:11:20 PM, Daniel Dunbar via swift-build-dev (swift-build-dev at swift.org) wrote:<br></p><p>Hi all,<br></p><p>We have a need for local tool (swift build, swift package) configuration data to be able to be present in a repository. Currently, many projects *require* some amount of `-Xcc` or `-Xswiftc` arguments be passed to the tools, and are documenting this in their README files. This is lame... we should support a mechanism by which that data can live inside the project repository.<br></p><p>I *do not* think we should put this data in the manifest -- the manifest should aim to have a good schema for all of the things a package requires. However, we need a stop gap solution to make the package manager easier to use.<br></p><p>I would like to propose that we invent some simple mechanism by which:<br>1. Local configuration data can live in a checked in location, like `.swiftpm-config`. This would be a simple JSON file with a limited number of options, starting with the -Xcc &amp; -Xswiftc ones.<br>2. User local configuration data could live in `.swiftpm-config.local`. This would usually be put in .gitignore.<br>3. The command line tool would use these by default, but with have `--no-config` style options for testing without it. It could also have a `--package-config path/to/config` option to use a different config.<br>4. We would eventually add `git config` like options under `swift package config`.<br>5. We would never inherit this data across a package dependency. This is not intended to be a long term solution for how we manage this problem, it is just intended to be something which makes the tool more usable *today*, and thus lets us focus on the bigger problems without ignoring this pain point.<br>6. As with Git, we would eventually support ~/.swiftpm-config<br></p><p>What do others think?<br></p><p>- Daniel<br>_______________________________________________<br>swift-build-dev mailing list<br>swift-build-dev at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-build-dev<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20161028/2f69a80d/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
