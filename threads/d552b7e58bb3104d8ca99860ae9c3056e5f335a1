<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Draft: Add @noescape and rethrows to ManagedBuffer API</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  7, 2016 at 07:00:00am</p></header><div class="content"><p>on Sat Feb 06 2016, Károly Lőrentey &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I’d like to request feedback on the draft proposal below, about a (hopefully) trivial change to the standard library. <br>&gt;<br>&gt; I considered adding it to SE-0012<br>&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0012-add-noescape-to-public-library-api.md&gt;,<br>&gt; which is also about @noescape, but that proposal is about modifying<br>&gt; C/Obj-C API, so it’s not a good fit<br>&gt; &lt;https://github.com/apple/swift-evolution/pull/122&gt;.<br>&gt;<br>&gt; Introduction<br>&gt;<br>&gt; stdlib’s ManagedBuffer family of APIs has some public initializers and<br>&gt; methods taking closures that are missing the @noescape attribute. The<br>&gt; same family has a set of withUnsafeMutablePointer* functions that do<br>&gt; not have a rethrows declaration, while all similar methods elsewhere<br>&gt; in the standard library allow closures to throw.<br>&gt;<br>&gt; I propose to add the missing @noescape attributes and rethrows.<br></p><p>On first look this seems to be a great idea.  Have you checked for<br>performance impact?<br></p><p>&gt; Motivation<br>&gt;<br>&gt; - ManagedBuffer seems designed for raw performance. Not having<br>&gt; @noescape on the only API that allows access to the buffer’s contents<br>&gt; defeats some compiler optimizations, such as omitting unneccessary<br>&gt; retain/release calls. This can negate the performance advantage of<br>&gt; ManagedBuffer over simpler solutions, like using an Array.<br>&gt; - Accepting throwing closures makes these APIs more versatile, and<br>&gt; also improves their consistency with other parts of stdlib.<br>&gt;<br>&gt; Detailed Design<br>&gt;<br>&gt; The following set of APIs would be affected by this proposal:<br>&gt;<br>&gt; public class ManagedProtoBuffer&lt;Value, Element&gt; : NonObjectiveCBase {<br>&gt;   public final func withUnsafeMutablePointerToValue&lt;R&gt;(body: (UnsafeMutablePointer&lt;Value&gt;) -&gt; R) -&gt; R<br>&gt;   public final func withUnsafeMutablePointerToElements&lt;R&gt;(body: (UnsafeMutablePointer&lt;Element&gt;) -&gt; R) -&gt; R<br>&gt;   public final func withUnsafeMutablePointers&lt;R&gt;(body: (_:<br>&gt; UnsafeMutablePointer&lt;Value&gt;, _: UnsafeMutablePointer&lt;Element&gt;) -&gt; R)<br>&gt; -&gt; R<br>&gt; }<br>&gt;<br>&gt; public class ManagedBuffer&lt;Value, Element&gt; : ManagedProtoBuffer&lt;Value, Element&gt; {<br>&gt;   public final class func create(minimumCapacity: Int, initialValue:<br>&gt; (ManagedProtoBuffer&lt;Value,Element&gt;) -&gt; Value) -&gt;<br>&gt; ManagedBuffer&lt;Value,Element&gt;<br>&gt; }<br>&gt;<br>&gt; public struct ManagedBufferPointer&lt;Value, Element&gt; : Equatable {<br>&gt;   public init(bufferClass: AnyClass, minimumCapacity: Int,<br>&gt; initialValue: (buffer: AnyObject, allocatedCount: (AnyObject) -&gt; Int)<br>&gt; -&gt; Value)<br>&gt;   public func withUnsafeMutablePointerToValue&lt;R&gt;(body: (UnsafeMutablePointer&lt;Value&gt;) -&gt; R) -&gt; R<br>&gt;   public func withUnsafeMutablePointerToElements&lt;R&gt;(body: (UnsafeMutablePointer&lt;Element&gt;) -&gt; R) -&gt; R<br>&gt;   public func withUnsafeMutablePointers&lt;R&gt;(body: (_:<br>&gt; UnsafeMutablePointer&lt;Value&gt;, _: UnsafeMutablePointer&lt;Element&gt;) -&gt; R)<br>&gt; -&gt; R<br>&gt; }<br>&gt;<br>&gt; Here is how they would look after the proposed changes:<br>&gt;<br>&gt; public class ManagedProtoBuffer&lt;Value, Element&gt; : NonObjectiveCBase {<br>&gt;   public final func withUnsafeMutablePointerToValue&lt;R&gt;(@noescape body:<br>&gt; (UnsafeMutablePointer&lt;Value&gt;) throws -&gt; R) rethrows -&gt; R<br>&gt;   public final func withUnsafeMutablePointerToElements&lt;R&gt;(@noescape<br>&gt; body: (UnsafeMutablePointer&lt;Element&gt;) throws -&gt; R) rethrows -&gt; R<br>&gt;   public final func withUnsafeMutablePointers&lt;R&gt;(@noescape body: (_:<br>&gt; UnsafeMutablePointer&lt;Value&gt;, _: UnsafeMutablePointer&lt;Element&gt;) throws<br>&gt; -&gt; R) rethrows -&gt; R<br>&gt;<br>&gt; public class ManagedBuffer&lt;Value, Element&gt; : ManagedProtoBuffer&lt;Value, Element&gt; {<br>&gt;   public final class func create(minimumCapacity: Int, @noescape<br>&gt; initialValue: (ManagedProtoBuffer&lt;Value,Element&gt;) -&gt; Value) -&gt;<br>&gt; ManagedBuffer&lt;Value,Element&gt;<br>&gt; }<br>&gt;<br>&gt; public struct ManagedBufferPointer&lt;Value, Element&gt; : Equatable {<br>&gt;   public init(bufferClass: AnyClass, minimumCapacity: Int, @noescape<br>&gt; initialValue: (buffer: AnyObject, allocatedCount: (AnyObject) -&gt; Int)<br>&gt; -&gt; Value)<br>&gt;   public func withUnsafeMutablePointerToValue&lt;R&gt;(@noescape body:<br>&gt; (UnsafeMutablePointer&lt;Value&gt;) throws -&gt; R) rethrows -&gt; R<br>&gt;   public func withUnsafeMutablePointerToElements&lt;R&gt;(@noescape body:<br>&gt; (UnsafeMutablePointer&lt;Element&gt;) throws -&gt; R) rethrows -&gt; R<br>&gt;   public func withUnsafeMutablePointers&lt;R&gt;(@noescape body: (_:<br>&gt; UnsafeMutablePointer&lt;Value&gt;,_: UnsafeMutablePointer&lt;Element&gt;) throws<br>&gt; -&gt; R) rethrows -&gt; R<br>&gt; }<br>&gt;<br>&gt; A draft implementation is available at<br>&gt; https://github.com/apple/swift/compare/master...lorentey:noescape<br>&gt; &lt;https://github.com/apple/swift/compare/master...lorentey:noescape&gt;<br>&gt;<br>&gt; Impact on Existing Code<br>&gt;<br>&gt; Luckily, all modified API is either marked final, or defined in a<br>&gt; struct, so I expect no existing code is going to break due to these<br>&gt; changes.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Draft: Add @noescape and rethrows to ManagedBuffer API</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>February  7, 2016 at 06:00:00pm</p></header><div class="content"><p>As the author of SE-0012, +1 :-)<br>On Sun, Feb 7, 2016 at 7:50 AM Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Sat Feb 06 2016, Károly Lőrentey &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; I’d like to request feedback on the draft proposal below, about a<br>&gt; (hopefully) trivial change to the standard library.<br>&gt; &gt;<br>&gt; &gt; I considered adding it to SE-0012<br>&gt; &gt; &lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0012-add-noescape-to-public-library-api.md<br>&gt; &gt;,<br>&gt; &gt; which is also about @noescape, but that proposal is about modifying<br>&gt; &gt; C/Obj-C API, so it’s not a good fit<br>&gt; &gt; &lt;https://github.com/apple/swift-evolution/pull/122&gt;.<br>&gt; &gt;<br>&gt; &gt; Introduction<br>&gt; &gt;<br>&gt; &gt; stdlib’s ManagedBuffer family of APIs has some public initializers and<br>&gt; &gt; methods taking closures that are missing the @noescape attribute. The<br>&gt; &gt; same family has a set of withUnsafeMutablePointer* functions that do<br>&gt; &gt; not have a rethrows declaration, while all similar methods elsewhere<br>&gt; &gt; in the standard library allow closures to throw.<br>&gt; &gt;<br>&gt; &gt; I propose to add the missing @noescape attributes and rethrows.<br>&gt;<br>&gt; On first look this seems to be a great idea.  Have you checked for<br>&gt; performance impact?<br>&gt;<br>&gt; &gt; Motivation<br>&gt; &gt;<br>&gt; &gt; - ManagedBuffer seems designed for raw performance. Not having<br>&gt; &gt; @noescape on the only API that allows access to the buffer’s contents<br>&gt; &gt; defeats some compiler optimizations, such as omitting unneccessary<br>&gt; &gt; retain/release calls. This can negate the performance advantage of<br>&gt; &gt; ManagedBuffer over simpler solutions, like using an Array.<br>&gt; &gt; - Accepting throwing closures makes these APIs more versatile, and<br>&gt; &gt; also improves their consistency with other parts of stdlib.<br>&gt; &gt;<br>&gt; &gt; Detailed Design<br>&gt; &gt;<br>&gt; &gt; The following set of APIs would be affected by this proposal:<br>&gt; &gt;<br>&gt; &gt; public class ManagedProtoBuffer&lt;Value, Element&gt; : NonObjectiveCBase {<br>&gt; &gt;   public final func withUnsafeMutablePointerToValue&lt;R&gt;(body:<br>&gt; (UnsafeMutablePointer&lt;Value&gt;) -&gt; R) -&gt; R<br>&gt; &gt;   public final func withUnsafeMutablePointerToElements&lt;R&gt;(body:<br>&gt; (UnsafeMutablePointer&lt;Element&gt;) -&gt; R) -&gt; R<br>&gt; &gt;   public final func withUnsafeMutablePointers&lt;R&gt;(body: (_:<br>&gt; &gt; UnsafeMutablePointer&lt;Value&gt;, _: UnsafeMutablePointer&lt;Element&gt;) -&gt; R)<br>&gt; &gt; -&gt; R<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; public class ManagedBuffer&lt;Value, Element&gt; : ManagedProtoBuffer&lt;Value,<br>&gt; Element&gt; {<br>&gt; &gt;   public final class func create(minimumCapacity: Int, initialValue:<br>&gt; &gt; (ManagedProtoBuffer&lt;Value,Element&gt;) -&gt; Value) -&gt;<br>&gt; &gt; ManagedBuffer&lt;Value,Element&gt;<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; public struct ManagedBufferPointer&lt;Value, Element&gt; : Equatable {<br>&gt; &gt;   public init(bufferClass: AnyClass, minimumCapacity: Int,<br>&gt; &gt; initialValue: (buffer: AnyObject, allocatedCount: (AnyObject) -&gt; Int)<br>&gt; &gt; -&gt; Value)<br>&gt; &gt;   public func withUnsafeMutablePointerToValue&lt;R&gt;(body:<br>&gt; (UnsafeMutablePointer&lt;Value&gt;) -&gt; R) -&gt; R<br>&gt; &gt;   public func withUnsafeMutablePointerToElements&lt;R&gt;(body:<br>&gt; (UnsafeMutablePointer&lt;Element&gt;) -&gt; R) -&gt; R<br>&gt; &gt;   public func withUnsafeMutablePointers&lt;R&gt;(body: (_:<br>&gt; &gt; UnsafeMutablePointer&lt;Value&gt;, _: UnsafeMutablePointer&lt;Element&gt;) -&gt; R)<br>&gt; &gt; -&gt; R<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; Here is how they would look after the proposed changes:<br>&gt; &gt;<br>&gt; &gt; public class ManagedProtoBuffer&lt;Value, Element&gt; : NonObjectiveCBase {<br>&gt; &gt;   public final func withUnsafeMutablePointerToValue&lt;R&gt;(@noescape body:<br>&gt; &gt; (UnsafeMutablePointer&lt;Value&gt;) throws -&gt; R) rethrows -&gt; R<br>&gt; &gt;   public final func withUnsafeMutablePointerToElements&lt;R&gt;(@noescape<br>&gt; &gt; body: (UnsafeMutablePointer&lt;Element&gt;) throws -&gt; R) rethrows -&gt; R<br>&gt; &gt;   public final func withUnsafeMutablePointers&lt;R&gt;(@noescape body: (_:<br>&gt; &gt; UnsafeMutablePointer&lt;Value&gt;, _: UnsafeMutablePointer&lt;Element&gt;) throws<br>&gt; &gt; -&gt; R) rethrows -&gt; R<br>&gt; &gt;<br>&gt; &gt; public class ManagedBuffer&lt;Value, Element&gt; : ManagedProtoBuffer&lt;Value,<br>&gt; Element&gt; {<br>&gt; &gt;   public final class func create(minimumCapacity: Int, @noescape<br>&gt; &gt; initialValue: (ManagedProtoBuffer&lt;Value,Element&gt;) -&gt; Value) -&gt;<br>&gt; &gt; ManagedBuffer&lt;Value,Element&gt;<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; public struct ManagedBufferPointer&lt;Value, Element&gt; : Equatable {<br>&gt; &gt;   public init(bufferClass: AnyClass, minimumCapacity: Int, @noescape<br>&gt; &gt; initialValue: (buffer: AnyObject, allocatedCount: (AnyObject) -&gt; Int)<br>&gt; &gt; -&gt; Value)<br>&gt; &gt;   public func withUnsafeMutablePointerToValue&lt;R&gt;(@noescape body:<br>&gt; &gt; (UnsafeMutablePointer&lt;Value&gt;) throws -&gt; R) rethrows -&gt; R<br>&gt; &gt;   public func withUnsafeMutablePointerToElements&lt;R&gt;(@noescape body:<br>&gt; &gt; (UnsafeMutablePointer&lt;Element&gt;) throws -&gt; R) rethrows -&gt; R<br>&gt; &gt;   public func withUnsafeMutablePointers&lt;R&gt;(@noescape body: (_:<br>&gt; &gt; UnsafeMutablePointer&lt;Value&gt;,_: UnsafeMutablePointer&lt;Element&gt;) throws<br>&gt; &gt; -&gt; R) rethrows -&gt; R<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; A draft implementation is available at<br>&gt; &gt; https://github.com/apple/swift/compare/master...lorentey:noescape<br>&gt; &gt; &lt;https://github.com/apple/swift/compare/master...lorentey:noescape&gt;<br>&gt; &gt;<br>&gt; &gt; Impact on Existing Code<br>&gt; &gt;<br>&gt; &gt; Luckily, all modified API is either marked final, or defined in a<br>&gt; &gt; struct, so I expect no existing code is going to break due to these<br>&gt; &gt; changes.<br>&gt;<br>&gt; --<br>&gt; -Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160207/59df0ce1/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0735d3bf1d76c0385258ac7a2a22d6fe?s=50"></div><header><strong>Draft: Add @noescape and rethrows to ManagedBuffer API</strong> from <string>Károly Lőrentey</string> &lt;karoly at lorentey.hu&gt;<p>February  8, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On 2016-02-07, at 16:18, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On first look this seems to be a great idea.  Have you checked for<br>&gt; performance impact?<br></p><p>Yes, although I found it challenging to create a good <br>microbenchmark for this. Subtle changes in the benchmarking code<br>lead to large swings in runtime performance, which makes me question<br>the usefulness of my results.<br></p><p>Keeping that in mind, for a trivial ManagedBuffer subclass, I found <br>that @noescape makes for a ~15-18% improvement when whole module <br>optimization is disabled, or when the subclass is imported.<br></p><p>Throwing in the rethrows declarations reduces the improvement to <br>~9-13%, or (in the case of a particular subscript getter test) even <br>reverses it, making the code ~3% slower.<br></p><p>The proposal has no discernible impact on ManagedBuffer subclasses<br>that the optimizer has full access to. (I.e., when they’re defined<br>in the same file as the code that’s using them, or in the same <br>module with WMO.) Unoptimized code also seems unaffected by these <br>changes.<br></p><p>My benchmarking code is on GitHub; feedback would be very welcome:<br></p><p>    https://github.com/lorentey/ManagedBuffer-Benchmark<br></p><p>-- <br>Karoly<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
