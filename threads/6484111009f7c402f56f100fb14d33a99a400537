<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8ccee250ca693d283d545068865e7a70?s=50"></div><header><strong>@noescape and nil</strong> from <string>Aleksandar Petrovic</string> &lt;apetrovic at gmail.com&gt;<p>April 26, 2016 at 09:00:00am</p></header><div class="content"><p>Hi Swift community, I have a question.<br></p><p>This is a valid Swift code:<br></p><p>func testFunc(times: Int, fn: ((Int)-&gt;Void)? = nil) {<br>	guard let f = fn else { return }<br>	for i in 1 ..&lt; times {<br>		f(i)<br>	}<br>}<br></p><p>And this is not:<br></p><p>func testFunc(times: Int, @noescape fn: ((Int)-&gt;Void)? = nil) {<br>	guard let f = fn else { return }<br>	for i in 1 ..&lt; times {<br>		f(i)<br>	}<br>}<br></p><p>I can&#39;t think of any hard reason why the @noescape parameter of the function can&#39;t be nullable (and, with default value, be optional), but maybe I&#39;m missing something. Is there any plan to correct this in 3.0?<br></p><p>Alex<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160426/64840537/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>@noescape and nil</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>April 26, 2016 at 09:00:00am</p></header><div class="content"><p>No one’s brought it up yet, but it seems totally reasonable. I’d even consider this a bug fix, not a real language change, but I’m not a core team member.<br></p><p>Jordan<br></p><p><br>&gt; On Apr 26, 2016, at 00:15, Aleksandar Petrovic via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Swift community, I have a question.<br>&gt; <br>&gt; This is a valid Swift code:<br>&gt; <br>&gt; func testFunc(times: Int, fn: ((Int)-&gt;Void)? = nil) {<br>&gt; 	guard let f = fn else { return }<br>&gt; 	for i in 1 ..&lt; times {<br>&gt; 		f(i)<br>&gt; 	}<br>&gt; }<br>&gt; <br>&gt; And this is not:<br>&gt; <br>&gt; func testFunc(times: Int, @noescape fn: ((Int)-&gt;Void)? = nil) {<br>&gt; 	guard let f = fn else { return }<br>&gt; 	for i in 1 ..&lt; times {<br>&gt; 		f(i)<br>&gt; 	}<br>&gt; }<br>&gt; <br>&gt; I can&#39;t think of any hard reason why the @noescape parameter of the function can&#39;t be nullable (and, with default value, be optional), but maybe I&#39;m missing something. Is there any plan to correct this in 3.0?<br>&gt; <br>&gt; Alex<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160426/e53b6f30/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9ae1f2ed10d2ef77cce06bbb5a2dcf7e?s=50"></div><header><strong>@noescape and nil</strong> from <string>Alex Hoppen</string> &lt;alex at ateamer.de&gt;<p>April 26, 2016 at 06:00:00pm</p></header><div class="content"><p>I think this is a bug similar to this one: https://bugs.swift.org/browse/SR-317 &lt;https://bugs.swift.org/browse/SR-317&gt;. Would you mind filing a bug report for it on bugs.swift.org &lt;http://bugs.swift.org/&gt;?<br></p><p>– Another Alex<br></p><p>&gt; On 26 Apr 2016, at 09:15, Aleksandar Petrovic via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Swift community, I have a question.<br>&gt; <br>&gt; This is a valid Swift code:<br>&gt; <br>&gt; func testFunc(times: Int, fn: ((Int)-&gt;Void)? = nil) {<br>&gt; 	guard let f = fn else { return }<br>&gt; 	for i in 1 ..&lt; times {<br>&gt; 		f(i)<br>&gt; 	}<br>&gt; }<br>&gt; <br>&gt; And this is not:<br>&gt; <br>&gt; func testFunc(times: Int, @noescape fn: ((Int)-&gt;Void)? = nil) {<br>&gt; 	guard let f = fn else { return }<br>&gt; 	for i in 1 ..&lt; times {<br>&gt; 		f(i)<br>&gt; 	}<br>&gt; }<br>&gt; <br>&gt; I can&#39;t think of any hard reason why the @noescape parameter of the function can&#39;t be nullable (and, with default value, be optional), but maybe I&#39;m missing something. Is there any plan to correct this in 3.0?<br>&gt; <br>&gt; Alex<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160426/4990bedb/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>@noescape and nil</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>April 26, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Apr 26, 2016, at 12:15 AM, Aleksandar Petrovic via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Swift community, I have a question.<br>&gt; <br>&gt; This is a valid Swift code:<br>&gt; <br>&gt; func testFunc(times: Int, fn: ((Int)-&gt;Void)? = nil) {<br>&gt; 	guard let f = fn else { return }<br>&gt; 	for i in 1 ..&lt; times {<br>&gt; 		f(i)<br>&gt; 	}<br>&gt; }<br>&gt; <br>&gt; And this is not:<br>&gt; <br>&gt; func testFunc(times: Int, @noescape fn: ((Int)-&gt;Void)? = nil) {<br>&gt; 	guard let f = fn else { return }<br>&gt; 	for i in 1 ..&lt; times {<br>&gt; 		f(i)<br>&gt; 	}<br>&gt; }<br>&gt; <br>&gt; I can&#39;t think of any hard reason why the @noescape parameter of the function can&#39;t be nullable (and, with default value, be optional), but maybe I&#39;m missing something. Is there any plan to correct this in 3.0?<br></p><p>There are two ways to fix this: a horrible hack that special cases optionals, or the more principled solution that treats optional as the underlying enum type that it is, and making @noescape propagate through to the members of the .some case.<br></p><p>You can probably guess this, but I’d prefer to discuss fixing the full generality of the problem, not providing a special case in the compiler for this.<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160426/bbb6fd21/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f6b7154fd1d6a470d0b521a2e484bffc?s=50"></div><header><strong>@noescape and nil</strong> from <string>Daniel Duan</string> &lt;daniel at duan.org&gt;<p>April 26, 2016 at 06:00:00pm</p></header><div class="content"><p>Wouldn&#39;t this work in Swift 3 though?<br></p><p>func testFunc(times: Int,  fn: (@noescape (Int)-&gt;Void)? = nil) { … }<br></p><p>Sent from my iPad<br></p><p>&gt; On Apr 26, 2016, at 11:26 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Apr 26, 2016, at 12:15 AM, Aleksandar Petrovic via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Swift community, I have a question.<br>&gt;&gt; <br>&gt;&gt; This is a valid Swift code:<br>&gt;&gt; <br>&gt;&gt; func testFunc(times: Int, fn: ((Int)-&gt;Void)? = nil) {<br>&gt;&gt; 	guard let f = fn else { return }<br>&gt;&gt; 	for i in 1 ..&lt; times {<br>&gt;&gt; 		f(i)<br>&gt;&gt; 	}<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; And this is not:<br>&gt;&gt; <br>&gt;&gt; func testFunc(times: Int, @noescape fn: ((Int)-&gt;Void)? = nil) {<br>&gt;&gt; 	guard let f = fn else { return }<br>&gt;&gt; 	for i in 1 ..&lt; times {<br>&gt;&gt; 		f(i)<br>&gt;&gt; 	}<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; I can&#39;t think of any hard reason why the @noescape parameter of the function can&#39;t be nullable (and, with default value, be optional), but maybe I&#39;m missing something. Is there any plan to correct this in 3.0?<br>&gt; <br>&gt; There are two ways to fix this: a horrible hack that special cases optionals, or the more principled solution that treats optional as the underlying enum type that it is, and making @noescape propagate through to the members of the .some case.<br>&gt; <br>&gt; You can probably guess this, but I’d prefer to discuss fixing the full generality of the problem, not providing a special case in the compiler for this.<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160426/8ec2708e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>@noescape and nil</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>April 26, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On Apr 26, 2016, at 6:58 PM, Daniel Duan &lt;daniel at duan.org&gt; wrote:<br>&gt; <br>&gt; Wouldn&#39;t this work in Swift 3 though?<br>&gt; <br>&gt; func testFunc(times: Int,  fn: (@noescape (Int)-&gt;Void)? = nil) { … }<br></p><p>Yes, that got implemented in Swift 3, with a narrow Optional-specific hack :-)<br></p><p>-Chris<br></p><p>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt; On Apr 26, 2016, at 11:26 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Apr 26, 2016, at 12:15 AM, Aleksandar Petrovic via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi Swift community, I have a question.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is a valid Swift code:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func testFunc(times: Int, fn: ((Int)-&gt;Void)? = nil) {<br>&gt;&gt;&gt; 	guard let f = fn else { return }<br>&gt;&gt;&gt; 	for i in 1 ..&lt; times {<br>&gt;&gt;&gt; 		f(i)<br>&gt;&gt;&gt; 	}<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And this is not:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func testFunc(times: Int, @noescape fn: ((Int)-&gt;Void)? = nil) {<br>&gt;&gt;&gt; 	guard let f = fn else { return }<br>&gt;&gt;&gt; 	for i in 1 ..&lt; times {<br>&gt;&gt;&gt; 		f(i)<br>&gt;&gt;&gt; 	}<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I can&#39;t think of any hard reason why the @noescape parameter of the function can&#39;t be nullable (and, with default value, be optional), but maybe I&#39;m missing something. Is there any plan to correct this in 3.0?<br>&gt;&gt; <br>&gt;&gt; There are two ways to fix this: a horrible hack that special cases optionals, or the more principled solution that treats optional as the underlying enum type that it is, and making @noescape propagate through to the members of the .some case.<br>&gt;&gt; <br>&gt;&gt; You can probably guess this, but I’d prefer to discuss fixing the full generality of the problem, not providing a special case in the compiler for this.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160426/82c474b3/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>@noescape and nil</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>April 27, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Apr 26, 2016, at 11:26, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Apr 26, 2016, at 12:15 AM, Aleksandar Petrovic via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Swift community, I have a question.<br>&gt;&gt; <br>&gt;&gt; This is a valid Swift code:<br>&gt;&gt; <br>&gt;&gt; func testFunc(times: Int, fn: ((Int)-&gt;Void)? = nil) {<br>&gt;&gt; 	guard let f = fn else { return }<br>&gt;&gt; 	for i in 1 ..&lt; times {<br>&gt;&gt; 		f(i)<br>&gt;&gt; 	}<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; And this is not:<br>&gt;&gt; <br>&gt;&gt; func testFunc(times: Int, @noescape fn: ((Int)-&gt;Void)? = nil) {<br>&gt;&gt; 	guard let f = fn else { return }<br>&gt;&gt; 	for i in 1 ..&lt; times {<br>&gt;&gt; 		f(i)<br>&gt;&gt; 	}<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; I can&#39;t think of any hard reason why the @noescape parameter of the function can&#39;t be nullable (and, with default value, be optional), but maybe I&#39;m missing something. Is there any plan to correct this in 3.0?<br>&gt; <br>&gt; There are two ways to fix this: a horrible hack that special cases optionals, or the more principled solution that treats optional as the underlying enum type that it is, and making @noescape propagate through to the members of the .some case.<br>&gt; <br>&gt; You can probably guess this, but I’d prefer to discuss fixing the full generality of the problem, not providing a special case in the compiler for this.<br></p><p>Making @noescape work for an arbitrary type doesn’t make sense because we don’t know what that type uses its generic parameter for. The reason we can do it for Optional is because Optional is essentially just a wrapper around T, and the only reason it’s interesting is because we allow an implicit conversion from a closure literal to an optional function type. Anything else would require the closure to explicitly be passed to an initializer or other function to make the types line up, which would clearly not be considered noescape.<br></p><p>We could consider extending this to all enums, but clearly not all structs. I think it’s perfectly reasonable to do this just for Optional.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160427/4b8da880/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
