<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc38aef146f886571b3c445851add884?s=50"></div><header><strong>[SwiftPM] Add option to dump a package’s dependency tree</strong> from <string>Honza Dvorsky</string> &lt;jan.dvorsky at me.com&gt;<p>April 25, 2016 at 06:00:00pm</p></header><div class="content"><p>Hi All,<br></p><p>In the last couple of weeks I’ve been building small Swift servers and<br>interacting with the young ecosystem of public SwiftPM packages. One thing<br>that quickly came up is the need to track down which of my dependencies (or<br>any of its parents) is pulling in this one broken dependency, so that I can<br>fix or work around it.<br></p><p>This quickly becomes a very tedious task, because the SwiftPM packages I’ve<br>encountered are usually small (npm style), which leads to relatively large<br>dependency trees even for moderate-size frameworks.<br></p><p>To assist developers in easily looking up a misbehaving package or quickly<br>understanding how SwiftPM arrived at a resolved version, I propose we add a<br>new mode to swift-build. This mode would simply dump the dependency tree of<br>the root package into the console.<br></p><p>Usage could look like this:<br>```<br>swift build --dump-dependency-tree<br>```<br>which would print the dependency tree, having the root package as the root<br>of the tree, growing down from there.<br></p><p>The metadata I suggest we include in each node:<br>- Package name<br>- Package version range<br>- Package remote URL (to easily detect conflicting forks)<br>- Package dependencies as the children of this node<br></p><p>This could be used for:<br>- detecting conflicting forks in the dependency tree<br>- understanding conflicting version ranges of dependencies<br>- graphing the dependency tree in a graphing app, into an image (think<br>centralized SwiftPM index which can show you a clickable dependency tree)<br>- debugging/testing of SwiftPM<br></p><p>There are a couple of formats we could output the tree in<br>- .gv (https://en.wikipedia.org/wiki/DOT_(graph_description_language))<br>- Pretty text-based tree for quick CLI viewing<br>- JSON<br></p><p>Personally, I think we should print in the text-based form by default and<br>add an option to output the tree in the .gv format, which can be consumed<br>by many apps e.g. OmniGraffle for further processing.<br></p><p>Overall I think it’d be a nice feature to have for all the reasons outlined<br>above, but primarily it’s a good way to make the version-resolution magic<br>more transparent.<br></p><p>I appreciate all feedback. If you think this should be turned into a formal<br>proposal, I can also do that.<br></p><p>Honza Dvorsky<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160425/77d49aff/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/17301ad52a677b00a621c39ab052e16d?s=50"></div><header><strong>[SwiftPM] Add option to dump a package’s dependency tree</strong> from <string>Daniel Dunbar</string> &lt;daniel at zuster.org&gt;<p>April 25, 2016 at 11:00:00am</p></header><div class="content"><p>I think this is a great idea. I don&#39;t think it needs a proposal since it is<br>just a feature of the swift-build tool, and doesn&#39;t have a significant<br>workflow impact.<br></p><p>I would also vote for a text-based output by default, and options for<br>getting data in JSON or .gv if desired.<br></p><p>If the idea is that users might frequently use this to visualize there dep<br>graph (versus a more debugging focused feature), then I suggest a name<br>like: `--show-dependencies` or `--show-deps`.<br></p><p> - Daniel<br></p><p><br>On Mon, Apr 25, 2016 at 11:13 AM, Honza Dvorsky via swift-build-dev &lt;<br>swift-build-dev at swift.org&gt; wrote:<br></p><p>&gt; Hi All,<br>&gt;<br>&gt; In the last couple of weeks I’ve been building small Swift servers and<br>&gt; interacting with the young ecosystem of public SwiftPM packages. One thing<br>&gt; that quickly came up is the need to track down which of my dependencies (or<br>&gt; any of its parents) is pulling in this one broken dependency, so that I can<br>&gt; fix or work around it.<br>&gt;<br>&gt; This quickly becomes a very tedious task, because the SwiftPM packages<br>&gt; I’ve encountered are usually small (npm style), which leads to relatively<br>&gt; large dependency trees even for moderate-size frameworks.<br>&gt;<br>&gt; To assist developers in easily looking up a misbehaving package or quickly<br>&gt; understanding how SwiftPM arrived at a resolved version, I propose we add a<br>&gt; new mode to swift-build. This mode would simply dump the dependency tree of<br>&gt; the root package into the console.<br>&gt;<br>&gt; Usage could look like this:<br>&gt; ```<br>&gt; swift build --dump-dependency-tree<br>&gt; ```<br>&gt; which would print the dependency tree, having the root package as the root<br>&gt; of the tree, growing down from there.<br>&gt;<br>&gt; The metadata I suggest we include in each node:<br>&gt; - Package name<br>&gt; - Package version range<br>&gt; - Package remote URL (to easily detect conflicting forks)<br>&gt; - Package dependencies as the children of this node<br>&gt;<br>&gt; This could be used for:<br>&gt; - detecting conflicting forks in the dependency tree<br>&gt; - understanding conflicting version ranges of dependencies<br>&gt; - graphing the dependency tree in a graphing app, into an image (think<br>&gt; centralized SwiftPM index which can show you a clickable dependency tree)<br>&gt; - debugging/testing of SwiftPM<br>&gt;<br>&gt; There are a couple of formats we could output the tree in<br>&gt; - .gv (https://en.wikipedia.org/wiki/DOT_(graph_description_language))<br>&gt; - Pretty text-based tree for quick CLI viewing<br>&gt; - JSON<br>&gt;<br>&gt; Personally, I think we should print in the text-based form by default and<br>&gt; add an option to output the tree in the .gv format, which can be consumed<br>&gt; by many apps e.g. OmniGraffle for further processing.<br>&gt;<br>&gt; Overall I think it’d be a nice feature to have for all the reasons<br>&gt; outlined above, but primarily it’s a good way to make the<br>&gt; version-resolution magic more transparent.<br>&gt;<br>&gt; I appreciate all feedback. If you think this should be turned into a<br>&gt; formal proposal, I can also do that.<br>&gt;<br>&gt; Honza Dvorsky<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160425/da0bc580/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc38aef146f886571b3c445851add884?s=50"></div><header><strong>[SwiftPM] Add option to dump a package’s dependency tree</strong> from <string>Honza Dvorsky</string> &lt;jan.dvorsky at me.com&gt;<p>April 25, 2016 at 06:00:00pm</p></header><div class="content"><p>I actually really like --show-dependencies (and we could give it a shortcut<br>-D, to borrow from --generate-xcodeproj and -X).<br></p><p>On Mon, Apr 25, 2016 at 8:53 PM Daniel Dunbar &lt;daniel at zuster.org&gt; wrote:<br></p><p>&gt; I think this is a great idea. I don&#39;t think it needs a proposal since it<br>&gt; is just a feature of the swift-build tool, and doesn&#39;t have a significant<br>&gt; workflow impact.<br>&gt;<br>&gt; I would also vote for a text-based output by default, and options for<br>&gt; getting data in JSON or .gv if desired.<br>&gt;<br>&gt; If the idea is that users might frequently use this to visualize there dep<br>&gt; graph (versus a more debugging focused feature), then I suggest a name<br>&gt; like: `--show-dependencies` or `--show-deps`.<br>&gt;<br>&gt;  - Daniel<br>&gt;<br>&gt;<br>&gt; On Mon, Apr 25, 2016 at 11:13 AM, Honza Dvorsky via swift-build-dev &lt;<br>&gt; swift-build-dev at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Hi All,<br>&gt;&gt;<br>&gt;&gt; In the last couple of weeks I’ve been building small Swift servers and<br>&gt;&gt; interacting with the young ecosystem of public SwiftPM packages. One thing<br>&gt;&gt; that quickly came up is the need to track down which of my dependencies (or<br>&gt;&gt; any of its parents) is pulling in this one broken dependency, so that I can<br>&gt;&gt; fix or work around it.<br>&gt;&gt;<br>&gt;&gt; This quickly becomes a very tedious task, because the SwiftPM packages<br>&gt;&gt; I’ve encountered are usually small (npm style), which leads to relatively<br>&gt;&gt; large dependency trees even for moderate-size frameworks.<br>&gt;&gt;<br>&gt;&gt; To assist developers in easily looking up a misbehaving package or<br>&gt;&gt; quickly understanding how SwiftPM arrived at a resolved version, I propose<br>&gt;&gt; we add a new mode to swift-build. This mode would simply dump the<br>&gt;&gt; dependency tree of the root package into the console.<br>&gt;&gt;<br>&gt;&gt; Usage could look like this:<br>&gt;&gt; ```<br>&gt;&gt; swift build --dump-dependency-tree<br>&gt;&gt; ```<br>&gt;&gt; which would print the dependency tree, having the root package as the<br>&gt;&gt; root of the tree, growing down from there.<br>&gt;&gt;<br>&gt;&gt; The metadata I suggest we include in each node:<br>&gt;&gt; - Package name<br>&gt;&gt; - Package version range<br>&gt;&gt; - Package remote URL (to easily detect conflicting forks)<br>&gt;&gt; - Package dependencies as the children of this node<br>&gt;&gt;<br>&gt;&gt; This could be used for:<br>&gt;&gt; - detecting conflicting forks in the dependency tree<br>&gt;&gt; - understanding conflicting version ranges of dependencies<br>&gt;&gt; - graphing the dependency tree in a graphing app, into an image (think<br>&gt;&gt; centralized SwiftPM index which can show you a clickable dependency tree)<br>&gt;&gt; - debugging/testing of SwiftPM<br>&gt;&gt;<br>&gt;&gt; There are a couple of formats we could output the tree in<br>&gt;&gt; - .gv (https://en.wikipedia.org/wiki/DOT_(graph_description_language))<br>&gt;&gt; - Pretty text-based tree for quick CLI viewing<br>&gt;&gt; - JSON<br>&gt;&gt;<br>&gt;&gt; Personally, I think we should print in the text-based form by default and<br>&gt;&gt; add an option to output the tree in the .gv format, which can be consumed<br>&gt;&gt; by many apps e.g. OmniGraffle for further processing.<br>&gt;&gt;<br>&gt;&gt; Overall I think it’d be a nice feature to have for all the reasons<br>&gt;&gt; outlined above, but primarily it’s a good way to make the<br>&gt;&gt; version-resolution magic more transparent.<br>&gt;&gt;<br>&gt;&gt; I appreciate all feedback. If you think this should be turned into a<br>&gt;&gt; formal proposal, I can also do that.<br>&gt;&gt;<br>&gt;&gt; Honza Dvorsky<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-build-dev mailing list<br>&gt;&gt; swift-build-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160425/43f62d6e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae51ca494b37cc270597830da66f089f?s=50"></div><header><strong>[SwiftPM] Add option to dump a package’s dependency tree</strong> from <string>Max Howell</string> &lt;max.howell at apple.com&gt;<p>April 28, 2016 at 12:00:00pm</p></header><div class="content"><p>I agree that this feature would be great.<br></p><p>&gt; On Apr 25, 2016, at 11:58 AM, Honza Dvorsky via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I actually really like --show-dependencies (and we could give it a shortcut -D, to borrow from --generate-xcodeproj and -X).<br>&gt; <br>&gt; On Mon, Apr 25, 2016 at 8:53 PM Daniel Dunbar &lt;daniel at zuster.org &lt;mailto:daniel at zuster.org&gt;&gt; wrote:<br>&gt; I think this is a great idea. I don&#39;t think it needs a proposal since it is just a feature of the swift-build tool, and doesn&#39;t have a significant workflow impact.<br>&gt; <br>&gt; I would also vote for a text-based output by default, and options for getting data in JSON or .gv if desired.<br>&gt; <br>&gt; If the idea is that users might frequently use this to visualize there dep graph (versus a more debugging focused feature), then I suggest a name like: `--show-dependencies` or `--show-deps`.<br>&gt; <br>&gt;  - Daniel<br>&gt; <br>&gt; <br>&gt; On Mon, Apr 25, 2016 at 11:13 AM, Honza Dvorsky via swift-build-dev &lt;swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;&gt; wrote:<br>&gt; Hi All,<br>&gt; <br>&gt; In the last couple of weeks I’ve been building small Swift servers and interacting with the young ecosystem of public SwiftPM packages. One thing that quickly came up is the need to track down which of my dependencies (or any of its parents) is pulling in this one broken dependency, so that I can fix or work around it.<br>&gt; <br>&gt; This quickly becomes a very tedious task, because the SwiftPM packages I’ve encountered are usually small (npm style), which leads to relatively large dependency trees even for moderate-size frameworks.<br>&gt; <br>&gt; To assist developers in easily looking up a misbehaving package or quickly understanding how SwiftPM arrived at a resolved version, I propose we add a new mode to swift-build. This mode would simply dump the dependency tree of the root package into the console.<br>&gt; <br>&gt; Usage could look like this:<br>&gt; ```<br>&gt; swift build --dump-dependency-tree<br>&gt; ```<br>&gt; which would print the dependency tree, having the root package as the root of the tree, growing down from there.<br>&gt; <br>&gt; The metadata I suggest we include in each node:<br>&gt; - Package name<br>&gt; - Package version range<br>&gt; - Package remote URL (to easily detect conflicting forks)<br>&gt; - Package dependencies as the children of this node<br>&gt; <br>&gt; This could be used for:<br>&gt; - detecting conflicting forks in the dependency tree<br>&gt; - understanding conflicting version ranges of dependencies<br>&gt; - graphing the dependency tree in a graphing app, into an image (think centralized SwiftPM index which can show you a clickable dependency tree)<br>&gt; - debugging/testing of SwiftPM<br>&gt; <br>&gt; There are a couple of formats we could output the tree in<br>&gt; - .gv (https://en.wikipedia.org/wiki/DOT_(graph_description_language) &lt;https://en.wikipedia.org/wiki/DOT_(graph_description_language)&gt;)<br>&gt; - Pretty text-based tree for quick CLI viewing<br>&gt; - JSON<br>&gt; <br>&gt; Personally, I think we should print in the text-based form by default and add an option to output the tree in the .gv format, which can be consumed by many apps e.g. OmniGraffle for further processing.<br>&gt; <br>&gt; Overall I think it’d be a nice feature to have for all the reasons outlined above, but primarily it’s a good way to make the version-resolution magic more transparent.<br>&gt; <br>&gt; I appreciate all feedback. If you think this should be turned into a formal proposal, I can also do that.<br>&gt; <br>&gt; Honza Dvorsky<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev &lt;https://lists.swift.org/mailman/listinfo/swift-build-dev&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160428/04660572/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6dbccdb14c9594946a01d146877040c1?s=50"></div><header><strong>[SwiftPM] Add option to dump a package’s dependency tree</strong> from <string>bhargav gurlanka</string> &lt;bhargav.grlnk at gmail.com&gt;<p>May  1, 2016 at 02:00:00am</p></header><div class="content"><p>Raised PR-302 &lt;https://github.com/apple/swift-package-manager/pull/302&gt; to<br>dump dependencies in plain text format. Also attached sample output in PR,<br>please comment if this is what is expected.<br></p><p>On 29 April 2016 at 00:47, Max Howell via swift-build-dev &lt;<br>swift-build-dev at swift.org&gt; wrote:<br></p><p>&gt; I agree that this feature would be great.<br>&gt;<br>&gt; On Apr 25, 2016, at 11:58 AM, Honza Dvorsky via swift-build-dev &lt;<br>&gt; swift-build-dev at swift.org&gt; wrote:<br>&gt;<br>&gt; I actually really like --show-dependencies (and we could give it a<br>&gt; shortcut -D, to borrow from --generate-xcodeproj and -X).<br>&gt;<br>&gt; On Mon, Apr 25, 2016 at 8:53 PM Daniel Dunbar &lt;daniel at zuster.org&gt; wrote:<br>&gt;<br>&gt;&gt; I think this is a great idea. I don&#39;t think it needs a proposal since it<br>&gt;&gt; is just a feature of the swift-build tool, and doesn&#39;t have a significant<br>&gt;&gt; workflow impact.<br>&gt;&gt;<br>&gt;&gt; I would also vote for a text-based output by default, and options for<br>&gt;&gt; getting data in JSON or .gv if desired.<br>&gt;&gt;<br>&gt;&gt; If the idea is that users might frequently use this to visualize there<br>&gt;&gt; dep graph (versus a more debugging focused feature), then I suggest a name<br>&gt;&gt; like: `--show-dependencies` or `--show-deps`.<br>&gt;&gt;<br>&gt;&gt;  - Daniel<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Mon, Apr 25, 2016 at 11:13 AM, Honza Dvorsky via swift-build-dev &lt;<br>&gt;&gt; swift-build-dev at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Hi All,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; In the last couple of weeks I’ve been building small Swift servers and<br>&gt;&gt;&gt; interacting with the young ecosystem of public SwiftPM packages. One thing<br>&gt;&gt;&gt; that quickly came up is the need to track down which of my dependencies (or<br>&gt;&gt;&gt; any of its parents) is pulling in this one broken dependency, so that I can<br>&gt;&gt;&gt; fix or work around it.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This quickly becomes a very tedious task, because the SwiftPM packages<br>&gt;&gt;&gt; I’ve encountered are usually small (npm style), which leads to relatively<br>&gt;&gt;&gt; large dependency trees even for moderate-size frameworks.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; To assist developers in easily looking up a misbehaving package or<br>&gt;&gt;&gt; quickly understanding how SwiftPM arrived at a resolved version, I propose<br>&gt;&gt;&gt; we add a new mode to swift-build. This mode would simply dump the<br>&gt;&gt;&gt; dependency tree of the root package into the console.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Usage could look like this:<br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; swift build --dump-dependency-tree<br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; which would print the dependency tree, having the root package as the<br>&gt;&gt;&gt; root of the tree, growing down from there.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The metadata I suggest we include in each node:<br>&gt;&gt;&gt; - Package name<br>&gt;&gt;&gt; - Package version range<br>&gt;&gt;&gt; - Package remote URL (to easily detect conflicting forks)<br>&gt;&gt;&gt; - Package dependencies as the children of this node<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This could be used for:<br>&gt;&gt;&gt; - detecting conflicting forks in the dependency tree<br>&gt;&gt;&gt; - understanding conflicting version ranges of dependencies<br>&gt;&gt;&gt; - graphing the dependency tree in a graphing app, into an image (think<br>&gt;&gt;&gt; centralized SwiftPM index which can show you a clickable dependency tree)<br>&gt;&gt;&gt; - debugging/testing of SwiftPM<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; There are a couple of formats we could output the tree in<br>&gt;&gt;&gt; - .gv (https://en.wikipedia.org/wiki/DOT_(graph_description_language))<br>&gt;&gt;&gt; - Pretty text-based tree for quick CLI viewing<br>&gt;&gt;&gt; - JSON<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Personally, I think we should print in the text-based form by default<br>&gt;&gt;&gt; and add an option to output the tree in the .gv format, which can be<br>&gt;&gt;&gt; consumed by many apps e.g. OmniGraffle for further processing.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Overall I think it’d be a nice feature to have for all the reasons<br>&gt;&gt;&gt; outlined above, but primarily it’s a good way to make the<br>&gt;&gt;&gt; version-resolution magic more transparent.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I appreciate all feedback. If you think this should be turned into a<br>&gt;&gt;&gt; formal proposal, I can also do that.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Honza Dvorsky<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-build-dev mailing list<br>&gt;&gt;&gt; swift-build-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;<br>&gt;<br></p><p><br>-- <br>Bhargav Gurlanka<br>iOS Developer,<br>Housing.com<br></p><p>   mobile : +91 9920272428<br>    email : bhargav.grlnk at gmail.com<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160501/b278ef8e/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
