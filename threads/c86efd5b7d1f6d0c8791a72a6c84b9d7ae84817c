<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>Tuple conversion and type composition</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>January 31, 2016 at 04:00:00pm</p></header><div class="content"><p>Hi Swift Evolution populace,<br></p><p>I&#39;d like a a way to concatenate tuple types together:<br></p><p>typealias ABCD = (A,B)+(C,D) // Same as (A,B,C,D)<br></p><p>Also a way to allow tuples to be converted to other tuples that are the<br>same when flattened:<br></p><p>(a,(b,c),d) as ((a,b),(c,d))<br></p><p>This proposal aims to make the minimal changes possible, with the most<br>familiar syntax, and give tuples this power.<br>Examples<br>These are things that will be possible after these changes.<br>Joining two tuples together<br></p><p>let a = (1,2), b = (3,4)let c = join(a, b) // (Int,Int,Int,Int)<br></p><p>Stack like operations on tuples<br></p><p>let (abcde)  = (1,2,3,4,5)let (abcd,e) = pop(abcde)let (abc,d)  =<br>pop(abcd)let (abce)   = push(abc, e)assert(abce == (1,2,3,5))<br></p><p>Chained ZipSequence<br></p><p>let a = [1,2,3]let b = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]let c = [1.2, 2.3, 3.4]let d =<br>[nil, nil, 123]let abc = a.zip(b).zip(c).zip(d) //<br>AnySequence&lt;(Int,String,Float,Int?)&gt;<br></p><p>Turn any function with a callback into one with a promise<br></p><p>func promise&lt;A,B,C&gt;(f: (A + (B-&gt;Void)) -&gt; C) -&gt; A -&gt; (C, Promise&lt;B&gt;)<br></p><p>This proposal, and more examples, can be seen in more detail here:<br></p><p>https://github.com/therealbnut/swift-evolution/blob/therealbnut-tuple-manipulation/proposals/0000-tuple-operators.md<br></p><p>I&#39;ll keep this file up to date over the course of the discussion, PRs are<br>welcome.<br></p><p>*Related proposals:*<br></p><p>This proposal&#39;s use cases relate to at least a few other currently active<br>proposals:<br></p><p>   - *Compile-time parameters*<br>   - *http://thread.gmane.org/gmane.comp.lang.swift.evolution/5240<br>      &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/5240&gt;*<br>   - *Contiguous Variables (A.K.A. Fixed Sized Array Type)*<br>      -<br>*http://thread.gmane.org/gmane.comp.lang.swift.evolution/4809<br>      &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/4809&gt; *<br>   -<br>*Remove implicit tuple splat behavior from function applications *<br>      - *http://thread.gmane.org/gmane.comp.lang.swift.evolution/4681<br>      &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/4681&gt;*<br></p><p>Thanks!<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160131/c86e817c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Tuple conversion and type composition</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>January 31, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; I&#39;d like a a way to concatenate tuple types together:<br>&gt; <br>&gt; typealias ABCD = (A,B)+(C,D) // Same as (A,B,C,D)<br>I don&#39;t like the use of &quot;+&quot; for concatenation, but giving more power to tuples would be neat… you just need to find examples with convincing motivation ;-)<br>Obviously, the value of tuple-operation increases with the prevalence of tuples in language and libraries, so I wouldn&#39;t be surprised if their importance rises in the future (and maybe we can think of nice ways to combine tuple-related ideas).<br></p><p>&gt; Also a way to allow tuples to be converted to other tuples that are the same when flattened:<br>&gt; <br>&gt; (a,(b,c),d) as ((a,b),(c,d))<br>It would be cool if such a concept (&quot;compiler, please check if those two types have a compatible memory-layout, and if that is the case, let me use them interchangeable when I tell you to do so) could be extended to structs — that could solve the problem of different implementations of fundamental types nicely.<br></p><p>That leads me to an unrelated thought:<br>It seems to me there is a duality between methods and closures on one side, and structs and tuples on the other — tuples feel very much like anonymous structs (restricted by the fact that you cannot add methods like custom getters &amp; setters). It&#39;s not related to you proposal, but I wonder if there are implications visible from this point of view...<br></p><p>Tino<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160131/6669f648/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>Tuple conversion and type composition</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>February  7, 2016 at 09:00:00am</p></header><div class="content"><p>Thanks Tino, it would be good to come up with some alternatives for +.<br></p><p>I was initially thinking `(Int,Int) (Int,Int)` without operators. However I<br>think this could potentially be a mistake. I like + as it&#39;s familiar with<br>array operators.<br></p><p>As for the prevalence of tuples in the language, every function and value<br>in Swift has a tuple in it. The associated values in an enum are a tuple.<br>They are everywhere.<br></p><p>For some more examples have a look at the linked proposal :)<br></p><p><br>On Sun, Jan 31, 2016 at 11:28 PM, Tino Heth &lt;2th at gmx.de&gt; wrote:<br></p><p>&gt; I&#39;d like a a way to concatenate tuple types together:<br>&gt;<br>&gt; typealias ABCD = (A,B)+(C,D) // Same as (A,B,C,D)<br>&gt;<br>&gt; I don&#39;t like the use of &quot;+&quot; for concatenation, but giving more power to<br>&gt; tuples would be neat… you just need to find examples with convincing<br>&gt; motivation ;-)<br>&gt; Obviously, the value of tuple-operation increases with the prevalence of<br>&gt; tuples in language and libraries, so I wouldn&#39;t be surprised if their<br>&gt; importance rises in the future (and maybe we can think of nice ways to<br>&gt; combine tuple-related ideas).<br>&gt;<br>&gt; Also a way to allow tuples to be converted to other tuples that are the<br>&gt; same when flattened:<br>&gt;<br>&gt; (a,(b,c),d) as ((a,b),(c,d))<br>&gt;<br>&gt; It would be cool if such a concept (&quot;compiler, please check if those two<br>&gt; types have a compatible memory-layout, and if that is the case, let me use<br>&gt; them interchangeable when I tell you to do so) could be extended to structs<br>&gt; — that could solve the problem of different implementations of fundamental<br>&gt; types nicely.<br>&gt;<br>&gt; That leads me to an unrelated thought:<br>&gt; It seems to me there is a duality between methods and closures on one<br>&gt; side, and structs and tuples on the other — tuples feel very much like<br>&gt; anonymous structs (restricted by the fact that you cannot add methods like<br>&gt; custom getters &amp; setters). It&#39;s not related to you proposal, but I wonder<br>&gt; if there are implications visible from this point of view...<br>&gt;<br>&gt; Tino<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160207/f34cc54f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Tuple conversion and type composition</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>February  6, 2016 at 09:00:00pm</p></header><div class="content"><p>How about &quot;&amp;&quot;? That way you can still define:<br>func + (lhs: (Int, Int), rhs: (Int, Int)) -&gt; (Int, Int) {...}<br>Without either removing the ability to concatenate tuples, or having to annotate types all over the place to resolve the ambiguities. (I&#39;d love to use a different operator for concatenating Arrays &amp; Strings, as well, but that&#39;s not what this thread is about)<br></p><p>- Dave Sweeris<br></p><p>&gt; On Feb 6, 2016, at 14:41, Andrew Bennett via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Thanks Tino, it would be good to come up with some alternatives for +.<br>&gt; <br>&gt; I was initially thinking `(Int,Int) (Int,Int)` without operators. However I think this could potentially be a mistake. I like + as it&#39;s familiar with array operators.<br>&gt; <br>&gt; As for the prevalence of tuples in the language, every function and value in Swift has a tuple in it. The associated values in an enum are a tuple. They are everywhere.<br>&gt; <br>&gt; For some more examples have a look at the linked proposal :)<br>&gt; <br>&gt; <br>&gt; On Sun, Jan 31, 2016 at 11:28 PM, Tino Heth &lt;2th at gmx.de&gt; wrote:<br>&gt;&gt;&gt; I&#39;d like a a way to concatenate tuple types together:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; typealias ABCD = (A,B)+(C,D) // Same as (A,B,C,D)<br>&gt;&gt; <br>&gt;&gt; I don&#39;t like the use of &quot;+&quot; for concatenation, but giving more power to tuples would be neat… you just need to find examples with convincing motivation ;-)<br>&gt;&gt; Obviously, the value of tuple-operation increases with the prevalence of tuples in language and libraries, so I wouldn&#39;t be surprised if their importance rises in the future (and maybe we can think of nice ways to combine tuple-related ideas).<br>&gt;&gt; <br>&gt;&gt;&gt; Also a way to allow tuples to be converted to other tuples that are the same when flattened:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (a,(b,c),d) as ((a,b),(c,d))<br>&gt;&gt; It would be cool if such a concept (&quot;compiler, please check if those two types have a compatible memory-layout, and if that is the case, let me use them interchangeable when I tell you to do so) could be extended to structs — that could solve the problem of different implementations of fundamental types nicely.<br>&gt;&gt; <br>&gt;&gt; That leads me to an unrelated thought:<br>&gt;&gt; It seems to me there is a duality between methods and closures on one side, and structs and tuples on the other — tuples feel very much like anonymous structs (restricted by the fact that you cannot add methods like custom getters &amp; setters). It&#39;s not related to you proposal, but I wonder if there are implications visible from this point of view...<br>&gt;&gt; <br>&gt;&gt; Tino<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160206/2c19aa4a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05e222e6ef4d84013bb3baeb0e25c90b?s=50"></div><header><strong>Tuple conversion and type composition</strong> from <string>Patrick Gili</string> &lt;gili.patrick.r at gili-labs.com&gt;<p>February  7, 2016 at 11:00:00am</p></header><div class="content"><p>What about using &lt;&lt; to denote concatenation? Many languages use this operator to denote &quot;append&quot;, which is essentially concatenate.<br></p><p>-Patrick<br></p><p>&gt; On Feb 6, 2016, at 5:41 PM, Andrew Bennett via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Thanks Tino, it would be good to come up with some alternatives for +.<br>&gt; <br>&gt; I was initially thinking `(Int,Int) (Int,Int)` without operators. However I think this could potentially be a mistake. I like + as it&#39;s familiar with array operators.<br>&gt; <br>&gt; As for the prevalence of tuples in the language, every function and value in Swift has a tuple in it. The associated values in an enum are a tuple. They are everywhere.<br>&gt; <br>&gt; For some more examples have a look at the linked proposal :)<br>&gt; <br>&gt; <br>&gt; On Sun, Jan 31, 2016 at 11:28 PM, Tino Heth &lt;2th at gmx.de &lt;mailto:2th at gmx.de&gt;&gt; wrote:<br>&gt;&gt; I&#39;d like a a way to concatenate tuple types together:<br>&gt;&gt; <br>&gt;&gt; typealias ABCD = (A,B)+(C,D) // Same as (A,B,C,D)<br>&gt; <br>&gt; I don&#39;t like the use of &quot;+&quot; for concatenation, but giving more power to tuples would be neat… you just need to find examples with convincing motivation ;-)<br>&gt; Obviously, the value of tuple-operation increases with the prevalence of tuples in language and libraries, so I wouldn&#39;t be surprised if their importance rises in the future (and maybe we can think of nice ways to combine tuple-related ideas).<br>&gt; <br>&gt;&gt; Also a way to allow tuples to be converted to other tuples that are the same when flattened:<br>&gt;&gt; <br>&gt;&gt; (a,(b,c),d) as ((a,b),(c,d))<br>&gt; It would be cool if such a concept (&quot;compiler, please check if those two types have a compatible memory-layout, and if that is the case, let me use them interchangeable when I tell you to do so) could be extended to structs — that could solve the problem of different implementations of fundamental types nicely.<br>&gt; <br>&gt; That leads me to an unrelated thought:<br>&gt; It seems to me there is a duality between methods and closures on one side, and structs and tuples on the other — tuples feel very much like anonymous structs (restricted by the fact that you cannot add methods like custom getters &amp; setters). It&#39;s not related to you proposal, but I wonder if there are implications visible from this point of view...<br>&gt; <br>&gt; Tino<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160207/38ce4daa/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Tuple conversion and type composition</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>February  7, 2016 at 10:00:00am</p></header><div class="content"><p>Yeah, that&#39;s better than &quot;+&quot; or &quot;&amp;&quot;. What about &quot;|&quot;?<br></p><p>Sent from my iPhone<br></p><p>&gt; On Feb 7, 2016, at 08:12, Patrick Gili via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; What about using &lt;&lt; to denote concatenation? Many languages use this operator to denote &quot;append&quot;, which is essentially concatenate.<br>&gt; <br>&gt; -Patrick<br>&gt; <br>&gt;&gt; On Feb 6, 2016, at 5:41 PM, Andrew Bennett via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Thanks Tino, it would be good to come up with some alternatives for +.<br>&gt;&gt; <br>&gt;&gt; I was initially thinking `(Int,Int) (Int,Int)` without operators. However I think this could potentially be a mistake. I like + as it&#39;s familiar with array operators.<br>&gt;&gt; <br>&gt;&gt; As for the prevalence of tuples in the language, every function and value in Swift has a tuple in it. The associated values in an enum are a tuple. They are everywhere.<br>&gt;&gt; <br>&gt;&gt; For some more examples have a look at the linked proposal :)<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Sun, Jan 31, 2016 at 11:28 PM, Tino Heth &lt;2th at gmx.de&gt; wrote:<br>&gt;&gt;&gt;&gt; I&#39;d like a a way to concatenate tuple types together:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; typealias ABCD = (A,B)+(C,D) // Same as (A,B,C,D)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t like the use of &quot;+&quot; for concatenation, but giving more power to tuples would be neat… you just need to find examples with convincing motivation ;-)<br>&gt;&gt;&gt; Obviously, the value of tuple-operation increases with the prevalence of tuples in language and libraries, so I wouldn&#39;t be surprised if their importance rises in the future (and maybe we can think of nice ways to combine tuple-related ideas).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Also a way to allow tuples to be converted to other tuples that are the same when flattened:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; (a,(b,c),d) as ((a,b),(c,d))<br>&gt;&gt;&gt; It would be cool if such a concept (&quot;compiler, please check if those two types have a compatible memory-layout, and if that is the case, let me use them interchangeable when I tell you to do so) could be extended to structs — that could solve the problem of different implementations of fundamental types nicely.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That leads me to an unrelated thought:<br>&gt;&gt;&gt; It seems to me there is a duality between methods and closures on one side, and structs and tuples on the other — tuples feel very much like anonymous structs (restricted by the fact that you cannot add methods like custom getters &amp; setters). It&#39;s not related to you proposal, but I wonder if there are implications visible from this point of view...<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Tino<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160207/973a700b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05e222e6ef4d84013bb3baeb0e25c90b?s=50"></div><header><strong>Tuple conversion and type composition</strong> from <string>Patrick Gili</string> &lt;gili.patrick.r at gili-labs.com&gt;<p>February  7, 2016 at 01:00:00pm</p></header><div class="content"><p>&quot;|&quot; denotes bitwise-OR. Not necessarily a great choice.<br></p><p>-Patrick<br></p><p>&gt; On Feb 7, 2016, at 1:41 PM, David Sweeris &lt;davesweeris at mac.com&gt; wrote:<br>&gt; <br>&gt; Yeah, that&#39;s better than &quot;+&quot; or &quot;&amp;&quot;. What about &quot;|&quot;?<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On Feb 7, 2016, at 08:12, Patrick Gili via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; What about using &lt;&lt; to denote concatenation? Many languages use this operator to denote &quot;append&quot;, which is essentially concatenate.<br>&gt;&gt; <br>&gt;&gt; -Patrick<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 6, 2016, at 5:41 PM, Andrew Bennett via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks Tino, it would be good to come up with some alternatives for +.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I was initially thinking `(Int,Int) (Int,Int)` without operators. However I think this could potentially be a mistake. I like + as it&#39;s familiar with array operators.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As for the prevalence of tuples in the language, every function and value in Swift has a tuple in it. The associated values in an enum are a tuple. They are everywhere.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For some more examples have a look at the linked proposal :)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Sun, Jan 31, 2016 at 11:28 PM, Tino Heth &lt;2th at gmx.de &lt;mailto:2th at gmx.de&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; I&#39;d like a a way to concatenate tuple types together:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; typealias ABCD = (A,B)+(C,D) // Same as (A,B,C,D)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t like the use of &quot;+&quot; for concatenation, but giving more power to tuples would be neat… you just need to find examples with convincing motivation ;-)<br>&gt;&gt;&gt; Obviously, the value of tuple-operation increases with the prevalence of tuples in language and libraries, so I wouldn&#39;t be surprised if their importance rises in the future (and maybe we can think of nice ways to combine tuple-related ideas).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Also a way to allow tuples to be converted to other tuples that are the same when flattened:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; (a,(b,c),d) as ((a,b),(c,d))<br>&gt;&gt;&gt; It would be cool if such a concept (&quot;compiler, please check if those two types have a compatible memory-layout, and if that is the case, let me use them interchangeable when I tell you to do so) could be extended to structs — that could solve the problem of different implementations of fundamental types nicely.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That leads me to an unrelated thought:<br>&gt;&gt;&gt; It seems to me there is a duality between methods and closures on one side, and structs and tuples on the other — tuples feel very much like anonymous structs (restricted by the fact that you cannot add methods like custom getters &amp; setters). It&#39;s not related to you proposal, but I wonder if there are implications visible from this point of view...<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Tino<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160207/9718ae32/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Tuple conversion and type composition</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>February  7, 2016 at 10:00:00am</p></header><div class="content"><p>Good point.<br></p><p>Sent from my iPhone<br></p><p>&gt; On Feb 7, 2016, at 10:43, Patrick Gili &lt;gili.patrick.r at gili-labs.com&gt; wrote:<br>&gt; <br>&gt; &quot;|&quot; denotes bitwise-OR. Not necessarily a great choice.<br>&gt; <br>&gt; -Patrick<br>&gt; <br>&gt;&gt; On Feb 7, 2016, at 1:41 PM, David Sweeris &lt;davesweeris at mac.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Yeah, that&#39;s better than &quot;+&quot; or &quot;&amp;&quot;. What about &quot;|&quot;?<br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 7, 2016, at 08:12, Patrick Gili via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What about using &lt;&lt; to denote concatenation? Many languages use this operator to denote &quot;append&quot;, which is essentially concatenate.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Patrick<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 6, 2016, at 5:41 PM, Andrew Bennett via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks Tino, it would be good to come up with some alternatives for +.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I was initially thinking `(Int,Int) (Int,Int)` without operators. However I think this could potentially be a mistake. I like + as it&#39;s familiar with array operators.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; As for the prevalence of tuples in the language, every function and value in Swift has a tuple in it. The associated values in an enum are a tuple. They are everywhere.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; For some more examples have a look at the linked proposal :)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Sun, Jan 31, 2016 at 11:28 PM, Tino Heth &lt;2th at gmx.de&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; I&#39;d like a a way to concatenate tuple types together:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; typealias ABCD = (A,B)+(C,D) // Same as (A,B,C,D)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I don&#39;t like the use of &quot;+&quot; for concatenation, but giving more power to tuples would be neat… you just need to find examples with convincing motivation ;-)<br>&gt;&gt;&gt;&gt;&gt; Obviously, the value of tuple-operation increases with the prevalence of tuples in language and libraries, so I wouldn&#39;t be surprised if their importance rises in the future (and maybe we can think of nice ways to combine tuple-related ideas).<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Also a way to allow tuples to be converted to other tuples that are the same when flattened:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; (a,(b,c),d) as ((a,b),(c,d))<br>&gt;&gt;&gt;&gt;&gt; It would be cool if such a concept (&quot;compiler, please check if those two types have a compatible memory-layout, and if that is the case, let me use them interchangeable when I tell you to do so) could be extended to structs — that could solve the problem of different implementations of fundamental types nicely.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; That leads me to an unrelated thought:<br>&gt;&gt;&gt;&gt;&gt; It seems to me there is a duality between methods and closures on one side, and structs and tuples on the other — tuples feel very much like anonymous structs (restricted by the fact that you cannot add methods like custom getters &amp; setters). It&#39;s not related to you proposal, but I wonder if there are implications visible from this point of view...<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Tino<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160207/706c7df2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4d13105de53a43ce1df97869ca6c140e?s=50"></div><header><strong>Tuple conversion and type composition</strong> from <string>Maximilian Hünenberger</string> &lt;m.huenenberger at me.com&gt;<p>February  8, 2016 at 01:00:00am</p></header><div class="content"><p>We should clarify whether we see Tuples as Vectors/Matrices or Lists/Arrays since &quot;+&quot; has different meanings:<br></p><p><br>		Adding individual Numbers					Concatenating<br>---------------------------------------------------------------------------------------------------------------------<br>Vector: 	(1, 2) + (3, 4) = (4, 6)						((1, 2) | (3, 4)) = (1, 2, 3, 4)   // mathematically not fully correct<br>List:     	zip((1, 2), (3, 4)).map{ $0.0 + $0.1 } = (4, 6)		(1, 2) + (3, 4) = (1, 2, 3, 4)<br></p><p><br>In my opinion Tuples are generally heterogenous ordered lists since they can also contain elements of different types.<br></p><p>This thread &quot;Contiguous Variables (A.K.A. Fixed Sized Array Type)&quot; which discusses the use of &quot;(4 x Int)&quot; as sugar for &quot;(Int, Int, Int, Int)&quot;. It suggest more of a vector/matrix-like behavior of Tuples.<br></p><p>Note: Treating them as vectors operators like &quot;+&quot;, &quot;-&quot; and &quot;*&quot; are (almost) only defined on number Tuples and only two Tuples with specific dimensions.<br></p><p>- Maximilian<br></p><p>&gt; Am 07.02.2016 um 19:53 schrieb David Sweeris via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Good point.<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On Feb 7, 2016, at 10:43, Patrick Gili &lt;gili.patrick.r at gili-labs.com &lt;mailto:gili.patrick.r at gili-labs.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; &quot;|&quot; denotes bitwise-OR. Not necessarily a great choice.<br>&gt;&gt; <br>&gt;&gt; -Patrick<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 7, 2016, at 1:41 PM, David Sweeris &lt;davesweeris at mac.com &lt;mailto:davesweeris at mac.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yeah, that&#39;s better than &quot;+&quot; or &quot;&amp;&quot;. What about &quot;|&quot;?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Feb 7, 2016, at 08:12, Patrick Gili via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What about using &lt;&lt; to denote concatenation? Many languages use this operator to denote &quot;append&quot;, which is essentially concatenate.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Patrick<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Feb 6, 2016, at 5:41 PM, Andrew Bennett via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Thanks Tino, it would be good to come up with some alternatives for +.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I was initially thinking `(Int,Int) (Int,Int)` without operators. However I think this could potentially be a mistake. I like + as it&#39;s familiar with array operators.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; As for the prevalence of tuples in the language, every function and value in Swift has a tuple in it. The associated values in an enum are a tuple. They are everywhere.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; For some more examples have a look at the linked proposal :)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Sun, Jan 31, 2016 at 11:28 PM, Tino Heth &lt;2th at gmx.de &lt;mailto:2th at gmx.de&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; I&#39;d like a a way to concatenate tuple types together:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; typealias ABCD = (A,B)+(C,D) // Same as (A,B,C,D)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I don&#39;t like the use of &quot;+&quot; for concatenation, but giving more power to tuples would be neat… you just need to find examples with convincing motivation ;-)<br>&gt;&gt;&gt;&gt;&gt; Obviously, the value of tuple-operation increases with the prevalence of tuples in language and libraries, so I wouldn&#39;t be surprised if their importance rises in the future (and maybe we can think of nice ways to combine tuple-related ideas).<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Also a way to allow tuples to be converted to other tuples that are the same when flattened:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; (a,(b,c),d) as ((a,b),(c,d))<br>&gt;&gt;&gt;&gt;&gt; It would be cool if such a concept (&quot;compiler, please check if those two types have a compatible memory-layout, and if that is the case, let me use them interchangeable when I tell you to do so) could be extended to structs — that could solve the problem of different implementations of fundamental types nicely.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; That leads me to an unrelated thought:<br>&gt;&gt;&gt;&gt;&gt; It seems to me there is a duality between methods and closures on one side, and structs and tuples on the other — tuples feel very much like anonymous structs (restricted by the fact that you cannot add methods like custom getters &amp; setters). It&#39;s not related to you proposal, but I wonder if there are implications visible from this point of view...<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Tino<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160208/e5eda1f3/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>Tuple conversion and type composition</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>February  8, 2016 at 12:00:00pm</p></header><div class="content"><p>Personally I&#39;d prefer not to overlap with potential user defined operators.<br>It may be good to make it something like this:<br>    (Int, Int) (Float, String)<br>Becomes:<br>    (Int, Int, Float, String)<br></p><p>This is similar to C where you can write &quot;hello&quot; &quot; world&quot; to make a string<br>&quot;hello world&quot;.<br></p><p>I don&#39;t think there&#39;s any syntactic ambiguity with that. I think it&#39;s fine<br>to use special syntax rather than an operator as it requires compile/time<br>support anyway.<br></p><p>On Monday, 8 February 2016, Maximilian Hünenberger &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; We should clarify whether we see Tuples as Vectors/Matrices or<br>&gt; Lists/Arrays since &quot;+&quot; has different meanings:<br>&gt;<br>&gt;<br>&gt; Adding individual Numbers Concatenating<br>&gt;<br>&gt; ---------------------------------------------------------------------------------------------------------------------<br>&gt; Vector: (1, 2) + (3, 4) = (4, 6) ((1, 2) | (3, 4)) = (1, 2, 3, 4)   //<br>&gt; mathematically not fully correct<br>&gt; List:     zip((1, 2), (3, 4)).map{ $0.0 + $0.1 } = (4, 6) (1, 2) + (3, 4)<br>&gt; = (1, 2, 3, 4)<br>&gt;<br>&gt;<br>&gt; In my opinion Tuples are generally heterogenous ordered lists since they<br>&gt; can also contain elements of different types.<br>&gt;<br>&gt; This thread &quot;Contiguous Variables (A.K.A. Fixed Sized Array Type)&quot; which<br>&gt; discusses the use of &quot;(4 x Int)&quot; as sugar for &quot;(Int, Int, Int, Int)&quot;. It<br>&gt; suggest more of a vector/matrix-like behavior of Tuples.<br>&gt;<br>&gt; Note: Treating them as vectors operators like &quot;+&quot;, &quot;-&quot; and &quot;*&quot; are<br>&gt; (almost) only defined on number Tuples and only two Tuples with specific<br>&gt; dimensions.<br>&gt;<br>&gt; - Maximilian<br>&gt;<br>&gt; Am 07.02.2016 um 19:53 schrieb David Sweeris via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt;:<br>&gt;<br>&gt; Good point.<br>&gt;<br>&gt; Sent from my iPhone<br>&gt;<br>&gt; On Feb 7, 2016, at 10:43, Patrick Gili &lt;gili.patrick.r at gili-labs.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; &quot;|&quot; denotes bitwise-OR. Not necessarily a great choice.<br>&gt;<br>&gt; -Patrick<br>&gt;<br>&gt; On Feb 7, 2016, at 1:41 PM, David Sweeris &lt;davesweeris at mac.com&gt; wrote:<br>&gt;<br>&gt; Yeah, that&#39;s better than &quot;+&quot; or &quot;&amp;&quot;. What about &quot;|&quot;?<br>&gt;<br>&gt; Sent from my iPhone<br>&gt;<br>&gt; On Feb 7, 2016, at 08:12, Patrick Gili via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; What about using &lt;&lt; to denote concatenation? Many languages use this<br>&gt; operator to denote &quot;append&quot;, which is essentially concatenate.<br>&gt;<br>&gt; -Patrick<br>&gt;<br>&gt; On Feb 6, 2016, at 5:41 PM, Andrew Bennett via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Thanks Tino, it would be good to come up with some alternatives for +.<br>&gt;<br>&gt; I was initially thinking `(Int,Int) (Int,Int)` without operators. However<br>&gt; I think this could potentially be a mistake. I like + as it&#39;s familiar with<br>&gt; array operators.<br>&gt;<br>&gt; As for the prevalence of tuples in the language, every function and value<br>&gt; in Swift has a tuple in it. The associated values in an enum are a tuple.<br>&gt; They are everywhere.<br>&gt;<br>&gt; For some more examples have a look at the linked proposal :)<br>&gt;<br>&gt;<br>&gt; On Sun, Jan 31, 2016 at 11:28 PM, Tino Heth &lt;2th at gmx.de&gt; wrote:<br>&gt;<br>&gt;&gt; I&#39;d like a a way to concatenate tuple types together:<br>&gt;&gt;<br>&gt;&gt; typealias ABCD = (A,B)+(C,D) // Same as (A,B,C,D)<br>&gt;&gt;<br>&gt;&gt; I don&#39;t like the use of &quot;+&quot; for concatenation, but giving more power to<br>&gt;&gt; tuples would be neat… you just need to find examples with convincing<br>&gt;&gt; motivation ;-)<br>&gt;&gt; Obviously, the value of tuple-operation increases with the prevalence of<br>&gt;&gt; tuples in language and libraries, so I wouldn&#39;t be surprised if their<br>&gt;&gt; importance rises in the future (and maybe we can think of nice ways to<br>&gt;&gt; combine tuple-related ideas).<br>&gt;&gt;<br>&gt;&gt; Also a way to allow tuples to be converted to other tuples that are the<br>&gt;&gt; same when flattened:<br>&gt;&gt;<br>&gt;&gt; (a,(b,c),d) as ((a,b),(c,d))<br>&gt;&gt;<br>&gt;&gt; It would be cool if such a concept (&quot;compiler, please check if those two<br>&gt;&gt; types have a compatible memory-layout, and if that is the case, let me use<br>&gt;&gt; them interchangeable when I tell you to do so) could be extended to structs<br>&gt;&gt; — that could solve the problem of different implementations of fundamental<br>&gt;&gt; types nicely.<br>&gt;&gt;<br>&gt;&gt; That leads me to an unrelated thought:<br>&gt;&gt; It seems to me there is a duality between methods and closures on one<br>&gt;&gt; side, and structs and tuples on the other — tuples feel very much like<br>&gt;&gt; anonymous structs (restricted by the fact that you cannot add methods like<br>&gt;&gt; custom getters &amp; setters). It&#39;s not related to you proposal, but I wonder<br>&gt;&gt; if there are implications visible from this point of view...<br>&gt;&gt;<br>&gt;&gt; Tino<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160208/4aa2523f/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>Tuple conversion and type composition</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>February  9, 2016 at 08:00:00am</p></header><div class="content"><p>Even though I do a lot of matrix maths I would prefer a homogeneous tuple<br>to be a collection; it has more use cases.<br></p><p>On Monday, 8 February 2016, Maximilian Hünenberger &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; We should clarify whether we see Tuples as Vectors/Matrices or<br>&gt; Lists/Arrays since &quot;+&quot; has different meanings:<br>&gt;<br>&gt;<br>&gt; Adding individual Numbers Concatenating<br>&gt;<br>&gt; ---------------------------------------------------------------------------------------------------------------------<br>&gt; Vector: (1, 2) + (3, 4) = (4, 6) ((1, 2) | (3, 4)) = (1, 2, 3, 4)   //<br>&gt; mathematically not fully correct<br>&gt; List:     zip((1, 2), (3, 4)).map{ $0.0 + $0.1 } = (4, 6) (1, 2) + (3, 4)<br>&gt; = (1, 2, 3, 4)<br>&gt;<br>&gt;<br>&gt; In my opinion Tuples are generally heterogenous ordered lists since they<br>&gt; can also contain elements of different types.<br>&gt;<br>&gt; This thread &quot;Contiguous Variables (A.K.A. Fixed Sized Array Type)&quot; which<br>&gt; discusses the use of &quot;(4 x Int)&quot; as sugar for &quot;(Int, Int, Int, Int)&quot;. It<br>&gt; suggest more of a vector/matrix-like behavior of Tuples.<br>&gt;<br>&gt; Note: Treating them as vectors operators like &quot;+&quot;, &quot;-&quot; and &quot;*&quot; are<br>&gt; (almost) only defined on number Tuples and only two Tuples with specific<br>&gt; dimensions.<br>&gt;<br>&gt; - Maximilian<br>&gt;<br>&gt; Am 07.02.2016 um 19:53 schrieb David Sweeris via swift-evolution &lt;<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt;:<br>&gt;<br>&gt; Good point.<br>&gt;<br>&gt; Sent from my iPhone<br>&gt;<br>&gt; On Feb 7, 2016, at 10:43, Patrick Gili &lt;gili.patrick.r at gili-labs.com<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;gili.patrick.r at gili-labs.com&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; &quot;|&quot; denotes bitwise-OR. Not necessarily a great choice.<br>&gt;<br>&gt; -Patrick<br>&gt;<br>&gt; On Feb 7, 2016, at 1:41 PM, David Sweeris &lt;davesweeris at mac.com<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;davesweeris at mac.com&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; Yeah, that&#39;s better than &quot;+&quot; or &quot;&amp;&quot;. What about &quot;|&quot;?<br>&gt;<br>&gt; Sent from my iPhone<br>&gt;<br>&gt; On Feb 7, 2016, at 08:12, Patrick Gili via swift-evolution &lt;<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; What about using &lt;&lt; to denote concatenation? Many languages use this<br>&gt; operator to denote &quot;append&quot;, which is essentially concatenate.<br>&gt;<br>&gt; -Patrick<br>&gt;<br>&gt; On Feb 6, 2016, at 5:41 PM, Andrew Bennett via swift-evolution &lt;<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; Thanks Tino, it would be good to come up with some alternatives for +.<br>&gt;<br>&gt; I was initially thinking `(Int,Int) (Int,Int)` without operators. However<br>&gt; I think this could potentially be a mistake. I like + as it&#39;s familiar with<br>&gt; array operators.<br>&gt;<br>&gt; As for the prevalence of tuples in the language, every function and value<br>&gt; in Swift has a tuple in it. The associated values in an enum are a tuple.<br>&gt; They are everywhere.<br>&gt;<br>&gt; For some more examples have a look at the linked proposal :)<br>&gt;<br>&gt;<br>&gt; On Sun, Jan 31, 2016 at 11:28 PM, Tino Heth &lt;2th at gmx.de<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;2th at gmx.de&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt;&gt; I&#39;d like a a way to concatenate tuple types together:<br>&gt;&gt;<br>&gt;&gt; typealias ABCD = (A,B)+(C,D) // Same as (A,B,C,D)<br>&gt;&gt;<br>&gt;&gt; I don&#39;t like the use of &quot;+&quot; for concatenation, but giving more power to<br>&gt;&gt; tuples would be neat… you just need to find examples with convincing<br>&gt;&gt; motivation ;-)<br>&gt;&gt; Obviously, the value of tuple-operation increases with the prevalence of<br>&gt;&gt; tuples in language and libraries, so I wouldn&#39;t be surprised if their<br>&gt;&gt; importance rises in the future (and maybe we can think of nice ways to<br>&gt;&gt; combine tuple-related ideas).<br>&gt;&gt;<br>&gt;&gt; Also a way to allow tuples to be converted to other tuples that are the<br>&gt;&gt; same when flattened:<br>&gt;&gt;<br>&gt;&gt; (a,(b,c),d) as ((a,b),(c,d))<br>&gt;&gt;<br>&gt;&gt; It would be cool if such a concept (&quot;compiler, please check if those two<br>&gt;&gt; types have a compatible memory-layout, and if that is the case, let me use<br>&gt;&gt; them interchangeable when I tell you to do so) could be extended to structs<br>&gt;&gt; — that could solve the problem of different implementations of fundamental<br>&gt;&gt; types nicely.<br>&gt;&gt;<br>&gt;&gt; That leads me to an unrelated thought:<br>&gt;&gt; It seems to me there is a duality between methods and closures on one<br>&gt;&gt; side, and structs and tuples on the other — tuples feel very much like<br>&gt;&gt; anonymous structs (restricted by the fact that you cannot add methods like<br>&gt;&gt; custom getters &amp; setters). It&#39;s not related to you proposal, but I wonder<br>&gt;&gt; if there are implications visible from this point of view...<br>&gt;&gt;<br>&gt;&gt; Tino<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br></p><p>-- <br>  -- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160209/494d3aea/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Tuple conversion and type composition</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February  8, 2016 at 02:00:00pm</p></header><div class="content"><p>On Feb 8, 2016, at 2:02 PM, Howard Lovatt via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Even though I do a lot of matrix maths I would prefer a homogeneous tuple to be a collection; it has more use cases. <br></p><p>Assuming things move forward in terms of tuples/bridging, my primary use-case is/will/would be Accelerate, CGContext buffers and stuff like CGColor 4-tuples.<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160208/25f75a5f/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Tuple conversion and type composition</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>February  8, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Feb 7, 2016, at 8:12 AM, Patrick Gili via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; What about using &lt;&lt; to denote concatenation? Many languages use this operator to denote &quot;append&quot;, which is essentially concatenate.<br></p><p>Random comment: the swift approach is generally to define new operators for new operations.  We really don’t like the C++ approach of overloading existing operators to mean different things in different contexts.<br></p><p>-Chris<br></p><p>&gt; <br>&gt; -Patrick<br>&gt; <br>&gt;&gt; On Feb 6, 2016, at 5:41 PM, Andrew Bennett via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Thanks Tino, it would be good to come up with some alternatives for +.<br>&gt;&gt; <br>&gt;&gt; I was initially thinking `(Int,Int) (Int,Int)` without operators. However I think this could potentially be a mistake. I like + as it&#39;s familiar with array operators.<br>&gt;&gt; <br>&gt;&gt; As for the prevalence of tuples in the language, every function and value in Swift has a tuple in it. The associated values in an enum are a tuple. They are everywhere.<br>&gt;&gt; <br>&gt;&gt; For some more examples have a look at the linked proposal :)<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Sun, Jan 31, 2016 at 11:28 PM, Tino Heth &lt;2th at gmx.de &lt;mailto:2th at gmx.de&gt;&gt; wrote:<br>&gt;&gt;&gt; I&#39;d like a a way to concatenate tuple types together:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; typealias ABCD = (A,B)+(C,D) // Same as (A,B,C,D)<br>&gt;&gt; <br>&gt;&gt; I don&#39;t like the use of &quot;+&quot; for concatenation, but giving more power to tuples would be neat… you just need to find examples with convincing motivation ;-)<br>&gt;&gt; Obviously, the value of tuple-operation increases with the prevalence of tuples in language and libraries, so I wouldn&#39;t be surprised if their importance rises in the future (and maybe we can think of nice ways to combine tuple-related ideas).<br>&gt;&gt; <br>&gt;&gt;&gt; Also a way to allow tuples to be converted to other tuples that are the same when flattened:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (a,(b,c),d) as ((a,b),(c,d))<br>&gt;&gt; It would be cool if such a concept (&quot;compiler, please check if those two types have a compatible memory-layout, and if that is the case, let me use them interchangeable when I tell you to do so) could be extended to structs — that could solve the problem of different implementations of fundamental types nicely.<br>&gt;&gt; <br>&gt;&gt; That leads me to an unrelated thought:<br>&gt;&gt; It seems to me there is a duality between methods and closures on one side, and structs and tuples on the other — tuples feel very much like anonymous structs (restricted by the fact that you cannot add methods like custom getters &amp; setters). It&#39;s not related to you proposal, but I wonder if there are implications visible from this point of view...<br>&gt;&gt; <br>&gt;&gt; Tino<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160208/929498ba/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>Tuple conversion and type composition</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>February  8, 2016 at 09:00:00pm</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On 8 Feb 2016, at 20:55, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 7, 2016, at 8:12 AM, Patrick Gili via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; What about using &lt;&lt; to denote concatenation? Many languages use this operator to denote &quot;append&quot;, which is essentially concatenate.<br>&gt; <br>&gt; Random comment: the swift approach is generally to define new operators for new operations.  We really don’t like the C++ approach of overloading existing operators to mean different things in different contexts.<br></p><p>Thank you!<br></p><p>&gt; <br>&gt; -Chris<br>&gt; <br>&gt;&gt; <br>&gt;&gt; -Patrick<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 6, 2016, at 5:41 PM, Andrew Bennett via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks Tino, it would be good to come up with some alternatives for +.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I was initially thinking `(Int,Int) (Int,Int)` without operators. However I think this could potentially be a mistake. I like + as it&#39;s familiar with array operators.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As for the prevalence of tuples in the language, every function and value in Swift has a tuple in it. The associated values in an enum are a tuple. They are everywhere.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For some more examples have a look at the linked proposal :)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Sun, Jan 31, 2016 at 11:28 PM, Tino Heth &lt;2th at gmx.de&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; I&#39;d like a a way to concatenate tuple types together:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; typealias ABCD = (A,B)+(C,D) // Same as (A,B,C,D)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don&#39;t like the use of &quot;+&quot; for concatenation, but giving more power to tuples would be neat… you just need to find examples with convincing motivation ;-)<br>&gt;&gt;&gt;&gt; Obviously, the value of tuple-operation increases with the prevalence of tuples in language and libraries, so I wouldn&#39;t be surprised if their importance rises in the future (and maybe we can think of nice ways to combine tuple-related ideas).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Also a way to allow tuples to be converted to other tuples that are the same when flattened:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; (a,(b,c),d) as ((a,b),(c,d))<br>&gt;&gt;&gt;&gt; It would be cool if such a concept (&quot;compiler, please check if those two types have a compatible memory-layout, and if that is the case, let me use them interchangeable when I tell you to do so) could be extended to structs — that could solve the problem of different implementations of fundamental types nicely.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; That leads me to an unrelated thought:<br>&gt;&gt;&gt;&gt; It seems to me there is a duality between methods and closures on one side, and structs and tuples on the other — tuples feel very much like anonymous structs (restricted by the fact that you cannot add methods like custom getters &amp; setters). It&#39;s not related to you proposal, but I wonder if there are implications visible from this point of view...<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Tino<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160208/9390eff3/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Tuple conversion and type composition</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February  8, 2016 at 08:00:00am</p></header><div class="content"><p>If we had a sufficiently generalized &quot;splat&quot; operation to unpack tuples into argument or tuple lists, you could conceivably use it to do this:<br></p><p>typealias AB = (A,B)<br>typealias CD = (C,D)<br>typealias ABCD = (AB..., CD...)<br></p><p>func join&lt;T, U&gt;(_ a: (T...), _ b: (U...)) -&gt; (T..., U...) {<br>  return (a..., b...)<br>}<br></p><p>func pop&lt;T, U&gt;(_ tuple: (T..., U)) -&gt; ((T...), U) {<br>  let (a..., b) = tuple<br>  return (a, b)<br>}<br></p><p>func push&lt;T, U&gt;(_ tuple: (T...), _ back: U) -&gt; (T..., U) {<br>  return (tuple..., back)<br>}<br></p><p>-Joe<br></p><p>&gt; On Jan 30, 2016, at 9:14 PM, Andrew Bennett via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Swift Evolution populace,<br>&gt; <br>&gt; I&#39;d like a a way to concatenate tuple types together:<br>&gt; <br>&gt; typealias ABCD = (A,B)+(C,D) // Same as (A,B,C,D)<br>&gt; Also a way to allow tuples to be converted to other tuples that are the same when flattened:<br>&gt; <br>&gt; (a,(b,c),d) as ((a,b),(c,d))<br>&gt; This proposal aims to make the minimal changes possible, with the most familiar syntax, and give tuples this power.<br>&gt; <br>&gt; Examples<br>&gt; <br>&gt; These are things that will be possible after these changes.<br>&gt; Joining two tuples together<br>&gt; <br>&gt; let a = (1,2), b = (3,4)<br>&gt; let c = join(a, b) // (Int,Int,Int,Int)<br>&gt; <br>&gt; Stack like operations on tuples<br>&gt; <br>&gt; let (abcde)  = (1,2,3,4,5)<br>&gt; let (abcd,e) = pop(abcde)<br>&gt; let (abc,d)  = pop(abcd)<br>&gt; let (abce)   = push(abc, e)<br>&gt; assert(abce == (1,2,3,5))<br>&gt; Chained ZipSequence<br>&gt; <br>&gt; let a = [1,2,3]<br>&gt; let b = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]<br>&gt; let c = [1.2, 2.3, 3.4]<br>&gt; let d = [nil, nil, 123]<br>&gt; let abc = a.zip(b).zip(c).zip(d) // AnySequence&lt;(Int,String,Float,Int?)&gt;<br>&gt; Turn any function with a callback into one with a promise<br>&gt; <br>&gt; func promise&lt;A,B,C&gt;(f: (A + (B-&gt;Void)) -&gt; C) -&gt; A -&gt; (C, Promise&lt;B&gt;)<br>&gt; This proposal, and more examples, can be seen in more detail here:<br>&gt; <br>&gt;     https://github.com/therealbnut/swift-evolution/blob/therealbnut-tuple-manipulation/proposals/0000-tuple-operators.md &lt;https://github.com/therealbnut/swift-evolution/blob/therealbnut-tuple-manipulation/proposals/0000-tuple-operators.md&gt;<br>&gt; <br>&gt; I&#39;ll keep this file up to date over the course of the discussion, PRs are welcome.<br>&gt; <br>&gt; Related proposals:<br>&gt; <br>&gt; This proposal&#39;s use cases relate to at least a few other currently active proposals:<br>&gt; Compile-time parameters<br>&gt; http://thread.gmane.org/gmane.comp.lang.swift.evolution/5240 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/5240&gt;<br>&gt; Contiguous Variables (A.K.A. Fixed Sized Array Type)<br>&gt; http://thread.gmane.org/gmane.comp.lang.swift.evolution/4809 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/4809&gt;<br>&gt; Remove implicit tuple splat behavior from function applications<br>&gt; http://thread.gmane.org/gmane.comp.lang.swift.evolution/4681 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/4681&gt;<br>&gt; Thanks!<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160208/44adb643/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
