<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6cceede6579cba5bf1f48581ea904f1b?s=50"></div><header><strong>Unavailable initializers in -Swift.h</strong> from <string>Svein Halvor Halvorsen</string> &lt;svein.h at lvor.halvorsen.cc&gt;<p>June  8, 2016 at 03:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>In Objective-C, I&#39;ve often attributed initializer from super classes as<br>unavailable. Like this;<br></p><p>@class Dependency;<br></p><p>@interface SomeClass : NSObject<br></p><p>- (nullable instancetype)init __unavailable;<br></p><p>- (nonnull instancetype)initWithDependency:(nonnull Dependency *)dependency;<br></p><p>@end<br></p><p>This makes the compiler complain if I try to instantiate [[SomeClass alloc]<br>init];<br></p><p>However, If I declare a Swift class like this:<br></p><p>class SomeClass: NSObject {<br></p><p>    init(dependency: Dependency) {<br></p><p>        super.init()<br></p><p>    }<br></p><p>}<br></p><p>The generated header file will look like this:<br></p><p><br>@interface SomeClass : NSObject<br></p><p>- (nonnull instancetype)initWithDependency:(Dependency * _Nonnull)dependency<br>OBJC_DESIGNATED_INITIALIZER;<br></p><p>@end<br></p><p>If I try to use init, it will be a run time error, and not a compile time<br>error.<br>It there any way I can make Swift create the desired objc header file?<br></p><p><br>Svein Halvor<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160608/e4ac2186/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6cceede6579cba5bf1f48581ea904f1b?s=50"></div><header><strong>Unavailable initializers in -Swift.h</strong> from <string>Svein Halvor Halvorsen</string> &lt;svein.h at lvor.halvorsen.cc&gt;<p>June  8, 2016 at 04:00:00pm</p></header><div class="content"><p>This is even worse if I want to create a singleton, and ensure that the<br>only way to access it, is through a static let on the class:<br></p><p>class Singleton: NSObject {<br>    static let instance = Singleton()<br>    private override init() {<br>        super.init()<br>    }<br>}<br></p><p>In Swift, I can&#39;t instantiate this class, since it has no internal/public<br>initializers. However, since it inherits from NSObject (which is necessary<br>to access it from objc), I can initialize it from objc, even though it&#39;s<br>private. Annotating it with @nonobjc doesn&#39;t help either.<br></p><p>Is there a reason why Swift doesn&#39;t automatically declare accessors from<br>the super class, that are either private or @nonobjc in the Swift subclass<br>implementation, as __unavailable?<br></p><p>Is there anyway I can enforce it using some (combination of) attributes?<br></p><p><br>sv.<br></p><p><br></p><p>2016-06-08 15:12 GMT+02:00 Svein Halvor Halvorsen &lt;svein.h at lvor.halvorsen.cc<br>&gt;:<br></p><p>&gt; Hi,<br>&gt;<br>&gt; In Objective-C, I&#39;ve often attributed initializer from super classes as<br>&gt; unavailable. Like this;<br>&gt;<br>&gt; @class Dependency;<br>&gt;<br>&gt; @interface SomeClass : NSObject<br>&gt;<br>&gt; - (nullable instancetype)init __unavailable;<br>&gt;<br>&gt; - (nonnull instancetype)initWithDependency:(nonnull Dependency<br>&gt; *)dependency;<br>&gt;<br>&gt; @end<br>&gt;<br>&gt; This makes the compiler complain if I try to instantiate [[SomeClass alloc]<br>&gt; init];<br>&gt;<br>&gt; However, If I declare a Swift class like this:<br>&gt;<br>&gt; class SomeClass: NSObject {<br>&gt;<br>&gt;     init(dependency: Dependency) {<br>&gt;<br>&gt;         super.init()<br>&gt;<br>&gt;     }<br>&gt;<br>&gt; }<br>&gt;<br>&gt; The generated header file will look like this:<br>&gt;<br>&gt;<br>&gt; @interface SomeClass : NSObject<br>&gt;<br>&gt; - (nonnull instancetype)initWithDependency:(Dependency * _Nonnull)dependency<br>&gt; OBJC_DESIGNATED_INITIALIZER;<br>&gt;<br>&gt; @end<br>&gt;<br>&gt; If I try to use init, it will be a run time error, and not a compile time<br>&gt; error.<br>&gt; It there any way I can make Swift create the desired objc header file?<br>&gt;<br>&gt;<br>&gt; Svein Halvor<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160608/ce45ae7b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Unavailable initializers in -Swift.h</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>June  8, 2016 at 10:00:00am</p></header><div class="content"><p>Seems reasonable to me. It looks like SR-746 &lt;https://bugs.swift.org/browse/SR-746&gt; tracks the same thing. Patches welcome!<br></p><p>Jordan<br></p><p>&gt; On Jun 8, 2016, at 7:06, Svein Halvor Halvorsen via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; This is even worse if I want to create a singleton, and ensure that the only way to access it, is through a static let on the class:<br>&gt; <br>&gt; class Singleton: NSObject {<br>&gt;     static let instance = Singleton()<br>&gt;     private override init() {<br>&gt;         super.init()<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; In Swift, I can&#39;t instantiate this class, since it has no internal/public initializers. However, since it inherits from NSObject (which is necessary to access it from objc), I can initialize it from objc, even though it&#39;s private. Annotating it with @nonobjc doesn&#39;t help either.<br>&gt; <br>&gt; Is there a reason why Swift doesn&#39;t automatically declare accessors from the super class, that are either private or @nonobjc in the Swift subclass implementation, as __unavailable?<br>&gt; <br>&gt; Is there anyway I can enforce it using some (combination of) attributes?<br>&gt; <br>&gt; <br>&gt; sv.<br>&gt; <br>&gt; <br>&gt; <br>&gt; 2016-06-08 15:12 GMT+02:00 Svein Halvor Halvorsen &lt;svein.h at lvor.halvorsen.cc &lt;mailto:svein.h at lvor.halvorsen.cc&gt;&gt;:<br>&gt; Hi, <br>&gt; <br>&gt; In Objective-C, I&#39;ve often attributed initializer from super classes as unavailable. Like this;<br>&gt; <br>&gt; @class Dependency;<br>&gt; @interface SomeClass : NSObject<br>&gt; - (nullable instancetype)init __unavailable;<br>&gt; - (nonnull instancetype)initWithDependency:(nonnull Dependency *)dependency;<br>&gt; @end<br>&gt; <br>&gt; This makes the compiler complain if I try to instantiate [[SomeClass alloc] init];<br>&gt; <br>&gt; However, If I declare a Swift class like this:<br>&gt; <br>&gt; class SomeClass: NSObject {<br>&gt;     init(dependency: Dependency) {<br>&gt;         super.init()<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; The generated header file will look like this:<br>&gt; <br>&gt; @interface SomeClass : NSObject<br>&gt; - (nonnull instancetype)initWithDependency:(Dependency * _Nonnull)dependency OBJC_DESIGNATED_INITIALIZER;<br>&gt; @end<br>&gt; <br>&gt; If I try to use init, it will be a run time error, and not a compile time error.<br>&gt; It there any way I can make Swift create the desired objc header file?<br>&gt; <br>&gt; <br>&gt; Svein Halvor<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160608/bd3f9529/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
