<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>class/struct inner member access scope classifier</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>September 26, 2016 at 09:00:00pm</p></header><div class="content"><p>Hello! Hope you are all OK! <br></p><p>Using and converting To Swift 3.0 with many advantages<br>and very little problems.OK, thanks to all !<br>also for the reasonably smart converter. Yes, yes, yes, I’m<br>still missing the classical for ;; loop (don’t wake me up <br>again plse :o)  but overall it is quite good!<br></p><p>I also value the -finally correct- meaning of the scope qualifier “private” , thanks, <br>which is as it should be (imho) inner scope restricting. <br></p><p>As for “fileprivate”: as yet, I haven’t found a case<br>where I should use “fileprivate” also because to me, the contents of<br>a file should in principle not have anything to do with the entities<br>contained in it, as a file should be just an data carrier. Therefore, <br>it should have no effect to wether or not concatenate source.swift files<br>into one big file for example, although I would not recommend this.<br></p><p>As far as I can see without binoculars, the “fileprivate” acces modifier<br>could be dropped, were it not for source compatibility reasons... <br>  <br>Unless I am missing something: <br>Still. something is not quite right yet, I think.<br>Just like in a Swift function, I don’t want the inner elements<br>of a class (or struct ?) to be visible in outer scope!<br>This is the default case in most OOP languages. <br>I fail to understand why this is not so in Swift, please enlighten me. <br></p><p>As it is now, and as far as I know, I have to explicitly<br>declare *all* entities inside a class that should not be accessible<br>outside the class as private, like in this real-world example:  <br></p><p><br>class TG3DGauge: SCNNode<br>{<br>    <br>    private var needles = [SCNNode]()<br>    private var fmtStr = “&quot; // private should be the default imho.<br>    <br>    var value: CGFloat = 0<br>    {<br>        didSet  // trigger value change, rotate needles etc.<br>        {<br>            valueChange()<br>        }<br>    }<br>    <br>    private var nodeUnitText = SCNNode()<br>    private var nodeValueText = SCNNode()<br>    <br>    private var valRange: ClosedRange&lt;CGFloat&gt; = (0...100.0)<br>    <br>    var rangeNeedlesActive: Bool = true<br>    {<br>        didSet<br>        {<br>            needles[2].isHidden = !rangeNeedlesActive<br>            needles[3].isHidden = !rangeNeedlesActive<br>        }<br>    }<br>    <br>    private var valScaleFactor: CGFloat = 1<br></p><p>	// etc. more stuff<br>	.<br>        .<br>} // end class TG3DGauge<br></p><p><br>It should (imho) be the other way around: that every member of <br>a class is private by default - that is invisible outside the scope <br>were it is declared in. This was (and still is) the case with Objective C,<br>where you need to explicitly declaring them in  the  sourcefile.h file<br>to make them visible and accessible in the outer scope <br>Everything else, as existing in the sourcefile.m remains hidden, not visible<br>in the outer scope.<br></p><p>As a solution/suggestion and also to prevent the gruesome<br>horror (did i already wrote something about that?  :o) of source breaking.<br>I could think of the “closedscope” (or some other word) <br>access modifier, which states that all things declared inside a class, <br>are private within the class and thus invisible in the outer scope, unless<br>preceeded with an overriding acces scope modifier like “public&quot;, “internal&quot; or &quot;fileprivate” <br></p><p><br>    <br>closedscope class TG3DGauge: SCNNode<br>{<br>    <br>    var needles = [SCNNode]()  // is now private by default<br>    var fmtStr = “&quot;            // is now private by default<br>    <br>    public var value: CGFloat = 0 // Public!! visible outside class also for “fileprivate&quot; or “internal”  <br>    {<br>        didSet  // trigger value change, rotate needles etc.<br>        {<br>            valueChange()<br>        }<br>    }<br>    <br>    var nodeUnitText = SCNNode()  // is now private by default<br>    var nodeValueText = SCNNode() // is now private by default<br></p><p>    //etc.<br></p><p>This “closedscope&quot; modifier should only be effective for the current class, not its superclass(es),<br>allowing one to hide/reveal entities in each class independently being part of the hierarchy.<br>Also entities declared private should not be visible in descendant classes<br></p><p>Also please note that I do miss the “protected” scope access modifier which allows entities to be exclusively<br>visible to descendant classes, as in Java. Why not implement it in Swift as well?  <br></p><p>AFAICS:  All mentioned here would not be a source breaking. <br></p><p>Opinions, remarks welcome.<br></p><p>met vriendelijke groeten<br>Ted<br></p><p><br></p><p><br></p><p><br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160926/4e4667aa/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8149b5bd66abbc94babfda2995153481?s=50"></div><header><strong>class/struct inner member access scope classifier</strong> from <string>Nevin Brackett-Rozinsky</string> &lt;nevin.brackettrozinsky at gmail.com&gt;<p>September 26, 2016 at 05:00:00pm</p></header><div class="content"><p>Just to weigh in here, I too am enjoying Swift 3 greatly.<br></p><p>However, my experience with access modifiers is rather different. I am very<br>glad that `internal` is the default: this reduces extraneous noise for the<br>common case, and makes it really easy for new programmers to jump in.<br></p><p>Furthermore, I am beginning to think that changing the meaning of `private`<br>and introducing `fileprivate` may not have been worth the complexity. Even<br>with file-scope visibility, one must still use the full path to a member in<br>order to use it: eg. MyClass.InnerStruct.specialFunction(), so the risk of<br>collisions is minuscule.<br></p><p>Before the change, the only visibility scopes to consider were file,<br>module, and everywhere. Now there can be nested private scopes, which may<br>be “unutterable” in the sense that there is no way to declare a member in<br>one scope with the same visibility as a private member of an outer scope.<br></p><p>When using the pattern whereby a type is built with many extensions in a<br>single file, shared helper members must now be declared `fileprivate`<br>whereas before they were simply `private`. I readily acknowledge that this<br>is a *small* annoyance, but it is nevertheless that much extra typing and<br>and that much extra noise.<br></p><p>I don’t expect that reverting such a major change would be worth the<br>upheaval, especially since many people seem to like it, but I think there<br>is value in the simpler model that we used to have.<br></p><p>In any event, I *do* think it would be worth renaming “fileprivate” to<br>something shorter, if a suitable word can be found. I remember how much<br>bikeshedding went on the first time around, including several people trying<br>to find a better term than “fileprivate” without any luck, so it may well<br>turn out that there just isn’t a suitable replacement.<br></p><p>If there is one though, count me on the side in favor of shortening<br>“fileprivate”.<br></p><p>Nevin<br></p><p><br></p><p>On Mon, Sep 26, 2016 at 3:58 PM, Ted F.A. van Gaalen via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello! Hope you are all OK!<br>&gt;<br>&gt; Using and converting To Swift 3.0 with many advantages<br>&gt; and very little problems.OK, thanks to all !<br>&gt; also for the reasonably smart converter. Yes, yes, yes, I’m<br>&gt; still missing the classical for ;; loop (don’t wake me up<br>&gt; again plse :o)  but overall it is quite good!<br>&gt;<br>&gt; I also value the -finally correct- meaning of the scope<br>&gt; qualifier “private” , thanks,<br>&gt; which is as it should be (imho) inner scope restricting.<br>&gt;<br>&gt; As for “fileprivate”: as yet, I haven’t found a case<br>&gt; where I should use “fileprivate” also because to me, the contents of<br>&gt; a file should in principle not have anything to do with the entities<br>&gt; contained in it, as a file should be just an data carrier. Therefore,<br>&gt; it should have no effect to wether or not concatenate source.swift files<br>&gt; into one big file for example, although I would not recommend this.<br>&gt;<br>&gt; As far as I can see without binoculars, the “fileprivate” acces modifier<br>&gt; could be dropped, were it not for source compatibility reasons...<br>&gt;<br>&gt; Unless I am missing something:<br>&gt; Still. something is not quite right yet, I think.<br>&gt; Just like in a Swift function, I don’t want the inner elements<br>&gt; of a class (or struct ?) to be visible in outer scope!<br>&gt; This is the default case in most OOP languages.<br>&gt; I fail to understand why this is not so in Swift, please enlighten me.<br>&gt;<br>&gt; As it is now, and as far as I know, I have to explicitly<br>&gt; declare *all* entities inside a class that should not be accessible<br>&gt; outside the class as private, like in this real-world example:<br>&gt;<br>&gt;<br>&gt; class TG3DGauge: SCNNode<br>&gt; {<br>&gt;<br>&gt;<br>&gt;     private var needles = [SCNNode]()<br>&gt;     private var fmtStr = “&quot; // private should be the default imho.<br>&gt;<br>&gt;<br>&gt;     var value: CGFloat = 0<br>&gt;     {<br>&gt;         didSet  // trigger value change, rotate needles etc.<br>&gt;         {<br>&gt;             valueChange()<br>&gt;         }<br>&gt;     }<br>&gt;<br>&gt;<br>&gt;     private var nodeUnitText = SCNNode()<br>&gt;     private var nodeValueText = SCNNode()<br>&gt;<br>&gt;<br>&gt;     private var valRange: ClosedRange&lt;CGFloat&gt; = (0...100.0)<br>&gt;<br>&gt;<br>&gt;     var rangeNeedlesActive: Bool = true<br>&gt;     {<br>&gt;         didSet<br>&gt;         {<br>&gt;             needles[2].isHidden = !rangeNeedlesActive<br>&gt;             needles[3].isHidden = !rangeNeedlesActive<br>&gt;         }<br>&gt;     }<br>&gt;<br>&gt;<br>&gt;     private var valScaleFactor: CGFloat = 1<br>&gt;<br>&gt; // etc. more stuff<br>&gt; .<br>&gt;         .<br>&gt; } // end class TG3DGauge<br>&gt;<br>&gt;<br>&gt; It should (imho) be the other way around: that every member of<br>&gt; a class is private by default - that is invisible outside the scope<br>&gt; were it is declared in. This was (and still is) the case with Objective C,<br>&gt; where you need to explicitly declaring them in  the  sourcefile.h file<br>&gt; to make them visible and accessible in the outer scope<br>&gt; Everything else, as existing in the sourcefile.m remains hidden, not<br>&gt; visible<br>&gt; in the outer scope.<br>&gt;<br>&gt; As a solution/suggestion and also to prevent the gruesome<br>&gt; horror (did i already wrote something about that?  :o) of source breaking.<br>&gt; I could think of the “closedscope” (or some other word)<br>&gt; access modifier, which states that all things declared inside a class,<br>&gt; are private within the class and thus invisible in the outer scope, unless<br>&gt; preceeded with an overriding acces scope modifier<br>&gt; like “public&quot;, “internal&quot; or &quot;fileprivate”<br>&gt;<br>&gt;<br>&gt;<br>&gt; closedscope class TG3DGauge: SCNNode<br>&gt; {<br>&gt;<br>&gt;     var needles = [SCNNode]()  // is now private by default<br>&gt;     var fmtStr = “&quot;            // is now private by default<br>&gt;<br>&gt;<br>&gt;     public var value: CGFloat = 0 // Public!! visible outside class also<br>&gt; for “fileprivate&quot; or “internal”<br>&gt;     {<br>&gt;         didSet  // trigger value change, rotate needles etc.<br>&gt;         {<br>&gt;             valueChange()<br>&gt;         }<br>&gt;     }<br>&gt;<br>&gt;     var nodeUnitText = SCNNode()  // is now private by default<br>&gt;     var nodeValueText = SCNNode() // is now private by default<br>&gt;<br>&gt;     //etc.<br>&gt;<br>&gt;<br>&gt; This “closedscope&quot; modifier should only be effective for the current<br>&gt; class, not its superclass(es),<br>&gt; allowing one to hide/reveal entities in each class independently being<br>&gt; part of the hierarchy.<br>&gt; Also entities declared private should not be visible in descendant classes<br>&gt;<br>&gt; Also please note that I do miss the “protected” scope access modifier<br>&gt; which allows entities to be exclusively<br>&gt; visible to descendant classes, as in Java. Why not implement it in Swift<br>&gt; as well?<br>&gt;<br>&gt; AFAICS:  All mentioned here would not be a source breaking.<br>&gt;<br>&gt; Opinions, remarks welcome.<br>&gt;<br>&gt; met vriendelijke groeten<br>&gt; Ted<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160926/a46be065/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>class/struct inner member access scope classifier</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>September 27, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On 26 Sep 2016, at 20:58, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello! Hope you are all OK! <br>&gt; <br>&gt; <br>&gt; As far as I can see without binoculars, the “fileprivate” acces modifier<br>&gt; could be dropped, were it not for source compatibility reasons... <br>&gt;   <br>&gt; Unless I am missing something: <br></p><p>Yes you are missing something. I, for example have a few cases where it is useful. On the other hand, I was against the change in the meaning of private but, I have to concede that the new meaning is useful. <br></p><p>As for dropping file private, why? You don’t have to use it if you don’t want to, so it’s not hurting you. On the other hand, I can use it when I deem it to be the right thing to do. <br></p><p><br>&gt; I don’t want the inner elements<br>&gt; of a class (or struct ?) to be visible in outer scope!<br>&gt; This is the default case in most OOP languages. <br></p><p>The default in Java is package scope. I’m not sure what the default in C++ is, but it’s not private, ditto Javascript. So while that might not be most OOP languages, it probably covers most OOP programs.<br></p><p>While I think private by default has merit, we are where we are.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76eb9711d45c1c9a71c0f24004072a22?s=50"></div><header><strong>class/struct inner member access scope classifier</strong> from <string>Zach Waldowski</string> &lt;zach at waldowski.me&gt;<p>September 27, 2016 at 06:00:00am</p></header><div class="content"><p>On Tue, Sep 27, 2016, at 01:34 AM, Jeremy Pereira via swift-evolution<br>wrote:<br>&gt; As for dropping file private, why? You don’t have to use it if you don’t<br>&gt; want to, so it’s not hurting you. On the other hand, I can use it when I<br>&gt; deem it to be the right thing to do. <br></p><p>I&#39;ll politely disagree and point out you *must* use fileprivate in order<br>to get what it provides. It&#39;s unavoidable in that sense.<br></p><p>As the access control change has been implemented for what only can be<br>described in a number of weeks, it&#39;s disappointing that a feature I used<br>to great effect in prior versions of Swift has already been relegated to<br>&quot;if you don&#39;t like the name, don&#39;t use it.&quot; <br></p><p>Sincerely,<br>  Zachary Waldowski<br>  zach at waldowski.me<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>class/struct inner member access scope classifier</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>September 27, 2016 at 03:00:00pm</p></header><div class="content"><p>If coming from that perspective if has only changed name to fileprivate<br>from private and you can then ignore private if you don&#39;t find it useful.<br>If anything it more clearly states in common language your intent then the<br>old naming (especial compared to other languages).<br></p><p>On Tue, Sep 27, 2016 at 6:20 AM Zach Waldowski via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt;<br>&gt;<br>&gt; On Tue, Sep 27, 2016, at 01:34 AM, Jeremy Pereira via swift-evolution<br>&gt; wrote:<br>&gt; &gt; As for dropping file private, why? You don’t have to use it if you don’t<br>&gt; &gt; want to, so it’s not hurting you. On the other hand, I can use it when I<br>&gt; &gt; deem it to be the right thing to do.<br>&gt;<br>&gt; I&#39;ll politely disagree and point out you *must* use fileprivate in order<br>&gt; to get what it provides. It&#39;s unavoidable in that sense.<br>&gt;<br>&gt; As the access control change has been implemented for what only can be<br>&gt; described in a number of weeks, it&#39;s disappointing that a feature I used<br>&gt; to great effect in prior versions of Swift has already been relegated to<br>&gt; &quot;if you don&#39;t like the name, don&#39;t use it.&quot;<br>&gt;<br>&gt; Sincerely,<br>&gt;   Zachary Waldowski<br>&gt;   zach at waldowski.me<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160927/7cf3d8fa/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>class/struct inner member access scope classifier</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>September 27, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On 27 Sep 2016, at 14:20, Zach Waldowski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; On Tue, Sep 27, 2016, at 01:34 AM, Jeremy Pereira via swift-evolution<br>&gt; wrote:<br>&gt;&gt; As for dropping file private, why? You don’t have to use it if you don’t<br>&gt;&gt; want to, so it’s not hurting you. On the other hand, I can use it when I<br>&gt;&gt; deem it to be the right thing to do. <br>&gt; <br>&gt; I&#39;ll politely disagree and point out you *must* use fileprivate in order<br>&gt; to get what it provides. It&#39;s unavoidable in that sense.<br></p><p>That’s not the point I was making. It was mooted that fileprivate should be dropped altogether leading to not having any means of specifying file scope at all. I was simply pointing out that people who don’t like file scope already have the option of not using fileprivate.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8149b5bd66abbc94babfda2995153481?s=50"></div><header><strong>class/struct inner member access scope classifier</strong> from <string>Nevin Brackett-Rozinsky</string> &lt;nevin.brackettrozinsky at gmail.com&gt;<p>September 27, 2016 at 02:00:00pm</p></header><div class="content"><p>In another thread (no link because we’re not on a forum ;-) the idea was<br>raised that in the future, if and when Swift starts using submodules, the<br>“fileprivate” scope could be turned into “submodule” scope.<br></p><p>By default every file would constitute its own submodule, and developers<br>could choose to put several files together into a submodule if they wish.<br></p><p>Perhaps there may be a shorter word that nicely implies “submodule scope”.<br></p><p>Nevin<br></p><p><br></p><p>On Tue, Sep 27, 2016 at 12:20 PM, Jeremy Pereira via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On 27 Sep 2016, at 14:20, Zach Waldowski via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; On Tue, Sep 27, 2016, at 01:34 AM, Jeremy Pereira via swift-evolution<br>&gt; &gt; wrote:<br>&gt; &gt;&gt; As for dropping file private, why? You don’t have to use it if you don’t<br>&gt; &gt;&gt; want to, so it’s not hurting you. On the other hand, I can use it when I<br>&gt; &gt;&gt; deem it to be the right thing to do.<br>&gt; &gt;<br>&gt; &gt; I&#39;ll politely disagree and point out you *must* use fileprivate in order<br>&gt; &gt; to get what it provides. It&#39;s unavoidable in that sense.<br>&gt;<br>&gt; That’s not the point I was making. It was mooted that fileprivate should<br>&gt; be dropped altogether leading to not having any means of specifying file<br>&gt; scope at all. I was simply pointing out that people who don’t like file<br>&gt; scope already have the option of not using fileprivate.<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160927/66ceaa42/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>class/struct inner member access scope classifier</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>September 27, 2016 at 01:00:00pm</p></header><div class="content"><p>This was all already argued about *extensively*. As in.. for weeks and weeks.<br></p><p>For the record, I still think things are mis-named, but that ship has sailed. IMO the existing “fileprivate” should have been “internal” and existing “internal” should have been “external”. But oh well.<br></p><p>l8r<br>Sean<br></p><p><br>&gt; On Sep 27, 2016, at 1:40 PM, Nevin Brackett-Rozinsky via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; In another thread (no link because we’re not on a forum ;-) the idea was raised that in the future, if and when Swift starts using submodules, the “fileprivate” scope could be turned into “submodule” scope.<br>&gt; <br>&gt; By default every file would constitute its own submodule, and developers could choose to put several files together into a submodule if they wish.<br>&gt; <br>&gt; Perhaps there may be a shorter word that nicely implies “submodule scope”.<br>&gt; <br>&gt; Nevin<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Tue, Sep 27, 2016 at 12:20 PM, Jeremy Pereira via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; &gt; On 27 Sep 2016, at 14:20, Zach Waldowski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; On Tue, Sep 27, 2016, at 01:34 AM, Jeremy Pereira via swift-evolution<br>&gt; &gt; wrote:<br>&gt; &gt;&gt; As for dropping file private, why? You don’t have to use it if you don’t<br>&gt; &gt;&gt; want to, so it’s not hurting you. On the other hand, I can use it when I<br>&gt; &gt;&gt; deem it to be the right thing to do.<br>&gt; &gt;<br>&gt; &gt; I&#39;ll politely disagree and point out you *must* use fileprivate in order<br>&gt; &gt; to get what it provides. It&#39;s unavoidable in that sense.<br>&gt; <br>&gt; That’s not the point I was making. It was mooted that fileprivate should be dropped altogether leading to not having any means of specifying file scope at all. I was simply pointing out that people who don’t like file scope already have the option of not using fileprivate.<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14f382feb5f0dd3d3700edf8d6156aa9?s=50"></div><header><strong>class/struct inner member access scope classifier</strong> from <string>Jay Abbott</string> &lt;jay at abbott.me.uk&gt;<p>September 27, 2016 at 11:00:00pm</p></header><div class="content"><p>If a submodule doesn&#39;t provide self contained functionality then it<br>shouldn&#39;t be a submodule, and if it does then it might as well be a<br>separate module. I think submodules would discourage small granular module<br>development and composition at a larger scale, it would discourage making a<br>clean public interface for the module which might make them more reusable<br>and testable. Also of course it would mean more keywords/syntax/classifiers<br>to manage it which makes things more complicated (unnecessarily in my view).<br></p><p>But I haven&#39;t really thought much about potential advantages... what are<br>they?<br></p><p><br>On Tue, 27 Sep 2016 at 19:55 Sean Heber via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; This was all already argued about *extensively*. As in.. for weeks and<br>&gt; weeks.<br>&gt;<br>&gt; For the record, I still think things are mis-named, but that ship has<br>&gt; sailed. IMO the existing “fileprivate” should have been “internal” and<br>&gt; existing “internal” should have been “external”. But oh well.<br>&gt;<br>&gt; l8r<br>&gt; Sean<br>&gt;<br>&gt;<br>&gt; &gt; On Sep 27, 2016, at 1:40 PM, Nevin Brackett-Rozinsky via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; In another thread (no link because we’re not on a forum ;-) the idea was<br>&gt; raised that in the future, if and when Swift starts using submodules, the<br>&gt; “fileprivate” scope could be turned into “submodule” scope.<br>&gt; &gt;<br>&gt; &gt; By default every file would constitute its own submodule, and developers<br>&gt; could choose to put several files together into a submodule if they wish.<br>&gt; &gt;<br>&gt; &gt; Perhaps there may be a shorter word that nicely implies “submodule<br>&gt; scope”.<br>&gt; &gt;<br>&gt; &gt; Nevin<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; On Tue, Sep 27, 2016 at 12:20 PM, Jeremy Pereira via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; &gt; On 27 Sep 2016, at 14:20, Zach Waldowski via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; On Tue, Sep 27, 2016, at 01:34 AM, Jeremy Pereira via swift-evolution<br>&gt; &gt; &gt; wrote:<br>&gt; &gt; &gt;&gt; As for dropping file private, why? You don’t have to use it if you<br>&gt; don’t<br>&gt; &gt; &gt;&gt; want to, so it’s not hurting you. On the other hand, I can use it<br>&gt; when I<br>&gt; &gt; &gt;&gt; deem it to be the right thing to do.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; I&#39;ll politely disagree and point out you *must* use fileprivate in<br>&gt; order<br>&gt; &gt; &gt; to get what it provides. It&#39;s unavoidable in that sense.<br>&gt; &gt;<br>&gt; &gt; That’s not the point I was making. It was mooted that fileprivate should<br>&gt; be dropped altogether leading to not having any means of specifying file<br>&gt; scope at all. I was simply pointing out that people who don’t like file<br>&gt; scope already have the option of not using fileprivate.<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160927/088f69ba/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>class/struct inner member access scope classifier</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>September 30, 2016 at 07:00:00pm</p></header><div class="content"><p>Hi Jeremy and Nevin<br></p><p>Sorry for the delay. quite busy.<br></p><p>As described, the point of my message is that I would like to have the inner members of a class<br>as default private, that is, not visible in the outer scope and to reveal members (entities)<br>of the class to the outside world *explicitly* by specifying an access qualifier like<br>“public” or “internal”, so exactly the other way round as it is now. <br>In the current situation I have to precede all declarations which I don’t want to reveal<br>with “private”. Usually most entities of a class should not be visible outside of it. <br>To prevent source breaking one could precede the class definition with a keyword, telling<br>Swift that all members of a class are private by default like so<br></p><p>closedscope class TG3DGauge: SCNNode<br>{<br>    <br>    var needles = [SCNNode]()  // is now private by default<br>    var fmtStr = “&quot;            // is now private by default<br>    <br>    public var value: CGFloat = 0 // Public!! visible outside class also for “fileprivate&quot; or “internal”  <br></p><p>(as written before)  <br></p><p>If this “closedscope” qualifier is not used things are exactly as it is now.<br></p><p>The “fileprivate” qualifier doen’t need to go so no source breaking here.<br>I simply stated that I am not really a fan of it.<br></p><p>Kind Regards<br>Ted<br></p><p><br></p><p>&gt; On 27 Sep 2016, at 10:34, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 26 Sep 2016, at 20:58, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello! Hope you are all OK! <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; As far as I can see without binoculars, the “fileprivate” acces modifier<br>&gt;&gt; could be dropped, were it not for source compatibility reasons... <br>&gt;&gt; <br>&gt;&gt; Unless I am missing something: <br>&gt; <br>&gt; Yes you are missing something. I, for example have a few cases where it is useful. On the other hand, I was against the change in the meaning of private but, I have to concede that the new meaning is useful. <br>&gt; <br>&gt; As for dropping file private, why? You don’t have to use it if you don’t want to, so it’s not hurting you. On the other hand, I can use it when I deem it to be the right thing to do. <br>&gt; <br>&gt; <br>&gt;&gt; I don’t want the inner elements<br>&gt;&gt; of a class (or struct ?) to be visible in outer scope!<br>&gt;&gt; This is the default case in most OOP languages. <br>&gt; <br>&gt; The default in Java is package scope. I’m not sure what the default in C++ is, but it’s not private, ditto Javascript. So while that might not be most OOP languages, it probably covers most OOP programs.<br>&gt; <br>&gt; While I think private by default has merit, we are where we are.<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160930/058e2d8d/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
