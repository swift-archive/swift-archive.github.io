<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Dictionary Collision Resolution Guarantees</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>October 13, 2016 at 03:00:00pm</p></header><div class="content"><p>on Thu Oct 13 2016, Alexis &lt;swift-dev-AT-swift.org&gt; wrote:<br></p><p>&gt; I’m currently cleaning up the docs on Dictionary to reflect the new indexing model, and I stumbled<br>&gt; across the note that the following code should work assuming no reallocations occur:<br>&gt;<br>&gt; //<br>&gt; //   var (i, found) = d.find(k) // i is associated with d&#39;s buffer<br>&gt; //   if found {<br>&gt; //      var e = d            // now d is sharing its data with e<br>&gt; //      e[newKey] = newValue // e now has a unique copy of the data<br>&gt; //      return e[i]          // use i to access e<br>&gt; //   }<br>&gt; //<br>&gt;<br>&gt; This is effectively assuming that the open-addressing scheme being<br>&gt; used is first-come-first-serve (FCFS). That is, any element being<br>&gt; inserted can *only* be inserted into vacant buckets, rather than<br>&gt; displacing existing elements. This is currently only internal docs,<br>&gt; but do we actually want to guarantee this? <br></p><p>No, not to users.  But &quot;//&quot; comments are not user-level comments and<br>don&#39;t imply any guarantees.<br></p><p>&gt; The popular alternative of robin hood (RH) doesn’t follow this.<br>&gt;<br>&gt; Some background: One interesting optimization avenue worth exploring<br>&gt; is to tweak Dictionary to store hashes, rather than bits, to identify<br>&gt; occupied slots (with some careful masking so that 0 still means<br>&gt; “unoccupied”). Then searching for elements can be implemented as<br>&gt; follows:<br>&gt;<br>&gt; let hash = hashFromKey(key)<br>&gt; var i = indexFromHash(hash)<br>&gt; while true {<br>&gt;   if hashes[i] == 0 {<br>&gt;     // vacant, not contained<br>&gt;   } else if hashes[i] == hash {<br>&gt;     // maybe already exists?<br>&gt;     if keys[i] == key {<br>&gt;       // actually exists<br>&gt;     }<br>&gt;   }<br>&gt;   i = nextIndex(i)<br>&gt; }<br>&gt;<br>&gt; The interesting property of this is that it almost all of the search<br>&gt; time is spent linearly walking through an array and doing simple<br>&gt; comparisons on integers, which is of course really easy to optimize<br>&gt; (potentially even SIMD). <br></p><p>Yep, that&#39;s cool.  It does cost a lot more storage, though.  Tradeoffs.<br></p><p>&gt; 99.9999% of the time, if the element isn’t stored in the Dictionary,<br>&gt; then you’ll just hit a 0 hash, and never look at the keys. Similarly,<br>&gt; 99.9999% of the time, if the element *is* stored in the Dictionary,<br>&gt; you’ll only do a single key comparison (on the actually equal<br>&gt; element). So this is also really great for cache — pretty much all of<br>&gt; your access are just linear scans of the hashes.<br>&gt;<br>&gt; The main downside is you’re now “wasting” more memory to store hashes,<br>&gt; but you can potentially compensate for this by truncating the hashes<br>&gt; to 8/16 bits for small Dictionaries (which will be better for SIMD<br>&gt; anyway).<br></p><p>Hey, cool.<br></p><p>&gt; So what does this have to do with the RH scheme? Compared to FCFS, RH<br>&gt; generally leads to lower variance on search distances, and provides a<br>&gt; mechanism to short-circuit long runs if you have the hashes handy. If<br>&gt; you find hashes which want to live later in the array than where you<br>&gt; started, then the current element definitely isn’t contained. This<br>&gt; means you can increase the load factor on your dictionary and further<br>&gt; improve cache/memory usage (compensating for the memory-usage loss<br>&gt; from storing hashes). However it will be prohibitively expensive if<br>&gt; you require hashes to be recomputed on-the-fly.<br></p><p>Sounds like a worthy optimization!<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6b81089e81d6bb1e14b5adb746725de1?s=50"></div><header><strong>Dictionary Collision Resolution Guarantees</strong> from <string>Alexis</string> &lt;abeingessner at apple.com&gt;<p>October 13, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Oct 13, 2016, at 6:09 PM, Dave Abrahams via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Thu Oct 13 2016, Alexis &lt;swift-dev-AT-swift.org &lt;http://swift-dev-at-swift.org/&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; I’m currently cleaning up the docs on Dictionary to reflect the new indexing model, and I stumbled<br>&gt;&gt; across the note that the following code should work assuming no reallocations occur:<br>&gt;&gt; <br>&gt;&gt; //<br>&gt;&gt; //   var (i, found) = d.find(k) // i is associated with d&#39;s buffer<br>&gt;&gt; //   if found {<br>&gt;&gt; //      var e = d            // now d is sharing its data with e<br>&gt;&gt; //      e[newKey] = newValue // e now has a unique copy of the data<br>&gt;&gt; //      return e[i]          // use i to access e<br>&gt;&gt; //   }<br>&gt;&gt; //<br>&gt;&gt; <br>&gt;&gt; This is effectively assuming that the open-addressing scheme being<br>&gt;&gt; used is first-come-first-serve (FCFS). That is, any element being<br>&gt;&gt; inserted can *only* be inserted into vacant buckets, rather than<br>&gt;&gt; displacing existing elements. This is currently only internal docs,<br>&gt;&gt; but do we actually want to guarantee this? <br>&gt; <br>&gt; No, not to users.  But &quot;//&quot; comments are not user-level comments and<br>&gt; don&#39;t imply any guarantees.<br></p><p>OK cool, is there any reason it’s even written down? I don’t see any code<br>that’s obviously relying on it. (seems fine to delete it?)<br></p><p>&gt; <br>&gt;&gt; The popular alternative of robin hood (RH) doesn’t follow this.<br>&gt;&gt; <br>&gt;&gt; Some background: One interesting optimization avenue worth exploring<br>&gt;&gt; is to tweak Dictionary to store hashes, rather than bits, to identify<br>&gt;&gt; occupied slots (with some careful masking so that 0 still means<br>&gt;&gt; “unoccupied”). Then searching for elements can be implemented as<br>&gt;&gt; follows:<br>&gt;&gt; <br>&gt;&gt; let hash = hashFromKey(key)<br>&gt;&gt; var i = indexFromHash(hash)<br>&gt;&gt; while true {<br>&gt;&gt;  if hashes[i] == 0 {<br>&gt;&gt;    // vacant, not contained<br>&gt;&gt;  } else if hashes[i] == hash {<br>&gt;&gt;    // maybe already exists?<br>&gt;&gt;    if keys[i] == key {<br>&gt;&gt;      // actually exists<br>&gt;&gt;    }<br>&gt;&gt;  }<br>&gt;&gt;  i = nextIndex(i)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; The interesting property of this is that it almost all of the search<br>&gt;&gt; time is spent linearly walking through an array and doing simple<br>&gt;&gt; comparisons on integers, which is of course really easy to optimize<br>&gt;&gt; (potentially even SIMD). <br>&gt; <br>&gt; Yep, that&#39;s cool.  It does cost a lot more storage, though.  Tradeoffs.<br>&gt; <br>&gt;&gt; 99.9999% of the time, if the element isn’t stored in the Dictionary,<br>&gt;&gt; then you’ll just hit a 0 hash, and never look at the keys. Similarly,<br>&gt;&gt; 99.9999% of the time, if the element *is* stored in the Dictionary,<br>&gt;&gt; you’ll only do a single key comparison (on the actually equal<br>&gt;&gt; element). So this is also really great for cache — pretty much all of<br>&gt;&gt; your access are just linear scans of the hashes.<br>&gt;&gt; <br>&gt;&gt; The main downside is you’re now “wasting” more memory to store hashes,<br>&gt;&gt; but you can potentially compensate for this by truncating the hashes<br>&gt;&gt; to 8/16 bits for small Dictionaries (which will be better for SIMD<br>&gt;&gt; anyway).<br>&gt; <br>&gt; Hey, cool.<br>&gt; <br>&gt;&gt; So what does this have to do with the RH scheme? Compared to FCFS, RH<br>&gt;&gt; generally leads to lower variance on search distances, and provides a<br>&gt;&gt; mechanism to short-circuit long runs if you have the hashes handy. If<br>&gt;&gt; you find hashes which want to live later in the array than where you<br>&gt;&gt; started, then the current element definitely isn’t contained. This<br>&gt;&gt; means you can increase the load factor on your dictionary and further<br>&gt;&gt; improve cache/memory usage (compensating for the memory-usage loss<br>&gt;&gt; from storing hashes). However it will be prohibitively expensive if<br>&gt;&gt; you require hashes to be recomputed on-the-fly.<br>&gt; <br>&gt; Sounds like a worthy optimization!<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161013/3bf0f797/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Dictionary Collision Resolution Guarantees</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>October 13, 2016 at 05:00:00pm</p></header><div class="content"><p>on Thu Oct 13 2016, Alexis &lt;abeingessner-AT-apple.com&gt; wrote:<br></p><p>&gt;&gt;&gt; This is effectively assuming that the open-addressing scheme being<br>&gt;&gt;&gt; used is first-come-first-serve (FCFS). That is, any element being<br>&gt;&gt;&gt; inserted can *only* be inserted into vacant buckets, rather than<br>&gt;&gt;&gt; displacing existing elements. This is currently only internal docs,<br>&gt;&gt;&gt; but do we actually want to guarantee this? <br>&gt;&gt; <br>&gt;&gt; No, not to users.  But &quot;//&quot; comments are not user-level comments and<br>&gt;&gt; don&#39;t imply any guarantees.<br>&gt;<br>&gt; OK cool, is there any reason it’s even written down? I don’t see any code<br>&gt; that’s obviously relying on it. (seems fine to delete it?)<br></p><p>It&#39;s written down because we&#39;ve never formalized our index invalidation<br>rules.  I didn&#39;t realize that this comment was related to index<br>invalidation.  The guarantee mentioned is one we might want to give, at<br>least under some circumstances.  We&#39;ll have to think about that more<br>carefully.  In any case, it&#39;s not time to delete it yet.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d0efc09d023fa0569a2479c9dcfd4620?s=50"></div><header><strong>Dictionary Collision Resolution Guarantees</strong> from <string>Ole Begemann</string> &lt;ole at oleb.net&gt;<p>October 14, 2016 at 10:00:00am</p></header><div class="content"><p>On 14/10/2016 02:46, Dave Abrahams wrote:<br></p><p>&gt;&gt; OK cool, is there any reason it’s even written down? I don’t see any code<br>&gt;&gt; that’s obviously relying on it. (seems fine to delete it?)<br>&gt;<br>&gt; It&#39;s written down because we&#39;ve never formalized our index invalidation<br>&gt; rules.  I didn&#39;t realize that this comment was related to index<br>&gt; invalidation.  The guarantee mentioned is one we might want to give, at<br>&gt; least under some circumstances.  We&#39;ll have to think about that more<br>&gt; carefully.  In any case, it&#39;s not time to delete it yet.<br></p><p>For what it&#39;s worth, this rule is also explicitly mentioned in <br>docs/IndexInvalidation.rst <br>(https://github.com/apple/swift/blob/master/docs/IndexInvalidation.rst):<br></p><p>&quot;Insertion into a Dictionary invalidates indexes only on a rehash. If a <br>Dictionary has enough free buckets (guaranteed by calling an initializer <br>or reserving space), then inserting elements does not invalidate indexes.<br></p><p>Note: unlike C++&#39;s std::unordered_map, removing elements from a <br>Dictionary invalidates indexes.&quot;<br></p><p>(I realize the stuff in /docs is not necessarily official documentation <br>(right?), I just wanted to mention it.)<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Dictionary Collision Resolution Guarantees</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>October 14, 2016 at 08:00:00am</p></header><div class="content"><p>on Fri Oct 14 2016, Ole Begemann &lt;ole-AT-oleb.net&gt; wrote:<br></p><p>&gt; On 14/10/2016 02:46, Dave Abrahams wrote:<br>&gt;<br>&gt;&gt;&gt; OK cool, is there any reason it’s even written down? I don’t see any code<br>&gt;&gt;&gt; that’s obviously relying on it. (seems fine to delete it?)<br>&gt;&gt;<br>&gt;&gt; It&#39;s written down because we&#39;ve never formalized our index invalidation<br>&gt;&gt; rules.  I didn&#39;t realize that this comment was related to index<br>&gt;&gt; invalidation.  The guarantee mentioned is one we might want to give, at<br>&gt;&gt; least under some circumstances.  We&#39;ll have to think about that more<br>&gt;&gt; carefully.  In any case, it&#39;s not time to delete it yet.<br>&gt;<br>&gt; For what it&#39;s worth, this rule is also explicitly mentioned in<br>&gt; docs/IndexInvalidation.rst<br>&gt; (https://github.com/apple/swift/blob/master/docs/IndexInvalidation.rst):<br>&gt;<br>&gt; &quot;Insertion into a Dictionary invalidates indexes only on a rehash. If<br>&gt; a Dictionary has enough free buckets (guaranteed by calling an<br>&gt; initializer or reserving space), then inserting elements does not<br>&gt; invalidate indexes.<br>&gt;<br>&gt; Note: unlike C++&#39;s std::unordered_map, removing elements from a<br>&gt; Dictionary invalidates indexes.&quot;<br>&gt;<br>&gt; (I realize the stuff in /docs is not necessarily official<br>&gt; documentation (right?), I just wanted to mention it.)<br></p><p>Thanks for pointing that out; that&#39;s important.<br></p><p>-- <br>-Dave<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
