<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/327f6348f4b9ebcd974ffc80188da2bc?s=50"></div><header><strong>Lazy var and deinit</strong> from <string>Alexandr.moq</string> &lt;alex at moqod.com&gt;<p>April 21, 2016 at 02:00:00pm</p></header><div class="content"><p>Should SWIFT initialize a variable in deinit method if it has not been initialized? <br></p><p>For example: <br>```swift<br>class A {<br>	lazy var b = B()<br>	deinit {<br>		b.clean()<br>	}<br>}<br>var a = A()<br>a.b.doSomething() //1: variable was created<br>a = A() //2: &quot;clean&quot; method was called for &quot;b&quot; variable<br>a = A() //3: instance of A from step 2 should killed and &quot;deinit&quot; method is called. In this method &quot;b&quot; variable will be created, &quot;clean&quot; will be called and &quot;b&quot; will be killed. So, is it ok or better if swift doesn’t create lazy variables in deinit if variable is not created yet<br>```<br>To be honest, I don’t know which topic I should use. Because I don’t know, it’s propose, bug or something else.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>Lazy var and deinit</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 21, 2016 at 01:00:00pm</p></header><div class="content"><p>For exactly this example, from my point of view, b.clean() is actually <br>using of the &quot;b&quot; property. Compiler, and I, don&#39;t know what &#39;.clean()&#39; <br>means and actually it is the same as<br></p><p>deinit {<br>   b.doSomethingCool() // &lt;&lt; shouldn&#39;t &quot;b&quot; created here to process your <br>request?<br>}<br></p><p>But probably I understand the problem you are trying to solve.<br>How to check if lazy property/variable was actually initialized, so you can <br>call its &quot;.clean&quot; only when it was really created and used. I.e. we just <br>don&#39;t need to call b.clean if &quot;b&quot; was not even called and so was not created.<br></p><p>Right now I can&#39;t find a way to check this, probably I&#39;m missing something..<br>So the question is : how to check if b was or was not actually &quot;created&quot; :<br>(something like)<br></p><p>deinit {<br>	if let b {<br>		b.clean()<br>	}<br>}<br></p><p>Anyone?<br></p><p>On 21.04.2016 13:27, Alexandr.moq via swift-evolution wrote:<br>&gt; Should SWIFT initialize a variable in deinit method if it has not been initialized?<br>&gt;<br>&gt; For example:<br>&gt; ```swift<br>&gt; class A {<br>&gt; 	lazy var b = B()<br>&gt; 	deinit {<br>&gt; 		b.clean()<br>&gt; 	}<br>&gt; }<br>&gt; var a = A()<br>&gt; a.b.doSomething() //1: variable was created<br>&gt; a = A() //2: &quot;clean&quot; method was called for &quot;b&quot; variable<br>&gt; a = A() //3: instance of A from step 2 should killed and &quot;deinit&quot; method is called. In this method &quot;b&quot; variable will be created, &quot;clean&quot; will be called and &quot;b&quot; will be killed. So, is it ok or better if swift doesn’t create lazy variables in deinit if variable is not created yet<br>&gt; ```<br>&gt; To be honest, I don’t know which topic I should use. Because I don’t know, it’s propose, bug or something else.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>Lazy var and deinit</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 21, 2016 at 04:00:00pm</p></header><div class="content"><p>Seems to solve this problem I can suggest only this ugly solution:<br></p><p>class A {<br>     lazy var _b = B()<br>     var _b_used = false<br></p><p>     var b : B {<br>         get {_b_used = true; return _b }<br>         set {_b_used = true; _b = newValue }<br>     }<br></p><p>     deinit {<br>         print(&quot;deinit A&quot;)<br></p><p>         if _b_used {<br>             b.clean()<br>         }<br>     }<br></p><p>}<br></p><p>Better solution?<br></p><p>On 21.04.2016 13:27, Alexandr.moq via swift-evolution wrote:<br>&gt; Should SWIFT initialize a variable in deinit method if it has not been initialized?<br>&gt;<br>&gt; For example:<br>&gt; ```swift<br>&gt; class A {<br>&gt; 	lazy var b = B()<br>&gt; 	deinit {<br>&gt; 		b.clean()<br>&gt; 	}<br>&gt; }<br>&gt; var a = A()<br>&gt; a.b.doSomething() //1: variable was created<br>&gt; a = A() //2: &quot;clean&quot; method was called for &quot;b&quot; variable<br>&gt; a = A() //3: instance of A from step 2 should killed and &quot;deinit&quot; method is called. In this method &quot;b&quot; variable will be created, &quot;clean&quot; will be called and &quot;b&quot; will be killed. So, is it ok or better if swift doesn’t create lazy variables in deinit if variable is not created yet<br>&gt; ```<br>&gt; To be honest, I don’t know which topic I should use. Because I don’t know, it’s propose, bug or something else.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
