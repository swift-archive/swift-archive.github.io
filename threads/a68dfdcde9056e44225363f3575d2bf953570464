<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4d13105de53a43ce1df97869ca6c140e?s=50"></div><header><strong>Constant generic properties in mutable contexts</strong> from <string>Maximilian H端nenberger</string> &lt;m.huenenberger at me.com&gt;<p>January 30, 2016 at 04:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>If you have an Array which is declared as mutable variable all contents are implicitly mutable. This is unfortunate especially in case of value types.<br></p><p>Consider this code example:<br></p><p>    struct Person { var name: String }<br></p><p>    var array = [Person(name: &quot;Smith&quot;)]<br>    // all persons are implicitly mutable<br>    array[0].name = &quot;Sam&quot;<br></p><p><br>So I propose a language feature which addresses this issue:<br></p><p>    var array: [let Person] = [Person(name: &quot;Smith&quot;)]<br>    // all persons are immutable<br>    array[0].name = &quot;Sam&quot; // error<br></p><p>    // but still allowing to add and remove persons<br>    array[0] = Person(name: &quot;Sam&quot;)<br></p><p><br>For clarification: The semantics are the same as if you&#39;ve wrapped the struct in a class with a &quot;let&quot; property:<br></p><p>    class ConstantWrapper&lt;T&gt; {<br>        let value: T<br>        init(_ value: T) { self.value = value }<br>    }<br></p><p>    var array = [ConstantWrapper(Person(name: &quot;Smith&quot;))]<br>    // all persons are &quot;indirect&quot; immutable<br>    array[0].value.name = &quot;Sam&quot; // error<br></p><p><br>This model would allow for more immutability in mutable contexts which ultimately leads to less bugs.<br></p><p><br>##Possible Extensions:<br></p><p>We could also allow a &quot;var&quot; declaration:<br></p><p>    let array: [var Person] = ...<br></p><p>The array models a fixed length array which is highly suggested by some people but you cannot assign a new &quot;Person&quot; to a specific index which is unfortunate. Although this could be solved by tweaking the current model.<br></p><p><br>Best regards<br>- Maximilian<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/a68d0464/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Constant generic properties in mutable contexts</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>January 30, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; This model would allow for more immutability in mutable contexts which ultimately leads to less bugs.<br></p><p>What bugs does this prevent? If the array is mutable, that means you can replace any element in it with another element, which in a value type is exactly equivalent to changing the existing value&#39;s properties.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Constant generic properties in mutable contexts</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>January 30, 2016 at 10:00:00am</p></header><div class="content"><p>This wouldn&#39;t change anything with value types. Even if you&#39;re not allowed to say:<br></p><p>array[0].name = &quot;Sam&quot;<br></p><p>You can still say:<br></p><p>array[0] = Person(name: &quot;Sam&quot;)<br></p><p>which is equivalent; you&#39;re just making it less convenient and harder to optimize. Piecewise mutation of value types is a feature, not a bug, and doesn&#39;t have most of the pitfalls of shared mutable reference types.<br></p><p>-Joe<br></p><p>&gt; On Jan 30, 2016, at 7:27 AM, Maximilian H端nenberger via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; If you have an Array which is declared as mutable variable all contents are implicitly mutable. This is unfortunate especially in case of value types.<br>&gt; <br>&gt; Consider this code example:<br>&gt; <br>&gt;     struct Person { var name: String }<br>&gt; <br>&gt;     var array = [Person(name: &quot;Smith&quot;)]<br>&gt;     // all persons are implicitly mutable<br>&gt;     array[0].name = &quot;Sam&quot;<br>&gt; <br>&gt; <br>&gt; So I propose a language feature which addresses this issue:<br>&gt; <br>&gt;     var array: [let Person] = [Person(name: &quot;Smith&quot;)]<br>&gt;     // all persons are immutable<br>&gt;     array[0].name = &quot;Sam&quot; // error<br>&gt; <br>&gt;     // but still allowing to add and remove persons<br>&gt;     array[0] = Person(name: &quot;Sam&quot;)<br>&gt; <br>&gt; <br>&gt; For clarification: The semantics are the same as if you&#39;ve wrapped the struct in a class with a &quot;let&quot; property:<br>&gt; <br>&gt;     class ConstantWrapper&lt;T&gt; {<br>&gt;         let value: T<br>&gt;         init(_ value: T) { self.value = value }<br>&gt;     }<br>&gt; <br>&gt;     var array = [ConstantWrapper(Person(name: &quot;Smith&quot;))]<br>&gt;     // all persons are &quot;indirect&quot; immutable<br>&gt;     array[0].value.name = &quot;Sam&quot; // error<br>&gt; <br>&gt; <br>&gt; This model would allow for more immutability in mutable contexts which ultimately leads to less bugs.<br>&gt; <br>&gt; <br>&gt; ##Possible Extensions:<br>&gt; <br>&gt; We could also allow a &quot;var&quot; declaration:<br>&gt; <br>&gt;     let array: [var Person] = ...<br>&gt; <br>&gt; The array models a fixed length array which is highly suggested by some people but you cannot assign a new &quot;Person&quot; to a specific index which is unfortunate. Although this could be solved by tweaking the current model.<br>&gt; <br>&gt; <br>&gt; Best regards<br>&gt; - Maximilian<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/aa541fc4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4d13105de53a43ce1df97869ca6c140e?s=50"></div><header><strong>Constant generic properties in mutable contexts</strong> from <string>Maximilian H端nenberger</string> &lt;m.huenenberger at me.com&gt;<p>January 30, 2016 at 08:00:00pm</p></header><div class="content"><p>Oh ok I see. I&#39;m sorry to hold you off more important topics.<br></p><p>- Maximilian<br></p><p>&gt; Am 30.01.2016 um 19:21 schrieb Joe Groff &lt;jgroff at apple.com&gt;:<br>&gt; <br>&gt; This wouldn&#39;t change anything with value types. Even if you&#39;re not allowed to say:<br>&gt; <br>&gt; array[0].name = &quot;Sam&quot;<br>&gt; <br>&gt; You can still say:<br>&gt; <br>&gt; array[0] = Person(name: &quot;Sam&quot;)<br>&gt; <br>&gt; which is equivalent; you&#39;re just making it less convenient and harder to optimize. Piecewise mutation of value types is a feature, not a bug, and doesn&#39;t have most of the pitfalls of shared mutable reference types.<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt;&gt; On Jan 30, 2016, at 7:27 AM, Maximilian H端nenberger via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi all,<br>&gt;&gt; <br>&gt;&gt; If you have an Array which is declared as mutable variable all contents are implicitly mutable. This is unfortunate especially in case of value types.<br>&gt;&gt; <br>&gt;&gt; Consider this code example:<br>&gt;&gt; <br>&gt;&gt;     struct Person { var name: String }<br>&gt;&gt; <br>&gt;&gt;     var array = [Person(name: &quot;Smith&quot;)]<br>&gt;&gt;     // all persons are implicitly mutable<br>&gt;&gt;     array[0].name = &quot;Sam&quot;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; So I propose a language feature which addresses this issue:<br>&gt;&gt; <br>&gt;&gt;     var array: [let Person] = [Person(name: &quot;Smith&quot;)]<br>&gt;&gt;     // all persons are immutable<br>&gt;&gt;     array[0].name = &quot;Sam&quot; // error<br>&gt;&gt; <br>&gt;&gt;     // but still allowing to add and remove persons<br>&gt;&gt;     array[0] = Person(name: &quot;Sam&quot;)<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; For clarification: The semantics are the same as if you&#39;ve wrapped the struct in a class with a &quot;let&quot; property:<br>&gt;&gt; <br>&gt;&gt;     class ConstantWrapper&lt;T&gt; {<br>&gt;&gt;         let value: T<br>&gt;&gt;         init(_ value: T) { self.value = value }<br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt;     var array = [ConstantWrapper(Person(name: &quot;Smith&quot;))]<br>&gt;&gt;     // all persons are &quot;indirect&quot; immutable<br>&gt;&gt;     array[0].value.name = &quot;Sam&quot; // error<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; This model would allow for more immutability in mutable contexts which ultimately leads to less bugs.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; ##Possible Extensions:<br>&gt;&gt; <br>&gt;&gt; We could also allow a &quot;var&quot; declaration:<br>&gt;&gt; <br>&gt;&gt;     let array: [var Person] = ...<br>&gt;&gt; <br>&gt;&gt; The array models a fixed length array which is highly suggested by some people but you cannot assign a new &quot;Person&quot; to a specific index which is unfortunate. Although this could be solved by tweaking the current model.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Best regards<br>&gt;&gt; - Maximilian<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/d7a7aef1/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
