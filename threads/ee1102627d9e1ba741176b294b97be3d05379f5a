<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>Coding style for internal/private variables</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>June  1, 2016 at 06:00:00pm</p></header><div class="content"><p>I’d like to talk about your personal coding styles in swift for its access control.<br></p><p>Remember these variable names like __magic or _spell or even garbage_?<br></p><p>Sure swift solves the synthesize problem but there might be old habits that let us write such code.<br></p><p>Here are some examples:<br></p><p>internal _name<br>internal i_name<br>private __name<br>private p_name<br></p><p>// not sure where `garbage_` would fit<br>I’d love to see your responses and opinions what and why the style you choose suits you.<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160601/ee119f5a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Coding style for internal/private variables</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>June  1, 2016 at 06:00:00pm</p></header><div class="content"><p>I never liked the underscores (so for me, they have been the best choice to mark stuff I should not know of in Cocoa ;-).<br>For several years, I prefixed instance variables with &quot;m&quot;, but stopped doing so after a talk about bad habits in writing Java code:<br>It is like Hungarian notation, which also puts redundant information into names — and if even Java-folks think it&#39;s anachronistic… ;-)<br></p><p>Objective-C lacked some features that Swift has, so workarounds had been created; but those shouldn&#39;t be carried over (by the way: It&#39;s similar with file names and those extensions, and a modern file system for OS X is years overdue ;-)<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>Coding style for internal/private variables</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>June  1, 2016 at 06:00:00pm</p></header><div class="content"><p>A little bit off-topic: Is there any way to create autocompletion shortcuts in Xcode that will show only private, internal or both values of an instance?<br></p><p>class Foo {<br>    private var integer: Int = 0<br>    internal var string: String = &quot;foo&quot;<br>    internal func boo() {}<br>}<br></p><p>let instance = Foo()<br></p><p>instance. at p  <br>         ________________<br>        |[V] Int integer |<br>        |________________|<br>                 <br>// where @p is an autocompletion shortcut for Xcode that will filter private vars, functions etc.<br>// when you choose one `@p` will be replaced<br></p><p>// or @i for internal<br>instance. at i  <br>         __________________<br>        |[M] Void   boo()  |<br>        |[V] String string |<br>        |__________________|<br>Something like this would be handy.<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 1. Juni 2016 um 18:23:46, Tino Heth (2th at gmx.de) schrieb:<br></p><p>I never liked the underscores (so for me, they have been the best choice to mark stuff I should not know of in Cocoa ;-).  <br>For several years, I prefixed instance variables with &quot;m&quot;, but stopped doing so after a talk about bad habits in writing Java code:  <br>It is like Hungarian notation, which also puts redundant information into names — and if even Java-folks think it&#39;s anachronistic… ;-)  <br></p><p>Objective-C lacked some features that Swift has, so workarounds had been created; but those shouldn&#39;t be carried over (by the way: It&#39;s similar with file names and those extensions, and a modern file system for OS X is years overdue ;-)<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160601/95f61d65/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Coding style for internal/private variables</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>June  1, 2016 at 09:00:00am</p></header><div class="content"><p>I&#39;ve actually used the _underscore convention in Swift to denote &quot;private&quot; members that nobody outside the type should touch, but that I want to expose to an extension on that type defined in a different file. It&#39;s a convention that works decently well with a little discipline.<br></p><p>Some time back, I pitched a few ideas for defining an access level that would allow you to limit access to a type to the type itself and any extensions on that type in the same project, but they went nowhere. Probably for the better, given the amount of complexity they would have introduced.<br></p><p>Austin<br></p><p>&gt; On Jun 1, 2016, at 9:02 AM, Adrian Zubarev via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I’d like to talk about your personal coding styles in swift for its access control.<br>&gt; <br>&gt; Remember these variable names like __magic or _spell or even garbage_?<br>&gt; <br>&gt; Sure swift solves the synthesize problem but there might be old habits that let us write such code.<br>&gt; <br>&gt; Here are some examples:<br>&gt; <br>&gt; internal _name<br>&gt; internal i_name<br>&gt; private __name<br>&gt; private p_name<br>&gt; <br>&gt; // not sure where `garbage_` would fit<br>&gt; I’d love to see your responses and opinions what and why the style you choose suits you.<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160601/f7f1a2e1/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Coding style for internal/private variables</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June  1, 2016 at 10:00:00am</p></header><div class="content"><p>From what I&#39;ve observed, preceding (rather than trailing) single underscores indicate private use. The standard library includes a fair number of &quot;Apple Internal&quot; (I guess now &quot;Swift Team Internal&quot;) variables, methods, functions, etc that follow this practice. This practice is, as far as I can tell, uncoupled with access levels. A function named _foo(), while global and public, is still &quot;hands off please&quot;.<br></p><p>All in all, other &quot;Hungarian Style&quot; conventions, that is modifying the name to indicate types and uses, are not used in Swift or among most Swift developers.<br></p><p>-- E<br></p><p>&gt; On Jun 1, 2016, at 10:02 AM, Adrian Zubarev via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I’d like to talk about your personal coding styles in swift for its access control.<br>&gt; <br>&gt; Remember these variable names like __magic or _spell or even garbage_?<br>&gt; <br>&gt; Sure swift solves the synthesize problem but there might be old habits that let us write such code.<br>&gt; <br>&gt; Here are some examples:<br>&gt; <br>&gt; internal _name<br>&gt; internal i_name<br>&gt; private __name<br>&gt; private p_name<br>&gt; <br>&gt; // not sure where `garbage_` would fit<br>&gt; I’d love to see your responses and opinions what and why the style you choose suits you.<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160601/e2569c43/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>Coding style for internal/private variables</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>June  1, 2016 at 07:00:00pm</p></header><div class="content"><p>@Austin: do you use self._name or just _name in your code?<br></p><p>I’ve seen self._name usage in swifts standard libraries and didn’t liked it at first glance, but it feels alright now.<br></p><p>My personal habit is to write self. everywhere it’s possible, because as soon as some private variable is nested inside a closure I’ll be forced to write self._name which does look odd if every other _name usage doesn’t contain self.. Again that’s my personal view.<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 1. Juni 2016 um 18:52:27, Erica Sadun (erica at ericasadun.com) schrieb:<br></p><p>From what I&#39;ve observed, preceding (rather than trailing) single underscores indicate private use. The standard library includes a fair number of &quot;Apple Internal&quot; (I guess now &quot;Swift Team Internal&quot;) variables, methods, functions, etc that follow this practice. This practice is, as far as I can tell, uncoupled with access levels. A function named _foo(), while global and public, is still &quot;hands off please&quot;.<br></p><p>All in all, other &quot;Hungarian Style&quot; conventions, that is modifying the name to indicate types and uses, are not used in Swift or among most Swift developers.<br></p><p>-- E<br></p><p>On Jun 1, 2016, at 10:02 AM, Adrian Zubarev via swift-users &lt;swift-users at swift.org&gt; wrote:<br></p><p>I’d like to talk about your personal coding styles in swift for its access control.<br></p><p>Remember these variable names like __magic or _spell or even garbage_?<br></p><p>Sure swift solves the synthesize problem but there might be old habits that let us write such code.<br></p><p>Here are some examples:<br></p><p>internal _name<br>internal i_name<br>private __name<br>private p_name<br></p><p>// not sure where `garbage_` would fit<br>I’d love to see your responses and opinions what and why the style you choose suits you.<br></p><p><br></p><p><br>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>_______________________________________________<br>swift-users mailing list<br>swift-users at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160601/dc98eb0c/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3cecf05f244d864ab95a990649136af6?s=50"></div><header><strong>Coding style for internal/private variables</strong> from <string>soyer</string> &lt;soyer at irl.hu&gt;<p>June  1, 2016 at 07:00:00pm</p></header><div class="content"><p>I think the IDE should colorize differently these variable names.<br></p><p>&gt; On 01 Jun 2016, at 18:02, Adrian Zubarev via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I’d like to talk about your personal coding styles in swift for its access control.<br>&gt; <br>&gt; Remember these variable names like __magic or _spell or even garbage_?<br>&gt; <br>&gt; Sure swift solves the synthesize problem but there might be old habits that let us write such code.<br>&gt; <br>&gt; Here are some examples:<br>&gt; <br>&gt; internal _name<br>&gt; internal i_name<br>&gt; private __name<br>&gt; private p_name<br>&gt; <br>&gt; // not sure where `garbage_` would fit<br>&gt; <br>&gt; I’d love to see your responses and opinions what and why the style you choose suits you.<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
