<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Associated type inference fun with RandomAccessCollection</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>November  8, 2016 at 02:00:00pm</p></header><div class="content"><p>on Mon Nov 07 2016, Robert Widmann &lt;swift-dev-AT-swift.org&gt; wrote:<br></p><p>&gt; Voting for 1.  This is an ambiguity in stdlib through and through IMO.<br></p><p>No, this is the standard library doing the best it can with a type<br>checker that has mostly-unspecified semantics.  It can only be<br>considered an ambiguity in the standard library if you presume the<br>semantics of choice 1, which was never specified... hence Doug&#39;s<br>question.<br></p><p>&gt; ~Robert Widmann<br>&gt;<br>&gt; 2016/11/07 22:07、Mark Lacey via swift-dev &lt;swift-dev at swift.org&gt; のメッセージ:<br>&gt;<br>&gt;&gt; <br>&gt;&gt;&gt; On Nov 7, 2016, at 6:16 PM, Douglas Gregor via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi all,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; While working on the type checker, I came across an interesting case for associated type inference with the ‘Indices’ type of RandomAccessCollection. At issue is a simple model of RandomAccessCollection where the Index type is Int:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class ReferenceCollection : RandomAccessCollection {<br>&gt;&gt;&gt;   typealias Index = Int<br>&gt;&gt;&gt;   <br>&gt;&gt;&gt;   var startIndex: Int {<br>&gt;&gt;&gt;     return 0<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   var endIndex: Int {<br>&gt;&gt;&gt;     return 1<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   subscript(index: Int) -&gt; String {<br>&gt;&gt;&gt;     return &quot;&quot;<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   func index(after i: Int) -&gt; Int {<br>&gt;&gt;&gt;     return 1<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   func index(before i: Int) -&gt; Int {<br>&gt;&gt;&gt;     return 0<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What’s the inferred associated Indices? The RandomAccessIterator protocol has a default:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; protocol RandomAccessCollection {<br>&gt;&gt;&gt;     associatedtype Indices : _RandomAccessIndexable, BidirectionalCollection<br>&gt;&gt;&gt;       = DefaultRandomAccessIndices&lt;Self&gt;<br>&gt;&gt;&gt;     var indices: Indices { get }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; which will kick in if nothing else can be inferred. There is also an implementation for this defaulted case in a protocol extension from which we can infer Indices:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension RandomAccessCollection where Indices == DefaultRandomAccessIndices&lt;Self&gt; {<br>&gt;&gt;&gt;    public var indices: DefaultRandomAccessIndices&lt;Self&gt; { }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Those line up, which is easy, but there is *another* protocol extension of RandomAccessIterator from which we can infer Indices:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension RandomAccessCollection<br>&gt;&gt;&gt; where Index : Strideable, <br>&gt;&gt;&gt;       Index.Stride == IndexDistance,<br>&gt;&gt;&gt;       Indices == CountableRange&lt;Index&gt; {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   public var indices: CountableRange&lt;Index&gt; {<br>&gt;&gt;&gt;     return startIndex..&lt;endIndex<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Note that both DefaultRandomAccessIndices&lt;ReferenceCollection&gt; and CountableRange&lt;Int&gt; would be valid inferences for Indices. We have three options:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1) Consider type inference to be ambiguous, because there is no natural ordering between the two protocol extensions (they have incompatible same-type constraints on the associated type Indices).<br>&gt;&gt;&gt; 2) Consider the first protocol extension to “win” because… we prefer the extension which corresponds to the associated type default (?). This would be consistent with a world where we don’t have associated type inference at all. (It also matches Swift 3.0.1’s behavior).<br>&gt;&gt;&gt; 3) Consider the second protocol extension to “win” because…the other protocol extension corresponds to the associated type default, and could therefore be considered to be a lowest-common-denominator implementation only there to provide the most basic defaults.<br>&gt;&gt; <br>&gt;&gt; I can see the appeal of option 3, but IMO anything other than option<br>&gt;&gt; 1 seems pretty brittle. Presumably with that option, and with the<br>&gt;&gt; class providing a typealias for Indices, you would no longer have an<br>&gt;&gt; ambiguity and the code would compile, correct?<br>&gt;&gt; <br>&gt;&gt; Mark<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For reference, Swift 3.0.1 picked<br>&gt;&gt;&gt; DefaultRandomAccessIndices&lt;ReferenceCollection&gt;, current Swift<br>&gt;&gt;&gt; master picks CountableRange&lt;Int&gt;, and my work-in-progress to<br>&gt;&gt;&gt; improve the type checker calls it ambiguous, hence the question :)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	- Doug<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt; swift-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
