<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6f4c2cdf314c4a67b3dc67dcd4078832?s=50"></div><header><strong>Proposal: standard logging facility</strong> from <string>Alexander Kolov</string> &lt;me at alexkolov.com&gt;<p>December  5, 2015 at 08:00:00pm</p></header><div class="content"><p>Hi everyone,<br></p><p>Coming from a short discussion in swift-corelibs-dev, I’m investigating the need of a standard logging API as a part of core libraries.<br></p><p>The motivation behind this would be having a unified and configurable set of APIs between all first-party modules and third party applications and libraries.<br>I think this will help each of us since right now we’re inventing our own solutions as well many bigger third-party library providers have formats and facilities of their own.<br></p><p>As I currently see it would be somewhat similar to python logging and possibly even structlog (http://www.structlog.org/en/stable/ &lt;http://www.structlog.org/en/stable/&gt;), with configurable formatters and handlers, including and not limited to remote loggers and syslog support.<br></p><p>I’d love to hear your opinions and feedback on this and possibly start with some more formalized proposal and implementation if there’s enough support and need.<br></p><p>Thanks,<br>Alex<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/6ca5ad26/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9290fd909aa6fa6232fa1b6c98628073?s=50"></div><header><strong>Proposal: standard logging facility</strong> from <string>Roshan</string> &lt;thisisroshansmail at gmail.com&gt;<p>December  6, 2015 at 01:00:00am</p></header><div class="content"><p>I have used Lumberjack[1] with Objective-C and I found it pretty good.<br>Maybe it&#39;s scope is too large for the standard library, but it could serve<br>as a good reference.<br></p><p>[1] - https://github.com/CocoaLumberjack/CocoaLumberjack<br></p><p>On Sun, Dec 6, 2015 at 12:54 AM, Alexander Kolov via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hi everyone,<br>&gt;<br>&gt; Coming from a short discussion in swift-corelibs-dev, I’m investigating<br>&gt; the need of a standard logging API as a part of core libraries.<br>&gt;<br>&gt; The motivation behind this would be having a unified and configurable set<br>&gt; of APIs between all first-party modules and third party applications and<br>&gt; libraries.<br>&gt; I think this will help each of us since right now we’re inventing our own<br>&gt; solutions as well many bigger third-party library providers have formats<br>&gt; and facilities of their own.<br>&gt;<br>&gt; As I currently see it would be somewhat similar to python logging and<br>&gt; possibly even structlog (http://www.structlog.org/en/stable/), with<br>&gt; configurable formatters and handlers, including and not limited to remote<br>&gt; loggers and syslog support.<br>&gt;<br>&gt; I’d love to hear your opinions and feedback on this and possibly start<br>&gt; with some more formalized proposal and implementation if there’s enough<br>&gt; support and need.<br>&gt;<br>&gt; Thanks,<br>&gt; Alex<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br>Warm regards<br>Roshan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/f3ff40e0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6f4c2cdf314c4a67b3dc67dcd4078832?s=50"></div><header><strong>Proposal: standard logging facility</strong> from <string>Alexander Kolov</string> &lt;me at alexkolov.com&gt;<p>December  5, 2015 at 09:00:00pm</p></header><div class="content"><p>Yes, we could definitely use it as a reference of use cases and requirements. <br>For the standard library we&#39;d need fast extensible solution upon which anyone can build their own handlers.<br></p><p>Sent from my iPhone<br></p><p>&gt; On Dec 5, 2015, at 9:16 PM, Roshan &lt;thisisroshansmail at gmail.com&gt; wrote:<br>&gt; <br>&gt; I have used Lumberjack[1] with Objective-C and I found it pretty good. Maybe it&#39;s scope is too large for the standard library, but it could serve as a good reference.<br>&gt; <br>&gt; [1] - https://github.com/CocoaLumberjack/CocoaLumberjack<br>&gt; <br>&gt;&gt; On Sun, Dec 6, 2015 at 12:54 AM, Alexander Kolov via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Hi everyone,<br>&gt;&gt; <br>&gt;&gt; Coming from a short discussion in swift-corelibs-dev, I’m investigating the need of a standard logging API as a part of core libraries.<br>&gt;&gt; <br>&gt;&gt; The motivation behind this would be having a unified and configurable set of APIs between all first-party modules and third party applications and libraries.<br>&gt;&gt; I think this will help each of us since right now we’re inventing our own solutions as well many bigger third-party library providers have formats and facilities of their own.<br>&gt;&gt; <br>&gt;&gt; As I currently see it would be somewhat similar to python logging and possibly even structlog (http://www.structlog.org/en/stable/), with configurable formatters and handlers, including and not limited to remote loggers and syslog support.<br>&gt;&gt; <br>&gt;&gt; I’d love to hear your opinions and feedback on this and possibly start with some more formalized proposal and implementation if there’s enough support and need.<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; Alex<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Warm regards<br>&gt; Roshan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/eca40549/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fde9ce084edaa4809b193297cef1ca3a?s=50"></div><header><strong>Proposal: standard logging facility</strong> from <string>Kevin Barrett</string> &lt;kevboh at gmail.com&gt;<p>December  5, 2015 at 03:00:00pm</p></header><div class="content"><p>+1 to this.<br></p><p>On Sat, Dec 5, 2015 at 2:24 PM, Alexander Kolov via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hi everyone,<br>&gt;<br>&gt; Coming from a short discussion in swift-corelibs-dev, I’m investigating<br>&gt; the need of a standard logging API as a part of core libraries.<br>&gt;<br>&gt; The motivation behind this would be having a unified and configurable set<br>&gt; of APIs between all first-party modules and third party applications and<br>&gt; libraries.<br>&gt; I think this will help each of us since right now we’re inventing our own<br>&gt; solutions as well many bigger third-party library providers have formats<br>&gt; and facilities of their own.<br>&gt;<br>&gt; As I currently see it would be somewhat similar to python logging and<br>&gt; possibly even structlog (http://www.structlog.org/en/stable/), with<br>&gt; configurable formatters and handlers, including and not limited to remote<br>&gt; loggers and syslog support.<br>&gt;<br>&gt; I’d love to hear your opinions and feedback on this and possibly start<br>&gt; with some more formalized proposal and implementation if there’s enough<br>&gt; support and need.<br>&gt;<br>&gt; Thanks,<br>&gt; Alex<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/390ac8ad/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>Proposal: standard logging facility</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>December  5, 2015 at 02:00:00pm</p></header><div class="content"><p>I would propose the simplest interface that I can assume is available *everywhere* to be defined by the Swift standard library, so as a framework developer I can make assumptions on my ability to provide diagnostics for internals, expose information for statistical use, provide information needed for auditing usage if I’m working on a hosted service and not a GUI app, and so on.<br></p><p>Things like custom formatters and appenders providing integration into remote/system services are something that the application can decide when it chooses a logging framework that implements the standard-defined protocol.<br></p><p>There isn’t any sort of dependency injection/inversion of control at the core swift level, which usually means that either logging is done by global functions, or by a global factory returns an instance of some type implementing the logging protocol.<br></p><p>The only piece of this which jumps out as not pure swift would be default integration into something like syslog or NSLog, and possibly adding a new preprocessor “macro” like __MODULE__ <br></p><p>-DW<br></p><p>&gt; On Dec 5, 2015, at 1:20 PM, Kevin Barrett via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1 to this.<br>&gt; <br>&gt; On Sat, Dec 5, 2015 at 2:24 PM, Alexander Kolov via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Hi everyone,<br>&gt; <br>&gt; Coming from a short discussion in swift-corelibs-dev, I’m investigating the need of a standard logging API as a part of core libraries.<br>&gt; <br>&gt; The motivation behind this would be having a unified and configurable set of APIs between all first-party modules and third party applications and libraries.<br>&gt; I think this will help each of us since right now we’re inventing our own solutions as well many bigger third-party library providers have formats and facilities of their own.<br>&gt; <br>&gt; As I currently see it would be somewhat similar to python logging and possibly even structlog (http://www.structlog.org/en/stable/ &lt;http://www.structlog.org/en/stable/&gt;), with configurable formatters and handlers, including and not limited to remote loggers and syslog support.<br>&gt; <br>&gt; I’d love to hear your opinions and feedback on this and possibly start with some more formalized proposal and implementation if there’s enough support and need.<br>&gt; <br>&gt; Thanks,<br>&gt; Alex<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/51e34079/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6f4c2cdf314c4a67b3dc67dcd4078832?s=50"></div><header><strong>Proposal: standard logging facility</strong> from <string>Alexander Kolov</string> &lt;me at alexkolov.com&gt;<p>December  5, 2015 at 10:00:00pm</p></header><div class="content"><p>I agree we need as minimal interface in the core library as possible while allowing application to take over whole logging configuration process.<br>Specific formatters, handlers and such will have to be implemented as external packages of course. <br></p><p>Sent from my iPhone<br></p><p>&gt; On Dec 5, 2015, at 10:05 PM, David Waite &lt;david at alkaline-solutions.com&gt; wrote:<br>&gt; <br>&gt; I would propose the simplest interface that I can assume is available *everywhere* to be defined by the Swift standard library, so as a framework developer I can make assumptions on my ability to provide diagnostics for internals, expose information for statistical use, provide information needed for auditing usage if I’m working on a hosted service and not a GUI app, and so on.<br>&gt; <br>&gt; Things like custom formatters and appenders providing integration into remote/system services are something that the application can decide when it chooses a logging framework that implements the standard-defined protocol.<br>&gt; <br>&gt; There isn’t any sort of dependency injection/inversion of control at the core swift level, which usually means that either logging is done by global functions, or by a global factory returns an instance of some type implementing the logging protocol.<br>&gt; <br>&gt; The only piece of this which jumps out as not pure swift would be default integration into something like syslog or NSLog, and possibly adding a new preprocessor “macro” like __MODULE__ <br>&gt; <br>&gt; -DW<br>&gt; <br>&gt;&gt; On Dec 5, 2015, at 1:20 PM, Kevin Barrett via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1 to this.<br>&gt;&gt; <br>&gt;&gt; On Sat, Dec 5, 2015 at 2:24 PM, Alexander Kolov via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; Hi everyone,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Coming from a short discussion in swift-corelibs-dev, I’m investigating the need of a standard logging API as a part of core libraries.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The motivation behind this would be having a unified and configurable set of APIs between all first-party modules and third party applications and libraries.<br>&gt;&gt;&gt; I think this will help each of us since right now we’re inventing our own solutions as well many bigger third-party library providers have formats and facilities of their own.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As I currently see it would be somewhat similar to python logging and possibly even structlog (http://www.structlog.org/en/stable/), with configurable formatters and handlers, including and not limited to remote loggers and syslog support.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’d love to hear your opinions and feedback on this and possibly start with some more formalized proposal and implementation if there’s enough support and need.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; Alex<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/eb25f8ba/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a726de03bed3104ddaecca3fdcf59e19?s=50"></div><header><strong>Proposal: standard logging facility</strong> from <string>Ling Wang</string> &lt;an00na at gmail.com&gt;<p>December  5, 2015 at 03:00:00pm</p></header><div class="content"><p>+1. I filed a radar about it months ago.<br></p><p>&gt; On Dec 5, 2015, at 1:24 PM, Alexander Kolov via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi everyone,<br>&gt; <br>&gt; Coming from a short discussion in swift-corelibs-dev, I’m investigating the need of a standard logging API as a part of core libraries.<br>&gt; <br>&gt; The motivation behind this would be having a unified and configurable set of APIs between all first-party modules and third party applications and libraries.<br>&gt; I think this will help each of us since right now we’re inventing our own solutions as well many bigger third-party library providers have formats and facilities of their own.<br>&gt; <br>&gt; As I currently see it would be somewhat similar to python logging and possibly even structlog (http://www.structlog.org/en/stable/ &lt;http://www.structlog.org/en/stable/&gt;), with configurable formatters and handlers, including and not limited to remote loggers and syslog support.<br>&gt; <br>&gt; I’d love to hear your opinions and feedback on this and possibly start with some more formalized proposal and implementation if there’s enough support and need.<br>&gt; <br>&gt; Thanks,<br>&gt; Alex<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/1a818c83/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Proposal: standard logging facility</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  5, 2015 at 10:00:00pm</p></header><div class="content"><p>&gt; On Dec 5, 2015, at 11:24 AM, Alexander Kolov via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi everyone,<br>&gt; <br>&gt; Coming from a short discussion in swift-corelibs-dev, I’m investigating the need of a standard logging API as a part of core libraries.<br>&gt; <br>&gt; The motivation behind this would be having a unified and configurable set of APIs between all first-party modules and third party applications and libraries.<br>&gt; I think this will help each of us since right now we’re inventing our own solutions as well many bigger third-party library providers have formats and facilities of their own.<br>&gt; <br>&gt; As I currently see it would be somewhat similar to python logging and possibly even structlog (http://www.structlog.org/en/stable/ &lt;http://www.structlog.org/en/stable/&gt;), with configurable formatters and handlers, including and not limited to remote loggers and syslog support.<br>&gt; <br>&gt; I’d love to hear your opinions and feedback on this and possibly start with some more formalized proposal and implementation if there’s enough support and need.<br></p><p>Hi Alex,<br></p><p>At this point, we’d prefer that major new features like these be explored and developed as independent projects outside the official Swift repos.  There are a *ton* of really interesting library features that we could add, but for now at least, we’re keeping the Swift standard library laser focused on its “language features + core data structures &amp; algorithms” focus, and keeping the CoreLibs work focused on achieving parity with the Apple implementations of these libraries.<br></p><p>We simply don’t have bandwidth to review and design higher level features at this time.  One of the goals of the Swift package manager is to make it super easy to reuse people’s code, even if it isn’t part of the swift distro.<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/1fa169b4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6f4c2cdf314c4a67b3dc67dcd4078832?s=50"></div><header><strong>Proposal: standard logging facility</strong> from <string>Alexander Kolov</string> &lt;me at alexkolov.com&gt;<p>December  6, 2015 at 12:00:00pm</p></header><div class="content"><p>Thank you for the input, Chris!<br></p><p>I&#39;ll do my best to kickstart this project with the spirit of the core library standards and distributive it with package manager. Then maybe we could revisit closer dependency at some later date.<br></p><p>PS. If anyone is interested in participating, please feel free to contact me directly.<br></p><p>Alex<br></p><p>Sent from my iPhone<br></p><p>&gt; On Dec 6, 2015, at 7:20 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 5, 2015, at 11:24 AM, Alexander Kolov via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi everyone,<br>&gt;&gt; <br>&gt;&gt; Coming from a short discussion in swift-corelibs-dev, I’m investigating the need of a standard logging API as a part of core libraries.<br>&gt;&gt; <br>&gt;&gt; The motivation behind this would be having a unified and configurable set of APIs between all first-party modules and third party applications and libraries.<br>&gt;&gt; I think this will help each of us since right now we’re inventing our own solutions as well many bigger third-party library providers have formats and facilities of their own.<br>&gt;&gt; <br>&gt;&gt; As I currently see it would be somewhat similar to python logging and possibly even structlog (http://www.structlog.org/en/stable/), with configurable formatters and handlers, including and not limited to remote loggers and syslog support.<br>&gt;&gt; <br>&gt;&gt; I’d love to hear your opinions and feedback on this and possibly start with some more formalized proposal and implementation if there’s enough support and need.<br>&gt; <br>&gt; Hi Alex,<br>&gt; <br>&gt; At this point, we’d prefer that major new features like these be explored and developed as independent projects outside the official Swift repos.  There are a *ton* of really interesting library features that we could add, but for now at least, we’re keeping the Swift standard library laser focused on its “language features + core data structures &amp; algorithms” focus, and keeping the CoreLibs work focused on achieving parity with the Apple implementations of these libraries.<br>&gt; <br>&gt; We simply don’t have bandwidth to review and design higher level features at this time.  One of the goals of the Swift package manager is to make it super easy to reuse people’s code, even if it isn’t part of the swift distro.<br>&gt; <br>&gt; -Chris<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/8618ee3b/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
