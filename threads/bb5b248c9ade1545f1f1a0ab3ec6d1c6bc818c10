<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June  8, 2016 at 09:00:00pm</p></header><div class="content"><p>Upon accepting SE-0099, the core team is removing `where` clauses from condition clauses, writing &quot;the &#39;where&#39; keyword can be retired from its purpose as a boolean condition introducer.&quot; <br></p><p>Inspiried by Xiaodi Wu, I now propose removing `where` clauses from `for in` loops, where they are better expressed (and read) as guard conditions. <br></p><p>Guard conditions can `continue` (mimicking the current use of `where`) or `break` (introducing the recently pitched `while` behavior).  This limits the current situation where people new to the language expect `while` behavior and expect termination rather than sequence filtering. Removing `where` from for-in loops benefits these new users, reduces cognitive burden for all users, and enhances readability and predictability.<br></p><p>I do not believe the same benefit would accrue in retiring `where` from `catch` clauses and `switch` statement cases. One can argue that there are inherent flaws in both situations: unlike generic constraints, nothing prevents semantic disjunction in their `where` clauses. That said, both measurably benefit from their `where` clauses in the current grammar:<br></p><p>case_item_list : pattern where_clause? | pattern where_clause? &#39;,&#39; case_item_list<br>catch_clause : &#39;catch&#39; pattern? where_clause? code_block<br></p><p>Case item lists allow comma-separated patterns in a single case statement. The only way to express a related Boolean assertion is through `where`.<br>Catch clauses do not allow multiple patterns but I cannot think of an improved way to associate an assertion than `where`.<br></p><p>-- E<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160608/bb5b8c10/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June  8, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; Upon accepting SE-0099, the core team is removing `where` clauses from condition clauses, writing &quot;the &#39;where&#39; keyword can be retired from its purpose as a boolean condition introducer.&quot; <br>&gt; <br>&gt; Inspiried by Xiaodi Wu, I now propose removing `where` clauses from `for in` loops, where they are better expressed (and read) as guard conditions. <br></p><p>Do you propose to remove `for case` as well? That can equally be handled by a `guard case` in the loop body.<br></p><p>Alternate proposal: Move `where` clauses to be adjacent to the pattern—rather than the sequence expression—in a `for` loop, just as they are in these other syntaxes.<br></p><p>	for n where n.isOdd in 1...1_000 { … }<br></p><p>This makes them more consistent with the syntax in `switch` cases and `catch` statements, while also IMHO clarifying the role of the `where` clause as a filter on the elements seen by the loop.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June  8, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jun 8, 2016, at 9:36 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt; Upon accepting SE-0099, the core team is removing `where` clauses from condition clauses, writing &quot;the &#39;where&#39; keyword can be retired from its purpose as a boolean condition introducer.&quot; <br>&gt;&gt; <br>&gt;&gt; Inspiried by Xiaodi Wu, I now propose removing `where` clauses from `for in` loops, where they are better expressed (and read) as guard conditions. <br>&gt; <br>&gt; Do you propose to remove `for case` as well? That can equally be handled by a `guard case` in the loop body.<br>&gt; <br>&gt; Alternate proposal: Move `where` clauses to be adjacent to the pattern—rather than the sequence expression—in a `for` loop, just as they are in these other syntaxes.<br>&gt; <br>&gt; 	for n where n.isOdd in 1...1_000 { … }<br>&gt; <br>&gt; This makes them more consistent with the syntax in `switch` cases and `catch` statements, while also IMHO clarifying the role of the `where` clause as a filter on the elements seen by the loop.<br></p><p>I saw your post on that *after* I finished sending this. Moving `where` next to the pattern, like you&#39;d find in `catch` and switch `case`, the code would look like this:<br></p><p>for i where i % 2 == 0 in sequence {<br>    // do stuff<br>}<br></p><p>I agree that&#39;s really clever and an improvement but after coming up with all the points about wrong expectations about termination vs filtering, the better use of guard, and fetishes about vertical compactness, I think (call it +0.6) I&#39;m going to stick to my guns on this one - and for `for case` too. I&#39;ve been wuxxed.<br></p><p>* New users might expect the sequence to terminate as soon as i % 2 is 1, rather than the correct interpretation which is &quot;this is a filtering operation&quot;<br>* The code can be expressed less ambiguously as <br></p><p>for i in sequence.filter({ return i % 2 == 0 }) {<br>    // do stuff<br>}<br></p><p>* The while version can be expressed as<br></p><p>for i in sequence.prefix(while: { return $0 % 2 == 0 } ) {<br>    // do stuff<br>}<br></p><p>* The code can also use `guard` statements as needed with `break` and `continue`<br></p><p>(And yes, I should have pointed out filter and prefix as well as guard in my first email)<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160608/d6894a75/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>June  8, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On Jun 8, 2016, at 10:51 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt;&gt; On Jun 8, 2016, at 9:36 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Upon accepting SE-0099, the core team is removing `where` clauses from condition clauses, writing &quot;the &#39;where&#39; keyword can be retired from its purpose as a boolean condition introducer.&quot; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Inspiried by Xiaodi Wu, I now propose removing `where` clauses from `for in` loops, where they are better expressed (and read) as guard conditions.<br>&gt;&gt; <br>&gt;&gt; Do you propose to remove `for case` as well? That can equally be handled by a `guard case` in the loop body.<br>&gt;&gt; <br>&gt;&gt; Alternate proposal: Move `where` clauses to be adjacent to the pattern—rather than the sequence expression—in a `for` loop, just as they are in these other syntaxes.<br>&gt;&gt; <br>&gt;&gt; 	for n where n.isOdd in 1...1_000 { … }<br>&gt;&gt; <br>&gt;&gt; This makes them more consistent with the syntax in `switch` cases and `catch` statements, while also IMHO clarifying the role of the `where` clause as a filter on the elements seen by the loop.<br>&gt; <br>&gt; I saw your post on that *after* I finished sending this. Moving `where` next to the pattern, like you&#39;d find in `catch` and switch `case`, the code would look like this:<br>&gt; <br>&gt; for i where i % 2 == 0 in sequence {<br>&gt;     // do stuff<br>&gt; }<br></p><p>This is the best version yet - the placement of &#39;where&#39; makes total sense and I really like it there.<br></p><p><br>&gt; I agree that&#39;s really clever and an improvement but after coming up with all the points about wrong expectations about termination vs filtering, the better use of guard, and fetishes about vertical compactness, I think (call it +0.6) I&#39;m going to stick to my guns on this one - and for `for case` too. I&#39;ve been wuxxed.<br>&gt; <br>&gt; * New users might expect the sequence to terminate as soon as i % 2 is 1, rather than the correct interpretation which is &quot;this is a filtering operation&quot;<br>&gt; * The code can be expressed less ambiguously as <br>&gt; <br>&gt; for i in sequence.filter({ return i % 2 == 0 }) {<br>&gt;     // do stuff<br>&gt; }<br></p><p>This seems to trade what was a very declarative syntax about the intent of some code (especially with &#39;where&#39; in the middle of the statement) for one that injects its own specialized vocabulary into the context (knowing what filter does, a function call, a closure with a return keyword and a pair of extra braces and parenthesis!) which means, to me anyway, significant cognitive overhead. It will also be a lot slower without optimization enabled due to the intermediate array. (I&#39;ve found *significant* speed ups switching .forEach() with for loops in debug builds, for example.)<br></p><p><br>&gt; * The while version can be expressed as<br>&gt; <br>&gt; for i in sequence.prefix(while: { return $0 % 2 == 0 } ) {<br>&gt;     // do stuff<br>&gt; }<br></p><p>And now we&#39;ve gone from, again, what is likely a very simple and declarative style using a for/while kind of statement and turned it in to something that has *even more* cognitive overhead to figure out what it does because now I have to reason about what &quot;prefix&quot; means here (normally I only think of prefix in the context of strings) and if there&#39;s a special variation of it using the &quot;while&quot; argument that I need to also be aware of...<br></p><p>Maybe it&#39;s just me, but.. I don&#39;t get it. I want to be able to quickly understand a piece of code&#39;s intent, not wade through fancy constructions for their own sake.<br></p><p>l8r<br>Sean - who might be too tired to be emailing responsibly <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160608/5c8df2bf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June  8, 2016 at 11:00:00pm</p></header><div class="content"><p>On Wed, Jun 8, 2016 at 11:17 PM, Sean Heber via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Jun 8, 2016, at 10:51 PM, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Jun 8, 2016, at 9:36 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; Upon accepting SE-0099, the core team is removing `where` clauses from<br>&gt; condition clauses, writing &quot;the &#39;where&#39; keyword can be retired from its<br>&gt; purpose as a boolean condition introducer.&quot;<br>&gt;<br>&gt; Inspiried by Xiaodi Wu, I now propose removing `where` clauses from `for<br>&gt; in` loops, where they are better expressed (and read) as guard conditions.<br>&gt;<br>&gt;<br>&gt; Do you propose to remove `for case` as well? That can equally be handled<br>&gt; by a `guard case` in the loop body.<br>&gt;<br>&gt; Alternate proposal: Move `where` clauses to be adjacent to the<br>&gt; pattern—rather than the sequence expression—in a `for` loop, just as they<br>&gt; are in these other syntaxes.<br>&gt;<br>&gt; for n where n.isOdd in 1...1_000 { … }<br>&gt;<br>&gt; This makes them more consistent with the syntax in `switch` cases and<br>&gt; `catch` statements, while also IMHO clarifying the role of the `where`<br>&gt; clause as a filter on the elements seen by the loop.<br>&gt;<br>&gt;<br>&gt; I saw your post on that *after* I finished sending this. Moving `where`<br>&gt; next to the pattern, like you&#39;d find in `catch` and switch `case`, the code<br>&gt; would look like this:<br>&gt;<br>&gt; for i where i % 2 == 0 in sequence {<br>&gt;     // do stuff<br>&gt; }<br>&gt;<br>&gt;<br>&gt; This is the best version yet - the placement of &#39;where&#39; makes total sense<br>&gt; and I really like it there.<br>&gt;<br>&gt;<br>&gt; I agree that&#39;s really clever and an improvement but after coming up with<br>&gt; all the points about wrong expectations about termination vs filtering, the<br>&gt; better use of guard, and fetishes about vertical compactness, I think (call<br>&gt; it +0.6) I&#39;m going to stick to my guns on this one - and for `for case`<br>&gt; too. I&#39;ve been wuxxed.<br>&gt;<br>&gt;<br>Maybe it&#39;s the late hour and staring at this too much. For the moment I<br>think I could live with either not having `where` like Erica proposes or<br>having it moved like Brent proposes. Perhaps later I&#39;ll form a considered<br>preference.<br></p><p>Brent&#39;s idea is so new, yet I have to admit it does feel somehow--this is a<br>squishy evaluation--satisfying? One thing about it that I like over<br>previous proposals--that&#39;s if we&#39;re going to go down this route rather than<br>taking out `while` altogether--is that the word `in` seems to instinctively<br>encourage concision. It just feels weird to stuff too much between `for i`<br>and `in`, so I think people will tend to use it in a more reasonable way<br>(with nothing to prove this intuition at all, of course).<br></p><p>Then again, it should come as no surprise that I agree with Erica that<br>removing `while` altogether has the benefit of definitively eliminating any<br>kind of misinterpretation as to termination vs. filtering. That&#39;s a win.<br></p><p><br>&gt; * New users might expect the sequence to terminate as soon as i % 2 is 1,<br>&gt; rather than the correct interpretation which is &quot;this is a filtering<br>&gt; operation&quot;<br>&gt; * The code can be expressed less ambiguously as<br>&gt;<br>&gt; for i in sequence.filter({ return i % 2 == 0 }) {<br>&gt;     // do stuff<br>&gt; }<br>&gt;<br>&gt;<br>&gt; This seems to trade what was a very declarative syntax about the intent of<br>&gt; some code (especially with &#39;where&#39; in the middle of the statement) for one<br>&gt; that injects its own specialized vocabulary into the context (knowing what<br>&gt; filter does, a function call, a closure with a return keyword and a pair of<br>&gt; extra braces and parenthesis!) which means, to me anyway, significant<br>&gt; cognitive overhead. It will also be a lot slower without optimization<br>&gt; enabled due to the intermediate array. (I&#39;ve found *significant* speed ups<br>&gt; switching .forEach() with for loops in debug builds, for example.)<br>&gt;<br>&gt;<br>&gt; * The while version can be expressed as<br>&gt;<br>&gt; for i in sequence.prefix(while: { return $0 % 2 == 0 } ) {<br>&gt;     // do stuff<br>&gt; }<br>&gt;<br>&gt;<br>&gt; And now we&#39;ve gone from, again, what is likely a very simple and<br>&gt; declarative style using a for/while kind of statement and turned it in to<br>&gt; something that has *even more* cognitive overhead to figure out what it<br>&gt; does because now I have to reason about what &quot;prefix&quot; means here (normally<br>&gt; I only think of prefix in the context of strings) and if there&#39;s a special<br>&gt; variation of it using the &quot;while&quot; argument that I need to also be aware<br>&gt; of...<br>&gt;<br>&gt; Maybe it&#39;s just me, but.. I don&#39;t get it. I want to be able to quickly<br>&gt; understand a piece of code&#39;s intent, not wade through fancy constructions<br>&gt; for their own sake.<br>&gt;<br>&gt; l8r<br>&gt; Sean - who might be too tired to be emailing responsibly<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160608/9de06687/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June  8, 2016 at 11:00:00pm</p></header><div class="content"><p>On Wed, Jun 8, 2016 at 11:34 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br></p><p>&gt; On Wed, Jun 8, 2016 at 11:17 PM, Sean Heber via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Jun 8, 2016, at 10:51 PM, Erica Sadun via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Jun 8, 2016, at 9:36 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Upon accepting SE-0099, the core team is removing `where` clauses from<br>&gt;&gt; condition clauses, writing &quot;the &#39;where&#39; keyword can be retired from its<br>&gt;&gt; purpose as a boolean condition introducer.&quot;<br>&gt;&gt;<br>&gt;&gt; Inspiried by Xiaodi Wu, I now propose removing `where` clauses from `for<br>&gt;&gt; in` loops, where they are better expressed (and read) as guard conditions.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Do you propose to remove `for case` as well? That can equally be handled<br>&gt;&gt; by a `guard case` in the loop body.<br>&gt;&gt;<br>&gt;&gt; Alternate proposal: Move `where` clauses to be adjacent to the<br>&gt;&gt; pattern—rather than the sequence expression—in a `for` loop, just as they<br>&gt;&gt; are in these other syntaxes.<br>&gt;&gt;<br>&gt;&gt; for n where n.isOdd in 1...1_000 { … }<br>&gt;&gt;<br>&gt;&gt; This makes them more consistent with the syntax in `switch` cases and<br>&gt;&gt; `catch` statements, while also IMHO clarifying the role of the `where`<br>&gt;&gt; clause as a filter on the elements seen by the loop.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I saw your post on that *after* I finished sending this. Moving `where`<br>&gt;&gt; next to the pattern, like you&#39;d find in `catch` and switch `case`, the code<br>&gt;&gt; would look like this:<br>&gt;&gt;<br>&gt;&gt; for i where i % 2 == 0 in sequence {<br>&gt;&gt;     // do stuff<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; This is the best version yet - the placement of &#39;where&#39; makes total sense<br>&gt;&gt; and I really like it there.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I agree that&#39;s really clever and an improvement but after coming up with<br>&gt;&gt; all the points about wrong expectations about termination vs filtering, the<br>&gt;&gt; better use of guard, and fetishes about vertical compactness, I think (call<br>&gt;&gt; it +0.6) I&#39;m going to stick to my guns on this one - and for `for case`<br>&gt;&gt; too. I&#39;ve been wuxxed.<br>&gt;&gt;<br>&gt;&gt;<br>&gt; Maybe it&#39;s the late hour and staring at this too much. For the moment I<br>&gt; think I could live with either not having `where` like Erica proposes or<br>&gt; having it moved like Brent proposes. Perhaps later I&#39;ll form a considered<br>&gt; preference.<br>&gt;<br>&gt; Brent&#39;s idea is so new, yet I have to admit it does feel somehow--this is<br>&gt; a squishy evaluation--satisfying? One thing about it that I like over<br>&gt; previous proposals--that&#39;s if we&#39;re going to go down this route rather than<br>&gt; taking out `while` altogether--is that the word `in` seems to instinctively<br>&gt; encourage concision. It just feels weird to stuff too much between `for i`<br>&gt; and `in`, so I think people will tend to use it in a more reasonable way<br>&gt; (with nothing to prove this intuition at all, of course).<br>&gt;<br>&gt; Then again, it should come as no surprise that I agree with Erica that<br>&gt; removing `while` altogether has the benefit of definitively eliminating any<br>&gt; kind of misinterpretation as to termination vs. filtering. That&#39;s a win.<br>&gt;<br></p><p>Yikes: s/while/where. That&#39;s my queue to quit for the day.<br></p><p><br>&gt;<br>&gt;<br>&gt;&gt; * New users might expect the sequence to terminate as soon as i % 2 is 1,<br>&gt;&gt; rather than the correct interpretation which is &quot;this is a filtering<br>&gt;&gt; operation&quot;<br>&gt;&gt; * The code can be expressed less ambiguously as<br>&gt;&gt;<br>&gt;&gt; for i in sequence.filter({ return i % 2 == 0 }) {<br>&gt;&gt;     // do stuff<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; This seems to trade what was a very declarative syntax about the intent<br>&gt;&gt; of some code (especially with &#39;where&#39; in the middle of the statement) for<br>&gt;&gt; one that injects its own specialized vocabulary into the context (knowing<br>&gt;&gt; what filter does, a function call, a closure with a return keyword and a<br>&gt;&gt; pair of extra braces and parenthesis!) which means, to me anyway,<br>&gt;&gt; significant cognitive overhead. It will also be a lot slower without<br>&gt;&gt; optimization enabled due to the intermediate array. (I&#39;ve found<br>&gt;&gt; *significant* speed ups switching .forEach() with for loops in debug<br>&gt;&gt; builds, for example.)<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; * The while version can be expressed as<br>&gt;&gt;<br>&gt;&gt; for i in sequence.prefix(while: { return $0 % 2 == 0 } ) {<br>&gt;&gt;     // do stuff<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; And now we&#39;ve gone from, again, what is likely a very simple and<br>&gt;&gt; declarative style using a for/while kind of statement and turned it in to<br>&gt;&gt; something that has *even more* cognitive overhead to figure out what it<br>&gt;&gt; does because now I have to reason about what &quot;prefix&quot; means here (normally<br>&gt;&gt; I only think of prefix in the context of strings) and if there&#39;s a special<br>&gt;&gt; variation of it using the &quot;while&quot; argument that I need to also be aware<br>&gt;&gt; of...<br>&gt;&gt;<br>&gt;&gt; Maybe it&#39;s just me, but.. I don&#39;t get it. I want to be able to quickly<br>&gt;&gt; understand a piece of code&#39;s intent, not wade through fancy constructions<br>&gt;&gt; for their own sake.<br>&gt;&gt;<br>&gt;&gt; l8r<br>&gt;&gt; Sean - who might be too tired to be emailing responsibly<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160608/7f213f8b/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June  9, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jun 8, 2016, at 10:17 PM, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; On Jun 8, 2016, at 10:51 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; I saw your post on that *after* I finished sending this. Moving `where` next to the pattern, like you&#39;d find in `catch` and switch `case`, the code would look like this:<br>&gt;&gt; <br>&gt;&gt; for i where i % 2 == 0 in sequence {<br>&gt;&gt;     // do stuff<br>&gt;&gt; }<br>&gt; <br>&gt; This is the best version yet - the placement of &#39;where&#39; makes total sense and I really like it there.<br>&gt; <br></p><p>I really like how it aligns with case statements better. BUT I think using guard is still better because <br>there&#39;s still user confusion between &quot;does this terminate&quot; and &quot;does this filter&quot;.<br></p><p>Guard use is unambiguous.<br></p><p><br>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/db200c01/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 10, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; On Jun 9, 2016, at 7:15 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 8, 2016, at 10:17 PM, Sean Heber &lt;sean at fifthace.com &lt;mailto:sean at fifthace.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Jun 8, 2016, at 10:51 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; I saw your post on that *after* I finished sending this. Moving `where` next to the pattern, like you&#39;d find in `catch` and switch `case`, the code would look like this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for i where i % 2 == 0 in sequence {<br>&gt;&gt;&gt;     // do stuff<br>&gt;&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; This is the best version yet - the placement of &#39;where&#39; makes total sense and I really like it there.<br>&gt;&gt; <br>&gt; <br>&gt; I really like how it aligns with case statements better. BUT I think using guard is still better because <br>&gt; there&#39;s still user confusion between &quot;does this terminate&quot; and &quot;does this filter&quot;.<br>&gt; <br>&gt; Guard use is unambiguous.<br></p><p>It may seem superfluous, but what about something like<br></p><p>for i in sequence where i % 2 == 0 else continue {<br>	/// do stuff<br>}<br></p><p>for i in sequence where i % 2 == 0 else break {<br>	/// do stuff<br>}<br></p><p>Which would make it explicit whether the for-loop should filter or break, yet it&#39;s still a one-liner...<br></p><p><br></p><p>&gt; <br>&gt; -- E<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/de249721/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June  9, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; On Jun 9, 2016, at 5:51 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 8, 2016, at 9:36 PM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Upon accepting SE-0099, the core team is removing `where` clauses from condition clauses, writing &quot;the &#39;where&#39; keyword can be retired from its purpose as a boolean condition introducer.&quot; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Inspiried by Xiaodi Wu, I now propose removing `where` clauses from `for in` loops, where they are better expressed (and read) as guard conditions. <br>&gt;&gt; <br>&gt;&gt; Do you propose to remove `for case` as well? That can equally be handled by a `guard case` in the loop body.<br>&gt;&gt; <br>&gt;&gt; Alternate proposal: Move `where` clauses to be adjacent to the pattern—rather than the sequence expression—in a `for` loop, just as they are in these other syntaxes.<br>&gt;&gt; <br>&gt;&gt; 	for n where n.isOdd in 1...1_000 { … }<br>&gt;&gt; <br>&gt;&gt; This makes them more consistent with the syntax in `switch` cases and `catch` statements, while also IMHO clarifying the role of the `where` clause as a filter on the elements seen by the loop.<br>&gt; <br>&gt; I saw your post on that *after* I finished sending this. Moving `where` next to the pattern, like you&#39;d find in `catch` and switch `case`, the code would look like this:<br>&gt; <br>&gt; for i where i % 2 == 0 in sequence {<br>&gt;     // do stuff<br>&gt; }<br>&gt; <br>&gt; I agree that&#39;s really clever and an improvement but after coming up with all the points about wrong expectations about termination vs filtering, the better use of guard, and fetishes about vertical compactness, I think (call it +0.6) I&#39;m going to stick to my guns on this one - and for `for case` too. I&#39;ve been wuxxed.<br>&gt; <br>&gt; * New users might expect the sequence to terminate as soon as i % 2 is 1, rather than the correct interpretation which is &quot;this is a filtering operation&quot;<br>&gt; * The code can be expressed less ambiguously as <br>&gt; <br>&gt; for i in sequence.filter({ return i % 2 == 0 }) {<br>&gt;     // do stuff<br>&gt; }<br></p><p>It&#39;s important to keep in mind that .filter without using .lazy copies the array. So you need to keep using sequence.lazy.filter({ return i %2 == 0 }), unless you&#39;re OK with giving up some performance, which a) adds boilerplate, b) not many people will remember to do.<br></p><p>I&#39;ve taken the time to run a test, going through milion numbers (several times) using:<br></p><p>for i in arr { if i % 2 == 0 { continue } }<br>for i in arr where i % 2 == 0 { }<br>for i in arr.filter({ $0 % 2 == 0 }) { }<br>for i in arr.lazy.filter({ $0 % 2 == 0 }) { }<br></p><p>Results:<br></p><p>- plain for loop with if-continue: 27.19 seconds (+1.76%)<br>- with where: 26.72 seconds (+0.00%)<br>- .filter: 44.73 seconds (+67.40%)<br>- .lazy.filter: 31.66 seconds (+18.48%)<br></p><p>Yes, 100 milion numbers is an extreme, but it demonstrates that any of the suggested expressions will be slower, mainly if the caller doesn&#39;t use .lazy (67% !!!). The only comparable solution is adding additional lines of code into the body of the for loop by adding an if statement.<br></p><p><br>&gt; * The while version can be expressed as<br>&gt; <br>&gt; for i in sequence.prefix(while: { return $0 % 2 == 0 } ) {<br>&gt;     // do stuff<br>&gt; }<br>&gt; <br>&gt; * The code can also use `guard` statements as needed with `break` and `continue`<br>&gt; <br>&gt; (And yes, I should have pointed out filter and prefix as well as guard in my first email)<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/eb9c1cb5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June  9, 2016 at 01:00:00am</p></header><div class="content"><p>&gt; I&#39;ve taken the time to run a test, going through milion numbers (several times) using:<br>&gt; <br>&gt; for i in arr { if i % 2 == 0 { continue } }<br>&gt; for i in arr where i % 2 == 0 { }<br>&gt; for i in arr.filter({ $0 % 2 == 0 }) { }<br>&gt; for i in arr.lazy.filter({ $0 % 2 == 0 }) { }<br>&gt; <br>&gt; Results:<br>&gt; <br>&gt; - plain for loop with if-continue: 27.19 seconds (+1.76%)<br>&gt; - with where: 26.72 seconds (+0.00%)<br>&gt; - .filter: 44.73 seconds (+67.40%)<br>&gt; - .lazy.filter: 31.66 seconds (+18.48%)<br></p><p>This is great data. I have a hard time imagining a little compiler work couldn&#39;t make if-continue as fast as for-where, but lazy.filter might be a taller order for it, and optimizing plain filter could actually change behavior.<br></p><p>A month or two ago, I actually fell into the &quot;just use the higher-order functions&quot; camp on this question, but I&#39;ve been rethinking that more and more lately. Between the trailing closure incompatibility, the need to remember to use `lazy` to get decent performance, and now the noticeable speed difference even *with* lazy, I&#39;m no longer convinced that answer is good enough.<br></p><p>(Though I do think `while` is probably too niche to bother with as a first-class feature, and I am open to if-continue on the `where` clause.)<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June  9, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Jun 9, 2016, at 10:29 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt; I&#39;ve taken the time to run a test, going through milion numbers (several times) using:<br>&gt;&gt; <br>&gt;&gt; for i in arr { if i % 2 == 0 { continue } }<br>&gt;&gt; for i in arr where i % 2 == 0 { }<br>&gt;&gt; for i in arr.filter({ $0 % 2 == 0 }) { }<br>&gt;&gt; for i in arr.lazy.filter({ $0 % 2 == 0 }) { }<br>&gt;&gt; <br>&gt;&gt; Results:<br>&gt;&gt; <br>&gt;&gt; - plain for loop with if-continue: 27.19 seconds (+1.76%)<br>&gt;&gt; - with where: 26.72 seconds (+0.00%)<br>&gt;&gt; - .filter: 44.73 seconds (+67.40%)<br>&gt;&gt; - .lazy.filter: 31.66 seconds (+18.48%)<br>&gt; <br>&gt; This is great data. I have a hard time imagining a little compiler work couldn&#39;t make if-continue as fast as for-where, but lazy.filter might be a taller order for it, and optimizing plain filter could actually change behavior.<br>&gt; <br>&gt; A month or two ago, I actually fell into the &quot;just use the higher-order functions&quot; camp on this question, but I&#39;ve been rethinking that more and more lately. Between the trailing closure incompatibility, the need to remember to use `lazy` to get decent performance, and now the noticeable speed difference even *with* lazy, I&#39;m no longer convinced that answer is good enough.<br></p><p>There will IMHO always be noticeable overhead since you&#39;re calling a function which is then invoking a closure. When you look at what that means:<br></p><p>- thunks generated around the invocation, which are a few instructions<br>- new stack frame for each call (correct me if I&#39;m wrong). <br></p><p>So instead of a single `i % 2 == 0` (which is just 2-3 instructions, depending on the architecture and optimization settings), it will invoke the closure milion times, if the array contains a milion members.<br></p><p>Maybe I&#39;m over-optimizing, but 18% seemed like a lot to me.<br></p><p><br>&gt; <br>&gt; (Though I do think `while` is probably too niche to bother with as a first-class feature, and I am open to if-continue on the `where` clause.)<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June  9, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Jun 9, 2016, at 12:27 PM, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt;&gt; On Jun 9, 2016, at 10:29 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;ve taken the time to run a test, going through milion numbers (several times) using:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for i in arr { if i % 2 == 0 { continue } }<br>&gt;&gt;&gt; for i in arr where i % 2 == 0 { }<br>&gt;&gt;&gt; for i in arr.filter({ $0 % 2 == 0 }) { }<br>&gt;&gt;&gt; for i in arr.lazy.filter({ $0 % 2 == 0 }) { }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Results:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - plain for loop with if-continue: 27.19 seconds (+1.76%)<br>&gt;&gt;&gt; - with where: 26.72 seconds (+0.00%)<br>&gt;&gt;&gt; - .filter: 44.73 seconds (+67.40%)<br>&gt;&gt;&gt; - .lazy.filter: 31.66 seconds (+18.48%)<br>&gt;&gt; <br>&gt;&gt; This is great data. I have a hard time imagining a little compiler work couldn&#39;t make if-continue as fast as for-where, but lazy.filter might be a taller order for it, and optimizing plain filter could actually change behavior.<br>&gt;&gt; <br>&gt;&gt; A month or two ago, I actually fell into the &quot;just use the higher-order functions&quot; camp on this question, but I&#39;ve been rethinking that more and more lately. Between the trailing closure incompatibility, the need to remember to use `lazy` to get decent performance, and now the noticeable speed difference even *with* lazy, I&#39;m no longer convinced that answer is good enough.<br>&gt; <br>&gt; There will IMHO always be noticeable overhead since you&#39;re calling a function which is then invoking a closure. When you look at what that means:<br>&gt; <br>&gt; - thunks generated around the invocation, which are a few instructions<br>&gt; - new stack frame for each call (correct me if I&#39;m wrong). <br>&gt; <br>&gt; So instead of a single `i % 2 == 0` (which is just 2-3 instructions, depending on the architecture and optimization settings), it will invoke the closure milion times, if the array contains a milion members.<br>&gt; <br>&gt; Maybe I&#39;m over-optimizing, but 18% seemed like a lot to me.<br></p><p>It looks like this should not be fate, and a pattern that could end up generating the same code after proper inlining.<br></p><p>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; (Though I do think `while` is probably too niche to bother with as a first-class feature, and I am open to if-continue on the `where` clause.)<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June  9, 2016 at 08:00:00am</p></header><div class="content"><p>So how did the guard versions perform?<br></p><p>Sent from my iPad<br></p><p>&gt; On Jun 9, 2016, at 4:27 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt;&gt; On Jun 9, 2016, at 10:29 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;ve taken the time to run a test, going through milion numbers (several times) using:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for i in arr { if i % 2 == 0 { continue } }<br>&gt;&gt;&gt; for i in arr where i % 2 == 0 { }<br>&gt;&gt;&gt; for i in arr.filter({ $0 % 2 == 0 }) { }<br>&gt;&gt;&gt; for i in arr.lazy.filter({ $0 % 2 == 0 }) { }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Results:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - plain for loop with if-continue: 27.19 seconds (+1.76%)<br>&gt;&gt;&gt; - with where: 26.72 seconds (+0.00%)<br>&gt;&gt;&gt; - .filter: 44.73 seconds (+67.40%)<br>&gt;&gt;&gt; - .lazy.filter: 31.66 seconds (+18.48%)<br>&gt;&gt; <br>&gt;&gt; This is great data. I have a hard time imagining a little compiler work couldn&#39;t make if-continue as fast as for-where, but lazy.filter might be a taller order for it, and optimizing plain filter could actually change behavior.<br>&gt;&gt; <br>&gt;&gt; A month or two ago, I actually fell into the &quot;just use the higher-order functions&quot; camp on this question, but I&#39;ve been rethinking that more and more lately. Between the trailing closure incompatibility, the need to remember to use `lazy` to get decent performance, and now the noticeable speed difference even *with* lazy, I&#39;m no longer convinced that answer is good enough.<br>&gt; <br>&gt; There will IMHO always be noticeable overhead since you&#39;re calling a function which is then invoking a closure. When you look at what that means:<br>&gt; <br>&gt; - thunks generated around the invocation, which are a few instructions<br>&gt; - new stack frame for each call (correct me if I&#39;m wrong). <br>&gt; <br>&gt; So instead of a single `i % 2 == 0` (which is just 2-3 instructions, depending on the architecture and optimization settings), it will invoke the closure milion times, if the array contains a milion members.<br>&gt; <br>&gt; Maybe I&#39;m over-optimizing, but 18% seemed like a lot to me.<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; (Though I do think `while` is probably too niche to bother with as a first-class feature, and I am open to if-continue on the `where` clause.)<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June  9, 2016 at 07:00:00pm</p></header><div class="content"><p>Didn&#39;t originally do it, but added it and here are the results (in seconds):<br></p><p>-O none<br>guard: 27.8599720001221 (+0.08%)<br>if-continue: 29.0756570100784 (+4.00%)<br>where: 27.836905002594 (+0.00%)<br>filter: 46.8083620071411 (+68.15%)<br>lazy.filter: 33.3811990022659 (+19.91%)<br></p><p>-O fast<br></p><p>guard: 0.123715996742249 (+4.00%)<br>if-continue: 0.118164002895355 (+0.00%)<br>where: 0.118863999843597 (+0.59%)<br>filter: 0.520934045314789 (+40.85%)<br>lazy.filter: 0.132100999355316 (+11.79%)<br></p><p>Note that in order to prevent some compiler magic for ranges (not sure if there is any), I&#39;ve done the following:<br></p><p>let arr = Array(range)<br></p><p>Also, I invoke the block() within timetest 100 times to get larger values, since there can be some minor changes in calling NSDate() - the first time it&#39;s called, +initialize may get called as well as the IMP might not be cached and with 0.04 seconds, it can make the result a bit off due to a lock during initialization of NSDate.<br></p><p>Nevertheless my argument against removing where from the for loops is that:<br></p><p>1) Without boilterplate guard/if, the performance is poor.<br>2) With the boilerplate, you add 3 lines of code. I do not like the one-liner if condition { continue }<br>3) I&#39;d vote for keeping where next to the variable name as suggested by Brent.<br></p><p><br>&gt; On Jun 9, 2016, at 4:22 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; So how did the guard versions perform?<br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt;&gt; On Jun 9, 2016, at 4:27 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 9, 2016, at 10:29 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;ve taken the time to run a test, going through milion numbers (several times) using:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; for i in arr { if i % 2 == 0 { continue } }<br>&gt;&gt;&gt;&gt; for i in arr where i % 2 == 0 { }<br>&gt;&gt;&gt;&gt; for i in arr.filter({ $0 % 2 == 0 }) { }<br>&gt;&gt;&gt;&gt; for i in arr.lazy.filter({ $0 % 2 == 0 }) { }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Results:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - plain for loop with if-continue: 27.19 seconds (+1.76%)<br>&gt;&gt;&gt;&gt; - with where: 26.72 seconds (+0.00%)<br>&gt;&gt;&gt;&gt; - .filter: 44.73 seconds (+67.40%)<br>&gt;&gt;&gt;&gt; - .lazy.filter: 31.66 seconds (+18.48%)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is great data. I have a hard time imagining a little compiler work couldn&#39;t make if-continue as fast as for-where, but lazy.filter might be a taller order for it, and optimizing plain filter could actually change behavior.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A month or two ago, I actually fell into the &quot;just use the higher-order functions&quot; camp on this question, but I&#39;ve been rethinking that more and more lately. Between the trailing closure incompatibility, the need to remember to use `lazy` to get decent performance, and now the noticeable speed difference even *with* lazy, I&#39;m no longer convinced that answer is good enough.<br>&gt;&gt; <br>&gt;&gt; There will IMHO always be noticeable overhead since you&#39;re calling a function which is then invoking a closure. When you look at what that means:<br>&gt;&gt; <br>&gt;&gt; - thunks generated around the invocation, which are a few instructions<br>&gt;&gt; - new stack frame for each call (correct me if I&#39;m wrong). <br>&gt;&gt; <br>&gt;&gt; So instead of a single `i % 2 == 0` (which is just 2-3 instructions, depending on the architecture and optimization settings), it will invoke the closure milion times, if the array contains a milion members.<br>&gt;&gt; <br>&gt;&gt; Maybe I&#39;m over-optimizing, but 18% seemed like a lot to me.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (Though I do think `while` is probably too niche to bother with as a first-class feature, and I am open to if-continue on the `where` clause.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June  9, 2016 at 09:00:00am</p></header><div class="content"><p>My results:<br></p><p>-Onone (None)<br></p><p>plain for loop with guard<br>Elapsed time: 0.0563530325889587<br>plain for loop with if<br>Elapsed time: 0.0631130337715149<br>where test<br>Elapsed time: 0.0661619901657104<br>eager filter test<br>Elapsed time: 0.684610962867737<br>lazy filter test<br>Elapsed time: 0.640420973300934<br>Program ended with exit code: 0<br></p><p><br>-O (Fast)<br></p><p>plain for loop with guard<br>Elapsed time: 0.00411999225616455<br>plain for loop with if<br>Elapsed time: 0.00422400236129761<br>where test<br>Elapsed time: 0.00419700145721436<br>eager filter test<br>Elapsed time: 0.033439040184021<br>lazy filter test<br>Elapsed time: 0.00690501928329468<br>Program ended with exit code: 0<br></p><p>Code:<br></p><p>public func timetest(_ note: String, block: () -&gt; Void) {<br>    let date = NSDate()<br>    block()<br>    let timeInterval = NSDate().timeIntervalSince(date)<br>    print(note); print(&quot;Elapsed time: \(timeInterval)&quot;)<br>}<br></p><p>let count = 4_000_000<br>let range = 1...count<br></p><p>timetest(&quot;plain for loop with guard&quot;) {<br>    for i in range {<br>        guard i % 2 != 0 else { continue }<br>        doSomething()<br>    }<br>}<br></p><p>timetest(&quot;plain for loop with if&quot;) {<br>    for i in range {<br>        if i % 2 == 0 { continue }<br>        doSomething()<br>    }<br>}<br></p><p>timetest(&quot;where test&quot;) {<br>    for i in range where i % 2 == 0 {<br>        doSomething()<br>    }<br>}<br></p><p>timetest(&quot;eager filter test&quot;) {<br>    for i in range.filter({ $0 % 2 == 0 }) {<br>        doSomething()<br>    }<br>}<br></p><p>timetest(&quot;lazy filter test&quot;) {<br>    for i in range.lazy.filter({ $0 % 2 == 0 }) {<br>        doSomething()<br>    }<br>}<br></p><p><br>&gt; On Jun 9, 2016, at 4:27 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jun 9, 2016, at 10:29 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I&#39;ve taken the time to run a test, going through milion numbers (several times) using:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for i in arr { if i % 2 == 0 { continue } }<br>&gt;&gt;&gt; for i in arr where i % 2 == 0 { }<br>&gt;&gt;&gt; for i in arr.filter({ $0 % 2 == 0 }) { }<br>&gt;&gt;&gt; for i in arr.lazy.filter({ $0 % 2 == 0 }) { }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Results:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - plain for loop with if-continue: 27.19 seconds (+1.76%)<br>&gt;&gt;&gt; - with where: 26.72 seconds (+0.00%)<br>&gt;&gt;&gt; - .filter: 44.73 seconds (+67.40%)<br>&gt;&gt;&gt; - .lazy.filter: 31.66 seconds (+18.48%)<br>&gt;&gt; <br>&gt;&gt; This is great data. I have a hard time imagining a little compiler work couldn&#39;t make if-continue as fast as for-where, but lazy.filter might be a taller order for it, and optimizing plain filter could actually change behavior.<br>&gt;&gt; <br>&gt;&gt; A month or two ago, I actually fell into the &quot;just use the higher-order functions&quot; camp on this question, but I&#39;ve been rethinking that more and more lately. Between the trailing closure incompatibility, the need to remember to use `lazy` to get decent performance, and now the noticeable speed difference even *with* lazy, I&#39;m no longer convinced that answer is good enough.<br>&gt; <br>&gt; There will IMHO always be noticeable overhead since you&#39;re calling a function which is then invoking a closure. When you look at what that means:<br>&gt; <br>&gt; - thunks generated around the invocation, which are a few instructions<br>&gt; - new stack frame for each call (correct me if I&#39;m wrong). <br>&gt; <br>&gt; So instead of a single `i % 2 == 0` (which is just 2-3 instructions, depending on the architecture and optimization settings), it will invoke the closure milion times, if the array contains a milion members.<br>&gt; <br>&gt; Maybe I&#39;m over-optimizing, but 18% seemed like a lot to me.<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; (Though I do think `while` is probably too niche to bother with as a first-class feature, and I am open to if-continue on the `where` clause.)<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/aa64fe04/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June  9, 2016 at 10:00:00am</p></header><div class="content"><p>Missed pasting this one bit:<br></p><p>var value = 0<br>func doSomething() {<br>    // some numeric load<br>    value += 1<br>}<br></p><p><br>&gt; On Jun 9, 2016, at 9:59 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; My results:<br>&gt; <br>&gt; -Onone (None)<br>&gt; <br>&gt; plain for loop with guard<br>&gt; Elapsed time: 0.0563530325889587<br>&gt; plain for loop with if<br>&gt; Elapsed time: 0.0631130337715149<br>&gt; where test<br>&gt; Elapsed time: 0.0661619901657104<br>&gt; eager filter test<br>&gt; Elapsed time: 0.684610962867737<br>&gt; lazy filter test<br>&gt; Elapsed time: 0.640420973300934<br>&gt; Program ended with exit code: 0<br>&gt; <br>&gt; <br>&gt; -O (Fast)<br>&gt; <br>&gt; plain for loop with guard<br>&gt; Elapsed time: 0.00411999225616455<br>&gt; plain for loop with if<br>&gt; Elapsed time: 0.00422400236129761<br>&gt; where test<br>&gt; Elapsed time: 0.00419700145721436<br>&gt; eager filter test<br>&gt; Elapsed time: 0.033439040184021<br>&gt; lazy filter test<br>&gt; Elapsed time: 0.00690501928329468<br>&gt; Program ended with exit code: 0<br>&gt; <br>&gt; Code:<br>&gt; <br>&gt; public func timetest(_ note: String, block: () -&gt; Void) {<br>&gt;     let date = NSDate()<br>&gt;     block()<br>&gt;     let timeInterval = NSDate().timeIntervalSince(date)<br>&gt;     print(note); print(&quot;Elapsed time: \(timeInterval)&quot;)<br>&gt; }<br>&gt; <br>&gt; let count = 4_000_000<br>&gt; let range = 1...count<br>&gt; <br>&gt; timetest(&quot;plain for loop with guard&quot;) {<br>&gt;     for i in range {<br>&gt;         guard i % 2 != 0 else { continue }<br>&gt;         doSomething()<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; timetest(&quot;plain for loop with if&quot;) {<br>&gt;     for i in range {<br>&gt;         if i % 2 == 0 { continue }<br>&gt;         doSomething()<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; timetest(&quot;where test&quot;) {<br>&gt;     for i in range where i % 2 == 0 {<br>&gt;         doSomething()<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; timetest(&quot;eager filter test&quot;) {<br>&gt;     for i in range.filter({ $0 % 2 == 0 }) {<br>&gt;         doSomething()<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; timetest(&quot;lazy filter test&quot;) {<br>&gt;     for i in range.lazy.filter({ $0 % 2 == 0 }) {<br>&gt;         doSomething()<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 9, 2016, at 4:27 AM, Charlie Monroe &lt;charlie at charliemonroe.net &lt;mailto:charlie at charliemonroe.net&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jun 9, 2016, at 10:29 AM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;ve taken the time to run a test, going through milion numbers (several times) using:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; for i in arr { if i % 2 == 0 { continue } }<br>&gt;&gt;&gt;&gt; for i in arr where i % 2 == 0 { }<br>&gt;&gt;&gt;&gt; for i in arr.filter({ $0 % 2 == 0 }) { }<br>&gt;&gt;&gt;&gt; for i in arr.lazy.filter({ $0 % 2 == 0 }) { }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Results:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - plain for loop with if-continue: 27.19 seconds (+1.76%)<br>&gt;&gt;&gt;&gt; - with where: 26.72 seconds (+0.00%)<br>&gt;&gt;&gt;&gt; - .filter: 44.73 seconds (+67.40%)<br>&gt;&gt;&gt;&gt; - .lazy.filter: 31.66 seconds (+18.48%)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is great data. I have a hard time imagining a little compiler work couldn&#39;t make if-continue as fast as for-where, but lazy.filter might be a taller order for it, and optimizing plain filter could actually change behavior.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A month or two ago, I actually fell into the &quot;just use the higher-order functions&quot; camp on this question, but I&#39;ve been rethinking that more and more lately. Between the trailing closure incompatibility, the need to remember to use `lazy` to get decent performance, and now the noticeable speed difference even *with* lazy, I&#39;m no longer convinced that answer is good enough.<br>&gt;&gt; <br>&gt;&gt; There will IMHO always be noticeable overhead since you&#39;re calling a function which is then invoking a closure. When you look at what that means:<br>&gt;&gt; <br>&gt;&gt; - thunks generated around the invocation, which are a few instructions<br>&gt;&gt; - new stack frame for each call (correct me if I&#39;m wrong). <br>&gt;&gt; <br>&gt;&gt; So instead of a single `i % 2 == 0` (which is just 2-3 instructions, depending on the architecture and optimization settings), it will invoke the closure milion times, if the array contains a milion members.<br>&gt;&gt; <br>&gt;&gt; Maybe I&#39;m over-optimizing, but 18% seemed like a lot to me.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (Though I do think `while` is probably too niche to bother with as a first-class feature, and I am open to if-continue on the `where` clause.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/bf03ead2/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>June  9, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jun 8, 2016, at 22:19, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jun 9, 2016, at 5:51 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 8, 2016, at 9:36 PM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Upon accepting SE-0099, the core team is removing `where` clauses from condition clauses, writing &quot;the &#39;where&#39; keyword can be retired from its purpose as a boolean condition introducer.&quot; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Inspiried by Xiaodi Wu, I now propose removing `where` clauses from `for in` loops, where they are better expressed (and read) as guard conditions. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Do you propose to remove `for case` as well? That can equally be handled by a `guard case` in the loop body.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Alternate proposal: Move `where` clauses to be adjacent to the pattern—rather than the sequence expression—in a `for` loop, just as they are in these other syntaxes.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	for n where n.isOdd in 1...1_000 { … }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This makes them more consistent with the syntax in `switch` cases and `catch` statements, while also IMHO clarifying the role of the `where` clause as a filter on the elements seen by the loop.<br>&gt;&gt; <br>&gt;&gt; I saw your post on that *after* I finished sending this. Moving `where` next to the pattern, like you&#39;d find in `catch` and switch `case`, the code would look like this:<br>&gt;&gt; <br>&gt;&gt; for i where i % 2 == 0 in sequence {<br>&gt;&gt;     // do stuff<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; I agree that&#39;s really clever and an improvement but after coming up with all the points about wrong expectations about termination vs filtering, the better use of guard, and fetishes about vertical compactness, I think (call it +0.6) I&#39;m going to stick to my guns on this one - and for `for case` too. I&#39;ve been wuxxed.<br>&gt;&gt; <br>&gt;&gt; * New users might expect the sequence to terminate as soon as i % 2 is 1, rather than the correct interpretation which is &quot;this is a filtering operation&quot;<br>&gt;&gt; * The code can be expressed less ambiguously as <br>&gt;&gt; <br>&gt;&gt; for i in sequence.filter({ return i % 2 == 0 }) {<br>&gt;&gt;     // do stuff<br>&gt;&gt; }<br>&gt; <br>&gt; It&#39;s important to keep in mind that .filter without using .lazy copies the array. So you need to keep using sequence.lazy.filter({ return i %2 == 0 }), unless you&#39;re OK with giving up some performance, which a) adds boilerplate, b) not many people will remember to do.<br>&gt; <br>&gt; I&#39;ve taken the time to run a test, going through milion numbers (several times) using:<br>&gt; <br>&gt; for i in arr { if i % 2 == 0 { continue } }<br>&gt; for i in arr where i % 2 == 0 { }<br>&gt; for i in arr.filter({ $0 % 2 == 0 }) { }<br>&gt; for i in arr.lazy.filter({ $0 % 2 == 0 }) { }<br>&gt; <br>&gt; Results:<br>&gt; <br>&gt; - plain for loop with if-continue: 27.19 seconds (+1.76%)<br>&gt; - with where: 26.72 seconds (+0.00%)<br>&gt; - .filter: 44.73 seconds (+67.40%)<br>&gt; - .lazy.filter: 31.66 seconds (+18.48%)<br>&gt; <br>&gt; Yes, 100 milion numbers is an extreme, but it demonstrates that any of the suggested expressions will be slower, mainly if the caller doesn&#39;t use .lazy (67% !!!). The only comparable solution is adding additional lines of code into the body of the for loop by adding an if statement.<br></p><p>Just to double-check, was this with optimizations on? Because -Onone numbers aren’t nearly as motivating, but I would expect -O to remove the loop entirely in the simple case.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/f632a883/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June  9, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Jun 9, 2016, at 6:54 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 8, 2016, at 22:19, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jun 9, 2016, at 5:51 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 8, 2016, at 9:36 PM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Upon accepting SE-0099, the core team is removing `where` clauses from condition clauses, writing &quot;the &#39;where&#39; keyword can be retired from its purpose as a boolean condition introducer.&quot; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Inspiried by Xiaodi Wu, I now propose removing `where` clauses from `for in` loops, where they are better expressed (and read) as guard conditions. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Do you propose to remove `for case` as well? That can equally be handled by a `guard case` in the loop body.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Alternate proposal: Move `where` clauses to be adjacent to the pattern—rather than the sequence expression—in a `for` loop, just as they are in these other syntaxes.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	for n where n.isOdd in 1...1_000 { … }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This makes them more consistent with the syntax in `switch` cases and `catch` statements, while also IMHO clarifying the role of the `where` clause as a filter on the elements seen by the loop.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I saw your post on that *after* I finished sending this. Moving `where` next to the pattern, like you&#39;d find in `catch` and switch `case`, the code would look like this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for i where i % 2 == 0 in sequence {<br>&gt;&gt;&gt;     // do stuff<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I agree that&#39;s really clever and an improvement but after coming up with all the points about wrong expectations about termination vs filtering, the better use of guard, and fetishes about vertical compactness, I think (call it +0.6) I&#39;m going to stick to my guns on this one - and for `for case` too. I&#39;ve been wuxxed.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * New users might expect the sequence to terminate as soon as i % 2 is 1, rather than the correct interpretation which is &quot;this is a filtering operation&quot;<br>&gt;&gt;&gt; * The code can be expressed less ambiguously as <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for i in sequence.filter({ return i % 2 == 0 }) {<br>&gt;&gt;&gt;     // do stuff<br>&gt;&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; It&#39;s important to keep in mind that .filter without using .lazy copies the array. So you need to keep using sequence.lazy.filter({ return i %2 == 0 }), unless you&#39;re OK with giving up some performance, which a) adds boilerplate, b) not many people will remember to do.<br>&gt;&gt; <br>&gt;&gt; I&#39;ve taken the time to run a test, going through milion numbers (several times) using:<br>&gt;&gt; <br>&gt;&gt; for i in arr { if i % 2 == 0 { continue } }<br>&gt;&gt; for i in arr where i % 2 == 0 { }<br>&gt;&gt; for i in arr.filter({ $0 % 2 == 0 }) { }<br>&gt;&gt; for i in arr.lazy.filter({ $0 % 2 == 0 }) { }<br>&gt;&gt; <br>&gt;&gt; Results:<br>&gt;&gt; <br>&gt;&gt; - plain for loop with if-continue: 27.19 seconds (+1.76%)<br>&gt;&gt; - with where: 26.72 seconds (+0.00%)<br>&gt;&gt; - .filter: 44.73 seconds (+67.40%)<br>&gt;&gt; - .lazy.filter: 31.66 seconds (+18.48%)<br>&gt;&gt; <br>&gt;&gt; Yes, 100 milion numbers is an extreme, but it demonstrates that any of the suggested expressions will be slower, mainly if the caller doesn&#39;t use .lazy (67% !!!). The only comparable solution is adding additional lines of code into the body of the for loop by adding an if statement.<br>&gt; <br>&gt; Just to double-check, was this with optimizations on? Because -Onone numbers aren’t nearly as motivating, but I would expect -O to remove the loop entirely in the simple case.<br>&gt; <br>&gt; Jordan<br>&gt; <br></p><p>See my latest post - included results with -Ofast. But still, using filter and lazy.filter is 10+% slower, which were the suggested alternatives to `where`.<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/30cc1ac8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June  9, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jun 9, 2016, at 11:11 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt; See my latest post - included results with -Ofast. But still, using filter and lazy.filter is 10+% slower, which were the suggested alternatives to `where`.<br>&gt; <br>&gt; <br></p><p>I need to correct this misapprehension.<br>My suggested alternative to where was and remains `guard`.<br></p><p>-- E<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/44b9c3e92a40313850fdbc2cb0abdef7?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Jon Shier</string> &lt;jon at jonshier.com&gt;<p>June  9, 2016 at 02:00:00pm</p></header><div class="content"><p>As time goes on, I’m feeling more and more that these consistency proposals are sorely misguided. Frankly, unless the syntax is confusing or misleading, even once the developer has learned the guiding principles of Swift, consistency is not a good argument for change. This proposal is the perfect example of this. No one will find the use of “where” in loops confusing, aside from those who will wonder why it was removed from if statements. There is no misleading behavior or confusing syntax here. This is just consistency for consistency’s sake. Once this proposal is done, then another will be made to remove “where” from another place in the language. Then another and another until it’s gone completely and a very useful part of the language is removed in the name of consistency. Which really just comes down to “where” isn’t used here, so it can’t be used there anymore. It’s death by a thousand cuts.<br></p><p><br></p><p>Jon Shier<br>	 <br></p><p>&gt; On Jun 9, 2016, at 1:16 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 9, 2016, at 11:11 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt;&gt; See my latest post - included results with -Ofast. But still, using filter and lazy.filter is 10+% slower, which were the suggested alternatives to `where`.<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; I need to correct this misapprehension.<br>&gt; My suggested alternative to where was and remains `guard`.<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June  9, 2016 at 06:00:00pm</p></header><div class="content"><p>There have been, in previous threads, several examples given where users of<br>Swift have found the behavior of `where` to be misleading and confusing.<br></p><p>In fact, the first of these proposals began with a question: how does one<br>write arbitrary Boolean assertions after a let binding? The answer (use<br>`where`) was found to be misleading and confusing.<br></p><p>I think you&#39;re being unfair to say that these proposals have no purpose<br>other than an academic consistency.<br>On Thu, Jun 9, 2016 at 13:29 Jon Shier via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;         As time goes on, I’m feeling more and more that these consistency<br>&gt; proposals are sorely misguided. Frankly, unless the syntax is confusing or<br>&gt; misleading, even once the developer has learned the guiding principles of<br>&gt; Swift, consistency is not a good argument for change. This proposal is the<br>&gt; perfect example of this. No one will find the use of “where” in loops<br>&gt; confusing, aside from those who will wonder why it was removed from if<br>&gt; statements. There is no misleading behavior or confusing syntax here. This<br>&gt; is just consistency for consistency’s sake. Once this proposal is done,<br>&gt; then another will be made to remove “where” from another place in the<br>&gt; language. Then another and another until it’s gone completely and a very<br>&gt; useful part of the language is removed in the name of consistency. Which<br>&gt; really just comes down to “where” isn’t used here, so it can’t be used<br>&gt; there anymore. It’s death by a thousand cuts.<br>&gt;<br>&gt;<br>&gt;<br>&gt; Jon Shier<br>&gt;<br>&gt;<br>&gt; &gt; On Jun 9, 2016, at 1:16 PM, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;&gt; On Jun 9, 2016, at 11:11 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt;<br>&gt; wrote:<br>&gt; &gt;&gt; See my latest post - included results with -Ofast. But still, using<br>&gt; filter and lazy.filter is 10+% slower, which were the suggested<br>&gt; alternatives to `where`.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;<br>&gt; &gt; I need to correct this misapprehension.<br>&gt; &gt; My suggested alternative to where was and remains `guard`.<br>&gt; &gt;<br>&gt; &gt; -- E<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/48ff5aa5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4ab486d7597af4cfe0be33a762150848?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Dany St-Amant</string> &lt;dsa.mls at icloud.com&gt;<p>June  9, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; Le 9 juin 2016 à 14:55, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; There have been, in previous threads, several examples given where users of Swift have found the behavior of `where` to be misleading and confusing.<br></p><p>Sorry Xiaodi, but beside you (on multiple instances), and recently Erica, I have do not recall hearing that many voices saying that &#39;where&#39; is confusing. Yes, there&#39;s was maybe even less voices stating that it is not confusing, but which group is more vocal?<br></p><p>Maybe I have been recently corrupt by Solid SQL queries:<br>select * from PEOPLE_TABLE where AGE_FIELD = 100<br></p><p>Or by my (likely) broken English:<br>The places where I had the most fun<br></p><p>But, to me, where can only suggest some filtering (thus tag to a for ..  in .., continue if not matching). <br></p><p>I know there&#39;s a linguist on the list, maybe he could comment on whether or not using &#39;where&#39; as a filter is proper or an abomination.<br></p><p>I do not think that because something is confusing to some, or at first, that it warrant removal from the language. The by-value/by-reference is well define, but can be confusing at first. Same goes for eager/lazy processing, or escaping vs non-escaping closure, or even the difference between closure and function. But no one suggest to remove them.<br></p><p>Dany<br></p><p>&gt; In fact, the first of these proposals began with a question: how does one write arbitrary Boolean assertions after a let binding? The answer (use `where`) was found to be misleading and confusing.<br>&gt; <br>&gt; I think you&#39;re being unfair to say that these proposals have no purpose other than an academic consistency.<br>&gt;&gt; On Thu, Jun 9, 2016 at 13:29 Jon Shier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;         As time goes on, I’m feeling more and more that these consistency proposals are sorely misguided. Frankly, unless the syntax is confusing or misleading, even once the developer has learned the guiding principles of Swift, consistency is not a good argument for change. This proposal is the perfect example of this. No one will find the use of “where” in loops confusing, aside from those who will wonder why it was removed from if statements. There is no misleading behavior or confusing syntax here. This is just consistency for consistency’s sake. Once this proposal is done, then another will be made to remove “where” from another place in the language. Then another and another until it’s gone completely and a very useful part of the language is removed in the name of consistency. Which really just comes down to “where” isn’t used here, so it can’t be used there anymore. It’s death by a thousand cuts.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Jon Shier<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; &gt; On Jun 9, 2016, at 1:16 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; On Jun 9, 2016, at 11:11 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt;&gt; &gt;&gt; See my latest post - included results with -Ofast. But still, using filter and lazy.filter is 10+% slower, which were the suggested alternatives to `where`.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I need to correct this misapprehension.<br>&gt;&gt; &gt; My suggested alternative to where was and remains `guard`.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; -- E<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/bd0ade50/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 10, 2016 at 12:00:00am</p></header><div class="content"><p>On Thu, Jun 9, 2016 at 9:45 PM, Dany St-Amant &lt;dsa.mls at icloud.com&gt; wrote:<br></p><p>&gt;<br>&gt; Le 9 juin 2016 à 14:55, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;<br>&gt; There have been, in previous threads, several examples given where users<br>&gt; of Swift have found the behavior of `where` to be misleading and confusing.<br>&gt;<br>&gt;<br>&gt; Sorry Xiaodi, but beside you (on multiple instances), and recently Erica,<br>&gt; I have do not recall hearing that many voices saying that &#39;where&#39; is<br>&gt; confusing.<br>&gt;<br></p><p>Shawn Erickson wrote this to the list just yesterday:<br></p><p>&quot;I support your position on the use of where and while/when being confusing<br>in the loop statement. I (and I know others) have for example used where in<br>a loop statement mistakenly thinking it would terminate the loop early but<br>of course learned that it basically filters what causes the loop body to be<br>executed. After the fact that made sense to me but it didn&#39;t click at<br>first.&quot;<br></p><p><br>&gt; Yes, there&#39;s was maybe even less voices stating that it is not confusing,<br>&gt; but which group is more vocal?<br>&gt;<br>&gt; Maybe I have been recently corrupt by Solid SQL queries:<br>&gt; select * from PEOPLE_TABLE where AGE_FIELD = 100<br>&gt;<br>&gt; Or by my (likely) broken English:<br>&gt; The places where I had the most fun<br>&gt;<br>&gt; But, to me, where can only suggest some filtering (thus tag to a for ..<br>&gt;  in .., continue if not matching).<br>&gt;<br></p><p>I&#39;m glad that you find it very clear. I do as well. That does not mean it<br>is clear to everyone.<br></p><p><br>&gt; I know there&#39;s a linguist on the list, maybe he could comment on whether<br>&gt; or not using &#39;where&#39; as a filter is proper or an abomination.<br>&gt;<br>&gt; I do not think that because something is confusing to some, or at first,<br>&gt; that it warrant removal from the language.<br>&gt;<br></p><p>It is a very bad sign if something is confusing at first, especially to a<br>significant proportion of users. It&#39;s true by definition that once you have<br>mastered something you are no longer confused by it.<br></p><p>As has been stated on this list, education is a valid and important<br>consideration for Swift. If something is confusing rather than difficult<br>(and the *concept* of filtering a list is not at all a difficult concept),<br>and if the same underlying concept can already be invoked in alternative<br>and equivalent ways that are not confusing, then it&#39;s a no-brainer that the<br>confusing thing is harmful to the language and should be removed on that<br>basis alone.<br></p><p>By analogy, Chinese and Japanese share difficult writing systems. Yet many<br>people use those languages daily without difficulty. Does that mean there&#39;s<br>not a problem? Far from it: in fact, you&#39;ll find that many intelligent<br>people have devoted their life&#39;s work to mitigating the issue. Both Chinese<br>and Japanese underwent a round of simplification in the 20th century. Think<br>about it: real languages used for daily life by a significant fraction of<br>the world&#39;s population were revamped for the purpose of increasing<br>accessibility to new learners.<br></p><p>The by-value/by-reference is well define, but can be confusing at first.<br>&gt; Same goes for eager/lazy processing, or escaping vs non-escaping closure,<br>&gt; or even the difference between closure and function. But no one suggest to<br>&gt; remove them.<br>&gt;<br></p><p>Value types vs. reference types is a concept (and a moderately advanced<br>one), eager vs. lazy processing is a concept (and a moderately advanced<br>one), and closures are a concept (and definitely an advanced one).<br></p><p>Filtering a collection is a concept as well, and no one is suggesting its<br>removal. We are proposing to simplify and rationalize the syntax by which<br>filtering is invoked. If there were a way to dramatically simplify the<br>syntax surrounding value types and reference types so as to diminish<br>confusion, you can absolutely guarantee that there would be proposals to<br>change the syntax. If I could think of one tomorrow, you&#39;d see a thread<br>tomorrow about it. I don&#39;t think I&#39;m that smart though.<br></p><p><br>&gt; Dany<br>&gt;<br>&gt; In fact, the first of these proposals began with a question: how does one<br>&gt; write arbitrary Boolean assertions after a let binding? The answer (use<br>&gt; `where`) was found to be misleading and confusing.<br>&gt;<br>&gt; I think you&#39;re being unfair to say that these proposals have no purpose<br>&gt; other than an academic consistency.<br>&gt; On Thu, Jun 9, 2016 at 13:29 Jon Shier via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;         As time goes on, I’m feeling more and more that these consistency<br>&gt;&gt; proposals are sorely misguided. Frankly, unless the syntax is confusing or<br>&gt;&gt; misleading, even once the developer has learned the guiding principles of<br>&gt;&gt; Swift, consistency is not a good argument for change. This proposal is the<br>&gt;&gt; perfect example of this. No one will find the use of “where” in loops<br>&gt;&gt; confusing, aside from those who will wonder why it was removed from if<br>&gt;&gt; statements. There is no misleading behavior or confusing syntax here. This<br>&gt;&gt; is just consistency for consistency’s sake. Once this proposal is done,<br>&gt;&gt; then another will be made to remove “where” from another place in the<br>&gt;&gt; language. Then another and another until it’s gone completely and a very<br>&gt;&gt; useful part of the language is removed in the name of consistency. Which<br>&gt;&gt; really just comes down to “where” isn’t used here, so it can’t be used<br>&gt;&gt; there anymore. It’s death by a thousand cuts.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Jon Shier<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; &gt; On Jun 9, 2016, at 1:16 PM, Erica Sadun via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; On Jun 9, 2016, at 11:11 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt; See my latest post - included results with -Ofast. But still, using<br>&gt;&gt; filter and lazy.filter is 10+% slower, which were the suggested<br>&gt;&gt; alternatives to `where`.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I need to correct this misapprehension.<br>&gt;&gt; &gt; My suggested alternative to where was and remains `guard`.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; -- E<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/05ec5c12/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June 10, 2016 at 01:00:00am</p></header><div class="content"><p>&gt; On Jun 10, 2016, at 1:08 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Thu, Jun 9, 2016 at 9:45 PM, Dany St-Amant &lt;dsa.mls at icloud.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Le 9 juin 2016 à 14:55, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There have been, in previous threads, several examples given where users of Swift have found the behavior of `where` to be misleading and confusing.<br>&gt;&gt; <br>&gt;&gt; Sorry Xiaodi, but beside you (on multiple instances), and recently Erica, I have do not recall hearing that many voices saying that &#39;where&#39; is confusing.<br>&gt; <br>&gt; Shawn Erickson wrote this to the list just yesterday:<br>&gt; <br>&gt; &quot;I support your position on the use of where and while/when being confusing in the loop statement. I (and I know others) have for example used where in a loop statement mistakenly thinking it would terminate the loop early but of course learned that it basically filters what causes the loop body to be executed. After the fact that made sense to me but it didn&#39;t click at first.&quot;<br></p><p>Couldn&#39;t we find examples of anyone being confused at any syntax? Especially with an unfamiliar construct in a new language. <br></p><p>If people find the new proposed syntax confusing, do we pull that too? At what point do we stop?<br></p><p>&gt;  <br>&gt;&gt; Yes, there&#39;s was maybe even less voices stating that it is not confusing, but which group is more vocal?<br>&gt;&gt; <br>&gt;&gt; Maybe I have been recently corrupt by Solid SQL queries:<br>&gt;&gt; select * from PEOPLE_TABLE where AGE_FIELD = 100<br>&gt;&gt; <br>&gt;&gt; Or by my (likely) broken English:<br>&gt;&gt; The places where I had the most fun<br>&gt;&gt; <br>&gt;&gt; But, to me, where can only suggest some filtering (thus tag to a for ..  in .., continue if not matching). <br>&gt; <br>&gt; I&#39;m glad that you find it very clear. I do as well. That does not mean it is clear to everyone.<br></p><p>I still have yet to see widespread confusion of this. A few people learning swift here or there, but once they learn the syntax...do they still find it confusing?<br></p><p>I expect some concrete data on stuff like this...especially with proposed syntax changes. <br></p><p>Without concrete examples, what would stop one from coming in here and waving their hands around to push *what they like* through?<br></p><p>&gt;&gt; I know there&#39;s a linguist on the list, maybe he could comment on whether or not using &#39;where&#39; as a filter is proper or an abomination.<br>&gt;&gt; <br>&gt;&gt; I do not think that because something is confusing to some, or at first, that it warrant removal from the language.<br>&gt; <br>&gt; It is a very bad sign if something is confusing at first, especially to a significant proportion of users. It&#39;s true by definition that once you have mastered something you are no longer confused by it.<br></p><p>Again, where is this significant proportion of users? I don&#39;t mean to hound you on this, but I am genuinely curious where this is all coming from. <br></p><p>The burden of evidence is on the proposers of these ideas. <br></p><p>&gt; As has been stated on this list, education is a valid and important consideration for Swift. If something is confusing rather than difficult (and the *concept* of filtering a list is not at all a difficult concept), and if the same underlying concept can already be invoked in alternative and equivalent ways that are not confusing, then it&#39;s a no-brainer that the confusing thing is harmful to the language and should be removed on that basis alone.<br></p><p>What is clear to one person may be confusing to another. There is no perfect syntax that will not make it confusing for some users. <br></p><p>----<br></p><p>I really think it is important to come armed with more information with these proposals. It&#39;s easy to say a significant proportion of people are confused but it would make me much more comfortable to see this data to back it up. <br></p><p>What if we are spinning our wheels for no reason on a feature that *most* don&#39;t find confusing? What if we make a bigger proportion of those who did understand it more confused now?<br></p><p>Brandon <br></p><p>&gt; <br>&gt; By analogy, Chinese and Japanese share difficult writing systems. Yet many people use those languages daily without difficulty. Does that mean there&#39;s not a problem? Far from it: in fact, you&#39;ll find that many intelligent people have devoted their life&#39;s work to mitigating the issue. Both Chinese and Japanese underwent a round of simplification in the 20th century. Think about it: real languages used for daily life by a significant fraction of the world&#39;s population were revamped for the purpose of increasing accessibility to new learners.<br>&gt; <br>&gt;&gt; The by-value/by-reference is well define, but can be confusing at first. Same goes for eager/lazy processing, or escaping vs non-escaping closure, or even the difference between closure and function. But no one suggest to remove them.<br>&gt; <br>&gt; Value types vs. reference types is a concept (and a moderately advanced one), eager vs. lazy processing is a concept (and a moderately advanced one), and closures are a concept (and definitely an advanced one).<br>&gt; <br>&gt; Filtering a collection is a concept as well, and no one is suggesting its removal. We are proposing to simplify and rationalize the syntax by which filtering is invoked. If there were a way to dramatically simplify the syntax surrounding value types and reference types so as to diminish confusion, you can absolutely guarantee that there would be proposals to change the syntax. If I could think of one tomorrow, you&#39;d see a thread tomorrow about it. I don&#39;t think I&#39;m that smart though.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Dany<br>&gt;&gt; <br>&gt;&gt;&gt; In fact, the first of these proposals began with a question: how does one write arbitrary Boolean assertions after a let binding? The answer (use `where`) was found to be misleading and confusing.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think you&#39;re being unfair to say that these proposals have no purpose other than an academic consistency.<br>&gt;&gt;&gt;&gt; On Thu, Jun 9, 2016 at 13:29 Jon Shier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;         As time goes on, I’m feeling more and more that these consistency proposals are sorely misguided. Frankly, unless the syntax is confusing or misleading, even once the developer has learned the guiding principles of Swift, consistency is not a good argument for change. This proposal is the perfect example of this. No one will find the use of “where” in loops confusing, aside from those who will wonder why it was removed from if statements. There is no misleading behavior or confusing syntax here. This is just consistency for consistency’s sake. Once this proposal is done, then another will be made to remove “where” from another place in the language. Then another and another until it’s gone completely and a very useful part of the language is removed in the name of consistency. Which really just comes down to “where” isn’t used here, so it can’t be used there anymore. It’s death by a thousand cuts.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Jon Shier<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &gt; On Jun 9, 2016, at 1:16 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; On Jun 9, 2016, at 11:11 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt;&gt; See my latest post - included results with -Ofast. But still, using filter and lazy.filter is 10+% slower, which were the suggested alternatives to `where`.<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; I need to correct this misapprehension.<br>&gt;&gt;&gt;&gt; &gt; My suggested alternative to where was and remains `guard`.<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; -- E<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/b65e794a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 10, 2016 at 01:00:00am</p></header><div class="content"><p>On Fri, Jun 10, 2016 at 12:48 AM, Brandon Knope &lt;bknope at me.com&gt; wrote:<br></p><p>&gt;<br>&gt;<br>&gt; On Jun 10, 2016, at 1:08 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Thu, Jun 9, 2016 at 9:45 PM, Dany St-Amant &lt;dsa.mls at icloud.com&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; Le 9 juin 2016 à 14:55, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;<br>&gt;&gt; There have been, in previous threads, several examples given where users<br>&gt;&gt; of Swift have found the behavior of `where` to be misleading and confusing.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Sorry Xiaodi, but beside you (on multiple instances), and recently Erica,<br>&gt;&gt; I have do not recall hearing that many voices saying that &#39;where&#39; is<br>&gt;&gt; confusing.<br>&gt;&gt;<br>&gt;<br>&gt; Shawn Erickson wrote this to the list just yesterday:<br>&gt;<br>&gt; &quot;I support your position on the use of where and while/when being<br>&gt; confusing in the loop statement. I (and I know others) have for example<br>&gt; used where in a loop statement mistakenly thinking it would terminate the<br>&gt; loop early but of course learned that it basically filters what causes the<br>&gt; loop body to be executed. After the fact that made sense to me but it<br>&gt; didn&#39;t click at first.&quot;<br>&gt;<br>&gt;<br>&gt; Couldn&#39;t we find examples of anyone being confused at any syntax?<br>&gt; Especially with an unfamiliar construct in a new language.<br>&gt;<br>&gt; If people find the new proposed syntax confusing, do we pull that too? At<br>&gt; what point do we stop?<br>&gt;<br></p><p>That is why I favored (1) removal of the confusing syntax altogether; and<br>(2) this proposal, which involves aligning the confusing syntax with an<br>existing syntax. In short, no new syntax to get confused about.<br></p><p>Yes, there&#39;s was maybe even less voices stating that it is not confusing,<br>&gt;&gt; but which group is more vocal?<br>&gt;&gt;<br>&gt;&gt; Maybe I have been recently corrupt by Solid SQL queries:<br>&gt;&gt; select * from PEOPLE_TABLE where AGE_FIELD = 100<br>&gt;&gt;<br>&gt;&gt; Or by my (likely) broken English:<br>&gt;&gt; The places where I had the most fun<br>&gt;&gt;<br>&gt;&gt; But, to me, where can only suggest some filtering (thus tag to a for ..<br>&gt;&gt;  in .., continue if not matching).<br>&gt;&gt;<br>&gt;<br>&gt; I&#39;m glad that you find it very clear. I do as well. That does not mean it<br>&gt; is clear to everyone.<br>&gt;<br>&gt;<br>&gt; I still have yet to see widespread confusion of this. A few people<br>&gt; learning swift here or there, but once they learn the syntax...do they<br>&gt; still find it confusing?<br>&gt;<br></p><p>Again, as I said, once you&#39;ve mastered something, by definition you find it<br>not confusing. Why should we doom x% of new users to writing a loop<br>incorrectly at least once when we don&#39;t have to?<br></p><p>I expect some concrete data on stuff like this...especially with proposed<br>&gt; syntax changes.<br>&gt;<br>&gt; Without concrete examples, what would stop one from coming in here and<br>&gt; waving their hands around to push *what they like* through?<br>&gt;<br></p><p>Here&#39;s what&#39;s not handwavy:<br></p><p>* Swift is explicitly a C-family language. In most or all other C-family<br>languages, for loop statements allow specification of conditions for<br>exiting the loop but not for filtering. Therefore, Swift&#39;s use of `where`<br>is unprecedented and needs to be learned anew by every user of Swift.<br></p><p>* The word &quot;where&quot; does not consistently imply `break` or `continue`. In<br>current Swift, `where` implies `break` in the context of a `while` loop and<br>`continue` in the context of a `for` loop. Some users intuitively guess the<br>correct meaning in each context, while others guess the wrong meaning.<br>Therefore, the only way to learn for sure what `where` means in any context<br>is to read the rulebook. That, by definition, means that this is<br>unintuitive.<br></p><p>* There are other ways to break from a loop or continue to the next<br>iteration without performance penalty. Nearly all of these serve more<br>general purposes than a `where` clause. Some of these (such as `if` or<br>`guard`) would already be familiar to a new user before they encounter<br>loops, assuming a typical order for learning a programming language. Many<br>of these (such as filtering methods on collections, or simply `if`) would<br>be familiar to a user of another C-family language. Therefore, the `where`<br>clause provides no independent utility, is not more discoverable than its<br>alternatives, and is not required for progressive disclosure of an<br>important facility to a learner (i.e. a simplified syntax for those who may<br>not be ready for the advanced concepts needed to use a more fully-featured<br>alternative).<br></p><p>Conclusion: the `where` clause is unprecedented, unintuitive, provides no<br>independent utility, is not more discoverable than alternatives, and is not<br>required for pedagogical reasons; however, it has been used incorrectly by<br>at least some users. Therefore, it is harmful and ought to be removed or<br>reformed.<br></p><p>I know there&#39;s a linguist on the list, maybe he could comment on whether or<br>&gt;&gt; not using &#39;where&#39; as a filter is proper or an abomination.<br>&gt;&gt;<br>&gt;&gt; I do not think that because something is confusing to some, or at first,<br>&gt;&gt; that it warrant removal from the language.<br>&gt;&gt;<br>&gt;<br>&gt; It is a very bad sign if something is confusing at first, especially to a<br>&gt; significant proportion of users. It&#39;s true by definition that once you have<br>&gt; mastered something you are no longer confused by it.<br>&gt;<br>&gt;<br>&gt; Again, where is this significant proportion of users? I don&#39;t mean to<br>&gt; hound you on this, but I am genuinely curious where this is all coming from.<br>&gt;<br></p><p>We were talking about the hypothetical something here and what the bar<br>should be for removal from the language. My response is that being<br>confusing at first sight *is* a legitimate consideration for removal from<br>the language. If something turns out to be a confusing way to describe a<br>straightforward concept, then the more widespread the confusion, the more<br>urgent its removal.<br></p><p><br>&gt; The burden of evidence is on the proposers of these ideas.<br>&gt;<br>&gt; As has been stated on this list, education is a valid and important<br>&gt; consideration for Swift. If something is confusing rather than difficult<br>&gt; (and the *concept* of filtering a list is not at all a difficult concept),<br>&gt; and if the same underlying concept can already be invoked in alternative<br>&gt; and equivalent ways that are not confusing, then it&#39;s a no-brainer that the<br>&gt; confusing thing is harmful to the language and should be removed on that<br>&gt; basis alone.<br>&gt;<br>&gt;<br>&gt; What is clear to one person may be confusing to another. There is no<br>&gt; perfect syntax that will not make it confusing for some users.<br>&gt;<br>&gt; ----<br>&gt;<br>&gt; I really think it is important to come armed with more information with<br>&gt; these proposals. It&#39;s easy to say a significant proportion of people are<br>&gt; confused but it would make me much more comfortable to see this data to<br>&gt; back it up.<br>&gt;<br>&gt; What if we are spinning our wheels for no reason on a feature that *most*<br>&gt; don&#39;t find confusing? What if we make a bigger proportion of those who did<br>&gt; understand it more confused now?<br>&gt;<br></p><p>The point here is that this is not a slippery slope. If `where` offered<br>independent utility, then some confusion alone probably wouldn&#39;t be enough<br>to justify removal, though it may justify some consideration for change.<br>However, as the extensive discussion has shown, there is nothing `where`<br>can do that something else can&#39;t do better. I know you like it for style,<br>but that&#39;s not sufficient grounds for keeping something confusing, IMO.<br></p><p><br>&gt; Brandon<br>&gt;<br>&gt;<br>&gt; By analogy, Chinese and Japanese share difficult writing systems. Yet many<br>&gt; people use those languages daily without difficulty. Does that mean there&#39;s<br>&gt; not a problem? Far from it: in fact, you&#39;ll find that many intelligent<br>&gt; people have devoted their life&#39;s work to mitigating the issue. Both Chinese<br>&gt; and Japanese underwent a round of simplification in the 20th century. Think<br>&gt; about it: real languages used for daily life by a significant fraction of<br>&gt; the world&#39;s population were revamped for the purpose of increasing<br>&gt; accessibility to new learners.<br>&gt;<br>&gt; The by-value/by-reference is well define, but can be confusing at first.<br>&gt;&gt; Same goes for eager/lazy processing, or escaping vs non-escaping closure,<br>&gt;&gt; or even the difference between closure and function. But no one suggest to<br>&gt;&gt; remove them.<br>&gt;&gt;<br>&gt;<br>&gt; Value types vs. reference types is a concept (and a moderately advanced<br>&gt; one), eager vs. lazy processing is a concept (and a moderately advanced<br>&gt; one), and closures are a concept (and definitely an advanced one).<br>&gt;<br>&gt; Filtering a collection is a concept as well, and no one is suggesting its<br>&gt; removal. We are proposing to simplify and rationalize the syntax by which<br>&gt; filtering is invoked. If there were a way to dramatically simplify the<br>&gt; syntax surrounding value types and reference types so as to diminish<br>&gt; confusion, you can absolutely guarantee that there would be proposals to<br>&gt; change the syntax. If I could think of one tomorrow, you&#39;d see a thread<br>&gt; tomorrow about it. I don&#39;t think I&#39;m that smart though.<br>&gt;<br>&gt;<br>&gt;&gt; Dany<br>&gt;&gt;<br>&gt;&gt; In fact, the first of these proposals began with a question: how does one<br>&gt;&gt; write arbitrary Boolean assertions after a let binding? The answer (use<br>&gt;&gt; `where`) was found to be misleading and confusing.<br>&gt;&gt;<br>&gt;&gt; I think you&#39;re being unfair to say that these proposals have no purpose<br>&gt;&gt; other than an academic consistency.<br>&gt;&gt; On Thu, Jun 9, 2016 at 13:29 Jon Shier via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;         As time goes on, I’m feeling more and more that these<br>&gt;&gt;&gt; consistency proposals are sorely misguided. Frankly, unless the syntax is<br>&gt;&gt;&gt; confusing or misleading, even once the developer has learned the guiding<br>&gt;&gt;&gt; principles of Swift, consistency is not a good argument for change. This<br>&gt;&gt;&gt; proposal is the perfect example of this. No one will find the use of<br>&gt;&gt;&gt; “where” in loops confusing, aside from those who will wonder why it was<br>&gt;&gt;&gt; removed from if statements. There is no misleading behavior or confusing<br>&gt;&gt;&gt; syntax here. This is just consistency for consistency’s sake. Once this<br>&gt;&gt;&gt; proposal is done, then another will be made to remove “where” from another<br>&gt;&gt;&gt; place in the language. Then another and another until it’s gone completely<br>&gt;&gt;&gt; and a very useful part of the language is removed in the name of<br>&gt;&gt;&gt; consistency. Which really just comes down to “where” isn’t used here, so it<br>&gt;&gt;&gt; can’t be used there anymore. It’s death by a thousand cuts.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Jon Shier<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt; On Jun 9, 2016, at 1:16 PM, Erica Sadun via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt; On Jun 9, 2016, at 11:11 AM, Charlie Monroe &lt;<br>&gt;&gt;&gt; charlie at charliemonroe.net&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt; See my latest post - included results with -Ofast. But still, using<br>&gt;&gt;&gt; filter and lazy.filter is 10+% slower, which were the suggested<br>&gt;&gt;&gt; alternatives to `where`.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; I need to correct this misapprehension.<br>&gt;&gt;&gt; &gt; My suggested alternative to where was and remains `guard`.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; -- E<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/b2261f2b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>June 10, 2016 at 01:00:00pm</p></header><div class="content"><p>-1<br></p><p>&gt; * Swift is explicitly a C-family language. In most or all other C-family languages, for loop statements allow specification of conditions for exiting the loop but not for filtering. Therefore, Swift&#39;s use of `where` is unprecedented and needs to be learned anew by every user of Swift.<br></p><p>When was this decided? I distinctly remember some bloke under Craig Federighi’s hair saying that it was time to “move beyond” C and essentially ditch legacy conventions which no longer make sense.<br></p><p>As I understand it, Swift is a new language with new conventions. It is desirable to align as many of those as possible with existing conventions so as to be easily learned, but if you limit Swift to other languages conventions you deny it any identity. Did Python ask anybody’s opinion before dropping curly-braces? Did people learn whatever Perl is supposed to be? Look at C’s hieroglyphic for loops! <br></p><p>Realistically, “for … in … while” is not going to cause incredible confusion. Removing it would cause a lot of frustration. You can’t on the one hand say our users are comfortable with the axioms of C’s hieroglyphic loops, and on the other hand say “for x in y while&quot; is confusing.<br></p><p>&gt; Again, as I said, once you&#39;ve mastered something, by definition you find it not confusing. Why should we doom x% of new users to writing a loop incorrectly at least once when we don&#39;t have to?<br></p><p><br>Ah, but if you’re not “doomed” to failing once, how will you ever master anything? Nobody knew how to write a C for-loop until someone showed them (and even then…). Nobody is going to just open a REPL and start writing code, with zero prior understanding of what Swift syntax looks like.<br></p><p>&gt; * The word &quot;where&quot; does not consistently imply `break` or `continue`. In current Swift, `where` implies `break` in the context of a `while` loop and `continue` in the context of a `for` loop. Some users intuitively guess the correct meaning in each context, while others guess the wrong meaning. Therefore, the only way to learn for sure what `where` means in any context is to read the rulebook. That, by definition, means that this is unintuitive.<br></p><p>I didn’t even know while loops supported “where”. I can’t even imagine what that would look like, or how I would reason about one if I saw one. I Googled around a little bit and couldn’t find any examples. If they exist, sure, go ahead, get rid of them. Nobody will miss them. It definitely makes sense on ‘for’, though. Lots and lots of people will miss that; it’s a pretty well-known feature.<br></p><p>Also, after everything you said, it’s still not unintuitive. That is not how languages work at all. Languages spoken by human beings are always ambiguous to some extent, and we use context to determine which meaning is correct:<br></p><p>(Quote from https://research.googleblog.com/2016/05/announcing-syntaxnet-worlds-most.html)<br>&gt; One of the main problems that makes parsing so challenging is that human languages show remarkable levels of ambiguity. It is not uncommon for moderate length sentences - say 20 or 30 words in length - to have hundreds, thousands, or even tens of thousands of possible syntactic structures. A natural language parser must somehow search through all of these alternatives, and find the most plausible structure given the context. As a very simple example, the sentence &quot;Alice drove down the street in her car&quot; has at least two possible dependency parses:<br>&gt; <br>&gt; The first corresponds to the (correct) interpretation where Alice is driving in her car; the second corresponds to the (absurd, but possible) interpretation where the street is located in her car. The ambiguity arises because the preposition “in&quot; can either modify drove or street; this example is an instance of what is called prepositional phrase attachment ambiguity. <br></p><p><br>Even algebra is not completely unambiguous - you need to use BODMAS rules to disambiguate potential meanings.<br>It’s this context which I think you’re missing when zooming in at the word “where”:<br></p><p>- The context that this is a variation of a ‘for x in y’ loop. We know that it loops through every item in ‘y&#39; and assigns it ‘x’. It is literally Section 2 of the &#39;Swift Tour&#39; - you learn how to assign a variable, and then you learn about the “for x in y” loop. Everybody should recognise it.<br>- The context that ‘x’ is the subject, so ‘where’ is clearly a condition for x to fulfill<br>- The context that ‘where’ occurs after ‘in’, so it follows the order in which its written: ‘for every x in y, where such-and-such is true, do …”<br>- The “for x in y” loop is a data-driven loop. It doesn’t even have a loop index. It is not like a C for loop and you shouldn’t expect to reason about it that way.<br></p><p>&gt; * There are other ways to break from a loop or continue to the next iteration without performance penalty. Nearly all of these serve more general purposes than a `where` clause. Some of these (such as `if` or `guard`) would already be familiar to a new user before they encounter loops, assuming a typical order for learning a programming language. Many of these (such as filtering methods on collections, or simply `if`) would be familiar to a user of another C-family language. Therefore, the `where` clause provides no independent utility, is not more discoverable than its alternatives, and is not required for progressive disclosure of an important facility to a learner (i.e. a simplified syntax for those who may not be ready for the advanced concepts needed to use a more fully-featured alternative).<br></p><p>You say the points in favour of removal are not handwavey, but I’m still not convinced. “There are other ways to go to where this shortcut goes” is not reasoning. And I’d definitely argue that it is more discoverable than the ‘guard’ statement. The guard statement is stone-dead last at the end of a massive “Control-Flow” page. I would guess that most first-time readers skip those topics for later.<br></p><p>&gt; The point here is that this is not a slippery slope. If `where` offered independent utility, then some confusion alone probably wouldn&#39;t be enough to justify removal, though it may justify some consideration for change. However, as the extensive discussion has shown, there is nothing `where` can do that something else can&#39;t do better. I know you like it for style, but that&#39;s not sufficient grounds for keeping something confusing, IMO.<br></p><p>It’s more readable. It does that better. The tests also seem to show that (bizarrely) it’s also slightly faster than the alternatives.<br></p><p>Karl<br></p><p>&gt; On 10 Jun 2016, at 08:25, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Fri, Jun 10, 2016 at 12:48 AM, Brandon Knope &lt;bknope at me.com &lt;mailto:bknope at me.com&gt;&gt; wrote:<br>&gt; <br>&gt; <br>&gt; On Jun 10, 2016, at 1:08 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Thu, Jun 9, 2016 at 9:45 PM, Dany St-Amant &lt;dsa.mls at icloud.com &lt;mailto:dsa.mls at icloud.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Le 9 juin 2016 à 14:55, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt;&gt; There have been, in previous threads, several examples given where users of Swift have found the behavior of `where` to be misleading and confusing.<br>&gt;&gt; <br>&gt;&gt; Sorry Xiaodi, but beside you (on multiple instances), and recently Erica, I have do not recall hearing that many voices saying that &#39;where&#39; is confusing.<br>&gt;&gt; <br>&gt;&gt; Shawn Erickson wrote this to the list just yesterday:<br>&gt;&gt; <br>&gt;&gt; &quot;I support your position on the use of where and while/when being confusing in the loop statement. I (and I know others) have for example used where in a loop statement mistakenly thinking it would terminate the loop early but of course learned that it basically filters what causes the loop body to be executed. After the fact that made sense to me but it didn&#39;t click at first.&quot;<br>&gt; <br>&gt; Couldn&#39;t we find examples of anyone being confused at any syntax? Especially with an unfamiliar construct in a new language. <br>&gt; <br>&gt; If people find the new proposed syntax confusing, do we pull that too? At what point do we stop?<br>&gt; <br>&gt; That is why I favored (1) removal of the confusing syntax altogether; and (2) this proposal, which involves aligning the confusing syntax with an existing syntax. In short, no new syntax to get confused about.<br>&gt; <br>&gt;&gt; Yes, there&#39;s was maybe even less voices stating that it is not confusing, but which group is more vocal?<br>&gt;&gt; <br>&gt;&gt; Maybe I have been recently corrupt by Solid SQL queries:<br>&gt;&gt; select * from PEOPLE_TABLE where AGE_FIELD = 100<br>&gt;&gt; <br>&gt;&gt; Or by my (likely) broken English:<br>&gt;&gt; The places where I had the most fun<br>&gt;&gt; <br>&gt;&gt; But, to me, where can only suggest some filtering (thus tag to a for ..  in .., continue if not matching). <br>&gt;&gt; <br>&gt;&gt; I&#39;m glad that you find it very clear. I do as well. That does not mean it is clear to everyone.<br>&gt; <br>&gt; I still have yet to see widespread confusion of this. A few people learning swift here or there, but once they learn the syntax...do they still find it confusing?<br>&gt; <br>&gt; <br>&gt; I expect some concrete data on stuff like this...especially with proposed syntax changes. <br>&gt; <br>&gt; Without concrete examples, what would stop one from coming in here and waving their hands around to push *what they like* through?<br>&gt; <br>&gt; Here&#39;s what&#39;s not handwavy:<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; Conclusion: the `where` clause is unprecedented, unintuitive, provides no independent utility, is not more discoverable than alternatives, and is not required for pedagogical reasons; however, it has been used incorrectly by at least some users. Therefore, it is harmful and ought to be removed or reformed.<br>&gt; <br>&gt;&gt; I know there&#39;s a linguist on the list, maybe he could comment on whether or not using &#39;where&#39; as a filter is proper or an abomination.<br>&gt;&gt; <br>&gt;&gt; I do not think that because something is confusing to some, or at first, that it warrant removal from the language.<br>&gt;&gt; <br>&gt;&gt; It is a very bad sign if something is confusing at first, especially to a significant proportion of users. It&#39;s true by definition that once you have mastered something you are no longer confused by it.<br>&gt; <br>&gt; Again, where is this significant proportion of users? I don&#39;t mean to hound you on this, but I am genuinely curious where this is all coming from.<br>&gt; <br>&gt; We were talking about the hypothetical something here and what the bar should be for removal from the language. My response is that being confusing at first sight *is* a legitimate consideration for removal from the language. If something turns out to be a confusing way to describe a straightforward concept, then the more widespread the confusion, the more urgent its removal.<br>&gt;  <br>&gt; The burden of evidence is on the proposers of these ideas. <br>&gt; <br>&gt;&gt; As has been stated on this list, education is a valid and important consideration for Swift. If something is confusing rather than difficult (and the *concept* of filtering a list is not at all a difficult concept), and if the same underlying concept can already be invoked in alternative and equivalent ways that are not confusing, then it&#39;s a no-brainer that the confusing thing is harmful to the language and should be removed on that basis alone.<br>&gt; <br>&gt; What is clear to one person may be confusing to another. There is no perfect syntax that will not make it confusing for some users. <br>&gt; <br>&gt; ----<br>&gt; <br>&gt; I really think it is important to come armed with more information with these proposals. It&#39;s easy to say a significant proportion of people are confused but it would make me much more comfortable to see this data to back it up. <br>&gt; <br>&gt; What if we are spinning our wheels for no reason on a feature that *most* don&#39;t find confusing? What if we make a bigger proportion of those who did understand it more confused now?<br>&gt; <br>&gt; <br>&gt;  <br>&gt; Brandon <br>&gt; <br>&gt;&gt; <br>&gt;&gt; By analogy, Chinese and Japanese share difficult writing systems. Yet many people use those languages daily without difficulty. Does that mean there&#39;s not a problem? Far from it: in fact, you&#39;ll find that many intelligent people have devoted their life&#39;s work to mitigating the issue. Both Chinese and Japanese underwent a round of simplification in the 20th century. Think about it: real languages used for daily life by a significant fraction of the world&#39;s population were revamped for the purpose of increasing accessibility to new learners.<br>&gt;&gt; <br>&gt;&gt; The by-value/by-reference is well define, but can be confusing at first. Same goes for eager/lazy processing, or escaping vs non-escaping closure, or even the difference between closure and function. But no one suggest to remove them.<br>&gt;&gt; <br>&gt;&gt; Value types vs. reference types is a concept (and a moderately advanced one), eager vs. lazy processing is a concept (and a moderately advanced one), and closures are a concept (and definitely an advanced one).<br>&gt;&gt; <br>&gt;&gt; Filtering a collection is a concept as well, and no one is suggesting its removal. We are proposing to simplify and rationalize the syntax by which filtering is invoked. If there were a way to dramatically simplify the syntax surrounding value types and reference types so as to diminish confusion, you can absolutely guarantee that there would be proposals to change the syntax. If I could think of one tomorrow, you&#39;d see a thread tomorrow about it. I don&#39;t think I&#39;m that smart though.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Dany<br>&gt;&gt; <br>&gt;&gt;&gt; In fact, the first of these proposals began with a question: how does one write arbitrary Boolean assertions after a let binding? The answer (use `where`) was found to be misleading and confusing.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think you&#39;re being unfair to say that these proposals have no purpose other than an academic consistency.<br>&gt;&gt;&gt; On Thu, Jun 9, 2016 at 13:29 Jon Shier via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;         As time goes on, I’m feeling more and more that these consistency proposals are sorely misguided. Frankly, unless the syntax is confusing or misleading, even once the developer has learned the guiding principles of Swift, consistency is not a good argument for change. This proposal is the perfect example of this. No one will find the use of “where” in loops confusing, aside from those who will wonder why it was removed from if statements. There is no misleading behavior or confusing syntax here. This is just consistency for consistency’s sake. Once this proposal is done, then another will be made to remove “where” from another place in the language. Then another and another until it’s gone completely and a very useful part of the language is removed in the name of consistency. Which really just comes down to “where” isn’t used here, so it can’t be used there anymore. It’s death by a thousand cuts.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jon Shier<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt; On Jun 9, 2016, at 1:16 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt; On Jun 9, 2016, at 11:11 AM, Charlie Monroe &lt;charlie at charliemonroe.net &lt;mailto:charlie at charliemonroe.net&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt; See my latest post - included results with -Ofast. But still, using filter and lazy.filter is 10+% slower, which were the suggested alternatives to `where`.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; I need to correct this misapprehension.<br>&gt;&gt;&gt; &gt; My suggested alternative to where was and remains `guard`.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; -- E<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/a56aebd8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 10, 2016 at 11:00:00am</p></header><div class="content"><p>On Fri, Jun 10, 2016 at 6:10 AM, Karl &lt;razielim at gmail.com&gt; wrote:<br></p><p>&gt; -1<br>&gt;<br>&gt; * Swift is explicitly a C-family language. In most or all other C-family<br>&gt; languages, for loop statements allow specification of conditions for<br>&gt; exiting the loop but not for filtering. Therefore, Swift&#39;s use of `where`<br>&gt; is unprecedented and needs to be learned anew by every user of Swift.<br>&gt;<br>&gt;<br>&gt; When was this decided? I distinctly remember some bloke under Craig<br>&gt; Federighi’s hair saying that it was time to “move beyond” C and essentially<br>&gt; ditch legacy conventions which no longer make sense.<br>&gt;<br></p><p>I think you misunderstood my argument here. I don&#39;t mean that we should<br>yoke ourselves to C conventions, and we should absolutely ditch C<br>convention when it doesn&#39;t make sense. The big-picture argument here is<br>that `where` doesn&#39;t pass the bar of correcting a C convention that no<br>longer makes sense.<br></p><p>FWIW, on the topic of syntax choices, here is what Chris Lattner had to say<br>on this list:<br></p><p>Kevin got it exa*c*tly right, but I’d expand that last bit a bit to:<br>&gt; “… pi*c*king the one that is most familiar to programmers in the extended<br>&gt; *C* *family* is a good idea.[&quot;]<br>&gt; The extended *C* *family* of language (whi*c*h in*c*ludes *C*, *C*++, Obj<br>&gt; *C*, but also *C*#, Java, Javas*c*ript, and more) is<br>&gt; an extremely popular and widely used set of languages that have a lot of<br>&gt; surfa*c*e-level similarity. I<br>&gt; don’t *c*laim to know the design rationale of all of these languages, but<br>&gt; I surmise that this is not an<br>&gt; a*c**c*ident: programmers move around and work in different languages,<br>&gt; and this allows a non-expert in the<br>&gt; language to understand what is going on. While there are things about *C*<br>&gt; that are really unfortunate IMO<br>&gt; (e.g. the de*c*larator/de*c*laration spe*c*ifier part of the grammar)<br>&gt; there is a lot of goodness in the basi<br>&gt; *c*operator set, fo*c*us on dot syntax, and more.<br>&gt; I do agree that there are some benefits to dit*c*hing bra*c*es and<br>&gt; relying on indentation instead, but there are<br>&gt; also downsides. Deviating from the *C* *family* in this respe*c*t would<br>&gt; have to provide **overwhelmingly** large<br>&gt; advantages for us to take su*c*h a plunge, and they simply don’t exist.<br></p><p><br></p><p>&gt; As I understand it, Swift is a new language with new conventions. It is<br>&gt; desirable to align as many of those as possible with existing conventions<br>&gt; so as to be easily learned, but if you limit Swift to other languages<br>&gt; conventions you deny it any identity. Did Python ask anybody’s opinion<br>&gt; before dropping curly-braces? Did people learn whatever Perl is supposed to<br>&gt; be? Look at C’s hieroglyphic for loops!<br>&gt;<br></p><p>I don&#39;t think we disagree here.<br></p><p><br>&gt;<br>&gt; Realistically, “for … in … while” is not going to cause incredible<br>&gt; confusion. Removing it would cause a lot of frustration. You can’t on the<br>&gt; one hand say our users are comfortable with the axioms of C’s hieroglyphic<br>&gt; loops, and on the other hand say “for x in y while&quot; is confusing.<br>&gt;<br>&gt; Again, as I said, once you&#39;ve mastered something, by definition you find<br>&gt; it not confusing. Why should we doom x% of new users to writing a loop<br>&gt; incorrectly at least once when we don&#39;t have to?<br>&gt;<br>&gt;<br>&gt; Ah, but if you’re not “doomed” to failing once, how will you ever master<br>&gt; anything? Nobody knew how to write a C for-loop until someone showed them<br>&gt; (and even then…). Nobody is going to just open a REPL and start writing<br>&gt; code, with zero prior understanding of what Swift syntax looks like.<br>&gt;<br></p><p>The thought here is along the lines of what Chris said, quoted above, and<br>repeated here: &quot;The extended C family of language [...] is an extremely<br>popular and widely used set[;] programmers move around and work in<br>different languages, and [aligning to expectations arising from other C<br>family languages] allows a non-expert in the language to understand what is<br>going on.&quot; By contrast, the `where` clause violates that expectation and I<br>do not see &quot;overwhelmingly large advantages&quot; for doing so.<br></p><p><br>&gt;<br>&gt; * The word &quot;where&quot; does not consistently imply `break` or `continue`. In<br>&gt; current Swift, `where` implies `break` in the context of a `while` loop and<br>&gt; `continue` in the context of a `for` loop. Some users intuitively guess the<br>&gt; correct meaning in each context, while others guess the wrong meaning.<br>&gt; Therefore, the only way to learn for sure what `where` means in any context<br>&gt; is to read the rulebook. That, by definition, means that this is<br>&gt; unintuitive.<br>&gt;<br>&gt;<br>&gt; I didn’t even know while loops supported “where”. I can’t even imagine<br>&gt; what that would look like, or how I would reason about one if I saw one. I<br>&gt; Googled around a little bit and couldn’t find any examples. If they exist,<br>&gt; sure, go ahead, get rid of them. Nobody will miss them.<br>&gt;<br></p><p>Actually, we had a *huge* chain where there were definitely people who said<br>they would miss them, even though as you said it appears scarcely used and<br>not very well known. The pernicious problem with it was that it forced even<br>unrelated boolean assertions to be chained with `where`, as in:<br></p><p>```<br>while let x = iterator.next() where y &lt; z { ... }<br>```<br></p><p><br>&gt; It definitely makes sense on ‘for’, though. Lots and lots of people will<br>&gt; miss that; it’s a pretty well-known feature.<br>&gt;<br></p><p>(See Erica&#39;s statistics below.)<br></p><p>Also, after everything you said, it’s still not unintuitive. That is not<br>&gt; how languages work at all. Languages spoken by human beings are always<br>&gt; ambiguous to some extent, and we use context to determine which meaning is<br>&gt; correct:<br>&gt;<br>&gt; (Quote from<br>&gt; https://research.googleblog.com/2016/05/announcing-syntaxnet-worlds-most.html<br>&gt; )<br>&gt;<br>&gt; One of the main problems that makes parsing so challenging is that human<br>&gt; languages show remarkable levels of ambiguity. It is not uncommon for<br>&gt; moderate length sentences - say 20 or 30 words in length - to have<br>&gt; hundreds, thousands, or even tens of thousands of possible<br>&gt; syntactic structures. A natural language parser must somehow search through<br>&gt; all of these alternatives, and find the most plausible structure given<br>&gt; the context. As a very simple example, the sentence &quot;Alice drove down the<br>&gt; street in her car&quot; has at least two possible dependency parses:<br>&gt;<br>&gt; The first corresponds to the (correct) interpretation where Alice is<br>&gt; driving in her car; the second corresponds to the (absurd, but<br>&gt; possible) interpretation where the street is located in her car. The<br>&gt; ambiguity arises because the preposition “in&quot; can either<br>&gt; modify drove or street; this example is an instance of what is<br>&gt; called prepositional phrase attachment ambiguity.<br>&gt;<br>&gt;<br>&gt; Even algebra is not completely unambiguous - you need to use BODMAS rules<br>&gt; to disambiguate potential meanings.<br>&gt; It’s this context which I think you’re missing when zooming in at the word<br>&gt; “where”:<br>&gt;<br>&gt; - The context that this is a variation of a ‘for x in y’ loop. We know<br>&gt; that it loops through every item in ‘y&#39; and assigns it ‘x’. It is literally<br>&gt; Section 2 of the &#39;Swift Tour&#39; - you learn how to assign a variable, and<br>&gt; then you learn about the “for x in y” loop. Everybody should recognise it.<br>&gt; - The context that ‘x’ is the subject, so ‘where’ is clearly a condition<br>&gt; for x to fulfill<br>&gt; - The context that ‘where’ occurs after ‘in’, so it follows the order in<br>&gt; which its written: ‘for every x in y, where such-and-such is true, do …”<br>&gt; - The “for x in y” loop is a data-driven loop. It doesn’t even have a loop<br>&gt; index. It is not like a C for loop and you shouldn’t expect to reason about<br>&gt; it that way.<br>&gt;<br>&gt; * There are other ways to break from a loop or continue to the next<br>&gt; iteration without performance penalty. Nearly all of these serve more<br>&gt; general purposes than a `where` clause. Some of these (such as `if` or<br>&gt; `guard`) would already be familiar to a new user before they encounter<br>&gt; loops, assuming a typical order for learning a programming language. Many<br>&gt; of these (such as filtering methods on collections, or simply `if`) would<br>&gt; be familiar to a user of another C-family language. Therefore, the `where`<br>&gt; clause provides no independent utility, is not more discoverable than its<br>&gt; alternatives, and is not required for progressive disclosure of an<br>&gt; important facility to a learner (i.e. a simplified syntax for those who may<br>&gt; not be ready for the advanced concepts needed to use a more fully-featured<br>&gt; alternative).<br>&gt;<br>&gt;<br>&gt; You say the points in favour of removal are not handwavey, but I’m still<br>&gt; not convinced. “There are other ways to go to where this shortcut goes” is<br>&gt; not reasoning. And I’d definitely argue that it is more discoverable than<br>&gt; the ‘guard’ statement. The guard statement is stone-dead last at the end of<br>&gt; a massive “Control-Flow” page. I would guess that most first-time readers<br>&gt; skip those topics for later.<br>&gt;<br></p><p>You cannot say the same about `if`.<br></p><p><br>&gt;<br>&gt; The point here is that this is not a slippery slope. If `where` offered<br>&gt; independent utility, then some confusion alone probably wouldn&#39;t be enough<br>&gt; to justify removal, though it may justify some consideration for change.<br>&gt; However, as the extensive discussion has shown, there is nothing `where`<br>&gt; can do that something else can&#39;t do better. I know you like it for style,<br>&gt; but that&#39;s not sufficient grounds for keeping something confusing, IMO.<br>&gt;<br>&gt;<br>&gt; It’s more readable. It does that better.<br>&gt;<br></p><p>Earlier in this thread and others, I gave my reasoning where I disagree<br>with this assertion about being more readable.<br></p><p><br>&gt; The tests also seem to show that (bizarrely) it’s also slightly faster<br>&gt; than the alternatives.<br>&gt;<br></p><p>I don&#39;t believe there has been any demonstration that it&#39;s faster than<br>`guard` or `if`. I would be shocked if that were the case.<br></p><p><br>&gt;<br>&gt; Karl<br>&gt;<br>&gt; On 10 Jun 2016, at 08:25, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Fri, Jun 10, 2016 at 12:48 AM, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Jun 10, 2016, at 1:08 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Thu, Jun 9, 2016 at 9:45 PM, Dany St-Amant &lt;dsa.mls at icloud.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Le 9 juin 2016 à 14:55, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; There have been, in previous threads, several examples given where users<br>&gt;&gt;&gt; of Swift have found the behavior of `where` to be misleading and confusing.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Sorry Xiaodi, but beside you (on multiple instances), and recently<br>&gt;&gt;&gt; Erica, I have do not recall hearing that many voices saying that &#39;where&#39; is<br>&gt;&gt;&gt; confusing.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Shawn Erickson wrote this to the list just yesterday:<br>&gt;&gt;<br>&gt;&gt; &quot;I support your position on the use of where and while/when being<br>&gt;&gt; confusing in the loop statement. I (and I know others) have for example<br>&gt;&gt; used where in a loop statement mistakenly thinking it would terminate the<br>&gt;&gt; loop early but of course learned that it basically filters what causes the<br>&gt;&gt; loop body to be executed. After the fact that made sense to me but it<br>&gt;&gt; didn&#39;t click at first.&quot;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Couldn&#39;t we find examples of anyone being confused at any syntax?<br>&gt;&gt; Especially with an unfamiliar construct in a new language.<br>&gt;&gt;<br>&gt;&gt; If people find the new proposed syntax confusing, do we pull that too? At<br>&gt;&gt; what point do we stop?<br>&gt;&gt;<br>&gt;<br>&gt; That is why I favored (1) removal of the confusing syntax altogether; and<br>&gt; (2) this proposal, which involves aligning the confusing syntax with an<br>&gt; existing syntax. In short, no new syntax to get confused about.<br>&gt;<br>&gt; Yes, there&#39;s was maybe even less voices stating that it is not confusing,<br>&gt;&gt;&gt; but which group is more vocal?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Maybe I have been recently corrupt by Solid SQL queries:<br>&gt;&gt;&gt; select * from PEOPLE_TABLE where AGE_FIELD = 100<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Or by my (likely) broken English:<br>&gt;&gt;&gt; The places where I had the most fun<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; But, to me, where can only suggest some filtering (thus tag to a for ..<br>&gt;&gt;&gt;  in .., continue if not matching).<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I&#39;m glad that you find it very clear. I do as well. That does not mean it<br>&gt;&gt; is clear to everyone.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I still have yet to see widespread confusion of this. A few people<br>&gt;&gt; learning swift here or there, but once they learn the syntax...do they<br>&gt;&gt; still find it confusing?<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; I expect some concrete data on stuff like this...especially with proposed<br>&gt;&gt; syntax changes.<br>&gt;&gt;<br>&gt;&gt; Without concrete examples, what would stop one from coming in here and<br>&gt;&gt; waving their hands around to push *what they like* through?<br>&gt;&gt;<br>&gt;<br>&gt; Here&#39;s what&#39;s not handwavy:<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; Conclusion: the `where` clause is unprecedented, unintuitive, provides no<br>&gt; independent utility, is not more discoverable than alternatives, and is not<br>&gt; required for pedagogical reasons; however, it has been used incorrectly by<br>&gt; at least some users. Therefore, it is harmful and ought to be removed or<br>&gt; reformed.<br>&gt;<br>&gt; I know there&#39;s a linguist on the list, maybe he could comment on whether<br>&gt;&gt;&gt; or not using &#39;where&#39; as a filter is proper or an abomination.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I do not think that because something is confusing to some, or at first,<br>&gt;&gt;&gt; that it warrant removal from the language.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; It is a very bad sign if something is confusing at first, especially to a<br>&gt;&gt; significant proportion of users. It&#39;s true by definition that once you have<br>&gt;&gt; mastered something you are no longer confused by it.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Again, where is this significant proportion of users? I don&#39;t mean to<br>&gt;&gt; hound you on this, but I am genuinely curious where this is all coming from.<br>&gt;&gt;<br>&gt;<br>&gt; We were talking about the hypothetical something here and what the bar<br>&gt; should be for removal from the language. My response is that being<br>&gt; confusing at first sight *is* a legitimate consideration for removal from<br>&gt; the language. If something turns out to be a confusing way to describe a<br>&gt; straightforward concept, then the more widespread the confusion, the more<br>&gt; urgent its removal.<br>&gt;<br>&gt;<br>&gt;&gt; The burden of evidence is on the proposers of these ideas.<br>&gt;&gt;<br>&gt;&gt; As has been stated on this list, education is a valid and important<br>&gt;&gt; consideration for Swift. If something is confusing rather than difficult<br>&gt;&gt; (and the *concept* of filtering a list is not at all a difficult concept),<br>&gt;&gt; and if the same underlying concept can already be invoked in alternative<br>&gt;&gt; and equivalent ways that are not confusing, then it&#39;s a no-brainer that the<br>&gt;&gt; confusing thing is harmful to the language and should be removed on that<br>&gt;&gt; basis alone.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; What is clear to one person may be confusing to another. There is no<br>&gt;&gt; perfect syntax that will not make it confusing for some users.<br>&gt;&gt;<br>&gt;&gt; ----<br>&gt;&gt;<br>&gt;&gt; I really think it is important to come armed with more information with<br>&gt;&gt; these proposals. It&#39;s easy to say a significant proportion of people are<br>&gt;&gt; confused but it would make me much more comfortable to see this data to<br>&gt;&gt; back it up.<br>&gt;&gt;<br>&gt;&gt; What if we are spinning our wheels for no reason on a feature that *most*<br>&gt;&gt; don&#39;t find confusing? What if we make a bigger proportion of those who did<br>&gt;&gt; understand it more confused now?<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;&gt; Brandon<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; By analogy, Chinese and Japanese share difficult writing systems. Yet<br>&gt;&gt; many people use those languages daily without difficulty. Does that mean<br>&gt;&gt; there&#39;s not a problem? Far from it: in fact, you&#39;ll find that many<br>&gt;&gt; intelligent people have devoted their life&#39;s work to mitigating the issue.<br>&gt;&gt; Both Chinese and Japanese underwent a round of simplification in the 20th<br>&gt;&gt; century. Think about it: real languages used for daily life by a<br>&gt;&gt; significant fraction of the world&#39;s population were revamped for the<br>&gt;&gt; purpose of increasing accessibility to new learners.<br>&gt;&gt;<br>&gt;&gt; The by-value/by-reference is well define, but can be confusing at first.<br>&gt;&gt;&gt; Same goes for eager/lazy processing, or escaping vs non-escaping closure,<br>&gt;&gt;&gt; or even the difference between closure and function. But no one suggest to<br>&gt;&gt;&gt; remove them.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Value types vs. reference types is a concept (and a moderately advanced<br>&gt;&gt; one), eager vs. lazy processing is a concept (and a moderately advanced<br>&gt;&gt; one), and closures are a concept (and definitely an advanced one).<br>&gt;&gt;<br>&gt;&gt; Filtering a collection is a concept as well, and no one is suggesting its<br>&gt;&gt; removal. We are proposing to simplify and rationalize the syntax by which<br>&gt;&gt; filtering is invoked. If there were a way to dramatically simplify the<br>&gt;&gt; syntax surrounding value types and reference types so as to diminish<br>&gt;&gt; confusion, you can absolutely guarantee that there would be proposals to<br>&gt;&gt; change the syntax. If I could think of one tomorrow, you&#39;d see a thread<br>&gt;&gt; tomorrow about it. I don&#39;t think I&#39;m that smart though.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; Dany<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; In fact, the first of these proposals began with a question: how does<br>&gt;&gt;&gt; one write arbitrary Boolean assertions after a let binding? The answer (use<br>&gt;&gt;&gt; `where`) was found to be misleading and confusing.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I think you&#39;re being unfair to say that these proposals have no purpose<br>&gt;&gt;&gt; other than an academic consistency.<br>&gt;&gt;&gt; On Thu, Jun 9, 2016 at 13:29 Jon Shier via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         As time goes on, I’m feeling more and more that these<br>&gt;&gt;&gt;&gt; consistency proposals are sorely misguided. Frankly, unless the syntax is<br>&gt;&gt;&gt;&gt; confusing or misleading, even once the developer has learned the guiding<br>&gt;&gt;&gt;&gt; principles of Swift, consistency is not a good argument for change. This<br>&gt;&gt;&gt;&gt; proposal is the perfect example of this. No one will find the use of<br>&gt;&gt;&gt;&gt; “where” in loops confusing, aside from those who will wonder why it was<br>&gt;&gt;&gt;&gt; removed from if statements. There is no misleading behavior or confusing<br>&gt;&gt;&gt;&gt; syntax here. This is just consistency for consistency’s sake. Once this<br>&gt;&gt;&gt;&gt; proposal is done, then another will be made to remove “where” from another<br>&gt;&gt;&gt;&gt; place in the language. Then another and another until it’s gone completely<br>&gt;&gt;&gt;&gt; and a very useful part of the language is removed in the name of<br>&gt;&gt;&gt;&gt; consistency. Which really just comes down to “where” isn’t used here, so it<br>&gt;&gt;&gt;&gt; can’t be used there anymore. It’s death by a thousand cuts.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Jon Shier<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt; On Jun 9, 2016, at 1:16 PM, Erica Sadun via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; On Jun 9, 2016, at 11:11 AM, Charlie Monroe &lt;<br>&gt;&gt;&gt;&gt; charlie at charliemonroe.net&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt;&gt; See my latest post - included results with -Ofast. But still, using<br>&gt;&gt;&gt;&gt; filter and lazy.filter is 10+% slower, which were the suggested<br>&gt;&gt;&gt;&gt; alternatives to `where`.<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; I need to correct this misapprehension.<br>&gt;&gt;&gt;&gt; &gt; My suggested alternative to where was and remains `guard`.<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; -- E<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/120f3aa2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June 10, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; The thought here is along the lines of what Chris said, quoted above, and repeated here: &quot;The extended C family of language [...] is an extremely popular and widely used set[;] programmers move around and work in different languages, and [aligning to expectations arising from other C family languages] allows a non-expert in the language to understand what is going on.&quot; By contrast, the `where` clause violates that expectation and I do not see &quot;overwhelmingly large advantages&quot; for doing so.<br></p><p>I think you might be slightly misunderstanding Chris&#39;s point here. In the thread you quoted, somebody suggested fundamentally changing the very structure of the syntax—the way blocks are marked out—to something completely different from C. Chris said that such a huge deviation from the C family would need &quot;overwhelmingly large advantages&quot; before they would accept it.<br></p><p>This is not the same situation. It is true that there&#39;s no similar feature in C—mainly because C&#39;s loose typing allows you to use &amp;&amp; instead—but the `where` clause is a mere augmentation of C practice, not a complete break from it. It does not need to pass nearly so stringent a test.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 10, 2016 at 01:00:00pm</p></header><div class="content"><p>On Fri, Jun 10, 2016 at 12:51 PM, Brent Royal-Gordon &lt;brent at architechies.com<br>&gt; wrote:<br></p><p>&gt; &gt; The thought here is along the lines of what Chris said, quoted above,<br>&gt; and repeated here: &quot;The extended C family of language [...] is an extremely<br>&gt; popular and widely used set[;] programmers move around and work in<br>&gt; different languages, and [aligning to expectations arising from other C<br>&gt; family languages] allows a non-expert in the language to understand what is<br>&gt; going on.&quot; By contrast, the `where` clause violates that expectation and I<br>&gt; do not see &quot;overwhelmingly large advantages&quot; for doing so.<br>&gt;<br>&gt; I think you might be slightly misunderstanding Chris&#39;s point here. In the<br>&gt; thread you quoted, somebody suggested fundamentally changing the very<br>&gt; structure of the syntax—the way blocks are marked out—to something<br>&gt; completely different from C. Chris said that such a huge deviation from the<br>&gt; C family would need &quot;overwhelmingly large advantages&quot; before they would<br>&gt; accept it.<br>&gt;<br>&gt; This is not the same situation. It is true that there&#39;s no similar feature<br>&gt; in C—mainly because C&#39;s loose typing allows you to use &amp;&amp; instead—but the<br>&gt; `where` clause is a mere augmentation of C practice, not a complete break<br>&gt; from it. It does not need to pass nearly so stringent a test.<br>&gt;<br></p><p>Agreed. The test here probably shouldn&#39;t be nearly so stringent. But as a<br>component of grammar (vs. stdlib API), and since it touches looping (vs. a<br>more advanced concept such as closures), I&#39;d argue that the bar is still<br>somewhat more elevated than other language features debated here.<br></p><p><br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/2a14316d/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 10, 2016 at 08:00:00pm</p></header><div class="content"><p>I humbly suggest that some people who are afraid of seing it go might want to lookup LINQ (c#) to get a sense of could be done in the future if/when the idea of a WHERE clause gets revisited. With the current clause nothing more could have happened. Sometimes a step back is required in order to move forward again...<br>Regards<br>(From mobile)<br></p><p>On Jun 10, 2016, at 7:51 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; The thought here is along the lines of what Chris said, quoted above, and repeated here: &quot;The extended C family of language [...] is an extremely popular and widely used set[;] programmers move around and work in different languages, and [aligning to expectations arising from other C family languages] allows a non-expert in the language to understand what is going on.&quot; By contrast, the `where` clause violates that expectation and I do not see &quot;overwhelmingly large advantages&quot; for doing so.<br>&gt; <br>&gt; I think you might be slightly misunderstanding Chris&#39;s point here. In the thread you quoted, somebody suggested fundamentally changing the very structure of the syntax—the way blocks are marked out—to something completely different from C. Chris said that such a huge deviation from the C family would need &quot;overwhelmingly large advantages&quot; before they would accept it.<br>&gt; <br>&gt; This is not the same situation. It is true that there&#39;s no similar feature in C—mainly because C&#39;s loose typing allows you to use &amp;&amp; instead—but the `where` clause is a mere augmentation of C practice, not a complete break from it. It does not need to pass nearly so stringent a test.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 10, 2016 at 01:00:00pm</p></header><div class="content"><p>On Fri, Jun 10, 2016 at 1:45 PM, L. Mihalkovic &lt;laurent.mihalkovic at gmail.com<br>&gt; wrote:<br></p><p>&gt; I humbly suggest that some people who are afraid of seing it go might want<br>&gt; to lookup LINQ (c#) to get a sense of could be done in the future if/when<br>&gt; the idea of a WHERE clause gets revisited. With the current clause nothing<br>&gt; more could have happened. Sometimes a step back is required in order to<br>&gt; move forward again...<br>&gt; Regards<br>&gt; (From mobile)<br>&gt;<br>&gt;<br>That would be a powerful gain indeed. My understanding based on the core<br>team&#39;s comments was that `where` was introduced in the hopes of supporting<br>some pattern matching that was abandoned. So I can only imagine what could<br>be possible if a LINQ-like feature were to be brought to bear in the<br>future. It&#39;d be amazing.<br></p><p><br>&gt; On Jun 10, 2016, at 7:51 PM, Brent Royal-Gordon via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt;&gt; The thought here is along the lines of what Chris said, quoted above,<br>&gt; and repeated here: &quot;The extended C family of language [...] is an extremely<br>&gt; popular and widely used set[;] programmers move around and work in<br>&gt; different languages, and [aligning to expectations arising from other C<br>&gt; family languages] allows a non-expert in the language to understand what is<br>&gt; going on.&quot; By contrast, the `where` clause violates that expectation and I<br>&gt; do not see &quot;overwhelmingly large advantages&quot; for doing so.<br>&gt; &gt;<br>&gt; &gt; I think you might be slightly misunderstanding Chris&#39;s point here. In<br>&gt; the thread you quoted, somebody suggested fundamentally changing the very<br>&gt; structure of the syntax—the way blocks are marked out—to something<br>&gt; completely different from C. Chris said that such a huge deviation from the<br>&gt; C family would need &quot;overwhelmingly large advantages&quot; before they would<br>&gt; accept it.<br>&gt; &gt;<br>&gt; &gt; This is not the same situation. It is true that there&#39;s no similar<br>&gt; feature in C—mainly because C&#39;s loose typing allows you to use &amp;&amp;<br>&gt; instead—but the `where` clause is a mere augmentation of C practice, not a<br>&gt; complete break from it. It does not need to pass nearly so stringent a test.<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Brent Royal-Gordon<br>&gt; &gt; Architechies<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/5f1512af/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>June 11, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; Am 10.06.2016 um 18:28 schrieb Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt;&gt; On Fri, Jun 10, 2016 at 6:10 AM, Karl &lt;razielim at gmail.com&gt; wrote:<br>&gt;&gt; -1<br>&gt;&gt; <br>&gt;&gt;&gt; * Swift is explicitly a C-family language. In most or all other C-family languages, for loop statements allow specification of conditions for exiting the loop but not for filtering. Therefore, Swift&#39;s use of `where` is unprecedented and needs to be learned anew by every user of Swift.<br>&gt;&gt; <br>&gt;&gt; When was this decided? I distinctly remember some bloke under Craig Federighi’s hair saying that it was time to “move beyond” C and essentially ditch legacy conventions which no longer make sense.<br>&gt; <br>&gt; I think you misunderstood my argument here. I don&#39;t mean that we should yoke ourselves to C conventions, and we should absolutely ditch C convention when it doesn&#39;t make sense. The big-picture argument here is that `where` doesn&#39;t pass the bar of correcting a C convention that no longer makes sense.<br>&gt; <br>&gt; FWIW, on the topic of syntax choices, here is what Chris Lattner had to say on this list:<br>&gt; <br>&gt;&gt; Kevin got it exactly right, but I’d expand that last bit a bit to:<br>&gt;&gt; “… picking the one that is most familiar to programmers in the extended C family is a good idea.[&quot;]<br>&gt;&gt; The extended C family of language (which includes C, C++, ObjC, but also C#, Java, Javascript, and more) is<br>&gt;&gt; an extremely popular and widely used set of languages that have a lot of surface-level similarity. I<br>&gt;&gt; don’t claim to know the design rationale of all of these languages, but I surmise that this is not an<br>&gt;&gt; accident: programmers move around and work in different languages, and this allows a non-expert in the<br>&gt;&gt; language to understand what is going on. While there are things about C that are really unfortunate IMO<br>&gt;&gt; (e.g. the declarator/declaration specifier part of the grammar) there is a lot of goodness in the basic<br>&gt;&gt; operator set, focus on dot syntax, and more.<br>&gt;&gt; I do agree that there are some benefits to ditching braces and relying on indentation instead, but there are<br>&gt;&gt; also downsides. Deviating from the C family in this respect would have to provide *overwhelmingly* large <br>&gt;&gt; advantages for us to take such a plunge, and they simply don’t exist.<br>&gt;  <br>&gt;&gt; As I understand it, Swift is a new language with new conventions. It is desirable to align as many of those as possible with existing conventions so as to be easily learned, but if you limit Swift to other languages conventions you deny it any identity. Did Python ask anybody’s opinion before dropping curly-braces? Did people learn whatever Perl is supposed to be? Look at C’s hieroglyphic for loops! <br>&gt; <br>&gt; I don&#39;t think we disagree here.<br>&gt;  <br>&gt;&gt; <br>&gt;&gt; Realistically, “for … in … while” is not going to cause incredible confusion. Removing it would cause a lot of frustration. You can’t on the one hand say our users are comfortable with the axioms of C’s hieroglyphic loops, and on the other hand say “for x in y while&quot; is confusing.<br>&gt;&gt; <br>&gt;&gt;&gt; Again, as I said, once you&#39;ve mastered something, by definition you find it not confusing. Why should we doom x% of new users to writing a loop incorrectly at least once when we don&#39;t have to?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Ah, but if you’re not “doomed” to failing once, how will you ever master anything? Nobody knew how to write a C for-loop until someone showed them (and even then…). Nobody is going to just open a REPL and start writing code, with zero prior understanding of what Swift syntax looks like.<br>&gt; <br>&gt; The thought here is along the lines of what Chris said, quoted above, and repeated here: &quot;The extended C family of language [...] is an extremely popular and widely used set[;] programmers move around and work in different languages, and [aligning to expectations arising from other C family languages] allows a non-expert in the language to understand what is going on.&quot; By contrast, the `where` clause violates that expectation and I do not see &quot;overwhelmingly large advantages&quot; for doing so.<br></p><p>What about C#&#39;s `where` then? As C# is a member of the C family languages `where` is not violating expectations!<br></p><p>-Thorsten <br></p><p><br>&gt;  <br>&gt;&gt; <br>&gt;&gt;&gt; * The word &quot;where&quot; does not consistently imply `break` or `continue`. In current Swift, `where` implies `break` in the context of a `while` loop and `continue` in the context of a `for` loop. Some users intuitively guess the correct meaning in each context, while others guess the wrong meaning. Therefore, the only way to learn for sure what `where` means in any context is to read the rulebook. That, by definition, means that this is unintuitive.<br>&gt;&gt; <br>&gt;&gt; I didn’t even know while loops supported “where”. I can’t even imagine what that would look like, or how I would reason about one if I saw one. I Googled around a little bit and couldn’t find any examples. If they exist, sure, go ahead, get rid of them. Nobody will miss them.<br>&gt; <br>&gt; Actually, we had a *huge* chain where there were definitely people who said they would miss them, even though as you said it appears scarcely used and not very well known. The pernicious problem with it was that it forced even unrelated boolean assertions to be chained with `where`, as in:<br>&gt; <br>&gt; ```<br>&gt; while let x = iterator.next() where y &lt; z { ... }<br>&gt; ```<br>&gt;  <br>&gt;&gt; It definitely makes sense on ‘for’, though. Lots and lots of people will miss that; it’s a pretty well-known feature.<br>&gt; <br>&gt; (See Erica&#39;s statistics below.) <br>&gt; <br>&gt;&gt; Also, after everything you said, it’s still not unintuitive. That is not how languages work at all. Languages spoken by human beings are always ambiguous to some extent, and we use context to determine which meaning is correct:<br>&gt;&gt; <br>&gt;&gt; (Quote from https://research.googleblog.com/2016/05/announcing-syntaxnet-worlds-most.html)<br>&gt;&gt;&gt; One of the main problems that makes parsing so challenging is that human languages show remarkable levels of ambiguity. It is not uncommon for moderate length sentences - say 20 or 30 words in length - to have hundreds, thousands, or even tens of thousands of possible syntactic structures. A natural language parser must somehow search through all of these alternatives, and find the most plausible structure given the context. As a very simple example, the sentence &quot;Alice drove down the street in her car&quot; has at least two possible dependency parses:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The first corresponds to the (correct) interpretation where Alice is driving in her car; the second corresponds to the (absurd, but possible) interpretation where the street is located in her car. The ambiguity arises because the preposition “in&quot; can either modify drove or street; this example is an instance of what is called prepositional phrase attachment ambiguity. <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Even algebra is not completely unambiguous - you need to use BODMAS rules to disambiguate potential meanings.<br>&gt;&gt; It’s this context which I think you’re missing when zooming in at the word “where”:<br>&gt;&gt; <br>&gt;&gt; - The context that this is a variation of a ‘for x in y’ loop. We know that it loops through every item in ‘y&#39; and assigns it ‘x’. It is literally Section 2 of the &#39;Swift Tour&#39; - you learn how to assign a variable, and then you learn about the “for x in y” loop. Everybody should recognise it.<br>&gt;&gt; - The context that ‘x’ is the subject, so ‘where’ is clearly a condition for x to fulfill<br>&gt;&gt; - The context that ‘where’ occurs after ‘in’, so it follows the order in which its written: ‘for every x in y, where such-and-such is true, do …”<br>&gt;&gt; - The “for x in y” loop is a data-driven loop. It doesn’t even have a loop index. It is not like a C for loop and you shouldn’t expect to reason about it that way.<br>&gt;&gt; <br>&gt;&gt;&gt; * There are other ways to break from a loop or continue to the next iteration without performance penalty. Nearly all of these serve more general purposes than a `where` clause. Some of these (such as `if` or `guard`) would already be familiar to a new user before they encounter loops, assuming a typical order for learning a programming language. Many of these (such as filtering methods on collections, or simply `if`) would be familiar to a user of another C-family language. Therefore, the `where` clause provides no independent utility, is not more discoverable than its alternatives, and is not required for progressive disclosure of an important facility to a learner (i.e. a simplified syntax for those who may not be ready for the advanced concepts needed to use a more fully-featured alternative).<br>&gt;&gt; <br>&gt;&gt; You say the points in favour of removal are not handwavey, but I’m still not convinced. “There are other ways to go to where this shortcut goes” is not reasoning. And I’d definitely argue that it is more discoverable than the ‘guard’ statement. The guard statement is stone-dead last at the end of a massive “Control-Flow” page. I would guess that most first-time readers skip those topics for later.<br>&gt; <br>&gt; You cannot say the same about `if`.<br>&gt;  <br>&gt;&gt; <br>&gt;&gt;&gt; The point here is that this is not a slippery slope. If `where` offered independent utility, then some confusion alone probably wouldn&#39;t be enough to justify removal, though it may justify some consideration for change. However, as the extensive discussion has shown, there is nothing `where` can do that something else can&#39;t do better. I know you like it for style, but that&#39;s not sufficient grounds for keeping something confusing, IMO.<br>&gt;&gt; <br>&gt;&gt; It’s more readable. It does that better.<br>&gt; <br>&gt; Earlier in this thread and others, I gave my reasoning where I disagree with this assertion about being more readable.<br>&gt;  <br>&gt;&gt; The tests also seem to show that (bizarrely) it’s also slightly faster than the alternatives.<br>&gt; <br>&gt; I don&#39;t believe there has been any demonstration that it&#39;s faster than `guard` or `if`. I would be shocked if that were the case.<br>&gt;  <br>&gt;&gt; <br>&gt;&gt; Karl<br>&gt;&gt; <br>&gt;&gt;&gt; On 10 Jun 2016, at 08:25, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 12:48 AM, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 10, 2016, at 1:08 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Thu, Jun 9, 2016 at 9:45 PM, Dany St-Amant &lt;dsa.mls at icloud.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Le 9 juin 2016 à 14:55, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; There have been, in previous threads, several examples given where users of Swift have found the behavior of `where` to be misleading and confusing.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Sorry Xiaodi, but beside you (on multiple instances), and recently Erica, I have do not recall hearing that many voices saying that &#39;where&#39; is confusing.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Shawn Erickson wrote this to the list just yesterday:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; &quot;I support your position on the use of where and while/when being confusing in the loop statement. I (and I know others) have for example used where in a loop statement mistakenly thinking it would terminate the loop early but of course learned that it basically filters what causes the loop body to be executed. After the fact that made sense to me but it didn&#39;t click at first.&quot;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Couldn&#39;t we find examples of anyone being confused at any syntax? Especially with an unfamiliar construct in a new language. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If people find the new proposed syntax confusing, do we pull that too? At what point do we stop?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That is why I favored (1) removal of the confusing syntax altogether; and (2) this proposal, which involves aligning the confusing syntax with an existing syntax. In short, no new syntax to get confused about.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Yes, there&#39;s was maybe even less voices stating that it is not confusing, but which group is more vocal?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Maybe I have been recently corrupt by Solid SQL queries:<br>&gt;&gt;&gt;&gt;&gt;&gt; select * from PEOPLE_TABLE where AGE_FIELD = 100<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Or by my (likely) broken English:<br>&gt;&gt;&gt;&gt;&gt;&gt; The places where I had the most fun<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; But, to me, where can only suggest some filtering (thus tag to a for ..  in .., continue if not matching). <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I&#39;m glad that you find it very clear. I do as well. That does not mean it is clear to everyone.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I still have yet to see widespread confusion of this. A few people learning swift here or there, but once they learn the syntax...do they still find it confusing?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I expect some concrete data on stuff like this...especially with proposed syntax changes. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Without concrete examples, what would stop one from coming in here and waving their hands around to push *what they like* through?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here&#39;s what&#39;s not handwavy:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Conclusion: the `where` clause is unprecedented, unintuitive, provides no independent utility, is not more discoverable than alternatives, and is not required for pedagogical reasons; however, it has been used incorrectly by at least some users. Therefore, it is harmful and ought to be removed or reformed.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I know there&#39;s a linguist on the list, maybe he could comment on whether or not using &#39;where&#39; as a filter is proper or an abomination.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I do not think that because something is confusing to some, or at first, that it warrant removal from the language.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; It is a very bad sign if something is confusing at first, especially to a significant proportion of users. It&#39;s true by definition that once you have mastered something you are no longer confused by it.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Again, where is this significant proportion of users? I don&#39;t mean to hound you on this, but I am genuinely curious where this is all coming from.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We were talking about the hypothetical something here and what the bar should be for removal from the language. My response is that being confusing at first sight *is* a legitimate consideration for removal from the language. If something turns out to be a confusing way to describe a straightforward concept, then the more widespread the confusion, the more urgent its removal.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; The burden of evidence is on the proposers of these ideas. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; As has been stated on this list, education is a valid and important consideration for Swift. If something is confusing rather than difficult (and the *concept* of filtering a list is not at all a difficult concept), and if the same underlying concept can already be invoked in alternative and equivalent ways that are not confusing, then it&#39;s a no-brainer that the confusing thing is harmful to the language and should be removed on that basis alone.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What is clear to one person may be confusing to another. There is no perfect syntax that will not make it confusing for some users. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ----<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I really think it is important to come armed with more information with these proposals. It&#39;s easy to say a significant proportion of people are confused but it would make me much more comfortable to see this data to back it up. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What if we are spinning our wheels for no reason on a feature that *most* don&#39;t find confusing? What if we make a bigger proportion of those who did understand it more confused now?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; Brandon <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; By analogy, Chinese and Japanese share difficult writing systems. Yet many people use those languages daily without difficulty. Does that mean there&#39;s not a problem? Far from it: in fact, you&#39;ll find that many intelligent people have devoted their life&#39;s work to mitigating the issue. Both Chinese and Japanese underwent a round of simplification in the 20th century. Think about it: real languages used for daily life by a significant fraction of the world&#39;s population were revamped for the purpose of increasing accessibility to new learners.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The by-value/by-reference is well define, but can be confusing at first. Same goes for eager/lazy processing, or escaping vs non-escaping closure, or even the difference between closure and function. But no one suggest to remove them.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Value types vs. reference types is a concept (and a moderately advanced one), eager vs. lazy processing is a concept (and a moderately advanced one), and closures are a concept (and definitely an advanced one).<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Filtering a collection is a concept as well, and no one is suggesting its removal. We are proposing to simplify and rationalize the syntax by which filtering is invoked. If there were a way to dramatically simplify the syntax surrounding value types and reference types so as to diminish confusion, you can absolutely guarantee that there would be proposals to change the syntax. If I could think of one tomorrow, you&#39;d see a thread tomorrow about it. I don&#39;t think I&#39;m that smart though.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Dany<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; In fact, the first of these proposals began with a question: how does one write arbitrary Boolean assertions after a let binding? The answer (use `where`) was found to be misleading and confusing.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think you&#39;re being unfair to say that these proposals have no purpose other than an academic consistency.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Thu, Jun 9, 2016 at 13:29 Jon Shier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         As time goes on, I’m feeling more and more that these consistency proposals are sorely misguided. Frankly, unless the syntax is confusing or misleading, even once the developer has learned the guiding principles of Swift, consistency is not a good argument for change. This proposal is the perfect example of this. No one will find the use of “where” in loops confusing, aside from those who will wonder why it was removed from if statements. There is no misleading behavior or confusing syntax here. This is just consistency for consistency’s sake. Once this proposal is done, then another will be made to remove “where” from another place in the language. Then another and another until it’s gone completely and a very useful part of the language is removed in the name of consistency. Which really just comes down to “where” isn’t used here, so it can’t be used there anymore. It’s death by a thousand cuts.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Jon Shier<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; On Jun 9, 2016, at 1:16 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; On Jun 9, 2016, at 11:11 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; See my latest post - included results with -Ofast. But still, using filter and lazy.filter is 10+% slower, which were the suggested alternatives to `where`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; I need to correct this misapprehension.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; My suggested alternative to where was and remains `guard`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; -- E<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160611/4d678b2b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 11, 2016 at 02:00:00pm</p></header><div class="content"><p>On Sat, Jun 11, 2016 at 2:53 PM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br></p><p>&gt;<br>&gt;<br>&gt; Am 10.06.2016 um 18:28 schrieb Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt;:<br>&gt;<br>&gt; On Fri, Jun 10, 2016 at 6:10 AM, Karl &lt;razielim at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; -1<br>&gt;&gt;<br>&gt;&gt; * Swift is explicitly a C-family language. In most or all other C-family<br>&gt;&gt; languages, for loop statements allow specification of conditions for<br>&gt;&gt; exiting the loop but not for filtering. Therefore, Swift&#39;s use of `where`<br>&gt;&gt; is unprecedented and needs to be learned anew by every user of Swift.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; When was this decided? I distinctly remember some bloke under Craig<br>&gt;&gt; Federighi’s hair saying that it was time to “move beyond” C and essentially<br>&gt;&gt; ditch legacy conventions which no longer make sense.<br>&gt;&gt;<br>&gt;<br>&gt; I think you misunderstood my argument here. I don&#39;t mean that we should<br>&gt; yoke ourselves to C conventions, and we should absolutely ditch C<br>&gt; convention when it doesn&#39;t make sense. The big-picture argument here is<br>&gt; that `where` doesn&#39;t pass the bar of correcting a C convention that no<br>&gt; longer makes sense.<br>&gt;<br>&gt; FWIW, on the topic of syntax choices, here is what Chris Lattner had to<br>&gt; say on this list:<br>&gt;<br>&gt; Kevin got it exa*c*tly right, but I’d expand that last bit a bit to:<br>&gt;&gt; “… pi*c*king the one that is most familiar to programmers in the<br>&gt;&gt; extended *C* *family* is a good idea.[&quot;]<br>&gt;&gt; The extended *C* *family* of language (whi*c*h in*c*ludes *C*, *C*++, Obj<br>&gt;&gt; *C*, but also *C*#, Java, Javas*c*ript, and more) is<br>&gt;&gt; an extremely popular and widely used set of languages that have a lot of<br>&gt;&gt; surfa*c*e-level similarity. I<br>&gt;&gt; don’t *c*laim to know the design rationale of all of these languages,<br>&gt;&gt; but I surmise that this is not an<br>&gt;&gt; a*c**c*ident: programmers move around and work in different languages,<br>&gt;&gt; and this allows a non-expert in the<br>&gt;&gt; language to understand what is going on. While there are things about *C*<br>&gt;&gt; that are really unfortunate IMO<br>&gt;&gt; (e.g. the de*c*larator/de*c*laration spe*c*ifier part of the grammar)<br>&gt;&gt; there is a lot of goodness in the basi<br>&gt;&gt; *c*operator set, fo*c*us on dot syntax, and more.<br>&gt;&gt; I do agree that there are some benefits to dit*c*hing bra*c*es and<br>&gt;&gt; relying on indentation instead, but there are<br>&gt;&gt; also downsides. Deviating from the *C* *family* in this respe*c*t would<br>&gt;&gt; have to provide **overwhelmingly** large<br>&gt;&gt; advantages for us to take su*c*h a plunge, and they simply don’t exist.<br>&gt;<br>&gt;<br>&gt;<br>&gt;&gt; As I understand it, Swift is a new language with new conventions. It is<br>&gt;&gt; desirable to align as many of those as possible with existing conventions<br>&gt;&gt; so as to be easily learned, but if you limit Swift to other languages<br>&gt;&gt; conventions you deny it any identity. Did Python ask anybody’s opinion<br>&gt;&gt; before dropping curly-braces? Did people learn whatever Perl is supposed to<br>&gt;&gt; be? Look at C’s hieroglyphic for loops!<br>&gt;&gt;<br>&gt;<br>&gt; I don&#39;t think we disagree here.<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; Realistically, “for … in … while” is not going to cause incredible<br>&gt;&gt; confusion. Removing it would cause a lot of frustration. You can’t on the<br>&gt;&gt; one hand say our users are comfortable with the axioms of C’s hieroglyphic<br>&gt;&gt; loops, and on the other hand say “for x in y while&quot; is confusing.<br>&gt;&gt;<br>&gt;&gt; Again, as I said, once you&#39;ve mastered something, by definition you find<br>&gt;&gt; it not confusing. Why should we doom x% of new users to writing a loop<br>&gt;&gt; incorrectly at least once when we don&#39;t have to?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Ah, but if you’re not “doomed” to failing once, how will you ever master<br>&gt;&gt; anything? Nobody knew how to write a C for-loop until someone showed them<br>&gt;&gt; (and even then…). Nobody is going to just open a REPL and start writing<br>&gt;&gt; code, with zero prior understanding of what Swift syntax looks like.<br>&gt;&gt;<br>&gt;<br>&gt; The thought here is along the lines of what Chris said, quoted above, and<br>&gt; repeated here: &quot;The extended C family of language [...] is an extremely<br>&gt; popular and widely used set[;] programmers move around and work in<br>&gt; different languages, and [aligning to expectations arising from other C<br>&gt; family languages] allows a non-expert in the language to understand what is<br>&gt; going on.&quot; By contrast, the `where` clause violates that expectation and I<br>&gt; do not see &quot;overwhelmingly large advantages&quot; for doing so.<br>&gt;<br>&gt;<br>&gt; What about C#&#39;s `where` then? As C# is a member of the C family languages<br>&gt; `where` is not violating expectations!<br>&gt;<br></p><p>C# does not have a where keyword for its foreach loop, afaik.<br></p><p><br>&gt;<br>&gt; -Thorsten<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; * The word &quot;where&quot; does not consistently imply `break` or `continue`. In<br>&gt;&gt; current Swift, `where` implies `break` in the context of a `while` loop and<br>&gt;&gt; `continue` in the context of a `for` loop. Some users intuitively guess the<br>&gt;&gt; correct meaning in each context, while others guess the wrong meaning.<br>&gt;&gt; Therefore, the only way to learn for sure what `where` means in any context<br>&gt;&gt; is to read the rulebook. That, by definition, means that this is<br>&gt;&gt; unintuitive.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I didn’t even know while loops supported “where”. I can’t even imagine<br>&gt;&gt; what that would look like, or how I would reason about one if I saw one. I<br>&gt;&gt; Googled around a little bit and couldn’t find any examples. If they exist,<br>&gt;&gt; sure, go ahead, get rid of them. Nobody will miss them.<br>&gt;&gt;<br>&gt;<br>&gt; Actually, we had a *huge* chain where there were definitely people who<br>&gt; said they would miss them, even though as you said it appears scarcely used<br>&gt; and not very well known. The pernicious problem with it was that it forced<br>&gt; even unrelated boolean assertions to be chained with `where`, as in:<br>&gt;<br>&gt; ```<br>&gt; while let x = iterator.next() where y &lt; z { ... }<br>&gt; ```<br>&gt;<br>&gt;<br>&gt;&gt; It definitely makes sense on ‘for’, though. Lots and lots of people will<br>&gt;&gt; miss that; it’s a pretty well-known feature.<br>&gt;&gt;<br>&gt;<br>&gt; (See Erica&#39;s statistics below.)<br>&gt;<br>&gt; Also, after everything you said, it’s still not unintuitive. That is not<br>&gt;&gt; how languages work at all. Languages spoken by human beings are always<br>&gt;&gt; ambiguous to some extent, and we use context to determine which meaning is<br>&gt;&gt; correct:<br>&gt;&gt;<br>&gt;&gt; (Quote from<br>&gt;&gt; https://research.googleblog.com/2016/05/announcing-syntaxnet-worlds-most.html<br>&gt;&gt; )<br>&gt;&gt;<br>&gt;&gt; One of the main problems that makes parsing so challenging is that human<br>&gt;&gt; languages show remarkable levels of ambiguity. It is not uncommon for<br>&gt;&gt; moderate length sentences - say 20 or 30 words in length - to have<br>&gt;&gt; hundreds, thousands, or even tens of thousands of possible<br>&gt;&gt; syntactic structures. A natural language parser must somehow search through<br>&gt;&gt; all of these alternatives, and find the most plausible structure given<br>&gt;&gt; the context. As a very simple example, the sentence &quot;Alice drove down the<br>&gt;&gt; street in her car&quot; has at least two possible dependency parses:<br>&gt;&gt;<br>&gt;&gt; The first corresponds to the (correct) interpretation where Alice is<br>&gt;&gt; driving in her car; the second corresponds to the (absurd, but<br>&gt;&gt; possible) interpretation where the street is located in her car. The<br>&gt;&gt; ambiguity arises because the preposition “in&quot; can either<br>&gt;&gt; modify drove or street; this example is an instance of what is<br>&gt;&gt; called prepositional phrase attachment ambiguity.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Even algebra is not completely unambiguous - you need to use BODMAS rules<br>&gt;&gt; to disambiguate potential meanings.<br>&gt;&gt; It’s this context which I think you’re missing when zooming in at the<br>&gt;&gt; word “where”:<br>&gt;&gt;<br>&gt;&gt; - The context that this is a variation of a ‘for x in y’ loop. We know<br>&gt;&gt; that it loops through every item in ‘y&#39; and assigns it ‘x’. It is literally<br>&gt;&gt; Section 2 of the &#39;Swift Tour&#39; - you learn how to assign a variable, and<br>&gt;&gt; then you learn about the “for x in y” loop. Everybody should recognise it.<br>&gt;&gt; - The context that ‘x’ is the subject, so ‘where’ is clearly a condition<br>&gt;&gt; for x to fulfill<br>&gt;&gt; - The context that ‘where’ occurs after ‘in’, so it follows the order in<br>&gt;&gt; which its written: ‘for every x in y, where such-and-such is true, do …”<br>&gt;&gt; - The “for x in y” loop is a data-driven loop. It doesn’t even have a<br>&gt;&gt; loop index. It is not like a C for loop and you shouldn’t expect to reason<br>&gt;&gt; about it that way.<br>&gt;&gt;<br>&gt;&gt; * There are other ways to break from a loop or continue to the next<br>&gt;&gt; iteration without performance penalty. Nearly all of these serve more<br>&gt;&gt; general purposes than a `where` clause. Some of these (such as `if` or<br>&gt;&gt; `guard`) would already be familiar to a new user before they encounter<br>&gt;&gt; loops, assuming a typical order for learning a programming language. Many<br>&gt;&gt; of these (such as filtering methods on collections, or simply `if`) would<br>&gt;&gt; be familiar to a user of another C-family language. Therefore, the `where`<br>&gt;&gt; clause provides no independent utility, is not more discoverable than its<br>&gt;&gt; alternatives, and is not required for progressive disclosure of an<br>&gt;&gt; important facility to a learner (i.e. a simplified syntax for those who may<br>&gt;&gt; not be ready for the advanced concepts needed to use a more fully-featured<br>&gt;&gt; alternative).<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; You say the points in favour of removal are not handwavey, but I’m still<br>&gt;&gt; not convinced. “There are other ways to go to where this shortcut goes” is<br>&gt;&gt; not reasoning. And I’d definitely argue that it is more discoverable than<br>&gt;&gt; the ‘guard’ statement. The guard statement is stone-dead last at the end of<br>&gt;&gt; a massive “Control-Flow” page. I would guess that most first-time readers<br>&gt;&gt; skip those topics for later.<br>&gt;&gt;<br>&gt;<br>&gt; You cannot say the same about `if`.<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; The point here is that this is not a slippery slope. If `where` offered<br>&gt;&gt; independent utility, then some confusion alone probably wouldn&#39;t be enough<br>&gt;&gt; to justify removal, though it may justify some consideration for change.<br>&gt;&gt; However, as the extensive discussion has shown, there is nothing `where`<br>&gt;&gt; can do that something else can&#39;t do better. I know you like it for style,<br>&gt;&gt; but that&#39;s not sufficient grounds for keeping something confusing, IMO.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; It’s more readable. It does that better.<br>&gt;&gt;<br>&gt;<br>&gt; Earlier in this thread and others, I gave my reasoning where I disagree<br>&gt; with this assertion about being more readable.<br>&gt;<br>&gt;<br>&gt;&gt; The tests also seem to show that (bizarrely) it’s also slightly faster<br>&gt;&gt; than the alternatives.<br>&gt;&gt;<br>&gt;<br>&gt; I don&#39;t believe there has been any demonstration that it&#39;s faster than<br>&gt; `guard` or `if`. I would be shocked if that were the case.<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; Karl<br>&gt;&gt;<br>&gt;&gt; On 10 Jun 2016, at 08:25, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Fri, Jun 10, 2016 at 12:48 AM, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Jun 10, 2016, at 1:08 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Thu, Jun 9, 2016 at 9:45 PM, Dany St-Amant &lt;dsa.mls at icloud.com&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Le 9 juin 2016 à 14:55, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; There have been, in previous threads, several examples given where<br>&gt;&gt;&gt;&gt; users of Swift have found the behavior of `where` to be misleading and<br>&gt;&gt;&gt;&gt; confusing.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Sorry Xiaodi, but beside you (on multiple instances), and recently<br>&gt;&gt;&gt;&gt; Erica, I have do not recall hearing that many voices saying that &#39;where&#39; is<br>&gt;&gt;&gt;&gt; confusing.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Shawn Erickson wrote this to the list just yesterday:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; &quot;I support your position on the use of where and while/when being<br>&gt;&gt;&gt; confusing in the loop statement. I (and I know others) have for example<br>&gt;&gt;&gt; used where in a loop statement mistakenly thinking it would terminate the<br>&gt;&gt;&gt; loop early but of course learned that it basically filters what causes the<br>&gt;&gt;&gt; loop body to be executed. After the fact that made sense to me but it<br>&gt;&gt;&gt; didn&#39;t click at first.&quot;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Couldn&#39;t we find examples of anyone being confused at any syntax?<br>&gt;&gt;&gt; Especially with an unfamiliar construct in a new language.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; If people find the new proposed syntax confusing, do we pull that too?<br>&gt;&gt;&gt; At what point do we stop?<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; That is why I favored (1) removal of the confusing syntax altogether; and<br>&gt;&gt; (2) this proposal, which involves aligning the confusing syntax with an<br>&gt;&gt; existing syntax. In short, no new syntax to get confused about.<br>&gt;&gt;<br>&gt;&gt; Yes, there&#39;s was maybe even less voices stating that it is not confusing,<br>&gt;&gt;&gt;&gt; but which group is more vocal?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Maybe I have been recently corrupt by Solid SQL queries:<br>&gt;&gt;&gt;&gt; select * from PEOPLE_TABLE where AGE_FIELD = 100<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Or by my (likely) broken English:<br>&gt;&gt;&gt;&gt; The places where I had the most fun<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; But, to me, where can only suggest some filtering (thus tag to a for ..<br>&gt;&gt;&gt;&gt;  in .., continue if not matching).<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I&#39;m glad that you find it very clear. I do as well. That does not mean<br>&gt;&gt;&gt; it is clear to everyone.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I still have yet to see widespread confusion of this. A few people<br>&gt;&gt;&gt; learning swift here or there, but once they learn the syntax...do they<br>&gt;&gt;&gt; still find it confusing?<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I expect some concrete data on stuff like this...especially with proposed<br>&gt;&gt;&gt; syntax changes.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Without concrete examples, what would stop one from coming in here and<br>&gt;&gt;&gt; waving their hands around to push *what they like* through?<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Here&#39;s what&#39;s not handwavy:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Conclusion: the `where` clause is unprecedented, unintuitive, provides no<br>&gt;&gt; independent utility, is not more discoverable than alternatives, and is not<br>&gt;&gt; required for pedagogical reasons; however, it has been used incorrectly by<br>&gt;&gt; at least some users. Therefore, it is harmful and ought to be removed or<br>&gt;&gt; reformed.<br>&gt;&gt;<br>&gt;&gt; I know there&#39;s a linguist on the list, maybe he could comment on whether<br>&gt;&gt;&gt;&gt; or not using &#39;where&#39; as a filter is proper or an abomination.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I do not think that because something is confusing to some, or at<br>&gt;&gt;&gt;&gt; first, that it warrant removal from the language.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It is a very bad sign if something is confusing at first, especially to<br>&gt;&gt;&gt; a significant proportion of users. It&#39;s true by definition that once you<br>&gt;&gt;&gt; have mastered something you are no longer confused by it.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Again, where is this significant proportion of users? I don&#39;t mean to<br>&gt;&gt;&gt; hound you on this, but I am genuinely curious where this is all coming from.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; We were talking about the hypothetical something here and what the bar<br>&gt;&gt; should be for removal from the language. My response is that being<br>&gt;&gt; confusing at first sight *is* a legitimate consideration for removal from<br>&gt;&gt; the language. If something turns out to be a confusing way to describe a<br>&gt;&gt; straightforward concept, then the more widespread the confusion, the more<br>&gt;&gt; urgent its removal.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; The burden of evidence is on the proposers of these ideas.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; As has been stated on this list, education is a valid and important<br>&gt;&gt;&gt; consideration for Swift. If something is confusing rather than difficult<br>&gt;&gt;&gt; (and the *concept* of filtering a list is not at all a difficult concept),<br>&gt;&gt;&gt; and if the same underlying concept can already be invoked in alternative<br>&gt;&gt;&gt; and equivalent ways that are not confusing, then it&#39;s a no-brainer that the<br>&gt;&gt;&gt; confusing thing is harmful to the language and should be removed on that<br>&gt;&gt;&gt; basis alone.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; What is clear to one person may be confusing to another. There is no<br>&gt;&gt;&gt; perfect syntax that will not make it confusing for some users.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; ----<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I really think it is important to come armed with more information with<br>&gt;&gt;&gt; these proposals. It&#39;s easy to say a significant proportion of people are<br>&gt;&gt;&gt; confused but it would make me much more comfortable to see this data to<br>&gt;&gt;&gt; back it up.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; What if we are spinning our wheels for no reason on a feature that<br>&gt;&gt;&gt; *most* don&#39;t find confusing? What if we make a bigger proportion of those<br>&gt;&gt;&gt; who did understand it more confused now?<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; By analogy, Chinese and Japanese share difficult writing systems. Yet<br>&gt;&gt;&gt; many people use those languages daily without difficulty. Does that mean<br>&gt;&gt;&gt; there&#39;s not a problem? Far from it: in fact, you&#39;ll find that many<br>&gt;&gt;&gt; intelligent people have devoted their life&#39;s work to mitigating the issue.<br>&gt;&gt;&gt; Both Chinese and Japanese underwent a round of simplification in the 20th<br>&gt;&gt;&gt; century. Think about it: real languages used for daily life by a<br>&gt;&gt;&gt; significant fraction of the world&#39;s population were revamped for the<br>&gt;&gt;&gt; purpose of increasing accessibility to new learners.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The by-value/by-reference is well define, but can be confusing at first.<br>&gt;&gt;&gt;&gt; Same goes for eager/lazy processing, or escaping vs non-escaping closure,<br>&gt;&gt;&gt;&gt; or even the difference between closure and function. But no one suggest to<br>&gt;&gt;&gt;&gt; remove them.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Value types vs. reference types is a concept (and a moderately advanced<br>&gt;&gt;&gt; one), eager vs. lazy processing is a concept (and a moderately advanced<br>&gt;&gt;&gt; one), and closures are a concept (and definitely an advanced one).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Filtering a collection is a concept as well, and no one is suggesting<br>&gt;&gt;&gt; its removal. We are proposing to simplify and rationalize the syntax by<br>&gt;&gt;&gt; which filtering is invoked. If there were a way to dramatically simplify<br>&gt;&gt;&gt; the syntax surrounding value types and reference types so as to diminish<br>&gt;&gt;&gt; confusion, you can absolutely guarantee that there would be proposals to<br>&gt;&gt;&gt; change the syntax. If I could think of one tomorrow, you&#39;d see a thread<br>&gt;&gt;&gt; tomorrow about it. I don&#39;t think I&#39;m that smart though.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Dany<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; In fact, the first of these proposals began with a question: how does<br>&gt;&gt;&gt;&gt; one write arbitrary Boolean assertions after a let binding? The answer (use<br>&gt;&gt;&gt;&gt; `where`) was found to be misleading and confusing.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I think you&#39;re being unfair to say that these proposals have no purpose<br>&gt;&gt;&gt;&gt; other than an academic consistency.<br>&gt;&gt;&gt;&gt; On Thu, Jun 9, 2016 at 13:29 Jon Shier via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;         As time goes on, I’m feeling more and more that these<br>&gt;&gt;&gt;&gt;&gt; consistency proposals are sorely misguided. Frankly, unless the syntax is<br>&gt;&gt;&gt;&gt;&gt; confusing or misleading, even once the developer has learned the guiding<br>&gt;&gt;&gt;&gt;&gt; principles of Swift, consistency is not a good argument for change. This<br>&gt;&gt;&gt;&gt;&gt; proposal is the perfect example of this. No one will find the use of<br>&gt;&gt;&gt;&gt;&gt; “where” in loops confusing, aside from those who will wonder why it was<br>&gt;&gt;&gt;&gt;&gt; removed from if statements. There is no misleading behavior or confusing<br>&gt;&gt;&gt;&gt;&gt; syntax here. This is just consistency for consistency’s sake. Once this<br>&gt;&gt;&gt;&gt;&gt; proposal is done, then another will be made to remove “where” from another<br>&gt;&gt;&gt;&gt;&gt; place in the language. Then another and another until it’s gone completely<br>&gt;&gt;&gt;&gt;&gt; and a very useful part of the language is removed in the name of<br>&gt;&gt;&gt;&gt;&gt; consistency. Which really just comes down to “where” isn’t used here, so it<br>&gt;&gt;&gt;&gt;&gt; can’t be used there anymore. It’s death by a thousand cuts.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Jon Shier<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; On Jun 9, 2016, at 1:16 PM, Erica Sadun via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; On Jun 9, 2016, at 11:11 AM, Charlie Monroe &lt;<br>&gt;&gt;&gt;&gt;&gt; charlie at charliemonroe.net&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; See my latest post - included results with -Ofast. But still, using<br>&gt;&gt;&gt;&gt;&gt; filter and lazy.filter is 10+% slower, which were the suggested<br>&gt;&gt;&gt;&gt;&gt; alternatives to `where`.<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; I need to correct this misapprehension.<br>&gt;&gt;&gt;&gt;&gt; &gt; My suggested alternative to where was and remains `guard`.<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; -- E<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160611/7341646b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 11, 2016 at 10:00:00pm</p></header><div class="content"><p>Regards<br>(From mobile)<br></p><p>&gt; On Jun 11, 2016, at 9:59 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Sat, Jun 11, 2016 at 2:53 PM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; Am 10.06.2016 um 18:28 schrieb Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 6:10 AM, Karl &lt;razielim at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; -1<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * Swift is explicitly a C-family language. In most or all other C-family languages, for loop statements allow specification of conditions for exiting the loop but not for filtering. Therefore, Swift&#39;s use of `where` is unprecedented and needs to be learned anew by every user of Swift.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; When was this decided? I distinctly remember some bloke under Craig Federighi’s hair saying that it was time to “move beyond” C and essentially ditch legacy conventions which no longer make sense.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think you misunderstood my argument here. I don&#39;t mean that we should yoke ourselves to C conventions, and we should absolutely ditch C convention when it doesn&#39;t make sense. The big-picture argument here is that `where` doesn&#39;t pass the bar of correcting a C convention that no longer makes sense.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; FWIW, on the topic of syntax choices, here is what Chris Lattner had to say on this list:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Kevin got it exactly right, but I’d expand that last bit a bit to:<br>&gt;&gt;&gt;&gt; “… picking the one that is most familiar to programmers in the extended C family is a good idea.[&quot;]<br>&gt;&gt;&gt;&gt; The extended C family of language (which includes C, C++, ObjC, but also C#, Java, Javascript, and more) is<br>&gt;&gt;&gt;&gt; an extremely popular and widely used set of languages that have a lot of surface-level similarity. I<br>&gt;&gt;&gt;&gt; don’t claim to know the design rationale of all of these languages, but I surmise that this is not an<br>&gt;&gt;&gt;&gt; accident: programmers move around and work in different languages, and this allows a non-expert in the<br>&gt;&gt;&gt;&gt; language to understand what is going on. While there are things about C that are really unfortunate IMO<br>&gt;&gt;&gt;&gt; (e.g. the declarator/declaration specifier part of the grammar) there is a lot of goodness in the basic<br>&gt;&gt;&gt;&gt; operator set, focus on dot syntax, and more.<br>&gt;&gt;&gt;&gt; I do agree that there are some benefits to ditching braces and relying on indentation instead, but there are<br>&gt;&gt;&gt;&gt; also downsides. Deviating from the C family in this respect would have to provide *overwhelmingly* large <br>&gt;&gt;&gt;&gt; advantages for us to take such a plunge, and they simply don’t exist.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; As I understand it, Swift is a new language with new conventions. It is desirable to align as many of those as possible with existing conventions so as to be easily learned, but if you limit Swift to other languages conventions you deny it any identity. Did Python ask anybody’s opinion before dropping curly-braces? Did people learn whatever Perl is supposed to be? Look at C’s hieroglyphic for loops! <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t think we disagree here.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Realistically, “for … in … while” is not going to cause incredible confusion. Removing it would cause a lot of frustration. You can’t on the one hand say our users are comfortable with the axioms of C’s hieroglyphic loops, and on the other hand say “for x in y while&quot; is confusing.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Again, as I said, once you&#39;ve mastered something, by definition you find it not confusing. Why should we doom x% of new users to writing a loop incorrectly at least once when we don&#39;t have to?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Ah, but if you’re not “doomed” to failing once, how will you ever master anything? Nobody knew how to write a C for-loop until someone showed them (and even then…). Nobody is going to just open a REPL and start writing code, with zero prior understanding of what Swift syntax looks like.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The thought here is along the lines of what Chris said, quoted above, and repeated here: &quot;The extended C family of language [...] is an extremely popular and widely used set[;] programmers move around and work in different languages, and [aligning to expectations arising from other C family languages] allows a non-expert in the language to understand what is going on.&quot; By contrast, the `where` clause violates that expectation and I do not see &quot;overwhelmingly large advantages&quot; for doing so.<br>&gt;&gt; <br>&gt;&gt; What about C#&#39;s `where` then? As C# is a member of the C family languages `where` is not violating expectations!<br>&gt; <br>&gt; C# does not have a where keyword for its foreach loop, afaik.<br></p><p>--&gt; linq<br></p><p>&gt;  <br>&gt;&gt; <br>&gt;&gt; -Thorsten <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * The word &quot;where&quot; does not consistently imply `break` or `continue`. In current Swift, `where` implies `break` in the context of a `while` loop and `continue` in the context of a `for` loop. Some users intuitively guess the correct meaning in each context, while others guess the wrong meaning. Therefore, the only way to learn for sure what `where` means in any context is to read the rulebook. That, by definition, means that this is unintuitive.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I didn’t even know while loops supported “where”. I can’t even imagine what that would look like, or how I would reason about one if I saw one. I Googled around a little bit and couldn’t find any examples. If they exist, sure, go ahead, get rid of them. Nobody will miss them.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Actually, we had a *huge* chain where there were definitely people who said they would miss them, even though as you said it appears scarcely used and not very well known. The pernicious problem with it was that it forced even unrelated boolean assertions to be chained with `where`, as in:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; while let x = iterator.next() where y &lt; z { ... }<br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; It definitely makes sense on ‘for’, though. Lots and lots of people will miss that; it’s a pretty well-known feature.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (See Erica&#39;s statistics below.) <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Also, after everything you said, it’s still not unintuitive. That is not how languages work at all. Languages spoken by human beings are always ambiguous to some extent, and we use context to determine which meaning is correct:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; (Quote from https://research.googleblog.com/2016/05/announcing-syntaxnet-worlds-most.html)<br>&gt;&gt;&gt;&gt;&gt; One of the main problems that makes parsing so challenging is that human languages show remarkable levels of ambiguity. It is not uncommon for moderate length sentences - say 20 or 30 words in length - to have hundreds, thousands, or even tens of thousands of possible syntactic structures. A natural language parser must somehow search through all of these alternatives, and find the most plausible structure given the context. As a very simple example, the sentence &quot;Alice drove down the street in her car&quot; has at least two possible dependency parses:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The first corresponds to the (correct) interpretation where Alice is driving in her car; the second corresponds to the (absurd, but possible) interpretation where the street is located in her car. The ambiguity arises because the preposition “in&quot; can either modify drove or street; this example is an instance of what is called prepositional phrase attachment ambiguity. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Even algebra is not completely unambiguous - you need to use BODMAS rules to disambiguate potential meanings.<br>&gt;&gt;&gt;&gt; It’s this context which I think you’re missing when zooming in at the word “where”:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - The context that this is a variation of a ‘for x in y’ loop. We know that it loops through every item in ‘y&#39; and assigns it ‘x’. It is literally Section 2 of the &#39;Swift Tour&#39; - you learn how to assign a variable, and then you learn about the “for x in y” loop. Everybody should recognise it.<br>&gt;&gt;&gt;&gt; - The context that ‘x’ is the subject, so ‘where’ is clearly a condition for x to fulfill<br>&gt;&gt;&gt;&gt; - The context that ‘where’ occurs after ‘in’, so it follows the order in which its written: ‘for every x in y, where such-and-such is true, do …”<br>&gt;&gt;&gt;&gt; - The “for x in y” loop is a data-driven loop. It doesn’t even have a loop index. It is not like a C for loop and you shouldn’t expect to reason about it that way.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * There are other ways to break from a loop or continue to the next iteration without performance penalty. Nearly all of these serve more general purposes than a `where` clause. Some of these (such as `if` or `guard`) would already be familiar to a new user before they encounter loops, assuming a typical order for learning a programming language. Many of these (such as filtering methods on collections, or simply `if`) would be familiar to a user of another C-family language. Therefore, the `where` clause provides no independent utility, is not more discoverable than its alternatives, and is not required for progressive disclosure of an important facility to a learner (i.e. a simplified syntax for those who may not be ready for the advanced concepts needed to use a more fully-featured alternative).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; You say the points in favour of removal are not handwavey, but I’m still not convinced. “There are other ways to go to where this shortcut goes” is not reasoning. And I’d definitely argue that it is more discoverable than the ‘guard’ statement. The guard statement is stone-dead last at the end of a massive “Control-Flow” page. I would guess that most first-time readers skip those topics for later.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You cannot say the same about `if`.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The point here is that this is not a slippery slope. If `where` offered independent utility, then some confusion alone probably wouldn&#39;t be enough to justify removal, though it may justify some consideration for change. However, as the extensive discussion has shown, there is nothing `where` can do that something else can&#39;t do better. I know you like it for style, but that&#39;s not sufficient grounds for keeping something confusing, IMO.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It’s more readable. It does that better.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Earlier in this thread and others, I gave my reasoning where I disagree with this assertion about being more readable.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; The tests also seem to show that (bizarrely) it’s also slightly faster than the alternatives.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t believe there has been any demonstration that it&#39;s faster than `guard` or `if`. I would be shocked if that were the case.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Karl<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 10 Jun 2016, at 08:25, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 12:48 AM, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 10, 2016, at 1:08 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Thu, Jun 9, 2016 at 9:45 PM, Dany St-Amant &lt;dsa.mls at icloud.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Le 9 juin 2016 à 14:55, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; There have been, in previous threads, several examples given where users of Swift have found the behavior of `where` to be misleading and confusing.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sorry Xiaodi, but beside you (on multiple instances), and recently Erica, I have do not recall hearing that many voices saying that &#39;where&#39; is confusing.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Shawn Erickson wrote this to the list just yesterday:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;I support your position on the use of where and while/when being confusing in the loop statement. I (and I know others) have for example used where in a loop statement mistakenly thinking it would terminate the loop early but of course learned that it basically filters what causes the loop body to be executed. After the fact that made sense to me but it didn&#39;t click at first.&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Couldn&#39;t we find examples of anyone being confused at any syntax? Especially with an unfamiliar construct in a new language. <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; If people find the new proposed syntax confusing, do we pull that too? At what point do we stop?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; That is why I favored (1) removal of the confusing syntax altogether; and (2) this proposal, which involves aligning the confusing syntax with an existing syntax. In short, no new syntax to get confused about.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Yes, there&#39;s was maybe even less voices stating that it is not confusing, but which group is more vocal?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Maybe I have been recently corrupt by Solid SQL queries:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; select * from PEOPLE_TABLE where AGE_FIELD = 100<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Or by my (likely) broken English:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The places where I had the most fun<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; But, to me, where can only suggest some filtering (thus tag to a for ..  in .., continue if not matching). <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I&#39;m glad that you find it very clear. I do as well. That does not mean it is clear to everyone.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I still have yet to see widespread confusion of this. A few people learning swift here or there, but once they learn the syntax...do they still find it confusing?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I expect some concrete data on stuff like this...especially with proposed syntax changes. <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Without concrete examples, what would stop one from coming in here and waving their hands around to push *what they like* through?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Here&#39;s what&#39;s not handwavy:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Conclusion: the `where` clause is unprecedented, unintuitive, provides no independent utility, is not more discoverable than alternatives, and is not required for pedagogical reasons; however, it has been used incorrectly by at least some users. Therefore, it is harmful and ought to be removed or reformed.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I know there&#39;s a linguist on the list, maybe he could comment on whether or not using &#39;where&#39; as a filter is proper or an abomination.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I do not think that because something is confusing to some, or at first, that it warrant removal from the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; It is a very bad sign if something is confusing at first, especially to a significant proportion of users. It&#39;s true by definition that once you have mastered something you are no longer confused by it.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Again, where is this significant proportion of users? I don&#39;t mean to hound you on this, but I am genuinely curious where this is all coming from.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; We were talking about the hypothetical something here and what the bar should be for removal from the language. My response is that being confusing at first sight *is* a legitimate consideration for removal from the language. If something turns out to be a confusing way to describe a straightforward concept, then the more widespread the confusion, the more urgent its removal.<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; The burden of evidence is on the proposers of these ideas. <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; As has been stated on this list, education is a valid and important consideration for Swift. If something is confusing rather than difficult (and the *concept* of filtering a list is not at all a difficult concept), and if the same underlying concept can already be invoked in alternative and equivalent ways that are not confusing, then it&#39;s a no-brainer that the confusing thing is harmful to the language and should be removed on that basis alone.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; What is clear to one person may be confusing to another. There is no perfect syntax that will not make it confusing for some users. <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; ----<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I really think it is important to come armed with more information with these proposals. It&#39;s easy to say a significant proportion of people are confused but it would make me much more comfortable to see this data to back it up. <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; What if we are spinning our wheels for no reason on a feature that *most* don&#39;t find confusing? What if we make a bigger proportion of those who did understand it more confused now?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; Brandon <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; By analogy, Chinese and Japanese share difficult writing systems. Yet many people use those languages daily without difficulty. Does that mean there&#39;s not a problem? Far from it: in fact, you&#39;ll find that many intelligent people have devoted their life&#39;s work to mitigating the issue. Both Chinese and Japanese underwent a round of simplification in the 20th century. Think about it: real languages used for daily life by a significant fraction of the world&#39;s population were revamped for the purpose of increasing accessibility to new learners.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The by-value/by-reference is well define, but can be confusing at first. Same goes for eager/lazy processing, or escaping vs non-escaping closure, or even the difference between closure and function. But no one suggest to remove them.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Value types vs. reference types is a concept (and a moderately advanced one), eager vs. lazy processing is a concept (and a moderately advanced one), and closures are a concept (and definitely an advanced one).<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Filtering a collection is a concept as well, and no one is suggesting its removal. We are proposing to simplify and rationalize the syntax by which filtering is invoked. If there were a way to dramatically simplify the syntax surrounding value types and reference types so as to diminish confusion, you can absolutely guarantee that there would be proposals to change the syntax. If I could think of one tomorrow, you&#39;d see a thread tomorrow about it. I don&#39;t think I&#39;m that smart though.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dany<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; In fact, the first of these proposals began with a question: how does one write arbitrary Boolean assertions after a let binding? The answer (use `where`) was found to be misleading and confusing.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think you&#39;re being unfair to say that these proposals have no purpose other than an academic consistency.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Thu, Jun 9, 2016 at 13:29 Jon Shier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         As time goes on, I’m feeling more and more that these consistency proposals are sorely misguided. Frankly, unless the syntax is confusing or misleading, even once the developer has learned the guiding principles of Swift, consistency is not a good argument for change. This proposal is the perfect example of this. No one will find the use of “where” in loops confusing, aside from those who will wonder why it was removed from if statements. There is no misleading behavior or confusing syntax here. This is just consistency for consistency’s sake. Once this proposal is done, then another will be made to remove “where” from another place in the language. Then another and another until it’s gone completely and a very useful part of the language is removed in the name of consistency. Which really just comes down to “where” isn’t used here, so it can’t be used there anymore. It’s death by a thousand cuts.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Jon Shier<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; On Jun 9, 2016, at 1:16 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; On Jun 9, 2016, at 11:11 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; See my latest post - included results with -Ofast. But still, using filter and lazy.filter is 10+% slower, which were the suggested alternatives to `where`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; I need to correct this misapprehension.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; My suggested alternative to where was and remains `guard`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; -- E<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160611/73e51a2e/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>June 11, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; Am 11.06.2016 um 21:59 schrieb Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;:<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Sat, Jun 11, 2016 at 2:53 PM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; Am 10.06.2016 um 18:28 schrieb Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 6:10 AM, Karl &lt;razielim at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; -1<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * Swift is explicitly a C-family language. In most or all other C-family languages, for loop statements allow specification of conditions for exiting the loop but not for filtering. Therefore, Swift&#39;s use of `where` is unprecedented and needs to be learned anew by every user of Swift.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; When was this decided? I distinctly remember some bloke under Craig Federighi’s hair saying that it was time to “move beyond” C and essentially ditch legacy conventions which no longer make sense.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think you misunderstood my argument here. I don&#39;t mean that we should yoke ourselves to C conventions, and we should absolutely ditch C convention when it doesn&#39;t make sense. The big-picture argument here is that `where` doesn&#39;t pass the bar of correcting a C convention that no longer makes sense.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; FWIW, on the topic of syntax choices, here is what Chris Lattner had to say on this list:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Kevin got it exactly right, but I’d expand that last bit a bit to:<br>&gt;&gt;&gt;&gt; “… picking the one that is most familiar to programmers in the extended C family is a good idea.[&quot;]<br>&gt;&gt;&gt;&gt; The extended C family of language (which includes C, C++, ObjC, but also C#, Java, Javascript, and more) is<br>&gt;&gt;&gt;&gt; an extremely popular and widely used set of languages that have a lot of surface-level similarity. I<br>&gt;&gt;&gt;&gt; don’t claim to know the design rationale of all of these languages, but I surmise that this is not an<br>&gt;&gt;&gt;&gt; accident: programmers move around and work in different languages, and this allows a non-expert in the<br>&gt;&gt;&gt;&gt; language to understand what is going on. While there are things about C that are really unfortunate IMO<br>&gt;&gt;&gt;&gt; (e.g. the declarator/declaration specifier part of the grammar) there is a lot of goodness in the basic<br>&gt;&gt;&gt;&gt; operator set, focus on dot syntax, and more.<br>&gt;&gt;&gt;&gt; I do agree that there are some benefits to ditching braces and relying on indentation instead, but there are<br>&gt;&gt;&gt;&gt; also downsides. Deviating from the C family in this respect would have to provide *overwhelmingly* large <br>&gt;&gt;&gt;&gt; advantages for us to take such a plunge, and they simply don’t exist.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; As I understand it, Swift is a new language with new conventions. It is desirable to align as many of those as possible with existing conventions so as to be easily learned, but if you limit Swift to other languages conventions you deny it any identity. Did Python ask anybody’s opinion before dropping curly-braces? Did people learn whatever Perl is supposed to be? Look at C’s hieroglyphic for loops! <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t think we disagree here.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Realistically, “for … in … while” is not going to cause incredible confusion. Removing it would cause a lot of frustration. You can’t on the one hand say our users are comfortable with the axioms of C’s hieroglyphic loops, and on the other hand say “for x in y while&quot; is confusing.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Again, as I said, once you&#39;ve mastered something, by definition you find it not confusing. Why should we doom x% of new users to writing a loop incorrectly at least once when we don&#39;t have to?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Ah, but if you’re not “doomed” to failing once, how will you ever master anything? Nobody knew how to write a C for-loop until someone showed them (and even then…). Nobody is going to just open a REPL and start writing code, with zero prior understanding of what Swift syntax looks like.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The thought here is along the lines of what Chris said, quoted above, and repeated here: &quot;The extended C family of language [...] is an extremely popular and widely used set[;] programmers move around and work in different languages, and [aligning to expectations arising from other C family languages] allows a non-expert in the language to understand what is going on.&quot; By contrast, the `where` clause violates that expectation and I do not see &quot;overwhelmingly large advantages&quot; for doing so.<br>&gt;&gt; <br>&gt;&gt; What about C#&#39;s `where` then? As C# is a member of the C family languages `where` is not violating expectations!<br>&gt; <br>&gt; C# does not have a where keyword for its foreach loop, afaik.<br></p><p>`where` is an essential part of C#&#39;s LINQ feature, see https://msdn.microsoft.com/de-de/library/bb397906.aspx for example.<br></p><p>-Thorsten <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160611/b770d3ff/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 11, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On Jun 11, 2016, at 9:53 PM, Thorsten Seitz via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; Am 10.06.2016 um 18:28 schrieb Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; <br>&gt;&gt;&gt; On Fri, Jun 10, 2016 at 6:10 AM, Karl &lt;razielim at gmail.com&gt; wrote:<br>&gt;&gt;&gt; -1<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; * Swift is explicitly a C-family language. In most or all other C-family languages, for loop statements allow specification of conditions for exiting the loop but not for filtering. Therefore, Swift&#39;s use of `where` is unprecedented and needs to be learned anew by every user of Swift.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; When was this decided? I distinctly remember some bloke under Craig Federighi’s hair saying that it was time to “move beyond” C and essentially ditch legacy conventions which no longer make sense.<br>&gt;&gt; <br>&gt;&gt; I think you misunderstood my argument here. I don&#39;t mean that we should yoke ourselves to C conventions, and we should absolutely ditch C convention when it doesn&#39;t make sense. The big-picture argument here is that `where` doesn&#39;t pass the bar of correcting a C convention that no longer makes sense.<br>&gt;&gt; <br>&gt;&gt; FWIW, on the topic of syntax choices, here is what Chris Lattner had to say on this list:<br>&gt;&gt; <br>&gt;&gt;&gt; Kevin got it exactly right, but I’d expand that last bit a bit to:<br>&gt;&gt;&gt; “… picking the one that is most familiar to programmers in the extended C family is a good idea.[&quot;]<br>&gt;&gt;&gt; The extended C family of language (which includes C, C++, ObjC, but also C#, Java, Javascript, and more) is<br>&gt;&gt;&gt; an extremely popular and widely used set of languages that have a lot of surface-level similarity. I<br>&gt;&gt;&gt; don’t claim to know the design rationale of all of these languages, but I surmise that this is not an<br>&gt;&gt;&gt; accident: programmers move around and work in different languages, and this allows a non-expert in the<br>&gt;&gt;&gt; language to understand what is going on. While there are things about C that are really unfortunate IMO<br>&gt;&gt;&gt; (e.g. the declarator/declaration specifier part of the grammar) there is a lot of goodness in the basic<br>&gt;&gt;&gt; operator set, focus on dot syntax, and more.<br>&gt;&gt;&gt; I do agree that there are some benefits to ditching braces and relying on indentation instead, but there are<br>&gt;&gt;&gt; also downsides. Deviating from the C family in this respect would have to provide *overwhelmingly* large <br>&gt;&gt;&gt; advantages for us to take such a plunge, and they simply don’t exist.<br>&gt;&gt;  <br>&gt;&gt;&gt; As I understand it, Swift is a new language with new conventions. It is desirable to align as many of those as possible with existing conventions so as to be easily learned, but if you limit Swift to other languages conventions you deny it any identity. Did Python ask anybody’s opinion before dropping curly-braces? Did people learn whatever Perl is supposed to be? Look at C’s hieroglyphic for loops! <br>&gt;&gt; <br>&gt;&gt; I don&#39;t think we disagree here.<br>&gt;&gt;  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Realistically, “for … in … while” is not going to cause incredible confusion. Removing it would cause a lot of frustration. You can’t on the one hand say our users are comfortable with the axioms of C’s hieroglyphic loops, and on the other hand say “for x in y while&quot; is confusing.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Again, as I said, once you&#39;ve mastered something, by definition you find it not confusing. Why should we doom x% of new users to writing a loop incorrectly at least once when we don&#39;t have to?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Ah, but if you’re not “doomed” to failing once, how will you ever master anything? Nobody knew how to write a C for-loop until someone showed them (and even then…). Nobody is going to just open a REPL and start writing code, with zero prior understanding of what Swift syntax looks like.<br>&gt;&gt; <br>&gt;&gt; The thought here is along the lines of what Chris said, quoted above, and repeated here: &quot;The extended C family of language [...] is an extremely popular and widely used set[;] programmers move around and work in different languages, and [aligning to expectations arising from other C family languages] allows a non-expert in the language to understand what is going on.&quot; By contrast, the `where` clause violates that expectation and I do not see &quot;overwhelmingly large advantages&quot; for doing so.<br>&gt; <br>&gt; What about C#&#39;s `where` then? As C# is a member of the C family languages `where` is not violating expectations!<br></p><p>Where is not exactly a part of c# it belongs to linq<br></p><p><br>&gt; <br>&gt; -Thorsten <br>&gt; <br>&gt; <br>&gt;&gt;  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; * The word &quot;where&quot; does not consistently imply `break` or `continue`. In current Swift, `where` implies `break` in the context of a `while` loop and `continue` in the context of a `for` loop. Some users intuitively guess the correct meaning in each context, while others guess the wrong meaning. Therefore, the only way to learn for sure what `where` means in any context is to read the rulebook. That, by definition, means that this is unintuitive.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I didn’t even know while loops supported “where”. I can’t even imagine what that would look like, or how I would reason about one if I saw one. I Googled around a little bit and couldn’t find any examples. If they exist, sure, go ahead, get rid of them. Nobody will miss them.<br>&gt;&gt; <br>&gt;&gt; Actually, we had a *huge* chain where there were definitely people who said they would miss them, even though as you said it appears scarcely used and not very well known. The pernicious problem with it was that it forced even unrelated boolean assertions to be chained with `where`, as in:<br>&gt;&gt; <br>&gt;&gt; ```<br>&gt;&gt; while let x = iterator.next() where y &lt; z { ... }<br>&gt;&gt; ```<br>&gt;&gt;  <br>&gt;&gt;&gt; It definitely makes sense on ‘for’, though. Lots and lots of people will miss that; it’s a pretty well-known feature.<br>&gt;&gt; <br>&gt;&gt; (See Erica&#39;s statistics below.) <br>&gt;&gt; <br>&gt;&gt;&gt; Also, after everything you said, it’s still not unintuitive. That is not how languages work at all. Languages spoken by human beings are always ambiguous to some extent, and we use context to determine which meaning is correct:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (Quote from https://research.googleblog.com/2016/05/announcing-syntaxnet-worlds-most.html)<br>&gt;&gt;&gt;&gt; One of the main problems that makes parsing so challenging is that human languages show remarkable levels of ambiguity. It is not uncommon for moderate length sentences - say 20 or 30 words in length - to have hundreds, thousands, or even tens of thousands of possible syntactic structures. A natural language parser must somehow search through all of these alternatives, and find the most plausible structure given the context. As a very simple example, the sentence &quot;Alice drove down the street in her car&quot; has at least two possible dependency parses:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The first corresponds to the (correct) interpretation where Alice is driving in her car; the second corresponds to the (absurd, but possible) interpretation where the street is located in her car. The ambiguity arises because the preposition “in&quot; can either modify drove or street; this example is an instance of what is called prepositional phrase attachment ambiguity. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Even algebra is not completely unambiguous - you need to use BODMAS rules to disambiguate potential meanings.<br>&gt;&gt;&gt; It’s this context which I think you’re missing when zooming in at the word “where”:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - The context that this is a variation of a ‘for x in y’ loop. We know that it loops through every item in ‘y&#39; and assigns it ‘x’. It is literally Section 2 of the &#39;Swift Tour&#39; - you learn how to assign a variable, and then you learn about the “for x in y” loop. Everybody should recognise it.<br>&gt;&gt;&gt; - The context that ‘x’ is the subject, so ‘where’ is clearly a condition for x to fulfill<br>&gt;&gt;&gt; - The context that ‘where’ occurs after ‘in’, so it follows the order in which its written: ‘for every x in y, where such-and-such is true, do …”<br>&gt;&gt;&gt; - The “for x in y” loop is a data-driven loop. It doesn’t even have a loop index. It is not like a C for loop and you shouldn’t expect to reason about it that way.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; * There are other ways to break from a loop or continue to the next iteration without performance penalty. Nearly all of these serve more general purposes than a `where` clause. Some of these (such as `if` or `guard`) would already be familiar to a new user before they encounter loops, assuming a typical order for learning a programming language. Many of these (such as filtering methods on collections, or simply `if`) would be familiar to a user of another C-family language. Therefore, the `where` clause provides no independent utility, is not more discoverable than its alternatives, and is not required for progressive disclosure of an important facility to a learner (i.e. a simplified syntax for those who may not be ready for the advanced concepts needed to use a more fully-featured alternative).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You say the points in favour of removal are not handwavey, but I’m still not convinced. “There are other ways to go to where this shortcut goes” is not reasoning. And I’d definitely argue that it is more discoverable than the ‘guard’ statement. The guard statement is stone-dead last at the end of a massive “Control-Flow” page. I would guess that most first-time readers skip those topics for later.<br>&gt;&gt; <br>&gt;&gt; You cannot say the same about `if`.<br>&gt;&gt;  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The point here is that this is not a slippery slope. If `where` offered independent utility, then some confusion alone probably wouldn&#39;t be enough to justify removal, though it may justify some consideration for change. However, as the extensive discussion has shown, there is nothing `where` can do that something else can&#39;t do better. I know you like it for style, but that&#39;s not sufficient grounds for keeping something confusing, IMO.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It’s more readable. It does that better.<br>&gt;&gt; <br>&gt;&gt; Earlier in this thread and others, I gave my reasoning where I disagree with this assertion about being more readable.<br>&gt;&gt;  <br>&gt;&gt;&gt; The tests also seem to show that (bizarrely) it’s also slightly faster than the alternatives.<br>&gt;&gt; <br>&gt;&gt; I don&#39;t believe there has been any demonstration that it&#39;s faster than `guard` or `if`. I would be shocked if that were the case.<br>&gt;&gt;  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Karl<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 10 Jun 2016, at 08:25, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 12:48 AM, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jun 10, 2016, at 1:08 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Thu, Jun 9, 2016 at 9:45 PM, Dany St-Amant &lt;dsa.mls at icloud.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Le 9 juin 2016 à 14:55, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; There have been, in previous threads, several examples given where users of Swift have found the behavior of `where` to be misleading and confusing.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sorry Xiaodi, but beside you (on multiple instances), and recently Erica, I have do not recall hearing that many voices saying that &#39;where&#39; is confusing.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Shawn Erickson wrote this to the list just yesterday:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; &quot;I support your position on the use of where and while/when being confusing in the loop statement. I (and I know others) have for example used where in a loop statement mistakenly thinking it would terminate the loop early but of course learned that it basically filters what causes the loop body to be executed. After the fact that made sense to me but it didn&#39;t click at first.&quot;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Couldn&#39;t we find examples of anyone being confused at any syntax? Especially with an unfamiliar construct in a new language. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; If people find the new proposed syntax confusing, do we pull that too? At what point do we stop?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; That is why I favored (1) removal of the confusing syntax altogether; and (2) this proposal, which involves aligning the confusing syntax with an existing syntax. In short, no new syntax to get confused about.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Yes, there&#39;s was maybe even less voices stating that it is not confusing, but which group is more vocal?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Maybe I have been recently corrupt by Solid SQL queries:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; select * from PEOPLE_TABLE where AGE_FIELD = 100<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Or by my (likely) broken English:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The places where I had the most fun<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; But, to me, where can only suggest some filtering (thus tag to a for ..  in .., continue if not matching). <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I&#39;m glad that you find it very clear. I do as well. That does not mean it is clear to everyone.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I still have yet to see widespread confusion of this. A few people learning swift here or there, but once they learn the syntax...do they still find it confusing?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I expect some concrete data on stuff like this...especially with proposed syntax changes. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Without concrete examples, what would stop one from coming in here and waving their hands around to push *what they like* through?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Here&#39;s what&#39;s not handwavy:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Conclusion: the `where` clause is unprecedented, unintuitive, provides no independent utility, is not more discoverable than alternatives, and is not required for pedagogical reasons; however, it has been used incorrectly by at least some users. Therefore, it is harmful and ought to be removed or reformed.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I know there&#39;s a linguist on the list, maybe he could comment on whether or not using &#39;where&#39; as a filter is proper or an abomination.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I do not think that because something is confusing to some, or at first, that it warrant removal from the language.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; It is a very bad sign if something is confusing at first, especially to a significant proportion of users. It&#39;s true by definition that once you have mastered something you are no longer confused by it.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Again, where is this significant proportion of users? I don&#39;t mean to hound you on this, but I am genuinely curious where this is all coming from.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; We were talking about the hypothetical something here and what the bar should be for removal from the language. My response is that being confusing at first sight *is* a legitimate consideration for removal from the language. If something turns out to be a confusing way to describe a straightforward concept, then the more widespread the confusion, the more urgent its removal.<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; The burden of evidence is on the proposers of these ideas. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; As has been stated on this list, education is a valid and important consideration for Swift. If something is confusing rather than difficult (and the *concept* of filtering a list is not at all a difficult concept), and if the same underlying concept can already be invoked in alternative and equivalent ways that are not confusing, then it&#39;s a no-brainer that the confusing thing is harmful to the language and should be removed on that basis alone.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; What is clear to one person may be confusing to another. There is no perfect syntax that will not make it confusing for some users. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ----<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I really think it is important to come armed with more information with these proposals. It&#39;s easy to say a significant proportion of people are confused but it would make me much more comfortable to see this data to back it up. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; What if we are spinning our wheels for no reason on a feature that *most* don&#39;t find confusing? What if we make a bigger proportion of those who did understand it more confused now?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; Brandon <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; By analogy, Chinese and Japanese share difficult writing systems. Yet many people use those languages daily without difficulty. Does that mean there&#39;s not a problem? Far from it: in fact, you&#39;ll find that many intelligent people have devoted their life&#39;s work to mitigating the issue. Both Chinese and Japanese underwent a round of simplification in the 20th century. Think about it: real languages used for daily life by a significant fraction of the world&#39;s population were revamped for the purpose of increasing accessibility to new learners.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The by-value/by-reference is well define, but can be confusing at first. Same goes for eager/lazy processing, or escaping vs non-escaping closure, or even the difference between closure and function. But no one suggest to remove them.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Value types vs. reference types is a concept (and a moderately advanced one), eager vs. lazy processing is a concept (and a moderately advanced one), and closures are a concept (and definitely an advanced one).<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Filtering a collection is a concept as well, and no one is suggesting its removal. We are proposing to simplify and rationalize the syntax by which filtering is invoked. If there were a way to dramatically simplify the syntax surrounding value types and reference types so as to diminish confusion, you can absolutely guarantee that there would be proposals to change the syntax. If I could think of one tomorrow, you&#39;d see a thread tomorrow about it. I don&#39;t think I&#39;m that smart though.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dany<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; In fact, the first of these proposals began with a question: how does one write arbitrary Boolean assertions after a let binding? The answer (use `where`) was found to be misleading and confusing.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think you&#39;re being unfair to say that these proposals have no purpose other than an academic consistency.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Thu, Jun 9, 2016 at 13:29 Jon Shier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         As time goes on, I’m feeling more and more that these consistency proposals are sorely misguided. Frankly, unless the syntax is confusing or misleading, even once the developer has learned the guiding principles of Swift, consistency is not a good argument for change. This proposal is the perfect example of this. No one will find the use of “where” in loops confusing, aside from those who will wonder why it was removed from if statements. There is no misleading behavior or confusing syntax here. This is just consistency for consistency’s sake. Once this proposal is done, then another will be made to remove “where” from another place in the language. Then another and another until it’s gone completely and a very useful part of the language is removed in the name of consistency. Which really just comes down to “where” isn’t used here, so it can’t be used there anymore. It’s death by a thousand cuts.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Jon Shier<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; On Jun 9, 2016, at 1:16 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; On Jun 9, 2016, at 11:11 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; See my latest post - included results with -Ofast. But still, using filter and lazy.filter is 10+% slower, which were the suggested alternatives to `where`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; I need to correct this misapprehension.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; My suggested alternative to where was and remains `guard`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; -- E<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160611/256b662b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>June 11, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; Am 11.06.2016 um 22:29 schrieb L. Mihalkovic &lt;laurent.mihalkovic at gmail.com&gt;:<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Jun 11, 2016, at 9:53 PM, Thorsten Seitz via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; Am 10.06.2016 um 18:28 schrieb Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 6:10 AM, Karl &lt;razielim at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; -1<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * Swift is explicitly a C-family language. In most or all other C-family languages, for loop statements allow specification of conditions for exiting the loop but not for filtering. Therefore, Swift&#39;s use of `where` is unprecedented and needs to be learned anew by every user of Swift.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; When was this decided? I distinctly remember some bloke under Craig Federighi’s hair saying that it was time to “move beyond” C and essentially ditch legacy conventions which no longer make sense.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think you misunderstood my argument here. I don&#39;t mean that we should yoke ourselves to C conventions, and we should absolutely ditch C convention when it doesn&#39;t make sense. The big-picture argument here is that `where` doesn&#39;t pass the bar of correcting a C convention that no longer makes sense.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; FWIW, on the topic of syntax choices, here is what Chris Lattner had to say on this list:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Kevin got it exactly right, but I’d expand that last bit a bit to:<br>&gt;&gt;&gt;&gt; “… picking the one that is most familiar to programmers in the extended C family is a good idea.[&quot;]<br>&gt;&gt;&gt;&gt; The extended C family of language (which includes C, C++, ObjC, but also C#, Java, Javascript, and more) is<br>&gt;&gt;&gt;&gt; an extremely popular and widely used set of languages that have a lot of surface-level similarity. I<br>&gt;&gt;&gt;&gt; don’t claim to know the design rationale of all of these languages, but I surmise that this is not an<br>&gt;&gt;&gt;&gt; accident: programmers move around and work in different languages, and this allows a non-expert in the<br>&gt;&gt;&gt;&gt; language to understand what is going on. While there are things about C that are really unfortunate IMO<br>&gt;&gt;&gt;&gt; (e.g. the declarator/declaration specifier part of the grammar) there is a lot of goodness in the basic<br>&gt;&gt;&gt;&gt; operator set, focus on dot syntax, and more.<br>&gt;&gt;&gt;&gt; I do agree that there are some benefits to ditching braces and relying on indentation instead, but there are<br>&gt;&gt;&gt;&gt; also downsides. Deviating from the C family in this respect would have to provide *overwhelmingly* large <br>&gt;&gt;&gt;&gt; advantages for us to take such a plunge, and they simply don’t exist.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; As I understand it, Swift is a new language with new conventions. It is desirable to align as many of those as possible with existing conventions so as to be easily learned, but if you limit Swift to other languages conventions you deny it any identity. Did Python ask anybody’s opinion before dropping curly-braces? Did people learn whatever Perl is supposed to be? Look at C’s hieroglyphic for loops! <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t think we disagree here.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Realistically, “for … in … while” is not going to cause incredible confusion. Removing it would cause a lot of frustration. You can’t on the one hand say our users are comfortable with the axioms of C’s hieroglyphic loops, and on the other hand say “for x in y while&quot; is confusing.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Again, as I said, once you&#39;ve mastered something, by definition you find it not confusing. Why should we doom x% of new users to writing a loop incorrectly at least once when we don&#39;t have to?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Ah, but if you’re not “doomed” to failing once, how will you ever master anything? Nobody knew how to write a C for-loop until someone showed them (and even then…). Nobody is going to just open a REPL and start writing code, with zero prior understanding of what Swift syntax looks like.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The thought here is along the lines of what Chris said, quoted above, and repeated here: &quot;The extended C family of language [...] is an extremely popular and widely used set[;] programmers move around and work in different languages, and [aligning to expectations arising from other C family languages] allows a non-expert in the language to understand what is going on.&quot; By contrast, the `where` clause violates that expectation and I do not see &quot;overwhelmingly large advantages&quot; for doing so.<br>&gt;&gt; <br>&gt;&gt; What about C#&#39;s `where` then? As C# is a member of the C family languages `where` is not violating expectations!<br>&gt; <br>&gt; Where is not exactly a part of c# it belongs to linq<br></p><p>And that is not a part of C#??<br></p><p>The following is an example from MSDN with `where` clearly beaing a keyword:<br></p><p>var numQuery = from num in numbers where (num % 2) == 0 select num;<br></p><p>-Thorsten <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160611/f750ed3c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 11, 2016 at 04:00:00pm</p></header><div class="content"><p>On Sat, Jun 11, 2016 at 3:37 PM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br></p><p>&gt;<br>&gt;<br>&gt; Am 11.06.2016 um 22:29 schrieb L. Mihalkovic &lt;laurent.mihalkovic at gmail.com<br>&gt; &gt;:<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Jun 11, 2016, at 9:53 PM, Thorsten Seitz via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt;<br>&gt; Am 10.06.2016 um 18:28 schrieb Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt;:<br>&gt;<br>&gt; On Fri, Jun 10, 2016 at 6:10 AM, Karl &lt;razielim at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; -1<br>&gt;&gt;<br>&gt;&gt; * Swift is explicitly a C-family language. In most or all other C-family<br>&gt;&gt; languages, for loop statements allow specification of conditions for<br>&gt;&gt; exiting the loop but not for filtering. Therefore, Swift&#39;s use of `where`<br>&gt;&gt; is unprecedented and needs to be learned anew by every user of Swift.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; When was this decided? I distinctly remember some bloke under Craig<br>&gt;&gt; Federighi’s hair saying that it was time to “move beyond” C and essentially<br>&gt;&gt; ditch legacy conventions which no longer make sense.<br>&gt;&gt;<br>&gt;<br>&gt; I think you misunderstood my argument here. I don&#39;t mean that we should<br>&gt; yoke ourselves to C conventions, and we should absolutely ditch C<br>&gt; convention when it doesn&#39;t make sense. The big-picture argument here is<br>&gt; that `where` doesn&#39;t pass the bar of correcting a C convention that no<br>&gt; longer makes sense.<br>&gt;<br>&gt; FWIW, on the topic of syntax choices, here is what Chris Lattner had to<br>&gt; say on this list:<br>&gt;<br>&gt; Kevin got it exa*c*tly right, but I’d expand that last bit a bit to:<br>&gt;&gt; “… pi*c*king the one that is most familiar to programmers in the<br>&gt;&gt; extended *C* *family* is a good idea.[&quot;]<br>&gt;&gt; The extended *C* *family* of language (whi*c*h in*c*ludes *C*, *C*++, Obj<br>&gt;&gt; *C*, but also *C*#, Java, Javas*c*ript, and more) is<br>&gt;&gt; an extremely popular and widely used set of languages that have a lot of<br>&gt;&gt; surfa*c*e-level similarity. I<br>&gt;&gt; don’t *c*laim to know the design rationale of all of these languages,<br>&gt;&gt; but I surmise that this is not an<br>&gt;&gt; a*c**c*ident: programmers move around and work in different languages,<br>&gt;&gt; and this allows a non-expert in the<br>&gt;&gt; language to understand what is going on. While there are things about *C*<br>&gt;&gt; that are really unfortunate IMO<br>&gt;&gt; (e.g. the de*c*larator/de*c*laration spe*c*ifier part of the grammar)<br>&gt;&gt; there is a lot of goodness in the basi<br>&gt;&gt; *c*operator set, fo*c*us on dot syntax, and more.<br>&gt;&gt; I do agree that there are some benefits to dit*c*hing bra*c*es and<br>&gt;&gt; relying on indentation instead, but there are<br>&gt;&gt; also downsides. Deviating from the *C* *family* in this respe*c*t would<br>&gt;&gt; have to provide **overwhelmingly** large<br>&gt;&gt; advantages for us to take su*c*h a plunge, and they simply don’t exist.<br>&gt;<br>&gt;<br>&gt;<br>&gt;&gt; As I understand it, Swift is a new language with new conventions. It is<br>&gt;&gt; desirable to align as many of those as possible with existing conventions<br>&gt;&gt; so as to be easily learned, but if you limit Swift to other languages<br>&gt;&gt; conventions you deny it any identity. Did Python ask anybody’s opinion<br>&gt;&gt; before dropping curly-braces? Did people learn whatever Perl is supposed to<br>&gt;&gt; be? Look at C’s hieroglyphic for loops!<br>&gt;&gt;<br>&gt;<br>&gt; I don&#39;t think we disagree here.<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; Realistically, “for … in … while” is not going to cause incredible<br>&gt;&gt; confusion. Removing it would cause a lot of frustration. You can’t on the<br>&gt;&gt; one hand say our users are comfortable with the axioms of C’s hieroglyphic<br>&gt;&gt; loops, and on the other hand say “for x in y while&quot; is confusing.<br>&gt;&gt;<br>&gt;&gt; Again, as I said, once you&#39;ve mastered something, by definition you find<br>&gt;&gt; it not confusing. Why should we doom x% of new users to writing a loop<br>&gt;&gt; incorrectly at least once when we don&#39;t have to?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Ah, but if you’re not “doomed” to failing once, how will you ever master<br>&gt;&gt; anything? Nobody knew how to write a C for-loop until someone showed them<br>&gt;&gt; (and even then…). Nobody is going to just open a REPL and start writing<br>&gt;&gt; code, with zero prior understanding of what Swift syntax looks like.<br>&gt;&gt;<br>&gt;<br>&gt; The thought here is along the lines of what Chris said, quoted above, and<br>&gt; repeated here: &quot;The extended C family of language [...] is an extremely<br>&gt; popular and widely used set[;] programmers move around and work in<br>&gt; different languages, and [aligning to expectations arising from other C<br>&gt; family languages] allows a non-expert in the language to understand what is<br>&gt; going on.&quot; By contrast, the `where` clause violates that expectation and I<br>&gt; do not see &quot;overwhelmingly large advantages&quot; for doing so.<br>&gt;<br>&gt;<br>&gt; What about C#&#39;s `where` then? As C# is a member of the C family languages<br>&gt; `where` is not violating expectations!<br>&gt;<br>&gt;<br>&gt; Where is not exactly a part of c# it belongs to linq<br>&gt;<br>&gt;<br>&gt; And that is not a part of C#??<br>&gt;<br></p><p>SQL is a domain-specific language, and LINQ is an internal domain-specific<br>language with a language extension for C#. Neither is a general purpose<br>language.<br></p><p>Your example actually goes to one of Laurent&#39;s points. Should the Swift<br>core team or an enterprising community member propose a set of similarly<br>powerful tools, along with a set of language extensions that add syntactic<br>sugar for them, I (and I think Laurent, if I understand him correctly)<br>would absolutely be in favor of such an addition. But as it is, `where` is<br>an odd duckling. Just as you say, it looks like a component of a query<br>language, but it does no such thing. In a for loop, it does some filtering,<br>but until recently it functioned like a comma in `while` loops. Look at<br>those other keywords which make this sugar possible in C#: in your example,<br>`from` and `select`. We don&#39;t have any of that intrastructure in Swift.<br></p><p><br>&gt; The following is an example from MSDN with `where` clearly beaing a<br>&gt; keyword:<br>&gt;<br>&gt; *var* numQuery =<br>&gt;             *from* num *in* numbers<br>&gt;             *where* (num % 2) == 0<br>&gt;             *select* num;<br>&gt;<br>&gt;<br>&gt; -Thorsten<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160611/989f90c0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>June 12, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; Am 11.06.2016 um 23:45 schrieb Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;:<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Sat, Jun 11, 2016 at 3:37 PM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; Am 11.06.2016 um 22:29 schrieb L. Mihalkovic &lt;laurent.mihalkovic at gmail.com&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 11, 2016, at 9:53 PM, Thorsten Seitz via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Am 10.06.2016 um 18:28 schrieb Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 6:10 AM, Karl &lt;razielim at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; -1<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; * Swift is explicitly a C-family language. In most or all other C-family languages, for loop statements allow specification of conditions for exiting the loop but not for filtering. Therefore, Swift&#39;s use of `where` is unprecedented and needs to be learned anew by every user of Swift.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; When was this decided? I distinctly remember some bloke under Craig Federighi’s hair saying that it was time to “move beyond” C and essentially ditch legacy conventions which no longer make sense.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I think you misunderstood my argument here. I don&#39;t mean that we should yoke ourselves to C conventions, and we should absolutely ditch C convention when it doesn&#39;t make sense. The big-picture argument here is that `where` doesn&#39;t pass the bar of correcting a C convention that no longer makes sense.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; FWIW, on the topic of syntax choices, here is what Chris Lattner had to say on this list:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Kevin got it exactly right, but I’d expand that last bit a bit to:<br>&gt;&gt;&gt;&gt;&gt;&gt; “… picking the one that is most familiar to programmers in the extended C family is a good idea.[&quot;]<br>&gt;&gt;&gt;&gt;&gt;&gt; The extended C family of language (which includes C, C++, ObjC, but also C#, Java, Javascript, and more) is<br>&gt;&gt;&gt;&gt;&gt;&gt; an extremely popular and widely used set of languages that have a lot of surface-level similarity. I<br>&gt;&gt;&gt;&gt;&gt;&gt; don’t claim to know the design rationale of all of these languages, but I surmise that this is not an<br>&gt;&gt;&gt;&gt;&gt;&gt; accident: programmers move around and work in different languages, and this allows a non-expert in the<br>&gt;&gt;&gt;&gt;&gt;&gt; language to understand what is going on. While there are things about C that are really unfortunate IMO<br>&gt;&gt;&gt;&gt;&gt;&gt; (e.g. the declarator/declaration specifier part of the grammar) there is a lot of goodness in the basic<br>&gt;&gt;&gt;&gt;&gt;&gt; operator set, focus on dot syntax, and more.<br>&gt;&gt;&gt;&gt;&gt;&gt; I do agree that there are some benefits to ditching braces and relying on indentation instead, but there are<br>&gt;&gt;&gt;&gt;&gt;&gt; also downsides. Deviating from the C family in this respect would have to provide *overwhelmingly* large <br>&gt;&gt;&gt;&gt;&gt;&gt; advantages for us to take such a plunge, and they simply don’t exist.<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; As I understand it, Swift is a new language with new conventions. It is desirable to align as many of those as possible with existing conventions so as to be easily learned, but if you limit Swift to other languages conventions you deny it any identity. Did Python ask anybody’s opinion before dropping curly-braces? Did people learn whatever Perl is supposed to be? Look at C’s hieroglyphic for loops! <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I don&#39;t think we disagree here.<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Realistically, “for … in … while” is not going to cause incredible confusion. Removing it would cause a lot of frustration. You can’t on the one hand say our users are comfortable with the axioms of C’s hieroglyphic loops, and on the other hand say “for x in y while&quot; is confusing.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Again, as I said, once you&#39;ve mastered something, by definition you find it not confusing. Why should we doom x% of new users to writing a loop incorrectly at least once when we don&#39;t have to?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Ah, but if you’re not “doomed” to failing once, how will you ever master anything? Nobody knew how to write a C for-loop until someone showed them (and even then…). Nobody is going to just open a REPL and start writing code, with zero prior understanding of what Swift syntax looks like.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The thought here is along the lines of what Chris said, quoted above, and repeated here: &quot;The extended C family of language [...] is an extremely popular and widely used set[;] programmers move around and work in different languages, and [aligning to expectations arising from other C family languages] allows a non-expert in the language to understand what is going on.&quot; By contrast, the `where` clause violates that expectation and I do not see &quot;overwhelmingly large advantages&quot; for doing so.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What about C#&#39;s `where` then? As C# is a member of the C family languages `where` is not violating expectations!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Where is not exactly a part of c# it belongs to linq<br>&gt;&gt; <br>&gt;&gt; And that is not a part of C#??<br>&gt; <br>&gt; SQL is a domain-specific language, and LINQ is an internal domain-specific language with a language extension for C#. Neither is a general purpose language.<br></p><p>I don&#39;t see how that is relevant especially given the prominence and reach of SQL (which is turing complete, btw ;-)<br></p><p><br>&gt; <br>&gt; Your example actually goes to one of Laurent&#39;s points. Should the Swift core team or an enterprising community member propose a set of similarly powerful tools, along with a set of language extensions that add syntactic sugar for them, I (and I think Laurent, if I understand him correctly) would absolutely be in favor of such an addition. But as it is, `where` is an odd duckling. Just as you say, it looks like a component of a query language, but it does no such thing. In a for loop, it does some filtering, but until recently it functioned like a comma in `while` loops. Look at those other keywords which make this sugar possible in C#: in your example, `from` and `select`. We don&#39;t have any of that intrastructure in Swift.<br></p><p>We can simply extend the for-in-where loop for that like Scala does. No need to add new syntax if an existing one can simply be generalized.<br></p><p>-Thorsten <br></p><p><br>&gt;  <br>&gt;&gt; The following is an example from MSDN with `where` clearly beaing a keyword:<br>&gt;&gt; <br>&gt;&gt; var numQuery = from num in numbers where (num % 2) == 0 select num;<br>&gt;&gt; <br>&gt;&gt; -Thorsten <br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160612/02c486ab/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 11, 2016 at 05:00:00pm</p></header><div class="content"><p>On Sat, Jun 11, 2016 at 5:03 PM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br></p><p>&gt;<br>&gt;<br>&gt; Am 11.06.2016 um 23:45 schrieb Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;:<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Sat, Jun 11, 2016 at 3:37 PM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Am 11.06.2016 um 22:29 schrieb L. Mihalkovic &lt;<br>&gt;&gt; laurent.mihalkovic at gmail.com&gt;:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Jun 11, 2016, at 9:53 PM, Thorsten Seitz via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Am 10.06.2016 um 18:28 schrieb Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt;:<br>&gt;&gt;<br>&gt;&gt; On Fri, Jun 10, 2016 at 6:10 AM, Karl &lt;razielim at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; -1<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; * Swift is explicitly a C-family language. In most or all other C-family<br>&gt;&gt;&gt; languages, for loop statements allow specification of conditions for<br>&gt;&gt;&gt; exiting the loop but not for filtering. Therefore, Swift&#39;s use of `where`<br>&gt;&gt;&gt; is unprecedented and needs to be learned anew by every user of Swift.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; When was this decided? I distinctly remember some bloke under Craig<br>&gt;&gt;&gt; Federighi’s hair saying that it was time to “move beyond” C and essentially<br>&gt;&gt;&gt; ditch legacy conventions which no longer make sense.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I think you misunderstood my argument here. I don&#39;t mean that we should<br>&gt;&gt; yoke ourselves to C conventions, and we should absolutely ditch C<br>&gt;&gt; convention when it doesn&#39;t make sense. The big-picture argument here is<br>&gt;&gt; that `where` doesn&#39;t pass the bar of correcting a C convention that no<br>&gt;&gt; longer makes sense.<br>&gt;&gt;<br>&gt;&gt; FWIW, on the topic of syntax choices, here is what Chris Lattner had to<br>&gt;&gt; say on this list:<br>&gt;&gt;<br>&gt;&gt; Kevin got it exa*c*tly right, but I’d expand that last bit a bit to:<br>&gt;&gt;&gt; “… pi*c*king the one that is most familiar to programmers in the<br>&gt;&gt;&gt; extended *C* *family* is a good idea.[&quot;]<br>&gt;&gt;&gt; The extended *C* *family* of language (whi*c*h in*c*ludes *C*, *C*++,<br>&gt;&gt;&gt; Obj*C*, but also *C*#, Java, Javas*c*ript, and more) is<br>&gt;&gt;&gt; an extremely popular and widely used set of languages that have a lot of<br>&gt;&gt;&gt; surfa*c*e-level similarity. I<br>&gt;&gt;&gt; don’t *c*laim to know the design rationale of all of these languages,<br>&gt;&gt;&gt; but I surmise that this is not an<br>&gt;&gt;&gt; a*c**c*ident: programmers move around and work in different languages,<br>&gt;&gt;&gt; and this allows a non-expert in the<br>&gt;&gt;&gt; language to understand what is going on. While there are things about<br>&gt;&gt;&gt; *C* that are really unfortunate IMO<br>&gt;&gt;&gt; (e.g. the de*c*larator/de*c*laration spe*c*ifier part of the grammar)<br>&gt;&gt;&gt; there is a lot of goodness in the basi<br>&gt;&gt;&gt; *c*operator set, fo*c*us on dot syntax, and more.<br>&gt;&gt;&gt; I do agree that there are some benefits to dit*c*hing bra*c*es and<br>&gt;&gt;&gt; relying on indentation instead, but there are<br>&gt;&gt;&gt; also downsides. Deviating from the *C* *family* in this respe*c*t would<br>&gt;&gt;&gt; have to provide **overwhelmingly** large<br>&gt;&gt;&gt; advantages for us to take su*c*h a plunge, and they simply don’t exist.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; As I understand it, Swift is a new language with new conventions. It is<br>&gt;&gt;&gt; desirable to align as many of those as possible with existing conventions<br>&gt;&gt;&gt; so as to be easily learned, but if you limit Swift to other languages<br>&gt;&gt;&gt; conventions you deny it any identity. Did Python ask anybody’s opinion<br>&gt;&gt;&gt; before dropping curly-braces? Did people learn whatever Perl is supposed to<br>&gt;&gt;&gt; be? Look at C’s hieroglyphic for loops!<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I don&#39;t think we disagree here.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Realistically, “for … in … while” is not going to cause incredible<br>&gt;&gt;&gt; confusion. Removing it would cause a lot of frustration. You can’t on the<br>&gt;&gt;&gt; one hand say our users are comfortable with the axioms of C’s hieroglyphic<br>&gt;&gt;&gt; loops, and on the other hand say “for x in y while&quot; is confusing.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Again, as I said, once you&#39;ve mastered something, by definition you find<br>&gt;&gt;&gt; it not confusing. Why should we doom x% of new users to writing a loop<br>&gt;&gt;&gt; incorrectly at least once when we don&#39;t have to?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Ah, but if you’re not “doomed” to failing once, how will you ever master<br>&gt;&gt;&gt; anything? Nobody knew how to write a C for-loop until someone showed them<br>&gt;&gt;&gt; (and even then…). Nobody is going to just open a REPL and start writing<br>&gt;&gt;&gt; code, with zero prior understanding of what Swift syntax looks like.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; The thought here is along the lines of what Chris said, quoted above, and<br>&gt;&gt; repeated here: &quot;The extended C family of language [...] is an extremely<br>&gt;&gt; popular and widely used set[;] programmers move around and work in<br>&gt;&gt; different languages, and [aligning to expectations arising from other C<br>&gt;&gt; family languages] allows a non-expert in the language to understand what is<br>&gt;&gt; going on.&quot; By contrast, the `where` clause violates that expectation and I<br>&gt;&gt; do not see &quot;overwhelmingly large advantages&quot; for doing so.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; What about C#&#39;s `where` then? As C# is a member of the C family languages<br>&gt;&gt; `where` is not violating expectations!<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Where is not exactly a part of c# it belongs to linq<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; And that is not a part of C#??<br>&gt;&gt;<br>&gt;<br>&gt; SQL is a domain-specific language, and LINQ is an internal domain-specific<br>&gt; language with a language extension for C#. Neither is a general purpose<br>&gt; language.<br>&gt;<br>&gt;<br>&gt; I don&#39;t see how that is relevant especially given the prominence and reach<br>&gt; of SQL (which is turing complete, btw ;-)<br>&gt;<br></p><p>It is relevant because the design of every language has to contend with<br>trade-offs, and the trade-offs that make `where` a powerful and intuitive<br>keyword in the context of a query language are different from the tradeoffs<br>we must contend with in a general purpose language. HTML+CSS has also been<br>proved Turing-complete; it is irrelevant to the question of whether the<br>idioms of HTML+CSS are appropriate in a general purpose language.<br></p><p><br>&gt; Your example actually goes to one of Laurent&#39;s points. Should the Swift<br>&gt; core team or an enterprising community member propose a set of similarly<br>&gt; powerful tools, along with a set of language extensions that add syntactic<br>&gt; sugar for them, I (and I think Laurent, if I understand him correctly)<br>&gt; would absolutely be in favor of such an addition. But as it is, `where` is<br>&gt; an odd duckling. Just as you say, it looks like a component of a query<br>&gt; language, but it does no such thing. In a for loop, it does some filtering,<br>&gt; but until recently it functioned like a comma in `while` loops. Look at<br>&gt; those other keywords which make this sugar possible in C#: in your example,<br>&gt; `from` and `select`. We don&#39;t have any of that intrastructure in Swift.<br>&gt;<br>&gt;<br>&gt; We can simply extend the for-in-where loop for that like Scala does. No<br>&gt; need to add new syntax if an existing one can simply be generalized.<br>&gt;<br></p><p>If you want to propose adopting Scala&#39;s `if`, you are free to start a<br>discussion on that topic. Note how Scala also avoids use of the word<br>`where`.<br></p><p><br>&gt;<br>&gt; -Thorsten<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;&gt; The following is an example from MSDN with `where` clearly beaing a<br>&gt;&gt; keyword:<br>&gt;&gt;<br>&gt;&gt; *var* numQuery =<br>&gt;&gt;             *from* num *in* numbers<br>&gt;&gt;             *where* (num % 2) == 0<br>&gt;&gt;             *select* num;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; -Thorsten<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160611/0ac10184/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 12, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Jun 11, 2016, at 11:45 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Sat, Jun 11, 2016 at 3:37 PM, Thorsten Seitz &lt;tseitz42 at icloud.com &lt;mailto:tseitz42 at icloud.com&gt;&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Am 11.06.2016 um 22:29 schrieb L. Mihalkovic &lt;laurent.mihalkovic at gmail.com &lt;mailto:laurent.mihalkovic at gmail.com&gt;&gt;:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Jun 11, 2016, at 9:53 PM, Thorsten Seitz via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Am 10.06.2016 um 18:28 schrieb Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 6:10 AM, Karl &lt;razielim at gmail.com &lt;mailto:razielim at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; -1<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * Swift is explicitly a C-family language. In most or all other C-family languages, for loop statements allow specification of conditions for exiting the loop but not for filtering. Therefore, Swift&#39;s use of `where` is unprecedented and needs to be learned anew by every user of Swift.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; When was this decided? I distinctly remember some bloke under Craig Federighi’s hair saying that it was time to “move beyond” C and essentially ditch legacy conventions which no longer make sense.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think you misunderstood my argument here. I don&#39;t mean that we should yoke ourselves to C conventions, and we should absolutely ditch C convention when it doesn&#39;t make sense. The big-picture argument here is that `where` doesn&#39;t pass the bar of correcting a C convention that no longer makes sense.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; FWIW, on the topic of syntax choices, here is what Chris Lattner had to say on this list:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Kevin got it exactly right, but I’d expand that last bit a bit to:<br>&gt;&gt;&gt;&gt; “… picking the one that is most familiar to programmers in the extended C family is a good idea.[&quot;]<br>&gt;&gt;&gt;&gt; The extended C family of language (which includes C, C++, ObjC, but also C#, Java, Javascript, and more) is<br>&gt;&gt;&gt;&gt; an extremely popular and widely used set of languages that have a lot of surface-level similarity. I<br>&gt;&gt;&gt;&gt; don’t claim to know the design rationale of all of these languages, but I surmise that this is not an<br>&gt;&gt;&gt;&gt; accident: programmers move around and work in different languages, and this allows a non-expert in the<br>&gt;&gt;&gt;&gt; language to understand what is going on. While there are things about C that are really unfortunate IMO<br>&gt;&gt;&gt;&gt; (e.g. the declarator/declaration specifier part of the grammar) there is a lot of goodness in the basic<br>&gt;&gt;&gt;&gt; operator set, focus on dot syntax, and more.<br>&gt;&gt;&gt;&gt; I do agree that there are some benefits to ditching braces and relying on indentation instead, but there are<br>&gt;&gt;&gt;&gt; also downsides. Deviating from the C family in this respect would have to provide *overwhelmingly* large <br>&gt;&gt;&gt;&gt; advantages for us to take such a plunge, and they simply don’t exist.<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; As I understand it, Swift is a new language with new conventions. It is desirable to align as many of those as possible with existing conventions so as to be easily learned, but if you limit Swift to other languages conventions you deny it any identity. Did Python ask anybody’s opinion before dropping curly-braces? Did people learn whatever Perl is supposed to be? Look at C’s hieroglyphic for loops! <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don&#39;t think we disagree here.<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Realistically, “for … in … while” is not going to cause incredible confusion. Removing it would cause a lot of frustration. You can’t on the one hand say our users are comfortable with the axioms of C’s hieroglyphic loops, and on the other hand say “for x in y while&quot; is confusing.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Again, as I said, once you&#39;ve mastered something, by definition you find it not confusing. Why should we doom x% of new users to writing a loop incorrectly at least once when we don&#39;t have to?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Ah, but if you’re not “doomed” to failing once, how will you ever master anything? Nobody knew how to write a C for-loop until someone showed them (and even then…). Nobody is going to just open a REPL and start writing code, with zero prior understanding of what Swift syntax looks like.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The thought here is along the lines of what Chris said, quoted above, and repeated here: &quot;The extended C family of language [...] is an extremely popular and widely used set[;] programmers move around and work in different languages, and [aligning to expectations arising from other C family languages] allows a non-expert in the language to understand what is going on.&quot; By contrast, the `where` clause violates that expectation and I do not see &quot;overwhelmingly large advantages&quot; for doing so.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What about C#&#39;s `where` then? As C# is a member of the C family languages `where` is not violating expectations!<br>&gt;&gt; <br>&gt;&gt; Where is not exactly a part of c# it belongs to linq<br>&gt; <br>&gt; And that is not a part of C#??<br>&gt; <br>&gt; SQL is a domain-specific language, and LINQ is an internal domain-specific language with a language extension for C#. Neither is a general purpose language.<br>&gt; <br>&gt; Your example actually goes to one of Laurent&#39;s points. Should the Swift core team or an enterprising community member propose a set of similarly powerful tools, along with a set of language extensions that add syntactic sugar for them, I (and I think Laurent, if I understand him correctly) would absolutely be in favor of such an addition. But as it is, `where` is an odd duckling. Just as you say, it looks like a component of a query language, but it does no such thing. In a for loop, it does some filtering, but until recently it functioned like a comma in `while` loops. Look at those other keywords which make this sugar possible in C#: in your example, `from` and `select`. We don&#39;t have any of that intrastructure in Swift.<br>&gt;  <br></p><p>IMHO the team has taken an Ockham Axe to the grammar: in the presence of multiple ways to produce the same or an acceptable stand-in (for eg when the only difference is an acceptable temporary perf setback), then the solution requiring the least assumptions on the compiler wins. <br></p><p>I would even extend this rule with the corollary that between an assumption materialized as a type checker rule and an assumption materialized as a full blown extra language keyword, there might be a bias to accept the former if it kills the latter. But this is just my personal inference of what their decision heuristic might be based solely on what I saw. My sole interest in trying to understand their decision making process is to try to avoid proposals that have little to no chance to go anywhere, as well as trying to present ones that will align better with where the language is going.<br></p><p>In this instance, WHERE is a heavy assumption on the compiler for no greater gain than filters can provide. So I think we save the WHERE keyword for an outcome that will be really worth it! Something along the idea of Linq, but with a proper Swift feel to it. What does it look like? I cannot say yet. But the good news is that having taken WHERE out now will make that next step a purely additive process (nothing will be taken out then, but a big thing will be gained). <br></p><p><br>&gt; The following is an example from MSDN with `where` clearly beaing a keyword:<br>&gt; <br>&gt; var numQuery = from num in numbers where (num % 2) == 0 select num;<br></p><p><br>Here is food for your thoughts, you think WHERE is a keyword?! then look at this:<br></p><p>var numbers = new int[]{0,1,23,4,5,6,7,87,9};<br>var numQuery = from num in numbers where (num % 2) == 0 select num;<br></p><p>Program does not compile:<br></p><p>// Error CS1935: An implementation of `Where&#39; query expression pattern could not be found. Are you missing `System.Linq&#39; using directive or `System.Core.dll&#39; assembly reference? (CS1935) (SessionsFinder)<br></p><p>using System.Linq;<br>var numbers = new int[]{0,1,23,4,5,6,7,87,9};<br>var numQuery = from num in numbers where (num % 2) == 0 select num;<br></p><p>That program does compiles and runs fine. This tells you that “where&quot; is not at all the ordinary keyword that it appears to be. hence my “it is not C# per-se, it is Linq”. And if you still wonder, then rewrite the code so that “WHERE” no longer looks like a keyword:<br></p><p>var numQuery2 = numbers.Where( num =&gt; num %2 == 0);	// exact same result as numQuery1<br></p><p><br>These are other real life examples from a OS X tool I wrote recently: <br></p><p>IEnumerable&lt;Task&lt;Session&gt;&gt; asyncOps = from session in sessions.Values select parseSessionDetails(updater, parser, session);<br>var ul = node.Descendants().Where(x =&gt; x.Name == &quot;ul&quot;).First();<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160612/77818afb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June 12, 2016 at 09:00:00am</p></header><div class="content"><p>Well now you have me intrigued. I must read more about Linq now<br></p><p>Brandon<br></p><p>Sent from my iPad<br></p><p>&gt; On Jun 12, 2016, at 6:02 AM, L Mihalkovic via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 11, 2016, at 11:45 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Sat, Jun 11, 2016 at 3:37 PM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Am 11.06.2016 um 22:29 schrieb L. Mihalkovic &lt;laurent.mihalkovic at gmail.com&gt;:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 11, 2016, at 9:53 PM, Thorsten Seitz via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Am 10.06.2016 um 18:28 schrieb Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 6:10 AM, Karl &lt;razielim at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; -1<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; * Swift is explicitly a C-family language. In most or all other C-family languages, for loop statements allow specification of conditions for exiting the loop but not for filtering. Therefore, Swift&#39;s use of `where` is unprecedented and needs to be learned anew by every user of Swift.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; When was this decided? I distinctly remember some bloke under Craig Federighi’s hair saying that it was time to “move beyond” C and essentially ditch legacy conventions which no longer make sense.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I think you misunderstood my argument here. I don&#39;t mean that we should yoke ourselves to C conventions, and we should absolutely ditch C convention when it doesn&#39;t make sense. The big-picture argument here is that `where` doesn&#39;t pass the bar of correcting a C convention that no longer makes sense.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; FWIW, on the topic of syntax choices, here is what Chris Lattner had to say on this list:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Kevin got it exactly right, but I’d expand that last bit a bit to:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; “… picking the one that is most familiar to programmers in the extended C family is a good idea.[&quot;]<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The extended C family of language (which includes C, C++, ObjC, but also C#, Java, Javascript, and more) is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; an extremely popular and widely used set of languages that have a lot of surface-level similarity. I<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; don’t claim to know the design rationale of all of these languages, but I surmise that this is not an<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; accident: programmers move around and work in different languages, and this allows a non-expert in the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; language to understand what is going on. While there are things about C that are really unfortunate IMO<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; (e.g. the declarator/declaration specifier part of the grammar) there is a lot of goodness in the basic<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; operator set, focus on dot syntax, and more.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I do agree that there are some benefits to ditching braces and relying on indentation instead, but there are<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; also downsides. Deviating from the C family in this respect would have to provide *overwhelmingly* large <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; advantages for us to take such a plunge, and they simply don’t exist.<br>&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; As I understand it, Swift is a new language with new conventions. It is desirable to align as many of those as possible with existing conventions so as to be easily learned, but if you limit Swift to other languages conventions you deny it any identity. Did Python ask anybody’s opinion before dropping curly-braces? Did people learn whatever Perl is supposed to be? Look at C’s hieroglyphic for loops! <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t think we disagree here.<br>&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Realistically, “for … in … while” is not going to cause incredible confusion. Removing it would cause a lot of frustration. You can’t on the one hand say our users are comfortable with the axioms of C’s hieroglyphic loops, and on the other hand say “for x in y while&quot; is confusing.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Again, as I said, once you&#39;ve mastered something, by definition you find it not confusing. Why should we doom x% of new users to writing a loop incorrectly at least once when we don&#39;t have to?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Ah, but if you’re not “doomed” to failing once, how will you ever master anything? Nobody knew how to write a C for-loop until someone showed them (and even then…). Nobody is going to just open a REPL and start writing code, with zero prior understanding of what Swift syntax looks like.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The thought here is along the lines of what Chris said, quoted above, and repeated here: &quot;The extended C family of language [...] is an extremely popular and widely used set[;] programmers move around and work in different languages, and [aligning to expectations arising from other C family languages] allows a non-expert in the language to understand what is going on.&quot; By contrast, the `where` clause violates that expectation and I do not see &quot;overwhelmingly large advantages&quot; for doing so.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; What about C#&#39;s `where` then? As C# is a member of the C family languages `where` is not violating expectations!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Where is not exactly a part of c# it belongs to linq<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And that is not a part of C#??<br>&gt;&gt; <br>&gt;&gt; SQL is a domain-specific language, and LINQ is an internal domain-specific language with a language extension for C#. Neither is a general purpose language.<br>&gt;&gt; <br>&gt;&gt; Your example actually goes to one of Laurent&#39;s points. Should the Swift core team or an enterprising community member propose a set of similarly powerful tools, along with a set of language extensions that add syntactic sugar for them, I (and I think Laurent, if I understand him correctly) would absolutely be in favor of such an addition. But as it is, `where` is an odd duckling. Just as you say, it looks like a component of a query language, but it does no such thing. In a for loop, it does some filtering, but until recently it functioned like a comma in `while` loops. Look at those other keywords which make this sugar possible in C#: in your example, `from` and `select`. We don&#39;t have any of that intrastructure in Swift.<br>&gt;&gt;  <br>&gt; <br>&gt; IMHO the team has taken an Ockham Axe to the grammar: in the presence of multiple ways to produce the same or an acceptable stand-in (for eg when the only difference is an acceptable temporary perf setback), then the solution requiring the least assumptions on the compiler wins. <br>&gt; <br>&gt; I would even extend this rule with the corollary that between an assumption materialized as a type checker rule and an assumption materialized as a full blown extra language keyword, there might be a bias to accept the former if it kills the latter. But this is just my personal inference of what their decision heuristic might be based solely on what I saw. My sole interest in trying to understand their decision making process is to try to avoid proposals that have little to no chance to go anywhere, as well as trying to present ones that will align better with where the language is going.<br>&gt; <br>&gt; In this instance, WHERE is a heavy assumption on the compiler for no greater gain than filters can provide. So I think we save the WHERE keyword for an outcome that will be really worth it! Something along the idea of Linq, but with a proper Swift feel to it. What does it look like? I cannot say yet. But the good news is that having taken WHERE out now will make that next step a purely additive process (nothing will be taken out then, but a big thing will be gained). <br>&gt; <br>&gt; <br>&gt;&gt;&gt; The following is an example from MSDN with `where` clearly beaing a keyword:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; var numQuery = from num in numbers where (num % 2) == 0 select num;<br>&gt; <br>&gt; <br>&gt; Here is food for your thoughts, you think WHERE is a keyword?! then look at this:<br>&gt; <br>&gt; var numbers = new int[]{0,1,23,4,5,6,7,87,9};<br>&gt; var numQuery = from num in numbers where (num % 2) == 0 select num;<br>&gt; <br>&gt; Program does not compile:<br>&gt; <br>&gt; // Error CS1935: An implementation of `Where&#39; query expression pattern could not be found. Are you missing `System.Linq&#39; using directive or `System.Core.dll&#39; assembly reference? (CS1935) (SessionsFinder)<br>&gt; <br>&gt; using System.Linq;<br>&gt; var numbers = new int[]{0,1,23,4,5,6,7,87,9};<br>&gt; var numQuery = from num in numbers where (num % 2) == 0 select num;<br>&gt; <br>&gt; That program does compiles and runs fine. This tells you that “where&quot; is not at all the ordinary keyword that it appears to be. hence my “it is not C# per-se, it is Linq”. And if you still wonder, then rewrite the code so that “WHERE” no longer looks like a keyword:<br>&gt; <br>&gt; var numQuery2 = numbers.Where( num =&gt; num %2 == 0);	// exact same result as numQuery1<br>&gt; <br>&gt; <br>&gt; These are other real life examples from a OS X tool I wrote recently: <br>&gt; <br>&gt; IEnumerable&lt;Task&lt;Session&gt;&gt; asyncOps = from session in sessions.Values select parseSessionDetails(updater, parser, session);<br>&gt; var ul = node.Descendants().Where(x =&gt; x.Name == &quot;ul&quot;).First();<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160612/4643f8d9/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>June 12, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; Am 12.06.2016 um 12:02 schrieb L Mihalkovic &lt;laurent.mihalkovic at gmail.com&gt;:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 11, 2016, at 11:45 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Sat, Jun 11, 2016 at 3:37 PM, Thorsten Seitz &lt;tseitz42 at icloud.com &lt;mailto:tseitz42 at icloud.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Am 11.06.2016 um 22:29 schrieb L. Mihalkovic &lt;laurent.mihalkovic at gmail.com &lt;mailto:laurent.mihalkovic at gmail.com&gt;&gt;:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jun 11, 2016, at 9:53 PM, Thorsten Seitz via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Am 10.06.2016 um 18:28 schrieb Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 6:10 AM, Karl &lt;razielim at gmail.com &lt;mailto:razielim at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; -1<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; * Swift is explicitly a C-family language. In most or all other C-family languages, for loop statements allow specification of conditions for exiting the loop but not for filtering. Therefore, Swift&#39;s use of `where` is unprecedented and needs to be learned anew by every user of Swift.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; When was this decided? I distinctly remember some bloke under Craig Federighi’s hair saying that it was time to “move beyond” C and essentially ditch legacy conventions which no longer make sense.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I think you misunderstood my argument here. I don&#39;t mean that we should yoke ourselves to C conventions, and we should absolutely ditch C convention when it doesn&#39;t make sense. The big-picture argument here is that `where` doesn&#39;t pass the bar of correcting a C convention that no longer makes sense.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; FWIW, on the topic of syntax choices, here is what Chris Lattner had to say on this list:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Kevin got it exactly right, but I’d expand that last bit a bit to:<br>&gt;&gt;&gt;&gt;&gt; “… picking the one that is most familiar to programmers in the extended C family is a good idea.[&quot;]<br>&gt;&gt;&gt;&gt;&gt; The extended C family of language (which includes C, C++, ObjC, but also C#, Java, Javascript, and more) is<br>&gt;&gt;&gt;&gt;&gt; an extremely popular and widely used set of languages that have a lot of surface-level similarity. I<br>&gt;&gt;&gt;&gt;&gt; don’t claim to know the design rationale of all of these languages, but I surmise that this is not an<br>&gt;&gt;&gt;&gt;&gt; accident: programmers move around and work in different languages, and this allows a non-expert in the<br>&gt;&gt;&gt;&gt;&gt; language to understand what is going on. While there are things about C that are really unfortunate IMO<br>&gt;&gt;&gt;&gt;&gt; (e.g. the declarator/declaration specifier part of the grammar) there is a lot of goodness in the basic<br>&gt;&gt;&gt;&gt;&gt; operator set, focus on dot syntax, and more.<br>&gt;&gt;&gt;&gt;&gt; I do agree that there are some benefits to ditching braces and relying on indentation instead, but there are<br>&gt;&gt;&gt;&gt;&gt; also downsides. Deviating from the C family in this respect would have to provide *overwhelmingly* large <br>&gt;&gt;&gt;&gt;&gt; advantages for us to take such a plunge, and they simply don’t exist.<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; As I understand it, Swift is a new language with new conventions. It is desirable to align as many of those as possible with existing conventions so as to be easily learned, but if you limit Swift to other languages conventions you deny it any identity. Did Python ask anybody’s opinion before dropping curly-braces? Did people learn whatever Perl is supposed to be? Look at C’s hieroglyphic for loops! <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I don&#39;t think we disagree here.<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Realistically, “for … in … while” is not going to cause incredible confusion. Removing it would cause a lot of frustration. You can’t on the one hand say our users are comfortable with the axioms of C’s hieroglyphic loops, and on the other hand say “for x in y while&quot; is confusing.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Again, as I said, once you&#39;ve mastered something, by definition you find it not confusing. Why should we doom x% of new users to writing a loop incorrectly at least once when we don&#39;t have to?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Ah, but if you’re not “doomed” to failing once, how will you ever master anything? Nobody knew how to write a C for-loop until someone showed them (and even then…). Nobody is going to just open a REPL and start writing code, with zero prior understanding of what Swift syntax looks like.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The thought here is along the lines of what Chris said, quoted above, and repeated here: &quot;The extended C family of language [...] is an extremely popular and widely used set[;] programmers move around and work in different languages, and [aligning to expectations arising from other C family languages] allows a non-expert in the language to understand what is going on.&quot; By contrast, the `where` clause violates that expectation and I do not see &quot;overwhelmingly large advantages&quot; for doing so.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What about C#&#39;s `where` then? As C# is a member of the C family languages `where` is not violating expectations!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Where is not exactly a part of c# it belongs to linq<br>&gt;&gt; <br>&gt;&gt; And that is not a part of C#??<br>&gt;&gt; <br>&gt;&gt; SQL is a domain-specific language, and LINQ is an internal domain-specific language with a language extension for C#. Neither is a general purpose language.<br>&gt;&gt; <br>&gt;&gt; Your example actually goes to one of Laurent&#39;s points. Should the Swift core team or an enterprising community member propose a set of similarly powerful tools, along with a set of language extensions that add syntactic sugar for them, I (and I think Laurent, if I understand him correctly) would absolutely be in favor of such an addition. But as it is, `where` is an odd duckling. Just as you say, it looks like a component of a query language, but it does no such thing. In a for loop, it does some filtering, but until recently it functioned like a comma in `while` loops. Look at those other keywords which make this sugar possible in C#: in your example, `from` and `select`. We don&#39;t have any of that intrastructure in Swift.<br>&gt;&gt;  <br>&gt; <br>&gt; IMHO the team has taken an Ockham Axe to the grammar: in the presence of multiple ways to produce the same or an acceptable stand-in (for eg when the only difference is an acceptable temporary perf setback), then the solution requiring the least assumptions on the compiler wins. <br>&gt; <br>&gt; I would even extend this rule with the corollary that between an assumption materialized as a type checker rule and an assumption materialized as a full blown extra language keyword, there might be a bias to accept the former if it kills the latter. But this is just my personal inference of what their decision heuristic might be based solely on what I saw. My sole interest in trying to understand their decision making process is to try to avoid proposals that have little to no chance to go anywhere, as well as trying to present ones that will align better with where the language is going.<br>&gt; <br>&gt; In this instance, WHERE is a heavy assumption on the compiler for no greater gain than filters can provide. So I think we save the WHERE keyword for an outcome that will be really worth it! Something along the idea of Linq, but with a proper Swift feel to it. What does it look like? I cannot say yet. But the good news is that having taken WHERE out now will make that next step a purely additive process (nothing will be taken out then, but a big thing will be gained). <br></p><p>I am all for extending `for` to be more like Scala’s `for`-expression or Haskell’s `do`-notation. LINQ might be too focused on querying.<br>Extending the current `where` to be syntax sugar for `filter` would be quite straightforward, though, so I’m not sure whether removing it first is really necessary. <br>That was not object of the pitch to retire `where` from `for`-loops, though. Instead the argument was (and still is) that `where` might be misunderstood there by beginners and should therefore be removed. This argument would apply to an extended `where` unchanged, because I can still write the exact same code as being criticized now and can even do more complicated things which would by even more hard to understand for beginners.<br>That’s the argument I disagree with.<br></p><p><br>&gt; <br>&gt; <br>&gt;&gt; The following is an example from MSDN with `where` clearly beaing a keyword:<br>&gt;&gt; <br>&gt;&gt; var numQuery = from num in numbers where (num % 2) == 0 select num;<br>&gt; <br>&gt; <br>&gt; Here is food for your thoughts, you think WHERE is a keyword?! then look at this:<br>&gt; <br>&gt; var numbers = new int[]{0,1,23,4,5,6,7,87,9};<br>&gt; var numQuery = from num in numbers where (num % 2) == 0 select num;<br>&gt; <br>&gt; Program does not compile:<br>&gt; <br>&gt; // Error CS1935: An implementation of `Where&#39; query expression pattern could not be found. Are you missing `System.Linq&#39; using directive or `System.Core.dll&#39; assembly reference? (CS1935) (SessionsFinder)<br>&gt; <br>&gt; using System.Linq;<br>&gt; var numbers = new int[]{0,1,23,4,5,6,7,87,9};<br>&gt; var numQuery = from num in numbers where (num % 2) == 0 select num;<br>&gt; <br>&gt; That program does compiles and runs fine. This tells you that “where&quot; is not at all the ordinary keyword that it appears to be. hence my “it is not C# per-se, it is Linq”.<br></p><p>Digging into https://msdn.microsoft.com/en-us/library/bb397909.aspx and https://msdn.microsoft.com/en-us/library/the35c6y.aspx tells me the following:<br>(1) `from`, `where` etc. are contextual keywords, but they are nonetheless keywords of C# and expressly *not* a specific feature of LINQ: &quot;Although these new features are all used to a degree with LINQ queries, they are not limited to LINQ and can be used in any context where you find them useful.&quot;<br>(2) the compiler translates them into standard method calls (like Scala’s `for`-expression or Haskell’s `do`-notation). That is an integral part of C#.<br>(3) your error message originates from not having an implementation of a `Where`-method in scope. You could have provided one yourself instead of `using System.Linq`.<br></p><p><br>&gt; And if you still wonder, then rewrite the code so that “WHERE” no longer looks like a keyword:<br>&gt; <br>&gt; var numQuery2 = numbers.Where( num =&gt; num %2 == 0);	// exact same result as numQuery1<br></p><p>That’s exactly what I expected as it is the standard way syntactic language sugar is mapped to customizable behavior. Haskell’s `do`-notation or Scala’s `for`-expression are mapped likewise to functions on the types used.<br></p><p>-Thorsten<br></p><p><br>&gt; <br>&gt; <br>&gt; These are other real life examples from a OS X tool I wrote recently: <br>&gt; <br>&gt; IEnumerable&lt;Task&lt;Session&gt;&gt; asyncOps = from session in sessions.Values select parseSessionDetails(updater, parser, session);<br>&gt; var ul = node.Descendants().Where(x =&gt; x.Name == &quot;ul&quot;).First();<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160612/f5a56678/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 12, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Jun 12, 2016, at 3:21 PM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt;&gt; Am 12.06.2016 um 12:02 schrieb L Mihalkovic &lt;laurent.mihalkovic at gmail.com&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jun 11, 2016, at 11:45 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Sat, Jun 11, 2016 at 3:37 PM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Am 11.06.2016 um 22:29 schrieb L. Mihalkovic &lt;laurent.mihalkovic at gmail.com&gt;:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jun 11, 2016, at 9:53 PM, Thorsten Seitz via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Am 10.06.2016 um 18:28 schrieb Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 6:10 AM, Karl &lt;razielim at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -1<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; * Swift is explicitly a C-family language. In most or all other C-family languages, for loop statements allow specification of conditions for exiting the loop but not for filtering. Therefore, Swift&#39;s use of `where` is unprecedented and needs to be learned anew by every user of Swift.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; When was this decided? I distinctly remember some bloke under Craig Federighi’s hair saying that it was time to “move beyond” C and essentially ditch legacy conventions which no longer make sense.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think you misunderstood my argument here. I don&#39;t mean that we should yoke ourselves to C conventions, and we should absolutely ditch C convention when it doesn&#39;t make sense. The big-picture argument here is that `where` doesn&#39;t pass the bar of correcting a C convention that no longer makes sense.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; FWIW, on the topic of syntax choices, here is what Chris Lattner had to say on this list:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Kevin got it exactly right, but I’d expand that last bit a bit to:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; “… picking the one that is most familiar to programmers in the extended C family is a good idea.[&quot;]<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The extended C family of language (which includes C, C++, ObjC, but also C#, Java, Javascript, and more) is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; an extremely popular and widely used set of languages that have a lot of surface-level similarity. I<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; don’t claim to know the design rationale of all of these languages, but I surmise that this is not an<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; accident: programmers move around and work in different languages, and this allows a non-expert in the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; language to understand what is going on. While there are things about C that are really unfortunate IMO<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; (e.g. the declarator/declaration specifier part of the grammar) there is a lot of goodness in the basic<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; operator set, focus on dot syntax, and more.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I do agree that there are some benefits to ditching braces and relying on indentation instead, but there are<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; also downsides. Deviating from the C family in this respect would have to provide *overwhelmingly* large <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; advantages for us to take such a plunge, and they simply don’t exist.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; As I understand it, Swift is a new language with new conventions. It is desirable to align as many of those as possible with existing conventions so as to be easily learned, but if you limit Swift to other languages conventions you deny it any identity. Did Python ask anybody’s opinion before dropping curly-braces? Did people learn whatever Perl is supposed to be? Look at C’s hieroglyphic for loops! <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t think we disagree here.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Realistically, “for … in … while” is not going to cause incredible confusion. Removing it would cause a lot of frustration. You can’t on the one hand say our users are comfortable with the axioms of C’s hieroglyphic loops, and on the other hand say “for x in y while&quot; is confusing.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Again, as I said, once you&#39;ve mastered something, by definition you find it not confusing. Why should we doom x% of new users to writing a loop incorrectly at least once when we don&#39;t have to?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Ah, but if you’re not “doomed” to failing once, how will you ever master anything? Nobody knew how to write a C for-loop until someone showed them (and even then…). Nobody is going to just open a REPL and start writing code, with zero prior understanding of what Swift syntax looks like.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The thought here is along the lines of what Chris said, quoted above, and repeated here: &quot;The extended C family of language [...] is an extremely popular and widely used set[;] programmers move around and work in different languages, and [aligning to expectations arising from other C family languages] allows a non-expert in the language to understand what is going on.&quot; By contrast, the `where` clause violates that expectation and I do not see &quot;overwhelmingly large advantages&quot; for doing so.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; What about C#&#39;s `where` then? As C# is a member of the C family languages `where` is not violating expectations!<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Where is not exactly a part of c# it belongs to linq<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; And that is not a part of C#??<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; SQL is a domain-specific language, and LINQ is an internal domain-specific language with a language extension for C#. Neither is a general purpose language.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Your example actually goes to one of Laurent&#39;s points. Should the Swift core team or an enterprising community member propose a set of similarly powerful tools, along with a set of language extensions that add syntactic sugar for them, I (and I think Laurent, if I understand him correctly) would absolutely be in favor of such an addition. But as it is, `where` is an odd duckling. Just as you say, it looks like a component of a query language, but it does no such thing. In a for loop, it does some filtering, but until recently it functioned like a comma in `while` loops. Look at those other keywords which make this sugar possible in C#: in your example, `from` and `select`. We don&#39;t have any of that intrastructure in Swift.<br>&gt;&gt;&gt;  <br>&gt;&gt; <br>&gt;&gt; IMHO the team has taken an Ockham Axe to the grammar: in the presence of multiple ways to produce the same or an acceptable stand-in (for eg when the only difference is an acceptable temporary perf setback), then the solution requiring the least assumptions on the compiler wins. <br>&gt;&gt; <br>&gt;&gt; I would even extend this rule with the corollary that between an assumption materialized as a type checker rule and an assumption materialized as a full blown extra language keyword, there might be a bias to accept the former if it kills the latter. But this is just my personal inference of what their decision heuristic might be based solely on what I saw. My sole interest in trying to understand their decision making process is to try to avoid proposals that have little to no chance to go anywhere, as well as trying to present ones that will align better with where the language is going.<br>&gt;&gt; <br>&gt;&gt; In this instance, WHERE is a heavy assumption on the compiler for no greater gain than filters can provide. So I think we save the WHERE keyword for an outcome that will be really worth it! Something along the idea of Linq, but with a proper Swift feel to it. What does it look like? I cannot say yet. But the good news is that having taken WHERE out now will make that next step a purely additive process (nothing will be taken out then, but a big thing will be gained). <br>&gt; <br>&gt; I am all for extending `for` to be more like Scala’s `for`-expression or Haskell’s `do`-notation. LINQ might be too focused on querying.<br>&gt; Extending the current `where` to be syntax sugar for `filter` would be quite straightforward, though, so I’m not sure whether removing it first is really necessary. <br>&gt; That was not object of the pitch to retire `where` from `for`-loops, though. Instead the argument was (and still is) that `where` might be misunderstood there by beginners and should therefore be removed. This argument would apply to an extended `where` unchanged, because I can still write the exact same code as being criticized now and can even do more complicated things which would by even more hard to understand for beginners.<br>&gt; That’s the argument I disagree with.<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;&gt; The following is an example from MSDN with `where` clearly beaing a keyword:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; var numQuery = from num in numbers where (num % 2) == 0 select num;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Here is food for your thoughts, you think WHERE is a keyword?! then look at this:<br>&gt;&gt; <br>&gt;&gt; var numbers = new int[]{0,1,23,4,5,6,7,87,9};<br>&gt;&gt; var numQuery = from num in numbers where (num % 2) == 0 select num;<br>&gt;&gt; <br>&gt;&gt; Program does not compile:<br>&gt;&gt; <br>&gt;&gt; // Error CS1935: An implementation of `Where&#39; query expression pattern could not be found. Are you missing `System.Linq&#39; using directive or `System.Core.dll&#39; assembly reference? (CS1935) (SessionsFinder)<br>&gt;&gt; <br>&gt;&gt; using System.Linq;<br>&gt;&gt; var numbers = new int[]{0,1,23,4,5,6,7,87,9};<br>&gt;&gt; var numQuery = from num in numbers where (num % 2) == 0 select num;<br>&gt;&gt; <br>&gt;&gt; That program does compiles and runs fine. This tells you that “where&quot; is not at all the ordinary keyword that it appears to be. hence my “it is not C# per-se, it is Linq”.<br>&gt; <br>&gt; Digging into https://msdn.microsoft.com/en-us/library/bb397909.aspx and https://msdn.microsoft.com/en-us/library/the35c6y.aspx tells me the following:<br>&gt; (1) `from`, `where` etc. are contextual keywords, but they are nonetheless keywords of C# and expressly *not* a specific feature of LINQ: &quot;Although these new features are all used to a degree with LINQ queries, they are not limited to LINQ and can be used in any context where you find them useful.&quot;<br>&gt; (2) the compiler translates them into standard method calls (like Scala’s `for`-expression or Haskell’s `do`-notation). That is an integral part of C#.<br>&gt; (3) your error message originates from not having an implementation of a `Where`-method in scope. You could have provided one yourself instead of `using System.Linq`.<br>&gt; <br></p><p>Of course the compiler knows about it... My exact wording was &quot;ordinary keyword&quot; implying, &quot;it is one, just not in the sense you are giving it right now&quot;. Knowing you would want to dig further I had to find a description that was true albeit leaving the fine details out (i doubt too may actually care about the distinction between contextual and non-contextual kwd, or the fact that sql is turing complete ;) ). <br></p><p>My thought is to accept the downgrading from its current status because its complete behavior is limited and hetched in blood inside the grammar, therefore not extensible without grammar alterations; thereby leaving the door open for a future re-introduction ala-Linq in v4+. I use the term &quot;ala-linq&quot; as a placeholder for &quot;some sort of more dynamic behavior resulting from a close collaboration between compiler, stdlib, runtime and user code&quot;. And i still believe nobody outside doug, joe, chris, or jordan cares about the actual implementation details. <br></p><p>Again, this is just a personal view on what looks IMHO like a great opportunity.<br></p><p><br>&gt;&gt; And if you still wonder, then rewrite the code so that “WHERE” no longer looks like a keyword:<br>&gt;&gt; <br>&gt;&gt; var numQuery2 = numbers.Where( num =&gt; num %2 == 0);	// exact same result as numQuery1<br>&gt; <br>&gt; That’s exactly what I expected as it is the standard way syntactic language sugar is mapped to customizable behavior. Haskell’s `do`-notation or Scala’s `for`-expression are mapped likewise to functions on the types used.<br>&gt; <br>&gt; -Thorsten<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; These are other real life examples from a OS X tool I wrote recently: <br>&gt;&gt; <br>&gt;&gt; IEnumerable&lt;Task&lt;Session&gt;&gt; asyncOps = from session in sessions.Values select parseSessionDetails(updater, parser, session);<br>&gt;&gt; var ul = node.Descendants().Where(x =&gt; x.Name == &quot;ul&quot;).First();<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160612/7131b67a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 12, 2016 at 07:00:00pm</p></header><div class="content"><p>On Sun, Jun 12, 2016 at 9:23 AM, L. Mihalkovic &lt;laurent.mihalkovic at gmail.com<br>&gt; wrote:<br></p><p>&gt;<br>&gt; On Jun 12, 2016, at 3:21 PM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; Am 12.06.2016 um 12:02 schrieb L Mihalkovic &lt;laurent.mihalkovic at gmail.com<br>&gt; &gt;:<br>&gt;<br>&gt;<br>&gt; On Jun 11, 2016, at 11:45 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Sat, Jun 11, 2016 at 3:37 PM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Am 11.06.2016 um 22:29 schrieb L. Mihalkovic &lt;<br>&gt;&gt; laurent.mihalkovic at gmail.com&gt;:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Jun 11, 2016, at 9:53 PM, Thorsten Seitz via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Am 10.06.2016 um 18:28 schrieb Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt;:<br>&gt;&gt;<br>&gt;&gt; On Fri, Jun 10, 2016 at 6:10 AM, Karl &lt;razielim at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; -1<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; * Swift is explicitly a C-family language. In most or all other C-family<br>&gt;&gt;&gt; languages, for loop statements allow specification of conditions for<br>&gt;&gt;&gt; exiting the loop but not for filtering. Therefore, Swift&#39;s use of `where`<br>&gt;&gt;&gt; is unprecedented and needs to be learned anew by every user of Swift.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; When was this decided? I distinctly remember some bloke under Craig<br>&gt;&gt;&gt; Federighi’s hair saying that it was time to “move beyond” C and essentially<br>&gt;&gt;&gt; ditch legacy conventions which no longer make sense.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I think you misunderstood my argument here. I don&#39;t mean that we should<br>&gt;&gt; yoke ourselves to C conventions, and we should absolutely ditch C<br>&gt;&gt; convention when it doesn&#39;t make sense. The big-picture argument here is<br>&gt;&gt; that `where` doesn&#39;t pass the bar of correcting a C convention that no<br>&gt;&gt; longer makes sense.<br>&gt;&gt;<br>&gt;&gt; FWIW, on the topic of syntax choices, here is what Chris Lattner had to<br>&gt;&gt; say on this list:<br>&gt;&gt;<br>&gt;&gt; Kevin got it exa*c*tly right, but I’d expand that last bit a bit to:<br>&gt;&gt;&gt; “… pi*c*king the one that is most familiar to programmers in the<br>&gt;&gt;&gt; extended *C* *family* is a good idea.[&quot;]<br>&gt;&gt;&gt; The extended *C* *family* of language (whi*c*h in*c*ludes *C*, *C*++,<br>&gt;&gt;&gt; Obj*C*, but also *C*#, Java, Javas*c*ript, and more) is<br>&gt;&gt;&gt; an extremely popular and widely used set of languages that have a lot of<br>&gt;&gt;&gt; surfa*c*e-level similarity. I<br>&gt;&gt;&gt; don’t *c*laim to know the design rationale of all of these languages,<br>&gt;&gt;&gt; but I surmise that this is not an<br>&gt;&gt;&gt; a*c**c*ident: programmers move around and work in different languages,<br>&gt;&gt;&gt; and this allows a non-expert in the<br>&gt;&gt;&gt; language to understand what is going on. While there are things about<br>&gt;&gt;&gt; *C* that are really unfortunate IMO<br>&gt;&gt;&gt; (e.g. the de*c*larator/de*c*laration spe*c*ifier part of the grammar)<br>&gt;&gt;&gt; there is a lot of goodness in the basi<br>&gt;&gt;&gt; *c*operator set, fo*c*us on dot syntax, and more.<br>&gt;&gt;&gt; I do agree that there are some benefits to dit*c*hing bra*c*es and<br>&gt;&gt;&gt; relying on indentation instead, but there are<br>&gt;&gt;&gt; also downsides. Deviating from the *C* *family* in this respe*c*t would<br>&gt;&gt;&gt; have to provide **overwhelmingly** large<br>&gt;&gt;&gt; advantages for us to take su*c*h a plunge, and they simply don’t exist.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; As I understand it, Swift is a new language with new conventions. It is<br>&gt;&gt;&gt; desirable to align as many of those as possible with existing conventions<br>&gt;&gt;&gt; so as to be easily learned, but if you limit Swift to other languages<br>&gt;&gt;&gt; conventions you deny it any identity. Did Python ask anybody’s opinion<br>&gt;&gt;&gt; before dropping curly-braces? Did people learn whatever Perl is supposed to<br>&gt;&gt;&gt; be? Look at C’s hieroglyphic for loops!<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I don&#39;t think we disagree here.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Realistically, “for … in … while” is not going to cause incredible<br>&gt;&gt;&gt; confusion. Removing it would cause a lot of frustration. You can’t on the<br>&gt;&gt;&gt; one hand say our users are comfortable with the axioms of C’s hieroglyphic<br>&gt;&gt;&gt; loops, and on the other hand say “for x in y while&quot; is confusing.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Again, as I said, once you&#39;ve mastered something, by definition you find<br>&gt;&gt;&gt; it not confusing. Why should we doom x% of new users to writing a loop<br>&gt;&gt;&gt; incorrectly at least once when we don&#39;t have to?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Ah, but if you’re not “doomed” to failing once, how will you ever master<br>&gt;&gt;&gt; anything? Nobody knew how to write a C for-loop until someone showed them<br>&gt;&gt;&gt; (and even then…). Nobody is going to just open a REPL and start writing<br>&gt;&gt;&gt; code, with zero prior understanding of what Swift syntax looks like.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; The thought here is along the lines of what Chris said, quoted above, and<br>&gt;&gt; repeated here: &quot;The extended C family of language [...] is an extremely<br>&gt;&gt; popular and widely used set[;] programmers move around and work in<br>&gt;&gt; different languages, and [aligning to expectations arising from other C<br>&gt;&gt; family languages] allows a non-expert in the language to understand what is<br>&gt;&gt; going on.&quot; By contrast, the `where` clause violates that expectation and I<br>&gt;&gt; do not see &quot;overwhelmingly large advantages&quot; for doing so.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; What about C#&#39;s `where` then? As C# is a member of the C family languages<br>&gt;&gt; `where` is not violating expectations!<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Where is not exactly a part of c# it belongs to linq<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; And that is not a part of C#??<br>&gt;&gt;<br>&gt;<br>&gt; SQL is a domain-specific language, and LINQ is an internal domain-specific<br>&gt; language with a language extension for C#. Neither is a general purpose<br>&gt; language.<br>&gt;<br>&gt; Your example actually goes to one of Laurent&#39;s points. Should the Swift<br>&gt; core team or an enterprising community member propose a set of similarly<br>&gt; powerful tools, along with a set of language extensions that add syntactic<br>&gt; sugar for them, I (and I think Laurent, if I understand him correctly)<br>&gt; would absolutely be in favor of such an addition. But as it is, `where` is<br>&gt; an odd duckling. Just as you say, it looks like a component of a query<br>&gt; language, but it does no such thing. In a for loop, it does some filtering,<br>&gt; but until recently it functioned like a comma in `while` loops. Look at<br>&gt; those other keywords which make this sugar possible in C#: in your example,<br>&gt; `from` and `select`. We don&#39;t have any of that intrastructure in Swift.<br>&gt;<br>&gt;<br>&gt;<br>&gt; IMHO the team has taken an Ockham Axe to the grammar: in the presence of<br>&gt; multiple ways to produce the same or an acceptable stand-in (for eg when<br>&gt; the only difference is an acceptable temporary perf setback), then the<br>&gt; solution requiring the least assumptions on the compiler wins.<br>&gt;<br>&gt; I would even extend this rule with the corollary that between an<br>&gt; assumption materialized as a type checker rule and an assumption<br>&gt; materialized as a full blown extra language keyword, there might be a bias<br>&gt; to accept the former if it kills the latter. But this is just my personal<br>&gt; inference of what their decision heuristic might be based solely on what I<br>&gt; saw. My sole interest in trying to understand their decision making process<br>&gt; is to try to avoid proposals that have little to no chance to go anywhere,<br>&gt; as well as trying to present ones that will align better with where the<br>&gt; language is going.<br>&gt;<br>&gt; In this instance, WHERE is a heavy assumption on the compiler for no<br>&gt; greater gain than filters can provide. So I think we save the WHERE keyword<br>&gt; for an outcome that will be really worth it! Something along the idea of<br>&gt; Linq, but with a proper Swift feel to it. What does it look like? I cannot<br>&gt; say yet. But the good news is that having taken WHERE out now will make<br>&gt; that next step a purely additive process (nothing will be taken out then,<br>&gt; but a big thing will be gained).<br>&gt;<br>&gt;<br>&gt; I am all for extending `for` to be more like Scala’s `for`-expression or<br>&gt; Haskell’s `do`-notation. LINQ might be too focused on querying.<br>&gt; Extending the current `where` to be syntax sugar for `filter` would be<br>&gt; quite straightforward, though, so I’m not sure whether removing it first is<br>&gt; really necessary.<br>&gt; That was not object of the pitch to retire `where` from `for`-loops,<br>&gt; though. Instead the argument was (and still is) that `where` might be<br>&gt; misunderstood there by beginners and should therefore be removed. This<br>&gt; argument would apply to an extended `where` unchanged, because I can still<br>&gt; write the exact same code as being criticized now and can even do more<br>&gt; complicated things which would by even more hard to understand for<br>&gt; beginners.<br>&gt; That’s the argument I disagree with.<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; The following is an example from MSDN with `where` clearly beaing a<br>&gt;&gt; keyword:<br>&gt;&gt;<br>&gt;&gt; *var* numQuery = *from* num *in* numbers *where* (num % 2) == 0 *select* num;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; Here is food for your thoughts, you think WHERE is a keyword?! then look<br>&gt; at this:<br>&gt;<br>&gt; var numbers = new int[]{0,1,23,4,5,6,7,87,9};<br>&gt; var numQuery = from num in numbers where (num % 2) == 0 select num;<br>&gt;<br>&gt; Program does not compile:<br>&gt;<br>&gt; // Error CS1935: An implementation of `Where&#39; query expression pattern<br>&gt; could not be found. Are you missing `System.Linq&#39; using directive or<br>&gt; `System.Core.dll&#39; assembly reference? (CS1935) (SessionsFinder)<br>&gt;<br>&gt; using System.Linq;<br>&gt; var numbers = new int[]{0,1,23,4,5,6,7,87,9};<br>&gt; var numQuery = from num in numbers where (num % 2) == 0 select num;<br>&gt;<br>&gt; That program does compiles and runs fine. This tells you that “where&quot; is<br>&gt; not at all the ordinary keyword that it appears to be. hence my “it is not<br>&gt; C# per-se, it is Linq”.<br>&gt;<br>&gt;<br>&gt; Digging into https://msdn.microsoft.com/en-us/library/bb397909.aspx and<br>&gt; https://msdn.microsoft.com/en-us/library/the35c6y.aspx tells me the<br>&gt; following:<br>&gt; (1) `from`, `where` etc. are contextual keywords, but they are nonetheless<br>&gt; keywords of C# and expressly *not* a specific feature of LINQ: &quot;Although<br>&gt; these new features are all used to a degree with LINQ queries, they are not<br>&gt; limited to LINQ and can be used in any context where you find them useful.&quot;<br>&gt; (2) the compiler translates them into standard method calls (like Scala’s<br>&gt; `for`-expression or Haskell’s `do`-notation). That is an integral part of<br>&gt; C#.<br>&gt; (3) your error message originates from not having an implementation of a<br>&gt; `Where`-method in scope. You could have provided one yourself instead of<br>&gt; `using System.Linq`.<br>&gt;<br>&gt;<br>&gt; Of course the compiler knows about it... My exact wording was &quot;ordinary<br>&gt; keyword&quot; implying, &quot;it is one, just not in the sense you are giving it<br>&gt; right now&quot;. Knowing you would want to dig further I had to find a<br>&gt; description that was true albeit leaving the fine details out (i doubt too<br>&gt; may actually care about the distinction between contextual and<br>&gt; non-contextual kwd, or the fact that sql is turing complete ;) ).<br>&gt;<br>&gt; My thought is to accept the downgrading from its current status because<br>&gt; its complete behavior is limited and hetched in blood inside the grammar,<br>&gt; therefore not extensible without grammar alterations; thereby leaving the<br>&gt; door open for a future re-introduction ala-Linq in v4+. I use the term<br>&gt; &quot;ala-linq&quot; as a placeholder for &quot;some sort of more dynamic behavior<br>&gt; resulting from a close collaboration between compiler, stdlib, runtime and<br>&gt; user code&quot;. And i still believe nobody outside doug, joe, chris, or jordan<br>&gt; cares about the actual implementation details.<br>&gt;<br>&gt; Again, this is just a personal view on what looks IMHO like a great<br>&gt; opportunity.<br>&gt;<br></p><p>Well said. Like you, I don&#39;t know what the core team&#39;s feelings would be<br>with respect to contextual sugar for domain-specific uses. IMHO, it is a<br>very neat concept. If it does arrive in Swift 4+, then `where` as sugar for<br>`filter()` should come with that. If that&#39;s not the direction that the core<br>team wants to go, I fail to see why filtering a sequence specifically as<br>part of a loop should be privileged above any other useful operation that<br>would have a similarly strong claim to sugar.<br></p><p><br>&gt; And if you still wonder, then rewrite the code so that “WHERE” no longer<br>&gt; looks like a keyword:<br>&gt;<br>&gt; var numQuery2 = numbers.Where( num =&gt; num %2 == 0); // exact same result<br>&gt; as numQuery1<br>&gt;<br>&gt;<br>&gt; That’s exactly what I expected as it is the standard way syntactic<br>&gt; language sugar is mapped to customizable behavior. Haskell’s `do`-notation<br>&gt; or Scala’s `for`-expression are mapped likewise to functions on the types<br>&gt; used.<br>&gt;<br>&gt; -Thorsten<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; These are other real life examples from a OS X tool I wrote recently:<br>&gt;<br>&gt; IEnumerable&lt;Task&lt;Session&gt;&gt; asyncOps = from session in sessions.Values<br>&gt; select parseSessionDetails(updater, parser, session);<br>&gt; var ul = node.Descendants().Where(x =&gt; x.Name == &quot;ul&quot;).First();<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160612/00385b87/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 10, 2016 at 01:00:00pm</p></header><div class="content"><p>using WHERE in this context had a flair of C# Linq, only not coming even close to what can be done with Linq… I think pulling out WHERE from the places where advanced users might make that connection is a wise decision that will avoid people calling it a really-poor-man’s replacement for Linq.  With a bit of luck, a truly smart   .WHERE (yes &#39;.’) might one day resurface (even under a different name), but this type with REAL horse power.  <br></p><p>just a thought.<br></p><p><br>&gt; On Jun 10, 2016, at 8:25 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Fri, Jun 10, 2016 at 12:48 AM, Brandon Knope &lt;bknope at me.com &lt;mailto:bknope at me.com&gt;&gt; wrote:<br>&gt; <br>&gt; <br>&gt; On Jun 10, 2016, at 1:08 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Thu, Jun 9, 2016 at 9:45 PM, Dany St-Amant &lt;dsa.mls at icloud.com &lt;mailto:dsa.mls at icloud.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Le 9 juin 2016 à 14:55, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt;&gt; There have been, in previous threads, several examples given where users of Swift have found the behavior of `where` to be misleading and confusing.<br>&gt;&gt; <br>&gt;&gt; Sorry Xiaodi, but beside you (on multiple instances), and recently Erica, I have do not recall hearing that many voices saying that &#39;where&#39; is confusing.<br>&gt;&gt; <br>&gt;&gt; Shawn Erickson wrote this to the list just yesterday:<br>&gt;&gt; <br>&gt;&gt; &quot;I support your position on the use of where and while/when being confusing in the loop statement. I (and I know others) have for example used where in a loop statement mistakenly thinking it would terminate the loop early but of course learned that it basically filters what causes the loop body to be executed. After the fact that made sense to me but it didn&#39;t click at first.&quot;<br>&gt; <br>&gt; Couldn&#39;t we find examples of anyone being confused at any syntax? Especially with an unfamiliar construct in a new language. <br>&gt; <br>&gt; If people find the new proposed syntax confusing, do we pull that too? At what point do we stop?<br>&gt; <br>&gt; That is why I favored (1) removal of the confusing syntax altogether; and (2) this proposal, which involves aligning the confusing syntax with an existing syntax. In short, no new syntax to get confused about.<br>&gt; <br>&gt;&gt; Yes, there&#39;s was maybe even less voices stating that it is not confusing, but which group is more vocal?<br>&gt;&gt; <br>&gt;&gt; Maybe I have been recently corrupt by Solid SQL queries:<br>&gt;&gt; select * from PEOPLE_TABLE where AGE_FIELD = 100<br>&gt;&gt; <br>&gt;&gt; Or by my (likely) broken English:<br>&gt;&gt; The places where I had the most fun<br>&gt;&gt; <br>&gt;&gt; But, to me, where can only suggest some filtering (thus tag to a for ..  in .., continue if not matching). <br>&gt;&gt; <br>&gt;&gt; I&#39;m glad that you find it very clear. I do as well. That does not mean it is clear to everyone.<br>&gt; <br>&gt; I still have yet to see widespread confusion of this. A few people learning swift here or there, but once they learn the syntax...do they still find it confusing?<br>&gt; <br>&gt; Again, as I said, once you&#39;ve mastered something, by definition you find it not confusing. Why should we doom x% of new users to writing a loop incorrectly at least once when we don&#39;t have to?<br>&gt; <br>&gt; I expect some concrete data on stuff like this...especially with proposed syntax changes. <br>&gt; <br>&gt; Without concrete examples, what would stop one from coming in here and waving their hands around to push *what they like* through?<br>&gt; <br>&gt; Here&#39;s what&#39;s not handwavy:<br>&gt; <br>&gt; * Swift is explicitly a C-family language. In most or all other C-family languages, for loop statements allow specification of conditions for exiting the loop but not for filtering. Therefore, Swift&#39;s use of `where` is unprecedented and needs to be learned anew by every user of Swift.<br>&gt; <br>&gt; * The word &quot;where&quot; does not consistently imply `break` or `continue`. In current Swift, `where` implies `break` in the context of a `while` loop and `continue` in the context of a `for` loop. Some users intuitively guess the correct meaning in each context, while others guess the wrong meaning. Therefore, the only way to learn for sure what `where` means in any context is to read the rulebook. That, by definition, means that this is unintuitive.<br>&gt; <br>&gt; * There are other ways to break from a loop or continue to the next iteration without performance penalty. Nearly all of these serve more general purposes than a `where` clause. Some of these (such as `if` or `guard`) would already be familiar to a new user before they encounter loops, assuming a typical order for learning a programming language. Many of these (such as filtering methods on collections, or simply `if`) would be familiar to a user of another C-family language. Therefore, the `where` clause provides no independent utility, is not more discoverable than its alternatives, and is not required for progressive disclosure of an important facility to a learner (i.e. a simplified syntax for those who may not be ready for the advanced concepts needed to use a more fully-featured alternative).<br>&gt; <br>&gt; Conclusion: the `where` clause is unprecedented, unintuitive, provides no independent utility, is not more discoverable than alternatives, and is not required for pedagogical reasons; however, it has been used incorrectly by at least some users. Therefore, it is harmful and ought to be removed or reformed.<br>&gt; <br>&gt;&gt; I know there&#39;s a linguist on the list, maybe he could comment on whether or not using &#39;where&#39; as a filter is proper or an abomination.<br>&gt;&gt; <br>&gt;&gt; I do not think that because something is confusing to some, or at first, that it warrant removal from the language.<br>&gt;&gt; <br>&gt;&gt; It is a very bad sign if something is confusing at first, especially to a significant proportion of users. It&#39;s true by definition that once you have mastered something you are no longer confused by it.<br>&gt; <br>&gt; Again, where is this significant proportion of users? I don&#39;t mean to hound you on this, but I am genuinely curious where this is all coming from.<br>&gt; <br>&gt; We were talking about the hypothetical something here and what the bar should be for removal from the language. My response is that being confusing at first sight *is* a legitimate consideration for removal from the language. If something turns out to be a confusing way to describe a straightforward concept, then the more widespread the confusion, the more urgent its removal.<br>&gt;  <br>&gt; The burden of evidence is on the proposers of these ideas. <br>&gt; <br>&gt;&gt; As has been stated on this list, education is a valid and important consideration for Swift. If something is confusing rather than difficult (and the *concept* of filtering a list is not at all a difficult concept), and if the same underlying concept can already be invoked in alternative and equivalent ways that are not confusing, then it&#39;s a no-brainer that the confusing thing is harmful to the language and should be removed on that basis alone.<br>&gt; <br>&gt; What is clear to one person may be confusing to another. There is no perfect syntax that will not make it confusing for some users. <br>&gt; <br>&gt; ----<br>&gt; <br>&gt; I really think it is important to come armed with more information with these proposals. It&#39;s easy to say a significant proportion of people are confused but it would make me much more comfortable to see this data to back it up. <br>&gt; <br>&gt; What if we are spinning our wheels for no reason on a feature that *most* don&#39;t find confusing? What if we make a bigger proportion of those who did understand it more confused now?<br>&gt; <br>&gt; The point here is that this is not a slippery slope. If `where` offered independent utility, then some confusion alone probably wouldn&#39;t be enough to justify removal, though it may justify some consideration for change. However, as the extensive discussion has shown, there is nothing `where` can do that something else can&#39;t do better. I know you like it for style, but that&#39;s not sufficient grounds for keeping something confusing, IMO.<br>&gt;  <br>&gt; Brandon <br>&gt; <br>&gt;&gt; <br>&gt;&gt; By analogy, Chinese and Japanese share difficult writing systems. Yet many people use those languages daily without difficulty. Does that mean there&#39;s not a problem? Far from it: in fact, you&#39;ll find that many intelligent people have devoted their life&#39;s work to mitigating the issue. Both Chinese and Japanese underwent a round of simplification in the 20th century. Think about it: real languages used for daily life by a significant fraction of the world&#39;s population were revamped for the purpose of increasing accessibility to new learners.<br>&gt;&gt; <br>&gt;&gt; The by-value/by-reference is well define, but can be confusing at first. Same goes for eager/lazy processing, or escaping vs non-escaping closure, or even the difference between closure and function. But no one suggest to remove them.<br>&gt;&gt; <br>&gt;&gt; Value types vs. reference types is a concept (and a moderately advanced one), eager vs. lazy processing is a concept (and a moderately advanced one), and closures are a concept (and definitely an advanced one).<br>&gt;&gt; <br>&gt;&gt; Filtering a collection is a concept as well, and no one is suggesting its removal. We are proposing to simplify and rationalize the syntax by which filtering is invoked. If there were a way to dramatically simplify the syntax surrounding value types and reference types so as to diminish confusion, you can absolutely guarantee that there would be proposals to change the syntax. If I could think of one tomorrow, you&#39;d see a thread tomorrow about it. I don&#39;t think I&#39;m that smart though.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Dany<br>&gt;&gt; <br>&gt;&gt;&gt; In fact, the first of these proposals began with a question: how does one write arbitrary Boolean assertions after a let binding? The answer (use `where`) was found to be misleading and confusing.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think you&#39;re being unfair to say that these proposals have no purpose other than an academic consistency.<br>&gt;&gt;&gt; On Thu, Jun 9, 2016 at 13:29 Jon Shier via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;         As time goes on, I’m feeling more and more that these consistency proposals are sorely misguided. Frankly, unless the syntax is confusing or misleading, even once the developer has learned the guiding principles of Swift, consistency is not a good argument for change. This proposal is the perfect example of this. No one will find the use of “where” in loops confusing, aside from those who will wonder why it was removed from if statements. There is no misleading behavior or confusing syntax here. This is just consistency for consistency’s sake. Once this proposal is done, then another will be made to remove “where” from another place in the language. Then another and another until it’s gone completely and a very useful part of the language is removed in the name of consistency. Which really just comes down to “where” isn’t used here, so it can’t be used there anymore. It’s death by a thousand cuts.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jon Shier<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt; On Jun 9, 2016, at 1:16 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt; On Jun 9, 2016, at 11:11 AM, Charlie Monroe &lt;charlie at charliemonroe.net &lt;mailto:charlie at charliemonroe.net&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt; See my latest post - included results with -Ofast. But still, using filter and lazy.filter is 10+% slower, which were the suggested alternatives to `where`.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; I need to correct this misapprehension.<br>&gt;&gt;&gt; &gt; My suggested alternative to where was and remains `guard`.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; -- E<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/08823171/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>June 10, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On 10 Jun 2016, at 07:25, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; * Swift is explicitly a C-family language. In most or all other C-family languages, for loop statements allow specification of conditions for exiting the loop but not for filtering. Therefore, Swift&#39;s use of `where` is unprecedented and needs to be learned anew by every user of Swift.<br></p><p>Swift may have some similarities with C, but the last thing anyone should want is for it to be bound to C as a language. Besides, the purpose of a for in loop is to iterate over elements in a sequence, so filtering is very much a useful thing to do so it’s hardly unprecedented, and it’s also a fairly common thing to want to do.<br></p><p>&gt; * The word &quot;where&quot; does not consistently imply `break` or `continue`. In current Swift, `where` implies `break` in the context of a `while` loop and `continue` in the context of a `for` loop. Some users intuitively guess the correct meaning in each context, while others guess the wrong meaning. Therefore, the only way to learn for sure what `where` means in any context is to read the rulebook. That, by definition, means that this is unintuitive.<br></p><p>This is an argument for renaming the where keyword on for loops to be more clear, or to somehow integrate continue/break to be more explicit about what the developer intends for it to do.<br></p><p>&gt; * There are other ways to break from a loop or continue to the next iteration without performance penalty. Nearly all of these serve more general purposes than a `where` clause.<br></p><p>This isn’t really an argument against the where clause; the where clause is useful for common, simple cases, so it’s not surprising if more complex/unusual cases can’t (or can’t easily) be handled by it. This is for the simple cases where this isn’t an issue.<br></p><p>&gt; Some of these (such as `if` or `guard`) would already be familiar to a new user before they encounter loops, assuming a typical order for learning a programming language. Many of these (such as filtering methods on collections, or simply `if`) would be familiar to a user of another C-family language. Therefore, the `where` clause provides no independent utility, is not more discoverable than its alternatives, and is not required for progressive disclosure of an important facility to a learner (i.e. a simplified syntax for those who may not be ready for the advanced concepts needed to use a more fully-featured alternative).<br></p><p>Simplification isn’t just for the new users; all you need to know with where is that it’s a shorthand for guard X else { continue }, for many people this is intuitive enough, but if there are enough for whom it isn’t then again that’s an argument to tweak it to be more clear about what it does, rather than remove it entirely.<br></p><p>The independent utility that it offers is being able to avoid if/guard boilerplate at the start of your loop, but instead putting it on the same line; in simple cases this can be nice and neat.<br></p><p>&gt; it has been used incorrectly by at least some users.<br></p><p>Every feature in every language &quot;has been used incorrectly by at least some users&quot;, should we just drop all programming languages? It’s not as if users can’t make mistakes while using an inline if/guard condition. Again, this an argument that the meaning isn’t implicit enough, which is just as well served by tweaking the syntax than removing it.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/568fc183/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 10, 2016 at 03:00:00pm</p></header><div class="content"><p>+1 to Haravikk&#39;s opinion, my thoughts exactly the same.<br></p><p>On 10.06.2016 15:18, Haravikk via swift-evolution wrote:<br>&gt;<br>&gt;&gt; On 10 Jun 2016, at 07:25, Xiaodi Wu via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; * Swift is explicitly a C-family language. In most or all other C-family<br>&gt;&gt; languages, for loop statements allow specification of conditions for<br>&gt;&gt; exiting the loop but not for filtering. Therefore, Swift&#39;s use of `where`<br>&gt;&gt; is unprecedented and needs to be learned anew by every user of Swift.<br>&gt;<br>&gt; Swift may have some similarities with C, but the last thing anyone should<br>&gt; want is for it to be bound to C as a language. Besides, the purpose of a<br>&gt; for in loop is to iterate over elements in a sequence, so filtering is very<br>&gt; much a useful thing to do so it’s hardly unprecedented, and it’s also a<br>&gt; fairly common thing to want to do.<br>&gt;<br>&gt;&gt; * The word &quot;where&quot; does not consistently imply `break` or `continue`. In<br>&gt;&gt; current Swift, `where` implies `break` in the context of a `while` loop<br>&gt;&gt; and `continue` in the context of a `for` loop. Some users intuitively<br>&gt;&gt; guess the correct meaning in each context, while others guess the wrong<br>&gt;&gt; meaning. Therefore, the only way to learn for sure what `where` means in<br>&gt;&gt; any context is to read the rulebook. That, by definition, means that this<br>&gt;&gt; is unintuitive.<br>&gt;<br>&gt; This is an argument for renaming the where keyword on for loops to be more<br>&gt; clear, or to somehow integrate continue/break to be more explicit about<br>&gt; what the developer intends for it to do.<br>&gt;<br>&gt;&gt; * There are other ways to break from a loop or continue to the next<br>&gt;&gt; iteration without performance penalty. Nearly all of these serve more<br>&gt;&gt; general purposes than a `where` clause.<br>&gt;<br>&gt; This isn’t really an argument against the where clause; the where clause is<br>&gt; useful for common, simple cases, so it’s not surprising if more<br>&gt; complex/unusual cases can’t (or can’t easily) be handled by it. This is for<br>&gt; the simple cases where this isn’t an issue.<br>&gt;<br>&gt;&gt; Some of these (such as `if` or `guard`) would already be familiar to a<br>&gt;&gt; new user before they encounter loops, assuming a typical order for<br>&gt;&gt; learning a programming language. Many of these (such as filtering methods<br>&gt;&gt; on collections, or simply `if`) would be familiar to a user of another<br>&gt;&gt; C-family language. Therefore, the `where` clause provides no independent<br>&gt;&gt; utility, is not more discoverable than its alternatives, and is not<br>&gt;&gt; required for progressive disclosure of an important facility to a learner<br>&gt;&gt; (i.e. a simplified syntax for those who may not be ready for the advanced<br>&gt;&gt; concepts needed to use a more fully-featured alternative).<br>&gt;<br>&gt; Simplification isn’t just for the new users; all you need to know with<br>&gt; where is that it’s a shorthand for guard X else { continue }, for many<br>&gt; people this is intuitive enough, but if there are enough for whom it isn’t<br>&gt; then again that’s an argument to tweak it to be more clear about what it<br>&gt; does, rather than remove it entirely.<br>&gt;<br>&gt; The independent utility that it offers is being able to avoid if/guard<br>&gt; boilerplate at the start of your loop, but instead putting it on the same<br>&gt; line; in simple cases this can be nice and neat.<br>&gt;<br>&gt;&gt; it has been used incorrectly by at least some users.<br>&gt;<br>&gt; Every feature in every language &quot;has been used incorrectly by at least some<br>&gt; users&quot;, should we just drop all programming languages? It’s not as if users<br>&gt; can’t make mistakes while using an inline if/guard condition. Again, this<br>&gt; an argument that the meaning isn’t implicit enough, which is just as well<br>&gt; served by tweaking the syntax than removing it.<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>June 11, 2016 at 09:00:00pm</p></header><div class="content"><p>+1<br></p><p>-Thorsten <br></p><p>&gt; Am 10.06.2016 um 14:49 schrieb Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; +1 to Haravikk&#39;s opinion, my thoughts exactly the same.<br>&gt; <br>&gt;&gt; On 10.06.2016 15:18, Haravikk via swift-evolution wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On 10 Jun 2016, at 07:25, Xiaodi Wu via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; * Swift is explicitly a C-family language. In most or all other C-family<br>&gt;&gt;&gt; languages, for loop statements allow specification of conditions for<br>&gt;&gt;&gt; exiting the loop but not for filtering. Therefore, Swift&#39;s use of `where`<br>&gt;&gt;&gt; is unprecedented and needs to be learned anew by every user of Swift.<br>&gt;&gt; <br>&gt;&gt; Swift may have some similarities with C, but the last thing anyone should<br>&gt;&gt; want is for it to be bound to C as a language. Besides, the purpose of a<br>&gt;&gt; for in loop is to iterate over elements in a sequence, so filtering is very<br>&gt;&gt; much a useful thing to do so it’s hardly unprecedented, and it’s also a<br>&gt;&gt; fairly common thing to want to do.<br>&gt;&gt; <br>&gt;&gt;&gt; * The word &quot;where&quot; does not consistently imply `break` or `continue`. In<br>&gt;&gt;&gt; current Swift, `where` implies `break` in the context of a `while` loop<br>&gt;&gt;&gt; and `continue` in the context of a `for` loop. Some users intuitively<br>&gt;&gt;&gt; guess the correct meaning in each context, while others guess the wrong<br>&gt;&gt;&gt; meaning. Therefore, the only way to learn for sure what `where` means in<br>&gt;&gt;&gt; any context is to read the rulebook. That, by definition, means that this<br>&gt;&gt;&gt; is unintuitive.<br>&gt;&gt; <br>&gt;&gt; This is an argument for renaming the where keyword on for loops to be more<br>&gt;&gt; clear, or to somehow integrate continue/break to be more explicit about<br>&gt;&gt; what the developer intends for it to do.<br>&gt;&gt; <br>&gt;&gt;&gt; * There are other ways to break from a loop or continue to the next<br>&gt;&gt;&gt; iteration without performance penalty. Nearly all of these serve more<br>&gt;&gt;&gt; general purposes than a `where` clause.<br>&gt;&gt; <br>&gt;&gt; This isn’t really an argument against the where clause; the where clause is<br>&gt;&gt; useful for common, simple cases, so it’s not surprising if more<br>&gt;&gt; complex/unusual cases can’t (or can’t easily) be handled by it. This is for<br>&gt;&gt; the simple cases where this isn’t an issue.<br>&gt;&gt; <br>&gt;&gt;&gt; Some of these (such as `if` or `guard`) would already be familiar to a<br>&gt;&gt;&gt; new user before they encounter loops, assuming a typical order for<br>&gt;&gt;&gt; learning a programming language. Many of these (such as filtering methods<br>&gt;&gt;&gt; on collections, or simply `if`) would be familiar to a user of another<br>&gt;&gt;&gt; C-family language. Therefore, the `where` clause provides no independent<br>&gt;&gt;&gt; utility, is not more discoverable than its alternatives, and is not<br>&gt;&gt;&gt; required for progressive disclosure of an important facility to a learner<br>&gt;&gt;&gt; (i.e. a simplified syntax for those who may not be ready for the advanced<br>&gt;&gt;&gt; concepts needed to use a more fully-featured alternative).<br>&gt;&gt; <br>&gt;&gt; Simplification isn’t just for the new users; all you need to know with<br>&gt;&gt; where is that it’s a shorthand for guard X else { continue }, for many<br>&gt;&gt; people this is intuitive enough, but if there are enough for whom it isn’t<br>&gt;&gt; then again that’s an argument to tweak it to be more clear about what it<br>&gt;&gt; does, rather than remove it entirely.<br>&gt;&gt; <br>&gt;&gt; The independent utility that it offers is being able to avoid if/guard<br>&gt;&gt; boilerplate at the start of your loop, but instead putting it on the same<br>&gt;&gt; line; in simple cases this can be nice and neat.<br>&gt;&gt; <br>&gt;&gt;&gt; it has been used incorrectly by at least some users.<br>&gt;&gt; <br>&gt;&gt; Every feature in every language &quot;has been used incorrectly by at least some<br>&gt;&gt; users&quot;, should we just drop all programming languages? It’s not as if users<br>&gt;&gt; can’t make mistakes while using an inline if/guard condition. Again, this<br>&gt;&gt; an argument that the meaning isn’t implicit enough, which is just as well<br>&gt;&gt; served by tweaking the syntax than removing it.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 10, 2016 at 09:00:00am</p></header><div class="content"><p>On Fri, Jun 10, 2016 at 7:18 AM, Haravikk &lt;swift-evolution at haravikk.me&gt;<br>wrote:<br></p><p>&gt;<br>&gt; On 10 Jun 2016, at 07:25, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; * Swift is explicitly a C-family language. In most or all other C-family<br>&gt; languages, for loop statements allow specification of conditions for<br>&gt; exiting the loop but not for filtering. Therefore, Swift&#39;s use of `where`<br>&gt; is unprecedented and needs to be learned anew by every user of Swift.<br>&gt;<br>&gt;<br>&gt; Swift may have some similarities with C, but the last thing anyone should<br>&gt; want is for it to be bound to C as a language.<br>&gt;<br></p><p>That&#39;s not my argument at all. There are elements of syntax that are<br>commonly seen in languages that take inspiration from C. We can rightly say<br>that those are &#39;familiar&#39; or &#39;precedented,&#39; by which I mean that a<br>significant proportion of people who come to Swift will be familiar with<br>how they work. This is a consideration, though by no means determinative of<br>what features we should have.<br></p><p>By contrast, there are elements of syntax in Swift which are<br>&#39;unprecedented.&#39; Some of those support features unique to Swift, or<br>features that Swift deliberately makes more prominent--take, for example,<br>sugar for unwrapping optionals or a greatly expanded type system.<br></p><p>We have heard from the core team that the `where` clause was put into the<br>language in order to align with greatly expanded pattern matching<br>facilities, but this was abandoned. Thus it now falls into a second<br>category of &#39;unprecedented&#39; syntax: a syntax with no parallels in other<br>languages that take inspiration from C, but which does not serve a purpose<br>that is unique to or uniquely emphasized in Swift.<br></p><p>Besides, the purpose of a for in loop is to iterate over elements in a<br>&gt; sequence, so filtering is very much a useful thing to do so it’s hardly<br>&gt; unprecedented, and it’s also a fairly common thing to want to do.<br>&gt;<br></p><p>That&#39;s not what I mean by precedent--see above.<br></p><p><br>&gt;<br>&gt; * The word &quot;where&quot; does not consistently imply `break` or `continue`. In<br>&gt; current Swift, `where` implies `break` in the context of a `while` loop and<br>&gt; `continue` in the context of a `for` loop. Some users intuitively guess the<br>&gt; correct meaning in each context, while others guess the wrong meaning.<br>&gt; Therefore, the only way to learn for sure what `where` means in any context<br>&gt; is to read the rulebook. That, by definition, means that this is<br>&gt; unintuitive.<br>&gt;<br>&gt;<br>&gt; This is an argument for renaming the where keyword on for loops to be more<br>&gt; clear, or to somehow integrate continue/break to be more explicit about<br>&gt; what the developer intends for it to do.<br>&gt;<br></p><p>Sure: I conclude that the keyword should be *either* removed *or* reformed;<br>both outcomes could address the issue.<br></p><p><br>&gt;<br>&gt; * There are other ways to break from a loop or continue to the next<br>&gt; iteration without performance penalty. Nearly all of these serve more<br>&gt; general purposes than a `where` clause.<br>&gt;<br>&gt;<br>&gt; This isn’t really an argument against the where clause; the where clause<br>&gt; is useful for common, simple cases, so it’s not surprising if more<br>&gt; complex/unusual cases can’t (or can’t easily) be handled by it. This is for<br>&gt; the simple cases where this isn’t an issue.<br>&gt;<br>&gt; Some of these (such as `if` or `guard`) would already be familiar to a new<br>&gt; user before they encounter loops, assuming a typical order for learning a<br>&gt; programming language. Many of these (such as filtering methods on<br>&gt; collections, or simply `if`) would be familiar to a user of another<br>&gt; C-family language. Therefore, the `where` clause provides no independent<br>&gt; utility, is not more discoverable than its alternatives, and is not<br>&gt; required for progressive disclosure of an important facility to a learner<br>&gt; (i.e. a simplified syntax for those who may not be ready for the advanced<br>&gt; concepts needed to use a more fully-featured alternative).<br>&gt;<br>&gt;<br>&gt; Simplification isn’t just for the new users; all you need to know with<br>&gt; where is that it’s a shorthand for guard X else { continue }, for many<br>&gt; people this is intuitive enough, but if there are enough for whom it isn’t<br>&gt; then again that’s an argument to tweak it to be more clear about what it<br>&gt; does, rather than remove it entirely.<br>&gt;<br>&gt; The independent utility that it offers is being able to avoid if/guard<br>&gt; boilerplate at the start of your loop, but instead putting it on the same<br>&gt; line; in simple cases this can be nice and neat.<br>&gt;<br></p><p>That is not at all &#39;utility.&#39; It is tautologically true that if you have<br>two alternatives A and B, using A has the &#39;utility&#39; that you don&#39;t have to<br>use B. And since the whole point here is that the word `break` or<br>`continue` is not implied by `where`, I argue that writing it out within a<br>`guard` statement isn&#39;t boilerplate but absolutely essential. By contrast,<br>I have argued that the `where` syntax is not &#39;nice&#39; or &#39;neat.&#39;<br></p><p><br>&gt;<br>&gt; it has been used incorrectly by at least some users.<br>&gt;<br>&gt;<br>&gt; Every feature in every language &quot;has been used incorrectly by at least<br>&gt; some users&quot;, should we just drop all programming languages?<br>&gt;<br></p><p>Not every feature serves no independent purpose *and* is used incorrectly<br>by at least some users.<br></p><p><br>&gt; It’s not as if users can’t make mistakes while using an inline if/guard<br>&gt; condition.<br>&gt;<br></p><p>One that&#39;s not caught at compile time? Show me.<br></p><p><br>&gt; Again, this an argument that the meaning isn’t implicit enough, which is<br>&gt; just as well served by tweaking the syntax than removing it.<br>&gt;<br></p><p>Again, I&#39;d be happy tweaking the syntax to make it clear, if possible. If<br>not, I&#39;d remove it.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/1b17aee8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 10, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jun 10, 2016, at 8:02 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Fri, Jun 10, 2016 at 7:18 AM, Haravikk &lt;swift-evolution at haravikk.me &lt;mailto:swift-evolution at haravikk.me&gt;&gt; wrote:<br>&gt;&gt; * The word &quot;where&quot; does not consistently imply `break` or `continue`. In current Swift, `where` implies `break` in the context of a `while` loop and `continue` in the context of a `for` loop. Some users intuitively guess the correct meaning in each context, while others guess the wrong meaning. Therefore, the only way to learn for sure what `where` means in any context is to read the rulebook. That, by definition, means that this is unintuitive.<br>&gt; <br>&gt; This is an argument for renaming the where keyword on for loops to be more clear, or to somehow integrate continue/break to be more explicit about what the developer intends for it to do.<br>&gt; <br>&gt; Sure: I conclude that the keyword should be *either* removed *or* reformed; both outcomes could address the issue.<br></p><p>This is my stance as well and I reserve the right to flit between both choices until we&#39;ve fully talked it through.<br></p><p>One more data point. <br></p><p>In the standard library there are just under 950 uses of &quot;for in loops&quot;. There are 3 uses of &quot;for in while&quot; :<br></p><p>private/StdlibUnittest/StdlibUnittest.swift.gyb:    for j in instances.indices where i != j {<br>public/core/Algorithm.swift:  for value in rest where value &lt; minValue {<br>public/core/Algorithm.swift:  for value in rest where value &gt;= maxValue {<br></p><p>-- Erica<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/c85ae346/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 10, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jun 10, 2016, at 9:22 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 10, 2016, at 8:02 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Fri, Jun 10, 2016 at 7:18 AM, Haravikk &lt;swift-evolution at haravikk.me &lt;mailto:swift-evolution at haravikk.me&gt;&gt; wrote:<br>&gt;&gt;&gt; * The word &quot;where&quot; does not consistently imply `break` or `continue`. In current Swift, `where` implies `break` in the context of a `while` loop and `continue` in the context of a `for` loop. Some users intuitively guess the correct meaning in each context, while others guess the wrong meaning. Therefore, the only way to learn for sure what `where` means in any context is to read the rulebook. That, by definition, means that this is unintuitive.<br>&gt;&gt; <br>&gt;&gt; This is an argument for renaming the where keyword on for loops to be more clear, or to somehow integrate continue/break to be more explicit about what the developer intends for it to do.<br>&gt;&gt; <br>&gt;&gt; Sure: I conclude that the keyword should be *either* removed *or* reformed; both outcomes could address the issue.<br>&gt; <br>&gt; This is my stance as well and I reserve the right to flit between both choices until we&#39;ve fully talked it through.<br>&gt; <br>&gt; One more data point. <br>&gt; <br>&gt; In the standard library there are just under 950 uses of &quot;for in loops&quot;. There are 3 uses of &quot;for in while&quot; :<br>&gt; <br>&gt; private/StdlibUnittest/StdlibUnittest.swift.gyb:    for j in instances.indices where i != j {<br>&gt; public/core/Algorithm.swift:  for value in rest where value &lt; minValue {<br>&gt; public/core/Algorithm.swift:  for value in rest where value &gt;= maxValue {<br>&gt; <br>&gt; -- Erica<br></p><p>Actually a slight correction to that. I forgot to add the space after &quot;in&quot; on the first search. It&#39;s just over 600 and 3. Among the 600 are a few false positives but not many.<br></p><p>-- E<br></p><p><br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/e6bd8e3f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 10, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jun 10, 2016, at 9:24 AM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 10, 2016, at 9:22 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 10, 2016, at 8:02 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Fri, Jun 10, 2016 at 7:18 AM, Haravikk &lt;swift-evolution at haravikk.me &lt;mailto:swift-evolution at haravikk.me&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; * The word &quot;where&quot; does not consistently imply `break` or `continue`. In current Swift, `where` implies `break` in the context of a `while` loop and `continue` in the context of a `for` loop. Some users intuitively guess the correct meaning in each context, while others guess the wrong meaning. Therefore, the only way to learn for sure what `where` means in any context is to read the rulebook. That, by definition, means that this is unintuitive.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is an argument for renaming the where keyword on for loops to be more clear, or to somehow integrate continue/break to be more explicit about what the developer intends for it to do.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sure: I conclude that the keyword should be *either* removed *or* reformed; both outcomes could address the issue.<br>&gt;&gt; <br>&gt;&gt; This is my stance as well and I reserve the right to flit between both choices until we&#39;ve fully talked it through.<br>&gt;&gt; <br>&gt;&gt; One more data point. <br>&gt;&gt; <br>&gt;&gt; In the standard library there are just under 950 uses of &quot;for in loops&quot;. There are 3 uses of &quot;for in while&quot; :<br>&gt;&gt; <br>&gt;&gt; private/StdlibUnittest/StdlibUnittest.swift.gyb:    for j in instances.indices where i != j {<br>&gt;&gt; public/core/Algorithm.swift:  for value in rest where value &lt; minValue {<br>&gt;&gt; public/core/Algorithm.swift:  for value in rest where value &gt;= maxValue {<br>&gt;&gt; <br>&gt;&gt; -- Erica<br>&gt; <br>&gt; Actually a slight correction to that. I forgot to add the space after &quot;in&quot; on the first search. It&#39;s just over 600 and 3. Among the 600 are a few false positives but not many.<br>&gt; <br>&gt; -- E<br></p><p>And to follow-up to myself once again, I went to my &quot;Cool 3rd Party Swift Repos&quot; folder and did the same search. Among the 15 repos in that folder, a joint search returned about 650 hits on for-in (again with some false positives) and not a single for-in-while use.<br></p><p>-- E<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/d2082d54/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 10, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jun 10, 2016, at 9:49 AM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 10, 2016, at 9:24 AM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 10, 2016, at 9:22 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 10, 2016, at 8:02 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 7:18 AM, Haravikk &lt;swift-evolution at haravikk.me &lt;mailto:swift-evolution at haravikk.me&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; * The word &quot;where&quot; does not consistently imply `break` or `continue`. In current Swift, `where` implies `break` in the context of a `while` loop and `continue` in the context of a `for` loop. Some users intuitively guess the correct meaning in each context, while others guess the wrong meaning. Therefore, the only way to learn for sure what `where` means in any context is to read the rulebook. That, by definition, means that this is unintuitive.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This is an argument for renaming the where keyword on for loops to be more clear, or to somehow integrate continue/break to be more explicit about what the developer intends for it to do.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sure: I conclude that the keyword should be *either* removed *or* reformed; both outcomes could address the issue.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is my stance as well and I reserve the right to flit between both choices until we&#39;ve fully talked it through.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; One more data point. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In the standard library there are just under 950 uses of &quot;for in loops&quot;. There are 3 uses of &quot;for in while&quot; :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; private/StdlibUnittest/StdlibUnittest.swift.gyb:    for j in instances.indices where i != j {<br>&gt;&gt;&gt; public/core/Algorithm.swift:  for value in rest where value &lt; minValue {<br>&gt;&gt;&gt; public/core/Algorithm.swift:  for value in rest where value &gt;= maxValue {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- Erica<br>&gt;&gt; <br>&gt;&gt; Actually a slight correction to that. I forgot to add the space after &quot;in&quot; on the first search. It&#39;s just over 600 and 3. Among the 600 are a few false positives but not many.<br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt; <br>&gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party Swift Repos&quot; folder and did the same search. Among the 15 repos in that folder, a joint search returned about 650 hits on for-in (again with some false positives) and not a single for-in-while use.<br>&gt; <br>&gt; -- E<br></p><p>For in where, not for in while. d&#39;erp.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/c4d42101/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>June 10, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party Swift Repos&quot; folder and did the same search. Among the 15 repos in that folder, a joint search returned about 650 hits on for-in (again with some false positives) and not a single for-in-while use.<br></p><p>Weird. My own Swift projects (not on Github :P) use “where” all the time with for loops. I really like it and think it reads *and* writes far better as well as makes for nicer one-liners. In one project, by rough count, I have about 20 that use “where” vs. 40 in that same project not using “where”.<br></p><p>In another smaller test project, there are only 10 for loops, but even so one still managed to use where.<br></p><p>Not a lot of data without looking at even more projects, I admit, but this seems to suggest that the usage of “where” is going to be very developer-dependent. Perhaps there’s some factor of prior background at work here? (I’ve done a lot of SQL in another life, for example.)<br></p><p>I feel like “where” is a more declarative construct and that we should be encouraging that way of thinking in general. When using it, it feels like “magic” for some reason - even though there’s nothing special about it. It feels like I’ve made the language work *for me* a little bit rather than me having to contort my solution to the will of the language. This may be highly subjective.<br></p><p>l8r<br>Sean<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 10, 2016 at 11:00:00am</p></header><div class="content"><p>On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party<br>&gt; Swift Repos&quot; folder and did the same search. Among the 15 repos in that<br>&gt; folder, a joint search returned about 650 hits on for-in (again with some<br>&gt; false positives) and not a single for-in-while use.<br>&gt;<br>&gt; Weird. My own Swift projects (not on Github :P) use “where” all the time<br>&gt; with for loops. I really like it and think it reads *and* writes far better<br>&gt; as well as makes for nicer one-liners. In one project, by rough count, I<br>&gt; have about 20 that use “where” vs. 40 in that same project not using<br>&gt; “where”.<br>&gt;<br>&gt; In another smaller test project, there are only 10 for loops, but even so<br>&gt; one still managed to use where.<br>&gt;<br>&gt; Not a lot of data without looking at even more projects, I admit, but this<br>&gt; seems to suggest that the usage of “where” is going to be very<br>&gt; developer-dependent. Perhaps there’s some factor of prior background at<br>&gt; work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;<br></p><p>That is worrying if true, because it suggests that it&#39;s enabling &#39;dialects&#39;<br>of Swift, an explicit anti-goal of the language.<br></p><p><br>&gt;<br>&gt; I feel like “where” is a more declarative construct and that we should be<br>&gt; encouraging that way of thinking in general. When using it, it feels like<br>&gt; “magic” for some reason - even though there’s nothing special about it. It<br>&gt; feels like I’ve made the language work *for me* a little bit rather than me<br>&gt; having to contort my solution to the will of the language. This may be<br>&gt; highly subjective.<br>&gt;<br>&gt; l8r<br>&gt; Sean<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/756c56df/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/36603be464733b58cc53cecd480eeae8?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>let var go</string> &lt;letvargo at gmail.com&gt;<p>June 10, 2016 at 05:00:00pm</p></header><div class="content"><p>Leave it in!<br></p><p>It&#39;s a great little tool. I don&#39;t use it very often, but when I do it is<br>because I&#39;ve decided that in the context of that piece of code it does<br>exactly what I want it to do with the maximum amount of clarity.<br></p><p>If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it detracts<br>from the language at all.<br></p><p>The *only* argument that I have heard for removing it is that some people<br>don&#39;t immediately intuit how to use it. I didn&#39;t have any trouble with it<br>at all. It follows one of the most basic programming patterns ever: &quot;For<br>all x in X, if predicate P is true, do something.&quot; The use of the keyword<br>&quot;where&quot; makes perfect sense in that context, and when I read it out loud,<br>it sounds natural: &quot;For all x in X where P, do something.&quot; That is an<br>elegant, succinct, and clear way of stating exactly what I want my program<br>to do.<br></p><p>I don&#39;t doubt that it has caused some confusion for some people, but I&#39;m<br>not sold that that is a good enough reason to get rid of it. It seems<br>strange to get rid of a tool because not everyone understands how to use it<br>immediately, without ever having to ask a single question. As long as its<br>not a dangerous tool (and it isn&#39;t), then keep it in the workshop for those<br>times when it comes in handy. And even if there is some initial confusion,<br>it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does this work<br>like X, or does this work like Y? Let&#39;s see...oh, it works like X. Ok.&quot;<br>That&#39;s the entire learning curve...about 5 seconds of curiosity followed by<br>the blissful feeling of resolution.<br></p><p>On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party<br>&gt;&gt; Swift Repos&quot; folder and did the same search. Among the 15 repos in that<br>&gt;&gt; folder, a joint search returned about 650 hits on for-in (again with some<br>&gt;&gt; false positives) and not a single for-in-while use.<br>&gt;&gt;<br>&gt;&gt; Weird. My own Swift projects (not on Github :P) use “where” all the time<br>&gt;&gt; with for loops. I really like it and think it reads *and* writes far better<br>&gt;&gt; as well as makes for nicer one-liners. In one project, by rough count, I<br>&gt;&gt; have about 20 that use “where” vs. 40 in that same project not using<br>&gt;&gt; “where”.<br>&gt;&gt;<br>&gt;&gt; In another smaller test project, there are only 10 for loops, but even so<br>&gt;&gt; one still managed to use where.<br>&gt;&gt;<br>&gt;&gt; Not a lot of data without looking at even more projects, I admit, but<br>&gt;&gt; this seems to suggest that the usage of “where” is going to be very<br>&gt;&gt; developer-dependent. Perhaps there’s some factor of prior background at<br>&gt;&gt; work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;&gt;<br>&gt;<br>&gt; That is worrying if true, because it suggests that it&#39;s enabling<br>&gt; &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; I feel like “where” is a more declarative construct and that we should be<br>&gt;&gt; encouraging that way of thinking in general. When using it, it feels like<br>&gt;&gt; “magic” for some reason - even though there’s nothing special about it. It<br>&gt;&gt; feels like I’ve made the language work *for me* a little bit rather than me<br>&gt;&gt; having to contort my solution to the will of the language. This may be<br>&gt;&gt; highly subjective.<br>&gt;&gt;<br>&gt;&gt; l8r<br>&gt;&gt; Sean<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/8b049d74/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 10, 2016 at 05:00:00pm</p></header><div class="content"><p>I think this idea--if you don&#39;t like it, then you don&#39;t have to use it--is<br>indicative of a key worry here: it&#39;s inessential to the language and<br>promotes dialects wherein certain people use it and others wherein they<br>don&#39;t. This is an anti-goal.<br></p><p>On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com&gt; wrote:<br></p><p>&gt; Leave it in!<br>&gt;<br>&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I do it is<br>&gt; because I&#39;ve decided that in the context of that piece of code it does<br>&gt; exactly what I want it to do with the maximum amount of clarity.<br>&gt;<br>&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it detracts<br>&gt; from the language at all.<br>&gt;<br>&gt; The *only* argument that I have heard for removing it is that some people<br>&gt; don&#39;t immediately intuit how to use it. I didn&#39;t have any trouble with it<br>&gt; at all. It follows one of the most basic programming patterns ever: &quot;For<br>&gt; all x in X, if predicate P is true, do something.&quot; The use of the keyword<br>&gt; &quot;where&quot; makes perfect sense in that context, and when I read it out loud,<br>&gt; it sounds natural: &quot;For all x in X where P, do something.&quot; That is an<br>&gt; elegant, succinct, and clear way of stating exactly what I want my program<br>&gt; to do.<br>&gt;<br>&gt; I don&#39;t doubt that it has caused some confusion for some people, but I&#39;m<br>&gt; not sold that that is a good enough reason to get rid of it. It seems<br>&gt; strange to get rid of a tool because not everyone understands how to use it<br>&gt; immediately, without ever having to ask a single question. As long as its<br>&gt; not a dangerous tool (and it isn&#39;t), then keep it in the workshop for those<br>&gt; times when it comes in handy. And even if there is some initial confusion,<br>&gt; it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does this work<br>&gt; like X, or does this work like Y? Let&#39;s see...oh, it works like X. Ok.&quot;<br>&gt; That&#39;s the entire learning curve...about 5 seconds of curiosity followed by<br>&gt; the blissful feeling of resolution.<br>&gt;<br>&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party<br>&gt;&gt;&gt; Swift Repos&quot; folder and did the same search. Among the 15 repos in that<br>&gt;&gt;&gt; folder, a joint search returned about 650 hits on for-in (again with some<br>&gt;&gt;&gt; false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Weird. My own Swift projects (not on Github :P) use “where” all the time<br>&gt;&gt;&gt; with for loops. I really like it and think it reads *and* writes far better<br>&gt;&gt;&gt; as well as makes for nicer one-liners. In one project, by rough count, I<br>&gt;&gt;&gt; have about 20 that use “where” vs. 40 in that same project not using<br>&gt;&gt;&gt; “where”.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; In another smaller test project, there are only 10 for loops, but even<br>&gt;&gt;&gt; so one still managed to use where.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Not a lot of data without looking at even more projects, I admit, but<br>&gt;&gt;&gt; this seems to suggest that the usage of “where” is going to be very<br>&gt;&gt;&gt; developer-dependent. Perhaps there’s some factor of prior background at<br>&gt;&gt;&gt; work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; That is worrying if true, because it suggests that it&#39;s enabling<br>&gt;&gt; &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I feel like “where” is a more declarative construct and that we should<br>&gt;&gt;&gt; be encouraging that way of thinking in general. When using it, it feels<br>&gt;&gt;&gt; like “magic” for some reason - even though there’s nothing special about<br>&gt;&gt;&gt; it. It feels like I’ve made the language work *for me* a little bit rather<br>&gt;&gt;&gt; than me having to contort my solution to the will of the language. This may<br>&gt;&gt;&gt; be highly subjective.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; l8r<br>&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/9624f7d0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/36603be464733b58cc53cecd480eeae8?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>let var go</string> &lt;letvargo at gmail.com&gt;<p>June 10, 2016 at 05:00:00pm</p></header><div class="content"><p>I respect that anti-goal, but I think being over-rigid about limiting<br>developers&#39; choice of expression is also an anti-goal.<br></p><p>To me, it is like guard statements vs. if-let statements. Some people find<br>one to be more clear than the other. Often times the best choice depends on<br>the context. Sometimes a guard statement can be re-written as an if-let<br>statement in a way that makes the code more clear, and vice versa. And<br>different people will inevitably have different personal preferences -<br>their own &quot;style&quot;, if you will - and will favor one over the other. But it<br>would be a mistake to force everyone into one box in order to prevent the<br>fracturing of the Swift community into &quot;dialects.&quot;<br></p><p>But most importantly (and this is really the kicker for me) there are times<br>when the &quot;where&quot; syntax provides the maximum amount of clarity in the<br>context of my code, and I don&#39;t want to lose that expressive power.<br></p><p>On Fri, Jun 10, 2016 at 10:17 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br></p><p>&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use it--is<br>&gt; indicative of a key worry here: it&#39;s inessential to the language and<br>&gt; promotes dialects wherein certain people use it and others wherein they<br>&gt; don&#39;t. This is an anti-goal.<br>&gt;<br>&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; Leave it in!<br>&gt;&gt;<br>&gt;&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I do it is<br>&gt;&gt; because I&#39;ve decided that in the context of that piece of code it does<br>&gt;&gt; exactly what I want it to do with the maximum amount of clarity.<br>&gt;&gt;<br>&gt;&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it detracts<br>&gt;&gt; from the language at all.<br>&gt;&gt;<br>&gt;&gt; The *only* argument that I have heard for removing it is that some people<br>&gt;&gt; don&#39;t immediately intuit how to use it. I didn&#39;t have any trouble with it<br>&gt;&gt; at all. It follows one of the most basic programming patterns ever: &quot;For<br>&gt;&gt; all x in X, if predicate P is true, do something.&quot; The use of the keyword<br>&gt;&gt; &quot;where&quot; makes perfect sense in that context, and when I read it out loud,<br>&gt;&gt; it sounds natural: &quot;For all x in X where P, do something.&quot; That is an<br>&gt;&gt; elegant, succinct, and clear way of stating exactly what I want my program<br>&gt;&gt; to do.<br>&gt;&gt;<br>&gt;&gt; I don&#39;t doubt that it has caused some confusion for some people, but I&#39;m<br>&gt;&gt; not sold that that is a good enough reason to get rid of it. It seems<br>&gt;&gt; strange to get rid of a tool because not everyone understands how to use it<br>&gt;&gt; immediately, without ever having to ask a single question. As long as its<br>&gt;&gt; not a dangerous tool (and it isn&#39;t), then keep it in the workshop for those<br>&gt;&gt; times when it comes in handy. And even if there is some initial confusion,<br>&gt;&gt; it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does this work<br>&gt;&gt; like X, or does this work like Y? Let&#39;s see...oh, it works like X. Ok.&quot;<br>&gt;&gt; That&#39;s the entire learning curve...about 5 seconds of curiosity followed by<br>&gt;&gt; the blissful feeling of resolution.<br>&gt;&gt;<br>&gt;&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party<br>&gt;&gt;&gt;&gt; Swift Repos&quot; folder and did the same search. Among the 15 repos in that<br>&gt;&gt;&gt;&gt; folder, a joint search returned about 650 hits on for-in (again with some<br>&gt;&gt;&gt;&gt; false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Weird. My own Swift projects (not on Github :P) use “where” all the<br>&gt;&gt;&gt;&gt; time with for loops. I really like it and think it reads *and* writes far<br>&gt;&gt;&gt;&gt; better as well as makes for nicer one-liners. In one project, by rough<br>&gt;&gt;&gt;&gt; count, I have about 20 that use “where” vs. 40 in that same project not<br>&gt;&gt;&gt;&gt; using “where”.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; In another smaller test project, there are only 10 for loops, but even<br>&gt;&gt;&gt;&gt; so one still managed to use where.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Not a lot of data without looking at even more projects, I admit, but<br>&gt;&gt;&gt;&gt; this seems to suggest that the usage of “where” is going to be very<br>&gt;&gt;&gt;&gt; developer-dependent. Perhaps there’s some factor of prior background at<br>&gt;&gt;&gt;&gt; work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; That is worrying if true, because it suggests that it&#39;s enabling<br>&gt;&gt;&gt; &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I feel like “where” is a more declarative construct and that we should<br>&gt;&gt;&gt;&gt; be encouraging that way of thinking in general. When using it, it feels<br>&gt;&gt;&gt;&gt; like “magic” for some reason - even though there’s nothing special about<br>&gt;&gt;&gt;&gt; it. It feels like I’ve made the language work *for me* a little bit rather<br>&gt;&gt;&gt;&gt; than me having to contort my solution to the will of the language. This may<br>&gt;&gt;&gt;&gt; be highly subjective.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/98a6b69f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 10, 2016 at 12:00:00pm</p></header><div class="content"><p>On Fri, Jun 10, 2016 at 12:30 PM, let var go &lt;letvargo at gmail.com&gt; wrote:<br></p><p>&gt; I respect that anti-goal, but I think being over-rigid about limiting<br>&gt; developers&#39; choice of expression is also an anti-goal.<br>&gt;<br>&gt; To me, it is like guard statements vs. if-let statements. Some people find<br>&gt; one to be more clear than the other. Often times the best choice depends on<br>&gt; the context. Sometimes a guard statement can be re-written as an if-let<br>&gt; statement in a way that makes the code more clear, and vice versa.<br>&gt;<br></p><p>The comparison with `guard` and `if` is a little inapt. The introduction of<br>`guard` solved a practical daily issue with `if` that was nicknamed the<br>pyramid of doom, where successive `if let` statements caused code to be<br>severely nested in braces and nearly unreadable. Further, you must exist<br>the scope with `guard`; thus, its use signals an intention not possible<br>with `if`. If, on the other hand, you do not wish to exit the scope, you<br>must use `if`. So in a Venn diagram, there are independent uses for `if`<br>that cannot be fulfilled by `guard`, and uses for `guard` that would be<br>unreadable if rewritten with `if`.<br></p><p><br>&gt; And different people will inevitably have different personal preferences -<br>&gt; their own &quot;style&quot;, if you will - and will favor one over the other. But it<br>&gt; would be a mistake to force everyone into one box in order to prevent the<br>&gt; fracturing of the Swift community into &quot;dialects.&quot;<br>&gt;<br></p><p>&gt; But most importantly (and this is really the kicker for me) there are<br>&gt; times when the &quot;where&quot; syntax provides the maximum amount of clarity in the<br>&gt; context of my code, and I don&#39;t want to lose that expressive power.<br>&gt;<br></p><p>This is the key and salient point here. Would you be able to share some<br>examples where the `where` syntax provides a clear win in clarity? That<br>would definitely be a huge pro, if it can be used to solve issues in<br>expressiveness much like `guard` allowed elimination of the pyramid of doom.<br></p><p><br>&gt;<br>&gt; On Fri, Jun 10, 2016 at 10:17 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use<br>&gt;&gt; it--is indicative of a key worry here: it&#39;s inessential to the language and<br>&gt;&gt; promotes dialects wherein certain people use it and others wherein they<br>&gt;&gt; don&#39;t. This is an anti-goal.<br>&gt;&gt;<br>&gt;&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Leave it in!<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I do it is<br>&gt;&gt;&gt; because I&#39;ve decided that in the context of that piece of code it does<br>&gt;&gt;&gt; exactly what I want it to do with the maximum amount of clarity.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it detracts<br>&gt;&gt;&gt; from the language at all.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The *only* argument that I have heard for removing it is that some<br>&gt;&gt;&gt; people don&#39;t immediately intuit how to use it. I didn&#39;t have any trouble<br>&gt;&gt;&gt; with it at all. It follows one of the most basic programming patterns ever:<br>&gt;&gt;&gt; &quot;For all x in X, if predicate P is true, do something.&quot; The use of the<br>&gt;&gt;&gt; keyword &quot;where&quot; makes perfect sense in that context, and when I read it out<br>&gt;&gt;&gt; loud, it sounds natural: &quot;For all x in X where P, do something.&quot; That is an<br>&gt;&gt;&gt; elegant, succinct, and clear way of stating exactly what I want my program<br>&gt;&gt;&gt; to do.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I don&#39;t doubt that it has caused some confusion for some people, but I&#39;m<br>&gt;&gt;&gt; not sold that that is a good enough reason to get rid of it. It seems<br>&gt;&gt;&gt; strange to get rid of a tool because not everyone understands how to use it<br>&gt;&gt;&gt; immediately, without ever having to ask a single question. As long as its<br>&gt;&gt;&gt; not a dangerous tool (and it isn&#39;t), then keep it in the workshop for those<br>&gt;&gt;&gt; times when it comes in handy. And even if there is some initial confusion,<br>&gt;&gt;&gt; it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does this work<br>&gt;&gt;&gt; like X, or does this work like Y? Let&#39;s see...oh, it works like X. Ok.&quot;<br>&gt;&gt;&gt; That&#39;s the entire learning curve...about 5 seconds of curiosity followed by<br>&gt;&gt;&gt; the blissful feeling of resolution.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party<br>&gt;&gt;&gt;&gt;&gt; Swift Repos&quot; folder and did the same search. Among the 15 repos in that<br>&gt;&gt;&gt;&gt;&gt; folder, a joint search returned about 650 hits on for-in (again with some<br>&gt;&gt;&gt;&gt;&gt; false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Weird. My own Swift projects (not on Github :P) use “where” all the<br>&gt;&gt;&gt;&gt;&gt; time with for loops. I really like it and think it reads *and* writes far<br>&gt;&gt;&gt;&gt;&gt; better as well as makes for nicer one-liners. In one project, by rough<br>&gt;&gt;&gt;&gt;&gt; count, I have about 20 that use “where” vs. 40 in that same project not<br>&gt;&gt;&gt;&gt;&gt; using “where”.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; In another smaller test project, there are only 10 for loops, but even<br>&gt;&gt;&gt;&gt;&gt; so one still managed to use where.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Not a lot of data without looking at even more projects, I admit, but<br>&gt;&gt;&gt;&gt;&gt; this seems to suggest that the usage of “where” is going to be very<br>&gt;&gt;&gt;&gt;&gt; developer-dependent. Perhaps there’s some factor of prior background at<br>&gt;&gt;&gt;&gt;&gt; work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; That is worrying if true, because it suggests that it&#39;s enabling<br>&gt;&gt;&gt;&gt; &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I feel like “where” is a more declarative construct and that we should<br>&gt;&gt;&gt;&gt;&gt; be encouraging that way of thinking in general. When using it, it feels<br>&gt;&gt;&gt;&gt;&gt; like “magic” for some reason - even though there’s nothing special about<br>&gt;&gt;&gt;&gt;&gt; it. It feels like I’ve made the language work *for me* a little bit rather<br>&gt;&gt;&gt;&gt;&gt; than me having to contort my solution to the will of the language. This may<br>&gt;&gt;&gt;&gt;&gt; be highly subjective.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/797e6fd5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4ab486d7597af4cfe0be33a762150848?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Dany St-Amant</string> &lt;dsa.mls at icloud.com&gt;<p>June 10, 2016 at 08:00:00pm</p></header><div class="content"><p>Le 10 juin 2016 à 13:59, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br></p><p>&gt;&gt; But most importantly (and this is really the kicker for me) there are times when the &quot;where&quot; syntax provides the maximum amount of clarity in the context of my code, and I don&#39;t want to lose that expressive power.<br>&gt; <br>&gt; This is the key and salient point here. Would you be able to share some examples where the `where` syntax provides a clear win in clarity? That would definitely be a huge pro, if it can be used to solve issues in expressiveness much like `guard` allowed elimination of the pyramid of doom.<br></p><p>In this case, I think it is hard to come with perfect example as beauty is in the eye of the beholder. Having the flexibility of using guard else { continue }, if not { continue } or where, is at some level a bit like choosing between:<br></p><p>if !(dataA == value || dataB == value) { }<br>if dataA != value &amp;&amp; dataB != value { }<br>if dataA != value { if dataB != value { } }<br></p><p>All three are valid, and the baby pyramid of doom version may even be the right option depending on how you think the code will evolve.<br></p><p>Back to the where vs guard/if not continue, I see the former as &quot;I want/like&quot; and the laters as &quot;I don&#39;t want/like&quot;. <br></p><p>for book in books where book.language == .French<br>{<br>    guard book.readCount == 0 else { continue } <br>    if book.originalLanguage == .English { continue } // should read the original<br>    // My apologies to translators who might feel offended.<br>}<br></p><p>One could put all the conditions as a single where, as a multiple guard, as multiple if, and as a single guard or if, but I think that my keyword choices better convey my message:<br></p><p>I want a book written in French<br>Protect me from what I have read<br>No translation from English for me<br>(Not that those are worst than others, but I can read the original... Apologies again to translator)<br></p><p>Dany<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/8f9b829e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 11, 2016 at 12:00:00am</p></header><div class="content"><p>Yes, I rather agree with the implication here. By using &quot;where&quot;, you are<br>saying that you want something, and it feels more fluid because you really<br>aren&#39;t concerned with the things you don&#39;t want. The argument, essentially,<br>is that &quot;where&quot; is letting you get away with too much unstated. Namely, it<br>is leaving implicit what you want the loop to do with the books you won&#39;t<br>read. Maybe you feel bad rejecting all those authors. But it is a cop-out<br>to let the loop do it for you, like King Henry VIII of England ordering one<br>of his ministers to sign the death warrant for his wife.<br></p><p>I argue that &quot;where&quot; clauses are a false economy of words, and that you<br>should indicate overtly (to the reader of your code even if it&#39;s clear to<br>yourself) how it is you wish for non-French books to be rejected, for<br>rejected they must be in some way. By contrast, guard says, reject those<br>unwanted books by continuing, or breaking, or a fatal error. I know, it&#39;s<br>unpleasant, but you are rejecting them by act or by omission; and of those<br>only the act shows intentionality.<br></p><p>On Fri, Jun 10, 2016 at 19:29 Dany St-Amant &lt;dsa.mls at icloud.com&gt; wrote:<br></p><p>&gt;<br>&gt; Le 10 juin 2016 à 13:59, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;<br>&gt; But most importantly (and this is really the kicker for me) there are<br>&gt;&gt; times when the &quot;where&quot; syntax provides the maximum amount of clarity in the<br>&gt;&gt; context of my code, and I don&#39;t want to lose that expressive power.<br>&gt;&gt;<br>&gt;&gt;<br>&gt; This is the key and salient point here. Would you be able to share some<br>&gt; examples where the `where` syntax provides a clear win in clarity? That<br>&gt; would definitely be a huge pro, if it can be used to solve issues in<br>&gt; expressiveness much like `guard` allowed elimination of the pyramid of doom.<br>&gt;<br>&gt;<br>&gt; In this case, I think it is hard to come with perfect example as beauty is<br>&gt; in the eye of the beholder. Having the flexibility of using guard else {<br>&gt; continue }, if not { continue } or where, is at some level a bit like<br>&gt; choosing between:<br>&gt;<br>&gt; if !(dataA == value || dataB == value) { }<br>&gt; if dataA != value &amp;&amp; dataB != value { }<br>&gt; if dataA != value { if dataB != value { } }<br>&gt;<br>&gt; All three are valid, and the baby pyramid of doom version may even be the<br>&gt; right option depending on how you think the code will evolve.<br>&gt;<br>&gt; Back to the where vs guard/if not continue, I see the former as &quot;I<br>&gt; want/like&quot; and the laters as &quot;I don&#39;t want/like&quot;.<br>&gt;<br>&gt; for book in books where book.language == .French<br>&gt; {<br>&gt;     guard book.readCount == 0 else { continue }<br>&gt;     if book.originalLanguage == .English { continue } // should read the<br>&gt; original<br>&gt;     // My apologies to translators who might feel offended.<br>&gt; }<br>&gt;<br>&gt; One could put all the conditions as a single where, as a multiple guard,<br>&gt; as multiple if, and as a single guard or if, but I think that my keyword<br>&gt; choices better convey my message:<br>&gt;<br>&gt; I want a book written in French<br>&gt; Protect me from what I have read<br>&gt; No translation from English for me<br>&gt; (Not that those are worst than others, but I can read the original...<br>&gt; Apologies again to translator)<br>&gt;<br>&gt; Dany<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160611/ff88d223/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b6a0b6562cd412f587c69d192f335161?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>plx</string> &lt;plxswift at icloud.com&gt;<p>June 12, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; On Jun 10, 2016, at 12:59 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Fri, Jun 10, 2016 at 12:30 PM, let var go &lt;letvargo at gmail.com &lt;mailto:letvargo at gmail.com&gt;&gt; wrote:<br>&gt; I respect that anti-goal, but I think being over-rigid about limiting developers&#39; choice of expression is also an anti-goal.<br>&gt; <br>&gt; To me, it is like guard statements vs. if-let statements. Some people find one to be more clear than the other. Often times the best choice depends on the context. Sometimes a guard statement can be re-written as an if-let statement in a way that makes the code more clear, and vice versa.<br>&gt; <br>&gt; The comparison with `guard` and `if` is a little inapt. The introduction of `guard` solved a practical daily issue with `if` that was nicknamed the pyramid of doom, where successive `if let` statements caused code to be severely nested in braces and nearly unreadable. Further, you must exist the scope with `guard`; thus, its use signals an intention not possible with `if`. If, on the other hand, you do not wish to exit the scope, you must use `if`. So in a Venn diagram, there are independent uses for `if` that cannot be fulfilled by `guard`, and uses for `guard` that would be unreadable if rewritten with `if`.<br>&gt;  <br>&gt; And different people will inevitably have different personal preferences - their own &quot;style&quot;, if you will - and will favor one over the other. But it would be a mistake to force everyone into one box in order to prevent the fracturing of the Swift community into &quot;dialects.&quot;<br>&gt; <br>&gt; But most importantly (and this is really the kicker for me) there are times when the &quot;where&quot; syntax provides the maximum amount of clarity in the context of my code, and I don&#39;t want to lose that expressive power.<br>&gt; <br>&gt; This is the key and salient point here. Would you be able to share some examples where the `where` syntax provides a clear win in clarity? That would definitely be a huge pro, if it can be used to solve issues in expressiveness much like `guard` allowed elimination of the pyramid of doom.<br></p><p>I’d hate to lose `where` in for-in loops; I use it a lot. My own 2c on it is that I think if you look at isolated uses of `where` it’s not adding much clarity, but having it can allow you to adopt more-consistent patterns overall…which IMHO *does* result in clearer code.<br></p><p>I’ll provide two examples of such “consistent patterns” and how the presence of `for`-`in` `where` helps stick with them.<br></p><p>First Pattern: for some simple types I like to do data-driven unit tests — here’s a collection of values to test, here’s a basic, “algebraic&quot; property that should apply, test it actually does, and so on.<br></p><p>When I write a set of tests like that, I like to have a single variable holding the “instances to test” that is shared by all relevant tests; this lets me start with only a handful of values, confirm it seems to work, and then have a single place to edit once I’m ready to expand the values we test upon.<br></p><p>Such tests might wind up looking like this:<br></p><p>  func testNaiveAncestor() {<br>     // the root has no ancestor so we simply to skip it:<br>     for position in testPositions where !position.isRootPosition {<br>        XCTAssertLessThan(<br>         position.naiveAncestor(), <br>         position<br>        )<br>     }<br>  }<br></p><p>  func testNaiveSuccessor() {<br>     for position in testPositions {<br>        XCTAssertGreaterThan(<br>         position.naiveSuccessor(), <br>         position<br>        )<br>     }<br>  }<br></p><p>…where `testPositions` holds the values to test, and the two tests are each testing a basic algebraic property. Having `where` available on for-loops makes it possible to write these in such a way that the intended parallelism between the two is visually-apparent—you can tell they’re the same sort of thing just by looking at them—and it does so in a way that makes few assumptions on the type-or-contents of `testPositions`. <br></p><p>So `where` here, IMHO, isn’t *clearly* clearer in `testNaiveAncestor()`, but it lets `testNaiveAncestor()` and `testNaiveSuccessor()` (etc.) be *systemically*-clearer, as it were.<br></p><p>Second Pattern: relatedly, I find code is much clearer when `guard` is only-ever used for early exits and early returns. <br></p><p>There’s no requirement to *not* use `guard` and `continue` together, but if one is willing to stick to `guard` == “early exit / early return” it makes code much easier to read and audit.<br></p><p>In a handful of places I have for loops that would need both `continue`-style conditionals and also early-exit conditionals; having `where` means I can stick to using `guard` for early-exits, whereas without it I’d have extra nesting or mixed “early-exit” guard and “continue” guard. <br></p><p>This is as short as I can make it:<br></p><p>  /// Returns the portion of our frame that *might* be visible on-screen; doesn&#39;t<br>  /// handle occlusion, but unlike `approximateWindowRegion` will account for <br>  /// clipping done by our superviews.<br>  ///<br>  /// - note: `intersectionRegion(with view: UIView)` takes `self.bounds`, converts<br>  ///         it to `view`&#39;s coordinates, intersects with `view.bounds`, then converts<br>  ///         that back to `self`&#39;s coordinates...returning `nil` for any empty rects.<br>  ///<br>  @warn_unused_result<br>  public final func approximateVisibleRegion() -&gt; CGRect? {<br>    // before checking everything, confirm we *have a window* and that our<br>    // position vis-a-vis the window could *possibly* make sense<br>    // no window =&gt; not visible<br>    guard let w = self.window else {<br>      return nil<br>    }<br>    // empty &quot;frame-intersect-window&quot; =&gt; not visible<br>    guard let regionInWindow = self.intersectionRegion(with: w) else {<br>      return nil<br>    }<br>    <br>    // now we prepare to &quot;walk upstream&quot;:<br>    var lastVisitedView = self<br>    var currentFrame = regionInWindow<br></p><p>    // walk &quot;upstream&quot; (starting from our superview), skipping:<br>    // - superviews that don&#39;t clip-to-bounds<br>    // - the window (since we already took our intersection with it)<br>    for upstreamView in self.exclusiveSuperviewSequence() where upstreamView.clipsToBounds &amp;&amp; upstreamView !== w {<br>      // finding a nil intersection =&gt; not visible, early-exit<br>      guard let upstreamIntersection = lastVisitedView.intersectionRegion(with: upstreamView) else {<br>        return nil<br>      }<br>      lastVisitedView = upstreamView<br>      currentFrame = upstreamIntersection<br>    }<br>    // belt-and-suspenders final steps:<br>    assert(!currentFrame.isEmpty &amp;&amp; !currentFrame.isNull)<br>    return self.convertRect(<br>      currentFrame, <br>      fromView: lastVisitedView<br>    ).onlyIfNonEmpty<br>  }<br></p><p>…and without `where` on `for`-`in` loops, the main `for` loop winds up looking like one of these:<br></p><p>    // with `if`:<br>    for upstreamView in self.exclusiveSuperviewSequence() {<br>      if upstreamView.clipsToBounds &amp;&amp; upstreamView !== w {<br>        // finding a nil intersection =&gt; not visible, early-exit<br>        guard let upstreamIntersection = lastVisitedView.intersectionRegion(with: upstreamView) else {<br>          return nil<br>        }<br>        lastVisitedView = upstreamView<br>        currentFrame = upstreamIntersection<br>      }<br>    }<br></p><p>    // with mixed-guard usage:<br>    for upstreamView in self.exclusiveSuperviewSequence() {<br>      guard upstreamView.clipsToBounds &amp;&amp; upstreamView !== w else {<br>        continue<br>      }<br>      // finding a nil intersection =&gt; not visible, early-exit<br>      guard let upstreamIntersection = lastVisitedView.intersectionRegion(with: upstreamView) else {<br>        return nil<br>      }<br>      lastVisitedView = upstreamView<br>      currentFrame = upstreamIntersection<br>      }<br>    }<br></p><p>…and again neither one is *awful*, but:<br></p><p>- the one with `if` adds another level of nesting (annoying!)<br>- the one with “guard” has mixed “guard” usage (continue/exit)<br></p><p>…and since I like to stick to early-exit guard—it makes it easier to read if “guard == exit method”—I’d have to go with the nesting option, which I just don’t like much.<br></p><p>Those are the strongest examples I can find; the rest are all essentially like this:<br></p><p>  extension Dictionary {<br></p><p>    // with `where`<br>    func mapValues&lt;T&gt;(excludingKeys keySet: Set&lt;Key&gt;, @noescape valueMap: (Value) -&gt; T) -&gt; [Key:T] {<br>      guard !keySet.isEmpty else { <br>        return self.mapValues(valueMap) <br>      }<br>      var result: [Key:T] = [:]<br>      for (key,value) in self where !keySet.contains(key) {<br>        result[key] = valueMap(result)<br>      }<br>      return result<br>    }<br></p><p>    // without `where`, `if`:<br>    func mapValues&lt;T&gt;(excludingKeys keySet: Set&lt;Key&gt;, @noescape valueMap: (Value) -&gt; T) -&gt; [Key:T] {<br>      guard !keySet.isEmpty else { <br>        return self.mapValues(valueMap) <br>      }<br>      var result: [Key:T] = [:]<br>      for (key,value) in self {<br>        if !keySet.contains(key) {<br>          result[key] = valueMap(result)<br>        }<br>      }<br>      return result<br>    }<br></p><p>    // without `where`, `guard`:<br>    func mapValues&lt;T&gt;(excludingKeys keySet: Set&lt;Key&gt;, @noescape valueMap: (Value) -&gt; T) -&gt; [Key:T] {<br>      guard !keySet.isEmpty else { <br>        return self.mapValues(valueMap) <br>      }<br>      var result: [Key:T] = [:]<br>      for (key,value) in self {<br>        guard keySet.contains(key) else { <br>          continue <br>        }<br>        result[key] = valueMap(result)<br>      }<br>      return result<br>    }<br></p><p>  }<br></p><p>…where again I don’t like “continue” `guard` and thus would wind up picking the `if` variant, which adds another level of nesting (or use `.lazy.filter` and trust the compiler’s going to boil away the overhead for me).<br></p><p>So in conclusion, IMHO `where` on a `for`-`in` is a *modest* improvement in clarity when considered in isolation, but is handier than it may initially seem b/c it can allow for broader overall consistency of style.<br></p><p>I thus would be in favor of keeping `where` on for-in, or if it must be removed doing so with the intent to restore some better-designed equivalent shortly after removal.<br></p><p>&gt;  <br>&gt; <br>&gt; On Fri, Jun 10, 2016 at 10:17 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use it--is indicative of a key worry here: it&#39;s inessential to the language and promotes dialects wherein certain people use it and others wherein they don&#39;t. This is an anti-goal.<br>&gt; <br>&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com &lt;mailto:letvargo at gmail.com&gt;&gt; wrote:<br>&gt; Leave it in!<br>&gt; <br>&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I do it is because I&#39;ve decided that in the context of that piece of code it does exactly what I want it to do with the maximum amount of clarity.<br>&gt; <br>&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it detracts from the language at all.<br>&gt; <br>&gt; The *only* argument that I have heard for removing it is that some people don&#39;t immediately intuit how to use it. I didn&#39;t have any trouble with it at all. It follows one of the most basic programming patterns ever: &quot;For all x in X, if predicate P is true, do something.&quot; The use of the keyword &quot;where&quot; makes perfect sense in that context, and when I read it out loud, it sounds natural: &quot;For all x in X where P, do something.&quot; That is an elegant, succinct, and clear way of stating exactly what I want my program to do.<br>&gt; <br>&gt; I don&#39;t doubt that it has caused some confusion for some people, but I&#39;m not sold that that is a good enough reason to get rid of it. It seems strange to get rid of a tool because not everyone understands how to use it immediately, without ever having to ask a single question. As long as its not a dangerous tool (and it isn&#39;t), then keep it in the workshop for those times when it comes in handy. And even if there is some initial confusion, it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does this work like X, or does this work like Y? Let&#39;s see...oh, it works like X. Ok.&quot; That&#39;s the entire learning curve...about 5 seconds of curiosity followed by the blissful feeling of resolution.<br>&gt; <br>&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party Swift Repos&quot; folder and did the same search. Among the 15 repos in that folder, a joint search returned about 650 hits on for-in (again with some false positives) and not a single for-in-while use.<br>&gt; <br>&gt; Weird. My own Swift projects (not on Github :P) use “where” all the time with for loops. I really like it and think it reads *and* writes far better as well as makes for nicer one-liners. In one project, by rough count, I have about 20 that use “where” vs. 40 in that same project not using “where”.<br>&gt; <br>&gt; In another smaller test project, there are only 10 for loops, but even so one still managed to use where.<br>&gt; <br>&gt; Not a lot of data without looking at even more projects, I admit, but this seems to suggest that the usage of “where” is going to be very developer-dependent. Perhaps there’s some factor of prior background at work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt; <br>&gt; That is worrying if true, because it suggests that it&#39;s enabling &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;  <br>&gt; <br>&gt; I feel like “where” is a more declarative construct and that we should be encouraging that way of thinking in general. When using it, it feels like “magic” for some reason - even though there’s nothing special about it. It feels like I’ve made the language work *for me* a little bit rather than me having to contort my solution to the will of the language. This may be highly subjective.<br>&gt; <br>&gt; l8r<br>&gt; Sean<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160612/b95cb1cc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 12, 2016 at 07:00:00pm</p></header><div class="content"><p>On Sun, Jun 12, 2016 at 7:10 AM, plx via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Jun 10, 2016, at 12:59 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Fri, Jun 10, 2016 at 12:30 PM, let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; I respect that anti-goal, but I think being over-rigid about limiting<br>&gt;&gt; developers&#39; choice of expression is also an anti-goal.<br>&gt;&gt;<br>&gt;&gt; To me, it is like guard statements vs. if-let statements. Some people<br>&gt;&gt; find one to be more clear than the other. Often times the best choice<br>&gt;&gt; depends on the context. Sometimes a guard statement can be re-written as an<br>&gt;&gt; if-let statement in a way that makes the code more clear, and vice versa.<br>&gt;&gt;<br>&gt;<br>&gt; The comparison with `guard` and `if` is a little inapt. The introduction<br>&gt; of `guard` solved a practical daily issue with `if` that was nicknamed the<br>&gt; pyramid of doom, where successive `if let` statements caused code to be<br>&gt; severely nested in braces and nearly unreadable. Further, you must exist<br>&gt; the scope with `guard`; thus, its use signals an intention not possible<br>&gt; with `if`. If, on the other hand, you do not wish to exit the scope, you<br>&gt; must use `if`. So in a Venn diagram, there are independent uses for `if`<br>&gt; that cannot be fulfilled by `guard`, and uses for `guard` that would be<br>&gt; unreadable if rewritten with `if`.<br>&gt;<br>&gt;<br>&gt;&gt; And different people will inevitably have different personal preferences<br>&gt;&gt; - their own &quot;style&quot;, if you will - and will favor one over the other. But<br>&gt;&gt; it would be a mistake to force everyone into one box in order to prevent<br>&gt;&gt; the fracturing of the Swift community into &quot;dialects.&quot;<br>&gt;&gt;<br>&gt;<br>&gt;&gt; But most importantly (and this is really the kicker for me) there are<br>&gt;&gt; times when the &quot;where&quot; syntax provides the maximum amount of clarity in the<br>&gt;&gt; context of my code, and I don&#39;t want to lose that expressive power.<br>&gt;&gt;<br>&gt;<br>&gt; This is the key and salient point here. Would you be able to share some<br>&gt; examples where the `where` syntax provides a clear win in clarity? That<br>&gt; would definitely be a huge pro, if it can be used to solve issues in<br>&gt; expressiveness much like `guard` allowed elimination of the pyramid of doom.<br>&gt;<br>&gt;<br>&gt; I’d hate to lose `where` in for-in loops; I use it a lot. My own 2c on it<br>&gt; is that I think if you look at isolated uses of `where` it’s not adding<br>&gt; much clarity, but having it can allow you to adopt more-consistent patterns<br>&gt; overall…which IMHO *does* result in clearer code.<br>&gt;<br>&gt; I’ll provide two examples of such “consistent patterns” and how the<br>&gt; presence of `for`-`in` `where` helps stick with them.<br>&gt;<br>&gt; First Pattern: for some simple types I like to do data-driven unit tests —<br>&gt; here’s a collection of values to test, here’s a basic, “algebraic&quot; property<br>&gt; that should apply, test it actually does, and so on.<br>&gt;<br>&gt; When I write a set of tests like that, I like to have a single variable<br>&gt; holding the “instances to test” that is shared by all relevant tests; this<br>&gt; lets me start with only a handful of values, confirm it seems to work, and<br>&gt; then have a single place to edit once I’m ready to expand the values we<br>&gt; test upon.<br>&gt;<br>&gt; Such tests might wind up looking like this:<br>&gt;<br>&gt;   func testNaiveAncestor() {<br>&gt;      // the root has no ancestor so we simply to skip it:<br>&gt;      for position in testPositions where !position.isRootPosition {<br>&gt;         XCTAssertLessThan(<br>&gt;          position.naiveAncestor(),<br>&gt;          position<br>&gt;         )<br>&gt;      }<br>&gt;   }<br>&gt;<br>&gt;   func testNaiveSuccessor() {<br>&gt;      for position in testPositions {<br>&gt;         XCTAssertGreaterThan(<br>&gt;          position.naiveSuccessor(),<br>&gt;          position<br>&gt;         )<br>&gt;      }<br>&gt;   }<br>&gt;<br>&gt; …where `testPositions` holds the values to test, and the two tests are<br>&gt; each testing a basic algebraic property. Having `where` available on<br>&gt; for-loops makes it possible to write these in such a way that the intended<br>&gt; parallelism between the two is visually-apparent—you can tell they’re the<br>&gt; same sort of thing just by looking at them—and it does so in a way that<br>&gt; makes few assumptions on the type-or-contents of `testPositions`.<br>&gt;<br></p><p>First, notice how your comment is related to the `where` clause but is<br>actually sitting on top of the loop itself. Second, one of these two tests<br>visits every element while the other doesn&#39;t, and it took me three reads<br>before I could see that because I literally couldn&#39;t find the `where`<br>clause the first two times I scanned through your code. This is a false<br>&quot;parallelism,&quot; causing the very thing that *isn&#39;t* parallel to disappear<br>from the reader&#39;s eye. Compare instead this alternative, which also flips<br>the boolean assertion:<br></p><p>```<br>func testNaiveAncestor() {<br>  for position in testPositions {<br>    // the root has no ancestor<br>    if position.isRootPosition { continue }<br>    // (notice how I don&#39;t even have to comment that we&#39;re skipping root,<br>    // because the code says it explicitly for me)<br></p><p>    XCTAssertLessThan(position.naiveAncestor(), position)<br>  }<br>}<br>```<br></p><p>Now, with my rewriting, the part of your test that is strictly similar to<br>the other test looks parallel, and the one part that isn&#39;t at all similar<br>(the skipping part) stands out explicitly and is now self-documenting code.<br></p><p><br>&gt; So `where` here, IMHO, isn’t *clearly* clearer in `testNaiveAncestor()`,<br>&gt; but it lets `testNaiveAncestor()` and `testNaiveSuccessor()` (etc.) be<br>&gt; *systemically*-clearer, as it were.<br>&gt;<br>&gt; Second Pattern: relatedly, I find code is much clearer when `guard` is<br>&gt; only-ever used for early exits and early returns.<br>&gt;<br>&gt; There’s no requirement to *not* use `guard` and `continue` together, but<br>&gt; if one is willing to stick to `guard` == “early exit / early return” it<br>&gt; makes code much easier to read and audit.<br>&gt;<br>&gt; In a handful of places I have for loops that would need both<br>&gt; `continue`-style conditionals and also early-exit conditionals; having<br>&gt; `where` means I can stick to using `guard` for early-exits, whereas without<br>&gt; it I’d have extra nesting or mixed “early-exit” guard and “continue” guard.<br>&gt;<br></p><p>I don&#39;t know what to say here. The fact is that `guard` with `continue` is<br>a documented and advertised feature of Swift; it&#39;s not simply supported by<br>accident. Of course, you&#39;re free to choose not to use that feature at all.<br>And it is true that, currently, `where` allows you to avoid that feature at<br>the top of a `for` loop, but anywhere else inside the loop and you&#39;ll have<br>to deal with extra nesting if you choose to reject `guard` with `continue`.<br></p><p>IIUC, one of the motivating reasons for introducing `guard` was to solve<br>the pyramid of doom problem. So you&#39;re rejecting the intended solution for<br>extra nesting, at least in certain circumstances, a choice you&#39;re obviously<br>free to make in your own code. But when it comes to designing a language<br>for everyone, the fact that some users reject the intended solution would<br>be grounds for re-examining that solution (i.e. `guard`), but the mantra<br>here has always been one solution where possible and not multiple. So this<br>certainly cannot be a justification for another feature (i.e. `where`)<br>which only incidentally provides a substitute solution in certain<br>situations.<br></p><p><br>&gt; This is as short as I can make it:<br>&gt;<br>&gt;   /// Returns the portion of our frame that *might* be visible on-screen;<br>&gt; doesn&#39;t<br>&gt;   /// handle occlusion, but unlike `approximateWindowRegion` will account<br>&gt; for<br>&gt;   /// clipping done by our superviews.<br>&gt;   ///<br>&gt;   /// - note: `intersectionRegion(with view: UIView)` takes `self.bounds`,<br>&gt; converts<br>&gt;   ///         it to `view`&#39;s coordinates, intersects with `view.bounds`,<br>&gt; then converts<br>&gt;   ///         that back to `self`&#39;s coordinates...returning `nil` for any<br>&gt; empty rects.<br>&gt;   ///<br>&gt;   @warn_unused_result<br>&gt;   public final func approximateVisibleRegion() -&gt; CGRect? {<br>&gt;     // before checking everything, confirm we *have a window* and that our<br>&gt;     // position vis-a-vis the window could *possibly* make sense<br>&gt;     // no window =&gt; not visible<br>&gt;     guard let w = self.window else {<br>&gt;       return nil<br>&gt;     }<br>&gt;     // empty &quot;frame-intersect-window&quot; =&gt; not visible<br>&gt;     guard let regionInWindow = self.intersectionRegion(with: w) else {<br>&gt;       return nil<br>&gt;     }<br>&gt;<br>&gt;     // now we prepare to &quot;walk upstream&quot;:<br>&gt;     var lastVisitedView = self<br>&gt;     var currentFrame = regionInWindow<br>&gt;<br>&gt;     // walk &quot;upstream&quot; (starting from our superview), skipping:<br>&gt;     // - superviews that don&#39;t clip-to-bounds<br>&gt;     // - the window (since we already took our intersection with it)<br>&gt;     for upstreamView in self.exclusiveSuperviewSequence() where<br>&gt; upstreamView.clipsToBounds &amp;&amp; upstreamView !== w {<br>&gt;       // finding a nil intersection =&gt; not visible, early-exit<br>&gt;       guard let upstreamIntersection =<br>&gt; lastVisitedView.intersectionRegion(with: upstreamView) else {<br>&gt;         return nil<br>&gt;       }<br>&gt;       lastVisitedView = upstreamView<br>&gt;       currentFrame = upstreamIntersection<br>&gt;     }<br>&gt;     // belt-and-suspenders final steps:<br>&gt;     assert(!currentFrame.isEmpty &amp;&amp; !currentFrame.isNull)<br>&gt;     return self.convertRect(<br>&gt;       currentFrame,<br>&gt;       fromView: lastVisitedView<br>&gt;     ).onlyIfNonEmpty<br>&gt;   }<br>&gt;<br>&gt; …and without `where` on `for`-`in` loops, the main `for` loop winds up<br>&gt; looking like one of these:<br>&gt;<br>&gt;     // with `if`:<br>&gt;     for upstreamView in self.exclusiveSuperviewSequence() {<br>&gt;       if upstreamView.clipsToBounds &amp;&amp; upstreamView !== w {<br>&gt;         // finding a nil intersection =&gt; not visible, early-exit<br>&gt;         guard let upstreamIntersection =<br>&gt; lastVisitedView.intersectionRegion(with: upstreamView) else {<br>&gt;           return nil<br>&gt;         }<br>&gt;         lastVisitedView = upstreamView<br>&gt;         currentFrame = upstreamIntersection<br>&gt;       }<br>&gt;     }<br>&gt;<br>&gt;     // with mixed-guard usage:<br>&gt;     for upstreamView in self.exclusiveSuperviewSequence() {<br>&gt;       guard upstreamView.clipsToBounds &amp;&amp; upstreamView !== w else {<br>&gt;         continue<br>&gt;       }<br>&gt;       // finding a nil intersection =&gt; not visible, early-exit<br>&gt;       guard let upstreamIntersection =<br>&gt; lastVisitedView.intersectionRegion(with: upstreamView) else {<br>&gt;         return nil<br>&gt;       }<br>&gt;       lastVisitedView = upstreamView<br>&gt;       currentFrame = upstreamIntersection<br>&gt;       }<br>&gt;     }<br>&gt;<br>&gt; …and again neither one is *awful*, but:<br>&gt;<br>&gt; - the one with `if` adds another level of nesting (annoying!)<br>&gt; - the one with “guard” has mixed “guard” usage (continue/exit)<br>&gt;<br>&gt; …and since I like to stick to early-exit guard—it makes it easier to read<br>&gt; if “guard == exit method”—I’d have to go with the nesting option, which I<br>&gt; just don’t like much.<br>&gt;<br>&gt; Those are the strongest examples I can find; the rest are all essentially<br>&gt; like this:<br>&gt;<br>&gt;   extension Dictionary {<br>&gt;<br>&gt;     // with `where`<br>&gt;     func mapValues&lt;T&gt;(excludingKeys keySet: Set&lt;Key&gt;, @noescape valueMap:<br>&gt; (Value) -&gt; T) -&gt; [Key:T] {<br>&gt;       guard !keySet.isEmpty else {<br>&gt;         return self.mapValues(valueMap)<br>&gt;       }<br>&gt;       var result: [Key:T] = [:]<br>&gt;       for (key,value) in self where !keySet.contains(key) {<br>&gt;         result[key] = valueMap(result)<br>&gt;       }<br>&gt;       return result<br>&gt;     }<br>&gt;<br>&gt;     // without `where`, `if`:<br>&gt;     func mapValues&lt;T&gt;(excludingKeys keySet: Set&lt;Key&gt;, @noescape valueMap:<br>&gt; (Value) -&gt; T) -&gt; [Key:T] {<br>&gt;       guard !keySet.isEmpty else {<br>&gt;         return self.mapValues(valueMap)<br>&gt;       }<br>&gt;       var result: [Key:T] = [:]<br>&gt;       for (key,value) in self {<br>&gt;         if !keySet.contains(key) {<br>&gt;           result[key] = valueMap(result)<br>&gt;         }<br>&gt;       }<br>&gt;       return result<br>&gt;     }<br>&gt;<br>&gt;     // without `where`, `guard`:<br>&gt;     func mapValues&lt;T&gt;(excludingKeys keySet: Set&lt;Key&gt;, @noescape valueMap:<br>&gt; (Value) -&gt; T) -&gt; [Key:T] {<br>&gt;       guard !keySet.isEmpty else {<br>&gt;         return self.mapValues(valueMap)<br>&gt;       }<br>&gt;       var result: [Key:T] = [:]<br>&gt;       for (key,value) in self {<br>&gt;         guard keySet.contains(key) else {<br>&gt;           continue<br>&gt;         }<br>&gt;         result[key] = valueMap(result)<br>&gt;       }<br>&gt;       return result<br>&gt;     }<br>&gt;<br>&gt;   }<br>&gt;<br>&gt; …where again I don’t like “continue” `guard` and thus would wind up<br>&gt; picking the `if` variant, which adds another level of nesting (or use<br>&gt; `.lazy.filter` and trust the compiler’s going to boil away the overhead for<br>&gt; me).<br>&gt;<br>&gt; So in conclusion, IMHO `where` on a `for`-`in` is a *modest* improvement<br>&gt; in clarity when considered in isolation, but is handier than it may<br>&gt; initially seem b/c it can allow for broader overall consistency of style.<br>&gt;<br>&gt; I thus would be in favor of keeping `where` on for-in, or if it must be<br>&gt; removed doing so with the intent to restore some better-designed equivalent<br>&gt; shortly after removal.<br>&gt;<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Fri, Jun 10, 2016 at 10:17 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use<br>&gt;&gt;&gt; it--is indicative of a key worry here: it&#39;s inessential to the language and<br>&gt;&gt;&gt; promotes dialects wherein certain people use it and others wherein they<br>&gt;&gt;&gt; don&#39;t. This is an anti-goal.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Leave it in!<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I do it<br>&gt;&gt;&gt;&gt; is because I&#39;ve decided that in the context of that piece of code it does<br>&gt;&gt;&gt;&gt; exactly what I want it to do with the maximum amount of clarity.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it<br>&gt;&gt;&gt;&gt; detracts from the language at all.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; The *only* argument that I have heard for removing it is that some<br>&gt;&gt;&gt;&gt; people don&#39;t immediately intuit how to use it. I didn&#39;t have any trouble<br>&gt;&gt;&gt;&gt; with it at all. It follows one of the most basic programming patterns ever:<br>&gt;&gt;&gt;&gt; &quot;For all x in X, if predicate P is true, do something.&quot; The use of the<br>&gt;&gt;&gt;&gt; keyword &quot;where&quot; makes perfect sense in that context, and when I read it out<br>&gt;&gt;&gt;&gt; loud, it sounds natural: &quot;For all x in X where P, do something.&quot; That is an<br>&gt;&gt;&gt;&gt; elegant, succinct, and clear way of stating exactly what I want my program<br>&gt;&gt;&gt;&gt; to do.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I don&#39;t doubt that it has caused some confusion for some people, but<br>&gt;&gt;&gt;&gt; I&#39;m not sold that that is a good enough reason to get rid of it. It seems<br>&gt;&gt;&gt;&gt; strange to get rid of a tool because not everyone understands how to use it<br>&gt;&gt;&gt;&gt; immediately, without ever having to ask a single question. As long as its<br>&gt;&gt;&gt;&gt; not a dangerous tool (and it isn&#39;t), then keep it in the workshop for those<br>&gt;&gt;&gt;&gt; times when it comes in handy. And even if there is some initial confusion,<br>&gt;&gt;&gt;&gt; it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does this work<br>&gt;&gt;&gt;&gt; like X, or does this work like Y? Let&#39;s see...oh, it works like X. Ok.&quot;<br>&gt;&gt;&gt;&gt; That&#39;s the entire learning curve...about 5 seconds of curiosity followed by<br>&gt;&gt;&gt;&gt; the blissful feeling of resolution.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party<br>&gt;&gt;&gt;&gt;&gt;&gt; Swift Repos&quot; folder and did the same search. Among the 15 repos in that<br>&gt;&gt;&gt;&gt;&gt;&gt; folder, a joint search returned about 650 hits on for-in (again with some<br>&gt;&gt;&gt;&gt;&gt;&gt; false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Weird. My own Swift projects (not on Github :P) use “where” all the<br>&gt;&gt;&gt;&gt;&gt;&gt; time with for loops. I really like it and think it reads *and* writes far<br>&gt;&gt;&gt;&gt;&gt;&gt; better as well as makes for nicer one-liners. In one project, by rough<br>&gt;&gt;&gt;&gt;&gt;&gt; count, I have about 20 that use “where” vs. 40 in that same project not<br>&gt;&gt;&gt;&gt;&gt;&gt; using “where”.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; In another smaller test project, there are only 10 for loops, but<br>&gt;&gt;&gt;&gt;&gt;&gt; even so one still managed to use where.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Not a lot of data without looking at even more projects, I admit, but<br>&gt;&gt;&gt;&gt;&gt;&gt; this seems to suggest that the usage of “where” is going to be very<br>&gt;&gt;&gt;&gt;&gt;&gt; developer-dependent. Perhaps there’s some factor of prior background at<br>&gt;&gt;&gt;&gt;&gt;&gt; work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; That is worrying if true, because it suggests that it&#39;s enabling<br>&gt;&gt;&gt;&gt;&gt; &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; I feel like “where” is a more declarative construct and that we<br>&gt;&gt;&gt;&gt;&gt;&gt; should be encouraging that way of thinking in general. When using it, it<br>&gt;&gt;&gt;&gt;&gt;&gt; feels like “magic” for some reason - even though there’s nothing special<br>&gt;&gt;&gt;&gt;&gt;&gt; about it. It feels like I’ve made the language work *for me* a little bit<br>&gt;&gt;&gt;&gt;&gt;&gt; rather than me having to contort my solution to the will of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt; This may be highly subjective.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160612/ab6377f2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b6a0b6562cd412f587c69d192f335161?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>plx</string> &lt;plxswift at icloud.com&gt;<p>June 12, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; <br>&gt; First, notice how your comment is related to the `where` clause but is actually sitting on top of the loop itself. Second, one of these two tests visits every element while the other doesn&#39;t, and it took me three reads before I could see that because I literally couldn&#39;t find the `where` clause the first two times I scanned through your code. This is a false &quot;parallelism,&quot; causing the very thing that *isn&#39;t* parallel to disappear from the reader&#39;s eye. Compare instead this alternative, which also flips the boolean assertion:<br>&gt; <br>&gt; ```<br>&gt; func testNaiveAncestor() {<br>&gt;   for position in testPositions {<br>&gt;     // the root has no ancestor<br>&gt;     if position.isRootPosition { continue }<br>&gt;     // (notice how I don&#39;t even have to comment that we&#39;re skipping root,<br>&gt;     // because the code says it explicitly for me)<br>&gt; <br>&gt;     XCTAssertLessThan(position.naiveAncestor(), position)<br>&gt;   }<br>&gt; }<br>&gt; ```<br></p><p>Fair enough; I added the comment when posting here…the original didn’t have one, because the where clause also explicitly says we’re skipping that one. <br></p><p>To me the parallelism I care about is the following paraphrase:<br></p><p>  for testItem in allRelevantPossibilities { someBasicPropertyHolds(testItem) }<br>  for testItem in allRelevantPossibilities { someOtherPropertyHolds(testItem) }<br></p><p>…and adding the logic to skip the irrelevant option into the definition of “allRelevantPossibilities” seems to do a better job preserving the structural similarity I care about than throwing in some ad-hoc looking imperative logic into the test logic itself (even though functionally both are equivalent).<br></p><p>&gt; <br>&gt; Now, with my rewriting, the part of your test that is strictly similar to the other test looks parallel, and the one part that isn&#39;t at all similar (the skipping part) stands out explicitly and is now self-documenting code.<br>&gt; <br>&gt; <br>&gt; So `where` here, IMHO, isn’t *clearly* clearer in `testNaiveAncestor()`, but it lets `testNaiveAncestor()` and `testNaiveSuccessor()` (etc.) be *systemically*-clearer, as it were.<br>&gt; <br>&gt; Second Pattern: relatedly, I find code is much clearer when `guard` is only-ever used for early exits and early returns. <br>&gt; <br>&gt; There’s no requirement to *not* use `guard` and `continue` together, but if one is willing to stick to `guard` == “early exit / early return” it makes code much easier to read and audit.<br>&gt; <br>&gt; In a handful of places I have for loops that would need both `continue`-style conditionals and also early-exit conditionals; having `where` means I can stick to using `guard` for early-exits, whereas without it I’d have extra nesting or mixed “early-exit” guard and “continue” guard. <br>&gt; <br>&gt; I don&#39;t know what to say here. The fact is that `guard` with `continue` is a documented and advertised feature of Swift; it&#39;s not simply supported by accident. Of course, you&#39;re free to choose not to use that feature at all. And it is true that, currently, `where` allows you to avoid that feature at the top of a `for` loop, but anywhere else inside the loop and you&#39;ll have to deal with extra nesting if you choose to reject `guard` with `continue`.<br></p><p>The same is true of `where`, no? It’s a part of the language, documented, free to use or not to use when or if you find it helpful (or not).<br></p><p>In the same way you seem to have with `where` after a for-in — and would prefer to not have to check for it, etc. — I have a hard time following mixed break/continue/return usage, and prefer to not have to check the body of each guard clause’s `else` to figure out the control flow.<br></p><p>I can understand that you find that difficulty baffling; I find your difficulties `where` baffling, but can accept they are sincere.<br></p><p>&gt; IIUC, one of the motivating reasons for introducing `guard` was to solve the pyramid of doom problem. So you&#39;re rejecting the intended solution for extra nesting, at least in certain circumstances, a choice you&#39;re obviously free to make in your own code. But when it comes to designing a language for everyone, the fact that some users reject the intended solution would be grounds for re-examining that solution (i.e. `guard`), but the mantra here has always been one solution where possible and not multiple. So this certainly cannot be a justification for another feature (i.e. `where`) which only incidentally provides a substitute solution in certain situations.<br></p><p>Personally I found this use of `where` completely unremarkable and something I never thought about until I saw this discussion gaining momentum; I was already used to similar constructs so it just seemed useful in a familiar and thoroughly-uninteresting way.<br></p><p>That said, I could get behind excising it if there was serious interest in eventually building-in something like LINQ or comprehensions (etc.); `where` after a for-in is at this point a bit of an odd duckling.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160612/111d87c6/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>June 10, 2016 at 07:00:00pm</p></header><div class="content"><p>I think sometimes the community in this mailing list loses sight on the fact that coding is a creative  endeavour much similar to architectural design or painting. There may be math and well researched and structured ideas in place, but it requires creativity too.<br></p><p>Trying to force a strict one size fits all The One True standard usually ends up fragmenting the standard further, by adding yet another take on what is the most orthodox implementation and who are the heretics...<br></p><p>I do not think dismissing the idea of having more than one way of skinning the proverbial cat as an anti-goal is doing a good service to the community or the language as it completely disregards context, people differing idea of the subjective best coding style and patterns (which pattern do I use? Which algorithm do I use to sort this data set with? A good engineer will give you a direct and concise answer, but a better one will say &quot;it depends... What&#39;s the context? What is the problem I need to solve, what are the constraints and the data set I am working on?&quot;).<br></p><p>The way some users seem to want Swift to follow sounds like protecting users from mistakes by sometimes removing the ability which could lead to mistakes in the first place, but that removes all the good things you could do if you were to trust developers with the extra responsibility.<br></p><p>Sent from my iPhone<br></p><p>&gt; On 10 Jun 2016, at 18:30, let var go via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I respect that anti-goal, but I think being over-rigid about limiting developers&#39; choice of expression is also an anti-goal.<br>&gt; <br>&gt; To me, it is like guard statements vs. if-let statements. Some people find one to be more clear than the other. Often times the best choice depends on the context. Sometimes a guard statement can be re-written as an if-let statement in a way that makes the code more clear, and vice versa. And different people will inevitably have different personal preferences - their own &quot;style&quot;, if you will - and will favor one over the other. But it would be a mistake to force everyone into one box in order to prevent the fracturing of the Swift community into &quot;dialects.&quot;<br>&gt; <br>&gt; But most importantly (and this is really the kicker for me) there are times when the &quot;where&quot; syntax provides the maximum amount of clarity in the context of my code, and I don&#39;t want to lose that expressive power.<br>&gt; <br>&gt;&gt; On Fri, Jun 10, 2016 at 10:17 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use it--is indicative of a key worry here: it&#39;s inessential to the language and promotes dialects wherein certain people use it and others wherein they don&#39;t. This is an anti-goal.<br>&gt;&gt; <br>&gt;&gt;&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt;&gt; Leave it in!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I do it is because I&#39;ve decided that in the context of that piece of code it does exactly what I want it to do with the maximum amount of clarity.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it detracts from the language at all.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The *only* argument that I have heard for removing it is that some people don&#39;t immediately intuit how to use it. I didn&#39;t have any trouble with it at all. It follows one of the most basic programming patterns ever: &quot;For all x in X, if predicate P is true, do something.&quot; The use of the keyword &quot;where&quot; makes perfect sense in that context, and when I read it out loud, it sounds natural: &quot;For all x in X where P, do something.&quot; That is an elegant, succinct, and clear way of stating exactly what I want my program to do.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t doubt that it has caused some confusion for some people, but I&#39;m not sold that that is a good enough reason to get rid of it. It seems strange to get rid of a tool because not everyone understands how to use it immediately, without ever having to ask a single question. As long as its not a dangerous tool (and it isn&#39;t), then keep it in the workshop for those times when it comes in handy. And even if there is some initial confusion, it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does this work like X, or does this work like Y? Let&#39;s see...oh, it works like X. Ok.&quot; That&#39;s the entire learning curve...about 5 seconds of curiosity followed by the blissful feeling of resolution.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party Swift Repos&quot; folder and did the same search. Among the 15 repos in that folder, a joint search returned about 650 hits on for-in (again with some false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Weird. My own Swift projects (not on Github :P) use “where” all the time with for loops. I really like it and think it reads *and* writes far better as well as makes for nicer one-liners. In one project, by rough count, I have about 20 that use “where” vs. 40 in that same project not using “where”.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; In another smaller test project, there are only 10 for loops, but even so one still managed to use where.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Not a lot of data without looking at even more projects, I admit, but this seems to suggest that the usage of “where” is going to be very developer-dependent. Perhaps there’s some factor of prior background at work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; That is worrying if true, because it suggests that it&#39;s enabling &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I feel like “where” is a more declarative construct and that we should be encouraging that way of thinking in general. When using it, it feels like “magic” for some reason - even though there’s nothing special about it. It feels like I’ve made the language work *for me* a little bit rather than me having to contort my solution to the will of the language. This may be highly subjective.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/37b20258/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 10, 2016 at 01:00:00pm</p></header><div class="content"><p>On Fri, Jun 10, 2016 at 1:11 PM, Goffredo Marocchi &lt;panajev at gmail.com&gt;<br>wrote:<br></p><p>&gt; I think sometimes the community in this mailing list loses sight on the<br>&gt; fact that coding is a creative  endeavour much similar to architectural<br>&gt; design or painting. There may be math and well researched and structured<br>&gt; ideas in place, but it requires creativity too.<br>&gt;<br></p><p>Architects are constrained to craft buildings that will stand in the face<br>of gravity, and even painters don&#39;t have pigments for every color visible<br>to the human eye. There&#39;s a wonderful novel, _Gadsby_, written without the<br>letter &#39;e&#39;; I haven&#39;t read it but I understand it&#39;s truly an<br>accomplishment. This is not so drastic here. In this case, the apt analogy<br>would be that we find the letter &#39;a with circle on top&#39; to be posing some<br>pesky problems; do you think you could write a novel in English without<br>using &#39;a with circle on top&#39;? I wager that your creativity will not suffer<br>(unless your novel describes a trip to IKEA, in which case I&#39;m sorry).<br></p><p><br>&gt;<br>&gt; Trying to force a strict one size fits all The One True standard usually<br>&gt; ends up fragmenting the standard further, by adding yet another take on<br>&gt; what is the most orthodox implementation and who are the heretics...<br>&gt;<br>&gt; I do not think dismissing the idea of having more than one way of skinning<br>&gt; the proverbial cat as an anti-goal is doing a good service to the community<br>&gt; or the language as it completely disregards context, people differing idea<br>&gt; of the subjective best coding style and patterns (which pattern do I use?<br>&gt; Which algorithm do I use to sort this data set with? A good engineer will<br>&gt; give you a direct and concise answer, but a better one will say &quot;it<br>&gt; depends... What&#39;s the context? What is the problem I need to solve, what<br>&gt; are the constraints and the data set I am working on?&quot;).<br>&gt;<br>&gt; The way some users seem to want Swift to follow sounds like protecting<br>&gt; users from mistakes by sometimes removing the ability which could lead to<br>&gt; mistakes in the first place, but that removes all the good things you could<br>&gt; do if you were to trust developers with the extra responsibility.<br>&gt;<br>&gt; Sent from my iPhone<br>&gt;<br>&gt; On 10 Jun 2016, at 18:30, let var go via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I respect that anti-goal, but I think being over-rigid about limiting<br>&gt; developers&#39; choice of expression is also an anti-goal.<br>&gt;<br>&gt; To me, it is like guard statements vs. if-let statements. Some people find<br>&gt; one to be more clear than the other. Often times the best choice depends on<br>&gt; the context. Sometimes a guard statement can be re-written as an if-let<br>&gt; statement in a way that makes the code more clear, and vice versa. And<br>&gt; different people will inevitably have different personal preferences -<br>&gt; their own &quot;style&quot;, if you will - and will favor one over the other. But it<br>&gt; would be a mistake to force everyone into one box in order to prevent the<br>&gt; fracturing of the Swift community into &quot;dialects.&quot;<br>&gt;<br>&gt; But most importantly (and this is really the kicker for me) there are<br>&gt; times when the &quot;where&quot; syntax provides the maximum amount of clarity in the<br>&gt; context of my code, and I don&#39;t want to lose that expressive power.<br>&gt;<br>&gt; On Fri, Jun 10, 2016 at 10:17 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use<br>&gt;&gt; it--is indicative of a key worry here: it&#39;s inessential to the language and<br>&gt;&gt; promotes dialects wherein certain people use it and others wherein they<br>&gt;&gt; don&#39;t. This is an anti-goal.<br>&gt;&gt;<br>&gt;&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Leave it in!<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I do it is<br>&gt;&gt;&gt; because I&#39;ve decided that in the context of that piece of code it does<br>&gt;&gt;&gt; exactly what I want it to do with the maximum amount of clarity.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it detracts<br>&gt;&gt;&gt; from the language at all.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The *only* argument that I have heard for removing it is that some<br>&gt;&gt;&gt; people don&#39;t immediately intuit how to use it. I didn&#39;t have any trouble<br>&gt;&gt;&gt; with it at all. It follows one of the most basic programming patterns ever:<br>&gt;&gt;&gt; &quot;For all x in X, if predicate P is true, do something.&quot; The use of the<br>&gt;&gt;&gt; keyword &quot;where&quot; makes perfect sense in that context, and when I read it out<br>&gt;&gt;&gt; loud, it sounds natural: &quot;For all x in X where P, do something.&quot; That is an<br>&gt;&gt;&gt; elegant, succinct, and clear way of stating exactly what I want my program<br>&gt;&gt;&gt; to do.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I don&#39;t doubt that it has caused some confusion for some people, but I&#39;m<br>&gt;&gt;&gt; not sold that that is a good enough reason to get rid of it. It seems<br>&gt;&gt;&gt; strange to get rid of a tool because not everyone understands how to use it<br>&gt;&gt;&gt; immediately, without ever having to ask a single question. As long as its<br>&gt;&gt;&gt; not a dangerous tool (and it isn&#39;t), then keep it in the workshop for those<br>&gt;&gt;&gt; times when it comes in handy. And even if there is some initial confusion,<br>&gt;&gt;&gt; it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does this work<br>&gt;&gt;&gt; like X, or does this work like Y? Let&#39;s see...oh, it works like X. Ok.&quot;<br>&gt;&gt;&gt; That&#39;s the entire learning curve...about 5 seconds of curiosity followed by<br>&gt;&gt;&gt; the blissful feeling of resolution.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party<br>&gt;&gt;&gt;&gt;&gt; Swift Repos&quot; folder and did the same search. Among the 15 repos in that<br>&gt;&gt;&gt;&gt;&gt; folder, a joint search returned about 650 hits on for-in (again with some<br>&gt;&gt;&gt;&gt;&gt; false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Weird. My own Swift projects (not on Github :P) use “where” all the<br>&gt;&gt;&gt;&gt;&gt; time with for loops. I really like it and think it reads *and* writes far<br>&gt;&gt;&gt;&gt;&gt; better as well as makes for nicer one-liners. In one project, by rough<br>&gt;&gt;&gt;&gt;&gt; count, I have about 20 that use “where” vs. 40 in that same project not<br>&gt;&gt;&gt;&gt;&gt; using “where”.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; In another smaller test project, there are only 10 for loops, but even<br>&gt;&gt;&gt;&gt;&gt; so one still managed to use where.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Not a lot of data without looking at even more projects, I admit, but<br>&gt;&gt;&gt;&gt;&gt; this seems to suggest that the usage of “where” is going to be very<br>&gt;&gt;&gt;&gt;&gt; developer-dependent. Perhaps there’s some factor of prior background at<br>&gt;&gt;&gt;&gt;&gt; work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; That is worrying if true, because it suggests that it&#39;s enabling<br>&gt;&gt;&gt;&gt; &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I feel like “where” is a more declarative construct and that we should<br>&gt;&gt;&gt;&gt;&gt; be encouraging that way of thinking in general. When using it, it feels<br>&gt;&gt;&gt;&gt;&gt; like “magic” for some reason - even though there’s nothing special about<br>&gt;&gt;&gt;&gt;&gt; it. It feels like I’ve made the language work *for me* a little bit rather<br>&gt;&gt;&gt;&gt;&gt; than me having to contort my solution to the will of the language. This may<br>&gt;&gt;&gt;&gt;&gt; be highly subjective.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/b3d4277a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>June 10, 2016 at 08:00:00pm</p></header><div class="content"><p>I was not advocating the lack of constraints, programmers like all other<br>artists (and engineers, which are artists too ;)), but that the beauty is<br>the moderation of the two extremes :). ... and that architects leave the<br>problems you are talking about to the structural engineer :P.<br></p><p>Gravity is a constrain, but a different one than having to use only a<br>certain pencil to do your sketches with and only being able to use Windows<br>95 OSR 3 to work on or even weirder limitations.<br></p><p>On Fri, Jun 10, 2016 at 7:59 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br></p><p>&gt; On Fri, Jun 10, 2016 at 1:11 PM, Goffredo Marocchi &lt;panajev at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; I think sometimes the community in this mailing list loses sight on the<br>&gt;&gt; fact that coding is a creative  endeavour much similar to architectural<br>&gt;&gt; design or painting. There may be math and well researched and structured<br>&gt;&gt; ideas in place, but it requires creativity too.<br>&gt;&gt;<br>&gt;<br>&gt; Architects are constrained to craft buildings that will stand in the face<br>&gt; of gravity, and even painters don&#39;t have pigments for every color visible<br>&gt; to the human eye. There&#39;s a wonderful novel, _Gadsby_, written without the<br>&gt; letter &#39;e&#39;; I haven&#39;t read it but I understand it&#39;s truly an<br>&gt; accomplishment. This is not so drastic here. In this case, the apt analogy<br>&gt; would be that we find the letter &#39;a with circle on top&#39; to be posing some<br>&gt; pesky problems; do you think you could write a novel in English without<br>&gt; using &#39;a with circle on top&#39;? I wager that your creativity will not suffer<br>&gt; (unless your novel describes a trip to IKEA, in which case I&#39;m sorry).<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; Trying to force a strict one size fits all The One True standard usually<br>&gt;&gt; ends up fragmenting the standard further, by adding yet another take on<br>&gt;&gt; what is the most orthodox implementation and who are the heretics...<br>&gt;&gt;<br>&gt;&gt; I do not think dismissing the idea of having more than one way of<br>&gt;&gt; skinning the proverbial cat as an anti-goal is doing a good service to the<br>&gt;&gt; community or the language as it completely disregards context, people<br>&gt;&gt; differing idea of the subjective best coding style and patterns (which<br>&gt;&gt; pattern do I use? Which algorithm do I use to sort this data set with? A<br>&gt;&gt; good engineer will give you a direct and concise answer, but a better one<br>&gt;&gt; will say &quot;it depends... What&#39;s the context? What is the problem I need to<br>&gt;&gt; solve, what are the constraints and the data set I am working on?&quot;).<br>&gt;&gt;<br>&gt;&gt; The way some users seem to want Swift to follow sounds like protecting<br>&gt;&gt; users from mistakes by sometimes removing the ability which could lead to<br>&gt;&gt; mistakes in the first place, but that removes all the good things you could<br>&gt;&gt; do if you were to trust developers with the extra responsibility.<br>&gt;&gt;<br>&gt;&gt; Sent from my iPhone<br>&gt;&gt;<br>&gt;&gt; On 10 Jun 2016, at 18:30, let var go via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I respect that anti-goal, but I think being over-rigid about limiting<br>&gt;&gt; developers&#39; choice of expression is also an anti-goal.<br>&gt;&gt;<br>&gt;&gt; To me, it is like guard statements vs. if-let statements. Some people<br>&gt;&gt; find one to be more clear than the other. Often times the best choice<br>&gt;&gt; depends on the context. Sometimes a guard statement can be re-written as an<br>&gt;&gt; if-let statement in a way that makes the code more clear, and vice versa.<br>&gt;&gt; And different people will inevitably have different personal preferences -<br>&gt;&gt; their own &quot;style&quot;, if you will - and will favor one over the other. But it<br>&gt;&gt; would be a mistake to force everyone into one box in order to prevent the<br>&gt;&gt; fracturing of the Swift community into &quot;dialects.&quot;<br>&gt;&gt;<br>&gt;&gt; But most importantly (and this is really the kicker for me) there are<br>&gt;&gt; times when the &quot;where&quot; syntax provides the maximum amount of clarity in the<br>&gt;&gt; context of my code, and I don&#39;t want to lose that expressive power.<br>&gt;&gt;<br>&gt;&gt; On Fri, Jun 10, 2016 at 10:17 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use<br>&gt;&gt;&gt; it--is indicative of a key worry here: it&#39;s inessential to the language and<br>&gt;&gt;&gt; promotes dialects wherein certain people use it and others wherein they<br>&gt;&gt;&gt; don&#39;t. This is an anti-goal.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Leave it in!<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I do it<br>&gt;&gt;&gt;&gt; is because I&#39;ve decided that in the context of that piece of code it does<br>&gt;&gt;&gt;&gt; exactly what I want it to do with the maximum amount of clarity.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it<br>&gt;&gt;&gt;&gt; detracts from the language at all.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; The *only* argument that I have heard for removing it is that some<br>&gt;&gt;&gt;&gt; people don&#39;t immediately intuit how to use it. I didn&#39;t have any trouble<br>&gt;&gt;&gt;&gt; with it at all. It follows one of the most basic programming patterns ever:<br>&gt;&gt;&gt;&gt; &quot;For all x in X, if predicate P is true, do something.&quot; The use of the<br>&gt;&gt;&gt;&gt; keyword &quot;where&quot; makes perfect sense in that context, and when I read it out<br>&gt;&gt;&gt;&gt; loud, it sounds natural: &quot;For all x in X where P, do something.&quot; That is an<br>&gt;&gt;&gt;&gt; elegant, succinct, and clear way of stating exactly what I want my program<br>&gt;&gt;&gt;&gt; to do.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I don&#39;t doubt that it has caused some confusion for some people, but<br>&gt;&gt;&gt;&gt; I&#39;m not sold that that is a good enough reason to get rid of it. It seems<br>&gt;&gt;&gt;&gt; strange to get rid of a tool because not everyone understands how to use it<br>&gt;&gt;&gt;&gt; immediately, without ever having to ask a single question. As long as its<br>&gt;&gt;&gt;&gt; not a dangerous tool (and it isn&#39;t), then keep it in the workshop for those<br>&gt;&gt;&gt;&gt; times when it comes in handy. And even if there is some initial confusion,<br>&gt;&gt;&gt;&gt; it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does this work<br>&gt;&gt;&gt;&gt; like X, or does this work like Y? Let&#39;s see...oh, it works like X. Ok.&quot;<br>&gt;&gt;&gt;&gt; That&#39;s the entire learning curve...about 5 seconds of curiosity followed by<br>&gt;&gt;&gt;&gt; the blissful feeling of resolution.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party<br>&gt;&gt;&gt;&gt;&gt;&gt; Swift Repos&quot; folder and did the same search. Among the 15 repos in that<br>&gt;&gt;&gt;&gt;&gt;&gt; folder, a joint search returned about 650 hits on for-in (again with some<br>&gt;&gt;&gt;&gt;&gt;&gt; false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Weird. My own Swift projects (not on Github :P) use “where” all the<br>&gt;&gt;&gt;&gt;&gt;&gt; time with for loops. I really like it and think it reads *and* writes far<br>&gt;&gt;&gt;&gt;&gt;&gt; better as well as makes for nicer one-liners. In one project, by rough<br>&gt;&gt;&gt;&gt;&gt;&gt; count, I have about 20 that use “where” vs. 40 in that same project not<br>&gt;&gt;&gt;&gt;&gt;&gt; using “where”.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; In another smaller test project, there are only 10 for loops, but<br>&gt;&gt;&gt;&gt;&gt;&gt; even so one still managed to use where.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Not a lot of data without looking at even more projects, I admit, but<br>&gt;&gt;&gt;&gt;&gt;&gt; this seems to suggest that the usage of “where” is going to be very<br>&gt;&gt;&gt;&gt;&gt;&gt; developer-dependent. Perhaps there’s some factor of prior background at<br>&gt;&gt;&gt;&gt;&gt;&gt; work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; That is worrying if true, because it suggests that it&#39;s enabling<br>&gt;&gt;&gt;&gt;&gt; &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; I feel like “where” is a more declarative construct and that we<br>&gt;&gt;&gt;&gt;&gt;&gt; should be encouraging that way of thinking in general. When using it, it<br>&gt;&gt;&gt;&gt;&gt;&gt; feels like “magic” for some reason - even though there’s nothing special<br>&gt;&gt;&gt;&gt;&gt;&gt; about it. It feels like I’ve made the language work *for me* a little bit<br>&gt;&gt;&gt;&gt;&gt;&gt; rather than me having to contort my solution to the will of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt; This may be highly subjective.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/057ed91e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 10, 2016 at 02:00:00pm</p></header><div class="content"><p>On Fri, Jun 10, 2016 at 2:06 PM, Goffredo Marocchi &lt;panajev at gmail.com&gt;<br>wrote:<br></p><p>&gt; I was not advocating the lack of constraints, programmers like all other<br>&gt; artists (and engineers, which are artists too ;)), but that the beauty is<br>&gt; the moderation of the two extremes :). ... and that architects leave the<br>&gt; problems you are talking about to the structural engineer :P.<br>&gt;<br>&gt; Gravity is a constrain, but a different one than having to use only a<br>&gt; certain pencil to do your sketches with and only being able to use Windows<br>&gt; 95 OSR 3 to work on or even weirder limitations.<br>&gt;<br></p><p>The question is, does removing `where` feel to you like going from OS X<br>10.11 to Windows 95, or is it more like going from OS X 10.11.4 to OS X<br>10.11.3?<br></p><p><br></p><p>&gt;<br>&gt; On Fri, Jun 10, 2016 at 7:59 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; On Fri, Jun 10, 2016 at 1:11 PM, Goffredo Marocchi &lt;panajev at gmail.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; I think sometimes the community in this mailing list loses sight on the<br>&gt;&gt;&gt; fact that coding is a creative  endeavour much similar to architectural<br>&gt;&gt;&gt; design or painting. There may be math and well researched and structured<br>&gt;&gt;&gt; ideas in place, but it requires creativity too.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Architects are constrained to craft buildings that will stand in the face<br>&gt;&gt; of gravity, and even painters don&#39;t have pigments for every color visible<br>&gt;&gt; to the human eye. There&#39;s a wonderful novel, _Gadsby_, written without the<br>&gt;&gt; letter &#39;e&#39;; I haven&#39;t read it but I understand it&#39;s truly an<br>&gt;&gt; accomplishment. This is not so drastic here. In this case, the apt analogy<br>&gt;&gt; would be that we find the letter &#39;a with circle on top&#39; to be posing some<br>&gt;&gt; pesky problems; do you think you could write a novel in English without<br>&gt;&gt; using &#39;a with circle on top&#39;? I wager that your creativity will not suffer<br>&gt;&gt; (unless your novel describes a trip to IKEA, in which case I&#39;m sorry).<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Trying to force a strict one size fits all The One True standard usually<br>&gt;&gt;&gt; ends up fragmenting the standard further, by adding yet another take on<br>&gt;&gt;&gt; what is the most orthodox implementation and who are the heretics...<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I do not think dismissing the idea of having more than one way of<br>&gt;&gt;&gt; skinning the proverbial cat as an anti-goal is doing a good service to the<br>&gt;&gt;&gt; community or the language as it completely disregards context, people<br>&gt;&gt;&gt; differing idea of the subjective best coding style and patterns (which<br>&gt;&gt;&gt; pattern do I use? Which algorithm do I use to sort this data set with? A<br>&gt;&gt;&gt; good engineer will give you a direct and concise answer, but a better one<br>&gt;&gt;&gt; will say &quot;it depends... What&#39;s the context? What is the problem I need to<br>&gt;&gt;&gt; solve, what are the constraints and the data set I am working on?&quot;).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The way some users seem to want Swift to follow sounds like protecting<br>&gt;&gt;&gt; users from mistakes by sometimes removing the ability which could lead to<br>&gt;&gt;&gt; mistakes in the first place, but that removes all the good things you could<br>&gt;&gt;&gt; do if you were to trust developers with the extra responsibility.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On 10 Jun 2016, at 18:30, let var go via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I respect that anti-goal, but I think being over-rigid about limiting<br>&gt;&gt;&gt; developers&#39; choice of expression is also an anti-goal.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; To me, it is like guard statements vs. if-let statements. Some people<br>&gt;&gt;&gt; find one to be more clear than the other. Often times the best choice<br>&gt;&gt;&gt; depends on the context. Sometimes a guard statement can be re-written as an<br>&gt;&gt;&gt; if-let statement in a way that makes the code more clear, and vice versa.<br>&gt;&gt;&gt; And different people will inevitably have different personal preferences -<br>&gt;&gt;&gt; their own &quot;style&quot;, if you will - and will favor one over the other. But it<br>&gt;&gt;&gt; would be a mistake to force everyone into one box in order to prevent the<br>&gt;&gt;&gt; fracturing of the Swift community into &quot;dialects.&quot;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; But most importantly (and this is really the kicker for me) there are<br>&gt;&gt;&gt; times when the &quot;where&quot; syntax provides the maximum amount of clarity in the<br>&gt;&gt;&gt; context of my code, and I don&#39;t want to lose that expressive power.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Fri, Jun 10, 2016 at 10:17 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use<br>&gt;&gt;&gt;&gt; it--is indicative of a key worry here: it&#39;s inessential to the language and<br>&gt;&gt;&gt;&gt; promotes dialects wherein certain people use it and others wherein they<br>&gt;&gt;&gt;&gt; don&#39;t. This is an anti-goal.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Leave it in!<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I do it<br>&gt;&gt;&gt;&gt;&gt; is because I&#39;ve decided that in the context of that piece of code it does<br>&gt;&gt;&gt;&gt;&gt; exactly what I want it to do with the maximum amount of clarity.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it<br>&gt;&gt;&gt;&gt;&gt; detracts from the language at all.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; The *only* argument that I have heard for removing it is that some<br>&gt;&gt;&gt;&gt;&gt; people don&#39;t immediately intuit how to use it. I didn&#39;t have any trouble<br>&gt;&gt;&gt;&gt;&gt; with it at all. It follows one of the most basic programming patterns ever:<br>&gt;&gt;&gt;&gt;&gt; &quot;For all x in X, if predicate P is true, do something.&quot; The use of the<br>&gt;&gt;&gt;&gt;&gt; keyword &quot;where&quot; makes perfect sense in that context, and when I read it out<br>&gt;&gt;&gt;&gt;&gt; loud, it sounds natural: &quot;For all x in X where P, do something.&quot; That is an<br>&gt;&gt;&gt;&gt;&gt; elegant, succinct, and clear way of stating exactly what I want my program<br>&gt;&gt;&gt;&gt;&gt; to do.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I don&#39;t doubt that it has caused some confusion for some people, but<br>&gt;&gt;&gt;&gt;&gt; I&#39;m not sold that that is a good enough reason to get rid of it. It seems<br>&gt;&gt;&gt;&gt;&gt; strange to get rid of a tool because not everyone understands how to use it<br>&gt;&gt;&gt;&gt;&gt; immediately, without ever having to ask a single question. As long as its<br>&gt;&gt;&gt;&gt;&gt; not a dangerous tool (and it isn&#39;t), then keep it in the workshop for those<br>&gt;&gt;&gt;&gt;&gt; times when it comes in handy. And even if there is some initial confusion,<br>&gt;&gt;&gt;&gt;&gt; it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does this work<br>&gt;&gt;&gt;&gt;&gt; like X, or does this work like Y? Let&#39;s see...oh, it works like X. Ok.&quot;<br>&gt;&gt;&gt;&gt;&gt; That&#39;s the entire learning curve...about 5 seconds of curiosity followed by<br>&gt;&gt;&gt;&gt;&gt; the blissful feeling of resolution.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Party Swift Repos&quot; folder and did the same search. Among the 15 repos in<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; that folder, a joint search returned about 650 hits on for-in (again with<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; some false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Weird. My own Swift projects (not on Github :P) use “where” all the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; time with for loops. I really like it and think it reads *and* writes far<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; better as well as makes for nicer one-liners. In one project, by rough<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; count, I have about 20 that use “where” vs. 40 in that same project not<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; using “where”.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; In another smaller test project, there are only 10 for loops, but<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; even so one still managed to use where.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Not a lot of data without looking at even more projects, I admit,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; but this seems to suggest that the usage of “where” is going to be very<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; developer-dependent. Perhaps there’s some factor of prior background at<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; That is worrying if true, because it suggests that it&#39;s enabling<br>&gt;&gt;&gt;&gt;&gt;&gt; &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I feel like “where” is a more declarative construct and that we<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; should be encouraging that way of thinking in general. When using it, it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; feels like “magic” for some reason - even though there’s nothing special<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; about it. It feels like I’ve made the language work *for me* a little bit<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; rather than me having to contort my solution to the will of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; This may be highly subjective.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/f4cf180c/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>June 10, 2016 at 08:00:00pm</p></header><div class="content"><p>It would not be like going back to Windows 95... and I did not mention the<br>infamous OSR3 release to make that harsh of a point :P...<br></p><p>On Fri, Jun 10, 2016 at 8:09 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br></p><p>&gt; On Fri, Jun 10, 2016 at 2:06 PM, Goffredo Marocchi &lt;panajev at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; I was not advocating the lack of constraints, programmers like all other<br>&gt;&gt; artists (and engineers, which are artists too ;)), but that the beauty is<br>&gt;&gt; the moderation of the two extremes :). ... and that architects leave the<br>&gt;&gt; problems you are talking about to the structural engineer :P.<br>&gt;&gt;<br>&gt;&gt; Gravity is a constrain, but a different one than having to use only a<br>&gt;&gt; certain pencil to do your sketches with and only being able to use Windows<br>&gt;&gt; 95 OSR 3 to work on or even weirder limitations.<br>&gt;&gt;<br>&gt;<br>&gt; The question is, does removing `where` feel to you like going from OS X<br>&gt; 10.11 to Windows 95, or is it more like going from OS X 10.11.4 to OS X<br>&gt; 10.11.3?<br>&gt;<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Fri, Jun 10, 2016 at 7:59 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; On Fri, Jun 10, 2016 at 1:11 PM, Goffredo Marocchi &lt;panajev at gmail.com&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I think sometimes the community in this mailing list loses sight on the<br>&gt;&gt;&gt;&gt; fact that coding is a creative  endeavour much similar to architectural<br>&gt;&gt;&gt;&gt; design or painting. There may be math and well researched and structured<br>&gt;&gt;&gt;&gt; ideas in place, but it requires creativity too.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Architects are constrained to craft buildings that will stand in the<br>&gt;&gt;&gt; face of gravity, and even painters don&#39;t have pigments for every color<br>&gt;&gt;&gt; visible to the human eye. There&#39;s a wonderful novel, _Gadsby_, written<br>&gt;&gt;&gt; without the letter &#39;e&#39;; I haven&#39;t read it but I understand it&#39;s truly an<br>&gt;&gt;&gt; accomplishment. This is not so drastic here. In this case, the apt analogy<br>&gt;&gt;&gt; would be that we find the letter &#39;a with circle on top&#39; to be posing some<br>&gt;&gt;&gt; pesky problems; do you think you could write a novel in English without<br>&gt;&gt;&gt; using &#39;a with circle on top&#39;? I wager that your creativity will not suffer<br>&gt;&gt;&gt; (unless your novel describes a trip to IKEA, in which case I&#39;m sorry).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Trying to force a strict one size fits all The One True standard<br>&gt;&gt;&gt;&gt; usually ends up fragmenting the standard further, by adding yet another<br>&gt;&gt;&gt;&gt; take on what is the most orthodox implementation and who are the heretics...<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I do not think dismissing the idea of having more than one way of<br>&gt;&gt;&gt;&gt; skinning the proverbial cat as an anti-goal is doing a good service to the<br>&gt;&gt;&gt;&gt; community or the language as it completely disregards context, people<br>&gt;&gt;&gt;&gt; differing idea of the subjective best coding style and patterns (which<br>&gt;&gt;&gt;&gt; pattern do I use? Which algorithm do I use to sort this data set with? A<br>&gt;&gt;&gt;&gt; good engineer will give you a direct and concise answer, but a better one<br>&gt;&gt;&gt;&gt; will say &quot;it depends... What&#39;s the context? What is the problem I need to<br>&gt;&gt;&gt;&gt; solve, what are the constraints and the data set I am working on?&quot;).<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; The way some users seem to want Swift to follow sounds like protecting<br>&gt;&gt;&gt;&gt; users from mistakes by sometimes removing the ability which could lead to<br>&gt;&gt;&gt;&gt; mistakes in the first place, but that removes all the good things you could<br>&gt;&gt;&gt;&gt; do if you were to trust developers with the extra responsibility.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On 10 Jun 2016, at 18:30, let var go via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I respect that anti-goal, but I think being over-rigid about limiting<br>&gt;&gt;&gt;&gt; developers&#39; choice of expression is also an anti-goal.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; To me, it is like guard statements vs. if-let statements. Some people<br>&gt;&gt;&gt;&gt; find one to be more clear than the other. Often times the best choice<br>&gt;&gt;&gt;&gt; depends on the context. Sometimes a guard statement can be re-written as an<br>&gt;&gt;&gt;&gt; if-let statement in a way that makes the code more clear, and vice versa.<br>&gt;&gt;&gt;&gt; And different people will inevitably have different personal preferences -<br>&gt;&gt;&gt;&gt; their own &quot;style&quot;, if you will - and will favor one over the other. But it<br>&gt;&gt;&gt;&gt; would be a mistake to force everyone into one box in order to prevent the<br>&gt;&gt;&gt;&gt; fracturing of the Swift community into &quot;dialects.&quot;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; But most importantly (and this is really the kicker for me) there are<br>&gt;&gt;&gt;&gt; times when the &quot;where&quot; syntax provides the maximum amount of clarity in the<br>&gt;&gt;&gt;&gt; context of my code, and I don&#39;t want to lose that expressive power.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 10:17 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use<br>&gt;&gt;&gt;&gt;&gt; it--is indicative of a key worry here: it&#39;s inessential to the language and<br>&gt;&gt;&gt;&gt;&gt; promotes dialects wherein certain people use it and others wherein they<br>&gt;&gt;&gt;&gt;&gt; don&#39;t. This is an anti-goal.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Leave it in!<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I do it<br>&gt;&gt;&gt;&gt;&gt;&gt; is because I&#39;ve decided that in the context of that piece of code it does<br>&gt;&gt;&gt;&gt;&gt;&gt; exactly what I want it to do with the maximum amount of clarity.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it<br>&gt;&gt;&gt;&gt;&gt;&gt; detracts from the language at all.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; The *only* argument that I have heard for removing it is that some<br>&gt;&gt;&gt;&gt;&gt;&gt; people don&#39;t immediately intuit how to use it. I didn&#39;t have any trouble<br>&gt;&gt;&gt;&gt;&gt;&gt; with it at all. It follows one of the most basic programming patterns ever:<br>&gt;&gt;&gt;&gt;&gt;&gt; &quot;For all x in X, if predicate P is true, do something.&quot; The use of the<br>&gt;&gt;&gt;&gt;&gt;&gt; keyword &quot;where&quot; makes perfect sense in that context, and when I read it out<br>&gt;&gt;&gt;&gt;&gt;&gt; loud, it sounds natural: &quot;For all x in X where P, do something.&quot; That is an<br>&gt;&gt;&gt;&gt;&gt;&gt; elegant, succinct, and clear way of stating exactly what I want my program<br>&gt;&gt;&gt;&gt;&gt;&gt; to do.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t doubt that it has caused some confusion for some people, but<br>&gt;&gt;&gt;&gt;&gt;&gt; I&#39;m not sold that that is a good enough reason to get rid of it. It seems<br>&gt;&gt;&gt;&gt;&gt;&gt; strange to get rid of a tool because not everyone understands how to use it<br>&gt;&gt;&gt;&gt;&gt;&gt; immediately, without ever having to ask a single question. As long as its<br>&gt;&gt;&gt;&gt;&gt;&gt; not a dangerous tool (and it isn&#39;t), then keep it in the workshop for those<br>&gt;&gt;&gt;&gt;&gt;&gt; times when it comes in handy. And even if there is some initial confusion,<br>&gt;&gt;&gt;&gt;&gt;&gt; it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does this work<br>&gt;&gt;&gt;&gt;&gt;&gt; like X, or does this work like Y? Let&#39;s see...oh, it works like X. Ok.&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt; That&#39;s the entire learning curve...about 5 seconds of curiosity followed by<br>&gt;&gt;&gt;&gt;&gt;&gt; the blissful feeling of resolution.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Party Swift Repos&quot; folder and did the same search. Among the 15 repos in<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that folder, a joint search returned about 650 hits on for-in (again with<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; some false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Weird. My own Swift projects (not on Github :P) use “where” all the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; time with for loops. I really like it and think it reads *and* writes far<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; better as well as makes for nicer one-liners. In one project, by rough<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; count, I have about 20 that use “where” vs. 40 in that same project not<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; using “where”.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; In another smaller test project, there are only 10 for loops, but<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; even so one still managed to use where.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Not a lot of data without looking at even more projects, I admit,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; but this seems to suggest that the usage of “where” is going to be very<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; developer-dependent. Perhaps there’s some factor of prior background at<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; That is worrying if true, because it suggests that it&#39;s enabling<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I feel like “where” is a more declarative construct and that we<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; should be encouraging that way of thinking in general. When using it, it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; feels like “magic” for some reason - even though there’s nothing special<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; about it. It feels like I’ve made the language work *for me* a little bit<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; rather than me having to contort my solution to the will of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This may be highly subjective.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/e96b6cf8/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9db7e0c3d3ce86e2bf80675a61fbc49c?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>James Berry</string> &lt;jberry at rogueorbit.com&gt;<p>June 10, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jun 10, 2016, at 10:17 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use it--is indicative of a key worry here: it&#39;s inessential to the language and promotes dialects wherein certain people use it and others wherein they don&#39;t. This is an anti-goal.<br></p><p>I’m not sold on the argument that there can’t be areas of the language that are inessential. Yes, we could build a language with extremely limited control structures (conditional branch and goto), and they would be used by 100% of the users. Beyond that, however, everything is “inessential”. Adding room for elegance and expressiveness, even when perhaps initially seldom used, doesn’t seem wrong: this language is still young, after all. Let’s not shoot decide a feature isn’t used before we even give it a chance to be recognized as a feature.<br></p><p>I would argue that at least one reason the where clause is little used on for-in loops in code in the field is that it’s barely documented. I don’t see any reference to it, or example of it, in the Swift 2.2 language guide. One has to read the grammar for the for statement in the more technical Language Reference in order to find it, and even there it’s behavior is not defined that I can see.<br></p><p>Using or not using a feature does not create a dialect of a language.<br></p><p><br>&gt; <br>&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com &lt;mailto:letvargo at gmail.com&gt;&gt; wrote:<br>&gt; Leave it in!<br>&gt; <br>&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I do it is because I&#39;ve decided that in the context of that piece of code it does exactly what I want it to do with the maximum amount of clarity.<br>&gt; <br>&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it detracts from the language at all.<br>&gt; <br>&gt; The *only* argument that I have heard for removing it is that some people don&#39;t immediately intuit how to use it. I didn&#39;t have any trouble with it at all. It follows one of the most basic programming patterns ever: &quot;For all x in X, if predicate P is true, do something.&quot; The use of the keyword &quot;where&quot; makes perfect sense in that context, and when I read it out loud, it sounds natural: &quot;For all x in X where P, do something.&quot; That is an elegant, succinct, and clear way of stating exactly what I want my program to do.<br>&gt; <br>&gt; I don&#39;t doubt that it has caused some confusion for some people, but I&#39;m not sold that that is a good enough reason to get rid of it. It seems strange to get rid of a tool because not everyone understands how to use it immediately, without ever having to ask a single question. As long as its not a dangerous tool (and it isn&#39;t), then keep it in the workshop for those times when it comes in handy. And even if there is some initial confusion, it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does this work like X, or does this work like Y? Let&#39;s see...oh, it works like X. Ok.&quot; That&#39;s the entire learning curve...about 5 seconds of curiosity followed by the blissful feeling of resolution.<br>&gt; <br>&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party Swift Repos&quot; folder and did the same search. Among the 15 repos in that folder, a joint search returned about 650 hits on for-in (again with some false positives) and not a single for-in-while use.<br>&gt; <br>&gt; Weird. My own Swift projects (not on Github :P) use “where” all the time with for loops. I really like it and think it reads *and* writes far better as well as makes for nicer one-liners. In one project, by rough count, I have about 20 that use “where” vs. 40 in that same project not using “where”.<br>&gt; <br>&gt; In another smaller test project, there are only 10 for loops, but even so one still managed to use where.<br>&gt; <br>&gt; Not a lot of data without looking at even more projects, I admit, but this seems to suggest that the usage of “where” is going to be very developer-dependent. Perhaps there’s some factor of prior background at work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt; <br>&gt; That is worrying if true, because it suggests that it&#39;s enabling &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;  <br>&gt; <br>&gt; I feel like “where” is a more declarative construct and that we should be encouraging that way of thinking in general. When using it, it feels like “magic” for some reason - even though there’s nothing special about it. It feels like I’ve made the language work *for me* a little bit rather than me having to contort my solution to the will of the language. This may be highly subjective.<br>&gt; <br>&gt; l8r<br>&gt; Sean<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/34730778/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 10, 2016 at 01:00:00pm</p></header><div class="content"><p>On Fri, Jun 10, 2016 at 12:47 PM, James Berry &lt;jberry at rogueorbit.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Jun 10, 2016, at 10:17 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use it--is<br>&gt; indicative of a key worry here: it&#39;s inessential to the language and<br>&gt; promotes dialects wherein certain people use it and others wherein they<br>&gt; don&#39;t. This is an anti-goal.<br>&gt;<br>&gt;<br>&gt; I’m not sold on the argument that there can’t be areas of the language<br>&gt; that are inessential. Yes, we could build a language with extremely limited<br>&gt; control structures (conditional branch and goto), and they would be used by<br>&gt; 100% of the users. Beyond that, however, everything is “inessential”.<br>&gt; Adding room for elegance and expressiveness, even when perhaps initially<br>&gt; seldom used, doesn’t seem wrong: this language is still young, after all.<br>&gt; Let’s not shoot decide a feature isn’t used before we even give it a chance<br>&gt; to be recognized as a feature.<br>&gt;<br></p><p>I do agree with the premise here. There is absolutely something to be said<br>for elegance and expressiveness. Moreover, expressiveness goes hand in hand<br>with facilitating correctness. We could reduce everything to goto&#39;s and<br>conditional branches, but correctness suffers greatly and readability of<br>the code would be abysmal--and I think I&#39;ll find agreement that it&#39;s a<br>solidly grounded opinion.<br></p><p>So &quot;inessential&quot; alone is not a good sole criterion--I agree. But it is one<br>of several prongs here: `where` is not only inessential, I argue that it<br>lacks expressiveness (in that what is enabled by it can be expressed<br>equally or even more cogently with `guard`, a more general and more<br>expressive syntax overall), and it detracts from rather than helps with<br>writing correct code, because we hear attestations that its use has gone<br>awry (and the going awry happens at runtime!). So in essence, I would be<br>content with inessential but expressive solutions, but here I argue that<br>`where` is neither essential nor expressive.<br></p><p>Elegance is in the eye of the beholder, but FWIW I do not find `where`<br>elegant; it irks me greatly from an aesthetic point of view just as it<br>delights others. I see no point in debating personal taste, however.<br></p><p><br>&gt; I would argue that at least one reason the where clause is little used on<br>&gt; for-in loops in code in the field is that it’s barely documented. I don’t<br>&gt; see any reference to it, or example of it, in the Swift 2.2 language guide.<br>&gt; One has to read the grammar for the for statement in the more technical<br>&gt; Language Reference in order to find it, and even there it’s behavior is not<br>&gt; defined that I can see.<br>&gt;<br>&gt; Using or not using a feature does not create a dialect of a language.<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; Leave it in!<br>&gt;&gt;<br>&gt;&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I do it is<br>&gt;&gt; because I&#39;ve decided that in the context of that piece of code it does<br>&gt;&gt; exactly what I want it to do with the maximum amount of clarity.<br>&gt;&gt;<br>&gt;&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it detracts<br>&gt;&gt; from the language at all.<br>&gt;&gt;<br>&gt;&gt; The *only* argument that I have heard for removing it is that some people<br>&gt;&gt; don&#39;t immediately intuit how to use it. I didn&#39;t have any trouble with it<br>&gt;&gt; at all. It follows one of the most basic programming patterns ever: &quot;For<br>&gt;&gt; all x in X, if predicate P is true, do something.&quot; The use of the keyword<br>&gt;&gt; &quot;where&quot; makes perfect sense in that context, and when I read it out loud,<br>&gt;&gt; it sounds natural: &quot;For all x in X where P, do something.&quot; That is an<br>&gt;&gt; elegant, succinct, and clear way of stating exactly what I want my program<br>&gt;&gt; to do.<br>&gt;&gt;<br>&gt;&gt; I don&#39;t doubt that it has caused some confusion for some people, but I&#39;m<br>&gt;&gt; not sold that that is a good enough reason to get rid of it. It seems<br>&gt;&gt; strange to get rid of a tool because not everyone understands how to use it<br>&gt;&gt; immediately, without ever having to ask a single question. As long as its<br>&gt;&gt; not a dangerous tool (and it isn&#39;t), then keep it in the workshop for those<br>&gt;&gt; times when it comes in handy. And even if there is some initial confusion,<br>&gt;&gt; it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does this work<br>&gt;&gt; like X, or does this work like Y? Let&#39;s see...oh, it works like X. Ok.&quot;<br>&gt;&gt; That&#39;s the entire learning curve...about 5 seconds of curiosity followed by<br>&gt;&gt; the blissful feeling of resolution.<br>&gt;&gt;<br>&gt;&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party<br>&gt;&gt;&gt;&gt; Swift Repos&quot; folder and did the same search. Among the 15 repos in that<br>&gt;&gt;&gt;&gt; folder, a joint search returned about 650 hits on for-in (again with some<br>&gt;&gt;&gt;&gt; false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Weird. My own Swift projects (not on Github :P) use “where” all the<br>&gt;&gt;&gt;&gt; time with for loops. I really like it and think it reads *and* writes far<br>&gt;&gt;&gt;&gt; better as well as makes for nicer one-liners. In one project, by rough<br>&gt;&gt;&gt;&gt; count, I have about 20 that use “where” vs. 40 in that same project not<br>&gt;&gt;&gt;&gt; using “where”.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; In another smaller test project, there are only 10 for loops, but even<br>&gt;&gt;&gt;&gt; so one still managed to use where.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Not a lot of data without looking at even more projects, I admit, but<br>&gt;&gt;&gt;&gt; this seems to suggest that the usage of “where” is going to be very<br>&gt;&gt;&gt;&gt; developer-dependent. Perhaps there’s some factor of prior background at<br>&gt;&gt;&gt;&gt; work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; That is worrying if true, because it suggests that it&#39;s enabling<br>&gt;&gt;&gt; &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I feel like “where” is a more declarative construct and that we should<br>&gt;&gt;&gt;&gt; be encouraging that way of thinking in general. When using it, it feels<br>&gt;&gt;&gt;&gt; like “magic” for some reason - even though there’s nothing special about<br>&gt;&gt;&gt;&gt; it. It feels like I’ve made the language work *for me* a little bit rather<br>&gt;&gt;&gt;&gt; than me having to contort my solution to the will of the language. This may<br>&gt;&gt;&gt;&gt; be highly subjective.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/660eb7e4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>June 10, 2016 at 07:00:00pm</p></header><div class="content"><p>If the litmus test is whether using something can go awry and can go awry at runtime then you are going to have to chop off a lot of parts of most languages. Also, some programmers do not mind not being protected from themselves and trade that for extra freedom... which is not a bad thing in and of itself. In the end the question is an old one indeed, where do you draw the line between safety and freedom... as corny as it sounds. There are people on both sides.<br></p><p>I do not want a swift compiler flag that takes my idea and gets a team of contractors to build it... to take it to a ridiculous extreme :).<br></p><p>Sent from my iPhone<br></p><p>&gt; On 10 Jun 2016, at 19:10, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Fri, Jun 10, 2016 at 12:47 PM, James Berry &lt;jberry at rogueorbit.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 10, 2016, at 10:17 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use it--is indicative of a key worry here: it&#39;s inessential to the language and promotes dialects wherein certain people use it and others wherein they don&#39;t. This is an anti-goal.<br>&gt;&gt; <br>&gt;&gt; I’m not sold on the argument that there can’t be areas of the language that are inessential. Yes, we could build a language with extremely limited control structures (conditional branch and goto), and they would be used by 100% of the users. Beyond that, however, everything is “inessential”. Adding room for elegance and expressiveness, even when perhaps initially seldom used, doesn’t seem wrong: this language is still young, after all. Let’s not shoot decide a feature isn’t used before we even give it a chance to be recognized as a feature.<br>&gt; <br>&gt; I do agree with the premise here. There is absolutely something to be said for elegance and expressiveness. Moreover, expressiveness goes hand in hand with facilitating correctness. We could reduce everything to goto&#39;s and conditional branches, but correctness suffers greatly and readability of the code would be abysmal--and I think I&#39;ll find agreement that it&#39;s a solidly grounded opinion.<br>&gt; <br>&gt; So &quot;inessential&quot; alone is not a good sole criterion--I agree. But it is one of several prongs here: `where` is not only inessential, I argue that it lacks expressiveness (in that what is enabled by it can be expressed equally or even more cogently with `guard`, a more general and more expressive syntax overall), and it detracts from rather than helps with writing correct code, because we hear attestations that its use has gone awry (and the going awry happens at runtime!). So in essence, I would be content with inessential but expressive solutions, but here I argue that `where` is neither essential nor expressive.<br>&gt; <br>&gt; Elegance is in the eye of the beholder, but FWIW I do not find `where` elegant; it irks me greatly from an aesthetic point of view just as it delights others. I see no point in debating personal taste, however.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; I would argue that at least one reason the where clause is little used on for-in loops in code in the field is that it’s barely documented. I don’t see any reference to it, or example of it, in the Swift 2.2 language guide. One has to read the grammar for the for statement in the more technical Language Reference in order to find it, and even there it’s behavior is not defined that I can see.<br>&gt;&gt; <br>&gt;&gt; Using or not using a feature does not create a dialect of a language.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; Leave it in!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I do it is because I&#39;ve decided that in the context of that piece of code it does exactly what I want it to do with the maximum amount of clarity.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it detracts from the language at all.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The *only* argument that I have heard for removing it is that some people don&#39;t immediately intuit how to use it. I didn&#39;t have any trouble with it at all. It follows one of the most basic programming patterns ever: &quot;For all x in X, if predicate P is true, do something.&quot; The use of the keyword &quot;where&quot; makes perfect sense in that context, and when I read it out loud, it sounds natural: &quot;For all x in X where P, do something.&quot; That is an elegant, succinct, and clear way of stating exactly what I want my program to do.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don&#39;t doubt that it has caused some confusion for some people, but I&#39;m not sold that that is a good enough reason to get rid of it. It seems strange to get rid of a tool because not everyone understands how to use it immediately, without ever having to ask a single question. As long as its not a dangerous tool (and it isn&#39;t), then keep it in the workshop for those times when it comes in handy. And even if there is some initial confusion, it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does this work like X, or does this work like Y? Let&#39;s see...oh, it works like X. Ok.&quot; That&#39;s the entire learning curve...about 5 seconds of curiosity followed by the blissful feeling of resolution.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party Swift Repos&quot; folder and did the same search. Among the 15 repos in that folder, a joint search returned about 650 hits on for-in (again with some false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Weird. My own Swift projects (not on Github :P) use “where” all the time with for loops. I really like it and think it reads *and* writes far better as well as makes for nicer one-liners. In one project, by rough count, I have about 20 that use “where” vs. 40 in that same project not using “where”.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; In another smaller test project, there are only 10 for loops, but even so one still managed to use where.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Not a lot of data without looking at even more projects, I admit, but this seems to suggest that the usage of “where” is going to be very developer-dependent. Perhaps there’s some factor of prior background at work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; That is worrying if true, because it suggests that it&#39;s enabling &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I feel like “where” is a more declarative construct and that we should be encouraging that way of thinking in general. When using it, it feels like “magic” for some reason - even though there’s nothing special about it. It feels like I’ve made the language work *for me* a little bit rather than me having to contort my solution to the will of the language. This may be highly subjective.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/848a8959/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 10, 2016 at 01:00:00pm</p></header><div class="content"><p>On Fri, Jun 10, 2016 at 1:20 PM, Goffredo Marocchi &lt;panajev at gmail.com&gt;<br>wrote:<br></p><p>&gt; If the litmus test is whether using something can go awry and can go awry<br>&gt; at runtime then you are going to have to chop off a lot of parts of most<br>&gt; languages. Also, some programmers do not mind not being protected from<br>&gt; themselves and trade that for extra freedom... which is not a bad thing in<br>&gt; and of itself<br>&gt;<br></p><p>Again, I agree. What I&#39;m arguing here is that it can go awry *and* doesn&#39;t<br>offer extra freedom as a trade-off (*nor* serves a pedagogical purpose,<br>*nor* is necessary to support a key and unique feature of Swift). I don&#39;t<br>buy the argument that the freedom worth gaining is the trivial freedom from<br>using `guard`. That&#39;s like saying: I don&#39;t like arrays, and I&#39;d like<br>something to give me the &quot;freedom&quot; from using them.<br></p><p><br>&gt; In the end the question is an old one indeed, where do you draw the line<br>&gt; between safety and freedom... as corny as it sounds. There are people on<br>&gt; both sides.<br>&gt;<br></p><p>As I outlined above, I reject that there is any tradeoff here between<br>safety and freedom. I see no freedom gained, only safety lost. Therefore,<br>there doesn&#39;t need to be a defined line to come to a conclusion. It&#39;s not<br>even on the same playing field.<br></p><p>I do not want a swift compiler flag that takes my idea and gets a team of<br>&gt; contractors to build it... to take it to a ridiculous extreme :).<br>&gt;<br>&gt; Sent from my iPhone<br>&gt;<br>&gt; On 10 Jun 2016, at 19:10, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Fri, Jun 10, 2016 at 12:47 PM, James Berry &lt;jberry at rogueorbit.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Jun 10, 2016, at 10:17 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use<br>&gt;&gt; it--is indicative of a key worry here: it&#39;s inessential to the language and<br>&gt;&gt; promotes dialects wherein certain people use it and others wherein they<br>&gt;&gt; don&#39;t. This is an anti-goal.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I’m not sold on the argument that there can’t be areas of the language<br>&gt;&gt; that are inessential. Yes, we could build a language with extremely limited<br>&gt;&gt; control structures (conditional branch and goto), and they would be used by<br>&gt;&gt; 100% of the users. Beyond that, however, everything is “inessential”.<br>&gt;&gt; Adding room for elegance and expressiveness, even when perhaps initially<br>&gt;&gt; seldom used, doesn’t seem wrong: this language is still young, after all.<br>&gt;&gt; Let’s not shoot decide a feature isn’t used before we even give it a chance<br>&gt;&gt; to be recognized as a feature.<br>&gt;&gt;<br>&gt;<br>&gt; I do agree with the premise here. There is absolutely something to be said<br>&gt; for elegance and expressiveness. Moreover, expressiveness goes hand in hand<br>&gt; with facilitating correctness. We could reduce everything to goto&#39;s and<br>&gt; conditional branches, but correctness suffers greatly and readability of<br>&gt; the code would be abysmal--and I think I&#39;ll find agreement that it&#39;s a<br>&gt; solidly grounded opinion.<br>&gt;<br>&gt; So &quot;inessential&quot; alone is not a good sole criterion--I agree. But it is<br>&gt; one of several prongs here: `where` is not only inessential, I argue that<br>&gt; it lacks expressiveness (in that what is enabled by it can be expressed<br>&gt; equally or even more cogently with `guard`, a more general and more<br>&gt; expressive syntax overall), and it detracts from rather than helps with<br>&gt; writing correct code, because we hear attestations that its use has gone<br>&gt; awry (and the going awry happens at runtime!). So in essence, I would be<br>&gt; content with inessential but expressive solutions, but here I argue that<br>&gt; `where` is neither essential nor expressive.<br>&gt;<br>&gt; Elegance is in the eye of the beholder, but FWIW I do not find `where`<br>&gt; elegant; it irks me greatly from an aesthetic point of view just as it<br>&gt; delights others. I see no point in debating personal taste, however.<br>&gt;<br>&gt;<br>&gt;&gt; I would argue that at least one reason the where clause is little used on<br>&gt;&gt; for-in loops in code in the field is that it’s barely documented. I don’t<br>&gt;&gt; see any reference to it, or example of it, in the Swift 2.2 language guide.<br>&gt;&gt; One has to read the grammar for the for statement in the more technical<br>&gt;&gt; Language Reference in order to find it, and even there it’s behavior is not<br>&gt;&gt; defined that I can see.<br>&gt;&gt;<br>&gt;&gt; Using or not using a feature does not create a dialect of a language.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Leave it in!<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I do it is<br>&gt;&gt;&gt; because I&#39;ve decided that in the context of that piece of code it does<br>&gt;&gt;&gt; exactly what I want it to do with the maximum amount of clarity.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it detracts<br>&gt;&gt;&gt; from the language at all.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The *only* argument that I have heard for removing it is that some<br>&gt;&gt;&gt; people don&#39;t immediately intuit how to use it. I didn&#39;t have any trouble<br>&gt;&gt;&gt; with it at all. It follows one of the most basic programming patterns ever:<br>&gt;&gt;&gt; &quot;For all x in X, if predicate P is true, do something.&quot; The use of the<br>&gt;&gt;&gt; keyword &quot;where&quot; makes perfect sense in that context, and when I read it out<br>&gt;&gt;&gt; loud, it sounds natural: &quot;For all x in X where P, do something.&quot; That is an<br>&gt;&gt;&gt; elegant, succinct, and clear way of stating exactly what I want my program<br>&gt;&gt;&gt; to do.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I don&#39;t doubt that it has caused some confusion for some people, but I&#39;m<br>&gt;&gt;&gt; not sold that that is a good enough reason to get rid of it. It seems<br>&gt;&gt;&gt; strange to get rid of a tool because not everyone understands how to use it<br>&gt;&gt;&gt; immediately, without ever having to ask a single question. As long as its<br>&gt;&gt;&gt; not a dangerous tool (and it isn&#39;t), then keep it in the workshop for those<br>&gt;&gt;&gt; times when it comes in handy. And even if there is some initial confusion,<br>&gt;&gt;&gt; it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does this work<br>&gt;&gt;&gt; like X, or does this work like Y? Let&#39;s see...oh, it works like X. Ok.&quot;<br>&gt;&gt;&gt; That&#39;s the entire learning curve...about 5 seconds of curiosity followed by<br>&gt;&gt;&gt; the blissful feeling of resolution.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party<br>&gt;&gt;&gt;&gt;&gt; Swift Repos&quot; folder and did the same search. Among the 15 repos in that<br>&gt;&gt;&gt;&gt;&gt; folder, a joint search returned about 650 hits on for-in (again with some<br>&gt;&gt;&gt;&gt;&gt; false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Weird. My own Swift projects (not on Github :P) use “where” all the<br>&gt;&gt;&gt;&gt;&gt; time with for loops. I really like it and think it reads *and* writes far<br>&gt;&gt;&gt;&gt;&gt; better as well as makes for nicer one-liners. In one project, by rough<br>&gt;&gt;&gt;&gt;&gt; count, I have about 20 that use “where” vs. 40 in that same project not<br>&gt;&gt;&gt;&gt;&gt; using “where”.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; In another smaller test project, there are only 10 for loops, but even<br>&gt;&gt;&gt;&gt;&gt; so one still managed to use where.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Not a lot of data without looking at even more projects, I admit, but<br>&gt;&gt;&gt;&gt;&gt; this seems to suggest that the usage of “where” is going to be very<br>&gt;&gt;&gt;&gt;&gt; developer-dependent. Perhaps there’s some factor of prior background at<br>&gt;&gt;&gt;&gt;&gt; work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; That is worrying if true, because it suggests that it&#39;s enabling<br>&gt;&gt;&gt;&gt; &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I feel like “where” is a more declarative construct and that we should<br>&gt;&gt;&gt;&gt;&gt; be encouraging that way of thinking in general. When using it, it feels<br>&gt;&gt;&gt;&gt;&gt; like “magic” for some reason - even though there’s nothing special about<br>&gt;&gt;&gt;&gt;&gt; it. It feels like I’ve made the language work *for me* a little bit rather<br>&gt;&gt;&gt;&gt;&gt; than me having to contort my solution to the will of the language. This may<br>&gt;&gt;&gt;&gt;&gt; be highly subjective.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/af5561ed/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>June 10, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On 10 Jun 2016, at 19:10, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; So &quot;inessential&quot; alone is not a good sole criterion--I agree. But it is one of several prongs here: `where` is not only inessential, I argue that it lacks expressiveness (in that what is enabled by it can be expressed equally or even more cogently with `guard`, a more general and more expressive syntax overall), and it detracts from rather than helps with writing correct code, because we hear attestations that its use has gone awry (and the going awry happens at runtime!). So in essence, I would be content with inessential but expressive solutions, but here I argue that `where` is neither essential nor expressive.<br></p><p>You’ve argued this several times, but I think the code speaks well enough for itself:<br></p><p>	for eachValue in theValues where eachValue.isOdd { … }<br>	for eachValue in theValues {<br>		guard eachValue.isOdd else { continue }<br>	}<br></p><p>Not only is it an extra 15+ characters, it’s an extra line, so there’s a definite saving right away.<br></p><p>The key issue is people misunderstanding that where is equivalent to continue and not break; this may be an issue of consistency, which will go away if “where” is doomed to be removed from conditionals (which I believe includes while loops). Otherwise it seems like it’s based on a mistaken assumption that the for in loop wants to terminate rather than continue, but really its purpose is to visit as many matching elements of a sequence as possible (even with c-style for loops most for loops tend to be finite in a way that you can predict the number of loops before they run if you want to), whereas while loops can be considered designed to fail, at least that’s how I was taught to use them. Of course both can be infinite and there’s overlap in how they’re used, but this is how I think about them, and thus what shapes conditions placed upon them.<br></p><p>Again though, if there’ll only be one loop with a where clause like this then I’m not sure it’s as much of an issue.<br></p><p><br>The obvious solution to clarity or lack of implied meaning is to either add detail (which narrows the gap on guard continue) or rename the keyword to something. In terms of the clarity I’m actually disappointed that Swift doesn’t use the do keyword for loops, as I find the following very clear:<br></p><p>	for eachValue in theValues where eachValue.isOdd do { … }<br></p><p>Reading the last part in isolation “where eachValue.isOdd do” is clearer that the block is skipped, but that the loop isn’t. This is essentially how I read loop blocks already, but since we have a “do” keyword I wish we could use it like this, as I would on all my loops. In fact, with the do present you could easily shorten “where” to “if”, which may even be slightly clearer still:<br></p><p>	for eachValue in theValues if eachValue.isOdd do { … }<br></p><p>This is part of why I’m uncertain about relocating where, as I kind of feel that it’s actually in the right place already, since the where clause determines whether the block is executed, not whether the loop stops, i.e- the program will still visit every element of the sequence if it can, you’re just choosing which ones to actually do work for. Even clearer still if you consider it with a comma in the middle like so:<br></p><p>	for eachValue in theValues, if eachValue.isOdd do { … }<br></p><p>Not really proposing this is a syntax, though if it were possible to write this way today it’s what I’d do, but the last form above is how I ready a where clause on a for loop. I’ve said that it’s equivalent to a guard because a guard is a nice way to replace it when the condition becomes more complex (or you need to break instead), but actually I’d say it’s more equivalent to:<br></p><p>	for eachValue in theValues { if eachValue.isOdd {<br>		…<br>	}}<br></p><p>Except I’d never want to write my code that way if I can avoid it (I frequently write code like this for switch statements inside enums, which is I’m eager to see a replacement to switch self, but that’s another issue entirely).<br></p><p><br>Also, one thing to add is that I really hate writing extra lines if I don’t have to; obviously I’ll do it when a single line gets too complex and cluttered, but one reason I like where is that I don’t have to waste a line inside the loop on a guard statement, which either keeps the focus on the code, or lets me instead use the line for a comment that clarifies my intent exactly; I’m all for self-documenting code, but a comment stating what my aim is better since any mistake in my code could leave my intent in question otherwise.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/fd020103/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 10, 2016 at 02:00:00pm</p></header><div class="content"><p>On Fri, Jun 10, 2016 at 2:35 PM, Haravikk &lt;swift-evolution at haravikk.me&gt;<br>wrote:<br></p><p>&gt;<br>&gt; On 10 Jun 2016, at 19:10, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; So &quot;inessential&quot; alone is not a good sole criterion--I agree. But it is<br>&gt; one of several prongs here: `where` is not only inessential, I argue that<br>&gt; it lacks expressiveness (in that what is enabled by it can be expressed<br>&gt; equally or even more cogently with `guard`, a more general and more<br>&gt; expressive syntax overall), and it detracts from rather than helps with<br>&gt; writing correct code, because we hear attestations that its use has gone<br>&gt; awry (and the going awry happens at runtime!). So in essence, I would be<br>&gt; content with inessential but expressive solutions, but here I argue that<br>&gt; `where` is neither essential nor expressive.<br>&gt;<br>&gt;<br>&gt; You’ve argued this several times, but I think the code speaks well enough<br>&gt; for itself:<br>&gt;<br>&gt; for eachValue in theValues where eachValue.isOdd { … }<br>&gt; for eachValue in theValues {<br>&gt; guard eachValue.isOdd else { continue }<br>&gt; }<br>&gt;<br>&gt; Not only is it an extra 15+ characters, it’s an extra line, so there’s a<br>&gt; definite saving right away.<br>&gt;<br>&gt; The key issue is people misunderstanding that where is equivalent to<br>&gt; continue and not break; this may be an issue of consistency, which will go<br>&gt; away if “where” is doomed to be removed from conditionals (which I believe<br>&gt; includes while loops). Otherwise it seems like it’s based on a mistaken<br>&gt; assumption that the for in loop wants to terminate rather than continue,<br>&gt; but really its purpose is to visit as many matching elements of a sequence<br>&gt; as possible (even with c-style for loops most for loops tend to be finite<br>&gt; in a way that you can predict the number of loops before they run if you<br>&gt; want to), whereas while loops can be considered designed to fail, at least<br>&gt; that’s how I was taught to use them.<br>&gt;<br></p><p>I&#39;m glad this mental model makes sense to you. I&#39;m not in the business of<br>regularly teaching coding, but this is the first I&#39;ve heard of the idea<br>that &quot;while loops want to break, but for loops want to continue.&quot; I don&#39;t<br>think this is a widely shared conception of those loops.<br></p><p><br>&gt; Of course both can be infinite and there’s overlap in how they’re used,<br>&gt; but this is how I think about them, and thus what shapes conditions placed<br>&gt; upon them.<br>&gt;<br>&gt; Again though, if there’ll only be one loop with a where clause like this<br>&gt; then I’m not sure it’s as much of an issue.<br>&gt;<br>&gt;<br>&gt; The obvious solution to clarity or lack of implied meaning is to either<br>&gt; add detail (which narrows the gap on guard continue) or rename the keyword<br>&gt; to something. In terms of the clarity I’m actually disappointed that Swift<br>&gt; doesn’t use the do keyword for loops, as I find the following very clear:<br>&gt;<br>&gt; for eachValue in theValues where eachValue.isOdd do { … }<br>&gt;<br>&gt; Reading the last part in isolation “where eachValue.isOdd do” is clearer<br>&gt; that the block is skipped, but that the loop isn’t. This is essentially how<br>&gt; I read loop blocks already, but since we have a “do” keyword I wish we<br>&gt; could use it like this, as I would on all my loops. In fact, with the do<br>&gt; present you could easily shorten “where” to “if”, which may even be<br>&gt; slightly clearer still:<br>&gt;<br>&gt; for eachValue in theValues if eachValue.isOdd do { … }<br>&gt;<br>&gt; This is part of why I’m uncertain about relocating where, as I kind of<br>&gt; feel that it’s actually in the right place already, since the where clause<br>&gt; determines whether the block is executed, not whether the loop stops, i.e-<br>&gt; the program will still visit every element of the sequence if it can,<br>&gt; you’re just choosing which ones to actually do work for. Even clearer still<br>&gt; if you consider it with a comma in the middle like so:<br>&gt;<br>&gt; for eachValue in theValues, if eachValue.isOdd do { … }<br>&gt;<br>&gt; Not really proposing this is a syntax, though if it were possible to write<br>&gt; this way today it’s what I’d do, but the last form above is how I ready a<br>&gt; where clause on a for loop. I’ve said that it’s equivalent to a guard<br>&gt; because a guard is a nice way to replace it when the condition becomes more<br>&gt; complex (or you need to break instead), but actually I’d say it’s more<br>&gt; equivalent to:<br>&gt;<br>&gt; for eachValue in theValues { if eachValue.isOdd {<br>&gt; …<br>&gt; }}<br>&gt;<br>&gt; Except I’d never want to write my code that way if I can avoid it (I<br>&gt; frequently write code like this for switch statements inside enums, which<br>&gt; is I’m eager to see a replacement to switch self, but that’s another issue<br>&gt; entirely).<br>&gt;<br>&gt;<br>&gt; Also, one thing to add is that I really hate writing extra lines if I<br>&gt; don’t have to; obviously I’ll do it when a single line gets too complex and<br>&gt; cluttered, but one reason I like where is that I don’t have to waste a line<br>&gt; inside the loop on a guard statement, which either keeps the focus on the<br>&gt; code, or lets me instead use the line for a comment that clarifies my<br>&gt; intent exactly; I’m all for self-documenting code, but a comment stating<br>&gt; what my aim is better since any mistake in my code could leave my intent in<br>&gt; question otherwise.<br>&gt;<br></p><p>I&#39;m sorry, but until this discussion I had never heard of a coding style<br>that advocates for conservation of vertical space. There&#39;s a lot of<br>argument whether 80 characters is still a relevant line length, but I&#39;ve<br>never heard discussion that a single long line is better than multiple<br>lines as a general principle.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/83f558bc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>June 10, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On 10 Jun 2016, at 20:45, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; I&#39;m sorry, but until this discussion I had never heard of a coding style that advocates for conservation of vertical space. There&#39;s a lot of argument whether 80 characters is still a relevant line length, but I&#39;ve never heard discussion that a single long line is better than multiple lines as a general principle.<br></p><p>We’re not talking about a single super long line here, my actual uses of for in where don’t get much longer than the examples I’ve given, besides which the where keyword itself does a good job of breaking up the line into distinct pieces. Compared to say a long line full of chained .filter and .map or whatever it’s very clean.<br></p><p>At no point am I advocating shoving everything onto one line just for the sake of it, however, without a where clause a for in loop’s opening line tends to be very short so it leaves a nice chunk of extra space that’s ideal for a simple condition. Anything longer can, and absolutely should, span multiple lines in whatever form the developer prefers, no-one is suggesting that where clauses should remain in so we can ruin our code by shoving as much as possible on one line.<br></p><p><br></p><p>Regarding some of the numbers that have come up about for in vs for in where loops (in my own code I’m close to maybe of 20% of my for in loops using it), it’s important to recognise that the use of the where clause isn’t well advertised. When I started out with Swift I only knew that it could be used on cases in a switch statement, and later that it was used with complicated generics. It wasn’t until I joined the mailing list that I found out it could be used with conditional bindings and loops, but when I did I started using it almost immediately.<br></p><p>Plus a lot of developers are coming from other languages where nothing like this existed, so if they don’t discover it somewhere it’s not surprising if they don’t use it. Also, the important figures aren’t actually for in versus for in where, what’s needed is a count of for in where versus loops that use either if/guard continue (not break) or .filter() (i.e- only loops that could use a where clause but don’t). Most for in loops visit every element so it’s not surprising that they outnumber for in where by a large margin. I use it quite a bit in place of .filter(), and I’d use this form even more if there were a breaking alternative, I probably wouldn’t use a combined filtering and breaking version much though, but I wouldn’t be opposed to the possibility.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/c39d9e3d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 10, 2016 at 03:00:00pm</p></header><div class="content"><p>On Fri, Jun 10, 2016 at 3:17 PM, Haravikk &lt;swift-evolution at haravikk.me&gt;<br>wrote:<br></p><p>&gt;<br>&gt; On 10 Jun 2016, at 20:45, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; I&#39;m sorry, but until this discussion I had never heard of a coding style<br>&gt; that advocates for conservation of vertical space. There&#39;s a lot of<br>&gt; argument whether 80 characters is still a relevant line length, but I&#39;ve<br>&gt; never heard discussion that a single long line is better than multiple<br>&gt; lines as a general principle.<br>&gt;<br>&gt;<br>&gt; We’re not talking about a single super long line here, my actual uses of<br>&gt; for in where don’t get much longer than the examples I’ve given, besides<br>&gt; which the where keyword itself does a good job of breaking up the line into<br>&gt; distinct pieces. Compared to say a long line full of chained .filter and<br>&gt; .map or whatever it’s very clean.<br>&gt;<br>&gt; At no point am I advocating shoving everything onto one line just for the<br>&gt; sake of it, however, without a where clause a for in loop’s opening line<br>&gt; tends to be very short so it leaves a nice chunk of extra space that’s<br>&gt; ideal for a simple condition. Anything longer can, and absolutely should,<br>&gt; span multiple lines in whatever form the developer prefers, no-one is<br>&gt; suggesting that where clauses should remain in so we can ruin our code by<br>&gt; shoving as much as possible on one line.<br>&gt;<br></p><p>Here, though emotion is hardly a worthy barometer, I had quite a visceral<br>reaction to the example given at one point:<br></p><p>```<br>for number in fibonacci where number % 2 == 0 while number &lt; 4_000_000 {...}<br>```<br></p><p>This, IMO, is long enough to cause a heart attack.<br></p><p><br></p><p>&gt; Regarding some of the numbers that have come up about for in vs for in<br>&gt; where loops (in my own code I’m close to maybe of 20% of my for in loops<br>&gt; using it), it’s important to recognise that the use of the where clause<br>&gt; isn’t well advertised. When I started out with Swift I only knew that it<br>&gt; could be used on cases in a switch statement, and later that it was used<br>&gt; with complicated generics. It wasn’t until I joined the mailing list that I<br>&gt; found out it could be used with conditional bindings and loops, but when I<br>&gt; did I started using it almost immediately.<br>&gt;<br></p><p>Since it is so obscure, I think it&#39;d be fair to say that the feature is not<br>fundamental to Swift&#39;s &quot;character&quot; or &quot;style.&quot; In fact, I understand that<br>it was added only later. I could buy the argument that, if advertised<br>widely, people would find ways to use it more widely and perhaps even<br>generally correctly.<br></p><p>But it does show that (a) it&#39;s obscure; and (b) if it were never there,<br>approximately no one outside this list would miss it. However, given that<br>it is there, the large proportion of people who don&#39;t know of it<br>are nonetheless liable to *read* it, and they stand a chance of<br>misinterpreting its meaning on first reading. They may encounter it at any<br>time, since it&#39;s a part of the language itself and not domain-specific, but<br>they might well encounter this syntax only once in a blue moon and far into<br>their time using the language. Thus, the need to weigh pros and cons here I<br>think.<br></p><p><br>&gt; Plus a lot of developers are coming from other languages where nothing<br>&gt; like this existed, so if they don’t discover it somewhere it’s not<br>&gt; surprising if they don’t use it. Also, the important figures aren’t<br>&gt; actually for in versus for in where, what’s needed is a count of for in<br>&gt; where versus loops that use either if/guard continue (not break) or<br>&gt; .filter() (i.e- only loops that *could* use a where clause but don’t).<br>&gt;<br></p><p>Right, that might be the more salient statistic.<br></p><p><br>&gt; Most for in loops visit every element so it’s not surprising that they<br>&gt; outnumber for in where by a large margin. I use it quite a bit in place of<br>&gt; .filter(), and I’d use this form even more if there were a breaking<br>&gt; alternative, I probably wouldn’t use a combined filtering and breaking<br>&gt; version much though, but I wouldn’t be opposed to the possibility.<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/4a99d264/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>June 10, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; Here, though emotion is hardly a worthy barometer, I had quite a visceral reaction to the example given at one point:<br>&gt; <br>&gt; ```<br>&gt; for number in fibonacci where number % 2 == 0 while number &lt; 4_000_000 {...}<br>&gt; ```<br>&gt; <br>&gt; This, IMO, is long enough to cause a heart attack.<br></p><p>To me, that looks almost beautiful - it says exactly what it means!<br></p><p>l8r<br>Sean<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>June 11, 2016 at 10:00:00pm</p></header><div class="content"><p>+1<br></p><p>-Thorsten <br></p><p>&gt; Am 10.06.2016 um 22:57 schrieb Sean Heber via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; <br>&gt;&gt; Here, though emotion is hardly a worthy barometer, I had quite a visceral reaction to the example given at one point:<br>&gt;&gt; <br>&gt;&gt; ```<br>&gt;&gt; for number in fibonacci where number % 2 == 0 while number &lt; 4_000_000 {...}<br>&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; This, IMO, is long enough to cause a heart attack.<br>&gt; <br>&gt; To me, that looks almost beautiful - it says exactly what it means!<br>&gt; <br>&gt; l8r<br>&gt; Sean<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>June 11, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On 10 Jun 2016, at 21:53, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; I had quite a visceral reaction to the example given at one point:<br>&gt; <br>&gt; for number in fibonacci where number % 2 == 0 while number &lt; 4_000_000 {...}<br>&gt; <br>&gt; This, IMO, is long enough to cause a heart attack.<br></p><p>This is not what’s being discussed though, that’s a separate feature request and I’ve already pointed out that I’m not that comfortable with allowing both where and while on the same line. That said, it’s worth remembering that syntax highlighting doesn’t always carry into the mailing list; in Xcode the colouration of “where” makes it a pretty significant separator between the loop and the where clause, which a “while” clause would presumably do too.<br></p><p>Although it’s not IMO that bad of an example (though I’m not sure I’d actually write something like that personally), I feel it’s worth pointing out that when using the guard alternatives there is absolutely nothing (besides common decency) stopping me from writing the following if I want to:<br></p><p>	for number in fibonacci { guard number % 2 == 0 else { continue }; guard number &lt; 4_000_000 else { break }; … }<br></p><p>Compared to that the for in where while variant is very elegant.<br></p><p>The appeal of where clauses to me is that they are a neat way to handle simple, common cases. In my own code the cases where I’d like to see a “while” variant would not be used in combination with where, in fact I can’t currently find any instance in my code where I have both a guard continue and a guard break that could be rolled into a single where while condition (I have maybe three loops that have both of these, but when I do they’re not both right at the start). That said, this is not an argument for removing where, it’s an argument for refining the proposal for a “while” variant, e.g- allow only one of these per loop (which also solves any confusion around the order they are evaluated in).<br></p><p>&gt; Regarding some of the numbers that have come up about for in vs for in where loops (in my own code I’m close to maybe of 20% of my for in loops using it), it’s important to recognise that the use of the where clause isn’t well advertised. When I started out with Swift I only knew that it could be used on cases in a switch statement, and later that it was used with complicated generics. It wasn’t until I joined the mailing list that I found out it could be used with conditional bindings and loops, but when I did I started using it almost immediately.<br>&gt; <br>&gt; Since it is so obscure, I think it&#39;d be fair to say that the feature is not fundamental to Swift&#39;s &quot;character&quot; or &quot;style.&quot; In fact, I understand that it was added only later. I could buy the argument that, if advertised widely, people would find ways to use it more widely and perhaps even generally correctly.<br></p><p>The latter is what I believe; if I’d known about it sooner I would have used it sooner, but the Swift introduction I followed only seemed to use it on case statements. I found out about the other uses later for generics when I ran into the limitations of very basic type-only generics, and later still for conditional binding (at which point I tried it on while and for loops too).<br></p><p>The same is true of pattern matching btw; I didn’t learn about that until I joined the mailing list either, but I wouldn’t want rid of that feature either as now that I’m aware of it I find it very useful. Given that the two features are kind of linked  since “where&quot; was apparently being introduced with a view towards more powerful pattern matching, it’d be interesting to find out what that more powerful pattern matching was going to look like.<br></p><p>Whether either feature became vestigial or not in terms of their intended design, both are useful constructs that I think just need to be championed more.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160611/22d9352f/attachment-0001.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 10, 2016 at 09:00:00pm</p></header><div class="content"><p>I don&#39;t think the &#39;where&#39; in &#39;for&#39; loop adds another dialect of Swift more <br>than using of [Int] vs Array&lt;Int&gt; or shorthand syntax for Optionals adds <br>it. (in addition to &#39;guard&#39; vs &#39;if&#39;)<br>So, it&#39;s just an opinion if &#39;where&#39; in &#39;for&#39; loop introduces new dialect or <br>if it is a handy feature that can be used when it best suits the needs in <br>some situation or even a metter of style(like [Int] vs Array&lt;Int&gt; or using <br>.forEach vs for-in etc).<br></p><p>On 10.06.2016 20:17, Xiaodi Wu via swift-evolution wrote:<br>&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use it--is<br>&gt; indicative of a key worry here: it&#39;s inessential to the language and<br>&gt; promotes dialects wherein certain people use it and others wherein they<br>&gt; don&#39;t. This is an anti-goal.<br>&gt;<br>&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com<br>&gt; &lt;mailto:letvargo at gmail.com&gt;&gt; wrote:<br>&gt;<br>&gt;     Leave it in!<br>&gt;<br>&gt;     It&#39;s a great little tool. I don&#39;t use it very often, but when I do it<br>&gt;     is because I&#39;ve decided that in the context of that piece of code it<br>&gt;     does exactly what I want it to do with the maximum amount of clarity.<br>&gt;<br>&gt;     If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it<br>&gt;     detracts from the language at all.<br>&gt;<br>&gt;     The *only* argument that I have heard for removing it is that some<br>&gt;     people don&#39;t immediately intuit how to use it. I didn&#39;t have any<br>&gt;     trouble with it at all. It follows one of the most basic programming<br>&gt;     patterns ever: &quot;For all x in X, if predicate P is true, do something.&quot;<br>&gt;     The use of the keyword &quot;where&quot; makes perfect sense in that context, and<br>&gt;     when I read it out loud, it sounds natural: &quot;For all x in X where P, do<br>&gt;     something.&quot; That is an elegant, succinct, and clear way of stating<br>&gt;     exactly what I want my program to do.<br>&gt;<br>&gt;     I don&#39;t doubt that it has caused some confusion for some people, but<br>&gt;     I&#39;m not sold that that is a good enough reason to get rid of it. It<br>&gt;     seems strange to get rid of a tool because not everyone understands how<br>&gt;     to use it immediately, without ever having to ask a single question. As<br>&gt;     long as its not a dangerous tool (and it isn&#39;t), then keep it in the<br>&gt;     workshop for those times when it comes in handy. And even if there is<br>&gt;     some initial confusion, it doesn&#39;t sound like it lasted that long. It&#39;s<br>&gt;     more like, &quot;Does this work like X, or does this work like Y? Let&#39;s<br>&gt;     see...oh, it works like X. Ok.&quot; That&#39;s the entire learning<br>&gt;     curve...about 5 seconds of curiosity followed by the blissful feeling<br>&gt;     of resolution.<br>&gt;<br>&gt;     On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution<br>&gt;     &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;<br>&gt;         On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution<br>&gt;         &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;<br>&gt;             &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party Swift Repos&quot; folder and did the same search. Among the 15 repos in that folder, a joint search returned about 650 hits on for-in (again with some false positives) and not a single for-in-while use.<br>&gt;<br>&gt;             Weird. My own Swift projects (not on Github :P) use “where” all<br>&gt;             the time with for loops. I really like it and think it reads<br>&gt;             *and* writes far better as well as makes for nicer one-liners.<br>&gt;             In one project, by rough count, I have about 20 that use<br>&gt;             “where” vs. 40 in that same project not using “where”.<br>&gt;<br>&gt;             In another smaller test project, there are only 10 for loops,<br>&gt;             but even so one still managed to use where.<br>&gt;<br>&gt;             Not a lot of data without looking at even more projects, I<br>&gt;             admit, but this seems to suggest that the usage of “where” is<br>&gt;             going to be very developer-dependent. Perhaps there’s some<br>&gt;             factor of prior background at work here? (I’ve done a lot of<br>&gt;             SQL in another life, for example.)<br>&gt;<br>&gt;<br>&gt;         That is worrying if true, because it suggests that it&#39;s enabling<br>&gt;         &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;<br>&gt;<br>&gt;<br>&gt;             I feel like “where” is a more declarative construct and that we<br>&gt;             should be encouraging that way of thinking in general. When<br>&gt;             using it, it feels like “magic” for some reason - even though<br>&gt;             there’s nothing special about it. It feels like I’ve made the<br>&gt;             language work *for me* a little bit rather than me having to<br>&gt;             contort my solution to the will of the language. This may be<br>&gt;             highly subjective.<br>&gt;<br>&gt;             l8r<br>&gt;             Sean<br>&gt;<br>&gt;             _______________________________________________<br>&gt;             swift-evolution mailing list<br>&gt;             swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;             https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;         _______________________________________________<br>&gt;         swift-evolution mailing list<br>&gt;         swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 10, 2016 at 01:00:00pm</p></header><div class="content"><p>On Fri, Jun 10, 2016 at 1:09 PM, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br></p><p>&gt; I don&#39;t think the &#39;where&#39; in &#39;for&#39; loop adds another dialect of Swift more<br>&gt; than using of [Int] vs Array&lt;Int&gt; or shorthand syntax for Optionals adds<br>&gt; it. (in addition to &#39;guard&#39; vs &#39;if&#39;)<br>&gt;<br></p><p>As I mentioned above, `guard` and `if` each have uses that cannot be served<br>by the other. Shorthand syntax for optional types serves, among other<br>purposes, the aim of progressive disclosure of language features to<br>learners (in the sense that a beginning user doesn&#39;t have to learn about<br>enums before using optionals). [] syntax for arrays is long precedented<br>from other languages in the C family and satisfies user expectations when<br>they come from those languages. I acknowledge that meeting user<br>expectations when they come from a related language, as well as learning<br>and education, are valid aims. And I have put forward arguments that<br>`where` does not serve any of these valid ends.<br></p><p><br>&gt; So, it&#39;s just an opinion if &#39;where&#39; in &#39;for&#39; loop introduces new dialect<br>&gt; or if it is a handy feature that can be used when it best suits the needs<br>&gt; in some situation or even a metter of style(like [Int] vs Array&lt;Int&gt; or<br>&gt; using .forEach vs for-in etc).<br></p><p><br>But, `.forEach` cannot be used if you want to prematurely break from the<br>loop, so again it cannot do what `for...in` can do. By contrast, `guard`<br>can do everything `where` can do and more. Moreover, here we are talking<br>about two aspects of the grammar, whereas `.forEach` is an stdlib method.<br>As I&#39;ve argued before, users expect to see functions they aren&#39;t familiar<br>with--after all, any person can write a function and name it anything--but<br>it elevates the learning curve to have keywords and syntaxes in the<br>language itself which are redundant.<br></p><p><br>&gt;<br>&gt;<br>&gt; On 10.06.2016 20:17, Xiaodi Wu via swift-evolution wrote:<br>&gt;<br>&gt;&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use it--is<br>&gt;&gt; indicative of a key worry here: it&#39;s inessential to the language and<br>&gt;&gt; promotes dialects wherein certain people use it and others wherein they<br>&gt;&gt; don&#39;t. This is an anti-goal.<br>&gt;&gt;<br>&gt;&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com<br>&gt;&gt; &lt;mailto:letvargo at gmail.com&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;     Leave it in!<br>&gt;&gt;<br>&gt;&gt;     It&#39;s a great little tool. I don&#39;t use it very often, but when I do it<br>&gt;&gt;     is because I&#39;ve decided that in the context of that piece of code it<br>&gt;&gt;     does exactly what I want it to do with the maximum amount of clarity.<br>&gt;&gt;<br>&gt;&gt;     If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it<br>&gt;&gt;     detracts from the language at all.<br>&gt;&gt;<br>&gt;&gt;     The *only* argument that I have heard for removing it is that some<br>&gt;&gt;     people don&#39;t immediately intuit how to use it. I didn&#39;t have any<br>&gt;&gt;     trouble with it at all. It follows one of the most basic programming<br>&gt;&gt;     patterns ever: &quot;For all x in X, if predicate P is true, do something.&quot;<br>&gt;&gt;     The use of the keyword &quot;where&quot; makes perfect sense in that context,<br>&gt;&gt; and<br>&gt;&gt;     when I read it out loud, it sounds natural: &quot;For all x in X where P,<br>&gt;&gt; do<br>&gt;&gt;     something.&quot; That is an elegant, succinct, and clear way of stating<br>&gt;&gt;     exactly what I want my program to do.<br>&gt;&gt;<br>&gt;&gt;     I don&#39;t doubt that it has caused some confusion for some people, but<br>&gt;&gt;     I&#39;m not sold that that is a good enough reason to get rid of it. It<br>&gt;&gt;     seems strange to get rid of a tool because not everyone understands<br>&gt;&gt; how<br>&gt;&gt;     to use it immediately, without ever having to ask a single question.<br>&gt;&gt; As<br>&gt;&gt;     long as its not a dangerous tool (and it isn&#39;t), then keep it in the<br>&gt;&gt;     workshop for those times when it comes in handy. And even if there is<br>&gt;&gt;     some initial confusion, it doesn&#39;t sound like it lasted that long.<br>&gt;&gt; It&#39;s<br>&gt;&gt;     more like, &quot;Does this work like X, or does this work like Y? Let&#39;s<br>&gt;&gt;     see...oh, it works like X. Ok.&quot; That&#39;s the entire learning<br>&gt;&gt;     curve...about 5 seconds of curiosity followed by the blissful feeling<br>&gt;&gt;     of resolution.<br>&gt;&gt;<br>&gt;&gt;     On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution<br>&gt;&gt;     &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;         On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution<br>&gt;&gt;         &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;             &gt; And to follow-up to myself once again, I went to my &quot;Cool<br>&gt;&gt; 3rd Party Swift Repos&quot; folder and did the same search. Among the 15 repos<br>&gt;&gt; in that folder, a joint search returned about 650 hits on for-in (again<br>&gt;&gt; with some false positives) and not a single for-in-while use.<br>&gt;&gt;<br>&gt;&gt;             Weird. My own Swift projects (not on Github :P) use “where”<br>&gt;&gt; all<br>&gt;&gt;             the time with for loops. I really like it and think it reads<br>&gt;&gt;             *and* writes far better as well as makes for nicer one-liners.<br>&gt;&gt;             In one project, by rough count, I have about 20 that use<br>&gt;&gt;             “where” vs. 40 in that same project not using “where”.<br>&gt;&gt;<br>&gt;&gt;             In another smaller test project, there are only 10 for loops,<br>&gt;&gt;             but even so one still managed to use where.<br>&gt;&gt;<br>&gt;&gt;             Not a lot of data without looking at even more projects, I<br>&gt;&gt;             admit, but this seems to suggest that the usage of “where” is<br>&gt;&gt;             going to be very developer-dependent. Perhaps there’s some<br>&gt;&gt;             factor of prior background at work here? (I’ve done a lot of<br>&gt;&gt;             SQL in another life, for example.)<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;         That is worrying if true, because it suggests that it&#39;s enabling<br>&gt;&gt;         &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;             I feel like “where” is a more declarative construct and that<br>&gt;&gt; we<br>&gt;&gt;             should be encouraging that way of thinking in general. When<br>&gt;&gt;             using it, it feels like “magic” for some reason - even though<br>&gt;&gt;             there’s nothing special about it. It feels like I’ve made the<br>&gt;&gt;             language work *for me* a little bit rather than me having to<br>&gt;&gt;             contort my solution to the will of the language. This may be<br>&gt;&gt;             highly subjective.<br>&gt;&gt;<br>&gt;&gt;             l8r<br>&gt;&gt;             Sean<br>&gt;&gt;<br>&gt;&gt;             _______________________________________________<br>&gt;&gt;             swift-evolution mailing list<br>&gt;&gt;             swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;             https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;         _______________________________________________<br>&gt;&gt;         swift-evolution mailing list<br>&gt;&gt;         swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/2341431a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4a9841be165fb834d08296761b4a32e3?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Christopher Kornher</string> &lt;ckornher at me.com&gt;<p>June 10, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jun 10, 2016, at 12:09 PM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I don&#39;t think the &#39;where&#39; in &#39;for&#39; loop adds another dialect of Swift more than using of [Int] vs Array&lt;Int&gt; or shorthand syntax for Optionals adds it. (in addition to &#39;guard&#39; vs &#39;if&#39;)<br>&gt; So, it&#39;s just an opinion if &#39;where&#39; in &#39;for&#39; loop introduces new dialect or if it is a handy feature that can be used when it best suits the needs in some situation or even a metter of style(like [Int] vs Array&lt;Int&gt; or using .forEach vs for-in etc).<br>&gt; <br>&gt; On 10.06.2016 20:17, Xiaodi Wu via swift-evolution wrote:<br>&gt;&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use it--is<br>&gt;&gt; indicative of a key worry here: it&#39;s inessential to the language and<br>&gt;&gt; promotes dialects wherein certain people use it and others wherein they<br>&gt;&gt; don&#39;t. This is an anti-goal.<br>&gt;&gt; <br>&gt;&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com<br>&gt;&gt; &lt;mailto:letvargo at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;   Leave it in!<br>&gt;&gt; <br>&gt;&gt;   It&#39;s a great little tool. I don&#39;t use it very often, but when I do it<br>&gt;&gt;   is because I&#39;ve decided that in the context of that piece of code it<br>&gt;&gt;   does exactly what I want it to do with the maximum amount of clarity.<br>&gt;&gt; <br>&gt;&gt;   If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it<br>&gt;&gt;   detracts from the language at all.<br>&gt;&gt; <br>&gt;&gt;   The *only* argument that I have heard for removing it is that some<br>&gt;&gt;   people don&#39;t immediately intuit how to use it. I didn&#39;t have any<br>&gt;&gt;   trouble with it at all. It follows one of the most basic programming<br>&gt;&gt;   patterns ever: &quot;For all x in X, if predicate P is true, do something.&quot;<br>&gt;&gt;   The use of the keyword &quot;where&quot; makes perfect sense in that context, and<br>&gt;&gt;   when I read it out loud, it sounds natural: &quot;For all x in X where P, do<br>&gt;&gt;   something.&quot; That is an elegant, succinct, and clear way of stating<br>&gt;&gt;   exactly what I want my program to do.<br>&gt;&gt; <br>&gt;&gt;   I don&#39;t doubt that it has caused some confusion for some people, but<br>&gt;&gt;   I&#39;m not sold that that is a good enough reason to get rid of it. It<br>&gt;&gt;   seems strange to get rid of a tool because not everyone understands how<br>&gt;&gt;   to use it immediately, without ever having to ask a single question. As<br>&gt;&gt;   long as its not a dangerous tool (and it isn&#39;t), then keep it in the<br>&gt;&gt;   workshop for those times when it comes in handy. And even if there is<br>&gt;&gt;   some initial confusion, it doesn&#39;t sound like it lasted that long. It&#39;s<br>&gt;&gt;   more like, &quot;Does this work like X, or does this work like Y? Let&#39;s<br>&gt;&gt;   see...oh, it works like X. Ok.&quot; That&#39;s the entire learning<br>&gt;&gt;   curve...about 5 seconds of curiosity followed by the blissful feeling<br>&gt;&gt;   of resolution.<br>&gt;&gt; <br>&gt;&gt;   On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution<br>&gt;&gt;   &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;       On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution<br>&gt;&gt;       &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party Swift Repos&quot; folder and did the same search. Among the 15 repos in that folder, a joint search returned about 650 hits on for-in (again with some false positives) and not a single for-in-while use.<br>&gt;&gt; <br>&gt;&gt;           Weird. My own Swift projects (not on Github :P) use “where” all<br>&gt;&gt;           the time with for loops. I really like it and think it reads<br>&gt;&gt;           *and* writes far better as well as makes for nicer one-liners.<br>&gt;&gt;           In one project, by rough count, I have about 20 that use<br>&gt;&gt;           “where” vs. 40 in that same project not using “where”.<br>&gt;&gt; <br>&gt;&gt;           In another smaller test project, there are only 10 for loops,<br>&gt;&gt;           but even so one still managed to use where.<br>&gt;&gt; <br>&gt;&gt;           Not a lot of data without looking at even more projects, I<br>&gt;&gt;           admit, but this seems to suggest that the usage of “where” is<br>&gt;&gt;           going to be very developer-dependent. Perhaps there’s some<br>&gt;&gt;           factor of prior background at work here? (I’ve done a lot of<br>&gt;&gt;           SQL in another life, for example.)<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;       That is worrying if true, because it suggests that it&#39;s enabling<br>&gt;&gt;       &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br></p><p>Programming styles are not dialects.<br></p><p>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;           I feel like “where” is a more declarative construct and that we<br>&gt;&gt;           should be encouraging that way of thinking in general. When<br>&gt;&gt;           using it, it feels like “magic” for some reason - even though<br>&gt;&gt;           there’s nothing special about it. It feels like I’ve made the<br>&gt;&gt;           language work *for me* a little bit rather than me having to<br>&gt;&gt;           contort my solution to the will of the language. This may be<br>&gt;&gt;           highly subjective.<br>&gt;&gt; <br>&gt;&gt;           l8r<br>&gt;&gt;           Sean<br>&gt;&gt; <br>&gt;&gt;           _______________________________________________<br>&gt;&gt;           swift-evolution mailing list<br>&gt;&gt;           swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;           https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt;       _______________________________________________<br>&gt;&gt;       swift-evolution mailing list<br>&gt;&gt;       swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;       https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>June 12, 2016 at 11:00:00pm</p></header><div class="content"><p>--1<br></p><p>I think it would be a waste of the community&#39;s time to do a formal review when only two people are in favor of this removal. <br></p><p>&#39;for in where&#39; is so useful especially since we don&#39;t have for;;; loops anymore. I&#39;d say leave this alone; the majority doesn&#39;t want this changed. <br></p><p><br></p><p>&gt; On Jun 10, 2016, at 10:17 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use it--is indicative of a key worry here: it&#39;s inessential to the language and promotes dialects wherein certain people use it and others wherein they don&#39;t. This is an anti-goal.<br>&gt; <br>&gt;&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt; Leave it in!<br>&gt;&gt; <br>&gt;&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I do it is because I&#39;ve decided that in the context of that piece of code it does exactly what I want it to do with the maximum amount of clarity.<br>&gt;&gt; <br>&gt;&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it detracts from the language at all.<br>&gt;&gt; <br>&gt;&gt; The *only* argument that I have heard for removing it is that some people don&#39;t immediately intuit how to use it. I didn&#39;t have any trouble with it at all. It follows one of the most basic programming patterns ever: &quot;For all x in X, if predicate P is true, do something.&quot; The use of the keyword &quot;where&quot; makes perfect sense in that context, and when I read it out loud, it sounds natural: &quot;For all x in X where P, do something.&quot; That is an elegant, succinct, and clear way of stating exactly what I want my program to do.<br>&gt;&gt; <br>&gt;&gt; I don&#39;t doubt that it has caused some confusion for some people, but I&#39;m not sold that that is a good enough reason to get rid of it. It seems strange to get rid of a tool because not everyone understands how to use it immediately, without ever having to ask a single question. As long as its not a dangerous tool (and it isn&#39;t), then keep it in the workshop for those times when it comes in handy. And even if there is some initial confusion, it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does this work like X, or does this work like Y? Let&#39;s see...oh, it works like X. Ok.&quot; That&#39;s the entire learning curve...about 5 seconds of curiosity followed by the blissful feeling of resolution.<br>&gt;&gt; <br>&gt;&gt;&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party Swift Repos&quot; folder and did the same search. Among the 15 repos in that folder, a joint search returned about 650 hits on for-in (again with some false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Weird. My own Swift projects (not on Github :P) use “where” all the time with for loops. I really like it and think it reads *and* writes far better as well as makes for nicer one-liners. In one project, by rough count, I have about 20 that use “where” vs. 40 in that same project not using “where”.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; In another smaller test project, there are only 10 for loops, but even so one still managed to use where.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Not a lot of data without looking at even more projects, I admit, but this seems to suggest that the usage of “where” is going to be very developer-dependent. Perhaps there’s some factor of prior background at work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That is worrying if true, because it suggests that it&#39;s enabling &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I feel like “where” is a more declarative construct and that we should be encouraging that way of thinking in general. When using it, it feels like “magic” for some reason - even though there’s nothing special about it. It feels like I’ve made the language work *for me* a little bit rather than me having to contort my solution to the will of the language. This may be highly subjective.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160612/44545f7d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 13, 2016 at 12:00:00pm</p></header><div class="content"><p>I think this discussion has made it pretty plain that what is claimed to be<br>&#39;so useful&#39; is barely ever used. Moreover, it provides no independent uses.<br>The point of these pitches is to sound out arguments, not, as far as I was<br>aware, to take a vote.<br></p><p>On Mon, Jun 13, 2016 at 1:54 AM Jose Cheyo Jimenez &lt;cheyo at masters3d.com&gt;<br>wrote:<br></p><p>&gt; --1<br>&gt;<br>&gt; I think it would be a waste of the community&#39;s time to do a formal review<br>&gt; when only two people are in favor of this removal.<br>&gt;<br>&gt; &#39;for in where&#39; is so useful especially since we don&#39;t have for;;; loops<br>&gt; anymore. I&#39;d say leave this alone; the majority doesn&#39;t want this changed.<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Jun 10, 2016, at 10:17 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use it--is<br>&gt; indicative of a key worry here: it&#39;s inessential to the language and<br>&gt; promotes dialects wherein certain people use it and others wherein they<br>&gt; don&#39;t. This is an anti-goal.<br>&gt;<br>&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;<br>&gt; Leave it in!<br>&gt;&gt;<br>&gt;&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I do it is<br>&gt;&gt; because I&#39;ve decided that in the context of that piece of code it does<br>&gt;&gt; exactly what I want it to do with the maximum amount of clarity.<br>&gt;&gt;<br>&gt;&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it detracts<br>&gt;&gt; from the language at all.<br>&gt;&gt;<br>&gt;&gt; The *only* argument that I have heard for removing it is that some people<br>&gt;&gt; don&#39;t immediately intuit how to use it. I didn&#39;t have any trouble with it<br>&gt;&gt; at all. It follows one of the most basic programming patterns ever: &quot;For<br>&gt;&gt; all x in X, if predicate P is true, do something.&quot; The use of the keyword<br>&gt;&gt; &quot;where&quot; makes perfect sense in that context, and when I read it out loud,<br>&gt;&gt; it sounds natural: &quot;For all x in X where P, do something.&quot; That is an<br>&gt;&gt; elegant, succinct, and clear way of stating exactly what I want my program<br>&gt;&gt; to do.<br>&gt;&gt;<br>&gt;&gt; I don&#39;t doubt that it has caused some confusion for some people, but I&#39;m<br>&gt;&gt; not sold that that is a good enough reason to get rid of it. It seems<br>&gt;&gt; strange to get rid of a tool because not everyone understands how to use it<br>&gt;&gt; immediately, without ever having to ask a single question. As long as its<br>&gt;&gt; not a dangerous tool (and it isn&#39;t), then keep it in the workshop for those<br>&gt;&gt; times when it comes in handy. And even if there is some initial confusion,<br>&gt;&gt; it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does this work<br>&gt;&gt; like X, or does this work like Y? Let&#39;s see...oh, it works like X. Ok.&quot;<br>&gt;&gt; That&#39;s the entire learning curve...about 5 seconds of curiosity followed by<br>&gt;&gt; the blissful feeling of resolution.<br>&gt;&gt;<br>&gt;&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party<br>&gt;&gt;&gt;&gt; Swift Repos&quot; folder and did the same search. Among the 15 repos in that<br>&gt;&gt;&gt;&gt; folder, a joint search returned about 650 hits on for-in (again with some<br>&gt;&gt;&gt;&gt; false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Weird. My own Swift projects (not on Github :P) use “where” all the<br>&gt;&gt;&gt;&gt; time with for loops. I really like it and think it reads *and* writes far<br>&gt;&gt;&gt;&gt; better as well as makes for nicer one-liners. In one project, by rough<br>&gt;&gt;&gt;&gt; count, I have about 20 that use “where” vs. 40 in that same project not<br>&gt;&gt;&gt;&gt; using “where”.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; In another smaller test project, there are only 10 for loops, but even<br>&gt;&gt;&gt;&gt; so one still managed to use where.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Not a lot of data without looking at even more projects, I admit, but<br>&gt;&gt;&gt;&gt; this seems to suggest that the usage of “where” is going to be very<br>&gt;&gt;&gt;&gt; developer-dependent. Perhaps there’s some factor of prior background at<br>&gt;&gt;&gt;&gt; work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; That is worrying if true, because it suggests that it&#39;s enabling<br>&gt;&gt;&gt; &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt;&gt; I feel like “where” is a more declarative construct and that we should<br>&gt;&gt;&gt;&gt; be encouraging that way of thinking in general. When using it, it feels<br>&gt;&gt;&gt;&gt; like “magic” for some reason - even though there’s nothing special about<br>&gt;&gt;&gt;&gt; it. It feels like I’ve made the language work *for me* a little bit rather<br>&gt;&gt;&gt;&gt; than me having to contort my solution to the will of the language. This may<br>&gt;&gt;&gt;&gt; be highly subjective.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/453fbd5a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/36603be464733b58cc53cecd480eeae8?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>let var go</string> &lt;letvargo at gmail.com&gt;<p>June 13, 2016 at 03:00:00pm</p></header><div class="content"><p>I think we must be reading different discussions.<br></p><p>What I have seen in this discussion is the following:<br></p><p>a) The need to filter a for-in loop doesn&#39;t arise that often; but,<br>b) When it does arise, everyone who has chimed in on this thread (except<br>the two people who are proposing the change) thinks that the &quot;where&quot; clause<br>is the clearest, most expressive way to do it.<br></p><p>Something that would help me get on board with this change is more evidence<br>about what kind of problems it is actually creating.<br></p><p>As best I can tell, this proposal got started because &quot;somewhere&quot; some new<br>programmers (no one knows how many) expressed some confusion (no one knows<br>how seriously they were confused, or how long it took them to figure it<br>out) about how the where clause worked in a for-in loop. For all we know,<br>once they learned the way it works, they may have said, &quot;Hey that&#39;s cool!<br>I&#39;m gonna use that from now on!&quot;<br></p><p>In other words, you seem to be talking about removing a feature that is<br>liked by *a lot* people, based on some unsubstantiated reports of user<br>error that may or may not have been totally unsubstantial.<br></p><p>I don&#39;t want new programmers to be confused, either, but the &quot;where&quot; clause<br>is such a basic programming construct - the keyword is new, but the idea<br>itself is as old as programming - that I don&#39;t mind expecting new<br>programmers to learn how to use it. The learning curve should be incredibly<br>short - it is nothing more than a filter operation.<br></p><p>There&#39;s something else here that is really important to me, though I don&#39;t<br>know how others feel about it.<br></p><p>Using the guard...continue approach that you are promoting is a code smell.<br>It puts control-flow logic inside the for-in loop. That is something I have<br>always tried to avoid. I know that the language allows for it, but I<br>believe it is bad programming practice. In fact, if you get rid of the<br>`where` keyword, I&#39;m still not going to use guard...continue. I&#39;ll just<br>filter the collection first and then loop it.<br></p><p>It is a code smell for the same reason that messing with the index inside a<br>for;; loop was a code smell. I was always taught never to do this:<br></p><p>for var i = 0; i &lt; array.count, i++ {<br>  if iWantThisToLoopAnExtraTime {<br>    i--<br>  }<br>}<br></p><p>Why? Because code like that is confusing. It becomes difficult to know how<br>many times the loop will execute, what the looping logic is, etc. Sure, I<br>might get away with it most of the time, but it is bad practice and there<br>is always a better way to do what you want to do. The only thing that keeps<br>you from the better way is laziness.<br></p><p>The same is true (albeit to a lesser degree) for the guard...continue. It<br>may not be as extreme, but it is still a code smell. It divides the<br>control-flow logic into two parts - one outside the loop, and one inside<br>the loop, and it suddenly becomes twice as easy to miss something.<br></p><p>Using for-in-where, all of the control-flow logic is on one single line,<br>and once it is known that &quot;where&quot; operates as a filter operation, it all<br>works together in a single, harmonious statement that declares exactly what<br>is going to happen in a way that is totally unambiguous.<br></p><p>So by getting rid of the &quot;where&quot; clause, I believe that you are actually<br>encouraging bad programming practice. Instead of encouraging the new user<br>to learn this very simple construct that will ultimately make their code<br>safer and more expressive without dividing their control-flow logic<br>unnecessarily into two separate parts, you are encouraging them to just &quot;do<br>what they know&quot;. I think that is terrible, and you are doing them a<br>disservice.<br></p><p>And from a personal standpoint, you are telling me that I have to write<br>smelly code, even though there is this perfectly good non-smelly option<br>sitting right there, because you don&#39;t want someone else to have to learn<br>something.<br></p><p>On Mon, Jun 13, 2016 at 5:29 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br></p><p>&gt; I think this discussion has made it pretty plain that what is claimed to<br>&gt; be &#39;so useful&#39; is barely ever used. Moreover, it provides no independent<br>&gt; uses. The point of these pitches is to sound out arguments, not, as far as<br>&gt; I was aware, to take a vote.<br>&gt;<br>&gt; On Mon, Jun 13, 2016 at 1:54 AM Jose Cheyo Jimenez &lt;cheyo at masters3d.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; --1<br>&gt;&gt;<br>&gt;&gt; I think it would be a waste of the community&#39;s time to do a formal review<br>&gt;&gt; when only two people are in favor of this removal.<br>&gt;&gt;<br>&gt;&gt; &#39;for in where&#39; is so useful especially since we don&#39;t have for;;; loops<br>&gt;&gt; anymore. I&#39;d say leave this alone; the majority doesn&#39;t want this changed.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Jun 10, 2016, at 10:17 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use<br>&gt;&gt; it--is indicative of a key worry here: it&#39;s inessential to the language and<br>&gt;&gt; promotes dialects wherein certain people use it and others wherein they<br>&gt;&gt; don&#39;t. This is an anti-goal.<br>&gt;&gt;<br>&gt;&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Leave it in!<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I do it is<br>&gt;&gt;&gt; because I&#39;ve decided that in the context of that piece of code it does<br>&gt;&gt;&gt; exactly what I want it to do with the maximum amount of clarity.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it detracts<br>&gt;&gt;&gt; from the language at all.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The *only* argument that I have heard for removing it is that some<br>&gt;&gt;&gt; people don&#39;t immediately intuit how to use it. I didn&#39;t have any trouble<br>&gt;&gt;&gt; with it at all. It follows one of the most basic programming patterns ever:<br>&gt;&gt;&gt; &quot;For all x in X, if predicate P is true, do something.&quot; The use of the<br>&gt;&gt;&gt; keyword &quot;where&quot; makes perfect sense in that context, and when I read it out<br>&gt;&gt;&gt; loud, it sounds natural: &quot;For all x in X where P, do something.&quot; That is an<br>&gt;&gt;&gt; elegant, succinct, and clear way of stating exactly what I want my program<br>&gt;&gt;&gt; to do.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I don&#39;t doubt that it has caused some confusion for some people, but I&#39;m<br>&gt;&gt;&gt; not sold that that is a good enough reason to get rid of it. It seems<br>&gt;&gt;&gt; strange to get rid of a tool because not everyone understands how to use it<br>&gt;&gt;&gt; immediately, without ever having to ask a single question. As long as its<br>&gt;&gt;&gt; not a dangerous tool (and it isn&#39;t), then keep it in the workshop for those<br>&gt;&gt;&gt; times when it comes in handy. And even if there is some initial confusion,<br>&gt;&gt;&gt; it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does this work<br>&gt;&gt;&gt; like X, or does this work like Y? Let&#39;s see...oh, it works like X. Ok.&quot;<br>&gt;&gt;&gt; That&#39;s the entire learning curve...about 5 seconds of curiosity followed by<br>&gt;&gt;&gt; the blissful feeling of resolution.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party<br>&gt;&gt;&gt;&gt;&gt; Swift Repos&quot; folder and did the same search. Among the 15 repos in that<br>&gt;&gt;&gt;&gt;&gt; folder, a joint search returned about 650 hits on for-in (again with some<br>&gt;&gt;&gt;&gt;&gt; false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Weird. My own Swift projects (not on Github :P) use “where” all the<br>&gt;&gt;&gt;&gt;&gt; time with for loops. I really like it and think it reads *and* writes far<br>&gt;&gt;&gt;&gt;&gt; better as well as makes for nicer one-liners. In one project, by rough<br>&gt;&gt;&gt;&gt;&gt; count, I have about 20 that use “where” vs. 40 in that same project not<br>&gt;&gt;&gt;&gt;&gt; using “where”.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; In another smaller test project, there are only 10 for loops, but even<br>&gt;&gt;&gt;&gt;&gt; so one still managed to use where.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Not a lot of data without looking at even more projects, I admit, but<br>&gt;&gt;&gt;&gt;&gt; this seems to suggest that the usage of “where” is going to be very<br>&gt;&gt;&gt;&gt;&gt; developer-dependent. Perhaps there’s some factor of prior background at<br>&gt;&gt;&gt;&gt;&gt; work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; That is worrying if true, because it suggests that it&#39;s enabling<br>&gt;&gt;&gt;&gt; &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I feel like “where” is a more declarative construct and that we should<br>&gt;&gt;&gt;&gt;&gt; be encouraging that way of thinking in general. When using it, it feels<br>&gt;&gt;&gt;&gt;&gt; like “magic” for some reason - even though there’s nothing special about<br>&gt;&gt;&gt;&gt;&gt; it. It feels like I’ve made the language work *for me* a little bit rather<br>&gt;&gt;&gt;&gt;&gt; than me having to contort my solution to the will of the language. This may<br>&gt;&gt;&gt;&gt;&gt; be highly subjective.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/1bb898ba/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 13, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jun 13, 2016, at 9:44 AM, let var go via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think we must be reading different discussions.<br>&gt; <br>&gt; What I have seen in this discussion is the following:<br>&gt; <br>&gt; a) The need to filter a for-in loop doesn&#39;t arise that often; but,<br>&gt; b) When it does arise, everyone who has chimed in on this thread (except the two people who are proposing the change) thinks that the &quot;where&quot; clause is the clearest, most expressive way to do it.<br></p><p>As a point of order, may I request you stop singling out &quot;the two people who are proposing the change&quot; and discuss the merits of the pitch rather than the people involved in the discussion. Details of the Swift community code of conduct can be found here: https://swift.org/community/#code-of-conduct &lt;https://swift.org/community/#code-of-conduct&gt;<br></p><p>As syntactic sugar, the filtering syntax is rarely used, hard to discover, and elevates one style (continue if false) above others (continue if false, break if true, break if false), which are not expressible using similar shorthand. It introduces a fluent style that discourages design comments at the point of use and can be difficult to breakpoint during debugging. The recommended alternative (using a separate guard) addresses all these points: better commenting, better breakpointing and debugging, and fully covers the domain of filtering and early exiting.<br></p><p>In response, I&#39;d like to hear why &quot;continue if false&quot; should be prioritized above the other options and should be retained, or alternatively why the suite should be completed (as in the original discussion with &quot;while&quot;) in preference to the advantages accrued by guard.<br></p><p>Thank you,<br></p><p>-- Erica<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/afc74dee/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 13, 2016 at 10:00:00am</p></header><div class="content"><p>On Mon, Jun 13, 2016 at 10:54 AM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Jun 13, 2016, at 9:44 AM, let var go via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I think we must be reading different discussions.<br>&gt;<br>&gt; What I have seen in this discussion is the following:<br>&gt;<br>&gt; a) The need to filter a for-in loop doesn&#39;t arise that often; but,<br>&gt; b) When it does arise, everyone who has chimed in on this thread (except<br>&gt; the two people who are proposing the change) thinks that the &quot;where&quot; clause<br>&gt; is the clearest, most expressive way to do it.<br>&gt;<br>&gt;<br>&gt; As a point of order, may I request you stop singling out &quot;the two people<br>&gt; who are proposing the change&quot; and discuss the merits of the pitch rather<br>&gt; than the people involved in the discussion. Details of the Swift community<br>&gt; code of conduct can be found here:<br>&gt; https://swift.org/community/#code-of-conduct<br>&gt;<br>&gt; As syntactic sugar, the filtering syntax is rarely used, hard to discover,<br>&gt; and elevates one style (continue if false) above others (continue if false,<br>&gt; break if true, break if false<br>&gt;<br></p><p>...and, a surprising number I noted from doing a rough GitHub search (many<br>more than I thought I would see): return if true, return if false,<br>fatalError if true, fatalError if false.<br></p><p><br>&gt; ), which are not expressible using similar shorthand. It introduces a<br>&gt; fluent style that discourages design comments at the point of use and can<br>&gt; be difficult to breakpoint during debugging. The recommended alternative<br>&gt; (using a separate guard) addresses all these points: better commenting,<br>&gt; better breakpointing and debugging, and fully covers the domain of<br>&gt; filtering and early exiting.<br>&gt;<br>&gt; In response, I&#39;d like to hear why &quot;continue if false&quot; should be<br>&gt; prioritized above the other options and should be retained, or<br>&gt; alternatively why the suite should be completed (as in the original<br>&gt; discussion with &quot;while&quot;) in preference to the advantages accrued by guard.<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -- Erica<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/69297a05/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/36603be464733b58cc53cecd480eeae8?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>let var go</string> &lt;letvargo at gmail.com&gt;<p>June 13, 2016 at 04:00:00pm</p></header><div class="content"><p>I sincerely apologize for singling people out. I will avoid it in the<br>future. I can see how it might personalize things in a way that is bad. I<br>appreciate you pointing out my mistake :)<br></p><p>On Mon, Jun 13, 2016 at 8:54 AM Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Jun 13, 2016, at 9:44 AM, let var go via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I think we must be reading different discussions.<br>&gt;<br>&gt; What I have seen in this discussion is the following:<br>&gt;<br>&gt; a) The need to filter a for-in loop doesn&#39;t arise that often; but,<br>&gt; b) When it does arise, everyone who has chimed in on this thread (except<br>&gt; the two people who are proposing the change) thinks that the &quot;where&quot; clause<br>&gt; is the clearest, most expressive way to do it.<br>&gt;<br>&gt;<br>&gt; As a point of order, may I request you stop singling out &quot;the two people<br>&gt; who are proposing the change&quot; and discuss the merits of the pitch rather<br>&gt; than the people involved in the discussion. Details of the Swift community<br>&gt; code of conduct can be found here:<br>&gt; https://swift.org/community/#code-of-conduct<br>&gt;<br>&gt; As syntactic sugar, the filtering syntax is rarely used, hard to discover,<br>&gt; and elevates one style (continue if false) above others (continue if false,<br>&gt; break if true, break if false), which are not expressible using similar<br>&gt; shorthand. It introduces a fluent style that discourages design comments at<br>&gt; the point of use and can be difficult to breakpoint during debugging. The<br>&gt; recommended alternative (using a separate guard) addresses all these<br>&gt; points: better commenting, better breakpointing and debugging, and fully<br>&gt; covers the domain of filtering and early exiting.<br>&gt;<br>&gt; In response, I&#39;d like to hear why &quot;continue if false&quot; should be<br>&gt; prioritized above the other options and should be retained, or<br>&gt; alternatively why the suite should be completed (as in the original<br>&gt; discussion with &quot;while&quot;) in preference to the advantages accrued by guard.<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -- Erica<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/e2744d26/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/36603be464733b58cc53cecd480eeae8?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>let var go</string> &lt;letvargo at gmail.com&gt;<p>June 13, 2016 at 06:00:00pm</p></header><div class="content"><p>On Mon, Jun 13, 2016 at 8:54 AM Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Jun 13, 2016, at 9:44 AM, let var go via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I think we must be reading different discussions.<br>&gt;<br>&gt; What I have seen in this discussion is the following:<br>&gt;<br>&gt; a) The need to filter a for-in loop doesn&#39;t arise that often; but,<br>&gt; b) When it does arise, everyone who has chimed in on this thread (except<br>&gt; the two people who are proposing the change) thinks that the &quot;where&quot; clause<br>&gt; is the clearest, most expressive way to do it.<br>&gt;<br>&gt;<br>&gt; As a point of order, may I request you stop singling out &quot;the two people<br>&gt; who are proposing the change&quot; and discuss the merits of the pitch rather<br>&gt; than the people involved in the discussion. Details of the Swift community<br>&gt; code of conduct can be found here:<br>&gt; https://swift.org/community/#code-of-conduct<br>&gt;<br>&gt; As syntactic sugar, the filtering syntax is rarely used, hard to discover,<br>&gt; and elevates one style (continue if false) above others (continue if false,<br>&gt; break if true, break if false), which are not expressible using similar<br>&gt; shorthand. It introduces a fluent style that discourages design comments at<br>&gt; the point of use and can be difficult to breakpoint during debugging. The<br>&gt; recommended alternative (using a separate guard) addresses all these<br>&gt; points: better commenting, better breakpointing and debugging, and fully<br>&gt; covers the domain of filtering and early exiting.<br>&gt;<br>&gt; In response, I&#39;d like to hear why &quot;continue if false&quot; should be<br>&gt; prioritized above the other options and should be retained, or<br>&gt; alternatively why the suite should be completed (as in the original<br>&gt; discussion with &quot;while&quot;) in preference to the advantages accrued by guard.<br>&gt;<br></p><p>The way you broke it down into the four different categories was helpful to<br>me - I hadn&#39;t thought of it that way before. Here&#39;s may take on it:<br></p><p><br>   - &quot;continue if false&quot;<br>   - This is the current &#39;where` keyword.<br>   - &quot;continue if true&quot;<br>      - This is the inverse of the current &#39;where&#39; option. Because it is<br>      the inverse, it doesn&#39;t need a separate keyword. You just add the logical<br>      not &#39;!&#39; to the predicate, or just reverse the test, to obtain the inverse<br>      filtering operation.<br>      - So, for example, `for string in strings where<br>      string.hasPrefix(&quot;somePrefix&quot;)` becomes `for string in strings where<br>      !string.hasPrefix(&quot;somePrefix&quot;)`; or `for x in xs where x &lt; 5`, becomes<br>      `for x in xs where x &gt;= 5`<br>      - Using a single keyword but reversing the predicate isn&#39;t the only<br>      approach but it has the advantage of not polluting the language with<br>      unnecessary keywords where a single keyword can do the job.<br>   - &quot;break if false&quot;<br>      - In this scenario, you start looping through a collection, but exit<br>      early when some condition is no longer true. It combines a for...in loop<br>      with a &#39;while&#39; loop.<br>      - This construct would allow you to set a condition for early exit<br>      from the loop. The problem I see with this is that when I need to exit a<br>      loop early, I usually need to do something else first, like<br>assign a value<br>      to a variable, or take some other action. So for example, I might do<br>      something like this:<br></p><p>var nextEvent: Event?<br>for event in events {<br>    if event.time &gt;= now  {<br>        nextEvent = event<br>        break<br>    }<br>}<br></p><p>   - The point is that before I could use &#39;break&#39;, I had to take some<br>      action (assign a value to nextEvent). So just defining an early exit<br>      condition wouldn&#39;t really work. I&#39;m trying to think of a use-case where I<br>      would want to exit early without doing anything first, and I can&#39;t. Given<br>      the appropriate use case, however, I could see a place for a keyword that<br>      did this like &#39;until&#39;, or &#39;while&#39;. Until then, though, I<br>wouldn&#39;t create a<br>      keyword for something that doesn&#39;t have a common use. Filtering with<br>      &#39;where&#39; is at least used sometimes, even if it isn&#39;t the most common<br>      pattern on the planet.<br>   - &quot;break if true&quot;<br>      - I would apply the same arguments in &quot;break if false&quot;<br></p><p>So I would say that &quot;continue if false&quot; and &quot;continue if true&quot; are<br>accomplished using the same keyword, and &quot;break if false&quot; and &quot;break if<br>true&quot; don&#39;t have demonstrated use cases that can be solved with a<br>keyword/predicate combination - early exit usually requires some additional<br>action other than just exiting which couldn&#39;t be easily baked into the<br>keyword.<br></p><p><br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -- Erica<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/71f93d81/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4ab486d7597af4cfe0be33a762150848?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Dany St-Amant</string> &lt;dsa.mls at icloud.com&gt;<p>June 13, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; Le 13 juin 2016 à 11:54, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 13, 2016, at 9:44 AM, let var go via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I think we must be reading different discussions.<br>&gt;&gt; <br>&gt;&gt; What I have seen in this discussion is the following:<br>&gt;&gt; <br>&gt;&gt; a) The need to filter a for-in loop doesn&#39;t arise that often; but,<br>&gt;&gt; b) When it does arise, everyone who has chimed in on this thread (except the two people who are proposing the change) thinks that the &quot;where&quot; clause is the clearest, most expressive way to do it.<br>&gt; <br>&gt; As a point of order, may I request you stop singling out &quot;the two people who are proposing the change&quot; and discuss the merits of the pitch rather than the people involved in the discussion. Details of the Swift community code of conduct can be found here: https://swift.org/community/#code-of-conduct<br>&gt; <br>&gt; As syntactic sugar, the filtering syntax is rarely used, hard to discover, and elevates one style (continue if false) above others (continue if false, break if true, break if false), which are not expressible using similar shorthand. It introduces a fluent style that discourages design comments at the point of use and can be difficult to breakpoint during debugging. The recommended alternative (using a separate guard) addresses all these points: better commenting, better breakpointing and debugging, and fully covers the domain of filtering and early exiting.<br></p><p>Another point about the narrowness of &#39;where&#39; beside being only for one of the four true/false continue/break cases, is that it only handle conditions at the top of the loop. Any &#39;continue&#39; required in the middle of the block (after some processing) has to be handle by the &quot;more powerful/versatile&quot; &#39;guard&#39; and/or &#39;if&#39;.<br></p><p>Also if the need arise to do something extra beside &#39;continue&#39; on the rejects, even something as simple as logging to the console, the &#39;where&#39; needs to be converted to a &#39;guard&#39; or &#39;if&#39;. <br></p><p>Beside these drawbacks, I still think &#39;where&#39; is nice to have<br></p><p>Dany<br></p><p>&gt; In response, I&#39;d like to hear why &quot;continue if false&quot; should be prioritized above the other options and should be retained, or alternatively why the suite should be completed (as in the original discussion with &quot;while&quot;) in preference to the advantages accrued by guard.<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -- Erica<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/a91d618e/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 13, 2016 at 10:00:00am</p></header><div class="content"><p>On Mon, Jun 13, 2016 at 10:44 AM, let var go &lt;letvargo at gmail.com&gt; wrote:<br></p><p>&gt; I think we must be reading different discussions.<br>&gt;<br>&gt; What I have seen in this discussion is the following:<br>&gt;<br>&gt; a) The need to filter a for-in loop doesn&#39;t arise that often; but,<br>&gt; b) When it does arise, everyone who has chimed in on this thread (except<br>&gt; the two people who are proposing the change) thinks that the &quot;where&quot; clause<br>&gt; is the clearest, most expressive way to do it.<br>&gt;<br>&gt; Something that would help me get on board with this change is more<br>&gt; evidence about what kind of problems it is actually creating.<br>&gt;<br>&gt; As best I can tell, this proposal got started because &quot;somewhere&quot; some new<br>&gt; programmers (no one knows how many) expressed some confusion (no one knows<br>&gt; how seriously they were confused, or how long it took them to figure it<br>&gt; out) about how the where clause worked in a for-in loop. For all we know,<br>&gt; once they learned the way it works, they may have said, &quot;Hey that&#39;s cool!<br>&gt; I&#39;m gonna use that from now on!&quot;<br>&gt;<br>&gt; In other words, you seem to be talking about removing a feature that is<br>&gt; liked by *a lot* people, based on some unsubstantiated reports of user<br>&gt; error that may or may not have been totally unsubstantial.<br>&gt;<br>&gt; I don&#39;t want new programmers to be confused, either, but the &quot;where&quot;<br>&gt; clause is such a basic programming construct - the keyword is new, but the<br>&gt; idea itself is as old as programming - that I don&#39;t mind expecting new<br>&gt; programmers to learn how to use it. The learning curve should be incredibly<br>&gt; short - it is nothing more than a filter operation.<br>&gt;<br>&gt; There&#39;s something else here that is really important to me, though I don&#39;t<br>&gt; know how others feel about it.<br>&gt;<br>&gt; Using the guard...continue approach that you are promoting is a code<br>&gt; smell. It puts control-flow logic inside the for-in loop. That is something<br>&gt; I have always tried to avoid. I know that the language allows for it, but I<br>&gt; believe it is bad programming practice. In fact, if you get rid of the<br>&gt; `where` keyword, I&#39;m still not going to use guard...continue. I&#39;ll just<br>&gt; filter the collection first and then loop it.<br>&gt;<br></p><p>This is quite the statement. It sounds like you&#39;d be for the elimination of<br>`continue`?<br></p><p><br>&gt;<br>&gt; It is a code smell for the same reason that messing with the index inside<br>&gt; a for;; loop was a code smell. I was always taught never to do this:<br>&gt;<br>&gt; for var i = 0; i &lt; array.count, i++ {<br>&gt;   if iWantThisToLoopAnExtraTime {<br>&gt;     i--<br>&gt;   }<br>&gt; }<br>&gt;<br>&gt; Why? Because code like that is confusing. It becomes difficult to know how<br>&gt; many times the loop will execute, what the looping logic is, etc. Sure, I<br>&gt; might get away with it most of the time, but it is bad practice and there<br>&gt; is always a better way to do what you want to do. The only thing that keeps<br>&gt; you from the better way is laziness.<br>&gt;<br>&gt; The same is true (albeit to a lesser degree) for the guard...continue. It<br>&gt; may not be as extreme, but it is still a code smell. It divides the<br>&gt; control-flow logic into two parts - one outside the loop, and one inside<br>&gt; the loop, and it suddenly becomes twice as easy to miss something.<br>&gt;<br>&gt; Using for-in-where, all of the control-flow logic is on one single line,<br>&gt; and once it is known that &quot;where&quot; operates as a filter operation, it all<br>&gt; works together in a single, harmonious statement that declares exactly what<br>&gt; is going to happen in a way that is totally unambiguous.<br>&gt;<br>&gt; So by getting rid of the &quot;where&quot; clause, I believe that you are actually<br>&gt; encouraging bad programming practice. Instead of encouraging the new user<br>&gt; to learn this very simple construct that will ultimately make their code<br>&gt; safer and more expressive without dividing their control-flow logic<br>&gt; unnecessarily into two separate parts, you are encouraging them to just &quot;do<br>&gt; what they know&quot;. I think that is terrible, and you are doing them a<br>&gt; disservice.<br>&gt;<br>&gt; And from a personal standpoint, you are telling me that I have to write<br>&gt; smelly code, even though there is this perfectly good non-smelly option<br>&gt; sitting right there, because you don&#39;t want someone else to have to learn<br>&gt; something.<br>&gt;<br>&gt; On Mon, Jun 13, 2016 at 5:29 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; I think this discussion has made it pretty plain that what is claimed to<br>&gt;&gt; be &#39;so useful&#39; is barely ever used. Moreover, it provides no independent<br>&gt;&gt; uses. The point of these pitches is to sound out arguments, not, as far as<br>&gt;&gt; I was aware, to take a vote.<br>&gt;&gt;<br>&gt;&gt; On Mon, Jun 13, 2016 at 1:54 AM Jose Cheyo Jimenez &lt;cheyo at masters3d.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; --1<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I think it would be a waste of the community&#39;s time to do a formal<br>&gt;&gt;&gt; review when only two people are in favor of this removal.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; &#39;for in where&#39; is so useful especially since we don&#39;t have for;;; loops<br>&gt;&gt;&gt; anymore. I&#39;d say leave this alone; the majority doesn&#39;t want this changed.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Jun 10, 2016, at 10:17 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use<br>&gt;&gt;&gt; it--is indicative of a key worry here: it&#39;s inessential to the language and<br>&gt;&gt;&gt; promotes dialects wherein certain people use it and others wherein they<br>&gt;&gt;&gt; don&#39;t. This is an anti-goal.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Leave it in!<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I do it<br>&gt;&gt;&gt;&gt; is because I&#39;ve decided that in the context of that piece of code it does<br>&gt;&gt;&gt;&gt; exactly what I want it to do with the maximum amount of clarity.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it<br>&gt;&gt;&gt;&gt; detracts from the language at all.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; The *only* argument that I have heard for removing it is that some<br>&gt;&gt;&gt;&gt; people don&#39;t immediately intuit how to use it. I didn&#39;t have any trouble<br>&gt;&gt;&gt;&gt; with it at all. It follows one of the most basic programming patterns ever:<br>&gt;&gt;&gt;&gt; &quot;For all x in X, if predicate P is true, do something.&quot; The use of the<br>&gt;&gt;&gt;&gt; keyword &quot;where&quot; makes perfect sense in that context, and when I read it out<br>&gt;&gt;&gt;&gt; loud, it sounds natural: &quot;For all x in X where P, do something.&quot; That is an<br>&gt;&gt;&gt;&gt; elegant, succinct, and clear way of stating exactly what I want my program<br>&gt;&gt;&gt;&gt; to do.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I don&#39;t doubt that it has caused some confusion for some people, but<br>&gt;&gt;&gt;&gt; I&#39;m not sold that that is a good enough reason to get rid of it. It seems<br>&gt;&gt;&gt;&gt; strange to get rid of a tool because not everyone understands how to use it<br>&gt;&gt;&gt;&gt; immediately, without ever having to ask a single question. As long as its<br>&gt;&gt;&gt;&gt; not a dangerous tool (and it isn&#39;t), then keep it in the workshop for those<br>&gt;&gt;&gt;&gt; times when it comes in handy. And even if there is some initial confusion,<br>&gt;&gt;&gt;&gt; it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does this work<br>&gt;&gt;&gt;&gt; like X, or does this work like Y? Let&#39;s see...oh, it works like X. Ok.&quot;<br>&gt;&gt;&gt;&gt; That&#39;s the entire learning curve...about 5 seconds of curiosity followed by<br>&gt;&gt;&gt;&gt; the blissful feeling of resolution.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party<br>&gt;&gt;&gt;&gt;&gt;&gt; Swift Repos&quot; folder and did the same search. Among the 15 repos in that<br>&gt;&gt;&gt;&gt;&gt;&gt; folder, a joint search returned about 650 hits on for-in (again with some<br>&gt;&gt;&gt;&gt;&gt;&gt; false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Weird. My own Swift projects (not on Github :P) use “where” all the<br>&gt;&gt;&gt;&gt;&gt;&gt; time with for loops. I really like it and think it reads *and* writes far<br>&gt;&gt;&gt;&gt;&gt;&gt; better as well as makes for nicer one-liners. In one project, by rough<br>&gt;&gt;&gt;&gt;&gt;&gt; count, I have about 20 that use “where” vs. 40 in that same project not<br>&gt;&gt;&gt;&gt;&gt;&gt; using “where”.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; In another smaller test project, there are only 10 for loops, but<br>&gt;&gt;&gt;&gt;&gt;&gt; even so one still managed to use where.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Not a lot of data without looking at even more projects, I admit, but<br>&gt;&gt;&gt;&gt;&gt;&gt; this seems to suggest that the usage of “where” is going to be very<br>&gt;&gt;&gt;&gt;&gt;&gt; developer-dependent. Perhaps there’s some factor of prior background at<br>&gt;&gt;&gt;&gt;&gt;&gt; work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; That is worrying if true, because it suggests that it&#39;s enabling<br>&gt;&gt;&gt;&gt;&gt; &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; I feel like “where” is a more declarative construct and that we<br>&gt;&gt;&gt;&gt;&gt;&gt; should be encouraging that way of thinking in general. When using it, it<br>&gt;&gt;&gt;&gt;&gt;&gt; feels like “magic” for some reason - even though there’s nothing special<br>&gt;&gt;&gt;&gt;&gt;&gt; about it. It feels like I’ve made the language work *for me* a little bit<br>&gt;&gt;&gt;&gt;&gt;&gt; rather than me having to contort my solution to the will of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt; This may be highly subjective.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/92d5eb79/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 13, 2016 at 04:00:00pm</p></header><div class="content"><p>Moreover, I should add, if your goal is to eliminate the possibility of<br>continuing and breaking from inside the loop, `.forEach()` does that<br>exactly, so your argument would be for the elimination of `for..in`<br>altogether.<br></p><p>On Mon, Jun 13, 2016 at 10:55 Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br></p><p>&gt; On Mon, Jun 13, 2016 at 10:44 AM, let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; I think we must be reading different discussions.<br>&gt;&gt;<br>&gt;&gt; What I have seen in this discussion is the following:<br>&gt;&gt;<br>&gt;&gt; a) The need to filter a for-in loop doesn&#39;t arise that often; but,<br>&gt;&gt; b) When it does arise, everyone who has chimed in on this thread (except<br>&gt;&gt; the two people who are proposing the change) thinks that the &quot;where&quot; clause<br>&gt;&gt; is the clearest, most expressive way to do it.<br>&gt;&gt;<br>&gt;&gt; Something that would help me get on board with this change is more<br>&gt;&gt; evidence about what kind of problems it is actually creating.<br>&gt;&gt;<br>&gt;&gt; As best I can tell, this proposal got started because &quot;somewhere&quot; some<br>&gt;&gt; new programmers (no one knows how many) expressed some confusion (no one<br>&gt;&gt; knows how seriously they were confused, or how long it took them to figure<br>&gt;&gt; it out) about how the where clause worked in a for-in loop. For all we<br>&gt;&gt; know, once they learned the way it works, they may have said, &quot;Hey that&#39;s<br>&gt;&gt; cool! I&#39;m gonna use that from now on!&quot;<br>&gt;&gt;<br>&gt;&gt; In other words, you seem to be talking about removing a feature that is<br>&gt;&gt; liked by *a lot* people, based on some unsubstantiated reports of user<br>&gt;&gt; error that may or may not have been totally unsubstantial.<br>&gt;&gt;<br>&gt;&gt; I don&#39;t want new programmers to be confused, either, but the &quot;where&quot;<br>&gt;&gt; clause is such a basic programming construct - the keyword is new, but the<br>&gt;&gt; idea itself is as old as programming - that I don&#39;t mind expecting new<br>&gt;&gt; programmers to learn how to use it. The learning curve should be incredibly<br>&gt;&gt; short - it is nothing more than a filter operation.<br>&gt;&gt;<br>&gt;&gt; There&#39;s something else here that is really important to me, though I<br>&gt;&gt; don&#39;t know how others feel about it.<br>&gt;&gt;<br>&gt;&gt; Using the guard...continue approach that you are promoting is a code<br>&gt;&gt; smell. It puts control-flow logic inside the for-in loop. That is something<br>&gt;&gt; I have always tried to avoid. I know that the language allows for it, but I<br>&gt;&gt; believe it is bad programming practice. In fact, if you get rid of the<br>&gt;&gt; `where` keyword, I&#39;m still not going to use guard...continue. I&#39;ll just<br>&gt;&gt; filter the collection first and then loop it.<br>&gt;&gt;<br>&gt;<br>&gt; This is quite the statement. It sounds like you&#39;d be for the elimination<br>&gt; of `continue`?<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; It is a code smell for the same reason that messing with the index inside<br>&gt;&gt; a for;; loop was a code smell. I was always taught never to do this:<br>&gt;&gt;<br>&gt;&gt; for var i = 0; i &lt; array.count, i++ {<br>&gt;&gt;   if iWantThisToLoopAnExtraTime {<br>&gt;&gt;     i--<br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; Why? Because code like that is confusing. It becomes difficult to know<br>&gt;&gt; how many times the loop will execute, what the looping logic is, etc. Sure,<br>&gt;&gt; I might get away with it most of the time, but it is bad practice and there<br>&gt;&gt; is always a better way to do what you want to do. The only thing that keeps<br>&gt;&gt; you from the better way is laziness.<br>&gt;&gt;<br>&gt;&gt; The same is true (albeit to a lesser degree) for the guard...continue. It<br>&gt;&gt; may not be as extreme, but it is still a code smell. It divides the<br>&gt;&gt; control-flow logic into two parts - one outside the loop, and one inside<br>&gt;&gt; the loop, and it suddenly becomes twice as easy to miss something.<br>&gt;&gt;<br>&gt;&gt; Using for-in-where, all of the control-flow logic is on one single line,<br>&gt;&gt; and once it is known that &quot;where&quot; operates as a filter operation, it all<br>&gt;&gt; works together in a single, harmonious statement that declares exactly what<br>&gt;&gt; is going to happen in a way that is totally unambiguous.<br>&gt;&gt;<br>&gt;&gt; So by getting rid of the &quot;where&quot; clause, I believe that you are actually<br>&gt;&gt; encouraging bad programming practice. Instead of encouraging the new user<br>&gt;&gt; to learn this very simple construct that will ultimately make their code<br>&gt;&gt; safer and more expressive without dividing their control-flow logic<br>&gt;&gt; unnecessarily into two separate parts, you are encouraging them to just &quot;do<br>&gt;&gt; what they know&quot;. I think that is terrible, and you are doing them a<br>&gt;&gt; disservice.<br>&gt;&gt;<br>&gt;&gt; And from a personal standpoint, you are telling me that I have to write<br>&gt;&gt; smelly code, even though there is this perfectly good non-smelly option<br>&gt;&gt; sitting right there, because you don&#39;t want someone else to have to learn<br>&gt;&gt; something.<br>&gt;&gt;<br>&gt;&gt; On Mon, Jun 13, 2016 at 5:29 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; I think this discussion has made it pretty plain that what is claimed to<br>&gt;&gt;&gt; be &#39;so useful&#39; is barely ever used. Moreover, it provides no independent<br>&gt;&gt;&gt; uses. The point of these pitches is to sound out arguments, not, as far as<br>&gt;&gt;&gt; I was aware, to take a vote.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Mon, Jun 13, 2016 at 1:54 AM Jose Cheyo Jimenez &lt;cheyo at masters3d.com&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; --1<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I think it would be a waste of the community&#39;s time to do a formal<br>&gt;&gt;&gt;&gt; review when only two people are in favor of this removal.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &#39;for in where&#39; is so useful especially since we don&#39;t have for;;; loops<br>&gt;&gt;&gt;&gt; anymore. I&#39;d say leave this alone; the majority doesn&#39;t want this changed.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Jun 10, 2016, at 10:17 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use<br>&gt;&gt;&gt;&gt; it--is indicative of a key worry here: it&#39;s inessential to the language and<br>&gt;&gt;&gt;&gt; promotes dialects wherein certain people use it and others wherein they<br>&gt;&gt;&gt;&gt; don&#39;t. This is an anti-goal.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Leave it in!<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I do it<br>&gt;&gt;&gt;&gt;&gt; is because I&#39;ve decided that in the context of that piece of code it does<br>&gt;&gt;&gt;&gt;&gt; exactly what I want it to do with the maximum amount of clarity.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it<br>&gt;&gt;&gt;&gt;&gt; detracts from the language at all.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; The *only* argument that I have heard for removing it is that some<br>&gt;&gt;&gt;&gt;&gt; people don&#39;t immediately intuit how to use it. I didn&#39;t have any trouble<br>&gt;&gt;&gt;&gt;&gt; with it at all. It follows one of the most basic programming patterns ever:<br>&gt;&gt;&gt;&gt;&gt; &quot;For all x in X, if predicate P is true, do something.&quot; The use of the<br>&gt;&gt;&gt;&gt;&gt; keyword &quot;where&quot; makes perfect sense in that context, and when I read it out<br>&gt;&gt;&gt;&gt;&gt; loud, it sounds natural: &quot;For all x in X where P, do something.&quot; That is an<br>&gt;&gt;&gt;&gt;&gt; elegant, succinct, and clear way of stating exactly what I want my program<br>&gt;&gt;&gt;&gt;&gt; to do.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I don&#39;t doubt that it has caused some confusion for some people, but<br>&gt;&gt;&gt;&gt;&gt; I&#39;m not sold that that is a good enough reason to get rid of it. It seems<br>&gt;&gt;&gt;&gt;&gt; strange to get rid of a tool because not everyone understands how to use it<br>&gt;&gt;&gt;&gt;&gt; immediately, without ever having to ask a single question. As long as its<br>&gt;&gt;&gt;&gt;&gt; not a dangerous tool (and it isn&#39;t), then keep it in the workshop for those<br>&gt;&gt;&gt;&gt;&gt; times when it comes in handy. And even if there is some initial confusion,<br>&gt;&gt;&gt;&gt;&gt; it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does this work<br>&gt;&gt;&gt;&gt;&gt; like X, or does this work like Y? Let&#39;s see...oh, it works like X. Ok.&quot;<br>&gt;&gt;&gt;&gt;&gt; That&#39;s the entire learning curve...about 5 seconds of curiosity followed by<br>&gt;&gt;&gt;&gt;&gt; the blissful feeling of resolution.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Swift Repos&quot; folder and did the same search. Among the 15 repos in that<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; folder, a joint search returned about 650 hits on for-in (again with some<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Weird. My own Swift projects (not on Github :P) use “where” all the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; time with for loops. I really like it and think it reads *and* writes far<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; better as well as makes for nicer one-liners. In one project, by rough<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; count, I have about 20 that use “where” vs. 40 in that same project not<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; using “where”.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; In another smaller test project, there are only 10 for loops, but<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; even so one still managed to use where.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Not a lot of data without looking at even more projects, I admit,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; but this seems to suggest that the usage of “where” is going to be very<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; developer-dependent. Perhaps there’s some factor of prior background at<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; That is worrying if true, because it suggests that it&#39;s enabling<br>&gt;&gt;&gt;&gt;&gt;&gt; &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I feel like “where” is a more declarative construct and that we<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; should be encouraging that way of thinking in general. When using it, it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; feels like “magic” for some reason - even though there’s nothing special<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; about it. It feels like I’ve made the language work *for me* a little bit<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; rather than me having to contort my solution to the will of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; This may be highly subjective.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/378e6276/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/36603be464733b58cc53cecd480eeae8?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>let var go</string> &lt;letvargo at gmail.com&gt;<p>June 13, 2016 at 04:00:00pm</p></header><div class="content"><p>On Mon, Jun 13, 2016 at 9:04 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br></p><p>&gt; Moreover, I should add, if your goal is to eliminate the possibility of<br>&gt; continuing and breaking from inside the loop, `.forEach()` does that<br>&gt; exactly, so your argument would be for the elimination of `for..in`<br>&gt; altogether.<br>&gt;<br></p><p>I have no &quot;goal&quot; of eliminating the possibility of continuing or breaking<br>from inside the loop. In general, it is not my goal to try and control how<br>other people code their programs at all. I don&#39;t want to tell you that you<br>can&#39;t &#39;continue&#39; if you want to &#39;continue.&#39;<br></p><p>*I am not trying to make everyone adopt my own personal coding style and/or<br>philosophy.*<br></p><p>There is also a big difference between &#39;break&#39; and &#39;continue&#39;. I am not<br>afraid to use &#39;break&#39;, and I don&#39;t consider it a code smell. It allows for<br>early exit from a loop based on conditions that are not always known at the<br>time the loop is entered. for...in loops are necessary precisely because<br>they allow for the early exit.<br></p><p>You don&#39;t need for...in if you want to continue - you can use forEach for<br>that. Instead of using &#39;continue&#39;, you just use &#39;return&#39; without doing<br>anything and it moves on to the next iteration. So really, the only purpose<br>that for...in serves that is not served by forEach is early exit. But<br>regardless, *even if for...in served no additional purpose that couldn&#39;t be<br>served by forEach, I would keep it in the language because there are<br>situations where I believe it is easier to read, and expressiveness and<br>clarity are important to me.*<br></p><p><br>&gt;<br>&gt; On Mon, Jun 13, 2016 at 10:55 Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; On Mon, Jun 13, 2016 at 10:44 AM, let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; I think we must be reading different discussions.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; What I have seen in this discussion is the following:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; a) The need to filter a for-in loop doesn&#39;t arise that often; but,<br>&gt;&gt;&gt; b) When it does arise, everyone who has chimed in on this thread (except<br>&gt;&gt;&gt; the two people who are proposing the change) thinks that the &quot;where&quot; clause<br>&gt;&gt;&gt; is the clearest, most expressive way to do it.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Something that would help me get on board with this change is more<br>&gt;&gt;&gt; evidence about what kind of problems it is actually creating.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; As best I can tell, this proposal got started because &quot;somewhere&quot; some<br>&gt;&gt;&gt; new programmers (no one knows how many) expressed some confusion (no one<br>&gt;&gt;&gt; knows how seriously they were confused, or how long it took them to figure<br>&gt;&gt;&gt; it out) about how the where clause worked in a for-in loop. For all we<br>&gt;&gt;&gt; know, once they learned the way it works, they may have said, &quot;Hey that&#39;s<br>&gt;&gt;&gt; cool! I&#39;m gonna use that from now on!&quot;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; In other words, you seem to be talking about removing a feature that is<br>&gt;&gt;&gt; liked by *a lot* people, based on some unsubstantiated reports of user<br>&gt;&gt;&gt; error that may or may not have been totally unsubstantial.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I don&#39;t want new programmers to be confused, either, but the &quot;where&quot;<br>&gt;&gt;&gt; clause is such a basic programming construct - the keyword is new, but the<br>&gt;&gt;&gt; idea itself is as old as programming - that I don&#39;t mind expecting new<br>&gt;&gt;&gt; programmers to learn how to use it. The learning curve should be incredibly<br>&gt;&gt;&gt; short - it is nothing more than a filter operation.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; There&#39;s something else here that is really important to me, though I<br>&gt;&gt;&gt; don&#39;t know how others feel about it.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Using the guard...continue approach that you are promoting is a code<br>&gt;&gt;&gt; smell. It puts control-flow logic inside the for-in loop. That is something<br>&gt;&gt;&gt; I have always tried to avoid. I know that the language allows for it, but I<br>&gt;&gt;&gt; believe it is bad programming practice. In fact, if you get rid of the<br>&gt;&gt;&gt; `where` keyword, I&#39;m still not going to use guard...continue. I&#39;ll just<br>&gt;&gt;&gt; filter the collection first and then loop it.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; This is quite the statement. It sounds like you&#39;d be for the elimination<br>&gt;&gt; of `continue`?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It is a code smell for the same reason that messing with the index<br>&gt;&gt;&gt; inside a for;; loop was a code smell. I was always taught never to do this:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; for var i = 0; i &lt; array.count, i++ {<br>&gt;&gt;&gt;   if iWantThisToLoopAnExtraTime {<br>&gt;&gt;&gt;     i--<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Why? Because code like that is confusing. It becomes difficult to know<br>&gt;&gt;&gt; how many times the loop will execute, what the looping logic is, etc. Sure,<br>&gt;&gt;&gt; I might get away with it most of the time, but it is bad practice and there<br>&gt;&gt;&gt; is always a better way to do what you want to do. The only thing that keeps<br>&gt;&gt;&gt; you from the better way is laziness.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The same is true (albeit to a lesser degree) for the guard...continue.<br>&gt;&gt;&gt; It may not be as extreme, but it is still a code smell. It divides the<br>&gt;&gt;&gt; control-flow logic into two parts - one outside the loop, and one inside<br>&gt;&gt;&gt; the loop, and it suddenly becomes twice as easy to miss something.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Using for-in-where, all of the control-flow logic is on one single line,<br>&gt;&gt;&gt; and once it is known that &quot;where&quot; operates as a filter operation, it all<br>&gt;&gt;&gt; works together in a single, harmonious statement that declares exactly what<br>&gt;&gt;&gt; is going to happen in a way that is totally unambiguous.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; So by getting rid of the &quot;where&quot; clause, I believe that you are actually<br>&gt;&gt;&gt; encouraging bad programming practice. Instead of encouraging the new user<br>&gt;&gt;&gt; to learn this very simple construct that will ultimately make their code<br>&gt;&gt;&gt; safer and more expressive without dividing their control-flow logic<br>&gt;&gt;&gt; unnecessarily into two separate parts, you are encouraging them to just &quot;do<br>&gt;&gt;&gt; what they know&quot;. I think that is terrible, and you are doing them a<br>&gt;&gt;&gt; disservice.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; And from a personal standpoint, you are telling me that I have to write<br>&gt;&gt;&gt; smelly code, even though there is this perfectly good non-smelly option<br>&gt;&gt;&gt; sitting right there, because you don&#39;t want someone else to have to learn<br>&gt;&gt;&gt; something.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Mon, Jun 13, 2016 at 5:29 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I think this discussion has made it pretty plain that what is claimed<br>&gt;&gt;&gt;&gt; to be &#39;so useful&#39; is barely ever used. Moreover, it provides no independent<br>&gt;&gt;&gt;&gt; uses. The point of these pitches is to sound out arguments, not, as far as<br>&gt;&gt;&gt;&gt; I was aware, to take a vote.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 1:54 AM Jose Cheyo Jimenez &lt;cheyo at masters3d.com&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; --1<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I think it would be a waste of the community&#39;s time to do a formal<br>&gt;&gt;&gt;&gt;&gt; review when only two people are in favor of this removal.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &#39;for in where&#39; is so useful especially since we don&#39;t have for;;;<br>&gt;&gt;&gt;&gt;&gt; loops anymore. I&#39;d say leave this alone; the majority doesn&#39;t want this<br>&gt;&gt;&gt;&gt;&gt; changed.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Jun 10, 2016, at 10:17 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use<br>&gt;&gt;&gt;&gt;&gt; it--is indicative of a key worry here: it&#39;s inessential to the language and<br>&gt;&gt;&gt;&gt;&gt; promotes dialects wherein certain people use it and others wherein they<br>&gt;&gt;&gt;&gt;&gt; don&#39;t. This is an anti-goal.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Leave it in!<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I do it<br>&gt;&gt;&gt;&gt;&gt;&gt; is because I&#39;ve decided that in the context of that piece of code it does<br>&gt;&gt;&gt;&gt;&gt;&gt; exactly what I want it to do with the maximum amount of clarity.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it<br>&gt;&gt;&gt;&gt;&gt;&gt; detracts from the language at all.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; The *only* argument that I have heard for removing it is that some<br>&gt;&gt;&gt;&gt;&gt;&gt; people don&#39;t immediately intuit how to use it. I didn&#39;t have any trouble<br>&gt;&gt;&gt;&gt;&gt;&gt; with it at all. It follows one of the most basic programming patterns ever:<br>&gt;&gt;&gt;&gt;&gt;&gt; &quot;For all x in X, if predicate P is true, do something.&quot; The use of the<br>&gt;&gt;&gt;&gt;&gt;&gt; keyword &quot;where&quot; makes perfect sense in that context, and when I read it out<br>&gt;&gt;&gt;&gt;&gt;&gt; loud, it sounds natural: &quot;For all x in X where P, do something.&quot; That is an<br>&gt;&gt;&gt;&gt;&gt;&gt; elegant, succinct, and clear way of stating exactly what I want my program<br>&gt;&gt;&gt;&gt;&gt;&gt; to do.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t doubt that it has caused some confusion for some people, but<br>&gt;&gt;&gt;&gt;&gt;&gt; I&#39;m not sold that that is a good enough reason to get rid of it. It seems<br>&gt;&gt;&gt;&gt;&gt;&gt; strange to get rid of a tool because not everyone understands how to use it<br>&gt;&gt;&gt;&gt;&gt;&gt; immediately, without ever having to ask a single question. As long as its<br>&gt;&gt;&gt;&gt;&gt;&gt; not a dangerous tool (and it isn&#39;t), then keep it in the workshop for those<br>&gt;&gt;&gt;&gt;&gt;&gt; times when it comes in handy. And even if there is some initial confusion,<br>&gt;&gt;&gt;&gt;&gt;&gt; it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does this work<br>&gt;&gt;&gt;&gt;&gt;&gt; like X, or does this work like Y? Let&#39;s see...oh, it works like X. Ok.&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt; That&#39;s the entire learning curve...about 5 seconds of curiosity followed by<br>&gt;&gt;&gt;&gt;&gt;&gt; the blissful feeling of resolution.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Swift Repos&quot; folder and did the same search. Among the 15 repos in that<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; folder, a joint search returned about 650 hits on for-in (again with some<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Weird. My own Swift projects (not on Github :P) use “where” all the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; time with for loops. I really like it and think it reads *and* writes far<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; better as well as makes for nicer one-liners. In one project, by rough<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; count, I have about 20 that use “where” vs. 40 in that same project not<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; using “where”.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; In another smaller test project, there are only 10 for loops, but<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; even so one still managed to use where.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Not a lot of data without looking at even more projects, I admit,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; but this seems to suggest that the usage of “where” is going to be very<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; developer-dependent. Perhaps there’s some factor of prior background at<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; That is worrying if true, because it suggests that it&#39;s enabling<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I feel like “where” is a more declarative construct and that we<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; should be encouraging that way of thinking in general. When using it, it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; feels like “magic” for some reason - even though there’s nothing special<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; about it. It feels like I’ve made the language work *for me* a little bit<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; rather than me having to contort my solution to the will of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This may be highly subjective.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/6f84bf53/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 13, 2016 at 11:00:00am</p></header><div class="content"><p>On Mon, Jun 13, 2016 at 11:41 AM, let var go &lt;letvargo at gmail.com&gt; wrote:<br></p><p>&gt;<br>&gt;<br>&gt; On Mon, Jun 13, 2016 at 9:04 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; Moreover, I should add, if your goal is to eliminate the possibility of<br>&gt;&gt; continuing and breaking from inside the loop, `.forEach()` does that<br>&gt;&gt; exactly, so your argument would be for the elimination of `for..in`<br>&gt;&gt; altogether.<br>&gt;&gt;<br>&gt;<br>&gt; I have no &quot;goal&quot; of eliminating the possibility of continuing or breaking<br>&gt; from inside the loop. In general, it is not my goal to try and control how<br>&gt; other people code their programs at all. I don&#39;t want to tell you that you<br>&gt; can&#39;t &#39;continue&#39; if you want to &#39;continue.&#39;<br>&gt;<br>&gt; *I am not trying to make everyone adopt my own personal coding style<br>&gt; and/or philosophy.*<br>&gt;<br></p><p>We&#39;re not discussing style. You made a very strong claim: use of<br>`guard...continue` leads to &#39;smelly&#39; code, or in other words bad code. In<br>other words, you claim that `guard...continue` is harmful. That is grounds<br>for removal, and if you believe it to be true, I encourage you to propose<br>it to the list and get feedback on that opinion.<br></p><p>If you&#39;re saying that you simply don&#39;t prefer it for reasons of &#39;style,&#39;<br>again I emphasize that the topic at hand here is not about personal coding<br>style. The claim we are making is that `where` is harmful. I too like it<br>for style, and I&#39;ll be sad to see it go. But I have concluded that it must<br>go.<br></p><p><br>&gt; There is also a big difference between &#39;break&#39; and &#39;continue&#39;. I am not<br>&gt; afraid to use &#39;break&#39;, and I don&#39;t consider it a code smell. It allows for<br>&gt; early exit from a loop based on conditions that are not always known at the<br>&gt; time the loop is entered. for...in loops are necessary precisely because<br>&gt; they allow for the early exit.<br>&gt;<br>&gt; You don&#39;t need for...in if you want to continue - you can use forEach for<br>&gt; that. Instead of using &#39;continue&#39;, you just use &#39;return&#39; without doing<br>&gt; anything and it moves on to the next iteration. So really, the only purpose<br>&gt; that for...in serves that is not served by forEach is early exit. But<br>&gt; regardless, *even if for...in served no additional purpose that couldn&#39;t<br>&gt; be served by forEach, I would keep it in the language because there are<br>&gt; situations where I believe it is easier to read, and expressiveness and<br>&gt; clarity are important to me.*<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Mon, Jun 13, 2016 at 10:55 Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; On Mon, Jun 13, 2016 at 10:44 AM, let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I think we must be reading different discussions.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; What I have seen in this discussion is the following:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; a) The need to filter a for-in loop doesn&#39;t arise that often; but,<br>&gt;&gt;&gt;&gt; b) When it does arise, everyone who has chimed in on this thread<br>&gt;&gt;&gt;&gt; (except the two people who are proposing the change) thinks that the<br>&gt;&gt;&gt;&gt; &quot;where&quot; clause is the clearest, most expressive way to do it.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Something that would help me get on board with this change is more<br>&gt;&gt;&gt;&gt; evidence about what kind of problems it is actually creating.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; As best I can tell, this proposal got started because &quot;somewhere&quot; some<br>&gt;&gt;&gt;&gt; new programmers (no one knows how many) expressed some confusion (no one<br>&gt;&gt;&gt;&gt; knows how seriously they were confused, or how long it took them to figure<br>&gt;&gt;&gt;&gt; it out) about how the where clause worked in a for-in loop. For all we<br>&gt;&gt;&gt;&gt; know, once they learned the way it works, they may have said, &quot;Hey that&#39;s<br>&gt;&gt;&gt;&gt; cool! I&#39;m gonna use that from now on!&quot;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; In other words, you seem to be talking about removing a feature that is<br>&gt;&gt;&gt;&gt; liked by *a lot* people, based on some unsubstantiated reports of user<br>&gt;&gt;&gt;&gt; error that may or may not have been totally unsubstantial.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I don&#39;t want new programmers to be confused, either, but the &quot;where&quot;<br>&gt;&gt;&gt;&gt; clause is such a basic programming construct - the keyword is new, but the<br>&gt;&gt;&gt;&gt; idea itself is as old as programming - that I don&#39;t mind expecting new<br>&gt;&gt;&gt;&gt; programmers to learn how to use it. The learning curve should be incredibly<br>&gt;&gt;&gt;&gt; short - it is nothing more than a filter operation.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; There&#39;s something else here that is really important to me, though I<br>&gt;&gt;&gt;&gt; don&#39;t know how others feel about it.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Using the guard...continue approach that you are promoting is a code<br>&gt;&gt;&gt;&gt; smell. It puts control-flow logic inside the for-in loop. That is something<br>&gt;&gt;&gt;&gt; I have always tried to avoid. I know that the language allows for it, but I<br>&gt;&gt;&gt;&gt; believe it is bad programming practice. In fact, if you get rid of the<br>&gt;&gt;&gt;&gt; `where` keyword, I&#39;m still not going to use guard...continue. I&#39;ll just<br>&gt;&gt;&gt;&gt; filter the collection first and then loop it.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This is quite the statement. It sounds like you&#39;d be for the elimination<br>&gt;&gt;&gt; of `continue`?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; It is a code smell for the same reason that messing with the index<br>&gt;&gt;&gt;&gt; inside a for;; loop was a code smell. I was always taught never to do this:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; for var i = 0; i &lt; array.count, i++ {<br>&gt;&gt;&gt;&gt;   if iWantThisToLoopAnExtraTime {<br>&gt;&gt;&gt;&gt;     i--<br>&gt;&gt;&gt;&gt;   }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Why? Because code like that is confusing. It becomes difficult to know<br>&gt;&gt;&gt;&gt; how many times the loop will execute, what the looping logic is, etc. Sure,<br>&gt;&gt;&gt;&gt; I might get away with it most of the time, but it is bad practice and there<br>&gt;&gt;&gt;&gt; is always a better way to do what you want to do. The only thing that keeps<br>&gt;&gt;&gt;&gt; you from the better way is laziness.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; The same is true (albeit to a lesser degree) for the guard...continue.<br>&gt;&gt;&gt;&gt; It may not be as extreme, but it is still a code smell. It divides the<br>&gt;&gt;&gt;&gt; control-flow logic into two parts - one outside the loop, and one inside<br>&gt;&gt;&gt;&gt; the loop, and it suddenly becomes twice as easy to miss something.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Using for-in-where, all of the control-flow logic is on one single<br>&gt;&gt;&gt;&gt; line, and once it is known that &quot;where&quot; operates as a filter operation, it<br>&gt;&gt;&gt;&gt; all works together in a single, harmonious statement that declares exactly<br>&gt;&gt;&gt;&gt; what is going to happen in a way that is totally unambiguous.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; So by getting rid of the &quot;where&quot; clause, I believe that you are<br>&gt;&gt;&gt;&gt; actually encouraging bad programming practice. Instead of encouraging the<br>&gt;&gt;&gt;&gt; new user to learn this very simple construct that will ultimately make<br>&gt;&gt;&gt;&gt; their code safer and more expressive without dividing their control-flow<br>&gt;&gt;&gt;&gt; logic unnecessarily into two separate parts, you are encouraging them to<br>&gt;&gt;&gt;&gt; just &quot;do what they know&quot;. I think that is terrible, and you are doing them<br>&gt;&gt;&gt;&gt; a disservice.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; And from a personal standpoint, you are telling me that I have to write<br>&gt;&gt;&gt;&gt; smelly code, even though there is this perfectly good non-smelly option<br>&gt;&gt;&gt;&gt; sitting right there, because you don&#39;t want someone else to have to learn<br>&gt;&gt;&gt;&gt; something.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 5:29 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I think this discussion has made it pretty plain that what is claimed<br>&gt;&gt;&gt;&gt;&gt; to be &#39;so useful&#39; is barely ever used. Moreover, it provides no independent<br>&gt;&gt;&gt;&gt;&gt; uses. The point of these pitches is to sound out arguments, not, as far as<br>&gt;&gt;&gt;&gt;&gt; I was aware, to take a vote.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 1:54 AM Jose Cheyo Jimenez &lt;<br>&gt;&gt;&gt;&gt;&gt; cheyo at masters3d.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; --1<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; I think it would be a waste of the community&#39;s time to do a formal<br>&gt;&gt;&gt;&gt;&gt;&gt; review when only two people are in favor of this removal.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &#39;for in where&#39; is so useful especially since we don&#39;t have for;;;<br>&gt;&gt;&gt;&gt;&gt;&gt; loops anymore. I&#39;d say leave this alone; the majority doesn&#39;t want this<br>&gt;&gt;&gt;&gt;&gt;&gt; changed.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; On Jun 10, 2016, at 10:17 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use<br>&gt;&gt;&gt;&gt;&gt;&gt; it--is indicative of a key worry here: it&#39;s inessential to the language and<br>&gt;&gt;&gt;&gt;&gt;&gt; promotes dialects wherein certain people use it and others wherein they<br>&gt;&gt;&gt;&gt;&gt;&gt; don&#39;t. This is an anti-goal.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Leave it in!<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I do<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; it is because I&#39;ve decided that in the context of that piece of code it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; does exactly what I want it to do with the maximum amount of clarity.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; detracts from the language at all.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The *only* argument that I have heard for removing it is that some<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; people don&#39;t immediately intuit how to use it. I didn&#39;t have any trouble<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; with it at all. It follows one of the most basic programming patterns ever:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;For all x in X, if predicate P is true, do something.&quot; The use of the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; keyword &quot;where&quot; makes perfect sense in that context, and when I read it out<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; loud, it sounds natural: &quot;For all x in X where P, do something.&quot; That is an<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; elegant, succinct, and clear way of stating exactly what I want my program<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; to do.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t doubt that it has caused some confusion for some people, but<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I&#39;m not sold that that is a good enough reason to get rid of it. It seems<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; strange to get rid of a tool because not everyone understands how to use it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; immediately, without ever having to ask a single question. As long as its<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; not a dangerous tool (and it isn&#39;t), then keep it in the workshop for those<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; times when it comes in handy. And even if there is some initial confusion,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does this work<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; like X, or does this work like Y? Let&#39;s see...oh, it works like X. Ok.&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; That&#39;s the entire learning curve...about 5 seconds of curiosity followed by<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; the blissful feeling of resolution.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Party Swift Repos&quot; folder and did the same search. Among the 15 repos in<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that folder, a joint search returned about 650 hits on for-in (again with<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; some false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Weird. My own Swift projects (not on Github :P) use “where” all<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the time with for loops. I really like it and think it reads *and* writes<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; far better as well as makes for nicer one-liners. In one project, by rough<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; count, I have about 20 that use “where” vs. 40 in that same project not<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; using “where”.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; In another smaller test project, there are only 10 for loops, but<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; even so one still managed to use where.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Not a lot of data without looking at even more projects, I admit,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; but this seems to suggest that the usage of “where” is going to be very<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; developer-dependent. Perhaps there’s some factor of prior background at<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; That is worrying if true, because it suggests that it&#39;s enabling<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I feel like “where” is a more declarative construct and that we<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; should be encouraging that way of thinking in general. When using it, it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; feels like “magic” for some reason - even though there’s nothing special<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; about it. It feels like I’ve made the language work *for me* a little bit<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; rather than me having to contort my solution to the will of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This may be highly subjective.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/d516d8ad/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/36603be464733b58cc53cecd480eeae8?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>let var go</string> &lt;letvargo at gmail.com&gt;<p>June 13, 2016 at 05:00:00pm</p></header><div class="content"><p>On Mon, Jun 13, 2016 at 9:46 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br></p><p>&gt; On Mon, Jun 13, 2016 at 11:41 AM, let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Mon, Jun 13, 2016 at 9:04 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Moreover, I should add, if your goal is to eliminate the possibility of<br>&gt;&gt;&gt; continuing and breaking from inside the loop, `.forEach()` does that<br>&gt;&gt;&gt; exactly, so your argument would be for the elimination of `for..in`<br>&gt;&gt;&gt; altogether.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I have no &quot;goal&quot; of eliminating the possibility of continuing or breaking<br>&gt;&gt; from inside the loop. In general, it is not my goal to try and control how<br>&gt;&gt; other people code their programs at all. I don&#39;t want to tell you that you<br>&gt;&gt; can&#39;t &#39;continue&#39; if you want to &#39;continue.&#39;<br>&gt;&gt;<br>&gt;&gt; *I am not trying to make everyone adopt my own personal coding style<br>&gt;&gt; and/or philosophy.*<br>&gt;&gt;<br>&gt;<br>&gt; We&#39;re not discussing style.<br>&gt;<br></p><p>Yes, we are discussing style, and for a very simple reason: Style is<br>essential to readability and clarity.<br></p><p>When we talk about for...in...where vs. guard...continue, all we are<br>talking about is style. In terms of functionality, they do exactly the same<br>thing. In terms of style, however, *one is easier to read than the other. *<br></p><p>Some people think that guard...continue is easier to read and understand.<br>Others, like me, think that for...in...where is easier to read and<br>understand. *But that is a disagreement over style, not functionality*.<br></p><p>And here is the difficult thing about debates like this: Both sides are<br>right. What I consider to be the clearest, most readable style of coding<br>may be confusing to someone else, and vice versa. Different people find<br>different styles confusing. Not everyone learns the same way. Not everyone<br>reads the same way. Not everyone codes the same way. What is hard for me to<br>understand may be easy for you to understand.<br></p><p>So if using &#39;continue&#39; inside your for...in loops makes sense to you, and<br>it helps you understand your own code, then go for it. It&#39;s not my style,<br>not because it is &quot;unfashionable&quot;, but because it has the opposite effect<br>on me - it makes the code harder for me to understand.<br></p><p><br></p><p><br>&gt; You made a very strong claim: use of `guard...continue` leads to &#39;smelly&#39;<br>&gt; code, or in other words bad code. In other words, you claim that<br>&gt; `guard...continue` is harmful. That is grounds for removal, and if you<br>&gt; believe it to be true, I encourage you to propose it to the list and get<br>&gt; feedback on that opinion.<br>&gt;<br>&gt; If you&#39;re saying that you simply don&#39;t prefer it for reasons of &#39;style,&#39;<br>&gt; again I emphasize that the topic at hand here is not about personal coding<br>&gt; style. The claim we are making is that `where` is harmful. I too like it<br>&gt; for style, and I&#39;ll be sad to see it go. But I have concluded that it must<br>&gt; go.<br>&gt;<br>&gt;<br>&gt;&gt; There is also a big difference between &#39;break&#39; and &#39;continue&#39;. I am not<br>&gt;&gt; afraid to use &#39;break&#39;, and I don&#39;t consider it a code smell. It allows for<br>&gt;&gt; early exit from a loop based on conditions that are not always known at the<br>&gt;&gt; time the loop is entered. for...in loops are necessary precisely because<br>&gt;&gt; they allow for the early exit.<br>&gt;&gt;<br>&gt;&gt; You don&#39;t need for...in if you want to continue - you can use forEach for<br>&gt;&gt; that. Instead of using &#39;continue&#39;, you just use &#39;return&#39; without doing<br>&gt;&gt; anything and it moves on to the next iteration. So really, the only purpose<br>&gt;&gt; that for...in serves that is not served by forEach is early exit. But<br>&gt;&gt; regardless, *even if for...in served no additional purpose that couldn&#39;t<br>&gt;&gt; be served by forEach, I would keep it in the language because there are<br>&gt;&gt; situations where I believe it is easier to read, and expressiveness and<br>&gt;&gt; clarity are important to me.*<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Mon, Jun 13, 2016 at 10:55 Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 10:44 AM, let var go &lt;letvargo at gmail.com&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I think we must be reading different discussions.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; What I have seen in this discussion is the following:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; a) The need to filter a for-in loop doesn&#39;t arise that often; but,<br>&gt;&gt;&gt;&gt;&gt; b) When it does arise, everyone who has chimed in on this thread<br>&gt;&gt;&gt;&gt;&gt; (except the two people who are proposing the change) thinks that the<br>&gt;&gt;&gt;&gt;&gt; &quot;where&quot; clause is the clearest, most expressive way to do it.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Something that would help me get on board with this change is more<br>&gt;&gt;&gt;&gt;&gt; evidence about what kind of problems it is actually creating.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; As best I can tell, this proposal got started because &quot;somewhere&quot; some<br>&gt;&gt;&gt;&gt;&gt; new programmers (no one knows how many) expressed some confusion (no one<br>&gt;&gt;&gt;&gt;&gt; knows how seriously they were confused, or how long it took them to figure<br>&gt;&gt;&gt;&gt;&gt; it out) about how the where clause worked in a for-in loop. For all we<br>&gt;&gt;&gt;&gt;&gt; know, once they learned the way it works, they may have said, &quot;Hey that&#39;s<br>&gt;&gt;&gt;&gt;&gt; cool! I&#39;m gonna use that from now on!&quot;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; In other words, you seem to be talking about removing a feature that<br>&gt;&gt;&gt;&gt;&gt; is liked by *a lot* people, based on some unsubstantiated reports of user<br>&gt;&gt;&gt;&gt;&gt; error that may or may not have been totally unsubstantial.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I don&#39;t want new programmers to be confused, either, but the &quot;where&quot;<br>&gt;&gt;&gt;&gt;&gt; clause is such a basic programming construct - the keyword is new, but the<br>&gt;&gt;&gt;&gt;&gt; idea itself is as old as programming - that I don&#39;t mind expecting new<br>&gt;&gt;&gt;&gt;&gt; programmers to learn how to use it. The learning curve should be incredibly<br>&gt;&gt;&gt;&gt;&gt; short - it is nothing more than a filter operation.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; There&#39;s something else here that is really important to me, though I<br>&gt;&gt;&gt;&gt;&gt; don&#39;t know how others feel about it.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Using the guard...continue approach that you are promoting is a code<br>&gt;&gt;&gt;&gt;&gt; smell. It puts control-flow logic inside the for-in loop. That is something<br>&gt;&gt;&gt;&gt;&gt; I have always tried to avoid. I know that the language allows for it, but I<br>&gt;&gt;&gt;&gt;&gt; believe it is bad programming practice. In fact, if you get rid of the<br>&gt;&gt;&gt;&gt;&gt; `where` keyword, I&#39;m still not going to use guard...continue. I&#39;ll just<br>&gt;&gt;&gt;&gt;&gt; filter the collection first and then loop it.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; This is quite the statement. It sounds like you&#39;d be for the<br>&gt;&gt;&gt;&gt; elimination of `continue`?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; It is a code smell for the same reason that messing with the index<br>&gt;&gt;&gt;&gt;&gt; inside a for;; loop was a code smell. I was always taught never to do this:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; for var i = 0; i &lt; array.count, i++ {<br>&gt;&gt;&gt;&gt;&gt;   if iWantThisToLoopAnExtraTime {<br>&gt;&gt;&gt;&gt;&gt;     i--<br>&gt;&gt;&gt;&gt;&gt;   }<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Why? Because code like that is confusing. It becomes difficult to know<br>&gt;&gt;&gt;&gt;&gt; how many times the loop will execute, what the looping logic is, etc. Sure,<br>&gt;&gt;&gt;&gt;&gt; I might get away with it most of the time, but it is bad practice and there<br>&gt;&gt;&gt;&gt;&gt; is always a better way to do what you want to do. The only thing that keeps<br>&gt;&gt;&gt;&gt;&gt; you from the better way is laziness.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; The same is true (albeit to a lesser degree) for the guard...continue.<br>&gt;&gt;&gt;&gt;&gt; It may not be as extreme, but it is still a code smell. It divides the<br>&gt;&gt;&gt;&gt;&gt; control-flow logic into two parts - one outside the loop, and one inside<br>&gt;&gt;&gt;&gt;&gt; the loop, and it suddenly becomes twice as easy to miss something.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Using for-in-where, all of the control-flow logic is on one single<br>&gt;&gt;&gt;&gt;&gt; line, and once it is known that &quot;where&quot; operates as a filter operation, it<br>&gt;&gt;&gt;&gt;&gt; all works together in a single, harmonious statement that declares exactly<br>&gt;&gt;&gt;&gt;&gt; what is going to happen in a way that is totally unambiguous.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; So by getting rid of the &quot;where&quot; clause, I believe that you are<br>&gt;&gt;&gt;&gt;&gt; actually encouraging bad programming practice. Instead of encouraging the<br>&gt;&gt;&gt;&gt;&gt; new user to learn this very simple construct that will ultimately make<br>&gt;&gt;&gt;&gt;&gt; their code safer and more expressive without dividing their control-flow<br>&gt;&gt;&gt;&gt;&gt; logic unnecessarily into two separate parts, you are encouraging them to<br>&gt;&gt;&gt;&gt;&gt; just &quot;do what they know&quot;. I think that is terrible, and you are doing them<br>&gt;&gt;&gt;&gt;&gt; a disservice.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; And from a personal standpoint, you are telling me that I have to<br>&gt;&gt;&gt;&gt;&gt; write smelly code, even though there is this perfectly good non-smelly<br>&gt;&gt;&gt;&gt;&gt; option sitting right there, because you don&#39;t want someone else to have to<br>&gt;&gt;&gt;&gt;&gt; learn something.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 5:29 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; I think this discussion has made it pretty plain that what is claimed<br>&gt;&gt;&gt;&gt;&gt;&gt; to be &#39;so useful&#39; is barely ever used. Moreover, it provides no independent<br>&gt;&gt;&gt;&gt;&gt;&gt; uses. The point of these pitches is to sound out arguments, not, as far as<br>&gt;&gt;&gt;&gt;&gt;&gt; I was aware, to take a vote.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 1:54 AM Jose Cheyo Jimenez &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt; cheyo at masters3d.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; --1<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think it would be a waste of the community&#39;s time to do a formal<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; review when only two people are in favor of this removal.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#39;for in where&#39; is so useful especially since we don&#39;t have for;;;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; loops anymore. I&#39;d say leave this alone; the majority doesn&#39;t want this<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; changed.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 10, 2016, at 10:17 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; it--is indicative of a key worry here: it&#39;s inessential to the language and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; promotes dialects wherein certain people use it and others wherein they<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; don&#39;t. This is an anti-goal.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Leave it in!<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I do<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; it is because I&#39;ve decided that in the context of that piece of code it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; does exactly what I want it to do with the maximum amount of clarity.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; detracts from the language at all.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The *only* argument that I have heard for removing it is that some<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; people don&#39;t immediately intuit how to use it. I didn&#39;t have any trouble<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; with it at all. It follows one of the most basic programming patterns ever:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;For all x in X, if predicate P is true, do something.&quot; The use of the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; keyword &quot;where&quot; makes perfect sense in that context, and when I read it out<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; loud, it sounds natural: &quot;For all x in X where P, do something.&quot; That is an<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; elegant, succinct, and clear way of stating exactly what I want my program<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; to do.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t doubt that it has caused some confusion for some people,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; but I&#39;m not sold that that is a good enough reason to get rid of it. It<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; seems strange to get rid of a tool because not everyone understands how to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; use it immediately, without ever having to ask a single question. As long<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; as its not a dangerous tool (and it isn&#39;t), then keep it in the workshop<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; for those times when it comes in handy. And even if there is some initial<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; confusion, it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; this work like X, or does this work like Y? Let&#39;s see...oh, it works like<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; X. Ok.&quot; That&#39;s the entire learning curve...about 5 seconds of curiosity<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; followed by the blissful feeling of resolution.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Party Swift Repos&quot; folder and did the same search. Among the 15 repos in<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that folder, a joint search returned about 650 hits on for-in (again with<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; some false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Weird. My own Swift projects (not on Github :P) use “where” all<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the time with for loops. I really like it and think it reads *and* writes<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; far better as well as makes for nicer one-liners. In one project, by rough<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; count, I have about 20 that use “where” vs. 40 in that same project not<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; using “where”.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; In another smaller test project, there are only 10 for loops, but<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; even so one still managed to use where.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Not a lot of data without looking at even more projects, I admit,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; but this seems to suggest that the usage of “where” is going to be very<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; developer-dependent. Perhaps there’s some factor of prior background at<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; That is worrying if true, because it suggests that it&#39;s enabling<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I feel like “where” is a more declarative construct and that we<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; should be encouraging that way of thinking in general. When using it, it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; feels like “magic” for some reason - even though there’s nothing special<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; about it. It feels like I’ve made the language work *for me* a little bit<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; rather than me having to contort my solution to the will of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This may be highly subjective.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/f9ee0d43/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 13, 2016 at 02:00:00pm</p></header><div class="content"><p>On Mon, Jun 13, 2016 at 12:20 PM, let var go &lt;letvargo at gmail.com&gt; wrote:<br></p><p>&gt;<br>&gt;<br>&gt; On Mon, Jun 13, 2016 at 9:46 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; On Mon, Jun 13, 2016 at 11:41 AM, let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Mon, Jun 13, 2016 at 9:04 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Moreover, I should add, if your goal is to eliminate the possibility of<br>&gt;&gt;&gt;&gt; continuing and breaking from inside the loop, `.forEach()` does that<br>&gt;&gt;&gt;&gt; exactly, so your argument would be for the elimination of `for..in`<br>&gt;&gt;&gt;&gt; altogether.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I have no &quot;goal&quot; of eliminating the possibility of continuing or<br>&gt;&gt;&gt; breaking from inside the loop. In general, it is not my goal to try and<br>&gt;&gt;&gt; control how other people code their programs at all. I don&#39;t want to tell<br>&gt;&gt;&gt; you that you can&#39;t &#39;continue&#39; if you want to &#39;continue.&#39;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; *I am not trying to make everyone adopt my own personal coding style<br>&gt;&gt;&gt; and/or philosophy.*<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; We&#39;re not discussing style.<br>&gt;&gt;<br>&gt;<br>&gt; Yes, we are discussing style, and for a very simple reason: Style is<br>&gt; essential to readability and clarity.<br>&gt;<br>&gt; When we talk about for...in...where vs. guard...continue, all we are<br>&gt; talking about is style. In terms of functionality, they do exactly the same<br>&gt; thing. In terms of style, however, *one is easier to read than the<br>&gt; other. *<br>&gt;<br>&gt; Some people think that guard...continue is easier to read and understand.<br>&gt; Others, like me, think that for...in...where is easier to read and<br>&gt; understand. *But that is a disagreement over style, not functionality*.<br>&gt;<br>&gt; And here is the difficult thing about debates like this: Both sides are<br>&gt; right. What I consider to be the clearest, most readable style of coding<br>&gt; may be confusing to someone else, and vice versa. Different people find<br>&gt; different styles confusing. Not everyone learns the same way. Not everyone<br>&gt; reads the same way. Not everyone codes the same way. What is hard for me to<br>&gt; understand may be easy for you to understand.<br>&gt;<br>&gt; So if using &#39;continue&#39; inside your for...in loops makes sense to you, and<br>&gt; it helps you understand your own code, then go for it. It&#39;s not my style,<br>&gt; not because it is &quot;unfashionable&quot;, but because it has the opposite effect<br>&gt; on me - it makes the code harder for me to understand.<br>&gt;<br></p><p>You misunderstand me. I am not supporting this proposal because I think<br>`guard` is superior style. I am supporting it because I have come to the<br>conclusion that `where` is harmful. I do happen to think that `guard` is a<br>superior style, but that&#39;s not the motivation for removing `where`, nor<br>could it be a justification.<br></p><p><br>&gt; You made a very strong claim: use of `guard...continue` leads to &#39;smelly&#39;<br>&gt;&gt; code, or in other words bad code. In other words, you claim that<br>&gt;&gt; `guard...continue` is harmful. That is grounds for removal, and if you<br>&gt;&gt; believe it to be true, I encourage you to propose it to the list and get<br>&gt;&gt; feedback on that opinion.<br>&gt;&gt;<br>&gt;&gt; If you&#39;re saying that you simply don&#39;t prefer it for reasons of &#39;style,&#39;<br>&gt;&gt; again I emphasize that the topic at hand here is not about personal coding<br>&gt;&gt; style. The claim we are making is that `where` is harmful. I too like it<br>&gt;&gt; for style, and I&#39;ll be sad to see it go. But I have concluded that it must<br>&gt;&gt; go.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; There is also a big difference between &#39;break&#39; and &#39;continue&#39;. I am not<br>&gt;&gt;&gt; afraid to use &#39;break&#39;, and I don&#39;t consider it a code smell. It allows for<br>&gt;&gt;&gt; early exit from a loop based on conditions that are not always known at the<br>&gt;&gt;&gt; time the loop is entered. for...in loops are necessary precisely because<br>&gt;&gt;&gt; they allow for the early exit.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; You don&#39;t need for...in if you want to continue - you can use forEach<br>&gt;&gt;&gt; for that. Instead of using &#39;continue&#39;, you just use &#39;return&#39; without doing<br>&gt;&gt;&gt; anything and it moves on to the next iteration. So really, the only purpose<br>&gt;&gt;&gt; that for...in serves that is not served by forEach is early exit. But<br>&gt;&gt;&gt; regardless, *even if for...in served no additional purpose that<br>&gt;&gt;&gt; couldn&#39;t be served by forEach, I would keep it in the language because<br>&gt;&gt;&gt; there are situations where I believe it is easier to read, and<br>&gt;&gt;&gt; expressiveness and clarity are important to me.*<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 10:55 Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 10:44 AM, let var go &lt;letvargo at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; I think we must be reading different discussions.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; What I have seen in this discussion is the following:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; a) The need to filter a for-in loop doesn&#39;t arise that often; but,<br>&gt;&gt;&gt;&gt;&gt;&gt; b) When it does arise, everyone who has chimed in on this thread<br>&gt;&gt;&gt;&gt;&gt;&gt; (except the two people who are proposing the change) thinks that the<br>&gt;&gt;&gt;&gt;&gt;&gt; &quot;where&quot; clause is the clearest, most expressive way to do it.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Something that would help me get on board with this change is more<br>&gt;&gt;&gt;&gt;&gt;&gt; evidence about what kind of problems it is actually creating.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; As best I can tell, this proposal got started because &quot;somewhere&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt; some new programmers (no one knows how many) expressed some confusion (no<br>&gt;&gt;&gt;&gt;&gt;&gt; one knows how seriously they were confused, or how long it took them to<br>&gt;&gt;&gt;&gt;&gt;&gt; figure it out) about how the where clause worked in a for-in loop. For all<br>&gt;&gt;&gt;&gt;&gt;&gt; we know, once they learned the way it works, they may have said, &quot;Hey<br>&gt;&gt;&gt;&gt;&gt;&gt; that&#39;s cool! I&#39;m gonna use that from now on!&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; In other words, you seem to be talking about removing a feature that<br>&gt;&gt;&gt;&gt;&gt;&gt; is liked by *a lot* people, based on some unsubstantiated reports of user<br>&gt;&gt;&gt;&gt;&gt;&gt; error that may or may not have been totally unsubstantial.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t want new programmers to be confused, either, but the &quot;where&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt; clause is such a basic programming construct - the keyword is new, but the<br>&gt;&gt;&gt;&gt;&gt;&gt; idea itself is as old as programming - that I don&#39;t mind expecting new<br>&gt;&gt;&gt;&gt;&gt;&gt; programmers to learn how to use it. The learning curve should be incredibly<br>&gt;&gt;&gt;&gt;&gt;&gt; short - it is nothing more than a filter operation.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; There&#39;s something else here that is really important to me, though I<br>&gt;&gt;&gt;&gt;&gt;&gt; don&#39;t know how others feel about it.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Using the guard...continue approach that you are promoting is a code<br>&gt;&gt;&gt;&gt;&gt;&gt; smell. It puts control-flow logic inside the for-in loop. That is something<br>&gt;&gt;&gt;&gt;&gt;&gt; I have always tried to avoid. I know that the language allows for it, but I<br>&gt;&gt;&gt;&gt;&gt;&gt; believe it is bad programming practice. In fact, if you get rid of the<br>&gt;&gt;&gt;&gt;&gt;&gt; `where` keyword, I&#39;m still not going to use guard...continue. I&#39;ll just<br>&gt;&gt;&gt;&gt;&gt;&gt; filter the collection first and then loop it.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; This is quite the statement. It sounds like you&#39;d be for the<br>&gt;&gt;&gt;&gt;&gt; elimination of `continue`?<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; It is a code smell for the same reason that messing with the index<br>&gt;&gt;&gt;&gt;&gt;&gt; inside a for;; loop was a code smell. I was always taught never to do this:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; for var i = 0; i &lt; array.count, i++ {<br>&gt;&gt;&gt;&gt;&gt;&gt;   if iWantThisToLoopAnExtraTime {<br>&gt;&gt;&gt;&gt;&gt;&gt;     i--<br>&gt;&gt;&gt;&gt;&gt;&gt;   }<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Why? Because code like that is confusing. It becomes difficult to<br>&gt;&gt;&gt;&gt;&gt;&gt; know how many times the loop will execute, what the looping logic is, etc.<br>&gt;&gt;&gt;&gt;&gt;&gt; Sure, I might get away with it most of the time, but it is bad practice and<br>&gt;&gt;&gt;&gt;&gt;&gt; there is always a better way to do what you want to do. The only thing that<br>&gt;&gt;&gt;&gt;&gt;&gt; keeps you from the better way is laziness.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; The same is true (albeit to a lesser degree) for the<br>&gt;&gt;&gt;&gt;&gt;&gt; guard...continue. It may not be as extreme, but it is still a code smell.<br>&gt;&gt;&gt;&gt;&gt;&gt; It divides the control-flow logic into two parts - one outside the loop,<br>&gt;&gt;&gt;&gt;&gt;&gt; and one inside the loop, and it suddenly becomes twice as easy to miss<br>&gt;&gt;&gt;&gt;&gt;&gt; something.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Using for-in-where, all of the control-flow logic is on one single<br>&gt;&gt;&gt;&gt;&gt;&gt; line, and once it is known that &quot;where&quot; operates as a filter operation, it<br>&gt;&gt;&gt;&gt;&gt;&gt; all works together in a single, harmonious statement that declares exactly<br>&gt;&gt;&gt;&gt;&gt;&gt; what is going to happen in a way that is totally unambiguous.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; So by getting rid of the &quot;where&quot; clause, I believe that you are<br>&gt;&gt;&gt;&gt;&gt;&gt; actually encouraging bad programming practice. Instead of encouraging the<br>&gt;&gt;&gt;&gt;&gt;&gt; new user to learn this very simple construct that will ultimately make<br>&gt;&gt;&gt;&gt;&gt;&gt; their code safer and more expressive without dividing their control-flow<br>&gt;&gt;&gt;&gt;&gt;&gt; logic unnecessarily into two separate parts, you are encouraging them to<br>&gt;&gt;&gt;&gt;&gt;&gt; just &quot;do what they know&quot;. I think that is terrible, and you are doing them<br>&gt;&gt;&gt;&gt;&gt;&gt; a disservice.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; And from a personal standpoint, you are telling me that I have to<br>&gt;&gt;&gt;&gt;&gt;&gt; write smelly code, even though there is this perfectly good non-smelly<br>&gt;&gt;&gt;&gt;&gt;&gt; option sitting right there, because you don&#39;t want someone else to have to<br>&gt;&gt;&gt;&gt;&gt;&gt; learn something.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 5:29 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think this discussion has made it pretty plain that what is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; claimed to be &#39;so useful&#39; is barely ever used. Moreover, it provides no<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; independent uses. The point of these pitches is to sound out arguments,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; not, as far as I was aware, to take a vote.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 1:54 AM Jose Cheyo Jimenez &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; cheyo at masters3d.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --1<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think it would be a waste of the community&#39;s time to do a formal<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; review when only two people are in favor of this removal.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#39;for in where&#39; is so useful especially since we don&#39;t have for;;;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; loops anymore. I&#39;d say leave this alone; the majority doesn&#39;t want this<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; changed.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 10, 2016, at 10:17 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; it--is indicative of a key worry here: it&#39;s inessential to the language and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; promotes dialects wherein certain people use it and others wherein they<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; don&#39;t. This is an anti-goal.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Leave it in!<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I do<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; it is because I&#39;ve decided that in the context of that piece of code it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; does exactly what I want it to do with the maximum amount of clarity.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; detracts from the language at all.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The *only* argument that I have heard for removing it is that some<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; people don&#39;t immediately intuit how to use it. I didn&#39;t have any trouble<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; with it at all. It follows one of the most basic programming patterns ever:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;For all x in X, if predicate P is true, do something.&quot; The use of the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; keyword &quot;where&quot; makes perfect sense in that context, and when I read it out<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; loud, it sounds natural: &quot;For all x in X where P, do something.&quot; That is an<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; elegant, succinct, and clear way of stating exactly what I want my program<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; to do.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t doubt that it has caused some confusion for some people,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; but I&#39;m not sold that that is a good enough reason to get rid of it. It<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; seems strange to get rid of a tool because not everyone understands how to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; use it immediately, without ever having to ask a single question. As long<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; as its not a dangerous tool (and it isn&#39;t), then keep it in the workshop<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; for those times when it comes in handy. And even if there is some initial<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; confusion, it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; this work like X, or does this work like Y? Let&#39;s see...oh, it works like<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; X. Ok.&quot; That&#39;s the entire learning curve...about 5 seconds of curiosity<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; followed by the blissful feeling of resolution.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Party Swift Repos&quot; folder and did the same search. Among the 15 repos in<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that folder, a joint search returned about 650 hits on for-in (again with<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; some false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Weird. My own Swift projects (not on Github :P) use “where” all<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the time with for loops. I really like it and think it reads *and* writes<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; far better as well as makes for nicer one-liners. In one project, by rough<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; count, I have about 20 that use “where” vs. 40 in that same project not<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; using “where”.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; In another smaller test project, there are only 10 for loops,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; but even so one still managed to use where.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Not a lot of data without looking at even more projects, I<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; admit, but this seems to suggest that the usage of “where” is going to be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; very developer-dependent. Perhaps there’s some factor of prior background<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; at work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; That is worrying if true, because it suggests that it&#39;s enabling<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I feel like “where” is a more declarative construct and that we<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; should be encouraging that way of thinking in general. When using it, it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; feels like “magic” for some reason - even though there’s nothing special<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; about it. It feels like I’ve made the language work *for me* a little bit<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; rather than me having to contort my solution to the will of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This may be highly subjective.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/25342c47/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/36603be464733b58cc53cecd480eeae8?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>let var go</string> &lt;letvargo at gmail.com&gt;<p>June 13, 2016 at 09:00:00pm</p></header><div class="content"><p>On Mon, Jun 13, 2016 at 12:21 PM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br></p><p>&gt; On Mon, Jun 13, 2016 at 12:20 PM, let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Mon, Jun 13, 2016 at 9:46 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; On Mon, Jun 13, 2016 at 11:41 AM, let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 9:04 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Moreover, I should add, if your goal is to eliminate the possibility<br>&gt;&gt;&gt;&gt;&gt; of continuing and breaking from inside the loop, `.forEach()` does that<br>&gt;&gt;&gt;&gt;&gt; exactly, so your argument would be for the elimination of `for..in`<br>&gt;&gt;&gt;&gt;&gt; altogether.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I have no &quot;goal&quot; of eliminating the possibility of continuing or<br>&gt;&gt;&gt;&gt; breaking from inside the loop. In general, it is not my goal to try and<br>&gt;&gt;&gt;&gt; control how other people code their programs at all. I don&#39;t want to tell<br>&gt;&gt;&gt;&gt; you that you can&#39;t &#39;continue&#39; if you want to &#39;continue.&#39;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; *I am not trying to make everyone adopt my own personal coding style<br>&gt;&gt;&gt;&gt; and/or philosophy.*<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; We&#39;re not discussing style.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Yes, we are discussing style, and for a very simple reason: Style is<br>&gt;&gt; essential to readability and clarity.<br>&gt;&gt;<br>&gt;&gt; When we talk about for...in...where vs. guard...continue, all we are<br>&gt;&gt; talking about is style. In terms of functionality, they do exactly the same<br>&gt;&gt; thing. In terms of style, however, *one is easier to read than the<br>&gt;&gt; other. *<br>&gt;&gt;<br>&gt;&gt; Some people think that guard...continue is easier to read and understand.<br>&gt;&gt; Others, like me, think that for...in...where is easier to read and<br>&gt;&gt; understand. *But that is a disagreement over style, not functionality*.<br>&gt;&gt;<br>&gt;&gt; And here is the difficult thing about debates like this: Both sides are<br>&gt;&gt; right. What I consider to be the clearest, most readable style of coding<br>&gt;&gt; may be confusing to someone else, and vice versa. Different people find<br>&gt;&gt; different styles confusing. Not everyone learns the same way. Not everyone<br>&gt;&gt; reads the same way. Not everyone codes the same way. What is hard for me to<br>&gt;&gt; understand may be easy for you to understand.<br>&gt;&gt;<br>&gt;&gt; So if using &#39;continue&#39; inside your for...in loops makes sense to you, and<br>&gt;&gt; it helps you understand your own code, then go for it. It&#39;s not my style,<br>&gt;&gt; not because it is &quot;unfashionable&quot;, but because it has the opposite effect<br>&gt;&gt; on me - it makes the code harder for me to understand.<br>&gt;&gt;<br>&gt;<br>&gt; You misunderstand me. I am not supporting this proposal because I think<br>&gt; `guard` is superior style. I am supporting it because I have come to the<br>&gt; conclusion that `where` is harmful. I do happen to think that `guard` is a<br>&gt; superior style, but that&#39;s not the motivation for removing `where`, nor<br>&gt; could it be a justification.<br>&gt;<br></p><p>No, I didn&#39;t misunderstand you. You are talking about style, even if you<br>don&#39;t realize it. Examine these two pieces of code:<br></p><p>Example 1:<br>for x in xs where x &lt; 10 {<br>    print(x)<br>}<br></p><p>Example 2:<br>for x in xs {<br>    guard x &lt; 10 else { continue }<br>    print(x)<br>}<br></p><p>Example 1 and Example 2 are functionally equivalent. They do exactly the<br>same thing. They will produce exactly the same output. *They only differ<br>with regard to style.*<br></p><p>You think that Example 2 is a better style than Example 1 because you think<br>that Example 1 is confusing to new programmers. You argue that the<br>confusion is harmful.<br></p><p>I think that Example 1 is a better style than Example 2 because I think<br>that it is easier to read and expresses my intent with greater clarity.<br>Whatever cognitive burden is placed on the new programmer to learn about<br>the &#39;where&#39; clause is extremely modest and more than made up for by the<br>ability to express their intentions in a way that is both concise and<br>readable. Example 2, by contrast, looks cluttered and splits the<br>control-flow logic into two parts creating a cognitive burden that I<br>consider harmful.<br></p><p>These are debates about style, and that is okay, because style is about<br>clarity, readability, and expressiveness, all of which are essential<br>goals. *Style<br>is substance*. Half the battle is getting the computer to follow the<br>correct instructions. The other half is making the code readable so that<br>human beings can understand it - and that is a matter of style.<br></p><p>There are times where I will choose to use a &#39;continue&#39; statement inside a<br>for...in loop. The reason hardly ever has anything to do with functionality<br>- I could design the code differently to avoid that particular code smell<br>if I put my mind to it. No, I would choose the &#39;continue&#39; statement because<br>in that particular context it makes my code more accessible to human beings<br>(including myself, later on). The ability to choose one solution over<br>another for purely stylistic reasons means that I can maximize both the<br>functionality and the readability of my code.<br></p><p>This proposal prevents the programmer from writing the best possible code<br>because it disallows a stylistic choice that improves readability. I don&#39;t<br>like that. It means that I have to write code that is worse than it has to<br>be. It means that I have to write code that is uglier and more disjointed<br>than it needs to be. That doesn&#39;t make any sense at all.<br></p><p><br>&gt;<br>&gt;<br>&gt;&gt; You made a very strong claim: use of `guard...continue` leads to &#39;smelly&#39;<br>&gt;&gt;&gt; code, or in other words bad code. In other words, you claim that<br>&gt;&gt;&gt; `guard...continue` is harmful. That is grounds for removal, and if you<br>&gt;&gt;&gt; believe it to be true, I encourage you to propose it to the list and get<br>&gt;&gt;&gt; feedback on that opinion.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; If you&#39;re saying that you simply don&#39;t prefer it for reasons of &#39;style,&#39;<br>&gt;&gt;&gt; again I emphasize that the topic at hand here is not about personal coding<br>&gt;&gt;&gt; style. The claim we are making is that `where` is harmful. I too like it<br>&gt;&gt;&gt; for style, and I&#39;ll be sad to see it go. But I have concluded that it must<br>&gt;&gt;&gt; go.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; There is also a big difference between &#39;break&#39; and &#39;continue&#39;. I am not<br>&gt;&gt;&gt;&gt; afraid to use &#39;break&#39;, and I don&#39;t consider it a code smell. It allows for<br>&gt;&gt;&gt;&gt; early exit from a loop based on conditions that are not always known at the<br>&gt;&gt;&gt;&gt; time the loop is entered. for...in loops are necessary precisely because<br>&gt;&gt;&gt;&gt; they allow for the early exit.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; You don&#39;t need for...in if you want to continue - you can use forEach<br>&gt;&gt;&gt;&gt; for that. Instead of using &#39;continue&#39;, you just use &#39;return&#39; without doing<br>&gt;&gt;&gt;&gt; anything and it moves on to the next iteration. So really, the only purpose<br>&gt;&gt;&gt;&gt; that for...in serves that is not served by forEach is early exit. But<br>&gt;&gt;&gt;&gt; regardless, *even if for...in served no additional purpose that<br>&gt;&gt;&gt;&gt; couldn&#39;t be served by forEach, I would keep it in the language because<br>&gt;&gt;&gt;&gt; there are situations where I believe it is easier to read, and<br>&gt;&gt;&gt;&gt; expressiveness and clarity are important to me.*<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 10:55 Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 10:44 AM, let var go &lt;letvargo at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think we must be reading different discussions.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; What I have seen in this discussion is the following:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; a) The need to filter a for-in loop doesn&#39;t arise that often; but,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; b) When it does arise, everyone who has chimed in on this thread<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; (except the two people who are proposing the change) thinks that the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;where&quot; clause is the clearest, most expressive way to do it.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Something that would help me get on board with this change is more<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; evidence about what kind of problems it is actually creating.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; As best I can tell, this proposal got started because &quot;somewhere&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; some new programmers (no one knows how many) expressed some confusion (no<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; one knows how seriously they were confused, or how long it took them to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; figure it out) about how the where clause worked in a for-in loop. For all<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; we know, once they learned the way it works, they may have said, &quot;Hey<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; that&#39;s cool! I&#39;m gonna use that from now on!&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; In other words, you seem to be talking about removing a feature that<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; is liked by *a lot* people, based on some unsubstantiated reports of user<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; error that may or may not have been totally unsubstantial.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t want new programmers to be confused, either, but the &quot;where&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; clause is such a basic programming construct - the keyword is new, but the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; idea itself is as old as programming - that I don&#39;t mind expecting new<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; programmers to learn how to use it. The learning curve should be incredibly<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; short - it is nothing more than a filter operation.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; There&#39;s something else here that is really important to me, though I<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; don&#39;t know how others feel about it.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Using the guard...continue approach that you are promoting is a code<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; smell. It puts control-flow logic inside the for-in loop. That is something<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I have always tried to avoid. I know that the language allows for it, but I<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; believe it is bad programming practice. In fact, if you get rid of the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; `where` keyword, I&#39;m still not going to use guard...continue. I&#39;ll just<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; filter the collection first and then loop it.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; This is quite the statement. It sounds like you&#39;d be for the<br>&gt;&gt;&gt;&gt;&gt;&gt; elimination of `continue`?<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; It is a code smell for the same reason that messing with the index<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; inside a for;; loop was a code smell. I was always taught never to do this:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; for var i = 0; i &lt; array.count, i++ {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;   if iWantThisToLoopAnExtraTime {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     i--<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;   }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Why? Because code like that is confusing. It becomes difficult to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; know how many times the loop will execute, what the looping logic is, etc.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sure, I might get away with it most of the time, but it is bad practice and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; there is always a better way to do what you want to do. The only thing that<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; keeps you from the better way is laziness.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The same is true (albeit to a lesser degree) for the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; guard...continue. It may not be as extreme, but it is still a code smell.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; It divides the control-flow logic into two parts - one outside the loop,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; and one inside the loop, and it suddenly becomes twice as easy to miss<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; something.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Using for-in-where, all of the control-flow logic is on one single<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; line, and once it is known that &quot;where&quot; operates as a filter operation, it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; all works together in a single, harmonious statement that declares exactly<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; what is going to happen in a way that is totally unambiguous.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; So by getting rid of the &quot;where&quot; clause, I believe that you are<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; actually encouraging bad programming practice. Instead of encouraging the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; new user to learn this very simple construct that will ultimately make<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; their code safer and more expressive without dividing their control-flow<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; logic unnecessarily into two separate parts, you are encouraging them to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; just &quot;do what they know&quot;. I think that is terrible, and you are doing them<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; a disservice.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; And from a personal standpoint, you are telling me that I have to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; write smelly code, even though there is this perfectly good non-smelly<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; option sitting right there, because you don&#39;t want someone else to have to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; learn something.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 5:29 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think this discussion has made it pretty plain that what is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; claimed to be &#39;so useful&#39; is barely ever used. Moreover, it provides no<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; independent uses. The point of these pitches is to sound out arguments,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; not, as far as I was aware, to take a vote.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 1:54 AM Jose Cheyo Jimenez &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; cheyo at masters3d.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --1<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think it would be a waste of the community&#39;s time to do a formal<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; review when only two people are in favor of this removal.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#39;for in where&#39; is so useful especially since we don&#39;t have for;;;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; loops anymore. I&#39;d say leave this alone; the majority doesn&#39;t want this<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; changed.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 10, 2016, at 10:17 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; use it--is indicative of a key worry here: it&#39;s inessential to the language<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; and promotes dialects wherein certain people use it and others wherein they<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; don&#39;t. This is an anti-goal.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Leave it in!<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; do it is because I&#39;ve decided that in the context of that piece of code it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; does exactly what I want it to do with the maximum amount of clarity.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; detracts from the language at all.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The *only* argument that I have heard for removing it is that<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; some people don&#39;t immediately intuit how to use it. I didn&#39;t have any<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; trouble with it at all. It follows one of the most basic programming<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; patterns ever: &quot;For all x in X, if predicate P is true, do something.&quot; The<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; use of the keyword &quot;where&quot; makes perfect sense in that context, and when I<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; read it out loud, it sounds natural: &quot;For all x in X where P, do<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; something.&quot; That is an elegant, succinct, and clear way of stating exactly<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; what I want my program to do.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t doubt that it has caused some confusion for some people,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; but I&#39;m not sold that that is a good enough reason to get rid of it. It<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; seems strange to get rid of a tool because not everyone understands how to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; use it immediately, without ever having to ask a single question. As long<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; as its not a dangerous tool (and it isn&#39;t), then keep it in the workshop<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; for those times when it comes in handy. And even if there is some initial<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; confusion, it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; this work like X, or does this work like Y? Let&#39;s see...oh, it works like<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; X. Ok.&quot; That&#39;s the entire learning curve...about 5 seconds of curiosity<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; followed by the blissful feeling of resolution.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Party Swift Repos&quot; folder and did the same search. Among the 15 repos in<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that folder, a joint search returned about 650 hits on for-in (again with<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; some false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Weird. My own Swift projects (not on Github :P) use “where” all<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the time with for loops. I really like it and think it reads *and* writes<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; far better as well as makes for nicer one-liners. In one project, by rough<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; count, I have about 20 that use “where” vs. 40 in that same project not<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; using “where”.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; In another smaller test project, there are only 10 for loops,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; but even so one still managed to use where.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Not a lot of data without looking at even more projects, I<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; admit, but this seems to suggest that the usage of “where” is going to be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; very developer-dependent. Perhaps there’s some factor of prior background<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; at work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; That is worrying if true, because it suggests that it&#39;s enabling<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I feel like “where” is a more declarative construct and that we<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; should be encouraging that way of thinking in general. When using it, it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; feels like “magic” for some reason - even though there’s nothing special<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; about it. It feels like I’ve made the language work *for me* a little bit<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; rather than me having to contort my solution to the will of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This may be highly subjective.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/e9f9ecfd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 13, 2016 at 05:00:00pm</p></header><div class="content"><p>On Mon, Jun 13, 2016 at 4:36 PM, let var go &lt;letvargo at gmail.com&gt; wrote:<br></p><p>&gt;<br>&gt;<br>&gt; On Mon, Jun 13, 2016 at 12:21 PM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; On Mon, Jun 13, 2016 at 12:20 PM, let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Mon, Jun 13, 2016 at 9:46 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 11:41 AM, let var go &lt;letvargo at gmail.com&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 9:04 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Moreover, I should add, if your goal is to eliminate the possibility<br>&gt;&gt;&gt;&gt;&gt;&gt; of continuing and breaking from inside the loop, `.forEach()` does that<br>&gt;&gt;&gt;&gt;&gt;&gt; exactly, so your argument would be for the elimination of `for..in`<br>&gt;&gt;&gt;&gt;&gt;&gt; altogether.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I have no &quot;goal&quot; of eliminating the possibility of continuing or<br>&gt;&gt;&gt;&gt;&gt; breaking from inside the loop. In general, it is not my goal to try and<br>&gt;&gt;&gt;&gt;&gt; control how other people code their programs at all. I don&#39;t want to tell<br>&gt;&gt;&gt;&gt;&gt; you that you can&#39;t &#39;continue&#39; if you want to &#39;continue.&#39;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; *I am not trying to make everyone adopt my own personal coding style<br>&gt;&gt;&gt;&gt;&gt; and/or philosophy.*<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; We&#39;re not discussing style.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Yes, we are discussing style, and for a very simple reason: Style is<br>&gt;&gt;&gt; essential to readability and clarity.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; When we talk about for...in...where vs. guard...continue, all we are<br>&gt;&gt;&gt; talking about is style. In terms of functionality, they do exactly the same<br>&gt;&gt;&gt; thing. In terms of style, however, *one is easier to read than the<br>&gt;&gt;&gt; other. *<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Some people think that guard...continue is easier to read and<br>&gt;&gt;&gt; understand. Others, like me, think that for...in...where is easier to read<br>&gt;&gt;&gt; and understand. *But that is a disagreement over style, not<br>&gt;&gt;&gt; functionality*.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; And here is the difficult thing about debates like this: Both sides are<br>&gt;&gt;&gt; right. What I consider to be the clearest, most readable style of coding<br>&gt;&gt;&gt; may be confusing to someone else, and vice versa. Different people find<br>&gt;&gt;&gt; different styles confusing. Not everyone learns the same way. Not everyone<br>&gt;&gt;&gt; reads the same way. Not everyone codes the same way. What is hard for me to<br>&gt;&gt;&gt; understand may be easy for you to understand.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; So if using &#39;continue&#39; inside your for...in loops makes sense to you,<br>&gt;&gt;&gt; and it helps you understand your own code, then go for it. It&#39;s not my<br>&gt;&gt;&gt; style, not because it is &quot;unfashionable&quot;, but because it has the opposite<br>&gt;&gt;&gt; effect on me - it makes the code harder for me to understand.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; You misunderstand me. I am not supporting this proposal because I think<br>&gt;&gt; `guard` is superior style. I am supporting it because I have come to the<br>&gt;&gt; conclusion that `where` is harmful. I do happen to think that `guard` is a<br>&gt;&gt; superior style, but that&#39;s not the motivation for removing `where`, nor<br>&gt;&gt; could it be a justification.<br>&gt;&gt;<br>&gt;<br>&gt; No, I didn&#39;t misunderstand you. You are talking about style, even if you<br>&gt; don&#39;t realize it. Examine these two pieces of code:<br>&gt;<br>&gt; Example 1:<br>&gt; for x in xs where x &lt; 10 {<br>&gt;     print(x)<br>&gt; }<br>&gt;<br>&gt; Example 2:<br>&gt; for x in xs {<br>&gt;     guard x &lt; 10 else { continue }<br>&gt;     print(x)<br>&gt; }<br>&gt;<br>&gt; Example 1 and Example 2 are functionally equivalent. They do exactly the<br>&gt; same thing. They will produce exactly the same output. *They only differ<br>&gt; with regard to style.*<br>&gt;<br>&gt; You think that Example 2 is a better style than Example 1 because you<br>&gt; think that Example 1 is confusing to new programmers. You argue that the<br>&gt; confusion is harmful.<br>&gt;<br></p><p>If you define &#39;style&#39; as the difference between any two things that produce<br>the same output, then indeed all language design is &#39;style.&#39; Writing in<br>Lisp vs. writing in C++ would be a choice of &#39;style.&#39; When you say that<br>Swift should accommodate your own &#39;style,&#39; then, that could just as well be<br>an argument for Lisp-like syntax. This is not, however, what people<br>generally understand to be &#39;coding style.&#39;<br></p><p>The fact is that there are even experienced users of Swift who see `where`<br>and affirmatively believe it does what it does not do. The same cannot be<br>said for `guard`. That is, a user might say, &#39;What in the world does guard<br>mean?&#39;, but even a totally new user is unlikely to say, &#39;I can guess what<br>guard means, and it means [something that guard does not in fact mean].&#39;<br>That is not at all an argument about style. And yes, I argue that confusion<br>is harmful.<br></p><p>I think that Example 1 is a better style than Example 2 because I think<br>&gt; that it is easier to read and expresses my intent with greater clarity.<br>&gt; Whatever cognitive burden is placed on the new programmer to learn about<br>&gt; the &#39;where&#39; clause is extremely modest and more than made up for by the<br>&gt; ability to express their intentions in a way that is both concise and<br>&gt; readable. Example 2, by contrast, looks cluttered and splits the<br>&gt; control-flow logic into two parts creating a cognitive burden that I<br>&gt; consider harmful.<br>&gt;<br></p><p>You are stretching here; `guard` imposes a &#39;harmful cognitive burden&#39;?<br>Again, if you truly believe that, please do propose a change to the list.<br></p><p>These are debates about style, and that is okay, because style is about<br>&gt; clarity, readability, and expressiveness, all of which are essential goals. *Style<br>&gt; is substance*. Half the battle is getting the computer to follow the<br>&gt; correct instructions. The other half is making the code readable so that<br>&gt; human beings can understand it - and that is a matter of style.<br>&gt;<br>&gt; There are times where I will choose to use a &#39;continue&#39; statement inside a<br>&gt; for...in loop. The reason hardly ever has anything to do with functionality<br>&gt; - I could design the code differently to avoid that particular code smell<br>&gt; if I put my mind to it. No, I would choose the &#39;continue&#39; statement because<br>&gt; in that particular context it makes my code more accessible to human beings<br>&gt; (including myself, later on). The ability to choose one solution over<br>&gt; another for purely stylistic reasons means that I can maximize both the<br>&gt; functionality and the readability of my code.<br>&gt;<br>&gt; This proposal prevents the programmer from writing the best possible code<br>&gt; because it disallows a stylistic choice that improves readability. I don&#39;t<br>&gt; like that. It means that I have to write code that is worse than it has to<br>&gt; be. It means that I have to write code that is uglier and more disjointed<br>&gt; than it needs to be. That doesn&#39;t make any sense at all.<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; You made a very strong claim: use of `guard...continue` leads to<br>&gt;&gt;&gt;&gt; &#39;smelly&#39; code, or in other words bad code. In other words, you claim that<br>&gt;&gt;&gt;&gt; `guard...continue` is harmful. That is grounds for removal, and if you<br>&gt;&gt;&gt;&gt; believe it to be true, I encourage you to propose it to the list and get<br>&gt;&gt;&gt;&gt; feedback on that opinion.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; If you&#39;re saying that you simply don&#39;t prefer it for reasons of<br>&gt;&gt;&gt;&gt; &#39;style,&#39; again I emphasize that the topic at hand here is not about<br>&gt;&gt;&gt;&gt; personal coding style. The claim we are making is that `where` is harmful.<br>&gt;&gt;&gt;&gt; I too like it for style, and I&#39;ll be sad to see it go. But I have concluded<br>&gt;&gt;&gt;&gt; that it must go.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; There is also a big difference between &#39;break&#39; and &#39;continue&#39;. I am<br>&gt;&gt;&gt;&gt;&gt; not afraid to use &#39;break&#39;, and I don&#39;t consider it a code smell. It allows<br>&gt;&gt;&gt;&gt;&gt; for early exit from a loop based on conditions that are not always known at<br>&gt;&gt;&gt;&gt;&gt; the time the loop is entered. for...in loops are necessary precisely<br>&gt;&gt;&gt;&gt;&gt; because they allow for the early exit.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; You don&#39;t need for...in if you want to continue - you can use forEach<br>&gt;&gt;&gt;&gt;&gt; for that. Instead of using &#39;continue&#39;, you just use &#39;return&#39; without doing<br>&gt;&gt;&gt;&gt;&gt; anything and it moves on to the next iteration. So really, the only purpose<br>&gt;&gt;&gt;&gt;&gt; that for...in serves that is not served by forEach is early exit. But<br>&gt;&gt;&gt;&gt;&gt; regardless, *even if for...in served no additional purpose that<br>&gt;&gt;&gt;&gt;&gt; couldn&#39;t be served by forEach, I would keep it in the language because<br>&gt;&gt;&gt;&gt;&gt; there are situations where I believe it is easier to read, and<br>&gt;&gt;&gt;&gt;&gt; expressiveness and clarity are important to me.*<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 10:55 Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 10:44 AM, let var go &lt;letvargo at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think we must be reading different discussions.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; What I have seen in this discussion is the following:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; a) The need to filter a for-in loop doesn&#39;t arise that often; but,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; b) When it does arise, everyone who has chimed in on this thread<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; (except the two people who are proposing the change) thinks that the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;where&quot; clause is the clearest, most expressive way to do it.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Something that would help me get on board with this change is more<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; evidence about what kind of problems it is actually creating.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; As best I can tell, this proposal got started because &quot;somewhere&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; some new programmers (no one knows how many) expressed some confusion (no<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; one knows how seriously they were confused, or how long it took them to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; figure it out) about how the where clause worked in a for-in loop. For all<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; we know, once they learned the way it works, they may have said, &quot;Hey<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that&#39;s cool! I&#39;m gonna use that from now on!&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; In other words, you seem to be talking about removing a feature<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that is liked by *a lot* people, based on some unsubstantiated reports of<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; user error that may or may not have been totally unsubstantial.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t want new programmers to be confused, either, but the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;where&quot; clause is such a basic programming construct - the keyword is new,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; but the idea itself is as old as programming - that I don&#39;t mind expecting<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; new programmers to learn how to use it. The learning curve should be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; incredibly short - it is nothing more than a filter operation.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; There&#39;s something else here that is really important to me, though<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t know how others feel about it.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Using the guard...continue approach that you are promoting is a<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; code smell. It puts control-flow logic inside the for-in loop. That is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; something I have always tried to avoid. I know that the language allows for<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; it, but I believe it is bad programming practice. In fact, if you get rid<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; of the `where` keyword, I&#39;m still not going to use guard...continue. I&#39;ll<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; just filter the collection first and then loop it.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; This is quite the statement. It sounds like you&#39;d be for the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; elimination of `continue`?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It is a code smell for the same reason that messing with the index<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; inside a for;; loop was a code smell. I was always taught never to do this:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; for var i = 0; i &lt; array.count, i++ {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   if iWantThisToLoopAnExtraTime {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     i--<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Why? Because code like that is confusing. It becomes difficult to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; know how many times the loop will execute, what the looping logic is, etc.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sure, I might get away with it most of the time, but it is bad practice and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; there is always a better way to do what you want to do. The only thing that<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; keeps you from the better way is laziness.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The same is true (albeit to a lesser degree) for the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; guard...continue. It may not be as extreme, but it is still a code smell.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It divides the control-flow logic into two parts - one outside the loop,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; and one inside the loop, and it suddenly becomes twice as easy to miss<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; something.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Using for-in-where, all of the control-flow logic is on one single<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; line, and once it is known that &quot;where&quot; operates as a filter operation, it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; all works together in a single, harmonious statement that declares exactly<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; what is going to happen in a way that is totally unambiguous.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; So by getting rid of the &quot;where&quot; clause, I believe that you are<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; actually encouraging bad programming practice. Instead of encouraging the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; new user to learn this very simple construct that will ultimately make<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; their code safer and more expressive without dividing their control-flow<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; logic unnecessarily into two separate parts, you are encouraging them to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; just &quot;do what they know&quot;. I think that is terrible, and you are doing them<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; a disservice.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; And from a personal standpoint, you are telling me that I have to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; write smelly code, even though there is this perfectly good non-smelly<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; option sitting right there, because you don&#39;t want someone else to have to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; learn something.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 5:29 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think this discussion has made it pretty plain that what is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; claimed to be &#39;so useful&#39; is barely ever used. Moreover, it provides no<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; independent uses. The point of these pitches is to sound out arguments,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; not, as far as I was aware, to take a vote.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 1:54 AM Jose Cheyo Jimenez &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; cheyo at masters3d.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --1<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think it would be a waste of the community&#39;s time to do a<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; formal review when only two people are in favor of this removal.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#39;for in where&#39; is so useful especially since we don&#39;t have for;;;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; loops anymore. I&#39;d say leave this alone; the majority doesn&#39;t want this<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; changed.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 10, 2016, at 10:17 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; use it--is indicative of a key worry here: it&#39;s inessential to the language<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; and promotes dialects wherein certain people use it and others wherein they<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; don&#39;t. This is an anti-goal.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Leave it in!<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; do it is because I&#39;ve decided that in the context of that piece of code it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; does exactly what I want it to do with the maximum amount of clarity.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; detracts from the language at all.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The *only* argument that I have heard for removing it is that<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; some people don&#39;t immediately intuit how to use it. I didn&#39;t have any<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; trouble with it at all. It follows one of the most basic programming<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; patterns ever: &quot;For all x in X, if predicate P is true, do something.&quot; The<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; use of the keyword &quot;where&quot; makes perfect sense in that context, and when I<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; read it out loud, it sounds natural: &quot;For all x in X where P, do<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; something.&quot; That is an elegant, succinct, and clear way of stating exactly<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; what I want my program to do.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t doubt that it has caused some confusion for some people,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; but I&#39;m not sold that that is a good enough reason to get rid of it. It<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; seems strange to get rid of a tool because not everyone understands how to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; use it immediately, without ever having to ask a single question. As long<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; as its not a dangerous tool (and it isn&#39;t), then keep it in the workshop<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; for those times when it comes in handy. And even if there is some initial<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; confusion, it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; this work like X, or does this work like Y? Let&#39;s see...oh, it works like<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; X. Ok.&quot; That&#39;s the entire learning curve...about 5 seconds of curiosity<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; followed by the blissful feeling of resolution.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Party Swift Repos&quot; folder and did the same search. Among the 15 repos in<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that folder, a joint search returned about 650 hits on for-in (again with<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; some false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Weird. My own Swift projects (not on Github :P) use “where”<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; all the time with for loops. I really like it and think it reads *and*<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; writes far better as well as makes for nicer one-liners. In one project, by<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; rough count, I have about 20 that use “where” vs. 40 in that same project<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; not using “where”.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; In another smaller test project, there are only 10 for loops,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; but even so one still managed to use where.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Not a lot of data without looking at even more projects, I<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; admit, but this seems to suggest that the usage of “where” is going to be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; very developer-dependent. Perhaps there’s some factor of prior background<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; at work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; That is worrying if true, because it suggests that it&#39;s<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; enabling &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I feel like “where” is a more declarative construct and that<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; we should be encouraging that way of thinking in general. When using it, it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; feels like “magic” for some reason - even though there’s nothing special<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; about it. It feels like I’ve made the language work *for me* a little bit<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; rather than me having to contort my solution to the will of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This may be highly subjective.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/1f2c2410/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/36603be464733b58cc53cecd480eeae8?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>let var go</string> &lt;letvargo at gmail.com&gt;<p>June 13, 2016 at 04:00:00pm</p></header><div class="content"><p>No, I wouldn&#39;t eliminate &#39;continue&#39;. Even though I consider it a<br>sub-optimal solution, I would keep it in the language. Why? A couple of<br>reasons:<br></p><p>1) I don&#39;t like it, but even &#39;continue&#39; may be the best available solution<br>in the context of a particular problem. I will look for other options<br>first, but I don&#39;t rule out the possibility that there might come a time<br>when it is the right tool for the job.<br></p><p>2) Some people like it. Not everyone feels the same way about it as me.<br>Some of the people who like it are better programmers than me. I have a lot<br>to learn, and someday I might discover that I love &#39;continue&#39; after all.<br>Until then, live-and-let-live is what I say. Everyone should control their<br>own flow :) Keep your hands off my &#39;where&#39; and I&#39;ll keep my hands off your<br>&#39;continue&#39; :)<br></p><p>On Mon, Jun 13, 2016 at 8:56 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br></p><p>&gt; On Mon, Jun 13, 2016 at 10:44 AM, let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; I think we must be reading different discussions.<br>&gt;&gt;<br>&gt;&gt; What I have seen in this discussion is the following:<br>&gt;&gt;<br>&gt;&gt; a) The need to filter a for-in loop doesn&#39;t arise that often; but,<br>&gt;&gt; b) When it does arise, everyone who has chimed in on this thread (except<br>&gt;&gt; the two people who are proposing the change) thinks that the &quot;where&quot; clause<br>&gt;&gt; is the clearest, most expressive way to do it.<br>&gt;&gt;<br>&gt;&gt; Something that would help me get on board with this change is more<br>&gt;&gt; evidence about what kind of problems it is actually creating.<br>&gt;&gt;<br>&gt;&gt; As best I can tell, this proposal got started because &quot;somewhere&quot; some<br>&gt;&gt; new programmers (no one knows how many) expressed some confusion (no one<br>&gt;&gt; knows how seriously they were confused, or how long it took them to figure<br>&gt;&gt; it out) about how the where clause worked in a for-in loop. For all we<br>&gt;&gt; know, once they learned the way it works, they may have said, &quot;Hey that&#39;s<br>&gt;&gt; cool! I&#39;m gonna use that from now on!&quot;<br>&gt;&gt;<br>&gt;&gt; In other words, you seem to be talking about removing a feature that is<br>&gt;&gt; liked by *a lot* people, based on some unsubstantiated reports of user<br>&gt;&gt; error that may or may not have been totally unsubstantial.<br>&gt;&gt;<br>&gt;&gt; I don&#39;t want new programmers to be confused, either, but the &quot;where&quot;<br>&gt;&gt; clause is such a basic programming construct - the keyword is new, but the<br>&gt;&gt; idea itself is as old as programming - that I don&#39;t mind expecting new<br>&gt;&gt; programmers to learn how to use it. The learning curve should be incredibly<br>&gt;&gt; short - it is nothing more than a filter operation.<br>&gt;&gt;<br>&gt;&gt; There&#39;s something else here that is really important to me, though I<br>&gt;&gt; don&#39;t know how others feel about it.<br>&gt;&gt;<br>&gt;&gt; Using the guard...continue approach that you are promoting is a code<br>&gt;&gt; smell. It puts control-flow logic inside the for-in loop. That is something<br>&gt;&gt; I have always tried to avoid. I know that the language allows for it, but I<br>&gt;&gt; believe it is bad programming practice. In fact, if you get rid of the<br>&gt;&gt; `where` keyword, I&#39;m still not going to use guard...continue. I&#39;ll just<br>&gt;&gt; filter the collection first and then loop it.<br>&gt;&gt;<br>&gt;<br>&gt; This is quite the statement. It sounds like you&#39;d be for the elimination<br>&gt; of `continue`?<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; It is a code smell for the same reason that messing with the index inside<br>&gt;&gt; a for;; loop was a code smell. I was always taught never to do this:<br>&gt;&gt;<br>&gt;&gt; for var i = 0; i &lt; array.count, i++ {<br>&gt;&gt;   if iWantThisToLoopAnExtraTime {<br>&gt;&gt;     i--<br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; Why? Because code like that is confusing. It becomes difficult to know<br>&gt;&gt; how many times the loop will execute, what the looping logic is, etc. Sure,<br>&gt;&gt; I might get away with it most of the time, but it is bad practice and there<br>&gt;&gt; is always a better way to do what you want to do. The only thing that keeps<br>&gt;&gt; you from the better way is laziness.<br>&gt;&gt;<br>&gt;&gt; The same is true (albeit to a lesser degree) for the guard...continue. It<br>&gt;&gt; may not be as extreme, but it is still a code smell. It divides the<br>&gt;&gt; control-flow logic into two parts - one outside the loop, and one inside<br>&gt;&gt; the loop, and it suddenly becomes twice as easy to miss something.<br>&gt;&gt;<br>&gt;&gt; Using for-in-where, all of the control-flow logic is on one single line,<br>&gt;&gt; and once it is known that &quot;where&quot; operates as a filter operation, it all<br>&gt;&gt; works together in a single, harmonious statement that declares exactly what<br>&gt;&gt; is going to happen in a way that is totally unambiguous.<br>&gt;&gt;<br>&gt;&gt; So by getting rid of the &quot;where&quot; clause, I believe that you are actually<br>&gt;&gt; encouraging bad programming practice. Instead of encouraging the new user<br>&gt;&gt; to learn this very simple construct that will ultimately make their code<br>&gt;&gt; safer and more expressive without dividing their control-flow logic<br>&gt;&gt; unnecessarily into two separate parts, you are encouraging them to just &quot;do<br>&gt;&gt; what they know&quot;. I think that is terrible, and you are doing them a<br>&gt;&gt; disservice.<br>&gt;&gt;<br>&gt;&gt; And from a personal standpoint, you are telling me that I have to write<br>&gt;&gt; smelly code, even though there is this perfectly good non-smelly option<br>&gt;&gt; sitting right there, because you don&#39;t want someone else to have to learn<br>&gt;&gt; something.<br>&gt;&gt;<br>&gt;&gt; On Mon, Jun 13, 2016 at 5:29 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; I think this discussion has made it pretty plain that what is claimed to<br>&gt;&gt;&gt; be &#39;so useful&#39; is barely ever used. Moreover, it provides no independent<br>&gt;&gt;&gt; uses. The point of these pitches is to sound out arguments, not, as far as<br>&gt;&gt;&gt; I was aware, to take a vote.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Mon, Jun 13, 2016 at 1:54 AM Jose Cheyo Jimenez &lt;cheyo at masters3d.com&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; --1<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I think it would be a waste of the community&#39;s time to do a formal<br>&gt;&gt;&gt;&gt; review when only two people are in favor of this removal.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &#39;for in where&#39; is so useful especially since we don&#39;t have for;;; loops<br>&gt;&gt;&gt;&gt; anymore. I&#39;d say leave this alone; the majority doesn&#39;t want this changed.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Jun 10, 2016, at 10:17 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use<br>&gt;&gt;&gt;&gt; it--is indicative of a key worry here: it&#39;s inessential to the language and<br>&gt;&gt;&gt;&gt; promotes dialects wherein certain people use it and others wherein they<br>&gt;&gt;&gt;&gt; don&#39;t. This is an anti-goal.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Leave it in!<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I do it<br>&gt;&gt;&gt;&gt;&gt; is because I&#39;ve decided that in the context of that piece of code it does<br>&gt;&gt;&gt;&gt;&gt; exactly what I want it to do with the maximum amount of clarity.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it<br>&gt;&gt;&gt;&gt;&gt; detracts from the language at all.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; The *only* argument that I have heard for removing it is that some<br>&gt;&gt;&gt;&gt;&gt; people don&#39;t immediately intuit how to use it. I didn&#39;t have any trouble<br>&gt;&gt;&gt;&gt;&gt; with it at all. It follows one of the most basic programming patterns ever:<br>&gt;&gt;&gt;&gt;&gt; &quot;For all x in X, if predicate P is true, do something.&quot; The use of the<br>&gt;&gt;&gt;&gt;&gt; keyword &quot;where&quot; makes perfect sense in that context, and when I read it out<br>&gt;&gt;&gt;&gt;&gt; loud, it sounds natural: &quot;For all x in X where P, do something.&quot; That is an<br>&gt;&gt;&gt;&gt;&gt; elegant, succinct, and clear way of stating exactly what I want my program<br>&gt;&gt;&gt;&gt;&gt; to do.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I don&#39;t doubt that it has caused some confusion for some people, but<br>&gt;&gt;&gt;&gt;&gt; I&#39;m not sold that that is a good enough reason to get rid of it. It seems<br>&gt;&gt;&gt;&gt;&gt; strange to get rid of a tool because not everyone understands how to use it<br>&gt;&gt;&gt;&gt;&gt; immediately, without ever having to ask a single question. As long as its<br>&gt;&gt;&gt;&gt;&gt; not a dangerous tool (and it isn&#39;t), then keep it in the workshop for those<br>&gt;&gt;&gt;&gt;&gt; times when it comes in handy. And even if there is some initial confusion,<br>&gt;&gt;&gt;&gt;&gt; it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does this work<br>&gt;&gt;&gt;&gt;&gt; like X, or does this work like Y? Let&#39;s see...oh, it works like X. Ok.&quot;<br>&gt;&gt;&gt;&gt;&gt; That&#39;s the entire learning curve...about 5 seconds of curiosity followed by<br>&gt;&gt;&gt;&gt;&gt; the blissful feeling of resolution.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Swift Repos&quot; folder and did the same search. Among the 15 repos in that<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; folder, a joint search returned about 650 hits on for-in (again with some<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Weird. My own Swift projects (not on Github :P) use “where” all the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; time with for loops. I really like it and think it reads *and* writes far<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; better as well as makes for nicer one-liners. In one project, by rough<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; count, I have about 20 that use “where” vs. 40 in that same project not<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; using “where”.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; In another smaller test project, there are only 10 for loops, but<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; even so one still managed to use where.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Not a lot of data without looking at even more projects, I admit,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; but this seems to suggest that the usage of “where” is going to be very<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; developer-dependent. Perhaps there’s some factor of prior background at<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; That is worrying if true, because it suggests that it&#39;s enabling<br>&gt;&gt;&gt;&gt;&gt;&gt; &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I feel like “where” is a more declarative construct and that we<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; should be encouraging that way of thinking in general. When using it, it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; feels like “magic” for some reason - even though there’s nothing special<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; about it. It feels like I’ve made the language work *for me* a little bit<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; rather than me having to contort my solution to the will of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; This may be highly subjective.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/1b09aca9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 13, 2016 at 04:00:00pm</p></header><div class="content"><p>See, the key difference between for...in and .forEach() is that one allows<br>for continue and break and the other doesn&#39;t. Swift is not a<br>live-and-let-live language: if you truly believe that using continue leads<br>to bad code, then propose its removal or the removal of for...in altogether.<br></p><p>On Mon, Jun 13, 2016 at 11:21 let var go &lt;letvargo at gmail.com&gt; wrote:<br></p><p>&gt; No, I wouldn&#39;t eliminate &#39;continue&#39;. Even though I consider it a<br>&gt; sub-optimal solution, I would keep it in the language. Why? A couple of<br>&gt; reasons:<br>&gt;<br>&gt; 1) I don&#39;t like it, but even &#39;continue&#39; may be the best available solution<br>&gt; in the context of a particular problem. I will look for other options<br>&gt; first, but I don&#39;t rule out the possibility that there might come a time<br>&gt; when it is the right tool for the job.<br>&gt;<br>&gt; 2) Some people like it. Not everyone feels the same way about it as me.<br>&gt; Some of the people who like it are better programmers than me. I have a lot<br>&gt; to learn, and someday I might discover that I love &#39;continue&#39; after all.<br>&gt; Until then, live-and-let-live is what I say. Everyone should control their<br>&gt; own flow :) Keep your hands off my &#39;where&#39; and I&#39;ll keep my hands off your<br>&gt; &#39;continue&#39; :)<br>&gt;<br>&gt; On Mon, Jun 13, 2016 at 8:56 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; On Mon, Jun 13, 2016 at 10:44 AM, let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; I think we must be reading different discussions.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; What I have seen in this discussion is the following:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; a) The need to filter a for-in loop doesn&#39;t arise that often; but,<br>&gt;&gt;&gt; b) When it does arise, everyone who has chimed in on this thread (except<br>&gt;&gt;&gt; the two people who are proposing the change) thinks that the &quot;where&quot; clause<br>&gt;&gt;&gt; is the clearest, most expressive way to do it.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Something that would help me get on board with this change is more<br>&gt;&gt;&gt; evidence about what kind of problems it is actually creating.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; As best I can tell, this proposal got started because &quot;somewhere&quot; some<br>&gt;&gt;&gt; new programmers (no one knows how many) expressed some confusion (no one<br>&gt;&gt;&gt; knows how seriously they were confused, or how long it took them to figure<br>&gt;&gt;&gt; it out) about how the where clause worked in a for-in loop. For all we<br>&gt;&gt;&gt; know, once they learned the way it works, they may have said, &quot;Hey that&#39;s<br>&gt;&gt;&gt; cool! I&#39;m gonna use that from now on!&quot;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; In other words, you seem to be talking about removing a feature that is<br>&gt;&gt;&gt; liked by *a lot* people, based on some unsubstantiated reports of user<br>&gt;&gt;&gt; error that may or may not have been totally unsubstantial.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I don&#39;t want new programmers to be confused, either, but the &quot;where&quot;<br>&gt;&gt;&gt; clause is such a basic programming construct - the keyword is new, but the<br>&gt;&gt;&gt; idea itself is as old as programming - that I don&#39;t mind expecting new<br>&gt;&gt;&gt; programmers to learn how to use it. The learning curve should be incredibly<br>&gt;&gt;&gt; short - it is nothing more than a filter operation.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; There&#39;s something else here that is really important to me, though I<br>&gt;&gt;&gt; don&#39;t know how others feel about it.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Using the guard...continue approach that you are promoting is a code<br>&gt;&gt;&gt; smell. It puts control-flow logic inside the for-in loop. That is something<br>&gt;&gt;&gt; I have always tried to avoid. I know that the language allows for it, but I<br>&gt;&gt;&gt; believe it is bad programming practice. In fact, if you get rid of the<br>&gt;&gt;&gt; `where` keyword, I&#39;m still not going to use guard...continue. I&#39;ll just<br>&gt;&gt;&gt; filter the collection first and then loop it.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; This is quite the statement. It sounds like you&#39;d be for the elimination<br>&gt;&gt; of `continue`?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It is a code smell for the same reason that messing with the index<br>&gt;&gt;&gt; inside a for;; loop was a code smell. I was always taught never to do this:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; for var i = 0; i &lt; array.count, i++ {<br>&gt;&gt;&gt;   if iWantThisToLoopAnExtraTime {<br>&gt;&gt;&gt;     i--<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Why? Because code like that is confusing. It becomes difficult to know<br>&gt;&gt;&gt; how many times the loop will execute, what the looping logic is, etc. Sure,<br>&gt;&gt;&gt; I might get away with it most of the time, but it is bad practice and there<br>&gt;&gt;&gt; is always a better way to do what you want to do. The only thing that keeps<br>&gt;&gt;&gt; you from the better way is laziness.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The same is true (albeit to a lesser degree) for the guard...continue.<br>&gt;&gt;&gt; It may not be as extreme, but it is still a code smell. It divides the<br>&gt;&gt;&gt; control-flow logic into two parts - one outside the loop, and one inside<br>&gt;&gt;&gt; the loop, and it suddenly becomes twice as easy to miss something.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Using for-in-where, all of the control-flow logic is on one single line,<br>&gt;&gt;&gt; and once it is known that &quot;where&quot; operates as a filter operation, it all<br>&gt;&gt;&gt; works together in a single, harmonious statement that declares exactly what<br>&gt;&gt;&gt; is going to happen in a way that is totally unambiguous.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; So by getting rid of the &quot;where&quot; clause, I believe that you are actually<br>&gt;&gt;&gt; encouraging bad programming practice. Instead of encouraging the new user<br>&gt;&gt;&gt; to learn this very simple construct that will ultimately make their code<br>&gt;&gt;&gt; safer and more expressive without dividing their control-flow logic<br>&gt;&gt;&gt; unnecessarily into two separate parts, you are encouraging them to just &quot;do<br>&gt;&gt;&gt; what they know&quot;. I think that is terrible, and you are doing them a<br>&gt;&gt;&gt; disservice.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; And from a personal standpoint, you are telling me that I have to write<br>&gt;&gt;&gt; smelly code, even though there is this perfectly good non-smelly option<br>&gt;&gt;&gt; sitting right there, because you don&#39;t want someone else to have to learn<br>&gt;&gt;&gt; something.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Mon, Jun 13, 2016 at 5:29 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I think this discussion has made it pretty plain that what is claimed<br>&gt;&gt;&gt;&gt; to be &#39;so useful&#39; is barely ever used. Moreover, it provides no independent<br>&gt;&gt;&gt;&gt; uses. The point of these pitches is to sound out arguments, not, as far as<br>&gt;&gt;&gt;&gt; I was aware, to take a vote.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 1:54 AM Jose Cheyo Jimenez &lt;cheyo at masters3d.com&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; --1<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I think it would be a waste of the community&#39;s time to do a formal<br>&gt;&gt;&gt;&gt;&gt; review when only two people are in favor of this removal.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &#39;for in where&#39; is so useful especially since we don&#39;t have for;;;<br>&gt;&gt;&gt;&gt;&gt; loops anymore. I&#39;d say leave this alone; the majority doesn&#39;t want this<br>&gt;&gt;&gt;&gt;&gt; changed.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Jun 10, 2016, at 10:17 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use<br>&gt;&gt;&gt;&gt;&gt; it--is indicative of a key worry here: it&#39;s inessential to the language and<br>&gt;&gt;&gt;&gt;&gt; promotes dialects wherein certain people use it and others wherein they<br>&gt;&gt;&gt;&gt;&gt; don&#39;t. This is an anti-goal.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Leave it in!<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I do it<br>&gt;&gt;&gt;&gt;&gt;&gt; is because I&#39;ve decided that in the context of that piece of code it does<br>&gt;&gt;&gt;&gt;&gt;&gt; exactly what I want it to do with the maximum amount of clarity.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it<br>&gt;&gt;&gt;&gt;&gt;&gt; detracts from the language at all.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; The *only* argument that I have heard for removing it is that some<br>&gt;&gt;&gt;&gt;&gt;&gt; people don&#39;t immediately intuit how to use it. I didn&#39;t have any trouble<br>&gt;&gt;&gt;&gt;&gt;&gt; with it at all. It follows one of the most basic programming patterns ever:<br>&gt;&gt;&gt;&gt;&gt;&gt; &quot;For all x in X, if predicate P is true, do something.&quot; The use of the<br>&gt;&gt;&gt;&gt;&gt;&gt; keyword &quot;where&quot; makes perfect sense in that context, and when I read it out<br>&gt;&gt;&gt;&gt;&gt;&gt; loud, it sounds natural: &quot;For all x in X where P, do something.&quot; That is an<br>&gt;&gt;&gt;&gt;&gt;&gt; elegant, succinct, and clear way of stating exactly what I want my program<br>&gt;&gt;&gt;&gt;&gt;&gt; to do.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t doubt that it has caused some confusion for some people, but<br>&gt;&gt;&gt;&gt;&gt;&gt; I&#39;m not sold that that is a good enough reason to get rid of it. It seems<br>&gt;&gt;&gt;&gt;&gt;&gt; strange to get rid of a tool because not everyone understands how to use it<br>&gt;&gt;&gt;&gt;&gt;&gt; immediately, without ever having to ask a single question. As long as its<br>&gt;&gt;&gt;&gt;&gt;&gt; not a dangerous tool (and it isn&#39;t), then keep it in the workshop for those<br>&gt;&gt;&gt;&gt;&gt;&gt; times when it comes in handy. And even if there is some initial confusion,<br>&gt;&gt;&gt;&gt;&gt;&gt; it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does this work<br>&gt;&gt;&gt;&gt;&gt;&gt; like X, or does this work like Y? Let&#39;s see...oh, it works like X. Ok.&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt; That&#39;s the entire learning curve...about 5 seconds of curiosity followed by<br>&gt;&gt;&gt;&gt;&gt;&gt; the blissful feeling of resolution.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Swift Repos&quot; folder and did the same search. Among the 15 repos in that<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; folder, a joint search returned about 650 hits on for-in (again with some<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Weird. My own Swift projects (not on Github :P) use “where” all the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; time with for loops. I really like it and think it reads *and* writes far<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; better as well as makes for nicer one-liners. In one project, by rough<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; count, I have about 20 that use “where” vs. 40 in that same project not<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; using “where”.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; In another smaller test project, there are only 10 for loops, but<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; even so one still managed to use where.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Not a lot of data without looking at even more projects, I admit,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; but this seems to suggest that the usage of “where” is going to be very<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; developer-dependent. Perhaps there’s some factor of prior background at<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; That is worrying if true, because it suggests that it&#39;s enabling<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I feel like “where” is a more declarative construct and that we<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; should be encouraging that way of thinking in general. When using it, it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; feels like “magic” for some reason - even though there’s nothing special<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; about it. It feels like I’ve made the language work *for me* a little bit<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; rather than me having to contort my solution to the will of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This may be highly subjective.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/b2dcc795/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/36603be464733b58cc53cecd480eeae8?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>let var go</string> &lt;letvargo at gmail.com&gt;<p>June 13, 2016 at 04:00:00pm</p></header><div class="content"><p>No, the key difference between for...in and forEach is that for...in allows<br>for early exit. They both allow you to &#39;continue&#39;, though in forEach it is<br>called &#39;return&#39;:<br></p><p>// This prints odd numbers, skipping (&quot;continuing&quot;) past the even numbers:<br>(0..&lt;100).forEach { if $0 % 2 == 0 { return } else { print($0) } }<br></p><p>Early-exit (&#39;break&#39;) is a different beast and requires a for...in loop.<br></p><p>You missed my main point. In some situations even &#39;continue&#39; may prove to<br>be useful. It is not my preferred method.<br></p><p>Why do you say, &quot;Swift is not a live-and-let-live language?&quot; Where do you<br>get that from? Are you really saying that there is not room in the Swift<br>community for people with different coding styles and preferences? I truly<br>believe that that attitude will be very harmful to the long term future of<br>the language.<br></p><p>On Mon, Jun 13, 2016 at 9:29 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br></p><p>&gt; See, the key difference between for...in and .forEach() is that one allows<br>&gt; for continue and break and the other doesn&#39;t. Swift is not a<br>&gt; live-and-let-live language: if you truly believe that using continue leads<br>&gt; to bad code, then propose its removal or the removal of for...in altogether.<br>&gt;<br>&gt; On Mon, Jun 13, 2016 at 11:21 let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; No, I wouldn&#39;t eliminate &#39;continue&#39;. Even though I consider it a<br>&gt;&gt; sub-optimal solution, I would keep it in the language. Why? A couple of<br>&gt;&gt; reasons:<br>&gt;&gt;<br>&gt;&gt; 1) I don&#39;t like it, but even &#39;continue&#39; may be the best available<br>&gt;&gt; solution in the context of a particular problem. I will look for other<br>&gt;&gt; options first, but I don&#39;t rule out the possibility that there might come a<br>&gt;&gt; time when it is the right tool for the job.<br>&gt;&gt;<br>&gt;&gt; 2) Some people like it. Not everyone feels the same way about it as me.<br>&gt;&gt; Some of the people who like it are better programmers than me. I have a lot<br>&gt;&gt; to learn, and someday I might discover that I love &#39;continue&#39; after all.<br>&gt;&gt; Until then, live-and-let-live is what I say. Everyone should control their<br>&gt;&gt; own flow :) Keep your hands off my &#39;where&#39; and I&#39;ll keep my hands off your<br>&gt;&gt; &#39;continue&#39; :)<br>&gt;&gt;<br>&gt;&gt; On Mon, Jun 13, 2016 at 8:56 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; On Mon, Jun 13, 2016 at 10:44 AM, let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I think we must be reading different discussions.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; What I have seen in this discussion is the following:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; a) The need to filter a for-in loop doesn&#39;t arise that often; but,<br>&gt;&gt;&gt;&gt; b) When it does arise, everyone who has chimed in on this thread<br>&gt;&gt;&gt;&gt; (except the two people who are proposing the change) thinks that the<br>&gt;&gt;&gt;&gt; &quot;where&quot; clause is the clearest, most expressive way to do it.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Something that would help me get on board with this change is more<br>&gt;&gt;&gt;&gt; evidence about what kind of problems it is actually creating.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; As best I can tell, this proposal got started because &quot;somewhere&quot; some<br>&gt;&gt;&gt;&gt; new programmers (no one knows how many) expressed some confusion (no one<br>&gt;&gt;&gt;&gt; knows how seriously they were confused, or how long it took them to figure<br>&gt;&gt;&gt;&gt; it out) about how the where clause worked in a for-in loop. For all we<br>&gt;&gt;&gt;&gt; know, once they learned the way it works, they may have said, &quot;Hey that&#39;s<br>&gt;&gt;&gt;&gt; cool! I&#39;m gonna use that from now on!&quot;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; In other words, you seem to be talking about removing a feature that is<br>&gt;&gt;&gt;&gt; liked by *a lot* people, based on some unsubstantiated reports of user<br>&gt;&gt;&gt;&gt; error that may or may not have been totally unsubstantial.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I don&#39;t want new programmers to be confused, either, but the &quot;where&quot;<br>&gt;&gt;&gt;&gt; clause is such a basic programming construct - the keyword is new, but the<br>&gt;&gt;&gt;&gt; idea itself is as old as programming - that I don&#39;t mind expecting new<br>&gt;&gt;&gt;&gt; programmers to learn how to use it. The learning curve should be incredibly<br>&gt;&gt;&gt;&gt; short - it is nothing more than a filter operation.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; There&#39;s something else here that is really important to me, though I<br>&gt;&gt;&gt;&gt; don&#39;t know how others feel about it.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Using the guard...continue approach that you are promoting is a code<br>&gt;&gt;&gt;&gt; smell. It puts control-flow logic inside the for-in loop. That is something<br>&gt;&gt;&gt;&gt; I have always tried to avoid. I know that the language allows for it, but I<br>&gt;&gt;&gt;&gt; believe it is bad programming practice. In fact, if you get rid of the<br>&gt;&gt;&gt;&gt; `where` keyword, I&#39;m still not going to use guard...continue. I&#39;ll just<br>&gt;&gt;&gt;&gt; filter the collection first and then loop it.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This is quite the statement. It sounds like you&#39;d be for the elimination<br>&gt;&gt;&gt; of `continue`?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; It is a code smell for the same reason that messing with the index<br>&gt;&gt;&gt;&gt; inside a for;; loop was a code smell. I was always taught never to do this:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; for var i = 0; i &lt; array.count, i++ {<br>&gt;&gt;&gt;&gt;   if iWantThisToLoopAnExtraTime {<br>&gt;&gt;&gt;&gt;     i--<br>&gt;&gt;&gt;&gt;   }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Why? Because code like that is confusing. It becomes difficult to know<br>&gt;&gt;&gt;&gt; how many times the loop will execute, what the looping logic is, etc. Sure,<br>&gt;&gt;&gt;&gt; I might get away with it most of the time, but it is bad practice and there<br>&gt;&gt;&gt;&gt; is always a better way to do what you want to do. The only thing that keeps<br>&gt;&gt;&gt;&gt; you from the better way is laziness.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; The same is true (albeit to a lesser degree) for the guard...continue.<br>&gt;&gt;&gt;&gt; It may not be as extreme, but it is still a code smell. It divides the<br>&gt;&gt;&gt;&gt; control-flow logic into two parts - one outside the loop, and one inside<br>&gt;&gt;&gt;&gt; the loop, and it suddenly becomes twice as easy to miss something.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Using for-in-where, all of the control-flow logic is on one single<br>&gt;&gt;&gt;&gt; line, and once it is known that &quot;where&quot; operates as a filter operation, it<br>&gt;&gt;&gt;&gt; all works together in a single, harmonious statement that declares exactly<br>&gt;&gt;&gt;&gt; what is going to happen in a way that is totally unambiguous.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; So by getting rid of the &quot;where&quot; clause, I believe that you are<br>&gt;&gt;&gt;&gt; actually encouraging bad programming practice. Instead of encouraging the<br>&gt;&gt;&gt;&gt; new user to learn this very simple construct that will ultimately make<br>&gt;&gt;&gt;&gt; their code safer and more expressive without dividing their control-flow<br>&gt;&gt;&gt;&gt; logic unnecessarily into two separate parts, you are encouraging them to<br>&gt;&gt;&gt;&gt; just &quot;do what they know&quot;. I think that is terrible, and you are doing them<br>&gt;&gt;&gt;&gt; a disservice.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; And from a personal standpoint, you are telling me that I have to write<br>&gt;&gt;&gt;&gt; smelly code, even though there is this perfectly good non-smelly option<br>&gt;&gt;&gt;&gt; sitting right there, because you don&#39;t want someone else to have to learn<br>&gt;&gt;&gt;&gt; something.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 5:29 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I think this discussion has made it pretty plain that what is claimed<br>&gt;&gt;&gt;&gt;&gt; to be &#39;so useful&#39; is barely ever used. Moreover, it provides no independent<br>&gt;&gt;&gt;&gt;&gt; uses. The point of these pitches is to sound out arguments, not, as far as<br>&gt;&gt;&gt;&gt;&gt; I was aware, to take a vote.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 1:54 AM Jose Cheyo Jimenez &lt;<br>&gt;&gt;&gt;&gt;&gt; cheyo at masters3d.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; --1<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; I think it would be a waste of the community&#39;s time to do a formal<br>&gt;&gt;&gt;&gt;&gt;&gt; review when only two people are in favor of this removal.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &#39;for in where&#39; is so useful especially since we don&#39;t have for;;;<br>&gt;&gt;&gt;&gt;&gt;&gt; loops anymore. I&#39;d say leave this alone; the majority doesn&#39;t want this<br>&gt;&gt;&gt;&gt;&gt;&gt; changed.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; On Jun 10, 2016, at 10:17 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use<br>&gt;&gt;&gt;&gt;&gt;&gt; it--is indicative of a key worry here: it&#39;s inessential to the language and<br>&gt;&gt;&gt;&gt;&gt;&gt; promotes dialects wherein certain people use it and others wherein they<br>&gt;&gt;&gt;&gt;&gt;&gt; don&#39;t. This is an anti-goal.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Leave it in!<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I do<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; it is because I&#39;ve decided that in the context of that piece of code it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; does exactly what I want it to do with the maximum amount of clarity.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; detracts from the language at all.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The *only* argument that I have heard for removing it is that some<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; people don&#39;t immediately intuit how to use it. I didn&#39;t have any trouble<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; with it at all. It follows one of the most basic programming patterns ever:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;For all x in X, if predicate P is true, do something.&quot; The use of the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; keyword &quot;where&quot; makes perfect sense in that context, and when I read it out<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; loud, it sounds natural: &quot;For all x in X where P, do something.&quot; That is an<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; elegant, succinct, and clear way of stating exactly what I want my program<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; to do.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t doubt that it has caused some confusion for some people, but<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I&#39;m not sold that that is a good enough reason to get rid of it. It seems<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; strange to get rid of a tool because not everyone understands how to use it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; immediately, without ever having to ask a single question. As long as its<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; not a dangerous tool (and it isn&#39;t), then keep it in the workshop for those<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; times when it comes in handy. And even if there is some initial confusion,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does this work<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; like X, or does this work like Y? Let&#39;s see...oh, it works like X. Ok.&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; That&#39;s the entire learning curve...about 5 seconds of curiosity followed by<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; the blissful feeling of resolution.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Party Swift Repos&quot; folder and did the same search. Among the 15 repos in<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that folder, a joint search returned about 650 hits on for-in (again with<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; some false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Weird. My own Swift projects (not on Github :P) use “where” all<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the time with for loops. I really like it and think it reads *and* writes<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; far better as well as makes for nicer one-liners. In one project, by rough<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; count, I have about 20 that use “where” vs. 40 in that same project not<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; using “where”.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; In another smaller test project, there are only 10 for loops, but<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; even so one still managed to use where.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Not a lot of data without looking at even more projects, I admit,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; but this seems to suggest that the usage of “where” is going to be very<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; developer-dependent. Perhaps there’s some factor of prior background at<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; That is worrying if true, because it suggests that it&#39;s enabling<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I feel like “where” is a more declarative construct and that we<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; should be encouraging that way of thinking in general. When using it, it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; feels like “magic” for some reason - even though there’s nothing special<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; about it. It feels like I’ve made the language work *for me* a little bit<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; rather than me having to contort my solution to the will of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This may be highly subjective.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/c353d2ea/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 13, 2016 at 11:00:00am</p></header><div class="content"><p>On Mon, Jun 13, 2016 at 11:50 AM, let var go &lt;letvargo at gmail.com&gt; wrote:<br></p><p>&gt; No, the key difference between for...in and forEach is that for...in<br>&gt; allows for early exit. They both allow you to &#39;continue&#39;, though in forEach<br>&gt; it is called &#39;return&#39;:<br>&gt;<br>&gt; // This prints odd numbers, skipping (&quot;continuing&quot;) past the even numbers:<br>&gt; (0..&lt;100).forEach { if $0 % 2 == 0 { return } else { print($0) } }<br>&gt;<br>&gt; Early-exit (&#39;break&#39;) is a different beast and requires a for...in loop.<br>&gt;<br>&gt; You missed my main point. In some situations even &#39;continue&#39; may prove to<br>&gt; be useful. It is not my preferred method.<br>&gt;<br>&gt; Why do you say, &quot;Swift is not a live-and-let-live language?&quot; Where do you<br>&gt; get that from? Are you really saying that there is not room in the Swift<br>&gt; community for people with different coding styles and preferences? I truly<br>&gt; believe that that attitude will be very harmful to the long term future of<br>&gt; the language.<br>&gt;<br></p><p>In the words of Chris Lattner: We intentionally want Swift to have a common<br>“center of gravity” and be an “opinionated” language, rather than fall to<br>the “design by committee” approach that leads to a watered-down design.<br></p><p><br>&gt;<br>&gt; On Mon, Jun 13, 2016 at 9:29 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; See, the key difference between for...in and .forEach() is that one<br>&gt;&gt; allows for continue and break and the other doesn&#39;t. Swift is not a<br>&gt;&gt; live-and-let-live language: if you truly believe that using continue leads<br>&gt;&gt; to bad code, then propose its removal or the removal of for...in altogether.<br>&gt;&gt;<br>&gt;&gt; On Mon, Jun 13, 2016 at 11:21 let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; No, I wouldn&#39;t eliminate &#39;continue&#39;. Even though I consider it a<br>&gt;&gt;&gt; sub-optimal solution, I would keep it in the language. Why? A couple of<br>&gt;&gt;&gt; reasons:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 1) I don&#39;t like it, but even &#39;continue&#39; may be the best available<br>&gt;&gt;&gt; solution in the context of a particular problem. I will look for other<br>&gt;&gt;&gt; options first, but I don&#39;t rule out the possibility that there might come a<br>&gt;&gt;&gt; time when it is the right tool for the job.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 2) Some people like it. Not everyone feels the same way about it as me.<br>&gt;&gt;&gt; Some of the people who like it are better programmers than me. I have a lot<br>&gt;&gt;&gt; to learn, and someday I might discover that I love &#39;continue&#39; after all.<br>&gt;&gt;&gt; Until then, live-and-let-live is what I say. Everyone should control their<br>&gt;&gt;&gt; own flow :) Keep your hands off my &#39;where&#39; and I&#39;ll keep my hands off your<br>&gt;&gt;&gt; &#39;continue&#39; :)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Mon, Jun 13, 2016 at 8:56 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 10:44 AM, let var go &lt;letvargo at gmail.com&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I think we must be reading different discussions.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; What I have seen in this discussion is the following:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; a) The need to filter a for-in loop doesn&#39;t arise that often; but,<br>&gt;&gt;&gt;&gt;&gt; b) When it does arise, everyone who has chimed in on this thread<br>&gt;&gt;&gt;&gt;&gt; (except the two people who are proposing the change) thinks that the<br>&gt;&gt;&gt;&gt;&gt; &quot;where&quot; clause is the clearest, most expressive way to do it.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Something that would help me get on board with this change is more<br>&gt;&gt;&gt;&gt;&gt; evidence about what kind of problems it is actually creating.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; As best I can tell, this proposal got started because &quot;somewhere&quot; some<br>&gt;&gt;&gt;&gt;&gt; new programmers (no one knows how many) expressed some confusion (no one<br>&gt;&gt;&gt;&gt;&gt; knows how seriously they were confused, or how long it took them to figure<br>&gt;&gt;&gt;&gt;&gt; it out) about how the where clause worked in a for-in loop. For all we<br>&gt;&gt;&gt;&gt;&gt; know, once they learned the way it works, they may have said, &quot;Hey that&#39;s<br>&gt;&gt;&gt;&gt;&gt; cool! I&#39;m gonna use that from now on!&quot;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; In other words, you seem to be talking about removing a feature that<br>&gt;&gt;&gt;&gt;&gt; is liked by *a lot* people, based on some unsubstantiated reports of user<br>&gt;&gt;&gt;&gt;&gt; error that may or may not have been totally unsubstantial.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I don&#39;t want new programmers to be confused, either, but the &quot;where&quot;<br>&gt;&gt;&gt;&gt;&gt; clause is such a basic programming construct - the keyword is new, but the<br>&gt;&gt;&gt;&gt;&gt; idea itself is as old as programming - that I don&#39;t mind expecting new<br>&gt;&gt;&gt;&gt;&gt; programmers to learn how to use it. The learning curve should be incredibly<br>&gt;&gt;&gt;&gt;&gt; short - it is nothing more than a filter operation.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; There&#39;s something else here that is really important to me, though I<br>&gt;&gt;&gt;&gt;&gt; don&#39;t know how others feel about it.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Using the guard...continue approach that you are promoting is a code<br>&gt;&gt;&gt;&gt;&gt; smell. It puts control-flow logic inside the for-in loop. That is something<br>&gt;&gt;&gt;&gt;&gt; I have always tried to avoid. I know that the language allows for it, but I<br>&gt;&gt;&gt;&gt;&gt; believe it is bad programming practice. In fact, if you get rid of the<br>&gt;&gt;&gt;&gt;&gt; `where` keyword, I&#39;m still not going to use guard...continue. I&#39;ll just<br>&gt;&gt;&gt;&gt;&gt; filter the collection first and then loop it.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; This is quite the statement. It sounds like you&#39;d be for the<br>&gt;&gt;&gt;&gt; elimination of `continue`?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; It is a code smell for the same reason that messing with the index<br>&gt;&gt;&gt;&gt;&gt; inside a for;; loop was a code smell. I was always taught never to do this:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; for var i = 0; i &lt; array.count, i++ {<br>&gt;&gt;&gt;&gt;&gt;   if iWantThisToLoopAnExtraTime {<br>&gt;&gt;&gt;&gt;&gt;     i--<br>&gt;&gt;&gt;&gt;&gt;   }<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Why? Because code like that is confusing. It becomes difficult to know<br>&gt;&gt;&gt;&gt;&gt; how many times the loop will execute, what the looping logic is, etc. Sure,<br>&gt;&gt;&gt;&gt;&gt; I might get away with it most of the time, but it is bad practice and there<br>&gt;&gt;&gt;&gt;&gt; is always a better way to do what you want to do. The only thing that keeps<br>&gt;&gt;&gt;&gt;&gt; you from the better way is laziness.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; The same is true (albeit to a lesser degree) for the guard...continue.<br>&gt;&gt;&gt;&gt;&gt; It may not be as extreme, but it is still a code smell. It divides the<br>&gt;&gt;&gt;&gt;&gt; control-flow logic into two parts - one outside the loop, and one inside<br>&gt;&gt;&gt;&gt;&gt; the loop, and it suddenly becomes twice as easy to miss something.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Using for-in-where, all of the control-flow logic is on one single<br>&gt;&gt;&gt;&gt;&gt; line, and once it is known that &quot;where&quot; operates as a filter operation, it<br>&gt;&gt;&gt;&gt;&gt; all works together in a single, harmonious statement that declares exactly<br>&gt;&gt;&gt;&gt;&gt; what is going to happen in a way that is totally unambiguous.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; So by getting rid of the &quot;where&quot; clause, I believe that you are<br>&gt;&gt;&gt;&gt;&gt; actually encouraging bad programming practice. Instead of encouraging the<br>&gt;&gt;&gt;&gt;&gt; new user to learn this very simple construct that will ultimately make<br>&gt;&gt;&gt;&gt;&gt; their code safer and more expressive without dividing their control-flow<br>&gt;&gt;&gt;&gt;&gt; logic unnecessarily into two separate parts, you are encouraging them to<br>&gt;&gt;&gt;&gt;&gt; just &quot;do what they know&quot;. I think that is terrible, and you are doing them<br>&gt;&gt;&gt;&gt;&gt; a disservice.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; And from a personal standpoint, you are telling me that I have to<br>&gt;&gt;&gt;&gt;&gt; write smelly code, even though there is this perfectly good non-smelly<br>&gt;&gt;&gt;&gt;&gt; option sitting right there, because you don&#39;t want someone else to have to<br>&gt;&gt;&gt;&gt;&gt; learn something.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 5:29 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; I think this discussion has made it pretty plain that what is claimed<br>&gt;&gt;&gt;&gt;&gt;&gt; to be &#39;so useful&#39; is barely ever used. Moreover, it provides no independent<br>&gt;&gt;&gt;&gt;&gt;&gt; uses. The point of these pitches is to sound out arguments, not, as far as<br>&gt;&gt;&gt;&gt;&gt;&gt; I was aware, to take a vote.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 1:54 AM Jose Cheyo Jimenez &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt; cheyo at masters3d.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; --1<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think it would be a waste of the community&#39;s time to do a formal<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; review when only two people are in favor of this removal.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#39;for in where&#39; is so useful especially since we don&#39;t have for;;;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; loops anymore. I&#39;d say leave this alone; the majority doesn&#39;t want this<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; changed.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 10, 2016, at 10:17 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; it--is indicative of a key worry here: it&#39;s inessential to the language and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; promotes dialects wherein certain people use it and others wherein they<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; don&#39;t. This is an anti-goal.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Leave it in!<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I do<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; it is because I&#39;ve decided that in the context of that piece of code it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; does exactly what I want it to do with the maximum amount of clarity.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; detracts from the language at all.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The *only* argument that I have heard for removing it is that some<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; people don&#39;t immediately intuit how to use it. I didn&#39;t have any trouble<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; with it at all. It follows one of the most basic programming patterns ever:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;For all x in X, if predicate P is true, do something.&quot; The use of the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; keyword &quot;where&quot; makes perfect sense in that context, and when I read it out<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; loud, it sounds natural: &quot;For all x in X where P, do something.&quot; That is an<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; elegant, succinct, and clear way of stating exactly what I want my program<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; to do.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t doubt that it has caused some confusion for some people,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; but I&#39;m not sold that that is a good enough reason to get rid of it. It<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; seems strange to get rid of a tool because not everyone understands how to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; use it immediately, without ever having to ask a single question. As long<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; as its not a dangerous tool (and it isn&#39;t), then keep it in the workshop<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; for those times when it comes in handy. And even if there is some initial<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; confusion, it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; this work like X, or does this work like Y? Let&#39;s see...oh, it works like<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; X. Ok.&quot; That&#39;s the entire learning curve...about 5 seconds of curiosity<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; followed by the blissful feeling of resolution.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Party Swift Repos&quot; folder and did the same search. Among the 15 repos in<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that folder, a joint search returned about 650 hits on for-in (again with<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; some false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Weird. My own Swift projects (not on Github :P) use “where” all<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the time with for loops. I really like it and think it reads *and* writes<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; far better as well as makes for nicer one-liners. In one project, by rough<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; count, I have about 20 that use “where” vs. 40 in that same project not<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; using “where”.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; In another smaller test project, there are only 10 for loops, but<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; even so one still managed to use where.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Not a lot of data without looking at even more projects, I admit,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; but this seems to suggest that the usage of “where” is going to be very<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; developer-dependent. Perhaps there’s some factor of prior background at<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; That is worrying if true, because it suggests that it&#39;s enabling<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I feel like “where” is a more declarative construct and that we<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; should be encouraging that way of thinking in general. When using it, it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; feels like “magic” for some reason - even though there’s nothing special<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; about it. It feels like I’ve made the language work *for me* a little bit<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; rather than me having to contort my solution to the will of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This may be highly subjective.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/fd597dea/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/36603be464733b58cc53cecd480eeae8?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>let var go</string> &lt;letvargo at gmail.com&gt;<p>June 13, 2016 at 05:00:00pm</p></header><div class="content"><p>Well, the &quot;harmful&quot; nature of it is something that still hasn&#39;t been<br>established as far as I&#39;m concerned. I came to this discussion a little<br>late, but after reading through as many old email comments as I could find,<br>the only harm is an undocumented report that somewhere there were some<br>relatively new users to Swift who had to ask a question about how<br>for-in-where worked. If you have more information about how widespread this<br>problem is and how much trouble it is really causing in the world, then<br>please provide it.<br></p><p>On Mon, Jun 13, 2016 at 9:50 AM let var go &lt;letvargo at gmail.com&gt; wrote:<br></p><p>&gt; No, the key difference between for...in and forEach is that for...in<br>&gt; allows for early exit. They both allow you to &#39;continue&#39;, though in forEach<br>&gt; it is called &#39;return&#39;:<br>&gt;<br>&gt; // This prints odd numbers, skipping (&quot;continuing&quot;) past the even numbers:<br>&gt; (0..&lt;100).forEach { if $0 % 2 == 0 { return } else { print($0) } }<br>&gt;<br>&gt; Early-exit (&#39;break&#39;) is a different beast and requires a for...in loop.<br>&gt;<br>&gt; You missed my main point. In some situations even &#39;continue&#39; may prove to<br>&gt; be useful. It is not my preferred method.<br>&gt;<br>&gt; Why do you say, &quot;Swift is not a live-and-let-live language?&quot; Where do you<br>&gt; get that from? Are you really saying that there is not room in the Swift<br>&gt; community for people with different coding styles and preferences? I truly<br>&gt; believe that that attitude will be very harmful to the long term future of<br>&gt; the language.<br>&gt;<br>&gt; On Mon, Jun 13, 2016 at 9:29 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; See, the key difference between for...in and .forEach() is that one<br>&gt;&gt; allows for continue and break and the other doesn&#39;t. Swift is not a<br>&gt;&gt; live-and-let-live language: if you truly believe that using continue leads<br>&gt;&gt; to bad code, then propose its removal or the removal of for...in altogether.<br>&gt;&gt;<br>&gt;&gt; On Mon, Jun 13, 2016 at 11:21 let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; No, I wouldn&#39;t eliminate &#39;continue&#39;. Even though I consider it a<br>&gt;&gt;&gt; sub-optimal solution, I would keep it in the language. Why? A couple of<br>&gt;&gt;&gt; reasons:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 1) I don&#39;t like it, but even &#39;continue&#39; may be the best available<br>&gt;&gt;&gt; solution in the context of a particular problem. I will look for other<br>&gt;&gt;&gt; options first, but I don&#39;t rule out the possibility that there might come a<br>&gt;&gt;&gt; time when it is the right tool for the job.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 2) Some people like it. Not everyone feels the same way about it as me.<br>&gt;&gt;&gt; Some of the people who like it are better programmers than me. I have a lot<br>&gt;&gt;&gt; to learn, and someday I might discover that I love &#39;continue&#39; after all.<br>&gt;&gt;&gt; Until then, live-and-let-live is what I say. Everyone should control their<br>&gt;&gt;&gt; own flow :) Keep your hands off my &#39;where&#39; and I&#39;ll keep my hands off your<br>&gt;&gt;&gt; &#39;continue&#39; :)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Mon, Jun 13, 2016 at 8:56 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 10:44 AM, let var go &lt;letvargo at gmail.com&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I think we must be reading different discussions.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; What I have seen in this discussion is the following:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; a) The need to filter a for-in loop doesn&#39;t arise that often; but,<br>&gt;&gt;&gt;&gt;&gt; b) When it does arise, everyone who has chimed in on this thread<br>&gt;&gt;&gt;&gt;&gt; (except the two people who are proposing the change) thinks that the<br>&gt;&gt;&gt;&gt;&gt; &quot;where&quot; clause is the clearest, most expressive way to do it.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Something that would help me get on board with this change is more<br>&gt;&gt;&gt;&gt;&gt; evidence about what kind of problems it is actually creating.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; As best I can tell, this proposal got started because &quot;somewhere&quot; some<br>&gt;&gt;&gt;&gt;&gt; new programmers (no one knows how many) expressed some confusion (no one<br>&gt;&gt;&gt;&gt;&gt; knows how seriously they were confused, or how long it took them to figure<br>&gt;&gt;&gt;&gt;&gt; it out) about how the where clause worked in a for-in loop. For all we<br>&gt;&gt;&gt;&gt;&gt; know, once they learned the way it works, they may have said, &quot;Hey that&#39;s<br>&gt;&gt;&gt;&gt;&gt; cool! I&#39;m gonna use that from now on!&quot;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; In other words, you seem to be talking about removing a feature that<br>&gt;&gt;&gt;&gt;&gt; is liked by *a lot* people, based on some unsubstantiated reports of user<br>&gt;&gt;&gt;&gt;&gt; error that may or may not have been totally unsubstantial.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I don&#39;t want new programmers to be confused, either, but the &quot;where&quot;<br>&gt;&gt;&gt;&gt;&gt; clause is such a basic programming construct - the keyword is new, but the<br>&gt;&gt;&gt;&gt;&gt; idea itself is as old as programming - that I don&#39;t mind expecting new<br>&gt;&gt;&gt;&gt;&gt; programmers to learn how to use it. The learning curve should be incredibly<br>&gt;&gt;&gt;&gt;&gt; short - it is nothing more than a filter operation.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; There&#39;s something else here that is really important to me, though I<br>&gt;&gt;&gt;&gt;&gt; don&#39;t know how others feel about it.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Using the guard...continue approach that you are promoting is a code<br>&gt;&gt;&gt;&gt;&gt; smell. It puts control-flow logic inside the for-in loop. That is something<br>&gt;&gt;&gt;&gt;&gt; I have always tried to avoid. I know that the language allows for it, but I<br>&gt;&gt;&gt;&gt;&gt; believe it is bad programming practice. In fact, if you get rid of the<br>&gt;&gt;&gt;&gt;&gt; `where` keyword, I&#39;m still not going to use guard...continue. I&#39;ll just<br>&gt;&gt;&gt;&gt;&gt; filter the collection first and then loop it.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; This is quite the statement. It sounds like you&#39;d be for the<br>&gt;&gt;&gt;&gt; elimination of `continue`?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; It is a code smell for the same reason that messing with the index<br>&gt;&gt;&gt;&gt;&gt; inside a for;; loop was a code smell. I was always taught never to do this:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; for var i = 0; i &lt; array.count, i++ {<br>&gt;&gt;&gt;&gt;&gt;   if iWantThisToLoopAnExtraTime {<br>&gt;&gt;&gt;&gt;&gt;     i--<br>&gt;&gt;&gt;&gt;&gt;   }<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Why? Because code like that is confusing. It becomes difficult to know<br>&gt;&gt;&gt;&gt;&gt; how many times the loop will execute, what the looping logic is, etc. Sure,<br>&gt;&gt;&gt;&gt;&gt; I might get away with it most of the time, but it is bad practice and there<br>&gt;&gt;&gt;&gt;&gt; is always a better way to do what you want to do. The only thing that keeps<br>&gt;&gt;&gt;&gt;&gt; you from the better way is laziness.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; The same is true (albeit to a lesser degree) for the guard...continue.<br>&gt;&gt;&gt;&gt;&gt; It may not be as extreme, but it is still a code smell. It divides the<br>&gt;&gt;&gt;&gt;&gt; control-flow logic into two parts - one outside the loop, and one inside<br>&gt;&gt;&gt;&gt;&gt; the loop, and it suddenly becomes twice as easy to miss something.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Using for-in-where, all of the control-flow logic is on one single<br>&gt;&gt;&gt;&gt;&gt; line, and once it is known that &quot;where&quot; operates as a filter operation, it<br>&gt;&gt;&gt;&gt;&gt; all works together in a single, harmonious statement that declares exactly<br>&gt;&gt;&gt;&gt;&gt; what is going to happen in a way that is totally unambiguous.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; So by getting rid of the &quot;where&quot; clause, I believe that you are<br>&gt;&gt;&gt;&gt;&gt; actually encouraging bad programming practice. Instead of encouraging the<br>&gt;&gt;&gt;&gt;&gt; new user to learn this very simple construct that will ultimately make<br>&gt;&gt;&gt;&gt;&gt; their code safer and more expressive without dividing their control-flow<br>&gt;&gt;&gt;&gt;&gt; logic unnecessarily into two separate parts, you are encouraging them to<br>&gt;&gt;&gt;&gt;&gt; just &quot;do what they know&quot;. I think that is terrible, and you are doing them<br>&gt;&gt;&gt;&gt;&gt; a disservice.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; And from a personal standpoint, you are telling me that I have to<br>&gt;&gt;&gt;&gt;&gt; write smelly code, even though there is this perfectly good non-smelly<br>&gt;&gt;&gt;&gt;&gt; option sitting right there, because you don&#39;t want someone else to have to<br>&gt;&gt;&gt;&gt;&gt; learn something.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 5:29 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; I think this discussion has made it pretty plain that what is claimed<br>&gt;&gt;&gt;&gt;&gt;&gt; to be &#39;so useful&#39; is barely ever used. Moreover, it provides no independent<br>&gt;&gt;&gt;&gt;&gt;&gt; uses. The point of these pitches is to sound out arguments, not, as far as<br>&gt;&gt;&gt;&gt;&gt;&gt; I was aware, to take a vote.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 1:54 AM Jose Cheyo Jimenez &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt; cheyo at masters3d.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; --1<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think it would be a waste of the community&#39;s time to do a formal<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; review when only two people are in favor of this removal.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#39;for in where&#39; is so useful especially since we don&#39;t have for;;;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; loops anymore. I&#39;d say leave this alone; the majority doesn&#39;t want this<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; changed.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 10, 2016, at 10:17 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; it--is indicative of a key worry here: it&#39;s inessential to the language and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; promotes dialects wherein certain people use it and others wherein they<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; don&#39;t. This is an anti-goal.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Leave it in!<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I do<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; it is because I&#39;ve decided that in the context of that piece of code it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; does exactly what I want it to do with the maximum amount of clarity.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; detracts from the language at all.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The *only* argument that I have heard for removing it is that some<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; people don&#39;t immediately intuit how to use it. I didn&#39;t have any trouble<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; with it at all. It follows one of the most basic programming patterns ever:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;For all x in X, if predicate P is true, do something.&quot; The use of the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; keyword &quot;where&quot; makes perfect sense in that context, and when I read it out<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; loud, it sounds natural: &quot;For all x in X where P, do something.&quot; That is an<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; elegant, succinct, and clear way of stating exactly what I want my program<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; to do.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t doubt that it has caused some confusion for some people,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; but I&#39;m not sold that that is a good enough reason to get rid of it. It<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; seems strange to get rid of a tool because not everyone understands how to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; use it immediately, without ever having to ask a single question. As long<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; as its not a dangerous tool (and it isn&#39;t), then keep it in the workshop<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; for those times when it comes in handy. And even if there is some initial<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; confusion, it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; this work like X, or does this work like Y? Let&#39;s see...oh, it works like<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; X. Ok.&quot; That&#39;s the entire learning curve...about 5 seconds of curiosity<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; followed by the blissful feeling of resolution.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Party Swift Repos&quot; folder and did the same search. Among the 15 repos in<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that folder, a joint search returned about 650 hits on for-in (again with<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; some false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Weird. My own Swift projects (not on Github :P) use “where” all<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the time with for loops. I really like it and think it reads *and* writes<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; far better as well as makes for nicer one-liners. In one project, by rough<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; count, I have about 20 that use “where” vs. 40 in that same project not<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; using “where”.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; In another smaller test project, there are only 10 for loops, but<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; even so one still managed to use where.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Not a lot of data without looking at even more projects, I admit,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; but this seems to suggest that the usage of “where” is going to be very<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; developer-dependent. Perhaps there’s some factor of prior background at<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; That is worrying if true, because it suggests that it&#39;s enabling<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I feel like “where” is a more declarative construct and that we<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; should be encouraging that way of thinking in general. When using it, it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; feels like “magic” for some reason - even though there’s nothing special<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; about it. It feels like I’ve made the language work *for me* a little bit<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; rather than me having to contort my solution to the will of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This may be highly subjective.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/dad50642/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 13, 2016 at 12:00:00pm</p></header><div class="content"><p>On Mon, Jun 13, 2016 at 12:01 PM, let var go &lt;letvargo at gmail.com&gt; wrote:<br></p><p>&gt; Well, the &quot;harmful&quot; nature of it is something that still hasn&#39;t been<br>&gt; established as far as I&#39;m concerned. I came to this discussion a little<br>&gt; late, but after reading through as many old email comments as I could find,<br>&gt; the only harm is an undocumented report that somewhere there were some<br>&gt; relatively new users to Swift who had to ask a question about how<br>&gt; for-in-where worked. If you have more information about how widespread this<br>&gt; problem is and how much trouble it is really causing in the world, then<br>&gt; please provide it.<br>&gt;<br></p><p>Shawn Erickson gave a pretty compelling account on June 8. I can&#39;t tell you<br>how widespread it is in the world, since existence of the feature itself<br>does not seem to be widely known. I can tell you that the working of the<br>`where` clause was thought to be confusing enough that it&#39;s explicitly<br>called out in _Advanced Swift_, hardly a text addressed to new users. Thus,<br>this proposal. If the core team, with their perspective on internal and<br>external users, agrees that this is a problem, then it&#39;ll go. If not, then<br>it&#39;ll stay.<br></p><p><br>&gt;<br>&gt; On Mon, Jun 13, 2016 at 9:50 AM let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; No, the key difference between for...in and forEach is that for...in<br>&gt;&gt; allows for early exit. They both allow you to &#39;continue&#39;, though in forEach<br>&gt;&gt; it is called &#39;return&#39;:<br>&gt;&gt;<br>&gt;&gt; // This prints odd numbers, skipping (&quot;continuing&quot;) past the even numbers:<br>&gt;&gt; (0..&lt;100).forEach { if $0 % 2 == 0 { return } else { print($0) } }<br>&gt;&gt;<br>&gt;&gt; Early-exit (&#39;break&#39;) is a different beast and requires a for...in loop.<br>&gt;&gt;<br>&gt;&gt; You missed my main point. In some situations even &#39;continue&#39; may prove to<br>&gt;&gt; be useful. It is not my preferred method.<br>&gt;&gt;<br>&gt;&gt; Why do you say, &quot;Swift is not a live-and-let-live language?&quot; Where do you<br>&gt;&gt; get that from? Are you really saying that there is not room in the Swift<br>&gt;&gt; community for people with different coding styles and preferences? I truly<br>&gt;&gt; believe that that attitude will be very harmful to the long term future of<br>&gt;&gt; the language.<br>&gt;&gt;<br>&gt;&gt; On Mon, Jun 13, 2016 at 9:29 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; See, the key difference between for...in and .forEach() is that one<br>&gt;&gt;&gt; allows for continue and break and the other doesn&#39;t. Swift is not a<br>&gt;&gt;&gt; live-and-let-live language: if you truly believe that using continue leads<br>&gt;&gt;&gt; to bad code, then propose its removal or the removal of for...in altogether.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Mon, Jun 13, 2016 at 11:21 let var go &lt;letvargo at gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; No, I wouldn&#39;t eliminate &#39;continue&#39;. Even though I consider it a<br>&gt;&gt;&gt;&gt; sub-optimal solution, I would keep it in the language. Why? A couple of<br>&gt;&gt;&gt;&gt; reasons:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 1) I don&#39;t like it, but even &#39;continue&#39; may be the best available<br>&gt;&gt;&gt;&gt; solution in the context of a particular problem. I will look for other<br>&gt;&gt;&gt;&gt; options first, but I don&#39;t rule out the possibility that there might come a<br>&gt;&gt;&gt;&gt; time when it is the right tool for the job.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 2) Some people like it. Not everyone feels the same way about it as me.<br>&gt;&gt;&gt;&gt; Some of the people who like it are better programmers than me. I have a lot<br>&gt;&gt;&gt;&gt; to learn, and someday I might discover that I love &#39;continue&#39; after all.<br>&gt;&gt;&gt;&gt; Until then, live-and-let-live is what I say. Everyone should control their<br>&gt;&gt;&gt;&gt; own flow :) Keep your hands off my &#39;where&#39; and I&#39;ll keep my hands off your<br>&gt;&gt;&gt;&gt; &#39;continue&#39; :)<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 8:56 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 10:44 AM, let var go &lt;letvargo at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; I think we must be reading different discussions.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; What I have seen in this discussion is the following:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; a) The need to filter a for-in loop doesn&#39;t arise that often; but,<br>&gt;&gt;&gt;&gt;&gt;&gt; b) When it does arise, everyone who has chimed in on this thread<br>&gt;&gt;&gt;&gt;&gt;&gt; (except the two people who are proposing the change) thinks that the<br>&gt;&gt;&gt;&gt;&gt;&gt; &quot;where&quot; clause is the clearest, most expressive way to do it.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Something that would help me get on board with this change is more<br>&gt;&gt;&gt;&gt;&gt;&gt; evidence about what kind of problems it is actually creating.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; As best I can tell, this proposal got started because &quot;somewhere&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt; some new programmers (no one knows how many) expressed some confusion (no<br>&gt;&gt;&gt;&gt;&gt;&gt; one knows how seriously they were confused, or how long it took them to<br>&gt;&gt;&gt;&gt;&gt;&gt; figure it out) about how the where clause worked in a for-in loop. For all<br>&gt;&gt;&gt;&gt;&gt;&gt; we know, once they learned the way it works, they may have said, &quot;Hey<br>&gt;&gt;&gt;&gt;&gt;&gt; that&#39;s cool! I&#39;m gonna use that from now on!&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; In other words, you seem to be talking about removing a feature that<br>&gt;&gt;&gt;&gt;&gt;&gt; is liked by *a lot* people, based on some unsubstantiated reports of user<br>&gt;&gt;&gt;&gt;&gt;&gt; error that may or may not have been totally unsubstantial.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t want new programmers to be confused, either, but the &quot;where&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt; clause is such a basic programming construct - the keyword is new, but the<br>&gt;&gt;&gt;&gt;&gt;&gt; idea itself is as old as programming - that I don&#39;t mind expecting new<br>&gt;&gt;&gt;&gt;&gt;&gt; programmers to learn how to use it. The learning curve should be incredibly<br>&gt;&gt;&gt;&gt;&gt;&gt; short - it is nothing more than a filter operation.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; There&#39;s something else here that is really important to me, though I<br>&gt;&gt;&gt;&gt;&gt;&gt; don&#39;t know how others feel about it.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Using the guard...continue approach that you are promoting is a code<br>&gt;&gt;&gt;&gt;&gt;&gt; smell. It puts control-flow logic inside the for-in loop. That is something<br>&gt;&gt;&gt;&gt;&gt;&gt; I have always tried to avoid. I know that the language allows for it, but I<br>&gt;&gt;&gt;&gt;&gt;&gt; believe it is bad programming practice. In fact, if you get rid of the<br>&gt;&gt;&gt;&gt;&gt;&gt; `where` keyword, I&#39;m still not going to use guard...continue. I&#39;ll just<br>&gt;&gt;&gt;&gt;&gt;&gt; filter the collection first and then loop it.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; This is quite the statement. It sounds like you&#39;d be for the<br>&gt;&gt;&gt;&gt;&gt; elimination of `continue`?<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; It is a code smell for the same reason that messing with the index<br>&gt;&gt;&gt;&gt;&gt;&gt; inside a for;; loop was a code smell. I was always taught never to do this:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; for var i = 0; i &lt; array.count, i++ {<br>&gt;&gt;&gt;&gt;&gt;&gt;   if iWantThisToLoopAnExtraTime {<br>&gt;&gt;&gt;&gt;&gt;&gt;     i--<br>&gt;&gt;&gt;&gt;&gt;&gt;   }<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Why? Because code like that is confusing. It becomes difficult to<br>&gt;&gt;&gt;&gt;&gt;&gt; know how many times the loop will execute, what the looping logic is, etc.<br>&gt;&gt;&gt;&gt;&gt;&gt; Sure, I might get away with it most of the time, but it is bad practice and<br>&gt;&gt;&gt;&gt;&gt;&gt; there is always a better way to do what you want to do. The only thing that<br>&gt;&gt;&gt;&gt;&gt;&gt; keeps you from the better way is laziness.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; The same is true (albeit to a lesser degree) for the<br>&gt;&gt;&gt;&gt;&gt;&gt; guard...continue. It may not be as extreme, but it is still a code smell.<br>&gt;&gt;&gt;&gt;&gt;&gt; It divides the control-flow logic into two parts - one outside the loop,<br>&gt;&gt;&gt;&gt;&gt;&gt; and one inside the loop, and it suddenly becomes twice as easy to miss<br>&gt;&gt;&gt;&gt;&gt;&gt; something.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Using for-in-where, all of the control-flow logic is on one single<br>&gt;&gt;&gt;&gt;&gt;&gt; line, and once it is known that &quot;where&quot; operates as a filter operation, it<br>&gt;&gt;&gt;&gt;&gt;&gt; all works together in a single, harmonious statement that declares exactly<br>&gt;&gt;&gt;&gt;&gt;&gt; what is going to happen in a way that is totally unambiguous.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; So by getting rid of the &quot;where&quot; clause, I believe that you are<br>&gt;&gt;&gt;&gt;&gt;&gt; actually encouraging bad programming practice. Instead of encouraging the<br>&gt;&gt;&gt;&gt;&gt;&gt; new user to learn this very simple construct that will ultimately make<br>&gt;&gt;&gt;&gt;&gt;&gt; their code safer and more expressive without dividing their control-flow<br>&gt;&gt;&gt;&gt;&gt;&gt; logic unnecessarily into two separate parts, you are encouraging them to<br>&gt;&gt;&gt;&gt;&gt;&gt; just &quot;do what they know&quot;. I think that is terrible, and you are doing them<br>&gt;&gt;&gt;&gt;&gt;&gt; a disservice.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; And from a personal standpoint, you are telling me that I have to<br>&gt;&gt;&gt;&gt;&gt;&gt; write smelly code, even though there is this perfectly good non-smelly<br>&gt;&gt;&gt;&gt;&gt;&gt; option sitting right there, because you don&#39;t want someone else to have to<br>&gt;&gt;&gt;&gt;&gt;&gt; learn something.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 5:29 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think this discussion has made it pretty plain that what is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; claimed to be &#39;so useful&#39; is barely ever used. Moreover, it provides no<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; independent uses. The point of these pitches is to sound out arguments,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; not, as far as I was aware, to take a vote.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 1:54 AM Jose Cheyo Jimenez &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; cheyo at masters3d.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --1<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think it would be a waste of the community&#39;s time to do a formal<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; review when only two people are in favor of this removal.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#39;for in where&#39; is so useful especially since we don&#39;t have for;;;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; loops anymore. I&#39;d say leave this alone; the majority doesn&#39;t want this<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; changed.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 10, 2016, at 10:17 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; it--is indicative of a key worry here: it&#39;s inessential to the language and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; promotes dialects wherein certain people use it and others wherein they<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; don&#39;t. This is an anti-goal.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 12:10 let var go &lt;letvargo at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Leave it in!<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s a great little tool. I don&#39;t use it very often, but when I do<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; it is because I&#39;ve decided that in the context of that piece of code it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; does exactly what I want it to do with the maximum amount of clarity.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If you don&#39;t like it, then don&#39;t use it, but I can&#39;t see how it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; detracts from the language at all.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The *only* argument that I have heard for removing it is that some<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; people don&#39;t immediately intuit how to use it. I didn&#39;t have any trouble<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; with it at all. It follows one of the most basic programming patterns ever:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;For all x in X, if predicate P is true, do something.&quot; The use of the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; keyword &quot;where&quot; makes perfect sense in that context, and when I read it out<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; loud, it sounds natural: &quot;For all x in X where P, do something.&quot; That is an<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; elegant, succinct, and clear way of stating exactly what I want my program<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; to do.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t doubt that it has caused some confusion for some people,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; but I&#39;m not sold that that is a good enough reason to get rid of it. It<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; seems strange to get rid of a tool because not everyone understands how to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; use it immediately, without ever having to ask a single question. As long<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; as its not a dangerous tool (and it isn&#39;t), then keep it in the workshop<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; for those times when it comes in handy. And even if there is some initial<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; confusion, it doesn&#39;t sound like it lasted that long. It&#39;s more like, &quot;Does<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; this work like X, or does this work like Y? Let&#39;s see...oh, it works like<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; X. Ok.&quot; That&#39;s the entire learning curve...about 5 seconds of curiosity<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; followed by the blissful feeling of resolution.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 9:32 AM Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 11:23 AM, Sean Heber via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Party Swift Repos&quot; folder and did the same search. Among the 15 repos in<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that folder, a joint search returned about 650 hits on for-in (again with<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; some false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Weird. My own Swift projects (not on Github :P) use “where” all<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the time with for loops. I really like it and think it reads *and* writes<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; far better as well as makes for nicer one-liners. In one project, by rough<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; count, I have about 20 that use “where” vs. 40 in that same project not<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; using “where”.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; In another smaller test project, there are only 10 for loops,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; but even so one still managed to use where.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Not a lot of data without looking at even more projects, I<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; admit, but this seems to suggest that the usage of “where” is going to be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; very developer-dependent. Perhaps there’s some factor of prior background<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; at work here? (I’ve done a lot of SQL in another life, for example.)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; That is worrying if true, because it suggests that it&#39;s enabling<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#39;dialects&#39; of Swift, an explicit anti-goal of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I feel like “where” is a more declarative construct and that we<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; should be encouraging that way of thinking in general. When using it, it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; feels like “magic” for some reason - even though there’s nothing special<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; about it. It feels like I’ve made the language work *for me* a little bit<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; rather than me having to contort my solution to the will of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This may be highly subjective.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/32525244/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>June 13, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On 13 Jun 2016, at 13:28, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think this discussion has made it pretty plain that what is claimed to be &#39;so useful&#39; is barely ever used. Moreover, it provides no independent uses. The point of these pitches is to sound out arguments, not, as far as I was aware, to take a vote.<br></p><p>I think that the discussion has made it clear that far more people want this feature to remain, and feel it is a valid part of the language, whether or not it’s a mainly aesthetic one, and that it should stay. Whether or not the discussion is intended as a vote is irrelevant, if more people want a feature to remain than want it removed then that suggests the justification for removing it had better be a really good one.<br></p><p>So far we have redundancy, which isn’t really sufficient reason to remove something, as we have plenty of redundant syntax for convenience. Take conditional binding for example, which is essentially just a shorthand for pattern matching. Functionally they’re identical, and there’s not much difference in complexity (you don’t have to learn the pattern matching aspect in order to use it for unwrapping optionals), so really it’s just a neat shorthand similar to where, and could be removed easily, yet people would fight against it just as furiously.<br></p><p>Otherwise the argument is against confusion/mistakes, but this alone isn’t a reason to remove a feature vs addressing why confusion is caused. Besides, the main argument for it being confusing comes from its use in both while and for loops, but if it’s being removed from while loops then this ceases to be an issue. As a result it would be premature to remove the feature as we don’t know yet if it’s still confusing when only permitted on for loops.<br></p><p>After that the other issue is whether filtering deserves a special case, but this is muddied by a lack of use largely resulting from lack of awareness. For us to get useful evidence either way would require this to put more widely known and to see if it continues to be used infrequently; I know about the keyword and use it in maybe 20% of my for loops (plus I actually rarely use while loops, and mainly in testing).<br>Besides which there is a proposal for a variant of where (while/until) which gives access to another fairly common variant of if/guard that developers may wish to replace, which would address a lack of versatility.<br></p><p>The benefit of the where clause is eliminating a line by putting the same condition on the opening loop, you may not consider this worthwhile but clearly plenty of people do, therefore I’d consider this justification enough for the feature to remain as we find it useful and prefer how our code looks with this shorthand. You remain free as ever to not use it.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 13, 2016 at 12:00:00pm</p></header><div class="content"><p>On Mon, Jun 13, 2016 at 12:24 PM, Haravikk &lt;swift-evolution at haravikk.me&gt;<br>wrote:<br></p><p>&gt;<br>&gt; &gt; On 13 Jun 2016, at 13:28, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; I think this discussion has made it pretty plain that what is claimed to<br>&gt; be &#39;so useful&#39; is barely ever used. Moreover, it provides no independent<br>&gt; uses. The point of these pitches is to sound out arguments, not, as far as<br>&gt; I was aware, to take a vote.<br>&gt;<br>&gt; I think that the discussion has made it clear that far more people want<br>&gt; this feature to remain, and feel it is a valid part of the language,<br>&gt; whether or not it’s a mainly aesthetic one, and that it should stay.<br>&gt; Whether or not the discussion is intended as a vote is irrelevant, if more<br>&gt; people want a feature to remain than want it removed then that suggests the<br>&gt; justification for removing it had better be a really good one.<br>&gt;<br>&gt; So far we have redundancy, which isn’t really sufficient reason to remove<br>&gt; something, as we have plenty of redundant syntax for convenience. Take<br>&gt; conditional binding for example, which is essentially just a shorthand for<br>&gt; pattern matching. Functionally they’re identical, and there’s not much<br>&gt; difference in complexity (you don’t have to learn the pattern matching<br>&gt; aspect in order to use it for unwrapping optionals), so really it’s just a<br>&gt; neat shorthand similar to where, and could be removed easily, yet people<br>&gt; would fight against it just as furiously.<br>&gt;<br>&gt; Otherwise the argument is against confusion/mistakes, but this alone isn’t<br>&gt; a reason to remove a feature vs addressing why confusion is caused.<br>&gt; Besides, the main argument for it being confusing comes from its use in<br>&gt; both while and for loops, but if it’s being removed from while loops then<br>&gt; this ceases to be an issue. As a result it would be premature to remove the<br>&gt; feature as we don’t know yet if it’s still confusing when only permitted on<br>&gt; for loops.<br>&gt;<br>&gt; After that the other issue is whether filtering deserves a special case,<br>&gt; but this is muddied by a lack of use largely resulting from lack of<br>&gt; awareness. For us to get useful evidence either way would require this to<br>&gt; put more widely known and to see if it continues to be used infrequently; I<br>&gt; know about the keyword and use it in maybe 20% of my for loops (plus I<br>&gt; actually rarely use while loops, and mainly in testing).<br>&gt; Besides which there is a proposal for a variant of where (while/until)<br>&gt; which gives access to another fairly common variant of if/guard that<br>&gt; developers may wish to replace, which would address a lack of versatility.<br>&gt;<br>&gt; The benefit of the where clause is eliminating a line by putting the same<br>&gt; condition on the opening loop, you may not consider this worthwhile but<br>&gt; clearly plenty of people do,<br></p><p><br>It&#39;s not that I don&#39;t consider it worthwhile. I consider it *harmful*<br>because it leaves implicit the key question of what happens when `where` is<br>not fulfilled.<br></p><p><br>&gt; therefore I’d consider this justification enough for the feature to remain<br>&gt; as we find it useful and prefer how our code looks with this shorthand. You<br>&gt; remain free as ever to not use it.<br></p><p><br>Otherwise, I think you sum up the arguments that have been laid out pretty<br>well. All in all, I believe we&#39;ve made a case that&#39;s stronger than the one<br>that was made for the for;; loop. At this point, I think there&#39;s little<br>left to discuss prior to a formal review.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/860e6f2f/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 13, 2016 at 08:00:00pm</p></header><div class="content"><p>Suport Haravikk&#39;s opinion, just wanted to add:<br></p><p> &gt; Besides, the main argument for it being confusing comes from its use in <br>both while and for loops,<br></p><p>The other main argument was that it is not clear (for some beginners, who <br>never see simple SELECT * FROM .. WHERE .. clause and don&#39;t want to check <br>in Swift documentation or in playground) if `where` in for-in loop means <br>&#39;continue if false&#39; or &#39;break if false&quot;. In this case I believe we can <br>discuss if &#39;where&#39; should be renamed to something more obvious. But not to <br>remove the feature because of this.<br></p><p>On 13.06.2016 20:24, Haravikk via swift-evolution wrote:<br>&gt;<br>&gt;&gt; On 13 Jun 2016, at 13:28, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I think this discussion has made it pretty plain that what is claimed to be &#39;so useful&#39; is barely ever used. Moreover, it provides no independent uses. The point of these pitches is to sound out arguments, not, as far as I was aware, to take a vote.<br>&gt;<br>&gt; I think that the discussion has made it clear that far more people want this feature to remain, and feel it is a valid part of the language, whether or not it’s a mainly aesthetic one, and that it should stay. Whether or not the discussion is intended as a vote is irrelevant, if more people want a feature to remain than want it removed then that suggests the justification for removing it had better be a really good one.<br>&gt;<br>&gt; So far we have redundancy, which isn’t really sufficient reason to remove something, as we have plenty of redundant syntax for convenience. Take conditional binding for example, which is essentially just a shorthand for pattern matching. Functionally they’re identical, and there’s not much difference in complexity (you don’t have to learn the pattern matching aspect in order to use it for unwrapping optionals), so really it’s just a neat shorthand similar to where, and could be removed easily, yet people would fight against it just as furiously.<br>&gt;<br>&gt; Otherwise the argument is against confusion/mistakes, but this alone isn’t a reason to remove a feature vs addressing why confusion is caused. Besides, the main argument for it being confusing comes from its use in both while and for loops, but if it’s being removed from while loops then this ceases to be an issue. As a result it would be premature to remove the feature as we don’t know yet if it’s still confusing when only permitted on for loops.<br>&gt;<br>&gt; After that the other issue is whether filtering deserves a special case, but this is muddied by a lack of use largely resulting from lack of awareness. For us to get useful evidence either way would require this to put more widely known and to see if it continues to be used infrequently; I know about the keyword and use it in maybe 20% of my for loops (plus I actually rarely use while loops, and mainly in testing).<br>&gt; Besides which there is a proposal for a variant of where (while/until) which gives access to another fairly common variant of if/guard that developers may wish to replace, which would address a lack of versatility.<br>&gt;<br>&gt; The benefit of the where clause is eliminating a line by putting the same condition on the opening loop, you may not consider this worthwhile but clearly plenty of people do, therefore I’d consider this justification enough for the feature to remain as we find it useful and prefer how our code looks with this shorthand. You remain free as ever to not use it.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>June 10, 2016 at 02:00:00pm</p></header><div class="content"><p>@Xiaodi Wu a couple of times you&#39;ve said things were &quot;explicit&quot;<br>this or that.<br> <br>&gt;* Swift is explicitly a C-family language. In most or all other C-<br>&gt;family languages, for loop statements allow specification of<br>&gt;conditions for exiting the loop but not for filtering. Therefore,<br>&gt;Swift&#39;s use of `where` is unprecedented and needs to be learned anew<br>&gt;by every user of Swift.<br> <br>&gt; That is worrying if true, because it suggests that it&#39;s enabling<br>&gt; &#39;dialects&#39; of Swift, an explicit anti-goal of the language<br> <br>Though I&#39;ve never read either of these before as being goals (or for<br>that matter anti-goals). Perhaps I&#39;m looking in the wrong places though.<br>Can you please share these with me?<br> <br>In trying to track that information down I read over<br>https://swift.org/about/ trying to find if I could glean any information<br>about some guiding principles. When I stumbled upon this and wondered if<br>anyone else would find it illuminating.<br> <br>&gt;From the &quot;Features&quot; section:<br> <br>&gt;Fast and concise iteration over a range or collection<br> <br>Does this proposal enhance that feature? Does this proposal weaken<br>that feature?<br> <br>I&#39;ve thought about that for a little bit and I&#39;m pretty sure that<br>removing `where` from for in certainly does not enhance that feature<br>from my perspective.<br> <br>If I understand everything this all started because `if` can no longer<br>have `where`.  Following that and basing it completely on the example in<br>this proposal<br>(https://gist.github.com/erica/dd5935eca0d5d06b046184f41d56dd04#confusion-of-use)<br>it seems to me that the behavior of the `where` clause of the `while`<br>was analogous to the now removed `if` behavior.<br> <br>Therefore, if we are going to remove something lets remove the `where`<br>clause from `while`. As is already correctly pointed out in the<br>&quot;confusion of use&quot; section the outlier behavior was `for in`. We<br>deprecated the `if` behavior because of [fill in the blank], forgive me<br>I never read the arguments, if `while` works the same way why does it<br>not logically follow that its `where` clause also be deprecated.<br> <br>With that as far as I&#39;m concerned this proposal is just requesting the<br>retirement of the `where` clause on the wrong loop structure. Of course<br>more examples could change my mind.<br> <br> <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/077a67fc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 10, 2016 at 01:00:00pm</p></header><div class="content"><p>On Fri, Jun 10, 2016 at 1:14 PM, Ryan Lovelett &lt;swift-dev at ryan.lovelett.me&gt;<br>wrote:<br></p><p>&gt; @Xiaodi Wu a couple of times you&#39;ve said things were &quot;explicit&quot; this or<br>&gt; that.<br>&gt;<br>&gt; &gt; * Swift is explicitly a C-family language. In most or all other<br>&gt; C-family languages, for loop statements allow specification of conditions<br>&gt; for exiting the loop but not for filtering. Therefore, Swift&#39;s use of<br>&gt; `where` is unprecedented and needs to be learned anew by every user of<br>&gt; Swift.<br>&gt;<br>&gt; &gt; That is worrying if true, because it suggests that it&#39;s enabling<br>&gt; &#39;dialects&#39; of Swift, an explicit anti-goal of the language<br>&gt;<br>&gt; Though I&#39;ve never read either of these before as being goals (or for that<br>&gt; matter anti-goals). Perhaps I&#39;m looking in the wrong places though. Can you<br>&gt; please share these with me?<br>&gt;<br></p><p>These have been gleaned from pronouncements from the core team here on this<br>list. Unfortunately, it&#39;s not easy to search the archives. I&#39;ll give one<br>example, but I&#39;ve seen similar ideas repeated a few times. Obviously, they<br>take place in the context of discussions about other features that are not<br>exactly the same as this, so one can wonder how much they apply here. If<br>they were exactly parallel situations, we wouldn&#39;t be having this<br>discussion.<br></p><p>Chris Lattner&#39;s response to a proposal to adopt some Python-like syntax<br>that you can use if you like, but don&#39;t have to if you don&#39;t (Dec. 6, 2015):<br></p><p><br>&gt; We&#39;re not interested in fragmenting *Swift* into related-but-different<br>&gt; *dialect*s.<br>&gt; -Chris<br></p><p><br>&gt;<br></p><p>In trying to track that information down I read over<br>&gt; https://swift.org/about/ trying to find if I could glean any information<br>&gt; about some guiding principles. When I stumbled upon this and wondered if<br>&gt; anyone else would find it illuminating.<br>&gt;<br>&gt; From the &quot;Features&quot; section:<br>&gt;<br>&gt; &gt; Fast and concise iteration over a range or collection<br>&gt;<br>&gt; Does this proposal enhance that feature? Does this proposal weaken that<br>&gt; feature?<br>&gt;<br>&gt; I&#39;ve thought about that for a little bit and I&#39;m pretty sure that removing<br>&gt; `where` from for in certainly does not enhance that feature from my<br>&gt; perspective.<br>&gt;<br></p><p>No, but I don&#39;t think it harms fast and concise iteration; hence, I argue<br>that `where` is redundant.<br></p><p><br>&gt;<br>&gt; If I understand everything this all started because `if` can no longer<br>&gt; have `where`.  Following that and basing it completely on the example in<br>&gt; this proposal (<br>&gt; &lt;https://gist.github.com/erica/dd5935eca0d5d06b046184f41d56dd04&gt;<br>&gt; https://gist.github.com/erica/dd5935eca0d5d06b046184f41d56dd04#confusion-of-use)<br>&gt; it seems to me that the behavior of the `where` clause of the `while` was<br>&gt; analogous to the now removed `if` behavior.<br>&gt;<br>&gt; Therefore, if we are going to remove something lets remove the `where`<br>&gt; clause from `while`.<br>&gt;<br></p><p>My understanding is that removal from `while` is also part of SE-0099 and<br>already approved.<br></p><p><br>&gt; As is already correctly pointed out in the &quot;confusion of use&quot; section the<br>&gt; outlier behavior was `for in`. We deprecated the `if` behavior because of<br>&gt; [fill in the blank], forgive me I never read the arguments, if `while`<br>&gt; works the same way why does it not logically follow that its `where` clause<br>&gt; also be deprecated.<br>&gt;<br>&gt; With that as far as I&#39;m concerned this proposal is just requesting the<br>&gt; retirement of the `where` clause on the wrong loop structure. Of course<br>&gt; more examples could change my mind.<br>&gt;<br></p><p>I&#39;ll endeavor to change your mind :) FWIW, I&#39;d be satisfied with reforming<br>instead of removing `where` if doing so can clarify its meaning.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/4ac0dbff/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June 10, 2016 at 03:00:00pm</p></header><div class="content"><p>Isn’t Swift too young to have any sort of established dialect? Removing everything takes away from an organic process of discovering what the dialect will be. Instead we are shoehorning a dialect in the early stages of swift when a lot hasn’t even been established yet.<br></p><p>Maybe the mistake is trying to fit all these breaking changes into Swift 3. I think it is just too much for such a young language that is still trying to find itself.<br></p><p><br>Brandon<br></p><p>&gt; On Jun 10, 2016, at 2:41 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Fri, Jun 10, 2016 at 1:14 PM, Ryan Lovelett &lt;swift-dev at ryan.lovelett.me &lt;mailto:swift-dev at ryan.lovelett.me&gt;&gt; wrote:<br>&gt; @Xiaodi Wu a couple of times you&#39;ve said things were &quot;explicit&quot; this or that.<br>&gt;  <br>&gt; &gt; * Swift is explicitly a C-family language. In most or all other C-family languages, for loop statements allow specification of conditions for exiting the loop but not for filtering. Therefore, Swift&#39;s use of `where` is unprecedented and needs to be learned anew by every user of Swift.<br>&gt;  <br>&gt; &gt; That is worrying if true, because it suggests that it&#39;s enabling &#39;dialects&#39; of Swift, an explicit anti-goal of the language<br>&gt;  <br>&gt; Though I&#39;ve never read either of these before as being goals (or for that matter anti-goals). Perhaps I&#39;m looking in the wrong places though. Can you please share these with me?<br>&gt; <br>&gt; These have been gleaned from pronouncements from the core team here on this list. Unfortunately, it&#39;s not easy to search the archives. I&#39;ll give one example, but I&#39;ve seen similar ideas repeated a few times. Obviously, they take place in the context of discussions about other features that are not exactly the same as this, so one can wonder how much they apply here. If they were exactly parallel situations, we wouldn&#39;t be having this discussion.<br>&gt; <br>&gt; Chris Lattner&#39;s response to a proposal to adopt some Python-like syntax that you can use if you like, but don&#39;t have to if you don&#39;t (Dec. 6, 2015):<br>&gt; <br>&gt; <br>&gt; We&#39;re not interested in fragmenting Swift into related-but-different dialects.<br>&gt; -Chris<br>&gt;  <br>&gt; <br>&gt; In trying to track that information down I read over https://swift.org/about/ &lt;https://swift.org/about/&gt; trying to find if I could glean any information about some guiding principles. When I stumbled upon this and wondered if anyone else would find it illuminating.<br>&gt;  <br>&gt; From the &quot;Features&quot; section:<br>&gt;  <br>&gt; &gt; Fast and concise iteration over a range or collection<br>&gt;  <br>&gt; Does this proposal enhance that feature? Does this proposal weaken that feature?<br>&gt;  <br>&gt; I&#39;ve thought about that for a little bit and I&#39;m pretty sure that removing `where` from for in certainly does not enhance that feature from my perspective.<br>&gt; <br>&gt; No, but I don&#39;t think it harms fast and concise iteration; hence, I argue that `where` is redundant.<br>&gt;  <br>&gt;  <br>&gt; If I understand everything this all started because `if` can no longer have `where`.  Following that and basing it completely on the example in this proposal ( &lt;https://gist.github.com/erica/dd5935eca0d5d06b046184f41d56dd04&gt;https://gist.github.com/erica/dd5935eca0d5d06b046184f41d56dd04#confusion-of-use &lt;https://gist.github.com/erica/dd5935eca0d5d06b046184f41d56dd04#confusion-of-use&gt;) it seems to me that the behavior of the `where` clause of the `while` was analogous to the now removed `if` behavior.<br>&gt;  <br>&gt; Therefore, if we are going to remove something lets remove the `where` clause from `while`.<br>&gt; <br>&gt; My understanding is that removal from `while` is also part of SE-0099 and already approved.<br>&gt;  <br>&gt; As is already correctly pointed out in the &quot;confusion of use&quot; section the outlier behavior was `for in`. We deprecated the `if` behavior because of [fill in the blank], forgive me I never read the arguments, if `while` works the same way why does it not logically follow that its `where` clause also be deprecated.<br>&gt;  <br>&gt; With that as far as I&#39;m concerned this proposal is just requesting the retirement of the `where` clause on the wrong loop structure. Of course more examples could change my mind.<br>&gt; <br>&gt; I&#39;ll endeavor to change your mind :) FWIW, I&#39;d be satisfied with reforming instead of removing `where` if doing so can clarify its meaning. <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/ecd2cd48/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>June 10, 2016 at 01:00:00pm</p></header><div class="content"><p>On Fri, Jun 10, 2016, at 11:49 AM, Erica Sadun via swift-evolution wrote:<br>&gt;<br>&gt;&gt; On Jun 10, 2016, at 9:24 AM, Erica Sadun<br>&gt;&gt; &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; On Jun 10, 2016, at 9:22 AM, Erica Sadun via swift-evolution &lt;swift-<br>&gt;&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Jun 10, 2016, at 8:02 AM, Xiaodi Wu via swift-evolution &lt;swift-<br>&gt;&gt;&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 7:18 AM, Haravikk &lt;swift-<br>&gt;&gt;&gt;&gt; evolution at haravikk.me&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; * The word &quot;where&quot; does not consistently imply `break` or<br>&gt;&gt;&gt;&gt;&gt;&gt;   `continue`. In current Swift, `where` implies `break` in the<br>&gt;&gt;&gt;&gt;&gt;&gt;   context of a `while` loop and `continue` in the context of a<br>&gt;&gt;&gt;&gt;&gt;&gt;   `for` loop. Some users intuitively guess the correct meaning in<br>&gt;&gt;&gt;&gt;&gt;&gt;   each context, while others guess the wrong meaning. Therefore,<br>&gt;&gt;&gt;&gt;&gt;&gt;   the only way to learn for sure what `where` means in any<br>&gt;&gt;&gt;&gt;&gt;&gt;   context is to read the rulebook. That, by definition, means<br>&gt;&gt;&gt;&gt;&gt;&gt;   that this is unintuitive.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; This is an argument for renaming the where keyword on for loops to<br>&gt;&gt;&gt;&gt;&gt; be more clear, or to somehow integrate continue/break to be more<br>&gt;&gt;&gt;&gt;&gt; explicit about what the developer intends for it to do.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Sure: I conclude that the keyword should be *either* removed *or*<br>&gt;&gt;&gt;&gt; reformed; both outcomes could address the issue.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This is my stance as well and I reserve the right to flit between<br>&gt;&gt;&gt; both choices until we&#39;ve fully talked it through.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; One more data point.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; In the standard library there are just under 950 uses of &quot;for in<br>&gt;&gt;&gt; loops&quot;. There are 3 uses of &quot;for in while&quot; :<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; private/StdlibUnittest/StdlibUnittest.swift.gyb:    for j in<br>&gt;&gt;&gt; instances.indices where i != j {<br>&gt;&gt;&gt; public/core/Algorithm.swift:  for value in rest where value &lt;<br>&gt;&gt;&gt; minValue {<br>&gt;&gt;&gt; public/core/Algorithm.swift:  for value in rest where value &gt;=<br>&gt;&gt;&gt; maxValue {<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; -- Erica<br>&gt;&gt; Actually a slight correction to that. I forgot to add the space after<br>&gt;&gt; &quot;in&quot; on the first search. It&#39;s just over 600 and 3. Among the 600 are<br>&gt;&gt; a few false positives but not many.<br>&gt;&gt;<br>&gt;&gt; -- E<br>&gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party<br>&gt; Swift Repos&quot; folder and did the same search. Among the 15 repos in<br>&gt; that folder, a joint search returned about 650 hits on for-in (again<br>&gt; with some false positives) and not a single for-in-while use.<br> <br>I have access to 3 closed-source enterprise applications, iOS 9 and 100%<br>Swift 2.2. Each of them respectively have one &quot;for in loop&quot;; each one<br>makes use of a &quot;where&quot; clause.<br> <br>Two of the applications are maintained/written by someone other than<br>myself. I wanted to audit them to see if those developers used &quot;for in&quot;<br>correctly or incorrectly; indeed they were all correctly used to filter<br>an Array. Though I cannot rule out they did not stumble into correct use<br>of the `where` clause.<br> <br>More food for thought. Looking at the Git history I realized one of them<br>actually was refactored from something that looked like:<br> <br>let a = [3, 1, 2].sort()<br>a.filter({ $0 &lt;= 2 }).forEach({ print($0) })<br> <br>to<br> <br>let a = [3, 1, 2].sort()<br>for i in a where i &lt;= 2 { print(i) }<br> <br>I&#39;m reasonably confident when I say the developers of this code have<br>never heard of swift-evolution let alone participated in it.<br> <br>Obviously this is anecdotal evidence. It could be that `where` clause<br>is &quot;easy to understand&quot; _or_ equally likely that our hiring process<br>does a great job of selecting a heterogenous population of developers<br>with certain backgrounds that lead to similar code when faced with<br>similar problems.<br> <br>You know what strikes me about this whole argument? &quot;[This argument] is<br>like a rocking chair: it gives [us] something to do but [does not get<br>us] anywhere&quot;. - Someone Else<br> <br>If this is an example of the pressing/priority issues facing the Swift<br>language today then I say lets all take a long weekend to bask in the<br>glow of this momentous occasion. Then meet back here in 2 years.<br> <br>Change it or do not change it. I do not imagine it matters either way in<br>5 years. That having been said though I do think this argument, and<br>others similar to it, are important because I think they run deeper than<br>the syntax. I think they speak to the ethos of this community. With that<br>I think we should think long and hard about this process and what it<br>speaks to in terms of precedence and our collective priorities.<br> <br>&gt;<br>&gt; -- E<br>&gt; _________________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br> <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/f1df7bc5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 10, 2016 at 05:00:00pm</p></header><div class="content"><p>This is useful information.<br></p><p>I disagree that this is silly as a priority. IMO, this is something that<br>really needs to be tackled (if ever) in conjunction with Swift 3. Past this<br>point, the ship will have sailed in terms of churn in fundamental syntax.<br></p><p>We want to leave the language with a thoughtfully designed grammar that<br>will stand the test of time. Two of the most impressive elements of the<br>Swift ethos (for me) have been an attention to the needs of learners and a<br>determination that as much as possible we are designing One Swift and not<br>many dialects.<br></p><p>If a syntax for expressing a straightforward feature presents a speed bump<br>on the learning curve, I think it absolutely behooves us to think carefully<br>about its persistence, especially at this juncture where something can be<br>done about it. It may seem trivial to the experienced user, and probably<br>any person who finds their way to this list is unaffected by the learning<br>curve and long ago forgot what it was like to learn programming for the<br>first time, but one of those things I was so impressed by upon joining this<br>community was its attentiveness to fostering those that will come after.<br></p><p>So yes, if we do this right, in five years&#39; time no one will remember this<br>discussion. The result of it will hopefully be a more thoughtful syntax<br>that fits with initial user expectation.<br></p><p>On Fri, Jun 10, 2016 at 12:13 Ryan Lovelett via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Fri, Jun 10, 2016, at 11:49 AM, Erica Sadun via swift-evolution wrote:<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Jun 10, 2016, at 9:24 AM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Jun 10, 2016, at 9:22 AM, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Jun 10, 2016, at 8:02 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Fri, Jun 10, 2016 at 7:18 AM, Haravikk &lt;swift-evolution at haravikk.me&gt;<br>&gt; wrote:<br>&gt;<br>&gt;<br>&gt;<br>&gt; * The word &quot;where&quot; does not consistently imply `break` or `continue`. In<br>&gt; current Swift, `where` implies `break` in the context of a `while` loop and<br>&gt; `continue` in the context of a `for` loop. Some users intuitively guess the<br>&gt; correct meaning in each context, while others guess the wrong meaning.<br>&gt; Therefore, the only way to learn for sure what `where` means in any context<br>&gt; is to read the rulebook. That, by definition, means that this is<br>&gt; unintuitive.<br>&gt;<br>&gt;<br>&gt;<br>&gt; This is an argument for renaming the where keyword on for loops to be more<br>&gt; clear, or to somehow integrate continue/break to be more explicit about<br>&gt; what the developer intends for it to do.<br>&gt;<br>&gt;<br>&gt; Sure: I conclude that the keyword should be *either* removed *or*<br>&gt; reformed; both outcomes could address the issue.<br>&gt;<br>&gt;<br>&gt; This is my stance as well and I reserve the right to flit between both<br>&gt; choices until we&#39;ve fully talked it through.<br>&gt;<br>&gt; One more data point.<br>&gt;<br>&gt; In the standard library there are just under 950 uses of &quot;for in loops&quot;.<br>&gt; There are 3 uses of &quot;for in while&quot; :<br>&gt;<br>&gt; private/StdlibUnittest/StdlibUnittest.swift.gyb:    for j in<br>&gt; instances.indices where i != j {<br>&gt; public/core/Algorithm.swift:  for value in rest where value &lt; minValue {<br>&gt; public/core/Algorithm.swift:  for value in rest where value &gt;= maxValue {<br>&gt;<br>&gt; -- Erica<br>&gt;<br>&gt; Actually a slight correction to that. I forgot to add the space after &quot;in&quot;<br>&gt; on the first search. It&#39;s just over 600 and 3. Among the 600 are a few<br>&gt; false positives but not many.<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party Swift<br>&gt; Repos&quot; folder and did the same search. Among the 15 repos in that folder, a<br>&gt; joint search returned about 650 hits on for-in (again with some false<br>&gt; positives) and not a single for-in-while use.<br>&gt;<br>&gt;<br>&gt; I have access to 3 closed-source enterprise applications, iOS 9 and 100%<br>&gt; Swift 2.2. Each of them respectively have one &quot;for in loop&quot;; each one makes<br>&gt; use of a &quot;where&quot; clause.<br>&gt;<br>&gt; Two of the applications are maintained/written by someone other than<br>&gt; myself. I wanted to audit them to see if those developers used &quot;for in&quot;<br>&gt; correctly or incorrectly; indeed they were all correctly used to filter an<br>&gt; Array. Though I cannot rule out they did not stumble into correct use of<br>&gt; the `where` clause.<br>&gt;<br>&gt; More food for thought. Looking at the Git history I realized one of them<br>&gt; actually was refactored from something that looked like:<br>&gt;<br>&gt; let a = [3, 1, 2].sort()<br>&gt; a.filter({ $0 &lt;= 2 }).forEach({ print($0) })<br>&gt;<br>&gt; to<br>&gt;<br>&gt; let a = [3, 1, 2].sort()<br>&gt; for i in a where i &lt;= 2 { print(i) }<br>&gt;<br>&gt; I&#39;m reasonably confident when I say the developers of this code have never<br>&gt; heard of swift-evolution let alone participated in it.<br>&gt;<br>&gt; Obviously this is anecdotal evidence. It could be that `where` clause is<br>&gt; &quot;easy to understand&quot; _or_ equally likely that our hiring process does a<br>&gt; great job of selecting a heterogenous population of developers with certain<br>&gt; backgrounds that lead to similar code when faced with similar problems.<br>&gt;<br>&gt; You know what strikes me about this whole argument? &quot;[This argument] is<br>&gt; like a rocking chair: it gives [us] something to do but [does not get us]<br>&gt; anywhere&quot;. - Someone Else<br>&gt;<br>&gt; If this is an example of the pressing/priority issues facing the Swift<br>&gt; language today then I say lets all take a long weekend to bask in the glow<br>&gt; of this momentous occasion. Then meet back here in 2 years.<br>&gt;<br>&gt; Change it or do not change it. I do not imagine it matters either way in 5<br>&gt; years. That having been said though I do think this argument, and others<br>&gt; similar to it, are important because I think they run deeper than the<br>&gt; syntax. I think they speak to the ethos of this community. With that I<br>&gt; think we should think long and hard about this process and what it speaks<br>&gt; to in terms of precedence and our collective priorities.<br>&gt;<br>&gt;<br>&gt;<br>&gt; -- E<br>&gt; *_______________________________________________*<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/467bceb7/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 13, 2016 at 06:00:00am</p></header><div class="content"><p>&gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party Swift Repos&quot; folder and did the same search. Among the 15 repos in that folder, a joint search returned about 650 hits on for-in (again with some false positives) and not a single for-in-while use.<br>&gt; <br>&gt; -- E<br></p><p>Not to undermine this fact, but I believe the fact that `where` can be used in a for loop is not widely known. I didn&#39;t know about it until about a month ago (haven&#39;t really read much docs, but most people don&#39;t either).<br></p><p>But after I found out about it, I started using it and it IMHO improved readability of my code. Not by much, but it&#39;s the little things that make you smile, right?<br></p><p>Many people here argument that `where` is a Swift speciality and needs to be learned by the developer - the alternative is to teach the person what&#39;s the proper alternative - that using .filter can have performance impact and that the *correct* way is to use guard within the for loop. And that&#39;s IMHO much worse than teaching a person about using `where` within a for loop.<br></p><p>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/6cdea3ee/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/73a38bb7bc9528e31098defe30e68ea4?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Jean-Daniel Dupas</string> &lt;mailing at xenonium.com&gt;<p>June 13, 2016 at 01:00:00pm</p></header><div class="content"><p>-1 for the removal.<br></p><p>When I read code, I find it far more visible that a loop is over a filter list when the filter clause is on the same line, than when the filter clause is inside the loop.<br></p><p>Having to read the full content of the loop to determine if the list is filtered or not is not an improvement IMHO.<br></p><p>Moreover, I find it far cleaner to use the where clause that having to remember than I have to use the lazy accessor to avoid a performance hit.<br></p><p>&gt; Le 13 juin 2016 à 06:39, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt;&gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party Swift Repos&quot; folder and did the same search. Among the 15 repos in that folder, a joint search returned about 650 hits on for-in (again with some false positives) and not a single for-in-while use.<br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt; <br>&gt; Not to undermine this fact, but I believe the fact that `where` can be used in a for loop is not widely known. I didn&#39;t know about it until about a month ago (haven&#39;t really read much docs, but most people don&#39;t either).<br>&gt; <br>&gt; But after I found out about it, I started using it and it IMHO improved readability of my code. Not by much, but it&#39;s the little things that make you smile, right?<br>&gt; <br>&gt; Many people here argument that `where` is a Swift speciality and needs to be learned by the developer - the alternative is to teach the person what&#39;s the proper alternative - that using .filter can have performance impact and that the *correct* way is to use guard within the for loop. And that&#39;s IMHO much worse than teaching a person about using `where` within a for loop.<br>&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/9ebcdb1f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 13, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; Moreover, I find it far cleaner to use the where clause that having to remember than I have to use the lazy accessor to avoid a performance hit.<br></p><p>See the benchmarks me and Erica have posted here a few days back - even with the lazy accessor, if you decided to use filter(_:), you lost 10+% of performance. Correct way to do this without `where` and without performance penalization is to use guard within the for-in loop.<br></p><p>&gt; <br>&gt;&gt; Le 13 juin 2016 à 06:39, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt;&gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party Swift Repos&quot; folder and did the same search. Among the 15 repos in that folder, a joint search returned about 650 hits on for-in (again with some false positives) and not a single for-in-while use.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- E<br>&gt;&gt; <br>&gt;&gt; Not to undermine this fact, but I believe the fact that `where` can be used in a for loop is not widely known. I didn&#39;t know about it until about a month ago (haven&#39;t really read much docs, but most people don&#39;t either).<br>&gt;&gt; <br>&gt;&gt; But after I found out about it, I started using it and it IMHO improved readability of my code. Not by much, but it&#39;s the little things that make you smile, right?<br>&gt;&gt; <br>&gt;&gt; Many people here argument that `where` is a Swift speciality and needs to be learned by the developer - the alternative is to teach the person what&#39;s the proper alternative - that using .filter can have performance impact and that the *correct* way is to use guard within the for loop. And that&#39;s IMHO much worse than teaching a person about using `where` within a for loop.<br>&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/93096067/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 13, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jun 13, 2016, at 1:23 PM, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Moreover, I find it far cleaner to use the where clause that having to remember than I have to use the lazy accessor to avoid a performance hit.<br>&gt; <br>&gt; See the benchmarks me and Erica have posted here a few days back - even with the lazy accessor, if you decided to use filter(_:), you lost 10+% of performance. Correct way to do this without `where` and without performance penalization is to use guard within the for-in loop.<br></p><p>10% on a microbenchmark repeater 4000000 times is hardly a justification for going on way or the other.<br></p><p><br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;&gt; Le 13 juin 2016 à 06:39, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party Swift Repos&quot; folder and did the same search. Among the 15 repos in that folder, a joint search returned about 650 hits on for-in (again with some false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- E<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Not to undermine this fact, but I believe the fact that `where` can be used in a for loop is not widely known. I didn&#39;t know about it until about a month ago (haven&#39;t really read much docs, but most people don&#39;t either).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But after I found out about it, I started using it and it IMHO improved readability of my code. Not by much, but it&#39;s the little things that make you smile, right?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Many people here argument that `where` is a Swift speciality and needs to be learned by the developer - the alternative is to teach the person what&#39;s the proper alternative - that using .filter can have performance impact and that the *correct* way is to use guard within the for loop. And that&#39;s IMHO much worse than teaching a person about using `where` within a for loop.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/710d2e76/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June 13, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt;&gt; See the benchmarks me and Erica have posted here a few days back - even with the lazy accessor, if you decided to use filter(_:), you lost 10+% of performance. Correct way to do this without `where` and without performance penalization is to use guard within the for-in loop.<br>&gt; <br>&gt; 10% on a microbenchmark repeater 4000000 times is hardly a justification for going on way or the other.<br></p><p>You&#39;re right: 10% on a microbenchmark isn&#39;t the best possible data. If you have better data, we are all ears.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 14, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; On Jun 13, 2016, at 9:59 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; See the benchmarks me and Erica have posted here a few days back - even with the lazy accessor, if you decided to use filter(_:), you lost 10+% of performance. Correct way to do this without `where` and without performance penalization is to use guard within the for-in loop.<br>&gt;&gt; <br>&gt;&gt; 10% on a microbenchmark repeater 4000000 times is hardly a justification for going on way or the other.<br>&gt; <br>&gt; You&#39;re right: 10% on a microbenchmark isn&#39;t the best possible data. If you have better data, we are all ears.<br></p><p>I never said that it&#39;s a deal-breaker, but it is definitely something to consider. Since we&#39;re discussing performance of the loop itself, you can&#39;t perform much in the body of the for loop since it would skew the result (obviously). <br></p><p>I&#39;ve previously noted that if/guard-continue come in really close speed-wise, which makes them candidates for a fix-it in case `where` is indeed removed.<br></p><p>My response here was solely to Jean-Daniel&#39;s note that he mustn&#39;t forget to include the lazy accessor, pointing out that even the lazy accessor is slower than using an inline check.<br></p><p><br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 14, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; -O (Fast) <br>&gt; <br>&gt; plain for loop with guard <br>&gt; Elapsed time: 0.00411999225616455 <br>&gt; plain for loop with if <br>&gt; Elapsed time: 0.00422400236129761 <br>&gt; where test <br>&gt; Elapsed time: 0.00419700145721436 <br>&gt; eager filter test <br>&gt; Elapsed time: 0.033439040184021 <br>&gt; lazy filter test <br>&gt; Elapsed time: 0.00690501928329468 <br>&gt; Program ended with exit code: 0 <br>&gt; <br>&gt; Code: <br>&gt; <br>&gt; public func timetest(_ note: String, block: () -&gt; Void) { &gt; let date = NSDate() &gt; block() <br>&gt; let timeInterval = NSDate().timeIntervalSince(date) <br>&gt; print(note); print(&quot;Elapsed time: \(timeInterval)&quot;) <br>&gt; } <br>&gt; <br>&gt; let count = 4_000_000 &gt; let range = 1...count <br>&gt; <br>&gt; timetest(&quot;plain for loop with guard&quot;) {<br>So this is what we are taking about... <br></p><p><br>Regards<br>(From mobile)<br></p><p>&gt; On Jun 14, 2016, at 7:01 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 13, 2016, at 9:59 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; See the benchmarks me and Erica have posted here a few days back - even with the lazy accessor, if you decided to use filter(_:), you lost 10+% of performance. Correct way to do this without `where` and without performance penalization is to use guard within the for-in loop.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 10% on a microbenchmark repeater 4000000 times is hardly a justification for going on way or the other.<br>&gt;&gt; <br>&gt;&gt; You&#39;re right: 10% on a microbenchmark isn&#39;t the best possible data. If you have better data, we are all ears.<br>&gt; <br>&gt; I never said that it&#39;s a deal-breaker, but it is definitely something to consider. Since we&#39;re discussing performance of the loop itself, you can&#39;t perform much in the body of the for loop since it would skew the result (obviously). <br></p><p>I used to do low latency java for trading systems... the kind of coding where we would go out of our way to avoid ANY intraday gc activity (yes it can be done, even for parsing xml files). So we cared about a lot of things... But when you look at the numbers above on a 4_000_000 iterations loop and say the differential matters? I say you are probably using the wrong tools to write your code in the first place, and you should be using accelerate.<br></p><p>As for the &#39;<br></p><p>&gt; <br>&gt; I&#39;ve previously noted that if/guard-continue come in really close speed-wise, which makes them candidates for a fix-it in case `where` is indeed removed.<br>&gt; <br>&gt; My response here was solely to Jean-Daniel&#39;s note that he mustn&#39;t forget to include the lazy accessor, pointing out that even the lazy accessor is slower than using an inline check.<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160614/81d8536a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 14, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; I used to do low latency java for trading systems... the kind of coding where we would go out of our way to avoid ANY intraday gc activity (yes it can be done, even for parsing xml files). So we cared about a lot of things... But when you look at the numbers above on a 4_000_000 iterations loop and say the differential matters? I say you are probably using the wrong tools to write your code in the first place, and you should be using accelerate.<br></p><p>Yes, I say it does matter. Of course, 4 million iterations is a fictional example that rarely occurrs on its own, but gives you an idea that there&#39;s more going on behind the scenes other than pure iteration.<br></p><p>You&#39;re looking at it from a point where one app does one thing and the loop will have just a few iterations. Try to look at it from a point where the entire OS, all the processes and kernel  are written in Swift (might be distant future, but Swift is heading that way, isn&#39;t it?).<br></p><p>In such case if each for-loop takes a few extra instruction, then - again - yes, it matters. I know we&#39;re not talking about all for-loops, just those filtering the sequence - which seems not that common of a case - but my point is valid, that Swift should provide easily-reachable means to be a &quot;good citizen&quot;. Removing it will lead developers to use .filter(_:) instead, in order to save lines of code and additional typing.<br></p><p>While many searches in open source code found a minimum usage of for-in-where, I think this is not due to it being confusing, but just not well known, otherwise it would be used a lot more. Most developers that have prior programming experience will only skim through the Language Guide itself, which doesn&#39;t mention that `where` can be used in for loops (!!!), or even while loops and there isn&#39;t a single example where it would be used.<br></p><p>Both<br>https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ControlFlow.html &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ControlFlow.html&gt;<br>and the ePub download on https://swift.org/documentation/#the-swift-programming-language &lt;https://swift.org/documentation/#the-swift-programming-language&gt;<br></p><p>Maybe I&#39;m missing something, but the language guide only mentions `where` for the switch-case scenario. So the argument (which floated around here) that this is not being actively used is kind of moot since how could anyone be using it since it&#39;s not properly documented and no one who doesn&#39;t closely watch release notes can possibly know about this.<br></p><p><br>&gt; <br>&gt; As for the &#39;<br>&gt; <br>&gt;&gt; <br>&gt;&gt; I&#39;ve previously noted that if/guard-continue come in really close speed-wise, which makes them candidates for a fix-it in case `where` is indeed removed.<br>&gt;&gt; <br>&gt;&gt; My response here was solely to Jean-Daniel&#39;s note that he mustn&#39;t forget to include the lazy accessor, pointing out that even the lazy accessor is slower than using an inline check.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt; <br>&gt;&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160614/b5e4c58d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 14, 2016 at 06:00:00am</p></header><div class="content"><p>The performance of stdlib methods is not fixed in stone.<br></p><p>And a language feature being undocumented wouldn&#39;t explain why the entire<br>stdlib uses it only three times :)<br>On Tue, Jun 14, 2016 at 1:42 AM Charlie Monroe via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I used to do low latency java for trading systems... the kind of coding<br>&gt; where we would go out of our way to avoid ANY intraday gc activity (yes it<br>&gt; can be done, even for parsing xml files). So we cared about a lot of<br>&gt; things... But when you look at the numbers above on a 4_000_000 iterations<br>&gt; loop and say the differential matters? I say you are probably using the<br>&gt; wrong tools to write your code in the first place, and you should be using<br>&gt; accelerate.<br>&gt;<br>&gt;<br>&gt; Yes, I say it does matter. Of course, 4 million iterations is a fictional<br>&gt; example that rarely occurrs on its own, but gives you an idea that there&#39;s<br>&gt; more going on behind the scenes other than pure iteration.<br>&gt;<br>&gt; You&#39;re looking at it from a point where one app does one thing and the<br>&gt; loop will have just a few iterations. Try to look at it from a point where<br>&gt; the entire OS, all the processes and kernel  are written in Swift (might be<br>&gt; distant future, but Swift is heading that way, isn&#39;t it?).<br>&gt;<br>&gt; In such case if each for-loop takes a few extra instruction, then - again<br>&gt; - yes, it matters. I know we&#39;re not talking about all for-loops, just those<br>&gt; filtering the sequence - which seems not that common of a case - but my<br>&gt; point is valid, that Swift should provide easily-reachable means to be a<br>&gt; &quot;good citizen&quot;. Removing it will lead developers to use .filter(_:)<br>&gt; instead, in order to save lines of code and additional typing.<br>&gt;<br>&gt; While many searches in open source code found a minimum usage of<br>&gt; for-in-where, I think this is not due to it being confusing, but just not<br>&gt; well known, otherwise it would be used a lot more. Most developers that<br>&gt; have prior programming experience will only skim through the Language Guide<br>&gt; itself, which doesn&#39;t mention that `where` can be used in for loops (!!!),<br>&gt; or even while loops and there isn&#39;t a single example where it would be used.<br>&gt;<br>&gt; Both<br>&gt;<br>&gt; https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ControlFlow.html<br>&gt; and the ePub download on<br>&gt; https://swift.org/documentation/#the-swift-programming-language<br>&gt;<br>&gt; Maybe I&#39;m missing something, but the language guide only mentions `where`<br>&gt; for the switch-case scenario. So the argument (which floated around here)<br>&gt; that this is not being actively used is kind of moot since how could anyone<br>&gt; be using it since it&#39;s not properly documented and no one who doesn&#39;t<br>&gt; closely watch release notes can possibly know about this.<br>&gt;<br>&gt;<br>&gt;<br>&gt; As for the &#39;<br>&gt;<br>&gt;<br>&gt; I&#39;ve previously noted that if/guard-continue come in really close<br>&gt; speed-wise, which makes them candidates for a fix-it in case `where` is<br>&gt; indeed removed.<br>&gt;<br>&gt; My response here was solely to Jean-Daniel&#39;s note that he mustn&#39;t forget<br>&gt; to include the lazy accessor, pointing out that even the lazy accessor is<br>&gt; slower than using an inline check.<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt;<br>&gt; Brent Royal-Gordon<br>&gt;<br>&gt; Architechies<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160614/ad4c6f46/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>June 14, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On 14 Jun 2016, at 07:54, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; And a language feature being undocumented wouldn&#39;t explain why the entire stdlib uses it only three times :)<br></p><p>I sometimes wonder whether the stdlib is always the best example of pure Swift coding practices, it has after all been developed while the language itself is in flux so chunks of it were being written while language features were actively changing, and it has a lot of patterns in it that I just don’t use in Swift. For example, I still haven’t figured out why the Indexable protocol has an IndexableBase parent (other than to make figuring out why my types don’t conform a lot harder), and there’s stuff going on in .gyb files that remains a mystery to me. There’s also a lot of little hidden features that we don’t have access to in our own code (I can&#39;t find a method that retrieves object identifiers, for comparing two types without knowing what they are, outside of the stdlib for example, yet you’ll find them used inside AnyIndex and similar types).<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>June 14, 2016 at 01:00:00am</p></header><div class="content"><p>&gt; On Jun 14, 2016, at 1:22 AM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 14 Jun 2016, at 07:54, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; And a language feature being undocumented wouldn&#39;t explain why the entire stdlib uses it only three times :)<br>&gt; <br>&gt; I sometimes wonder whether the stdlib is always the best example of pure Swift coding practices, it has after all been developed while the language itself is in flux so chunks of it were being written while language features were actively changing, and it has a lot of patterns in it that I just don’t use in Swift. For example, I still haven’t figured out why the Indexable protocol has an IndexableBase parent (other than to make figuring out why my types don’t conform a lot harder),<br></p><p>AFAIK this is because associated types currently can&#39;t define a recursive protocol conformance constraint. For example, `SignedIntegerType` has a `Distance` associated type which should also be a `SignedIntegerType`, but has to be implemented using a shadow protocol (`_SignedIntegerType`) instead.<br></p><p>&gt; and there’s stuff going on in .gyb files that remains a mystery to me. There’s also a lot of little hidden features that we don’t have access to in our own code (I can&#39;t find a method that retrieves object identifiers, for comparing two types without knowing what they are, outside of the stdlib for example, yet you’ll find them used inside AnyIndex and similar types).<br></p><p>Is the publicly exposed `ObjectIdentifier` type what you&#39;re looking for?<br></p><p>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 14, 2016 at 10:00:00am</p></header><div class="content"><p>Regards<br>(From mobile)<br></p><p>&gt; On Jun 14, 2016, at 8:41 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt; <br>&gt;&gt; I used to do low latency java for trading systems... the kind of coding where we would go out of our way to avoid ANY intraday gc activity (yes it can be done, even for parsing xml files). So we cared about a lot of things... But when you look at the numbers above on a 4_000_000 iterations loop and say the differential matters? I say you are probably using the wrong tools to write your code in the first place, and you should be using accelerate.<br>&gt; <br>&gt; Yes, I say it does matter. Of course, 4 million iterations is a fictional example that rarely occurrs on its own, but gives you an idea that there&#39;s more going on behind the scenes other than pure iteration.<br>&gt; <br>&gt; You&#39;re looking at it from a point where one app does one thing and the loop will have just a few iterations. Try to look at it from a point where the entire OS, all the processes and kernel  are written in Swift (might be distant future, but Swift is heading that way, isn&#39;t it?).<br>&gt; <br>&gt; In such case if each for-loop takes a few extra instruction, then - again - yes, it matters. I know we&#39;re not talking about all for-loops, just those filtering the sequence - which seems not that common of a case - but my point is valid, that Swift should provide easily-reachable means to be a &quot;good citizen&quot;. Removing it will lead developers to use .filter(_:) instead, in order to save lines of code and additional typing.<br>&gt; <br>&gt; While many searches in open source code found a minimum usage of for-in-where, I think this is not due to it being confusing, but just not well known, otherwise it would be used a lot more. Most developers that have prior programming experience will only skim through the Language Guide itself, which doesn&#39;t mention that `where` can be used in for loops (!!!), or even while loops and there isn&#39;t a single example where it would be used.<br>&gt; <br>&gt; Both<br>&gt; https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ControlFlow.html<br>&gt; and the ePub download on https://swift.org/documentation/#the-swift-programming-language<br>&gt; <br>&gt; Maybe I&#39;m missing something, but the language guide only mentions `where` for the switch-case scenario. So the argument (which floated around here) that this is not being actively used is kind of moot since how could anyone be using it since it&#39;s not properly documented and no one who doesn&#39;t closely watch release notes can possibly know about this.<br></p><p>Non-argument... everything that has been removed was documented prior to its removal.<br></p><p>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; As for the &#39;<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;ve previously noted that if/guard-continue come in really close speed-wise, which makes them candidates for a fix-it in case `where` is indeed removed.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My response here was solely to Jean-Daniel&#39;s note that he mustn&#39;t forget to include the lazy accessor, pointing out that even the lazy accessor is slower than using an inline check.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160614/1c561287/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 14, 2016 at 10:00:00am</p></header><div class="content"><p>Regards<br>(From mobile)<br></p><p>&gt; On Jun 14, 2016, at 7:01 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 13, 2016, at 9:59 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; See the benchmarks me and Erica have posted here a few days back - even with the lazy accessor, if you decided to use filter(_:), you lost 10+% of performance. Correct way to do this without `where` and without performance penalization is to use guard within the for-in loop.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 10% on a microbenchmark repeater 4000000 times is hardly a justification for going on way or the other.<br>&gt;&gt; <br>&gt;&gt; You&#39;re right: 10% on a microbenchmark isn&#39;t the best possible data. If you have better data, we are all ears.<br>&gt; <br>&gt; I never said that it&#39;s a deal-breaker, but it is definitely something to consider. Since we&#39;re discussing performance of the loop itself, you can&#39;t perform much in the body of the for loop since it would skew the result (obviously). <br></p><p>This is a potentially very questionable statement as it stands!  Rule #1 of micro benchmarking is: they measure something for sure, but do you know what? Unless you do understand your compiler and how to make it do what you want, micro-benchmarks should always be assumed to be a misleading waste of time. If however you manage to convince yourself that what you measure is what your think you are measuring, then they can be a useful tool (disassembling is a good starting point).<br></p><p>Benchmarks like that should be considered wit their use-case. The numbers (provided they can be validated) would indicate that the difference is negligeable altogether. And someone doing heavy math would hopefully use accelerate for vectorization, rather than code like this.<br></p><p>&gt; <br>&gt; I&#39;ve previously noted that if/guard-continue come in really close speed-wise, which makes them candidates for a fix-it in case `where` is indeed removed.<br>&gt; <br>&gt; My response here was solely to Jean-Daniel&#39;s note that he mustn&#39;t forget to include the lazy accessor, pointing out that even the lazy accessor is slower than using an inline check.<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 13, 2016 at 12:00:00pm</p></header><div class="content"><p>This is not a sound argument. If your filtering can be expressed as a where<br>clause, then you would only have to read one line into the loop to see it<br>in the form of a guard clause.<br></p><p>Moreover, if what you&#39;re arguing is that you shouldn&#39;t ever have to *read*<br>inside the loop to know if a sequence is filtered, how do you propose that<br>we do that? Remove the continue keyword?<br></p><p>On Mon, Jun 13, 2016 at 6:16 AM Jean-Daniel Dupas via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; -1 for the removal.<br>&gt;<br>&gt; When I read code, I find it far more visible that a loop is over a filter<br>&gt; list when the filter clause is on the same line, than when the filter<br>&gt; clause is inside the loop.<br>&gt;<br>&gt; Having to read the full content of the loop to determine if the list is<br>&gt; filtered or not is not an improvement IMHO.<br>&gt;<br>&gt; Moreover, I find it far cleaner to use the where clause that having to<br>&gt; remember than I have to use the lazy accessor to avoid a performance hit.<br>&gt;<br>&gt; Le 13 juin 2016 à 06:39, Charlie Monroe via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;<br>&gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party Swift<br>&gt; Repos&quot; folder and did the same search. Among the 15 repos in that folder, a<br>&gt; joint search returned about 650 hits on for-in (again with some false<br>&gt; positives) and not a single for-in-while use.<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt;<br>&gt; Not to undermine this fact, but I believe the fact that `where` can be<br>&gt; used in a for loop is not widely known. I didn&#39;t know about it until about<br>&gt; a month ago (haven&#39;t really read much docs, but most people don&#39;t either).<br>&gt;<br>&gt; But after I found out about it, I started using it and it IMHO improved<br>&gt; readability of my code. Not by much, but it&#39;s the little things that make<br>&gt; you smile, right?<br>&gt;<br>&gt; Many people here argument that `where` is a Swift speciality and needs to<br>&gt; be learned by the developer - the alternative is to teach the person what&#39;s<br>&gt; the proper alternative - that using .filter can have performance impact and<br>&gt; that the *correct* way is to use guard within the for loop. And that&#39;s IMHO<br>&gt; much worse than teaching a person about using `where` within a for loop.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/1b8c83ec/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June 13, 2016 at 09:00:00am</p></header><div class="content"><p>Are you really surprised that some people don&#39;t want this taken away?<br></p><p>The burden should be on those that want it taken out of the language and not those that want it kept. After all something is being removed and it should be a delicate process. <br></p><p>Don&#39;t be surprised when the defenders say it is more readable to them. That is a *sound* argument in my opinion. <br></p><p>Brandon<br></p><p>Sent from my iPad<br></p><p>&gt; On Jun 13, 2016, at 8:33 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; This is not a sound argument. If your filtering can be expressed as a where clause, then you would only have to read one line into the loop to see it in the form of a guard clause.<br>&gt; <br>&gt; Moreover, if what you&#39;re arguing is that you shouldn&#39;t ever have to *read* inside the loop to know if a sequence is filtered, how do you propose that we do that? Remove the continue keyword?<br>&gt; <br>&gt;&gt; On Mon, Jun 13, 2016 at 6:16 AM Jean-Daniel Dupas via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; -1 for the removal.<br>&gt;&gt; <br>&gt;&gt; When I read code, I find it far more visible that a loop is over a filter list when the filter clause is on the same line, than when the filter clause is inside the loop.<br>&gt;&gt; <br>&gt;&gt; Having to read the full content of the loop to determine if the list is filtered or not is not an improvement IMHO.<br>&gt;&gt; <br>&gt;&gt; Moreover, I find it far cleaner to use the where clause that having to remember than I have to use the lazy accessor to avoid a performance hit.<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; Le 13 juin 2016 à 06:39, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party Swift Repos&quot; folder and did the same search. Among the 15 repos in that folder, a joint search returned about 650 hits on for-in (again with some false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- E<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Not to undermine this fact, but I believe the fact that `where` can be used in a for loop is not widely known. I didn&#39;t know about it until about a month ago (haven&#39;t really read much docs, but most people don&#39;t either).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But after I found out about it, I started using it and it IMHO improved readability of my code. Not by much, but it&#39;s the little things that make you smile, right?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Many people here argument that `where` is a Swift speciality and needs to be learned by the developer - the alternative is to teach the person what&#39;s the proper alternative - that using .filter can have performance impact and that the *correct* way is to use guard within the for loop. And that&#39;s IMHO much worse than teaching a person about using `where` within a for loop.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/021eddac/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 13, 2016 at 08:00:00am</p></header><div class="content"><p>On Mon, Jun 13, 2016 at 8:16 AM, Brandon Knope &lt;bknope at me.com&gt; wrote:<br></p><p>&gt; Are you really surprised that some people don&#39;t want this taken away?<br>&gt;<br></p><p>Nope, that&#39;s to be expected.<br></p><p><br>&gt; The burden should be on those that want it taken out of the language and<br>&gt; not those that want it kept. After all something is being removed and it<br>&gt; should be a delicate process.<br>&gt;<br></p><p>Agreed. We who think it&#39;s better to take this syntax out have advanced an<br>argument with several prongs. Namely, that the `where` clause serves no<br>independent purpose; that a more general solution has already been added to<br>the language (as well as another in the stdlib); that the `where` clause is<br>not necessary for progressive disclosure to new users before they&#39;re ready<br>for the general solution; that it is, at present, rarely used in practice;<br>that it has no analog in other commonly used general purpose languages in<br>the C family; that it is the remnant of a direction in which the core team<br>later decided not to pursue; and that, given its lack of utility, lack of<br>use, and vestigial state, being the cause of confusion even among a small<br>number of users (if their number be small) is grounds to conclude that it<br>is harmful to the language and therefore ought to be removed.<br></p><p><br>&gt; Don&#39;t be surprised when the defenders say it is more readable to them.<br>&gt; That is a *sound* argument in my opinion.<br>&gt;<br></p><p>IMO, it cannot stand on its own as a complete argument for saving a feature<br>in the face of the arguments we&#39;ve advanced. Couldn&#39;t you say the same for<br>`++` or `for;;` loops? I&#39;d say our case is at least as strong as that for<br>`for;;` loops. By comparison, if I recall, the `for;;` loop was argued to<br>be ill-fitting the rest of the language and lacking in usage, but it<br>certainly had utility independent of `for...in` loops and was well<br>precedented in C languages.<br></p><p><br>&gt;<br>&gt; Brandon<br>&gt;<br>&gt; Sent from my iPad<br>&gt;<br>&gt; On Jun 13, 2016, at 8:33 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; This is not a sound argument. If your filtering can be expressed as a<br>&gt; where clause, then you would only have to read one line into the loop to<br>&gt; see it in the form of a guard clause.<br>&gt;<br>&gt; Moreover, if what you&#39;re arguing is that you shouldn&#39;t ever have to *read*<br>&gt; inside the loop to know if a sequence is filtered, how do you propose that<br>&gt; we do that? Remove the continue keyword?<br>&gt;<br>&gt; On Mon, Jun 13, 2016 at 6:16 AM Jean-Daniel Dupas via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; -1 for the removal.<br>&gt;&gt;<br>&gt;&gt; When I read code, I find it far more visible that a loop is over a filter<br>&gt;&gt; list when the filter clause is on the same line, than when the filter<br>&gt;&gt; clause is inside the loop.<br>&gt;&gt;<br>&gt;&gt; Having to read the full content of the loop to determine if the list is<br>&gt;&gt; filtered or not is not an improvement IMHO.<br>&gt;&gt;<br>&gt;&gt; Moreover, I find it far cleaner to use the where clause that having to<br>&gt;&gt; remember than I have to use the lazy accessor to avoid a performance hit.<br>&gt;&gt;<br>&gt;&gt; Le 13 juin 2016 à 06:39, Charlie Monroe via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;<br>&gt;&gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party Swift<br>&gt;&gt; Repos&quot; folder and did the same search. Among the 15 repos in that folder, a<br>&gt;&gt; joint search returned about 650 hits on for-in (again with some false<br>&gt;&gt; positives) and not a single for-in-while use.<br>&gt;&gt;<br>&gt;&gt; -- E<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Not to undermine this fact, but I believe the fact that `where` can be<br>&gt;&gt; used in a for loop is not widely known. I didn&#39;t know about it until about<br>&gt;&gt; a month ago (haven&#39;t really read much docs, but most people don&#39;t either).<br>&gt;&gt;<br>&gt;&gt; But after I found out about it, I started using it and it IMHO improved<br>&gt;&gt; readability of my code. Not by much, but it&#39;s the little things that make<br>&gt;&gt; you smile, right?<br>&gt;&gt;<br>&gt;&gt; Many people here argument that `where` is a Swift speciality and needs to<br>&gt;&gt; be learned by the developer - the alternative is to teach the person what&#39;s<br>&gt;&gt; the proper alternative - that using .filter can have performance impact and<br>&gt;&gt; that the *correct* way is to use guard within the for loop. And that&#39;s IMHO<br>&gt;&gt; much worse than teaching a person about using `where` within a for loop.<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/b398883d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June 13, 2016 at 09:00:00am</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On Jun 13, 2016, at 9:36 AM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Mon, Jun 13, 2016 at 8:16 AM, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt; Are you really surprised that some people don&#39;t want this taken away?<br>&gt; <br>&gt; Nope, that&#39;s to be expected.<br>&gt;  <br>&gt;&gt; The burden should be on those that want it taken out of the language and not those that want it kept. After all something is being removed and it should be a delicate process. <br>&gt; <br>&gt; Agreed. We who think it&#39;s better to take this syntax out have advanced an argument with several prongs. Namely, that the `where` clause serves no independent purpose;<br></p><p>What does this mean or matter?<br></p><p>&gt; that a more general solution has already been added to the language (as well as another in the stdlib);<br></p><p>We have sugar all over the place to make features more palatable <br></p><p>&gt; that the `where` clause is not necessary for progressive disclosure to new users before they&#39;re ready for the general solution;<br></p><p>I have no clue what this is suppose to mean<br></p><p><br>&gt; that it is, at present, rarely used in practice;<br></p><p>It was added in the official release less than a year ago and it&#39;s not really documented well. And I&#39;m not convinced it&#39;s rarely used in practice especially when it&#39;s exactly what you want<br></p><p><br>&gt; that it has no analog in other commonly used general purpose languages in the C family;<br></p><p>Why is this a good argument for its removal?<br></p><p><br>&gt; that it is the remnant of a direction in which the core team later decided not to pursue;<br>I don&#39;t know anything about this but it sure seemed at one point they really liked where. It had to have gone through their own rigorous review process to be added in the first place?<br></p><p>&gt; and that, given its lack of utility, lack of use, and vestigial state,<br></p><p>Another opinion. This doesn&#39;t seem like a definitive argument for its removal<br></p><p>&gt; being the cause of confusion even among a small number of users (if their number be small) is grounds to conclude that it is harmful to the language and therefore ought to be removed.<br></p><p>&quot;Harmful to the language&quot; seems a bit extreme. <br></p><p>I would love to hear more from the core team on this but I know they are just too busy right now<br></p><p>Brandon <br></p><p><br>&gt;  <br>&gt;&gt; Don&#39;t be surprised when the defenders say it is more readable to them. That is a *sound* argument in my opinion. <br>&gt; <br>&gt; IMO, it cannot stand on its own as a complete argument for saving a feature in the face of the arguments we&#39;ve advanced. Couldn&#39;t you say the same for `++` or `for;;` loops? I&#39;d say our case is at least as strong as that for `for;;` loops. By comparison, if I recall, the `for;;` loop was argued to be ill-fitting the rest of the language and lacking in usage, but it certainly had utility independent of `for...in` loops and was well precedented in C languages.<br>&gt;  <br>&gt;&gt; <br>&gt;&gt; Brandon<br>&gt;&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 13, 2016, at 8:33 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is not a sound argument. If your filtering can be expressed as a where clause, then you would only have to read one line into the loop to see it in the form of a guard clause.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Moreover, if what you&#39;re arguing is that you shouldn&#39;t ever have to *read* inside the loop to know if a sequence is filtered, how do you propose that we do that? Remove the continue keyword?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Mon, Jun 13, 2016 at 6:16 AM Jean-Daniel Dupas via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; -1 for the removal.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; When I read code, I find it far more visible that a loop is over a filter list when the filter clause is on the same line, than when the filter clause is inside the loop.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Having to read the full content of the loop to determine if the list is filtered or not is not an improvement IMHO.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Moreover, I find it far cleaner to use the where clause that having to remember than I have to use the lazy accessor to avoid a performance hit.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Le 13 juin 2016 à 06:39, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party Swift Repos&quot; folder and did the same search. Among the 15 repos in that folder, a joint search returned about 650 hits on for-in (again with some false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; -- E<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Not to undermine this fact, but I believe the fact that `where` can be used in a for loop is not widely known. I didn&#39;t know about it until about a month ago (haven&#39;t really read much docs, but most people don&#39;t either).<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; But after I found out about it, I started using it and it IMHO improved readability of my code. Not by much, but it&#39;s the little things that make you smile, right?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Many people here argument that `where` is a Swift speciality and needs to be learned by the developer - the alternative is to teach the person what&#39;s the proper alternative - that using .filter can have performance impact and that the *correct* way is to use guard within the for loop. And that&#39;s IMHO much worse than teaching a person about using `where` within a for loop.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/ebc3b66c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 13, 2016 at 09:00:00am</p></header><div class="content"><p>On Mon, Jun 13, 2016 at 8:49 AM, Brandon Knope &lt;bknope at me.com&gt; wrote:<br></p><p>&gt;<br>&gt;<br>&gt; Sent from my iPad<br>&gt;<br>&gt; On Jun 13, 2016, at 9:36 AM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; On Mon, Jun 13, 2016 at 8:16 AM, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;<br>&gt;&gt; Are you really surprised that some people don&#39;t want this taken away?<br>&gt;&gt;<br>&gt;<br>&gt; Nope, that&#39;s to be expected.<br>&gt;<br>&gt;<br>&gt;&gt; The burden should be on those that want it taken out of the language and<br>&gt;&gt; not those that want it kept. After all something is being removed and it<br>&gt;&gt; should be a delicate process.<br>&gt;&gt;<br>&gt;<br>&gt; Agreed. We who think it&#39;s better to take this syntax out have advanced an<br>&gt; argument with several prongs. Namely, that the `where` clause serves no<br>&gt; independent purpose;<br>&gt;<br>&gt;<br>&gt; What does this mean or matter?<br>&gt;<br></p><p>Again, these are prongs to one argument, not independent grounds for<br>removal. We&#39;ve discussed at length what this means above.<br></p><p><br>&gt;<br>&gt; that a more general solution has already been added to the language (as<br>&gt; well as another in the stdlib);<br>&gt;<br>&gt;<br>&gt; We have sugar all over the place to make features more palatable<br>&gt;<br></p><p>This presumes that `guard` is unpalatable. I don&#39;t buy that claim.<br></p><p><br>&gt;<br>&gt; that the `where` clause is not necessary for progressive disclosure to new<br>&gt; users before they&#39;re ready for the general solution;<br>&gt;<br>&gt;<br>&gt; I have no clue what this is suppose to mean<br>&gt;<br></p><p>For instance, `if let ...` is sugar for `if case let ...?`, itself sugar<br>for `if case let .some(...)`; there have been suggestions to remove it on<br>that basis. However, it has been pointed out that one purpose for that<br>grammar is that it allows a new user to unwrap optionals without learning a<br>more advanced feature, namely pattern matching. Likewise `[Int]` may be<br>shorthand for `Array&lt;Int&gt;`, but it has the bonus of removing generics from<br>the picture, so that a user can learn one thing first (namely arrays)<br>before tackling a more advanced concept.<br></p><p>&gt; that it is, at present, rarely used in practice;<br>&gt;<br>&gt;<br>&gt; It was added in the official release less than a year ago and it&#39;s not<br>&gt; really documented well. And I&#39;m not convinced it&#39;s rarely used in practice<br>&gt; especially when it&#39;s exactly what you want<br>&gt;<br>&gt;<br>I&#39;ve endeavored to outline why it&#39;s rarely exactly what you want. Whether<br>you buy it or not, well, that&#39;s another matter.<br></p><p><br>&gt; that it has no analog in other commonly used general purpose languages in<br>&gt; the C family;<br>&gt;<br>&gt;<br>&gt; Why is this a good argument for its removal?<br>&gt;<br></p><p>Again, it&#39;s a prong of one argument, not independent grounds for removal.<br>It goes to discoverability and user expectations when they approach the<br>language. For people who switch between languages often, features that are<br>unique, especially unique features that serve non-unique purposes (such as<br>filtering an array), will be more rarely reached for than features that are<br>commonly found among languages.<br></p><p>that it is the remnant of a direction in which the core team later decided<br>&gt; not to pursue;<br>&gt;<br>&gt; I don&#39;t know anything about this but it sure seemed at one point they<br>&gt; really liked where. It had to have gone through their own rigorous review<br>&gt; process to be added in the first place?<br>&gt;<br></p><p>It was meant to be part of a larger, more elaborate push into pattern<br>matching, which IIUC was found internally to be not well accepted; the<br>larger effort was abandoned but the incipient grammar was left behind.<br></p><p><br>&gt;<br>&gt; and that, given its lack of utility, lack of use, and vestigial state,<br>&gt;<br>&gt;<br>&gt; Another opinion. This doesn&#39;t seem like a definitive argument for its<br>&gt; removal<br>&gt;<br></p><p>This is a summation of the prongs mentioned above.<br></p><p>being the cause of confusion even among a small number of users (if their<br>&gt; number be small) is grounds to conclude that it is harmful to the language<br>&gt; and therefore ought to be removed.<br>&gt;<br>&gt;<br>&gt; &quot;Harmful to the language&quot; seems a bit extreme.<br>&gt;<br>&gt; I would love to hear more from the core team on this but I know they are<br>&gt; just too busy right now<br>&gt;<br>&gt; Brandon<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;&gt; Don&#39;t be surprised when the defenders say it is more readable to them.<br>&gt;&gt; That is a *sound* argument in my opinion.<br>&gt;&gt;<br>&gt;<br>&gt; IMO, it cannot stand on its own as a complete argument for saving a<br>&gt; feature in the face of the arguments we&#39;ve advanced. Couldn&#39;t you say the<br>&gt; same for `++` or `for;;` loops? I&#39;d say our case is at least as strong as<br>&gt; that for `for;;` loops. By comparison, if I recall, the `for;;` loop was<br>&gt; argued to be ill-fitting the rest of the language and lacking in usage, but<br>&gt; it certainly had utility independent of `for...in` loops and was well<br>&gt; precedented in C languages.<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; Brandon<br>&gt;&gt;<br>&gt;&gt; Sent from my iPad<br>&gt;&gt;<br>&gt;&gt; On Jun 13, 2016, at 8:33 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; This is not a sound argument. If your filtering can be expressed as a<br>&gt;&gt; where clause, then you would only have to read one line into the loop to<br>&gt;&gt; see it in the form of a guard clause.<br>&gt;&gt;<br>&gt;&gt; Moreover, if what you&#39;re arguing is that you shouldn&#39;t ever have to<br>&gt;&gt; *read* inside the loop to know if a sequence is filtered, how do you<br>&gt;&gt; propose that we do that? Remove the continue keyword?<br>&gt;&gt;<br>&gt;&gt; On Mon, Jun 13, 2016 at 6:16 AM Jean-Daniel Dupas via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; -1 for the removal.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; When I read code, I find it far more visible that a loop is over a<br>&gt;&gt;&gt; filter list when the filter clause is on the same line, than when the<br>&gt;&gt;&gt; filter clause is inside the loop.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Having to read the full content of the loop to determine if the list is<br>&gt;&gt;&gt; filtered or not is not an improvement IMHO.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Moreover, I find it far cleaner to use the where clause that having to<br>&gt;&gt;&gt; remember than I have to use the lazy accessor to avoid a performance hit.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Le 13 juin 2016 à 06:39, Charlie Monroe via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party<br>&gt;&gt;&gt; Swift Repos&quot; folder and did the same search. Among the 15 repos in that<br>&gt;&gt;&gt; folder, a joint search returned about 650 hits on for-in (again with some<br>&gt;&gt;&gt; false positives) and not a single for-in-while use.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; -- E<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Not to undermine this fact, but I believe the fact that `where` can be<br>&gt;&gt;&gt; used in a for loop is not widely known. I didn&#39;t know about it until about<br>&gt;&gt;&gt; a month ago (haven&#39;t really read much docs, but most people don&#39;t either).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; But after I found out about it, I started using it and it IMHO improved<br>&gt;&gt;&gt; readability of my code. Not by much, but it&#39;s the little things that make<br>&gt;&gt;&gt; you smile, right?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Many people here argument that `where` is a Swift speciality and needs<br>&gt;&gt;&gt; to be learned by the developer - the alternative is to teach the person<br>&gt;&gt;&gt; what&#39;s the proper alternative - that using .filter can have performance<br>&gt;&gt;&gt; impact and that the *correct* way is to use guard within the for loop. And<br>&gt;&gt;&gt; that&#39;s IMHO much worse than teaching a person about using `where` within a<br>&gt;&gt;&gt; for loop.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/327ce8a6/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 13, 2016 at 05:00:00pm</p></header><div class="content"><p>IMO `for-in` is a special kind of loop to manipulate(iterate) a collection, <br>and was introduced because we so *often* needs to iterate collections that <br>we need a *sugar* for this (you can do all the same with `while` loop).<br></p><p>*Filtering* is another important operation we often need during the <br>iteration of collection. This is why many of us want to keep `where` for <br>`for-in` loop. Yes, as sugar, because it really simplifies our every day <br>coding(processing of collections) and makes the code more readable(IMO) and <br>understandable(IMO).<br></p><p>Personally I don&#39;t insist on `where` keyword, probably we can find another <br>word, so it will not be mixed with `where` in other places of the language.<br></p><p>Why not `filter` instead of `where` ?<br></p><p>for item in collection filter item &lt; 10 {..}<br></p><p>we have .filter for collections, it is clear what it means, `filter` in <br>`for-in` mimics the same behavior, etc<br></p><p>I&#39;d even suggest to make `for-in` loop more powerful with adding suggested <br>&#39;while&#39; but as under another name. So, `for-in` will be a powerful <br>construct to iterate, filter and break processing of collections - the only <br>one purpose why we need `for-in` at all.<br></p><p>for item in collection until item &gt; 100 {..}<br>or<br>for item in collection break item &gt; 100 {..}<br>or<br>for item in collection breakif item &gt; 100 {..}<br>or<br>for item in collection limit item &gt; 100 {..}<br>or<br>for item in collection stop item &gt; 100 {..}<br>or other keyword.<br></p><p><br>On 13.06.2016 16:36, Xiaodi Wu via swift-evolution wrote:<br>&gt; On Mon, Jun 13, 2016 at 8:16 AM, Brandon Knope &lt;bknope at me.com<br>&gt; &lt;mailto:bknope at me.com&gt;&gt; wrote:<br>&gt;<br>&gt;     Are you really surprised that some people don&#39;t want this taken away?<br>&gt;<br>&gt;<br>&gt; Nope, that&#39;s to be expected.<br>&gt;<br>&gt;<br>&gt;     The burden should be on those that want it taken out of the language<br>&gt;     and not those that want it kept. After all something is being removed<br>&gt;     and it should be a delicate process.<br>&gt;<br>&gt;<br>&gt; Agreed. We who think it&#39;s better to take this syntax out have advanced an<br>&gt; argument with several prongs. Namely, that the `where` clause serves no<br>&gt; independent purpose; that a more general solution has already been added to<br>&gt; the language (as well as another in the stdlib); that the `where` clause is<br>&gt; not necessary for progressive disclosure to new users before they&#39;re ready<br>&gt; for the general solution; that it is, at present, rarely used in practice;<br>&gt; that it has no analog in other commonly used general purpose languages in<br>&gt; the C family; that it is the remnant of a direction in which the core team<br>&gt; later decided not to pursue; and that, given its lack of utility, lack of<br>&gt; use, and vestigial state, being the cause of confusion even among a small<br>&gt; number of users (if their number be small) is grounds to conclude that it<br>&gt; is harmful to the language and therefore ought to be removed.<br>&gt;<br>&gt;<br>&gt;     Don&#39;t be surprised when the defenders say it is more readable to them.<br>&gt;     That is a *sound* argument in my opinion.<br>&gt;<br>&gt;<br>&gt; IMO, it cannot stand on its own as a complete argument for saving a feature<br>&gt; in the face of the arguments we&#39;ve advanced. Couldn&#39;t you say the same for<br>&gt; `++` or `for;;` loops? I&#39;d say our case is at least as strong as that for<br>&gt; `for;;` loops. By comparison, if I recall, the `for;;` loop was argued to<br>&gt; be ill-fitting the rest of the language and lacking in usage, but it<br>&gt; certainly had utility independent of `for...in` loops and was well<br>&gt; precedented in C languages.<br>&gt;<br>&gt;<br>&gt;<br>&gt;     Brandon<br>&gt;<br>&gt;     Sent from my iPad<br>&gt;<br>&gt;     On Jun 13, 2016, at 8:33 AM, Xiaodi Wu via swift-evolution<br>&gt;     &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;<br>&gt;&gt;     This is not a sound argument. If your filtering can be expressed as a<br>&gt;&gt;     where clause, then you would only have to read one line into the loop<br>&gt;&gt;     to see it in the form of a guard clause.<br>&gt;&gt;<br>&gt;&gt;     Moreover, if what you&#39;re arguing is that you shouldn&#39;t ever have to<br>&gt;&gt;     *read* inside the loop to know if a sequence is filtered, how do you<br>&gt;&gt;     propose that we do that? Remove the continue keyword?<br>&gt;&gt;<br>&gt;&gt;     On Mon, Jun 13, 2016 at 6:16 AM Jean-Daniel Dupas via swift-evolution<br>&gt;&gt;     &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;         -1 for the removal.<br>&gt;&gt;<br>&gt;&gt;         When I read code, I find it far more visible that a loop is over<br>&gt;&gt;         a filter list when the filter clause is on the same line, than<br>&gt;&gt;         when the filter clause is inside the loop.<br>&gt;&gt;<br>&gt;&gt;         Having to read the full content of the loop to determine if the<br>&gt;&gt;         list is filtered or not is not an improvement IMHO.<br>&gt;&gt;<br>&gt;&gt;         Moreover, I find it far cleaner to use the where clause that<br>&gt;&gt;         having to remember than I have to use the lazy accessor to avoid<br>&gt;&gt;         a performance hit.<br>&gt;&gt;<br>&gt;&gt;&gt;         Le 13 juin 2016 à 06:39, Charlie Monroe via swift-evolution<br>&gt;&gt;&gt;         &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a<br>&gt;&gt;&gt;         écrit :<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         And to follow-up to myself once again, I went to my &quot;Cool 3rd<br>&gt;&gt;&gt;&gt;         Party Swift Repos&quot; folder and did the same search. Among the 15<br>&gt;&gt;&gt;&gt;         repos in that folder, a joint search returned about 650 hits on<br>&gt;&gt;&gt;&gt;         for-in (again with some false positives) and not a single<br>&gt;&gt;&gt;&gt;         for-in-while use.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         -- E<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         Not to undermine this fact, but I believe the fact that `where`<br>&gt;&gt;&gt;         can be used in a for loop is not widely known. I didn&#39;t know<br>&gt;&gt;&gt;         about it until about a month ago (haven&#39;t really read much docs,<br>&gt;&gt;&gt;         but most people don&#39;t either).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         But after I found out about it, I started using it and it IMHO<br>&gt;&gt;&gt;         improved readability of my code. Not by much, but it&#39;s the<br>&gt;&gt;&gt;         little things that make you smile, right?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         Many people here argument that `where` is a Swift speciality and<br>&gt;&gt;&gt;         needs to be learned by the developer - the alternative is to<br>&gt;&gt;&gt;         teach the person what&#39;s the proper alternative - that using<br>&gt;&gt;&gt;         .filter can have performance impact and that the *correct* way<br>&gt;&gt;&gt;         is to use guard within the for loop. And that&#39;s IMHO much worse<br>&gt;&gt;&gt;         than teaching a person about using `where` within a for loop.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         _______________________________________________<br>&gt;&gt;&gt;&gt;         swift-evolution mailing list<br>&gt;&gt;&gt;&gt;         swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         _______________________________________________<br>&gt;&gt;&gt;         swift-evolution mailing list<br>&gt;&gt;&gt;         swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;         _______________________________________________<br>&gt;&gt;         swift-evolution mailing list<br>&gt;&gt;         swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;     _______________________________________________<br>&gt;&gt;     swift-evolution mailing list<br>&gt;&gt;     swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 13, 2016 at 09:00:00am</p></header><div class="content"><p>On Mon, Jun 13, 2016 at 9:27 AM, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br></p><p>&gt; IMO `for-in` is a special kind of loop to manipulate(iterate) a<br>&gt; collection, and was introduced because we so *often* needs to iterate<br>&gt; collections that we need a *sugar* for this (you can do all the same with<br>&gt; `while` loop).<br>&gt;<br></p><p>Sequences, not just collections.<br></p><p>It&#39;s rather tricky to write a `while` loop *correctly* to do the same thing<br>as a `for` loop, and it exposes the concept of the underlying iterator,<br>which is a more advanced concept. This is why the `for...in` loop hold its<br>own weight as sugar. By contrast, `while` does not, because it is trivial<br>to write an `if` or `guard` statement correctly, and mastering the concept<br>of a conditional statement is a prerequisite for mastering loops. For these<br>reasons, it&#39;s not apt to compare `while` clauses with `for...in` loops.<br></p><p><br>&gt; *Filtering* is another important operation we often need during the<br>&gt; iteration of collection.<br></p><p><br>I think the evidence has shown that it&#39;s actually not very often that you<br>need to do so.<br></p><p><br>&gt; This is why many of us want to keep `where` for `for-in` loop. Yes, as<br>&gt; sugar, because it really simplifies our every day coding(processing of<br>&gt; collections) and makes the code more readable(IMO) and understandable(IMO).<br>&gt;<br></p><p>FWIW, IMO, it&#39;s less readable and less understandable. But there&#39;s no point<br>in going back and forth on this.<br></p><p><br>&gt; Personally I don&#39;t insist on `where` keyword, probably we can find another<br>&gt; word, so it will not be mixed with `where` in other places of the language.<br>&gt;<br>&gt; Why not `filter` instead of `where` ?<br>&gt;<br>&gt; for item in collection filter item &lt; 10 {..}<br>&gt;<br>&gt; we have .filter for collections, it is clear what it means, `filter` in<br>&gt; `for-in` mimics the same behavior, etc<br>&gt;<br>&gt; I&#39;d even suggest to make `for-in` loop more powerful with adding suggested<br>&gt; &#39;while&#39; but as under another name. So, `for-in` will be a powerful<br>&gt; construct to iterate, filter and break processing of collections - the only<br>&gt; one purpose why we need `for-in` at all.<br>&gt;<br></p><p>We already have keywords for breaking and for prematurely terminating from<br>a loop. They&#39;re called `break` and `continue`, and they work inside every<br>loop.<br></p><p><br>&gt;<br>&gt; for item in collection until item &gt; 100 {..}<br>&gt; or<br>&gt; for item in collection break item &gt; 100 {..}<br>&gt; or<br>&gt; for item in collection breakif item &gt; 100 {..}<br>&gt; or<br>&gt; for item in collection limit item &gt; 100 {..}<br>&gt; or<br>&gt; for item in collection stop item &gt; 100 {..}<br>&gt; or other keyword.<br>&gt;<br>&gt;<br>&gt; On 13.06.2016 16:36, Xiaodi Wu via swift-evolution wrote:<br>&gt;<br>&gt;&gt; On Mon, Jun 13, 2016 at 8:16 AM, Brandon Knope &lt;bknope at me.com<br>&gt;&gt; &lt;mailto:bknope at me.com&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;     Are you really surprised that some people don&#39;t want this taken away?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Nope, that&#39;s to be expected.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     The burden should be on those that want it taken out of the language<br>&gt;&gt;     and not those that want it kept. After all something is being removed<br>&gt;&gt;     and it should be a delicate process.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Agreed. We who think it&#39;s better to take this syntax out have advanced an<br>&gt;&gt; argument with several prongs. Namely, that the `where` clause serves no<br>&gt;&gt; independent purpose; that a more general solution has already been added<br>&gt;&gt; to<br>&gt;&gt; the language (as well as another in the stdlib); that the `where` clause<br>&gt;&gt; is<br>&gt;&gt; not necessary for progressive disclosure to new users before they&#39;re ready<br>&gt;&gt; for the general solution; that it is, at present, rarely used in practice;<br>&gt;&gt; that it has no analog in other commonly used general purpose languages in<br>&gt;&gt; the C family; that it is the remnant of a direction in which the core team<br>&gt;&gt; later decided not to pursue; and that, given its lack of utility, lack of<br>&gt;&gt; use, and vestigial state, being the cause of confusion even among a small<br>&gt;&gt; number of users (if their number be small) is grounds to conclude that it<br>&gt;&gt; is harmful to the language and therefore ought to be removed.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     Don&#39;t be surprised when the defenders say it is more readable to them.<br>&gt;&gt;     That is a *sound* argument in my opinion.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; IMO, it cannot stand on its own as a complete argument for saving a<br>&gt;&gt; feature<br>&gt;&gt; in the face of the arguments we&#39;ve advanced. Couldn&#39;t you say the same for<br>&gt;&gt; `++` or `for;;` loops? I&#39;d say our case is at least as strong as that for<br>&gt;&gt; `for;;` loops. By comparison, if I recall, the `for;;` loop was argued to<br>&gt;&gt; be ill-fitting the rest of the language and lacking in usage, but it<br>&gt;&gt; certainly had utility independent of `for...in` loops and was well<br>&gt;&gt; precedented in C languages.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     Brandon<br>&gt;&gt;<br>&gt;&gt;     Sent from my iPad<br>&gt;&gt;<br>&gt;&gt;     On Jun 13, 2016, at 8:33 AM, Xiaodi Wu via swift-evolution<br>&gt;&gt;     &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;     This is not a sound argument. If your filtering can be expressed as a<br>&gt;&gt;&gt;     where clause, then you would only have to read one line into the loop<br>&gt;&gt;&gt;     to see it in the form of a guard clause.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     Moreover, if what you&#39;re arguing is that you shouldn&#39;t ever have to<br>&gt;&gt;&gt;     *read* inside the loop to know if a sequence is filtered, how do you<br>&gt;&gt;&gt;     propose that we do that? Remove the continue keyword?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     On Mon, Jun 13, 2016 at 6:16 AM Jean-Daniel Dupas via swift-evolution<br>&gt;&gt;&gt;     &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         -1 for the removal.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         When I read code, I find it far more visible that a loop is over<br>&gt;&gt;&gt;         a filter list when the filter clause is on the same line, than<br>&gt;&gt;&gt;         when the filter clause is inside the loop.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         Having to read the full content of the loop to determine if the<br>&gt;&gt;&gt;         list is filtered or not is not an improvement IMHO.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         Moreover, I find it far cleaner to use the where clause that<br>&gt;&gt;&gt;         having to remember than I have to use the lazy accessor to avoid<br>&gt;&gt;&gt;         a performance hit.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         Le 13 juin 2016 à 06:39, Charlie Monroe via swift-evolution<br>&gt;&gt;&gt;&gt;         &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; a<br>&gt;&gt;&gt;&gt;         écrit :<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         And to follow-up to myself once again, I went to my &quot;Cool 3rd<br>&gt;&gt;&gt;&gt;&gt;         Party Swift Repos&quot; folder and did the same search. Among the 15<br>&gt;&gt;&gt;&gt;&gt;         repos in that folder, a joint search returned about 650 hits on<br>&gt;&gt;&gt;&gt;&gt;         for-in (again with some false positives) and not a single<br>&gt;&gt;&gt;&gt;&gt;         for-in-while use.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;         -- E<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         Not to undermine this fact, but I believe the fact that `where`<br>&gt;&gt;&gt;&gt;         can be used in a for loop is not widely known. I didn&#39;t know<br>&gt;&gt;&gt;&gt;         about it until about a month ago (haven&#39;t really read much docs,<br>&gt;&gt;&gt;&gt;         but most people don&#39;t either).<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         But after I found out about it, I started using it and it IMHO<br>&gt;&gt;&gt;&gt;         improved readability of my code. Not by much, but it&#39;s the<br>&gt;&gt;&gt;&gt;         little things that make you smile, right?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         Many people here argument that `where` is a Swift speciality and<br>&gt;&gt;&gt;&gt;         needs to be learned by the developer - the alternative is to<br>&gt;&gt;&gt;&gt;         teach the person what&#39;s the proper alternative - that using<br>&gt;&gt;&gt;&gt;         .filter can have performance impact and that the *correct* way<br>&gt;&gt;&gt;&gt;         is to use guard within the for loop. And that&#39;s IMHO much worse<br>&gt;&gt;&gt;&gt;         than teaching a person about using `where` within a for loop.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;         swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;         swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         _______________________________________________<br>&gt;&gt;&gt;&gt;         swift-evolution mailing list<br>&gt;&gt;&gt;&gt;         swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         _______________________________________________<br>&gt;&gt;&gt;         swift-evolution mailing list<br>&gt;&gt;&gt;         swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     _______________________________________________<br>&gt;&gt;&gt;     swift-evolution mailing list<br>&gt;&gt;&gt;     swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/169632ee/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 13, 2016 at 12:00:00pm</p></header><div class="content"><p>What did you use before `where` existed?<br></p><p>On Mon, Jun 13, 2016 at 1:29 AM Charlie Monroe via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party Swift<br>&gt; Repos&quot; folder and did the same search. Among the 15 repos in that folder, a<br>&gt; joint search returned about 650 hits on for-in (again with some false<br>&gt; positives) and not a single for-in-while use.<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt;<br>&gt; Not to undermine this fact, but I believe the fact that `where` can be<br>&gt; used in a for loop is not widely known. I didn&#39;t know about it until about<br>&gt; a month ago (haven&#39;t really read much docs, but most people don&#39;t either).<br>&gt;<br>&gt; But after I found out about it, I started using it and it IMHO improved<br>&gt; readability of my code. Not by much, but it&#39;s the little things that make<br>&gt; you smile, right?<br>&gt;<br>&gt; Many people here argument that `where` is a Swift speciality and needs to<br>&gt; be learned by the developer - the alternative is to teach the person what&#39;s<br>&gt; the proper alternative - that using .filter can have performance impact and<br>&gt; that the *correct* way is to use guard within the for loop. And that&#39;s IMHO<br>&gt; much worse than teaching a person about using `where` within a for loop.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/84fc7dcb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 13, 2016 at 03:00:00pm</p></header><div class="content"><p>if-continue. But I gladly took upon for-in-where as soon as I found out about it since it&#39;s more expressive and simply is less typing.<br></p><p>&gt; On Jun 13, 2016, at 2:24 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; What did you use before `where` existed?<br>&gt; <br>&gt; On Mon, Jun 13, 2016 at 1:29 AM Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party Swift Repos&quot; folder and did the same search. Among the 15 repos in that folder, a joint search returned about 650 hits on for-in (again with some false positives) and not a single for-in-while use.<br>&gt;&gt; <br>&gt; <br>&gt;&gt; -- E<br>&gt; <br>&gt; Not to undermine this fact, but I believe the fact that `where` can be used in a for loop is not widely known. I didn&#39;t know about it until about a month ago (haven&#39;t really read much docs, but most people don&#39;t either).<br>&gt; <br>&gt; But after I found out about it, I started using it and it IMHO improved readability of my code. Not by much, but it&#39;s the little things that make you smile, right?<br>&gt; <br>&gt; Many people here argument that `where` is a Swift speciality and needs to be learned by the developer - the alternative is to teach the person what&#39;s the proper alternative - that using .filter can have performance impact and that the *correct* way is to use guard within the for loop. And that&#39;s IMHO much worse than teaching a person about using `where` within a for loop.<br>&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;_______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/fd26a37f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 13, 2016 at 09:00:00am</p></header><div class="content"><p>On Mon, Jun 13, 2016 at 8:58 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt;<br>wrote:<br></p><p>&gt; if-continue. But I gladly took upon for-in-where as soon as I found out<br>&gt; about it since it&#39;s more expressive and simply is less typing.<br>&gt;<br></p><p>I don&#39;t think we use the term &#39;expressive&#39; in the same way. I understand it<br>to mean that permitting the expression of more things. But of course,<br>`where` does only a subset of `guard...continue` or `if...continue`; thus,<br>less expressive.<br></p><p><br>&gt;<br>&gt; On Jun 13, 2016, at 2:24 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; What did you use before `where` existed?<br>&gt;<br>&gt; On Mon, Jun 13, 2016 at 1:29 AM Charlie Monroe via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; And to follow-up to myself once again, I went to my &quot;Cool 3rd Party Swift<br>&gt;&gt; Repos&quot; folder and did the same search. Among the 15 repos in that folder, a<br>&gt;&gt; joint search returned about 650 hits on for-in (again with some false<br>&gt;&gt; positives) and not a single for-in-while use.<br>&gt;&gt;<br>&gt;&gt; -- E<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Not to undermine this fact, but I believe the fact that `where` can be<br>&gt;&gt; used in a for loop is not widely known. I didn&#39;t know about it until about<br>&gt;&gt; a month ago (haven&#39;t really read much docs, but most people don&#39;t either).<br>&gt;&gt;<br>&gt;&gt; But after I found out about it, I started using it and it IMHO improved<br>&gt;&gt; readability of my code. Not by much, but it&#39;s the little things that make<br>&gt;&gt; you smile, right?<br>&gt;&gt;<br>&gt;&gt; Many people here argument that `where` is a Swift speciality and needs to<br>&gt;&gt; be learned by the developer - the alternative is to teach the person what&#39;s<br>&gt;&gt; the proper alternative - that using .filter can have performance impact and<br>&gt;&gt; that the *correct* way is to use guard within the for loop. And that&#39;s IMHO<br>&gt;&gt; much worse than teaching a person about using `where` within a for loop.<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/38145fc9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>June 13, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jun 13, 2016, at 9:05 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Mon, Jun 13, 2016 at 8:58 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt; if-continue. But I gladly took upon for-in-where as soon as I found out about it since it&#39;s more expressive and simply is less typing.<br>&gt; <br>&gt; I don&#39;t think we use the term &#39;expressive&#39; in the same way. I understand it to mean that permitting the expression of more things. But of course, `where` does only a subset of `guard...continue` or `if...continue`; thus, less expressive.<br></p><p>The fact that you could simply use the words “I am happy” to express the concept of being happy does not mean that writing a complex poem that also conveys happiness should therefore be prohibited.<br></p><p>l8r<br>Sean<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 13, 2016 at 02:00:00pm</p></header><div class="content"><p>How do you mean? I don&#39;t follow.<br>On Mon, Jun 13, 2016 at 09:11 Sean Heber &lt;sean at fifthace.com&gt; wrote:<br></p><p>&gt; &gt; On Jun 13, 2016, at 9:05 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; On Mon, Jun 13, 2016 at 8:58 AM, Charlie Monroe &lt;<br>&gt; charlie at charliemonroe.net&gt; wrote:<br>&gt; &gt; if-continue. But I gladly took upon for-in-where as soon as I found out<br>&gt; about it since it&#39;s more expressive and simply is less typing.<br>&gt; &gt;<br>&gt; &gt; I don&#39;t think we use the term &#39;expressive&#39; in the same way. I understand<br>&gt; it to mean that permitting the expression of more things. But of course,<br>&gt; `where` does only a subset of `guard...continue` or `if...continue`; thus,<br>&gt; less expressive.<br>&gt;<br>&gt; The fact that you could simply use the words “I am happy” to express the<br>&gt; concept of being happy does not mean that writing a complex poem that also<br>&gt; conveys happiness should therefore be prohibited.<br>&gt;<br>&gt; l8r<br>&gt; Sean<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/bac763f4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>June 13, 2016 at 09:00:00am</p></header><div class="content"><p>I’m just (probably obtusely) suggesting that there are different levels and styles of expression and that the existence of one does not render other styles invalid.<br></p><p>In relation to the “where” debate, the fact that you can express everything with “guard” or “if” as you can with “where” is not, in my mind, a strong  argument against “where” because it ignores other more intangible aspects that are going to be a lot harder to quantify since they depend on the context of the problem, the surrounding code, the mindset of the writer, and the assumed mindset of the reader.<br></p><p>I don’t dispute that we *could* live without “where” - that is not the point. We could also live without classes or generics or any of a variety of other features - but why should we when we don’t have to?<br></p><p>l8r<br>Sean<br></p><p><br>&gt; On Jun 13, 2016, at 9:19 AM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; How do you mean? I don&#39;t follow.<br>&gt; On Mon, Jun 13, 2016 at 09:11 Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt; &gt; On Jun 13, 2016, at 9:05 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; On Mon, Jun 13, 2016 at 8:58 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt; &gt; if-continue. But I gladly took upon for-in-where as soon as I found out about it since it&#39;s more expressive and simply is less typing.<br>&gt; &gt;<br>&gt; &gt; I don&#39;t think we use the term &#39;expressive&#39; in the same way. I understand it to mean that permitting the expression of more things. But of course, `where` does only a subset of `guard...continue` or `if...continue`; thus, less expressive.<br>&gt; <br>&gt; The fact that you could simply use the words “I am happy” to express the concept of being happy does not mean that writing a complex poem that also conveys happiness should therefore be prohibited.<br>&gt; <br>&gt; l8r<br>&gt; Sean<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 13, 2016 at 09:00:00am</p></header><div class="content"><p>On Mon, Jun 13, 2016 at 9:28 AM, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br></p><p>&gt; I’m just (probably obtusely) suggesting that there are different levels<br>&gt; and styles of expression and that the existence of one does not render<br>&gt; other styles invalid.<br>&gt;<br>&gt; In relation to the “where” debate, the fact that you can express<br>&gt; everything with “guard” or “if” as you can with “where” is not, in my mind,<br>&gt; a strong  argument against “where” because it ignores other more intangible<br>&gt; aspects that are going to be a lot harder to quantify since they depend on<br>&gt; the context of the problem, the surrounding code, the mindset of the<br>&gt; writer, and the assumed mindset of the reader.<br>&gt;<br>&gt; I don’t dispute that we *could* live without “where” - that is not the<br>&gt; point. We could also live without classes or generics or any of a variety<br>&gt; of other features - but why should we when we don’t have to?<br>&gt;<br></p><p>I&#39;m not sure where this comes in. I was clarifying what I mean when I call<br>a language construct &#39;expressive.&#39; As I understand the term, `where` is not<br>expressive, whereas classes and generics are expressive.<br></p><p><br>&gt;<br>&gt; l8r<br>&gt; Sean<br>&gt;<br>&gt;<br>&gt; &gt; On Jun 13, 2016, at 9:19 AM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; How do you mean? I don&#39;t follow.<br>&gt; &gt; On Mon, Jun 13, 2016 at 09:11 Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt; &gt; &gt; On Jun 13, 2016, at 9:05 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; On Mon, Jun 13, 2016 at 8:58 AM, Charlie Monroe &lt;<br>&gt; charlie at charliemonroe.net&gt; wrote:<br>&gt; &gt; &gt; if-continue. But I gladly took upon for-in-where as soon as I found<br>&gt; out about it since it&#39;s more expressive and simply is less typing.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; I don&#39;t think we use the term &#39;expressive&#39; in the same way. I<br>&gt; understand it to mean that permitting the expression of more things. But of<br>&gt; course, `where` does only a subset of `guard...continue` or<br>&gt; `if...continue`; thus, less expressive.<br>&gt; &gt;<br>&gt; &gt; The fact that you could simply use the words “I am happy” to express the<br>&gt; concept of being happy does not mean that writing a complex poem that also<br>&gt; conveys happiness should therefore be prohibited.<br>&gt; &gt;<br>&gt; &gt; l8r<br>&gt; &gt; Sean<br>&gt; &gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/8fce96e5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 13, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Jun 13, 2016, at 4:46 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Mon, Jun 13, 2016 at 9:28 AM, Sean Heber &lt;sean at fifthace.com &lt;mailto:sean at fifthace.com&gt;&gt; wrote:<br>&gt; I’m just (probably obtusely) suggesting that there are different levels and styles of expression and that the existence of one does not render other styles invalid.<br>&gt; <br>&gt; In relation to the “where” debate, the fact that you can express everything with “guard” or “if” as you can with “where” is not, in my mind, a strong  argument against “where” because it ignores other more intangible aspects that are going to be a lot harder to quantify since they depend on the context of the problem, the surrounding code, the mindset of the writer, and the assumed mindset of the reader.<br>&gt; <br>&gt; I don’t dispute that we *could* live without “where” - that is not the point. We could also live without classes or generics or any of a variety of other features - but why should we when we don’t have to?<br>&gt; <br>&gt; I&#39;m not sure where this comes in. I was clarifying what I mean when I call a language construct &#39;expressive.&#39; As I understand the term, `where` is not expressive, whereas classes and generics are expressive.<br></p><p>Perhaps this is due to English not being my first language, but I go by the dictionary definition of expressive:<br></p><p>expressive (adjective) - effectively conveying thought or feeling.<br></p><p>And I believe that for-in-where is expressing the condition more effectively (and efficiently) than adding if/guard-continue into the actual code block.<br></p><p>&gt;  <br>&gt; <br>&gt; l8r<br>&gt; Sean<br>&gt; <br>&gt; <br>&gt; &gt; On Jun 13, 2016, at 9:19 AM, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; How do you mean? I don&#39;t follow.<br>&gt; &gt; On Mon, Jun 13, 2016 at 09:11 Sean Heber &lt;sean at fifthace.com &lt;mailto:sean at fifthace.com&gt;&gt; wrote:<br>&gt; &gt; &gt; On Jun 13, 2016, at 9:05 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; On Mon, Jun 13, 2016 at 8:58 AM, Charlie Monroe &lt;charlie at charliemonroe.net &lt;mailto:charlie at charliemonroe.net&gt;&gt; wrote:<br>&gt; &gt; &gt; if-continue. But I gladly took upon for-in-where as soon as I found out about it since it&#39;s more expressive and simply is less typing.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; I don&#39;t think we use the term &#39;expressive&#39; in the same way. I understand it to mean that permitting the expression of more things. But of course, `where` does only a subset of `guard...continue` or `if...continue`; thus, less expressive.<br>&gt; &gt;<br>&gt; &gt; The fact that you could simply use the words “I am happy” to express the concept of being happy does not mean that writing a complex poem that also conveys happiness should therefore be prohibited.<br>&gt; &gt;<br>&gt; &gt; l8r<br>&gt; &gt; Sean<br>&gt; &gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/400ae41c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 13, 2016 at 10:00:00am</p></header><div class="content"><p>On Mon, Jun 13, 2016 at 9:54 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt;<br>wrote:<br></p><p>&gt;<br>&gt; On Jun 13, 2016, at 4:46 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; On Mon, Jun 13, 2016 at 9:28 AM, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt;<br>&gt;&gt; I’m just (probably obtusely) suggesting that there are different levels<br>&gt;&gt; and styles of expression and that the existence of one does not render<br>&gt;&gt; other styles invalid.<br>&gt;&gt;<br>&gt;&gt; In relation to the “where” debate, the fact that you can express<br>&gt;&gt; everything with “guard” or “if” as you can with “where” is not, in my mind,<br>&gt;&gt; a strong  argument against “where” because it ignores other more intangible<br>&gt;&gt; aspects that are going to be a lot harder to quantify since they depend on<br>&gt;&gt; the context of the problem, the surrounding code, the mindset of the<br>&gt;&gt; writer, and the assumed mindset of the reader.<br>&gt;&gt;<br>&gt;&gt; I don’t dispute that we *could* live without “where” - that is not the<br>&gt;&gt; point. We could also live without classes or generics or any of a variety<br>&gt;&gt; of other features - but why should we when we don’t have to?<br>&gt;&gt;<br>&gt;<br>&gt; I&#39;m not sure where this comes in. I was clarifying what I mean when I call<br>&gt; a language construct &#39;expressive.&#39; As I understand the term, `where` is not<br>&gt; expressive, whereas classes and generics are expressive.<br>&gt;<br>&gt;<br>&gt; Perhaps this is due to English not being my first language, but I go by<br>&gt; the dictionary definition of expressive:<br>&gt;<br>&gt; expressive (adjective) - effectively conveying thought or feeling.<br>&gt;<br>&gt; And I believe that for-in-where is expressing the condition more<br>&gt; effectively (and efficiently) than adding if/guard-continue into the actual<br>&gt; code block.<br>&gt;<br></p><p>That&#39;s fine for English, but I just mean that in a language design context<br>I&#39;ve always understood the word to encompass the *breadth* of thoughts that<br>can be expressed. In that sense, `where` might express one thing<br>economically, but it cannot express very many things at all, no matter how<br>much text you write in a `where` clause.<br></p><p>&gt;<br>&gt;&gt; l8r<br>&gt;&gt; Sean<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; &gt; On Jun 13, 2016, at 9:19 AM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; How do you mean? I don&#39;t follow.<br>&gt;&gt; &gt; On Mon, Jun 13, 2016 at 09:11 Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt;&gt; &gt; &gt; On Jun 13, 2016, at 9:05 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt; &gt;<br>&gt;&gt; &gt; &gt; On Mon, Jun 13, 2016 at 8:58 AM, Charlie Monroe &lt;<br>&gt;&gt; charlie at charliemonroe.net&gt; wrote:<br>&gt;&gt; &gt; &gt; if-continue. But I gladly took upon for-in-where as soon as I found<br>&gt;&gt; out about it since it&#39;s more expressive and simply is less typing.<br>&gt;&gt; &gt; &gt;<br>&gt;&gt; &gt; &gt; I don&#39;t think we use the term &#39;expressive&#39; in the same way. I<br>&gt;&gt; understand it to mean that permitting the expression of more things. But of<br>&gt;&gt; course, `where` does only a subset of `guard...continue` or<br>&gt;&gt; `if...continue`; thus, less expressive.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; The fact that you could simply use the words “I am happy” to express<br>&gt;&gt; the concept of being happy does not mean that writing a complex poem that<br>&gt;&gt; also conveys happiness should therefore be prohibited.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; l8r<br>&gt;&gt; &gt; Sean<br>&gt;&gt; &gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/9de75df4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>June 13, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jun 13, 2016, at 10:16 AM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Mon, Jun 13, 2016 at 9:54 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt; <br>&gt;&gt; On Jun 13, 2016, at 4:46 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Mon, Jun 13, 2016 at 9:28 AM, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt;&gt; I’m just (probably obtusely) suggesting that there are different levels and styles of expression and that the existence of one does not render other styles invalid.<br>&gt;&gt; <br>&gt;&gt; In relation to the “where” debate, the fact that you can express everything with “guard” or “if” as you can with “where” is not, in my mind, a strong  argument against “where” because it ignores other more intangible aspects that are going to be a lot harder to quantify since they depend on the context of the problem, the surrounding code, the mindset of the writer, and the assumed mindset of the reader.<br>&gt;&gt; <br>&gt;&gt; I don’t dispute that we *could* live without “where” - that is not the point. We could also live without classes or generics or any of a variety of other features - but why should we when we don’t have to?<br>&gt;&gt; <br>&gt;&gt; I&#39;m not sure where this comes in. I was clarifying what I mean when I call a language construct &#39;expressive.&#39; As I understand the term, `where` is not expressive, whereas classes and generics are expressive.<br>&gt; <br>&gt; Perhaps this is due to English not being my first language, but I go by the dictionary definition of expressive:<br>&gt; <br>&gt; expressive (adjective) - effectively conveying thought or feeling.<br>&gt; <br>&gt; And I believe that for-in-where is expressing the condition more effectively (and efficiently) than adding if/guard-continue into the actual code block.<br>&gt; <br>&gt; That&#39;s fine for English, but I just mean that in a language design context I&#39;ve always understood the word to encompass the *breadth* of thoughts that can be expressed. In that sense, `where` might express one thing economically, but it cannot express very many things at all, no matter how much text you write in a `where` clause.<br></p><p>Yes, true, there are certainly two meanings in play here - the technical domain specific concept, and the more casual definition. I think the concern of myself (and some others) is that the technical definition, perhaps somewhat ironically, is not expressive enough to capture all of the facets of expression that matter to all of us! I think this particular discussion is taking place at the intersection of technology and liberal arts.<br></p><p>l8r<br>Sean<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 13, 2016 at 05:00:00pm</p></header><div class="content"><p>Regards<br>LM<br>(From mobile)<br></p><p>&gt; On Jun 13, 2016, at 5:22 PM, Sean Heber via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 13, 2016, at 10:16 AM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Mon, Jun 13, 2016 at 9:54 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 13, 2016, at 4:46 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Mon, Jun 13, 2016 at 9:28 AM, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt;&gt;&gt; I’m just (probably obtusely) suggesting that there are different levels and styles of expression and that the existence of one does not render other styles invalid.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In relation to the “where” debate, the fact that you can express everything with “guard” or “if” as you can with “where” is not, in my mind, a strong  argument against “where” because it ignores other more intangible aspects that are going to be a lot harder to quantify since they depend on the context of the problem, the surrounding code, the mindset of the writer, and the assumed mindset of the reader.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don’t dispute that we *could* live without “where” - that is not the point. We could also live without classes or generics or any of a variety of other features - but why should we when we don’t have to?<br></p><p>The corollary question every parent has to deal with is to learn to make a sacrifice now for a better outcome tomorrow. Maybe this is another way to look at this question?<br></p><p>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m not sure where this comes in. I was clarifying what I mean when I call a language construct &#39;expressive.&#39; As I understand the term, `where` is not expressive, whereas classes and generics are expressive.<br>&gt;&gt; <br>&gt;&gt; Perhaps this is due to English not being my first language, but I go by the dictionary definition of expressive:<br>&gt;&gt; <br>&gt;&gt; expressive (adjective) - effectively conveying thought or feeling.<br>&gt;&gt; <br>&gt;&gt; And I believe that for-in-where is expressing the condition more effectively (and efficiently) than adding if/guard-continue into the actual code block.<br>&gt;&gt; <br>&gt;&gt; That&#39;s fine for English, but I just mean that in a language design context I&#39;ve always understood the word to encompass the *breadth* of thoughts that can be expressed. In that sense, `where` might express one thing economically, but it cannot express very many things at all, no matter how much text you write in a `where` clause.<br>&gt; <br>&gt; Yes, true, there are certainly two meanings in play here - the technical domain specific concept, and the more casual definition. I think the concern of myself (and some others) is that the technical definition, perhaps somewhat ironically, is not expressive enough to capture all of the facets of expression that matter to all of us! I think this particular discussion is taking place at the intersection of technology and liberal arts.<br>&gt; <br>&gt; l8r<br>&gt; Sean<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 14, 2016 at 04:00:00pm</p></header><div class="content"><p>On 13.06.2016 18:59, L. Mihalkovic via swift-evolution wrote:<br>&gt;&gt;&gt;&gt; I don’t dispute that we *could* live without “where” - that is not<br>&gt;&gt;&gt;&gt; the point. We could also live without classes or generics or any<br>&gt;&gt;&gt;&gt; of a variety of other features - but why should we when we don’t<br>&gt;&gt;&gt;&gt; have to?<br>&gt; The corollary question every parent has to deal with is to learn to make<br>&gt; a sacrifice now for a better outcome tomorrow. Maybe this is another way<br>&gt; to look at this question?<br>&gt;<br></p><p>Yes, if you know *for sure* it it will be &quot;better outcome&quot; tomorrow. I.e. <br>we even don&#39;t have any thoughts about what LINQ for Swift can look like, <br>and when we&#39;ll only start to discuss this(4.x? 5.x? 6.x?), but we <br>definitely needs to remove handful feature now and then keep the hope it <br>will return in more powerful way. Probably we need to be very close to <br>situation when &#39;where&#39; in &#39;for-in&#39; loop prevents introduction of LINQ-like <br>feature to remote this &#39;where&#39;? (probably with for-in loop together).<br></p><p>Again, we have sugar of `for-in` to be able to iterate <br>sequences&amp;collections in handy way, we need it only for this purpose. We <br>have &#39;where&#39; feature in &#39;for-in&#39; to be able to filter the iterating <br>sequence. Filtering is essential operation for sequences/collections <br>(.filter is one of main 3 operations : filter/map/reduce). As we have a <br>special sugar to iterate sequences I find it very logical to have in it a <br>sugar to filter iterated sequences. Force people to use guard-continue <br>instead of &#39;where&#39; for me is equal to force to use &#39;while&#39; loop to iterate <br>sequences instead of `for-in` loop.<br></p><p>Also, as was mentioned, in some situations you want to apply logically <br>&#39;main&#39; filter in &#39;where&#39; clause and then use guard-continue for additional <br>filters/checks in body.<br></p><p>And &#39;where&#39; in for-in loops does exist now in Swift. IMO you need really <br>strong arguments to remove it. I&#39;ve read all the messages of Xiaodi and <br>Erica(and others), and I didn&#39;t find any argument that clearly shows that <br>&#39;where&#39; is a bad thing and must be removed, I saw your opinions or your <br>view of Swift future or your understanding of Swift goals or your <br>understanding of core-team thoughts or your preferable style for coding etc.<br></p><p>If it is not clear if &#39;where&#39; has &#39;continue if fails&#39; behavior - IMO we <br>need to *rename* it. It is just not logically to remove the feature if <br>keyword is not clear enough(*for some beginners who see it the first time) <br>- make the keyword clear, then you have no main argument to remove the <br>_feature_.<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/36603be464733b58cc53cecd480eeae8?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>let var go</string> &lt;letvargo at gmail.com&gt;<p>June 13, 2016 at 03:00:00pm</p></header><div class="content"><p>I am 100% with Charlie on this. Expressiveness has to do with the<br>*effectiveness* of conveying a thought or a feeling.<br></p><p>Keep &quot;where&quot;. It is expressive. It conveys a specific idea effectively and<br>concisely.<br></p><p>On Mon, Jun 13, 2016 at 7:54 AM Charlie Monroe via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Jun 13, 2016, at 4:46 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; On Mon, Jun 13, 2016 at 9:28 AM, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt;<br>&gt;&gt; I’m just (probably obtusely) suggesting that there are different levels<br>&gt;&gt; and styles of expression and that the existence of one does not render<br>&gt;&gt; other styles invalid.<br>&gt;&gt;<br>&gt;&gt; In relation to the “where” debate, the fact that you can express<br>&gt;&gt; everything with “guard” or “if” as you can with “where” is not, in my mind,<br>&gt;&gt; a strong  argument against “where” because it ignores other more intangible<br>&gt;&gt; aspects that are going to be a lot harder to quantify since they depend on<br>&gt;&gt; the context of the problem, the surrounding code, the mindset of the<br>&gt;&gt; writer, and the assumed mindset of the reader.<br>&gt;&gt;<br>&gt;&gt; I don’t dispute that we *could* live without “where” - that is not the<br>&gt;&gt; point. We could also live without classes or generics or any of a variety<br>&gt;&gt; of other features - but why should we when we don’t have to?<br>&gt;&gt;<br>&gt;<br>&gt; I&#39;m not sure where this comes in. I was clarifying what I mean when I call<br>&gt; a language construct &#39;expressive.&#39; As I understand the term, `where` is not<br>&gt; expressive, whereas classes and generics are expressive.<br>&gt;<br>&gt;<br>&gt; Perhaps this is due to English not being my first language, but I go by<br>&gt; the dictionary definition of expressive:<br>&gt;<br>&gt; expressive (adjective) - effectively conveying thought or feeling.<br>&gt;<br>&gt; And I believe that for-in-where is expressing the condition more<br>&gt; effectively (and efficiently) than adding if/guard-continue into the actual<br>&gt; code block.<br>&gt;<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; l8r<br>&gt;&gt; Sean<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; &gt; On Jun 13, 2016, at 9:19 AM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; How do you mean? I don&#39;t follow.<br>&gt;&gt; &gt; On Mon, Jun 13, 2016 at 09:11 Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt;&gt; &gt; &gt; On Jun 13, 2016, at 9:05 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt; &gt;<br>&gt;&gt; &gt; &gt; On Mon, Jun 13, 2016 at 8:58 AM, Charlie Monroe &lt;<br>&gt;&gt; charlie at charliemonroe.net&gt; wrote:<br>&gt;&gt; &gt; &gt; if-continue. But I gladly took upon for-in-where as soon as I found<br>&gt;&gt; out about it since it&#39;s more expressive and simply is less typing.<br>&gt;&gt; &gt; &gt;<br>&gt;&gt; &gt; &gt; I don&#39;t think we use the term &#39;expressive&#39; in the same way. I<br>&gt;&gt; understand it to mean that permitting the expression of more things. But of<br>&gt;&gt; course, `where` does only a subset of `guard...continue` or<br>&gt;&gt; `if...continue`; thus, less expressive.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; The fact that you could simply use the words “I am happy” to express<br>&gt;&gt; the concept of being happy does not mean that writing a complex poem that<br>&gt;&gt; also conveys happiness should therefore be prohibited.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; l8r<br>&gt;&gt; &gt; Sean<br>&gt;&gt; &gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/39e848a8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 13, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jun 13, 2016, at 9:23 AM, let var go via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I am 100% with Charlie on this. Expressiveness has to do with the *effectiveness* of conveying a thought or a feeling.<br>&gt; <br>&gt; Keep &quot;where&quot;. It is expressive. It conveys a specific idea effectively and concisely.<br></p><p>For those of you in favor of retaining `where`, how do you feel about adding `while`, `until`, `unless`, etc?<br></p><p>-- E<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>June 13, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jun 13, 2016, at 10:26 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 13, 2016, at 9:23 AM, let var go via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I am 100% with Charlie on this. Expressiveness has to do with the *effectiveness* of conveying a thought or a feeling.<br>&gt;&gt; <br>&gt;&gt; Keep &quot;where&quot;. It is expressive. It conveys a specific idea effectively and concisely.<br>&gt; <br>&gt; For those of you in favor of retaining `where`, how do you feel about adding `while`, `until`, `unless`, etc?<br>&gt; <br>&gt; -- E<br></p><p>I think that “while” could be potentially useful, but since it hasn’t existed, I haven’t really considered what code might look like if that was possible. :P<br></p><p>l8r<br>Sean<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 13, 2016 at 06:00:00pm</p></header><div class="content"><p>`while`, `until` and `unless` all implicate that the loop should break when the condition (or its negation) is met.<br></p><p>On the other hand, `where` as it is seems logical to me. Anyone who considers serious coding is likely to have basic knowledge of mathematics, so something such as<br></p><p>∀x ∈ X, x &gt; 0<br></p><p>which translates into <br></p><p>for x in X where x &gt; 0<br></p><p>in Swift, which is pretty much how you&#39;d read the mathematical statement. Yes, there is a comma, not `where` in the formula but when reading, you say &quot;where&quot; (unless you say &quot;every x greater than zero&quot;).<br></p><p>&gt; On Jun 13, 2016, at 5:26 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 13, 2016, at 9:23 AM, let var go via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I am 100% with Charlie on this. Expressiveness has to do with the *effectiveness* of conveying a thought or a feeling.<br>&gt;&gt; <br>&gt;&gt; Keep &quot;where&quot;. It is expressive. It conveys a specific idea effectively and concisely.<br>&gt; <br>&gt; For those of you in favor of retaining `where`, how do you feel about adding `while`, `until`, `unless`, etc?<br>&gt; <br>&gt; -- E<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 13, 2016 at 04:00:00pm</p></header><div class="content"><p>Actually, at least where I&#39;m from, it wouldn&#39;t be a comma, it&#39;d be a bar: ∀<br>x ∈ X | x &gt; 0.<br></p><p>Moreover, as has been pointed out, the use of &#39;where&#39; in math is also not<br>universally loved.<br></p><p>On Mon, Jun 13, 2016 at 11:03 Charlie Monroe &lt;charlie at charliemonroe.net&gt;<br>wrote:<br></p><p>&gt; `while`, `until` and `unless` all implicate that the loop should break<br>&gt; when the condition (or its negation) is met.<br>&gt;<br>&gt; On the other hand, `where` as it is seems logical to me. Anyone who<br>&gt; considers serious coding is likely to have basic knowledge of mathematics,<br>&gt; so something such as<br>&gt;<br>&gt; ∀x ∈ X, x &gt; 0<br>&gt;<br>&gt; which translates into<br>&gt;<br>&gt; for x in X where x &gt; 0<br>&gt;<br>&gt; in Swift, which is pretty much how you&#39;d read the mathematical statement.<br>&gt; Yes, there is a comma, not `where` in the formula but when reading, you say<br>&gt; &quot;where&quot; (unless you say &quot;every x greater than zero&quot;).<br>&gt;<br>&gt; &gt; On Jun 13, 2016, at 5:26 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;&gt; On Jun 13, 2016, at 9:23 AM, let var go via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I am 100% with Charlie on this. Expressiveness has to do with the<br>&gt; *effectiveness* of conveying a thought or a feeling.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Keep &quot;where&quot;. It is expressive. It conveys a specific idea effectively<br>&gt; and concisely.<br>&gt; &gt;<br>&gt; &gt; For those of you in favor of retaining `where`, how do you feel about<br>&gt; adding `while`, `until`, `unless`, etc?<br>&gt; &gt;<br>&gt; &gt; -- E<br>&gt; &gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/6bc5646a/attachment-0001.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/36603be464733b58cc53cecd480eeae8?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>let var go</string> &lt;letvargo at gmail.com&gt;<p>June 13, 2016 at 05:00:00pm</p></header><div class="content"><p>On Mon, Jun 13, 2016 at 8:26 AM Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Jun 13, 2016, at 9:23 AM, let var go via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; I am 100% with Charlie on this. Expressiveness has to do with the<br>&gt; *effectiveness* of conveying a thought or a feeling.<br>&gt; &gt;<br>&gt; &gt; Keep &quot;where&quot;. It is expressive. It conveys a specific idea effectively<br>&gt; and concisely.<br>&gt;<br>&gt; For those of you in favor of retaining `where`, how do you feel about<br>&gt; adding `while`, `until`, `unless`, etc?<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt;<br>That would be interesting...I assume that &#39;while&#39; or &#39;until&#39; would cause<br>early exit from the loop, and &#39;unless&#39; would be the logical inverse of<br>&#39;where&#39;.<br></p><p>I&#39;d have to think about it some more, but my instinct is that I would be in<br>favor of adding &#39;unless&#39; as the logical inverse of &#39;where&#39; (exclude items<br>based on the predicate, instead of include items based on the predicate). I<br>wouldn&#39;t add &#39;while&#39; or &#39;until&#39;, because we already have conditional loops<br>like the &#39;while&#39; loop to serve that need.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/ac905e3c/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>June 13, 2016 at 06:00:00pm</p></header><div class="content"><p>I would say we need a separate meeting where we propose to add them and discuss why we would want them in Swift :).<br></p><p>Sent from my iPhone<br></p><p>&gt; On 13 Jun 2016, at 16:26, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 13, 2016, at 9:23 AM, let var go via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I am 100% with Charlie on this. Expressiveness has to do with the *effectiveness* of conveying a thought or a feeling.<br>&gt;&gt; <br>&gt;&gt; Keep &quot;where&quot;. It is expressive. It conveys a specific idea effectively and concisely.<br>&gt; <br>&gt; For those of you in favor of retaining `where`, how do you feel about adding `while`, `until`, `unless`, etc?<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b6a0b6562cd412f587c69d192f335161?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>plx</string> &lt;plxswift at icloud.com&gt;<p>June 14, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Jun 13, 2016, at 10:26 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 13, 2016, at 9:23 AM, let var go via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I am 100% with Charlie on this. Expressiveness has to do with the *effectiveness* of conveying a thought or a feeling.<br>&gt;&gt; <br>&gt;&gt; Keep &quot;where&quot;. It is expressive. It conveys a specific idea effectively and concisely.<br>&gt; <br>&gt; For those of you in favor of retaining `where`, how do you feel about adding `while`, `until`, `unless`, etc?<br></p><p>In the interest of advancing the “what kind of language would I prefer swift become?”, here are my final thoughts on this topic:<br></p><p>For those particular keywords, I’d prefer having them (or equivalents). I’m not sure if I’d prefer having *all* of them—`where/unless` and `while/until`—or just one from each “pair”…I could go either way.<br></p><p>As a general consideration, I’d be in favor of having them b/c I’d really like Swift to have a comprehension-style construct (and associated syntax etc.).<br></p><p>Comprehension syntax is IMHO pretty common outside the C family—within the C family really only C# has something like it—and in general comprehension syntax has pretty similar structure from language to language. This link illustrates the syntax for 28 languages’  comprehension constructs, so it isn’t a bad overview:<br></p><p>https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(list_comprehension)<br></p><p>…(note that “comprehension syntax” isn’t quite the same thing as “list comprehensions”, but for “comparative syntax” purposes that link should be sufficient).<br></p><p>For me the appeal of “comprehension syntax” is that it allows writing code that feels more “semantic” than “mechanical”, and that paraphrases much closer to the intended meaning.<br></p><p>Here’s a toy example:<br></p><p>  // with a comprehension-like syntax<br>  // outside loop: “what items do we care about?&quot;<br>  for visitor in queue where visitor.hasTicket until venue.isFull {<br>    // inside loop: “…and what do we do with them?&quot;<br>    venue.admit(visitor)<br>  }<br></p><p>…which to my eyes paraphrases more-or-less how I’d describe what we’re doing:<br></p><p>- “keep admitting visitors with tickets until the venue is full”<br></p><p>…whereas without it, you get something like this:<br></p><p>  // without comprehension-style syntax<br>  // outside loop: where, mechanically, are we sourcing items from<br>  for visitor in queue {<br>    // inside loop: muddled mix of filtering, app logic, and flow-control<br>    // filtering:<br>    guard visitor.hasTicket else { continue }<br>    // app logic:<br>    venue.admit(visitor)<br>    // flow-control:<br>    if venue.isFull { break }<br>  }<br></p><p>…which *is* closer to the underlying mechanics, but paraphrases more like something you&#39;d see in a badly-translated 80s VCR programing manual:<br></p><p>- “Start considering visitors. If the visitor doesn&#39;t have a ticket, move on to the next visitor. Otherwise, admit the visitor. If the venue is full, stop considering visitors.”<br></p><p>Sure, they’re both equivalent—and even in the 80s, some people managed to program their VCRs!—but given the option I’d strongly prefer to write in the first style; I like having a clean segregation between “what items are of interest?” and “what do we do with them?”<br></p><p>So that’s what I like about comprehension-like constructs.<br></p><p>The current `for-in-where` is a bit of an anomaly; it could be grown into something a little richer—`for _ in _ where _ while _`  and/or `for _ in _ where _ until _` (etc.).—or it could be dropped and some better construct proposed.<br></p><p>But, my personal preference would be to keep it around until either the richer construct is available or definitively declared as “not swift-y, not happening”: <br></p><p>- if a “comprehension” construct is approved, an automatic migrator would likely do a *much* better job translating those `for _ in _ where` loops than it’d do with their more-imperative equivalents<br>- if a “comprehension” construct is definitively-rejected, at least I can keep using something I like until the hammer drops<br></p><p>&gt; <br>&gt; -- E<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 14, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jun 14, 2016, at 7:50 AM, plx via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; For those particular keywords, I’d prefer having them (or equivalents). I’m not sure if I’d prefer having *all* of them—`where/unless` and `while/until`—or just one from each “pair”…I could go either way.<br></p><p>In the proposal, my recommendations for including all 4 are:<br></p><p>break: while / until<br>continue: if (formerly `where`) / unless<br></p><p>As the thread has had sufficient redundancy, I&#39;ll refrain from making my case again for why I think it&#39;s better to remove the one than add the three.<br></p><p>-- E<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 14, 2016 at 07:00:00pm</p></header><div class="content"><p>FWIW I don&#39;t think we need all &quot;4&quot;, just like we don&#39;t need `unless` as a <br>pair to current `if` or `until` as a pair for current `while` loop.<br></p><p>I.e. we have &quot;continue&quot; with current `where`, and you can use boolean <br>inversion `!`. As for &quot;break&quot;(while) - my opinion the for-in loop will be <br>more powerful and adds fun for coding (from wwdc keynote - &quot;Swift is a <br>powerful language.. writing Swift code is *fun*...&quot; my opinion: using <br>guard-continue or guard-break is *not* fun ).<br></p><p>So in your words, it is better add *one* then remove *one*.<br></p><p>The only question I&#39;m not sure about if we should keep &#39;where&#39; and &#39;while&#39; <br>keywords for these features, or rename them. For me it&#39;s OK to have &#39;where&#39; <br>and &#39;while&#39; but probably I&#39;ll support another more clear keywords.<br></p><p>On 14.06.2016 18:01, Erica Sadun via swift-evolution wrote:<br>&gt;<br>&gt;&gt; On Jun 14, 2016, at 7:50 AM, plx via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; For those particular keywords, I’d prefer having them (or equivalents). I’m not sure if I’d prefer having *all* of them—`where/unless` and `while/until`—or just one from each “pair”…I could go either way.<br>&gt;<br>&gt; In the proposal, my recommendations for including all 4 are:<br>&gt;<br>&gt; break: while / until<br>&gt; continue: if (formerly `where`) / unless<br>&gt;<br>&gt; As the thread has had sufficient redundancy, I&#39;ll refrain from making my case again for why I think it&#39;s better to remove the one than add the three.<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 14, 2016 at 04:00:00pm</p></header><div class="content"><p>And from the WWDC Platforms SOTU: &quot;Swift is super simple and<br>approachable.... It&#39;s great as a first language. And in fact, we think this<br>is so important that when we designed Swift this was an explicit design<br>goal.&quot;<br></p><p>I would be absolutely against adding any more sugar to the for loop. In<br>that sense, `where` sets a terrible example that certain features of<br>sequences deserve contextual sugar. (And before someone points it out<br>again, I&#39;ve already argued why `for...in` holds its own weight, namely<br>difficulty of writing a correct `while` replacement and progressive<br>disclosure to the learner so that the concept of iterators can be learned<br>afterwards.)<br></p><p>In short, I would very much be opposed to adding keywords &quot;for fun.&quot;<br></p><p>On Tue, Jun 14, 2016 at 11:18 AM Vladimir.S via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; FWIW I don&#39;t think we need all &quot;4&quot;, just like we don&#39;t need `unless` as a<br>&gt; pair to current `if` or `until` as a pair for current `while` loop.<br>&gt;<br>&gt; I.e. we have &quot;continue&quot; with current `where`, and you can use boolean<br>&gt; inversion `!`. As for &quot;break&quot;(while) - my opinion the for-in loop will be<br>&gt; more powerful and adds fun for coding (from wwdc keynote - &quot;Swift is a<br>&gt; powerful language.. writing Swift code is *fun*...&quot; my opinion: using<br>&gt; guard-continue or guard-break is *not* fun ).<br>&gt;<br>&gt; So in your words, it is better add *one* then remove *one*.<br>&gt;<br>&gt; The only question I&#39;m not sure about if we should keep &#39;where&#39; and &#39;while&#39;<br>&gt; keywords for these features, or rename them. For me it&#39;s OK to have &#39;where&#39;<br>&gt; and &#39;while&#39; but probably I&#39;ll support another more clear keywords.<br>&gt;<br>&gt; On 14.06.2016 18:01, Erica Sadun via swift-evolution wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; On Jun 14, 2016, at 7:50 AM, plx via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt; For those particular keywords, I’d prefer having them (or equivalents).<br>&gt; I’m not sure if I’d prefer having *all* of them—`where/unless` and<br>&gt; `while/until`—or just one from each “pair”…I could go either way.<br>&gt; &gt;<br>&gt; &gt; In the proposal, my recommendations for including all 4 are:<br>&gt; &gt;<br>&gt; &gt; break: while / until<br>&gt; &gt; continue: if (formerly `where`) / unless<br>&gt; &gt;<br>&gt; &gt; As the thread has had sufficient redundancy, I&#39;ll refrain from making my<br>&gt; case again for why I think it&#39;s better to remove the one than add the three.<br>&gt; &gt;<br>&gt; &gt; -- E<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160614/dab2e61b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>June 14, 2016 at 11:00:00am</p></header><div class="content"><p>I’m a bit late to this conversation, and I don’t totally understand the goal.<br></p><p>There are a *lot* of things you can do in for…in loop with pattern matching that also would supposedly go against this interpretation of approachability. Pattern matching in general might be considered to go against this interpretation.<br></p><p>Is this pitch saying statements such as:<br></p><p>	for i in 1..&lt;100 where i%2 == 1 {…} <br></p><p>should be disallowed, while statements like<br></p><p>	for case let view? in views { … }<br></p><p>are still approachable enough to warrant being supported in the language?<br></p><p>FWIW, I wouldn’t support removing where based on current arguments without either the keyword “where&quot; being eliminated completely from the language, and/or adding equivalent intuitive functionality to Sequence with same-class performance, e.g. a .where(...) equivalent to .lazy.filter(…). <br></p><p>I’ve known about and used the feature since it was first added to Swift (learned via the language book), and don’t fully understand the confusion that some developers may have - especially since ‘while’ is already a keyword and could have been used if that was the actual semantics.<br></p><p>-DW<br></p><p>&gt; On Jun 14, 2016, at 10:32 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; And from the WWDC Platforms SOTU: &quot;Swift is super simple and approachable.... It&#39;s great as a first language. And in fact, we think this is so important that when we designed Swift this was an explicit design goal.&quot;<br>&gt; <br>&gt; I would be absolutely against adding any more sugar to the for loop. In that sense, `where` sets a terrible example that certain features of sequences deserve contextual sugar. (And before someone points it out again, I&#39;ve already argued why `for...in` holds its own weight, namely difficulty of writing a correct `while` replacement and progressive disclosure to the learner so that the concept of iterators can be learned afterwards.)<br>&gt; <br>&gt; In short, I would very much be opposed to adding keywords &quot;for fun.&quot;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160614/96f257db/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 14, 2016 at 12:00:00pm</p></header><div class="content"><p>On Tue, Jun 14, 2016 at 12:16 PM, David Waite &lt;david at alkaline-solutions.com&gt;<br>wrote:<br></p><p>&gt; I’m a bit late to this conversation, and I don’t totally understand the<br>&gt; goal.<br>&gt;<br>&gt; There are a *lot* of things you can do in for…in loop with pattern<br>&gt; matching that also would supposedly go against this interpretation of<br>&gt; approachability. Pattern matching in general might be considered to go<br>&gt; against this interpretation.<br>&gt;<br>&gt; Is this pitch saying statements such as:<br>&gt;<br>&gt; for i in 1..&lt;100 where i%2 == 1 {…}<br>&gt;<br>&gt; should be disallowed, while statements like<br>&gt;<br>&gt; for case let view? in views { … }<br>&gt;<br>&gt; are still approachable enough to warrant being supported in the language?<br>&gt;<br></p><p>Language design has to weigh many factors simultaneously, I think you&#39;d<br>agree. The argument, essentially, is that `where` is not approachable *for<br>the functionality that it provides* (namely, as an alternative for a<br>trivial `guard...continue` statement). Pattern matching is daunting no<br>doubt, but it offers functionality not conducive to much simpler syntax.<br>(Or could it be much simpler? If so, then I would support a proposal to<br>that effect.)<br></p><p>Put simply, `where` is a less-than-straightforward expression of a very<br>straightforward concept (filtering an array), whereas pattern matching is<br>an advanced concept with a commensurately difficult syntax. Others have<br>brought up generics, for example, but again that&#39;s an advanced *concept*;<br>filtering an array is not.<br></p><p><br>&gt;<br>&gt; FWIW, I wouldn’t support removing where based on current arguments without<br>&gt; either the keyword “where&quot; being eliminated completely from the language,<br>&gt; and/or adding equivalent intuitive functionality to Sequence with<br>&gt; same-class performance, e.g. a .where(...) equivalent to .lazy.filter(…).<br>&gt;<br>&gt;<br>I feel bad sending clearly passionate people over to crush another<br>conversation, but I think you&#39;ll find in the Swift repository the<br>beginnings of some explorations by a certain member of the core team to<br>rename `.filter()` to `.where()` :D<br></p><p>As to whether certain methods should be lazy or eager by default, that&#39;s a<br>discussion certainly appropriate for this list.<br></p><p><br>&gt; I’ve known about and used the feature since it was first added to Swift<br>&gt; (learned via the language book), and don’t fully understand the confusion<br>&gt; that some developers may have - especially since ‘while’ is already a<br>&gt; keyword and could have been used if that was the actual semantics.<br>&gt;<br></p><p>One source of confusion was that `while...where` was supported and had<br>breaking semantics. Now that&#39;s gone with SE-0099. Still, the point is that<br>`where` is favored by some *because* you don&#39;t have to write explicitly<br>what happens when something doesn&#39;t pass the filter, whereas the<br>counterpoint argument is that not writing explicitly what happens when a<br>rejected element is encountered *is* the very source of confusion.<br></p><p><br>&gt;<br>&gt; -DW<br>&gt;<br>&gt; On Jun 14, 2016, at 10:32 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; And from the WWDC Platforms SOTU: &quot;Swift is super simple and<br>&gt; approachable.... It&#39;s great as a first language. And in fact, we think this<br>&gt; is so important that when we designed Swift this was an explicit design<br>&gt; goal.&quot;<br>&gt;<br>&gt; I would be absolutely against adding any more sugar to the for loop. In<br>&gt; that sense, `where` sets a terrible example that certain features of<br>&gt; sequences deserve contextual sugar. (And before someone points it out<br>&gt; again, I&#39;ve already argued why `for...in` holds its own weight, namely<br>&gt; difficulty of writing a correct `while` replacement and progressive<br>&gt; disclosure to the learner so that the concept of iterators can be learned<br>&gt; afterwards.)<br>&gt;<br>&gt; In short, I would very much be opposed to adding keywords &quot;for fun.&quot;<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160614/339e875f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 14, 2016 at 12:00:00pm</p></header><div class="content"><p>On Tue, Jun 14, 2016 at 12:37 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br></p><p>&gt; On Tue, Jun 14, 2016 at 12:16 PM, David Waite &lt;<br>&gt; david at alkaline-solutions.com&gt; wrote:<br>&gt;<br>&gt;&gt; I’m a bit late to this conversation, and I don’t totally understand the<br>&gt;&gt; goal.<br>&gt;&gt;<br>&gt;&gt; There are a *lot* of things you can do in for…in loop with pattern<br>&gt;&gt; matching that also would supposedly go against this interpretation of<br>&gt;&gt; approachability. Pattern matching in general might be considered to go<br>&gt;&gt; against this interpretation.<br>&gt;&gt;<br>&gt;&gt; Is this pitch saying statements such as:<br>&gt;&gt;<br>&gt;&gt; for i in 1..&lt;100 where i%2 == 1 {…}<br>&gt;&gt;<br>&gt;&gt; should be disallowed, while statements like<br>&gt;&gt;<br>&gt;&gt; for case let view? in views { … }<br>&gt;&gt;<br>&gt;&gt; are still approachable enough to warrant being supported in the language?<br>&gt;&gt;<br>&gt;<br>&gt; Language design has to weigh many factors simultaneously, I think you&#39;d<br>&gt; agree. The argument, essentially, is that `where` is not approachable *for<br>&gt; the functionality that it provides* (namely, as an alternative for a<br>&gt; trivial `guard...continue` statement). Pattern matching is daunting no<br>&gt; doubt, but it offers functionality not conducive to much simpler syntax.<br>&gt; (Or could it be much simpler? If so, then I would support a proposal to<br>&gt; that effect.)<br>&gt;<br>&gt; Put simply, `where` is a less-than-straightforward expression of a very<br>&gt; straightforward concept (filtering an array), whereas pattern matching is<br>&gt; an advanced concept with a commensurately difficult syntax. Others have<br>&gt; brought up generics, for example, but again that&#39;s an advanced *concept*;<br>&gt; filtering an array is not.<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; FWIW, I wouldn’t support removing where based on current arguments<br>&gt;&gt; without either the keyword “where&quot; being eliminated completely from the<br>&gt;&gt; language<br>&gt;&gt;<br>&gt;<br>I should add, if this proposal is adopted along with the enclosed<br>suggestion to replace `where` with `if` in `case` and `catch`, the `where`<br>keyword would be completely eliminated except in the context of generics.<br>If the enclosed suggestion is not adopted here, alternatives will follow on<br>shortly.<br></p><p><br>&gt; and/or adding equivalent intuitive functionality to Sequence with<br>&gt;&gt; same-class performance, e.g. a .where(...) equivalent to .lazy.filter(…).<br>&gt;&gt;<br>&gt;&gt;<br>&gt; I feel bad sending clearly passionate people over to crush another<br>&gt; conversation, but I think you&#39;ll find in the Swift repository the<br>&gt; beginnings of some explorations by a certain member of the core team to<br>&gt; rename `.filter()` to `.where()` :D<br>&gt;<br>&gt; As to whether certain methods should be lazy or eager by default, that&#39;s a<br>&gt; discussion certainly appropriate for this list.<br>&gt;<br>&gt;<br>&gt;&gt; I’ve known about and used the feature since it was first added to Swift<br>&gt;&gt; (learned via the language book), and don’t fully understand the confusion<br>&gt;&gt; that some developers may have - especially since ‘while’ is already a<br>&gt;&gt; keyword and could have been used if that was the actual semantics.<br>&gt;&gt;<br>&gt;<br>&gt; One source of confusion was that `while...where` was supported and had<br>&gt; breaking semantics. Now that&#39;s gone with SE-0099. Still, the point is that<br>&gt; `where` is favored by some *because* you don&#39;t have to write explicitly<br>&gt; what happens when something doesn&#39;t pass the filter, whereas the<br>&gt; counterpoint argument is that not writing explicitly what happens when a<br>&gt; rejected element is encountered *is* the very source of confusion.<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; -DW<br>&gt;&gt;<br>&gt;&gt; On Jun 14, 2016, at 10:32 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; And from the WWDC Platforms SOTU: &quot;Swift is super simple and<br>&gt;&gt; approachable.... It&#39;s great as a first language. And in fact, we think this<br>&gt;&gt; is so important that when we designed Swift this was an explicit design<br>&gt;&gt; goal.&quot;<br>&gt;&gt;<br>&gt;&gt; I would be absolutely against adding any more sugar to the for loop. In<br>&gt;&gt; that sense, `where` sets a terrible example that certain features of<br>&gt;&gt; sequences deserve contextual sugar. (And before someone points it out<br>&gt;&gt; again, I&#39;ve already argued why `for...in` holds its own weight, namely<br>&gt;&gt; difficulty of writing a correct `while` replacement and progressive<br>&gt;&gt; disclosure to the learner so that the concept of iterators can be learned<br>&gt;&gt; afterwards.)<br>&gt;&gt;<br>&gt;&gt; In short, I would very much be opposed to adding keywords &quot;for fun.&quot;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160614/c62021b1/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>June 14, 2016 at 01:00:00pm</p></header><div class="content"><p>On Tue, Jun 14, 2016, at 01:37 PM, Xiaodi Wu via swift-evolution wrote:<br>&gt; On Tue, Jun 14, 2016 at 12:16 PM, David Waite &lt;david at alkaline-<br>&gt; solutions.com&gt; wrote:<br>&gt;&gt; I’m a bit late to this conversation, and I don’t totally understand<br>&gt;&gt; the goal.<br>&gt;&gt;<br>&gt;&gt; There are a *lot* of things you can do in for…in loop with pattern<br>&gt;&gt; matching that also would supposedly go against this interpretation of<br>&gt;&gt; approachability. Pattern matching in general might be considered to<br>&gt;&gt; go against this interpretation.<br>&gt;&gt;<br>&gt;&gt; Is this pitch saying statements such as:<br>&gt;&gt;<br>&gt;&gt; for i in 1..&lt;100 where i%2 == 1 {…}<br>&gt;&gt;<br>&gt;&gt; should be disallowed, while statements like<br>&gt;&gt;<br>&gt;&gt; for case let view? in views { … }<br>&gt;&gt;<br>&gt;&gt; are still approachable enough to warrant being supported in the<br>&gt;&gt; language?<br>&gt;<br>&gt; Language design has to weigh many factors simultaneously, I think<br>&gt; you&#39;d agree. The argument, essentially, is that `where` is not<br>&gt; approachable *for the functionality that it provides* (namely, as an<br>&gt; alternative for a trivial `guard...continue` statement). Pattern<br>&gt; matching is daunting no doubt, but it offers functionality not<br>&gt; conducive to much simpler syntax. (Or could it be much simpler? If so,<br>&gt; then I would support a proposal to that effect.)<br>&gt;<br>&gt; Put simply, `where` is a less-than-straightforward expression of a<br>&gt; very straightforward concept (filtering an array), whereas pattern<br>&gt; matching is an advanced concept with a commensurately difficult<br>&gt; syntax. Others have brought up generics, for example, but again that&#39;s<br>&gt; an advanced *concept*; filtering an array is not.<br> <br>So you do not see that for case syntax as &quot;a less-than-straightforward<br>expression of a very straightforward concept (filtering an array)&quot;?<br> <br>That&#39;s strange to me. Seems like that would be the _poster_ child for<br>such a syntax.<br> <br>enum Things {<br>case One<br>case Two<br>case Three<br>case Four<br>}<br> <br>let things: [Things] = [.One, .Two, .One, .Three, .Four, .One]<br>for case .One in things {<br>print(&quot;Found a .One&quot;)<br>}<br> <br>That code prints &quot;Found a .One&quot; three times. If the `where` syntax is<br>non-obvious with regard to `continue` or `break` then surely _that_ code<br>is down right opaque!<br> <br>&gt;<br>&gt;&gt;<br>&gt;&gt; FWIW, I wouldn’t support removing where based on current arguments<br>&gt;&gt; without either the keyword “where&quot; being eliminated completely from<br>&gt;&gt; the language, and/or adding equivalent intuitive functionality to<br>&gt;&gt; Sequence with same-class performance, e.g. a .where(...) equivalent<br>&gt;&gt; to .lazy.filter(…).<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; I feel bad sending clearly passionate people over to crush another<br>&gt; conversation, but I think you&#39;ll find in the Swift repository the<br>&gt; beginnings of some explorations by a certain member of the core team<br>&gt; to rename `.filter()` to `.where()` :D<br>&gt;<br>&gt; As to whether certain methods should be lazy or eager by default,<br>&gt; that&#39;s a discussion certainly appropriate for this list.<br>&gt;<br>&gt;&gt; I’ve known about and used the feature since it was first added to<br>&gt;&gt; Swift (learned via the language book), and don’t fully understand the<br>&gt;&gt; confusion that some developers may have - especially since ‘while’ is<br>&gt;&gt; already a keyword and could have been used if that was the actual<br>&gt;&gt; semantics.<br>&gt;<br>&gt; One source of confusion was that `while...where` was supported and had<br>&gt; breaking semantics. Now that&#39;s gone with SE-0099. Still, the point is<br>&gt; that `where` is favored by some *because* you don&#39;t have to write<br>&gt; explicitly what happens when something doesn&#39;t pass the filter,<br>&gt; whereas the counterpoint argument is that not writing explicitly what<br>&gt; happens when a rejected element is encountered *is* the very source of<br>&gt; confusion.<br>&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; -DW<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; On Jun 14, 2016, at 10:32 AM, Xiaodi Wu via swift-evolution &lt;swift-<br>&gt;&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; And from the WWDC Platforms SOTU: &quot;Swift is super simple and<br>&gt;&gt;&gt; approachable.... It&#39;s great as a first language. And in fact, we<br>&gt;&gt;&gt; think this is so important that when we designed Swift this was an<br>&gt;&gt;&gt; explicit design goal.&quot;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I would be absolutely against adding any more sugar to the for loop.<br>&gt;&gt;&gt; In that sense, `where` sets a terrible example that certain features<br>&gt;&gt;&gt; of sequences deserve contextual sugar. (And before someone points it<br>&gt;&gt;&gt; out again, I&#39;ve already argued why `for...in` holds its own weight,<br>&gt;&gt;&gt; namely difficulty of writing a correct `while` replacement and<br>&gt;&gt;&gt; progressive disclosure to the learner so that the concept of<br>&gt;&gt;&gt; iterators can be learned afterwards.)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; In short, I would very much be opposed to adding keywords &quot;for fun.&quot;<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _________________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br> <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160614/b1b5d57f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 14, 2016 at 06:00:00pm</p></header><div class="content"><p>We&#39;re going in circles again. I addressed this with relation to `guard`,<br>and I would reply in the same way about `for case`:<br></p><p>The fact is that there are even experienced users of Swift who see `where`<br>and affirmatively believe it does what it does not do. The same cannot be<br>said for `for case`. That is, a user might say, &#39;What in the world does for<br>case mean?&#39;, but even a totally new user is unlikely to say, &#39;I can guess<br>what for case means, and it means [something that for case does not in fact<br>mean].&#39;<br></p><p>On Tue, Jun 14, 2016 at 12:55 Ryan Lovelett via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Tue, Jun 14, 2016, at 01:37 PM, Xiaodi Wu via swift-evolution wrote:<br>&gt;<br>&gt; On Tue, Jun 14, 2016 at 12:16 PM, David Waite &lt;<br>&gt; david at alkaline-solutions.com&gt; wrote:<br>&gt;<br>&gt; I’m a bit late to this conversation, and I don’t totally understand the<br>&gt; goal.<br>&gt;<br>&gt; There are a *lot* of things you can do in for…in loop with pattern<br>&gt; matching that also would supposedly go against this interpretation of<br>&gt; approachability. Pattern matching in general might be considered to go<br>&gt; against this interpretation.<br>&gt;<br>&gt; Is this pitch saying statements such as:<br>&gt;<br>&gt; for i in 1..&lt;100 where i%2 == 1 {…}<br>&gt;<br>&gt; should be disallowed, while statements like<br>&gt;<br>&gt; for case let view? in views { … }<br>&gt;<br>&gt; are still approachable enough to warrant being supported in the language?<br>&gt;<br>&gt;<br>&gt; Language design has to weigh many factors simultaneously, I think you&#39;d<br>&gt; agree. The argument, essentially, is that `where` is not approachable *for<br>&gt; the functionality that it provides* (namely, as an alternative for a<br>&gt; trivial `guard...continue` statement). Pattern matching is daunting no<br>&gt; doubt, but it offers functionality not conducive to much simpler syntax.<br>&gt; (Or could it be much simpler? If so, then I would support a proposal to<br>&gt; that effect.)<br>&gt;<br>&gt; Put simply, `where` is a less-than-straightforward expression of a very<br>&gt; straightforward concept (filtering an array), whereas pattern matching is<br>&gt; an advanced concept with a commensurately difficult syntax. Others have<br>&gt; brought up generics, for example, but again that&#39;s an advanced *concept*;<br>&gt; filtering an array is not.<br>&gt;<br>&gt;<br>&gt; So you do not see that for case syntax as &quot;a less-than-straightforward<br>&gt; expression of a very straightforward concept (filtering an array)&quot;?<br>&gt;<br>&gt; That&#39;s strange to me. Seems like that would be the _poster_ child for such<br>&gt; a syntax.<br>&gt;<br>&gt; enum Things {<br>&gt;   case One<br>&gt;   case Two<br>&gt;   case Three<br>&gt;   case Four<br>&gt; }<br>&gt;<br>&gt; let things: [Things] = [.One, .Two, .One, .Three, .Four, .One]<br>&gt; for case .One in things {<br>&gt;   print(&quot;Found a .One&quot;)<br>&gt; }<br>&gt;<br>&gt; That code prints &quot;Found a .One&quot; three times. If the `where` syntax is<br>&gt; non-obvious with regard to `continue` or `break` then surely _that_ code is<br>&gt; down right opaque!<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; FWIW, I wouldn’t support removing where based on current arguments without<br>&gt; either the keyword “where&quot; being eliminated completely from the language,<br>&gt; and/or adding equivalent intuitive functionality to Sequence with<br>&gt; same-class performance, e.g. a .where(...) equivalent to .lazy.filter(…).<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; I feel bad sending clearly passionate people over to crush another<br>&gt; conversation, but I think you&#39;ll find in the Swift repository the<br>&gt; beginnings of some explorations by a certain member of the core team to<br>&gt; rename `.filter()` to `.where()` :D<br>&gt;<br>&gt; As to whether certain methods should be lazy or eager by default, that&#39;s a<br>&gt; discussion certainly appropriate for this list.<br>&gt;<br>&gt;<br>&gt; I’ve known about and used the feature since it was first added to Swift<br>&gt; (learned via the language book), and don’t fully understand the confusion<br>&gt; that some developers may have - especially since ‘while’ is already a<br>&gt; keyword and could have been used if that was the actual semantics.<br>&gt;<br>&gt;<br>&gt; One source of confusion was that `while...where` was supported and had<br>&gt; breaking semantics. Now that&#39;s gone with SE-0099. Still, the point is that<br>&gt; `where` is favored by some *because* you don&#39;t have to write explicitly<br>&gt; what happens when something doesn&#39;t pass the filter, whereas the<br>&gt; counterpoint argument is that not writing explicitly what happens when a<br>&gt; rejected element is encountered *is* the very source of confusion.<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; -DW<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Jun 14, 2016, at 10:32 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; And from the WWDC Platforms SOTU: &quot;Swift is super simple and<br>&gt; approachable.... It&#39;s great as a first language. And in fact, we think this<br>&gt; is so important that when we designed Swift this was an explicit design<br>&gt; goal.&quot;<br>&gt;<br>&gt; I would be absolutely against adding any more sugar to the for loop. In<br>&gt; that sense, `where` sets a terrible example that certain features of<br>&gt; sequences deserve contextual sugar. (And before someone points it out<br>&gt; again, I&#39;ve already argued why `for...in` holds its own weight, namely<br>&gt; difficulty of writing a correct `while` replacement and progressive<br>&gt; disclosure to the learner so that the concept of iterators can be learned<br>&gt; afterwards.)<br>&gt;<br>&gt; In short, I would very much be opposed to adding keywords &quot;for fun.&quot;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; *_______________________________________________*<br>&gt;<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160614/8d0dc3bb/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 14, 2016 at 09:00:00pm</p></header><div class="content"><p>Regards<br>(From mobile)<br></p><p>&gt; On Jun 14, 2016, at 7:16 PM, David Waite via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I’m a bit late to this conversation, and I don’t totally understand the goal.<br>&gt; <br>&gt; There are a *lot* of things you can do in for…in loop with pattern matching that also would supposedly go against this interpretation of approachability. Pattern matching in general might be considered to go against this interpretation.<br>&gt; <br>&gt; Is this pitch saying statements such as:<br>&gt; <br>&gt; 	for i in 1..&lt;100 where i%2 == 1 {…} <br>&gt; <br>&gt; should be disallowed, while statements like<br>&gt; <br>&gt; 	for case let view? in views { … }<br>&gt; <br>&gt; are still approachable enough to warrant being supported in the language?<br>&gt; <br>&gt; FWIW, I wouldn’t support removing where based on current arguments without either the keyword “where&quot; being eliminated completely from the language, and/or adding equivalent intuitive functionality to Sequence with same-class performance, e.g. a .where(...) equivalent to .lazy.filter(…). <br>&gt; <br>&gt; I’ve known about and used the feature since it was first added to Swift (learned via the language book), and don’t fully understand the confusion that some developers may have - especially since ‘while’ is already a keyword and could have been used if that was the actual semantics.<br>&gt; <br>&gt; -DW<br>&gt; <br>&gt;&gt; On Jun 14, 2016, at 10:32 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; And from the WWDC Platforms SOTU: &quot;Swift is super simple and approachable.... It&#39;s great as a first language. And in fact, we think this is so important that when we designed Swift this was an explicit design goal.&quot;<br></p><p>Yup... Doesn&#39;t bode well for power users... &quot;Swift.. Address your needs from 7 till 77... unifies the entire family&quot;<br></p><p>&gt;&gt; I would be absolutely against adding any more sugar to the for loop. In that sense, `where` sets a terrible example that certain features of sequences deserve contextual sugar. (And before someone points it out again, I&#39;ve already argued why `for...in` holds its own weight, namely difficulty of writing a correct `while` replacement and progressive disclosure to the learner so that the concept of iterators can be learned afterwards.)<br>&gt;&gt; <br>&gt;&gt; In short, I would very much be opposed to adding keywords &quot;for fun.&quot;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160614/fdb52a70/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 14, 2016 at 08:00:00pm</p></header><div class="content"><p>Why are you unhappy about this design goal? Simple != simplistic, and<br>powerful != complicated. Approachability has to do with the slope of the<br>learning curve, not how high the curve goes.<br></p><p><br>On Tue, Jun 14, 2016 at 14:18 L. Mihalkovic &lt;laurent.mihalkovic at gmail.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt;<br>&gt; Regards<br>&gt; (From mobile)<br>&gt;<br>&gt; On Jun 14, 2016, at 7:16 PM, David Waite via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I’m a bit late to this conversation, and I don’t totally understand the<br>&gt; goal.<br>&gt;<br>&gt; There are a *lot* of things you can do in for…in loop with pattern<br>&gt; matching that also would supposedly go against this interpretation of<br>&gt; approachability. Pattern matching in general might be considered to go<br>&gt; against this interpretation.<br>&gt;<br>&gt; Is this pitch saying statements such as:<br>&gt;<br>&gt; for i in 1..&lt;100 where i%2 == 1 {…}<br>&gt;<br>&gt; should be disallowed, while statements like<br>&gt;<br>&gt; for case let view? in views { … }<br>&gt;<br>&gt; are still approachable enough to warrant being supported in the language?<br>&gt;<br>&gt; FWIW, I wouldn’t support removing where based on current arguments without<br>&gt; either the keyword “where&quot; being eliminated completely from the language,<br>&gt; and/or adding equivalent intuitive functionality to Sequence with<br>&gt; same-class performance, e.g. a .where(...) equivalent to .lazy.filter(…).<br>&gt;<br>&gt; I’ve known about and used the feature since it was first added to Swift<br>&gt; (learned via the language book), and don’t fully understand the confusion<br>&gt; that some developers may have - especially since ‘while’ is already a<br>&gt; keyword and could have been used if that was the actual semantics.<br>&gt;<br>&gt; -DW<br>&gt;<br>&gt; On Jun 14, 2016, at 10:32 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; And from the WWDC Platforms SOTU: &quot;Swift is super simple and<br>&gt; approachable.... It&#39;s great as a first language. And in fact, we think this<br>&gt; is so important that when we designed Swift this was an explicit design<br>&gt; goal.&quot;<br>&gt;<br>&gt;<br>&gt; Yup... Doesn&#39;t bode well for power users... &quot;Swift.. Address your needs<br>&gt; from 7 till 77... unifies the entire family&quot;<br>&gt;<br>&gt; I would be absolutely against adding any more sugar to the for loop. In<br>&gt; that sense, `where` sets a terrible example that certain features of<br>&gt; sequences deserve contextual sugar. (And before someone points it out<br>&gt; again, I&#39;ve already argued why `for...in` holds its own weight, namely<br>&gt; difficulty of writing a correct `while` replacement and progressive<br>&gt; disclosure to the learner so that the concept of iterators can be learned<br>&gt; afterwards.)<br>&gt;<br>&gt; In short, I would very much be opposed to adding keywords &quot;for fun.&quot;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160614/a45aca6d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f526807a5a76bc96427760ca78707cfb?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Jon Akhtar</string> &lt;jona at herbalife.com&gt;<p>June 15, 2016 at 01:00:00am</p></header><div class="content"><p>How about the goal of it being a delightful language to program in. I think that is getting lost in proposals like these. Optimizing for some mythical new user, who really isn’t present on this list to give an opinion seems like a false argument to make, and your technical sophistication makes you a less qualified than most to say what is and what isn’t confusing to new users because you haven’t been one in a long time.<br></p><p>-1 Leve it in. It is perfectly simple as is. Not confusing at all. There are far more confusing aspects to the language than this.<br></p><p>Cheers<br></p><p>From: &lt;swift-evolution-bounces at swift.org&lt;mailto:swift-evolution-bounces at swift.org&gt;&gt; on behalf of Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt;<br>Reply-To: Xiaodi Wu &lt;xiaodi.wu at gmail.com&lt;mailto:xiaodi.wu at gmail.com&gt;&gt;<br>Date: Tuesday, June 14, 2016 at 13:50<br>To: &quot;L. Mihalkovic&quot; &lt;laurent.mihalkovic at gmail.com&lt;mailto:laurent.mihalkovic at gmail.com&gt;&gt;, David Waite &lt;david at alkaline-solutions.com&lt;mailto:david at alkaline-solutions.com&gt;&gt;<br>Cc: swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt;<br>Subject: Re: [swift-evolution] [Pitch] Retiring `where` from for-in loops<br></p><p>Why are you unhappy about this design goal? Simple != simplistic, and powerful != complicated. Approachability has to do with the slope of the learning curve, not how high the curve goes.<br></p><p><br>On Tue, Jun 14, 2016 at 14:18 L. Mihalkovic &lt;laurent.mihalkovic at gmail.com&lt;mailto:laurent.mihalkovic at gmail.com&gt;&gt; wrote:<br></p><p><br>Regards<br>(From mobile)<br></p><p>On Jun 14, 2016, at 7:16 PM, David Waite via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>I’m a bit late to this conversation, and I don’t totally understand the goal.<br></p><p>There are a *lot* of things you can do in for…in loop with pattern matching that also would supposedly go against this interpretation of approachability. Pattern matching in general might be considered to go against this interpretation.<br></p><p>Is this pitch saying statements such as:<br></p><p>for i in 1..&lt;100 where i%2 == 1 {…}<br></p><p>should be disallowed, while statements like<br></p><p>for case let view? in views { … }<br></p><p>are still approachable enough to warrant being supported in the language?<br></p><p>FWIW, I wouldn’t support removing where based on current arguments without either the keyword “where&quot; being eliminated completely from the language, and/or adding equivalent intuitive functionality to Sequence with same-class performance, e.g. a .where(...) equivalent to .lazy.filter(…).<br></p><p>I’ve known about and used the feature since it was first added to Swift (learned via the language book), and don’t fully understand the confusion that some developers may have - especially since ‘while’ is already a keyword and could have been used if that was the actual semantics.<br></p><p>-DW<br></p><p>On Jun 14, 2016, at 10:32 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>And from the WWDC Platforms SOTU: &quot;Swift is super simple and approachable.... It&#39;s great as a first language. And in fact, we think this is so important that when we designed Swift this was an explicit design goal.&quot;<br></p><p>Yup... Doesn&#39;t bode well for power users... &quot;Swift.. Address your needs from 7 till 77... unifies the entire family&quot;<br></p><p>I would be absolutely against adding any more sugar to the for loop. In that sense, `where` sets a terrible example that certain features of sequences deserve contextual sugar. (And before someone points it out again, I&#39;ve already argued why `for...in` holds its own weight, namely difficulty of writing a correct `while` replacement and progressive disclosure to the learner so that the concept of iterators can be learned afterwards.)<br></p><p>In short, I would very much be opposed to adding keywords &quot;for fun.&quot;<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/98048048/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 15, 2016 at 02:00:00am</p></header><div class="content"><p>As you will see from earlier messages, the confused user is both quite real<br>and *is* on this list. Nor, mind you, are pedagogical concerns to be<br>trivialized; they are serious concerns for the design of the language. On<br>what grounds do you assert that something is &quot;not confusing at all&quot; when<br>there has been testimony saying &quot;it was confusing to me&quot;?<br></p><p>Some of us on this list interact regularly with novice coders. I draw upon<br>these experiences here. Do you have some special insight you&#39;d like to<br>share in that regard?<br>On Tue, Jun 14, 2016 at 20:57 Jon Akhtar &lt;jona at herbalife.com&gt; wrote:<br></p><p>&gt; How about the goal of it being a delightful language to program in. I<br>&gt; think that is getting lost in proposals like these. Optimizing for some<br>&gt; mythical new user, who really isn’t present on this list to give an opinion<br>&gt; seems like a false argument to make, and your technical sophistication<br>&gt; makes you a less qualified than most to say what is and what isn’t<br>&gt; confusing to new users because you haven’t been one in a long time.<br>&gt;<br>&gt; -1 Leve it in. It is perfectly simple as is. Not confusing at all. There<br>&gt; are far more confusing aspects to the language than this.<br>&gt;<br>&gt; Cheers<br>&gt;<br>&gt; From: &lt;swift-evolution-bounces at swift.org&gt; on behalf of Xiaodi Wu via<br>&gt; swift-evolution &lt;swift-evolution at swift.org&gt;<br>&gt; Reply-To: Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;<br>&gt; Date: Tuesday, June 14, 2016 at 13:50<br>&gt; To: &quot;L. Mihalkovic&quot; &lt;laurent.mihalkovic at gmail.com&gt;, David Waite &lt;<br>&gt; david at alkaline-solutions.com&gt;<br>&gt; Cc: swift-evolution &lt;swift-evolution at swift.org&gt;<br>&gt; Subject: Re: [swift-evolution] [Pitch] Retiring `where` from for-in loops<br>&gt;<br>&gt; Why are you unhappy about this design goal? Simple != simplistic, and<br>&gt; powerful != complicated. Approachability has to do with the slope of the<br>&gt; learning curve, not how high the curve goes.<br>&gt;<br>&gt;<br>&gt; On Tue, Jun 14, 2016 at 14:18 L. Mihalkovic &lt;laurent.mihalkovic at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Regards<br>&gt;&gt; (From mobile)<br>&gt;&gt;<br>&gt;&gt; On Jun 14, 2016, at 7:16 PM, David Waite via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I’m a bit late to this conversation, and I don’t totally understand the<br>&gt;&gt; goal.<br>&gt;&gt;<br>&gt;&gt; There are a *lot* of things you can do in for…in loop with pattern<br>&gt;&gt; matching that also would supposedly go against this interpretation of<br>&gt;&gt; approachability. Pattern matching in general might be considered to go<br>&gt;&gt; against this interpretation.<br>&gt;&gt;<br>&gt;&gt; Is this pitch saying statements such as:<br>&gt;&gt;<br>&gt;&gt; for i in 1..&lt;100 where i%2 == 1 {…}<br>&gt;&gt;<br>&gt;&gt; should be disallowed, while statements like<br>&gt;&gt;<br>&gt;&gt; for case let view? in views { … }<br>&gt;&gt;<br>&gt;&gt; are still approachable enough to warrant being supported in the language?<br>&gt;&gt;<br>&gt;&gt; FWIW, I wouldn’t support removing where based on current arguments<br>&gt;&gt; without either the keyword “where&quot; being eliminated completely from the<br>&gt;&gt; language, and/or adding equivalent intuitive functionality to Sequence with<br>&gt;&gt; same-class performance, e.g. a .where(...) equivalent to .lazy.filter(…).<br>&gt;&gt;<br>&gt;&gt; I’ve known about and used the feature since it was first added to Swift<br>&gt;&gt; (learned via the language book), and don’t fully understand the confusion<br>&gt;&gt; that some developers may have - especially since ‘while’ is already a<br>&gt;&gt; keyword and could have been used if that was the actual semantics.<br>&gt;&gt;<br>&gt;&gt; -DW<br>&gt;&gt;<br>&gt;&gt; On Jun 14, 2016, at 10:32 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; And from the WWDC Platforms SOTU: &quot;Swift is super simple and<br>&gt;&gt; approachable.... It&#39;s great as a first language. And in fact, we think this<br>&gt;&gt; is so important that when we designed Swift this was an explicit design<br>&gt;&gt; goal.&quot;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Yup... Doesn&#39;t bode well for power users... &quot;Swift.. Address your needs<br>&gt;&gt; from 7 till 77... unifies the entire family&quot;<br>&gt;&gt;<br>&gt;&gt; I would be absolutely against adding any more sugar to the for loop. In<br>&gt;&gt; that sense, `where` sets a terrible example that certain features of<br>&gt;&gt; sequences deserve contextual sugar. (And before someone points it out<br>&gt;&gt; again, I&#39;ve already argued why `for...in` holds its own weight, namely<br>&gt;&gt; difficulty of writing a correct `while` replacement and progressive<br>&gt;&gt; disclosure to the learner so that the concept of iterators can be learned<br>&gt;&gt; afterwards.)<br>&gt;&gt;<br>&gt;&gt; In short, I would very much be opposed to adding keywords &quot;for fun.&quot;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/1acfe589/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 22, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jun 14, 2016, at 8:16 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; As you will see from earlier messages, the confused user is both quite real and *is* on this list. Nor, mind you, are pedagogical concerns to be trivialized; they are serious concerns for the design of the language. On what grounds do you assert that something is &quot;not confusing at all&quot; when there has been testimony saying &quot;it was confusing to me&quot;?<br>&gt; <br>&gt; Some of us on this list interact regularly with novice coders. I draw upon these experiences here. Do you have some special insight you&#39;d like to share in that regard?<br>&gt; On Tue, Jun 14, 2016 at 20:57 Jon Akhtar &lt;jona at herbalife.com &lt;mailto:jona at herbalife.com&gt;&gt; wrote:<br>&gt; How about the goal of it being a delightful language to program in. I think that is getting lost in proposals like these. Optimizing for some mythical new user, who really isn’t present on this list to give an opinion seems like a false argument to make, and your technical sophistication makes you a less qualified than most to say what is and what isn’t confusing to new users because you haven’t been one in a long time.<br>&gt; <br>&gt; -1 Leve it in. It is perfectly simple as is. Not confusing at all. There are far more confusing aspects to the language than this.<br>&gt; <br>&gt; Cheers<br></p><p>Yet another case from a few minutes ago:<br></p><p>rullie &lt;member:rullie&gt;: hi, could someone walk me through this http://pastie.org/10887040 &lt;http://pastie.org/10887040&gt;<br>[3:08pm] rullie &lt;member:rullie&gt;: why is it that for loop through an lazy infinite sequence does not terminate even with the where clause invovled?<br>[<br>[3:08pm] mikeash &lt;member:mikeash&gt;: &quot;where&quot; means &quot;skip iterations when this condition is not true&quot;<br>[3:08pm] mikeash &lt;member:mikeash&gt;: it doesn&#39;t mean &quot;halt the loop when this is not true&quot;<br>[3:08pm] rullie &lt;member:rullie&gt;: oh whoa.. ok<br>[3:09pm] mikeash &lt;member:mikeash&gt;: it can&#39;t know that you&#39;ll never see another value &lt; 100, so &lt;member:so&gt; it keeps on going<br>[3:09pm] rullie &lt;member:rullie&gt;: ok, i completely misunderstood the where clause then<br>[3:10pm] mikeash &lt;member:mikeash&gt;: I can see how it might look like it does that<br>[3:10pm] rullie &lt;member:rullie&gt;: is there a syntax that achieves what i want to do without having to have a if-break in the loop?<br></p><p>-- E<br>p.s. Posted with permission from both participants<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/a013799f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 23, 2016 at 05:00:00pm</p></header><div class="content"><p>On 23.06.2016 0:21, Erica Sadun via swift-evolution wrote:<br>&gt;<br>&gt;&gt; On Jun 14, 2016, at 8:16 PM, Xiaodi Wu via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; As you will see from earlier messages, the confused user is both quite<br>&gt;&gt; real and *is* on this list. Nor, mind you, are pedagogical concerns to be<br>&gt;&gt; trivialized; they are serious concerns for the design of the language. On<br>&gt;&gt; what grounds do you assert that something is &quot;not confusing at all&quot; when<br>&gt;&gt; there has been testimony saying &quot;it was confusing to me&quot;?<br>&gt;&gt;<br>&gt;&gt; Some of us on this list interact regularly with novice coders. I draw<br>&gt;&gt; upon these experiences here. Do you have some special insight you&#39;d like<br>&gt;&gt; to share in that regard?<br>&gt;&gt; On Tue, Jun 14, 2016 at 20:57 Jon Akhtar &lt;jona at herbalife.com<br>&gt;&gt; &lt;mailto:jona at herbalife.com&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;     How about the goal of it being a delightful language to program in. I<br>&gt;&gt;     think that is getting lost in proposals like these. Optimizing for<br>&gt;&gt;     some mythical new user, who really isn’t present on this list to give<br>&gt;&gt;     an opinion seems like a false argument to make, and your technical<br>&gt;&gt;     sophistication makes you a less qualified than most to say what is<br>&gt;&gt;     and what isn’t confusing to new users because you haven’t been one in<br>&gt;&gt;     a long time.<br>&gt;&gt;<br>&gt;&gt;     -1 Leve it in. It is perfectly simple as is. Not confusing at all.<br>&gt;&gt;     There are far more confusing aspects to the language than this.<br>&gt;&gt;<br>&gt;&gt;     Cheers<br>&gt;<br>&gt; Yet another case from a few minutes ago:<br></p><p>Sorry.. but.. And what? Suggest &lt;rullie&gt; to write simple SQL query, will <br>he/she be confused by &#39;WHERE&#39; there? If &lt;rullie&gt; didn&#39;t know *for sure* <br>what does &#39;where&#39; means, why he/she didn&#39;t check docs or just checked in <br>playground/IBM Swift Sandbox?<br></p><p>You found one more user confused by &#39;where&#39;. I can find N users that were <br>not confused by it even first time he/she saw it in code. And can find M <br>users confused by any other construction/element of Swift. I just don&#39;t <br>think such &#39;cases&#39; could be treated as information that proves anything.<br></p><p>&gt;<br>&gt; rullie &lt;member:rullie&gt;: hi, could someone walk me through<br>&gt; this http://pastie.org/10887040<br>&gt; [3:08pm] rullie &lt;member:rullie&gt;: why is it that for loop through an lazy<br>&gt; infinite sequence does not terminate even with the where clause invovled?<br>&gt; [<br>&gt; [3:08pm] mikeash &lt;member:mikeash&gt;: &quot;where&quot; means &quot;skip iterations when this<br>&gt; condition is not true&quot;<br>&gt; [3:08pm] mikeash &lt;member:mikeash&gt;: it doesn&#39;t mean &quot;halt the loop when this<br>&gt; is not true&quot;<br>&gt; [3:08pm] rullie &lt;member:rullie&gt;: oh whoa.. ok<br>&gt; [3:09pm] mikeash &lt;member:mikeash&gt;: it can&#39;t know that you&#39;ll never see<br>&gt; another value &lt; 100, so &lt;member:so&gt; it keeps on going<br>&gt; [3:09pm] rullie &lt;member:rullie&gt;: ok, i completely misunderstood the where<br>&gt; clause then<br>&gt; [3:10pm] mikeash &lt;member:mikeash&gt;: I can see how it might look like it does<br>&gt; that<br>&gt; [3:10pm] rullie &lt;member:rullie&gt;: is there a syntax that achieves what i<br>&gt; want to do without having to have a if-break in the loop?<br>&gt;<br>&gt; -- E<br>&gt; p.s. Posted with permission from both participants<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 22, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jun 14, 2016, at 8:16 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; As you will see from earlier messages, the confused user is both quite real and *is* on this list. Nor, mind you, are pedagogical concerns to be trivialized; they are serious concerns for the design of the language. On what grounds do you assert that something is &quot;not confusing at all&quot; when there has been testimony saying &quot;it was confusing to me&quot;?<br>&gt; <br>&gt; Some of us on this list interact regularly with novice coders. I draw upon these experiences here. Do you have some special insight you&#39;d like to share in that regard?<br>&gt; On Tue, Jun 14, 2016 at 20:57 Jon Akhtar &lt;jona at herbalife.com &lt;mailto:jona at herbalife.com&gt;&gt; wrote:<br>&gt; How about the goal of it being a delightful language to program in. I think that is getting lost in proposals like these. Optimizing for some mythical new user, who really isn’t present on this list to give an opinion seems like a false argument to make, and your technical sophistication makes you a less qualified than most to say what is and what isn’t confusing to new users because you haven’t been one in a long time.<br>&gt; <br>&gt; -1 Leve it in. It is perfectly simple as is. Not confusing at all. There are far more confusing aspects to the language than this.<br>&gt; <br>&gt; Cheers<br></p><p>Yet another case from a few minutes ago:<br></p><p>[3:08pm] rullie: hi, could someone walk me through this http://pastie.org/10887040<br>[3:08pm] rullie: why is it that for loop through an lazy infinite sequence does not terminate even with the where clause invovled?<br>[3:08pm] mikeash: &quot;where&quot; means &quot;skip iterations when this condition is not true&quot;<br>[3:08pm] mikeash: it doesn&#39;t mean &quot;halt the loop when this is not true&quot;<br>[3:08pm] rullie: oh whoa.. ok<br>[3:09pm] mikeash: it can&#39;t know that you&#39;ll never see another value &lt; 100, so it keeps on going<br>[3:09pm] rullie: ok, i completely misunderstood the where clause then<br>[3:10pm] mikeash: I can see how it might look like it does that<br>[3:10pm] rullie: is there a syntax that achieves what i want to do without having to have a if-break in the loop?<br></p><p><br>-- E<br>p.s. Posted with permission from both participants<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/7aaf10e4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June 22, 2016 at 08:00:00pm</p></header><div class="content"><p>Isn&#39;t this more caused by confusion about how infinite sequences work?<br></p><p>The prefix one is no longer an infinite sequence. The second one still is. The second one will always infinite loop unless you break<br></p><p>Brandon<br></p><p>Sent from my iPad<br></p><p>&gt; On Jun 22, 2016, at 5:28 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 14, 2016, at 8:16 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; As you will see from earlier messages, the confused user is both quite real and *is* on this list. Nor, mind you, are pedagogical concerns to be trivialized; they are serious concerns for the design of the language. On what grounds do you assert that something is &quot;not confusing at all&quot; when there has been testimony saying &quot;it was confusing to me&quot;?<br>&gt;&gt; <br>&gt;&gt; Some of us on this list interact regularly with novice coders. I draw upon these experiences here. Do you have some special insight you&#39;d like to share in that regard?<br>&gt;&gt;&gt; On Tue, Jun 14, 2016 at 20:57 Jon Akhtar &lt;jona at herbalife.com&gt; wrote:<br>&gt;&gt;&gt; How about the goal of it being a delightful language to program in. I think that is getting lost in proposals like these. Optimizing for some mythical new user, who really isn’t present on this list to give an opinion seems like a false argument to make, and your technical sophistication makes you a less qualified than most to say what is and what isn’t confusing to new users because you haven’t been one in a long time.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -1 Leve it in. It is perfectly simple as is. Not confusing at all. There are far more confusing aspects to the language than this.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Cheers<br>&gt; <br>&gt; Yet another case from a few minutes ago:<br>&gt; <br>&gt; [3:08pm] rullie: hi, could someone walk me through this http://pastie.org/10887040<br>&gt; [3:08pm] rullie: why is it that for loop through an lazy infinite sequence does not terminate even with the where clause invovled?<br>&gt; [3:08pm] mikeash: &quot;where&quot; means &quot;skip iterations when this condition is not true&quot;<br>&gt; [3:08pm] mikeash: it doesn&#39;t mean &quot;halt the loop when this is not true&quot;<br>&gt; [3:08pm] rullie: oh whoa.. ok<br>&gt; [3:09pm] mikeash: it can&#39;t know that you&#39;ll never see another value &lt; 100, so it keeps on going<br>&gt; [3:09pm] rullie: ok, i completely misunderstood the where clause then<br>&gt; [3:10pm] mikeash: I can see how it might look like it does that<br>&gt; [3:10pm] rullie: is there a syntax that achieves what i want to do without having to have a if-break in the loop?<br>&gt; <br>&gt; <br>&gt; -- E<br>&gt; p.s. Posted with permission from both participants<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/aea37b24/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 15, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; On Jun 15, 2016, at 3:57 AM, Jon Akhtar via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; How about the goal of it being a delightful language to program in.<br></p><p>Historyprooves that goals are rarely enterely wrong... It is how they are carried out that more often is questionable.<br></p><p><br>&gt; I think that is getting lost in proposals like these. Optimizing for some mythical new user, who really isn’t present on this list to give an opinion seems like a false argument to make, and your technical sophistication makes you a less qualified than most to say what is and what isn’t confusing to new users because you haven’t been one in a long time.<br></p><p>Now the problem with that is : do you design for day 1 or do you design for day-n (where n &gt; bigEnoughToDoLot). I hope NEITHER, which makes hte complete beginer equally disqualified as I am then. Swift is here to stay for next 20 years at least... it can&#39;t just be designed for the extremes, and the role of chris and team is to see past the knee-jerk reactions of newcomers to see how they can put mechanisms in place that will secure the future. <br></p><p>&gt; -1 Leve it in. It is perfectly simple as is. Not confusing at all. There are far more confusing aspects to the language than this.<br></p><p>But there are limited opportunity to hide great power behind simple looking constructs, and that is a fact, regardless of the number of users who can see/understand it. Objc thrived for 30 years because the apple world was very closed onto itself. Today arguably the most powerful language (richness of abstractions, universality) for writing appleOS apps is in the hands of microsoft. Maybe apple will settle for this situation, leaving people who feel limited by swift to switch to c#. But make no mistake, other languages will come (rust is already usable to make ios apps), and many of the people who are 7 today and learning, will already feel limited 2 years from now if swift does not step up where it can.<br></p><p>&gt; <br>&gt; Cheers<br>&gt; <br>&gt; From: &lt;swift-evolution-bounces at swift.org&gt; on behalf of Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt;<br>&gt; Reply-To: Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;<br>&gt; Date: Tuesday, June 14, 2016 at 13:50<br>&gt; To: &quot;L. Mihalkovic&quot; &lt;laurent.mihalkovic at gmail.com&gt;, David Waite &lt;david at alkaline-solutions.com&gt;<br>&gt; Cc: swift-evolution &lt;swift-evolution at swift.org&gt;<br>&gt; Subject: Re: [swift-evolution] [Pitch] Retiring `where` from for-in loops<br>&gt; <br>&gt; Why are you unhappy about this design goal? Simple != simplistic, and powerful != complicated. Approachability has to do with the slope of the learning curve, not how high the curve goes.<br>&gt; <br>&gt; <br>&gt;&gt; On Tue, Jun 14, 2016 at 14:18 L. Mihalkovic &lt;laurent.mihalkovic at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Regards<br>&gt;&gt; (From mobile)<br>&gt;&gt; <br>&gt;&gt; On Jun 14, 2016, at 7:16 PM, David Waite via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I’m a bit late to this conversation, and I don’t totally understand the goal.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There are a *lot* of things you can do in for…in loop with pattern matching that also would supposedly go against this interpretation of approachability. Pattern matching in general might be considered to go against this interpretation.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is this pitch saying statements such as:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for i in 1..&lt;100 where i%2 == 1 {…} <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; should be disallowed, while statements like<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for case let view? in views { … }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; are still approachable enough to warrant being supported in the language?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; FWIW, I wouldn’t support removing where based on current arguments without either the keyword “where&quot; being eliminated completely from the language, and/or adding equivalent intuitive functionality to Sequence with same-class performance, e.g. a .where(...) equivalent to .lazy.filter(…). <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’ve known about and used the feature since it was first added to Swift (learned via the language book), and don’t fully understand the confusion that some developers may have - especially since ‘while’ is already a keyword and could have been used if that was the actual semantics.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -DW<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 14, 2016, at 10:32 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; And from the WWDC Platforms SOTU: &quot;Swift is super simple and approachable.... It&#39;s great as a first language. And in fact, we think this is so important that when we designed Swift this was an explicit design goal.&quot;<br>&gt;&gt; <br>&gt;&gt; Yup... Doesn&#39;t bode well for power users... &quot;Swift.. Address your needs from 7 till 77... unifies the entire family&quot;<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; I would be absolutely against adding any more sugar to the for loop. In that sense, `where` sets a terrible example that certain features of sequences deserve contextual sugar. (And before someone points it out again, I&#39;ve already argued why `for...in` holds its own weight, namely difficulty of writing a correct `while` replacement and progressive disclosure to the learner so that the concept of iterators can be learned afterwards.)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; In short, I would very much be opposed to adding keywords &quot;for fun.&quot;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/b99ea895/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 14, 2016 at 03:00:00pm</p></header><div class="content"><p>The equivalent in Swift would be .filter(), and you&#39;re free to use it if<br>you prefer to express yourself that way.<br></p><p>Notice how these are almost never paired with loops. It&#39;s like mixing<br>chocolate and steak.<br></p><p>On Tue, Jun 14, 2016 at 8:50 AM plx via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Jun 13, 2016, at 10:26 AM, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;&gt; On Jun 13, 2016, at 9:23 AM, let var go via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I am 100% with Charlie on this. Expressiveness has to do with the<br>&gt; *effectiveness* of conveying a thought or a feeling.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Keep &quot;where&quot;. It is expressive. It conveys a specific idea effectively<br>&gt; and concisely.<br>&gt; &gt;<br>&gt; &gt; For those of you in favor of retaining `where`, how do you feel about<br>&gt; adding `while`, `until`, `unless`, etc?<br>&gt;<br>&gt; In the interest of advancing the “what kind of language would I prefer<br>&gt; swift become?”, here are my final thoughts on this topic:<br>&gt;<br>&gt; For those particular keywords, I’d prefer having them (or equivalents).<br>&gt; I’m not sure if I’d prefer having *all* of them—`where/unless` and<br>&gt; `while/until`—or just one from each “pair”…I could go either way.<br>&gt;<br>&gt; As a general consideration, I’d be in favor of having them b/c I’d really<br>&gt; like Swift to have a comprehension-style construct (and associated syntax<br>&gt; etc.).<br>&gt;<br>&gt; Comprehension syntax is IMHO pretty common outside the C family—within the<br>&gt; C family really only C# has something like it—and in general comprehension<br>&gt; syntax has pretty similar structure from language to language. This link<br>&gt; illustrates the syntax for 28 languages’  comprehension constructs, so it<br>&gt; isn’t a bad overview:<br>&gt;<br>&gt;<br>&gt; https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(list_comprehension)<br>&gt;<br>&gt; …(note that “comprehension syntax” isn’t quite the same thing as “list<br>&gt; comprehensions”, but for “comparative syntax” purposes that link should be<br>&gt; sufficient).<br>&gt;<br>&gt; For me the appeal of “comprehension syntax” is that it allows writing code<br>&gt; that feels more “semantic” than “mechanical”, and that paraphrases much<br>&gt; closer to the intended meaning.<br>&gt;<br>&gt; Here’s a toy example:<br>&gt;<br>&gt;   // with a comprehension-like syntax<br>&gt;   // outside loop: “what items do we care about?&quot;<br>&gt;   for visitor in queue where visitor.hasTicket until venue.isFull {<br>&gt;     // inside loop: “…and what do we do with them?&quot;<br>&gt;     venue.admit(visitor)<br>&gt;   }<br>&gt;<br>&gt; …which to my eyes paraphrases more-or-less how I’d describe what we’re<br>&gt; doing:<br>&gt;<br>&gt; - “keep admitting visitors with tickets until the venue is full”<br>&gt;<br>&gt; …whereas without it, you get something like this:<br>&gt;<br>&gt;   // without comprehension-style syntax<br>&gt;   // outside loop: where, mechanically, are we sourcing items from<br>&gt;   for visitor in queue {<br>&gt;     // inside loop: muddled mix of filtering, app logic, and flow-control<br>&gt;     // filtering:<br>&gt;     guard visitor.hasTicket else { continue }<br>&gt;     // app logic:<br>&gt;     venue.admit(visitor)<br>&gt;     // flow-control:<br>&gt;     if venue.isFull { break }<br>&gt;   }<br>&gt;<br>&gt; …which *is* closer to the underlying mechanics, but paraphrases more like<br>&gt; something you&#39;d see in a badly-translated 80s VCR programing manual:<br>&gt;<br>&gt; - “Start considering visitors. If the visitor doesn&#39;t have a ticket, move<br>&gt; on to the next visitor. Otherwise, admit the visitor. If the venue is full,<br>&gt; stop considering visitors.”<br>&gt;<br>&gt; Sure, they’re both equivalent—and even in the 80s, some people managed to<br>&gt; program their VCRs!—but given the option I’d strongly prefer to write in<br>&gt; the first style; I like having a clean segregation between “what items are<br>&gt; of interest?” and “what do we do with them?”<br>&gt;<br>&gt; So that’s what I like about comprehension-like constructs.<br>&gt;<br>&gt; The current `for-in-where` is a bit of an anomaly; it could be grown into<br>&gt; something a little richer—`for _ in _ where _ while _`  and/or `for _ in _<br>&gt; where _ until _` (etc.).—or it could be dropped and some better construct<br>&gt; proposed.<br>&gt;<br>&gt; But, my personal preference would be to keep it around until either the<br>&gt; richer construct is available or definitively declared as “not swift-y, not<br>&gt; happening”:<br>&gt;<br>&gt; - if a “comprehension” construct is approved, an automatic migrator would<br>&gt; likely do a *much* better job translating those `for _ in _ where` loops<br>&gt; than it’d do with their more-imperative equivalents<br>&gt; - if a “comprehension” construct is definitively-rejected, at least I can<br>&gt; keep using something I like until the hammer drops<br>&gt;<br>&gt; &gt;<br>&gt; &gt; -- E<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160614/2b5f14d5/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/73a38bb7bc9528e31098defe30e68ea4?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Jean-Daniel Dupas</string> &lt;mailing at xenonium.com&gt;<p>June 15, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; Le 13 juin 2016 à 17:26, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 13, 2016, at 9:23 AM, let var go via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I am 100% with Charlie on this. Expressiveness has to do with the *effectiveness* of conveying a thought or a feeling.<br>&gt;&gt; <br>&gt;&gt; Keep &quot;where&quot;. It is expressive. It conveys a specific idea effectively and concisely.<br>&gt; <br>&gt; For those of you in favor of retaining `where`, how do you feel about adding `while`, `until`, `unless`, etc?<br>&gt; <br>&gt; — E<br></p><p>What I like is the possibility to iterate over a filtered list using a ‘single’ statement, not the keyword itself. If you propose to replace where by something less confusing, or add other keywords, I’m all for it.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4ab486d7597af4cfe0be33a762150848?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Dany St-Amant</string> &lt;dsa.mls at icloud.com&gt;<p>June 15, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; Le 15 juin 2016 à 17:23, Jean-Daniel Dupas via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; <br>&gt;&gt; Le 13 juin 2016 à 17:26, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 13, 2016, at 9:23 AM, let var go via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I am 100% with Charlie on this. Expressiveness has to do with the *effectiveness* of conveying a thought or a feeling.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Keep &quot;where&quot;. It is expressive. It conveys a specific idea effectively and concisely.<br>&gt;&gt; <br>&gt;&gt; For those of you in favor of retaining `where`, how do you feel about adding `while`, `until`, `unless`, etc?<br>&gt;&gt; <br>&gt;&gt; — E<br>&gt; <br>&gt; What I like is the possibility to iterate over a filtered list using a ‘single’ statement, not the keyword itself. If you propose to replace where by something less confusing, or add other keywords, I’m all for it.<br>&gt; <br></p><p>For the folks who like the &#39;where&#39; and do not like the &#39;guard .. else continue&#39;, (also considering in the equation the suggestion of renaming &#39;where&#39; by &#39;if&#39;). One can get the &#39;where&#39; syntax without the &#39;where&#39;  at the cost of one indentation level and the set of curly braces.<br></p><p>for element in dataArray {<br>  if condition {<br>    doWork()<br>  }<br>}<br></p><p>versus<br></p><p>for element in dataArray where condition {<br>  doWork()<br>}<br></p><p>Dany, slowly shifting into the &quot;what&#39;s the point of keeping &#39;where&#39;&quot; camp<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 15, 2016 at 05:00:00pm</p></header><div class="content"><p>On Wed, Jun 15, 2016 at 4:58 PM, Dany St-Amant via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; Le 15 juin 2016 à 17:23, Jean-Daniel Dupas via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;&gt; Le 13 juin 2016 à 17:26, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On Jun 13, 2016, at 9:23 AM, let var go via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; I am 100% with Charlie on this. Expressiveness has to do with the<br>&gt; *effectiveness* of conveying a thought or a feeling.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Keep &quot;where&quot;. It is expressive. It conveys a specific idea effectively<br>&gt; and concisely.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; For those of you in favor of retaining `where`, how do you feel about<br>&gt; adding `while`, `until`, `unless`, etc?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; — E<br>&gt; &gt;<br>&gt; &gt; What I like is the possibility to iterate over a filtered list using a<br>&gt; ‘single’ statement, not the keyword itself. If you propose to replace where<br>&gt; by something less confusing, or add other keywords, I’m all for it.<br>&gt; &gt;<br>&gt;<br>&gt; For the folks who like the &#39;where&#39; and do not like the &#39;guard .. else<br>&gt; continue&#39;, (also considering in the equation the suggestion of renaming<br>&gt; &#39;where&#39; by &#39;if&#39;). One can get the &#39;where&#39; syntax without the &#39;where&#39;  at<br>&gt; the cost of one indentation level and the set of curly braces.<br>&gt;<br>&gt; for element in dataArray {<br>&gt;   if condition {<br>&gt;     doWork()<br>&gt;   }<br>&gt; }<br>&gt;<br>&gt; versus<br>&gt;<br>&gt; for element in dataArray where condition {<br>&gt;   doWork()<br>&gt; }<br>&gt;<br></p><p>...and (not that I would advocate for this as the best style), you could<br>simulate the keyword with a slightly funny indentation:<br></p><p>```<br>for element in dataArray { if condition {<br>  doWork()<br>}}<br>```<br></p><p>(...and if we&#39;re counting letters typed as a metric for terseness, not that<br>I would advocate that metric, `where` and `if {}` are both exactly five...)<br></p><p><br>&gt; Dany, slowly shifting into the &quot;what&#39;s the point of keeping &#39;where&#39;&quot; camp<br>&gt;<br></p><p>:)<br></p><p><br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/5b2ae8d7/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>June 11, 2016 at 05:00:00am</p></header><div class="content"><p>I’m sorry, but those statistics are not useful. The Swift standard library is not representative of real-world Swift code, or what Swift developers expect or appreciate about the language. You also need to consider that lots of people are reluctant to support new syntax for fear that it might as soon disappear with the next drop (*uhum*…). Gathering useful statistics about the popularity of features in the Swift language is more involved than simply grep-ing the standard library.<br></p><p>I know for a fact that it’s not representative of the code I’ve seen, or that I see people write, and it’s not reflective of that small amount of joy they feel when they realise basic, mundane stuff like this just works and stays readable. They’ve lived with C-loops and continues, Python list contractions and the like, and this is just better. Somebody mentioned LINQ - that’s another sad story; It’s hard to reason about the performance characteristics of your code, and tiny, non-functional changes can have drastic impacts on performance. Making collections of data easy to filter is something a 21st-century programming language needs to do, and we could get things a whole lot “wronger” than a simple boolean predicate attached to “for&quot; loops.<br></p><p><br>There is something (which may have gotten lost in my mail): the “for _ in  _” loop is a data-driven loop. It’s unique compared to other loops such as “while” or “repeat/while”, which simply check a Bool condition. You don’t even have a loop counter, because your place in the list doesn’t matter - it’s about iterating over a collection of individual things. With that context, having the ability to filter inline is sort-of imperative. I think its existence is entirely justified.<br></p><p>I would be more interested in discussing how exactly we could make it clearer than if it should exist at all. Personally, I have no attachment to the “where” keyword (I mean, I got it wrong practically every time in my mail, calling it “while”). But I’ve thought about alternatives and renaming (possible replace it with just “if”? as in “for number in 0..&lt;10 if number% 2 == 0 { print(“\(number) is an even number&quot;) }” ). I’m not sure I can think of something that’s clearly much better than what we have now.<br></p><p>Karl<br></p><p>&gt; On 10 Jun 2016, at 17:24, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jun 10, 2016, at 9:22 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 10, 2016, at 8:02 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Fri, Jun 10, 2016 at 7:18 AM, Haravikk &lt;swift-evolution at haravikk.me &lt;mailto:swift-evolution at haravikk.me&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; * The word &quot;where&quot; does not consistently imply `break` or `continue`. In current Swift, `where` implies `break` in the context of a `while` loop and `continue` in the context of a `for` loop. Some users intuitively guess the correct meaning in each context, while others guess the wrong meaning. Therefore, the only way to learn for sure what `where` means in any context is to read the rulebook. That, by definition, means that this is unintuitive.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is an argument for renaming the where keyword on for loops to be more clear, or to somehow integrate continue/break to be more explicit about what the developer intends for it to do.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sure: I conclude that the keyword should be *either* removed *or* reformed; both outcomes could address the issue.<br>&gt;&gt; <br>&gt;&gt; This is my stance as well and I reserve the right to flit between both choices until we&#39;ve fully talked it through.<br>&gt;&gt; <br>&gt;&gt; One more data point. <br>&gt;&gt; <br>&gt;&gt; In the standard library there are just under 950 uses of &quot;for in loops&quot;. There are 3 uses of &quot;for in while&quot; :<br>&gt;&gt; <br>&gt;&gt; private/StdlibUnittest/StdlibUnittest.swift.gyb:    for j in instances.indices where i != j {<br>&gt;&gt; public/core/Algorithm.swift:  for value in rest where value &lt; minValue {<br>&gt;&gt; public/core/Algorithm.swift:  for value in rest where value &gt;= maxValue {<br>&gt;&gt; <br>&gt;&gt; -- Erica<br>&gt; <br>&gt; Actually a slight correction to that. I forgot to add the space after &quot;in&quot; on the first search. It&#39;s just over 600 and 3. Among the 600 are a few false positives but not many.<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160611/e89baa66/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 10, 2016 at 11:00:00pm</p></header><div class="content"><p>On Fri, Jun 10, 2016 at 10:49 PM, Karl via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I’m sorry, but those statistics are not useful. The Swift standard library<br>&gt; is not representative of real-world Swift code, or what Swift developers<br>&gt; expect or appreciate about the language. You also need to consider that<br>&gt; lots of people are reluctant to support new syntax for fear that it might<br>&gt; as soon disappear with the next drop (*uhum*…).<br>&gt;<br></p><p>More likely, lots of people don&#39;t know that this syntax exists. Earlier<br>today we heard that one experienced Swift user didn&#39;t learn about the<br>feature until joining this list!<br></p><p>Earlier, Jonathan Hull raised the example of stdlib `.forEach()`. Let&#39;s<br>compare discoverability of these two features. For a method in the stdlib,<br>I merely type `.` after the receiver in any IDE worth its salt, and I can<br>find `.forEach()`. Or, say I&#39;m reading someone else&#39;s code. I see<br>`.forEach()` and I click on it, and in any IDE worth its salt, I see all<br>the info I need in a panel to the side. Now let&#39;s think about the<br>discoverability of the `where` clause. I type `for foo in bar`--what<br>tooling could I possibly use that would remind me about the `where` clause?<br>Or let&#39;s say that I encounter the rare `for foo in bar where baz`, where do<br>I click in Xcode for info on what `where` does? My best bet is to google<br>&quot;Swift where&quot;!<br></p><p>Of course, you might say, this is an argument for better tooling and better<br>documentation. Sure. But it&#39;s also indicative of a fundamental distinction<br>between library method names and language keywords. In essence: if it&#39;s a<br>method, you&#39;re expected to look it up; if it&#39;s a keyword, you&#39;re assumed to<br>know it. This has been the case for every language I&#39;ve encountered. So one<br>question [not the only question] to ask here is: is the `where` clause so<br>intuitive, or does it provide such utility, that we can rightly have that<br>expectation of those who use loops (which, I&#39;m going to make a wild guess,<br>is the set of all users)?<br></p><p>Gathering useful statistics about the popularity of features in the Swift<br>&gt; language is more involved than simply grep-ing the standard library.<br>&gt;<br>&gt; I know for a fact that it’s not representative of the code I’ve seen, or<br>&gt; that I see people write, and it’s not reflective of that small amount of<br>&gt; joy they feel when they realise basic, mundane stuff like this just works<br>&gt; and stays readable. They’ve lived with C-loops and continues, Python list<br>&gt; contractions and the like, and this is just better.<br>&gt;<br></p><p>I rather like Python list comprehensions--what&#39;s so terrible about them<br>that they&#39;re merely to be &quot;lived with&quot;? If we take inspiration from Python,<br>we might want to consider replacing `where` with `if` like you suggest<br>below.<br></p><p><br>&gt; Somebody mentioned LINQ - that’s another sad story; It’s hard to reason<br>&gt; about the performance characteristics of your code, and tiny,<br>&gt; non-functional changes can have drastic impacts on performance. Making<br>&gt; collections of data easy to filter is something a 21st-century programming<br>&gt; language needs to do, and we could get things a whole lot “wronger” than a<br>&gt; simple boolean predicate attached to “for&quot; loops.<br>&gt;<br>&gt;<br>&gt; There is something (which may have gotten lost in my mail): the “for _ in<br>&gt;  _” loop is a data-driven loop. It’s unique compared to other loops such as<br>&gt; “while” or “repeat/while”, which simply check a Bool condition. You don’t<br>&gt; even have a loop counter, because your place in the list doesn’t matter -<br>&gt; it’s about iterating over a collection of individual things. With that<br>&gt; context, having the ability to filter inline is sort-of imperative.<br>&gt;<br></p><p>Not that this way of thinking is determinative, but of languages in the C<br>family with `for...in` loops (including C++&#39;s range-for loop, etc.), how<br>many have the ability to filter inline by the use of a keyword? I don&#39;t<br>know of any. Not even Python, which has a filtering syntax for its list<br>comprehensions. Many have a method such as .filter() [Rust] or .Where()<br>[C#], as does Swift. This certainly doesn&#39;t mean that Swift *shouldn&#39;t*<br>have a keyword, but it does suggest that it&#39;s not really &quot;imperative.&quot;<br></p><p><br>&gt; I think its existence is entirely justified.<br>&gt;<br>&gt; I would be more interested in discussing how exactly we could make it<br>&gt; clearer than if it should exist at all. Personally, I have no attachment to<br>&gt; the “where” keyword (I mean, I got it wrong practically every time in my<br>&gt; mail, calling it “while”). But I’ve thought about alternatives and renaming<br>&gt; (possible replace it with just “if”? as in “for number in 0..&lt;10 if number%<br>&gt; 2 == 0 { print(“\(number) is an even number&quot;) }” ). I’m not sure I can<br>&gt; think of something that’s clearly much better than what we have now.<br>&gt;<br>&gt; Karl<br>&gt;<br>&gt; On 10 Jun 2016, at 17:24, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Jun 10, 2016, at 9:22 AM, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Jun 10, 2016, at 8:02 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Fri, Jun 10, 2016 at 7:18 AM, Haravikk &lt;swift-evolution at haravikk.me&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; * The word &quot;where&quot; does not consistently imply `break` or `continue`. In<br>&gt;&gt; current Swift, `where` implies `break` in the context of a `while` loop and<br>&gt;&gt; `continue` in the context of a `for` loop. Some users intuitively guess the<br>&gt;&gt; correct meaning in each context, while others guess the wrong meaning.<br>&gt;&gt; Therefore, the only way to learn for sure what `where` means in any context<br>&gt;&gt; is to read the rulebook. That, by definition, means that this is<br>&gt;&gt; unintuitive.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; This is an argument for renaming the where keyword on for loops to be<br>&gt;&gt; more clear, or to somehow integrate continue/break to be more explicit<br>&gt;&gt; about what the developer intends for it to do.<br>&gt;&gt;<br>&gt;<br>&gt; Sure: I conclude that the keyword should be *either* removed *or*<br>&gt; reformed; both outcomes could address the issue.<br>&gt;<br>&gt;<br>&gt; This is my stance as well and I reserve the right to flit between both<br>&gt; choices until we&#39;ve fully talked it through.<br>&gt;<br>&gt; One more data point.<br>&gt;<br>&gt; In the standard library there are just under 950 uses of &quot;for in loops&quot;.<br>&gt; There are 3 uses of &quot;for in while&quot; :<br>&gt;<br>&gt; private/StdlibUnittest/StdlibUnittest.swift.gyb:    for j in<br>&gt; instances.indices where i != j {<br>&gt; public/core/Algorithm.swift:  for value in rest where value &lt; minValue {<br>&gt; public/core/Algorithm.swift:  for value in rest where value &gt;= maxValue {<br>&gt;<br>&gt; -- Erica<br>&gt;<br>&gt;<br>&gt; Actually a slight correction to that. I forgot to add the space after &quot;in&quot;<br>&gt; on the first search. It&#39;s just over 600 and 3. Among the 600 are a few<br>&gt; false positives but not many.<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/5923123f/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 11, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Jun 11, 2016, at 5:49 AM, Karl via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I’m sorry, but those statistics are not useful. The Swift standard library is not representative of real-world Swift code, or what Swift developers expect or appreciate about the language. You also need to consider that lots of people are reluctant to support new syntax for fear that it might as soon disappear with the next drop (*uhum*…). <br></p><p>Now, IMHO this should never be an argument when dealing with Apple.. anyone who&#39;s been around long enough will tell you that nothing is safe!!! The company&#39;s entire software culture is based on this kind of musical chairs approach: when the music stops (every year at WWDC) devs are left to figure out what has become what and how much they have to change in their code. This is a bit steeper with swift because there is no &#39;deprecation&#39; period... it is just gone! but they assist with the language modernization rools in xcode.<br></p><p><br>&gt; Gathering useful statistics about the popularity of features in the Swift language is more involved than simply grep-ing the standard library.<br>&gt; <br>&gt; I know for a fact that it’s not representative of the code I’ve seen, or that I see people write, and it’s not reflective of that small amount of joy they feel when they realise basic, mundane stuff like this just works and stays readable. They’ve lived with C-loops and continues, Python list contractions and the like, and this is just better. Somebody mentioned LINQ - that’s another sad story; It’s hard to reason about the performance characteristics of your code, and tiny, non-functional changes can have drastic impacts on performance. Making collections of data easy to filter is something a 21st-century programming language needs to do, and we could get things a whole lot “wronger” than a simple boolean predicate attached to “for&quot; loops.<br></p><p>I mentioned LINQ.. looking at &quot;oh dread 10% worse perf on an empty loop done 4_000_000 time is IMO bloody ridiculous (don&#39;t get me wrong, perf matters.. I come from low latency trading systems). In time, more aggressive inlining heuristics will exist, and it is the job of a good compiler to to generate the right code from a simple closure syntax.<br></p><p>&gt; <br>&gt; <br>&gt; There is something (which may have gotten lost in my mail): the “for _ in  _” loop is a data-driven loop. It’s unique compared to other loops such as “while” or “repeat/while”, which simply check a Bool condition. You don’t even have a loop counter, because your place in the list doesn’t matter - it’s about iterating over a collection of individual things. With that context, having the ability to filter inline is sort-of imperative. I think its existence is entirely justified.<br>&gt; <br>&gt; I would be more interested in discussing how exactly we could make it clearer than if it should exist at all. Personally, I have no attachment to the “where” keyword (I mean, I got it wrong practically every time in my mail, calling it “while”). But I’ve thought about alternatives and renaming (possible replace it with just “if”? as in “for number in 0..&lt;10 if number% 2 == 0 { print(“\(number) is an even number&quot;) }” ). I’m not sure I can think of something that’s clearly much better than what we have now.<br></p><p>I am of the same opinion, if taking it out is somewhat of a blind ego trip from a small crowd looking at 3 lines in the grammar (this is a charicature, fortunately we are not there), then ... nothing to do about it (other than back to xamarin). If this is part of a larger calculated plan to do better flexibility, expressiveness, at a reasonable perf cost, then go for it. Chris Latner and team have demonstrated their planning capability with LLVM, I fully trust they are the right kind of enlighted-dictator to make Swift great.<br></p><p>&gt; <br>&gt; Karl<br>&gt; <br>&gt;&gt;&gt; On 10 Jun 2016, at 17:24, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 10, 2016, at 9:22 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 10, 2016, at 8:02 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 7:18 AM, Haravikk &lt;swift-evolution at haravikk.me&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; * The word &quot;where&quot; does not consistently imply `break` or `continue`. In current Swift, `where` implies `break` in the context of a `while` loop and `continue` in the context of a `for` loop. Some users intuitively guess the correct meaning in each context, while others guess the wrong meaning. Therefore, the only way to learn for sure what `where` means in any context is to read the rulebook. That, by definition, means that this is unintuitive.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This is an argument for renaming the where keyword on for loops to be more clear, or to somehow integrate continue/break to be more explicit about what the developer intends for it to do.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sure: I conclude that the keyword should be *either* removed *or* reformed; both outcomes could address the issue.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is my stance as well and I reserve the right to flit between both choices until we&#39;ve fully talked it through.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; One more data point. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In the standard library there are just under 950 uses of &quot;for in loops&quot;. There are 3 uses of &quot;for in while&quot; :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; private/StdlibUnittest/StdlibUnittest.swift.gyb:    for j in instances.indices where i != j {<br>&gt;&gt;&gt; public/core/Algorithm.swift:  for value in rest where value &lt; minValue {<br>&gt;&gt;&gt; public/core/Algorithm.swift:  for value in rest where value &gt;= maxValue {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- Erica<br>&gt;&gt; <br>&gt;&gt; Actually a slight correction to that. I forgot to add the space after &quot;in&quot; on the first search. It&#39;s just over 600 and 3. Among the 600 are a few false positives but not many.<br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160611/1f409040/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>June 11, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; Am 10.06.2016 um 17:22 schrieb Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 10, 2016, at 8:02 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Fri, Jun 10, 2016 at 7:18 AM, Haravikk &lt;swift-evolution at haravikk.me&gt; wrote:<br>&gt;&gt;&gt;&gt; * The word &quot;where&quot; does not consistently imply `break` or `continue`. In current Swift, `where` implies `break` in the context of a `while` loop and `continue` in the context of a `for` loop. Some users intuitively guess the correct meaning in each context, while others guess the wrong meaning. Therefore, the only way to learn for sure what `where` means in any context is to read the rulebook. That, by definition, means that this is unintuitive.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is an argument for renaming the where keyword on for loops to be more clear, or to somehow integrate continue/break to be more explicit about what the developer intends for it to do.<br>&gt;&gt; <br>&gt;&gt; Sure: I conclude that the keyword should be *either* removed *or* reformed; both outcomes could address the issue.<br>&gt; <br>&gt; This is my stance as well and I reserve the right to flit between both choices until we&#39;ve fully talked it through.<br>&gt; <br>&gt; One more data point. <br>&gt; <br>&gt; In the standard library there are just under 950 uses of &quot;for in loops&quot;. There are 3 uses of &quot;for in while&quot; :<br></p><p>How many of the 950 &quot;for in loops&quot; use a guard with continue? Only these can be compard with the &quot;for in where loops&quot;.<br></p><p>-Thorsten <br></p><p>&gt; <br>&gt; private/StdlibUnittest/StdlibUnittest.swift.gyb:    for j in instances.indices where i != j {<br>&gt; public/core/Algorithm.swift:  for value in rest where value &lt; minValue {<br>&gt; public/core/Algorithm.swift:  for value in rest where value &gt;= maxValue {<br>&gt; <br>&gt; -- Erica<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160611/91b2f19e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 11, 2016 at 02:00:00pm</p></header><div class="content"><p>On Sat, Jun 11, 2016 at 2:50 PM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br></p><p>&gt;<br>&gt;<br>&gt; Am 10.06.2016 um 17:22 schrieb Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt;:<br>&gt;<br>&gt;<br>&gt; On Jun 10, 2016, at 8:02 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Fri, Jun 10, 2016 at 7:18 AM, Haravikk &lt;swift-evolution at haravikk.me&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; * The word &quot;where&quot; does not consistently imply `break` or `continue`. In<br>&gt;&gt; current Swift, `where` implies `break` in the context of a `while` loop and<br>&gt;&gt; `continue` in the context of a `for` loop. Some users intuitively guess the<br>&gt;&gt; correct meaning in each context, while others guess the wrong meaning.<br>&gt;&gt; Therefore, the only way to learn for sure what `where` means in any context<br>&gt;&gt; is to read the rulebook. That, by definition, means that this is<br>&gt;&gt; unintuitive.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; This is an argument for renaming the where keyword on for loops to be<br>&gt;&gt; more clear, or to somehow integrate continue/break to be more explicit<br>&gt;&gt; about what the developer intends for it to do.<br>&gt;&gt;<br>&gt;<br>&gt; Sure: I conclude that the keyword should be *either* removed *or*<br>&gt; reformed; both outcomes could address the issue.<br>&gt;<br>&gt;<br>&gt; This is my stance as well and I reserve the right to flit between both<br>&gt; choices until we&#39;ve fully talked it through.<br>&gt;<br>&gt; One more data point.<br>&gt;<br>&gt; In the standard library there are just under 950 uses of &quot;for in loops&quot;.<br>&gt; There are 3 uses of &quot;for in while&quot; :<br>&gt;<br>&gt;<br>&gt; How many of the 950 &quot;for in loops&quot; use a guard with continue? Only these<br>&gt; can be compard with the &quot;for in where loops&quot;.<br>&gt;<br></p><p>That is a different argument, I think, from the one Erica is making. The<br>data you&#39;re asking about would answer the question, &quot;How often do stdlib<br>authors prefer `guard` over `where`?&quot; That is an interesting question,<br>certainly.<br></p><p>I think Erica&#39;s point is that what Vladimir earlier called the &quot;simple,<br>common&quot; case may be simple but isn&#39;t actually common. I did a quick GitHub<br>search earlier today (and the tools aren&#39;t there, afaik, for an accurate<br>regexp search), but what I noticed on a random, not-statistically-sound<br>sampling was that uses of `continue` and `break`, when they do occur inside<br>a for loop (which isn&#39;t always), actually tend to happen after some work<br>has been done at the top of the loop. These wouldn&#39;t be replaceable by a<br>`where` clause. Moreover, I noticed an appreciable share of `return` and<br>`fatalError()` calls from inside the loop, which surprised me; I had<br>assumed I&#39;d find mostly `break` or `continue`, but even when I did find<br>those it was as likely as not to be accompanied by logging. These again<br>preclude refactoring into `where`.<br></p><p><br>&gt;<br>&gt; -Thorsten<br>&gt;<br>&gt;<br>&gt; private/StdlibUnittest/StdlibUnittest.swift.gyb:    for j in<br>&gt; instances.indices where i != j {<br>&gt; public/core/Algorithm.swift:  for value in rest where value &lt; minValue {<br>&gt; public/core/Algorithm.swift:  for value in rest where value &gt;= maxValue {<br>&gt;<br>&gt; -- Erica<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160611/05bbf8cb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>June 11, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; Am 11.06.2016 um 21:57 schrieb Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;:<br>&gt; <br>&gt;&gt; On Sat, Jun 11, 2016 at 2:50 PM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; Am 10.06.2016 um 17:22 schrieb Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 10, 2016, at 8:02 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 7:18 AM, Haravikk &lt;swift-evolution at haravikk.me&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; * The word &quot;where&quot; does not consistently imply `break` or `continue`. In current Swift, `where` implies `break` in the context of a `while` loop and `continue` in the context of a `for` loop. Some users intuitively guess the correct meaning in each context, while others guess the wrong meaning. Therefore, the only way to learn for sure what `where` means in any context is to read the rulebook. That, by definition, means that this is unintuitive.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This is an argument for renaming the where keyword on for loops to be more clear, or to somehow integrate continue/break to be more explicit about what the developer intends for it to do.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sure: I conclude that the keyword should be *either* removed *or* reformed; both outcomes could address the issue.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is my stance as well and I reserve the right to flit between both choices until we&#39;ve fully talked it through.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; One more data point. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In the standard library there are just under 950 uses of &quot;for in loops&quot;. There are 3 uses of &quot;for in while&quot; :<br>&gt;&gt; <br>&gt;&gt; How many of the 950 &quot;for in loops&quot; use a guard with continue? Only these can be compard with the &quot;for in where loops&quot;.<br>&gt; <br>&gt; That is a different argument, I think, from the one Erica is making. The data you&#39;re asking about would answer the question, &quot;How often do stdlib authors prefer `guard` over `where`?&quot; That is an interesting question, certainly.<br></p><p>It is the relevant question to ask when deciding whether `where` should be better replaced by `guard`. And it should be qualified by asking whether the respective author did know about `where`. I wouldn&#39;t want a language to be designed by looking at usage examples of inexperienced users...<br></p><p>&gt; <br>&gt; I think Erica&#39;s point is that what Vladimir earlier called the &quot;simple, common&quot; case may be simple but isn&#39;t actually common. I did a quick GitHub search earlier today (and the tools aren&#39;t there, afaik, for an accurate regexp search), but what I noticed on a random, not-statistically-sound sampling was that uses of `continue` and `break`, when they do occur inside a for loop (which isn&#39;t always), actually tend to happen after some work has been done at the top of the loop. These wouldn&#39;t be replaceable by a `where` clause. Moreover, I noticed an appreciable share of `return` and `fatalError()` calls from inside the loop, which surprised me; I had assumed I&#39;d find mostly `break` or `continue`, but even when I did find those it was as likely as not to be accompanied by logging. These again preclude refactoring into `where`.<br></p><p>Logging hints at logic used for filtering out data errors. That&#39;s a good usage for `guard` as opposed to `where`. The latter is about logic, not about error handling. <br></p><p>-Thorsten <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160611/c6911753/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 11, 2016 at 04:00:00pm</p></header><div class="content"><p>On Sat, Jun 11, 2016 at 3:31 PM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br></p><p>&gt;<br>&gt;<br>&gt; Am 11.06.2016 um 21:57 schrieb Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;:<br>&gt;<br>&gt; On Sat, Jun 11, 2016 at 2:50 PM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Am 10.06.2016 um 17:22 schrieb Erica Sadun via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt;:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Jun 10, 2016, at 8:02 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Fri, Jun 10, 2016 at 7:18 AM, Haravikk &lt;swift-evolution at haravikk.me&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; * The word &quot;where&quot; does not consistently imply `break` or `continue`. In<br>&gt;&gt;&gt; current Swift, `where` implies `break` in the context of a `while` loop and<br>&gt;&gt;&gt; `continue` in the context of a `for` loop. Some users intuitively guess the<br>&gt;&gt;&gt; correct meaning in each context, while others guess the wrong meaning.<br>&gt;&gt;&gt; Therefore, the only way to learn for sure what `where` means in any context<br>&gt;&gt;&gt; is to read the rulebook. That, by definition, means that this is<br>&gt;&gt;&gt; unintuitive.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This is an argument for renaming the where keyword on for loops to be<br>&gt;&gt;&gt; more clear, or to somehow integrate continue/break to be more explicit<br>&gt;&gt;&gt; about what the developer intends for it to do.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Sure: I conclude that the keyword should be *either* removed *or*<br>&gt;&gt; reformed; both outcomes could address the issue.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; This is my stance as well and I reserve the right to flit between both<br>&gt;&gt; choices until we&#39;ve fully talked it through.<br>&gt;&gt;<br>&gt;&gt; One more data point.<br>&gt;&gt;<br>&gt;&gt; In the standard library there are just under 950 uses of &quot;for in loops&quot;.<br>&gt;&gt; There are 3 uses of &quot;for in while&quot; :<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; How many of the 950 &quot;for in loops&quot; use a guard with continue? Only these<br>&gt;&gt; can be compard with the &quot;for in where loops&quot;.<br>&gt;&gt;<br>&gt;<br>&gt; That is a different argument, I think, from the one Erica is making. The<br>&gt; data you&#39;re asking about would answer the question, &quot;How often do stdlib<br>&gt; authors prefer `guard` over `where`?&quot; That is an interesting question,<br>&gt; certainly.<br>&gt;<br>&gt;<br>&gt; It is the relevant question to ask when deciding whether `where` should be<br>&gt; better replaced by `guard`. And it should be qualified by asking whether<br>&gt; the respective author did know about `where`. I wouldn&#39;t want a language to<br>&gt; be designed by looking at usage examples of inexperienced users...<br>&gt;<br>&gt;<br>Here, I disagree with you vehemently. We should absolutely take into<br>consideration how inexperienced users work with the language. A language<br>that ignores the struggles and pain points of those who are less<br>experienced is one that will quickly find itself lacking in users.<br></p><p>&gt;<br>&gt; I think Erica&#39;s point is that what Vladimir earlier called the &quot;simple,<br>&gt; common&quot; case may be simple but isn&#39;t actually common. I did a quick GitHub<br>&gt; search earlier today (and the tools aren&#39;t there, afaik, for an accurate<br>&gt; regexp search), but what I noticed on a random, not-statistically-sound<br>&gt; sampling was that uses of `continue` and `break`, when they do occur inside<br>&gt; a for loop (which isn&#39;t always), actually tend to happen after some work<br>&gt; has been done at the top of the loop. These wouldn&#39;t be replaceable by a<br>&gt; `where` clause. Moreover, I noticed an appreciable share of `return` and<br>&gt; `fatalError()` calls from inside the loop, which surprised me; I had<br>&gt; assumed I&#39;d find mostly `break` or `continue`, but even when I did find<br>&gt; those it was as likely as not to be accompanied by logging. These again<br>&gt; preclude refactoring into `where`.<br>&gt;<br>&gt;<br>&gt; Logging hints at logic used for filtering out data errors. That&#39;s a good<br>&gt; usage for `guard` as opposed to `where`. The latter is about logic, not<br>&gt; about error handling.<br>&gt;<br>&gt; -Thorsten<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160611/97e3476e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>June 12, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; Am 11.06.2016 um 23:52 schrieb Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;:<br>&gt; <br>&gt;&gt; On Sat, Jun 11, 2016 at 3:31 PM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; Am 11.06.2016 um 21:57 schrieb Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Sat, Jun 11, 2016 at 2:50 PM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Am 10.06.2016 um 17:22 schrieb Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jun 10, 2016, at 8:02 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 7:18 AM, Haravikk &lt;swift-evolution at haravikk.me&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; * The word &quot;where&quot; does not consistently imply `break` or `continue`. In current Swift, `where` implies `break` in the context of a `while` loop and `continue` in the context of a `for` loop. Some users intuitively guess the correct meaning in each context, while others guess the wrong meaning. Therefore, the only way to learn for sure what `where` means in any context is to read the rulebook. That, by definition, means that this is unintuitive.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; This is an argument for renaming the where keyword on for loops to be more clear, or to somehow integrate continue/break to be more explicit about what the developer intends for it to do.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Sure: I conclude that the keyword should be *either* removed *or* reformed; both outcomes could address the issue.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This is my stance as well and I reserve the right to flit between both choices until we&#39;ve fully talked it through.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; One more data point. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; In the standard library there are just under 950 uses of &quot;for in loops&quot;. There are 3 uses of &quot;for in while&quot; :<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; How many of the 950 &quot;for in loops&quot; use a guard with continue? Only these can be compard with the &quot;for in where loops&quot;.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That is a different argument, I think, from the one Erica is making. The data you&#39;re asking about would answer the question, &quot;How often do stdlib authors prefer `guard` over `where`?&quot; That is an interesting question, certainly.<br>&gt;&gt; <br>&gt;&gt; It is the relevant question to ask when deciding whether `where` should be better replaced by `guard`. And it should be qualified by asking whether the respective author did know about `where`. I wouldn&#39;t want a language to be designed by looking at usage examples of inexperienced users...<br>&gt; <br>&gt; Here, I disagree with you vehemently. We should absolutely take into consideration how inexperienced users work with the language. A language that ignores the struggles and pain points of those who are less experienced is one that will quickly find itself lacking in users.<br></p><p>You don&#39;t want to tell me in earnest that discovering and understanding `where` in for loops are stumbling blocks for beginners in a language containing generics, associated types, existentials, value vs. reference types etc.?<br></p><p>-Thorsten <br></p><p>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think Erica&#39;s point is that what Vladimir earlier called the &quot;simple, common&quot; case may be simple but isn&#39;t actually common. I did a quick GitHub search earlier today (and the tools aren&#39;t there, afaik, for an accurate regexp search), but what I noticed on a random, not-statistically-sound sampling was that uses of `continue` and `break`, when they do occur inside a for loop (which isn&#39;t always), actually tend to happen after some work has been done at the top of the loop. These wouldn&#39;t be replaceable by a `where` clause. Moreover, I noticed an appreciable share of `return` and `fatalError()` calls from inside the loop, which surprised me; I had assumed I&#39;d find mostly `break` or `continue`, but even when I did find those it was as likely as not to be accompanied by logging. These again preclude refactoring into `where`.<br>&gt;&gt; <br>&gt;&gt; Logging hints at logic used for filtering out data errors. That&#39;s a good usage for `guard` as opposed to `where`. The latter is about logic, not about error handling. <br>&gt;&gt; <br>&gt;&gt; -Thorsten <br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160612/6f7022ca/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 11, 2016 at 05:00:00pm</p></header><div class="content"><p>On Sat, Jun 11, 2016 at 5:07 PM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br></p><p>&gt;<br>&gt;<br>&gt; Am 11.06.2016 um 23:52 schrieb Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;:<br>&gt;<br>&gt; On Sat, Jun 11, 2016 at 3:31 PM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Am 11.06.2016 um 21:57 schrieb Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;:<br>&gt;&gt;<br>&gt;&gt; On Sat, Jun 11, 2016 at 2:50 PM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Am 10.06.2016 um 17:22 schrieb Erica Sadun via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Jun 10, 2016, at 8:02 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Fri, Jun 10, 2016 at 7:18 AM, Haravikk &lt;swift-evolution at haravikk.me&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; * The word &quot;where&quot; does not consistently imply `break` or `continue`.<br>&gt;&gt;&gt;&gt; In current Swift, `where` implies `break` in the context of a `while` loop<br>&gt;&gt;&gt;&gt; and `continue` in the context of a `for` loop. Some users intuitively guess<br>&gt;&gt;&gt;&gt; the correct meaning in each context, while others guess the wrong meaning.<br>&gt;&gt;&gt;&gt; Therefore, the only way to learn for sure what `where` means in any context<br>&gt;&gt;&gt;&gt; is to read the rulebook. That, by definition, means that this is<br>&gt;&gt;&gt;&gt; unintuitive.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; This is an argument for renaming the where keyword on for loops to be<br>&gt;&gt;&gt;&gt; more clear, or to somehow integrate continue/break to be more explicit<br>&gt;&gt;&gt;&gt; about what the developer intends for it to do.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Sure: I conclude that the keyword should be *either* removed *or*<br>&gt;&gt;&gt; reformed; both outcomes could address the issue.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This is my stance as well and I reserve the right to flit between both<br>&gt;&gt;&gt; choices until we&#39;ve fully talked it through.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; One more data point.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; In the standard library there are just under 950 uses of &quot;for in loops&quot;.<br>&gt;&gt;&gt; There are 3 uses of &quot;for in while&quot; :<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; How many of the 950 &quot;for in loops&quot; use a guard with continue? Only these<br>&gt;&gt;&gt; can be compard with the &quot;for in where loops&quot;.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; That is a different argument, I think, from the one Erica is making. The<br>&gt;&gt; data you&#39;re asking about would answer the question, &quot;How often do stdlib<br>&gt;&gt; authors prefer `guard` over `where`?&quot; That is an interesting question,<br>&gt;&gt; certainly.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; It is the relevant question to ask when deciding whether `where` should<br>&gt;&gt; be better replaced by `guard`. And it should be qualified by asking whether<br>&gt;&gt; the respective author did know about `where`. I wouldn&#39;t want a language to<br>&gt;&gt; be designed by looking at usage examples of inexperienced users...<br>&gt;&gt;<br>&gt;&gt;<br>&gt; Here, I disagree with you vehemently. We should absolutely take into<br>&gt; consideration how inexperienced users work with the language. A language<br>&gt; that ignores the struggles and pain points of those who are less<br>&gt; experienced is one that will quickly find itself lacking in users.<br>&gt;<br>&gt;<br>&gt; You don&#39;t want to tell me in earnest that discovering and understanding<br>&gt; `where` in for loops are stumbling blocks for beginners in a language<br>&gt; containing generics, associated types, existentials, value vs. reference<br>&gt; types etc.?<br>&gt;<br></p><p>I do. I challenge you to find an introductory text that teaches generics,<br>associated types, existentials, or even value vs. reference types before it<br>introduces `for` loops or `if` (and `guard`).<br></p><p><br>&gt;<br>&gt; -Thorsten<br>&gt;<br>&gt;<br>&gt;&gt; I think Erica&#39;s point is that what Vladimir earlier called the &quot;simple,<br>&gt;&gt; common&quot; case may be simple but isn&#39;t actually common. I did a quick GitHub<br>&gt;&gt; search earlier today (and the tools aren&#39;t there, afaik, for an accurate<br>&gt;&gt; regexp search), but what I noticed on a random, not-statistically-sound<br>&gt;&gt; sampling was that uses of `continue` and `break`, when they do occur inside<br>&gt;&gt; a for loop (which isn&#39;t always), actually tend to happen after some work<br>&gt;&gt; has been done at the top of the loop. These wouldn&#39;t be replaceable by a<br>&gt;&gt; `where` clause. Moreover, I noticed an appreciable share of `return` and<br>&gt;&gt; `fatalError()` calls from inside the loop, which surprised me; I had<br>&gt;&gt; assumed I&#39;d find mostly `break` or `continue`, but even when I did find<br>&gt;&gt; those it was as likely as not to be accompanied by logging. These again<br>&gt;&gt; preclude refactoring into `where`.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Logging hints at logic used for filtering out data errors. That&#39;s a good<br>&gt;&gt; usage for `guard` as opposed to `where`. The latter is about logic, not<br>&gt;&gt; about error handling.<br>&gt;&gt;<br>&gt;&gt; -Thorsten<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160611/a5e52161/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>June 12, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; Am 12.06.2016 um 00:16 schrieb Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;:<br>&gt; <br>&gt; On Sat, Jun 11, 2016 at 5:07 PM, Thorsten Seitz &lt;tseitz42 at icloud.com &lt;mailto:tseitz42 at icloud.com&gt;&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Am 11.06.2016 um 23:52 schrieb Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt;:<br>&gt; <br>&gt;&gt; On Sat, Jun 11, 2016 at 3:31 PM, Thorsten Seitz &lt;tseitz42 at icloud.com &lt;mailto:tseitz42 at icloud.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Am 11.06.2016 um 21:57 schrieb Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt;:<br>&gt;&gt; <br>&gt;&gt;&gt; On Sat, Jun 11, 2016 at 2:50 PM, Thorsten Seitz &lt;tseitz42 at icloud.com &lt;mailto:tseitz42 at icloud.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Am 10.06.2016 um 17:22 schrieb Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 10, 2016, at 8:02 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 7:18 AM, Haravikk &lt;swift-evolution at haravikk.me &lt;mailto:swift-evolution at haravikk.me&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; * The word &quot;where&quot; does not consistently imply `break` or `continue`. In current Swift, `where` implies `break` in the context of a `while` loop and `continue` in the context of a `for` loop. Some users intuitively guess the correct meaning in each context, while others guess the wrong meaning. Therefore, the only way to learn for sure what `where` means in any context is to read the rulebook. That, by definition, means that this is unintuitive.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This is an argument for renaming the where keyword on for loops to be more clear, or to somehow integrate continue/break to be more explicit about what the developer intends for it to do.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Sure: I conclude that the keyword should be *either* removed *or* reformed; both outcomes could address the issue.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This is my stance as well and I reserve the right to flit between both choices until we&#39;ve fully talked it through.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; One more data point. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; In the standard library there are just under 950 uses of &quot;for in loops&quot;. There are 3 uses of &quot;for in while&quot; :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How many of the 950 &quot;for in loops&quot; use a guard with continue? Only these can be compard with the &quot;for in where loops&quot;.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That is a different argument, I think, from the one Erica is making. The data you&#39;re asking about would answer the question, &quot;How often do stdlib authors prefer `guard` over `where`?&quot; That is an interesting question, certainly.<br>&gt;&gt; <br>&gt;&gt; It is the relevant question to ask when deciding whether `where` should be better replaced by `guard`. And it should be qualified by asking whether the respective author did know about `where`. I wouldn&#39;t want a language to be designed by looking at usage examples of inexperienced users...<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Here, I disagree with you vehemently. We should absolutely take into consideration how inexperienced users work with the language. A language that ignores the struggles and pain points of those who are less experienced is one that will quickly find itself lacking in users.<br>&gt; <br>&gt; You don&#39;t want to tell me in earnest that discovering and understanding `where` in for loops are stumbling blocks for beginners in a language containing generics, associated types, existentials, value vs. reference types etc.?<br>&gt; <br>&gt; I do. I challenge you to find an introductory text that teaches generics, associated types, existentials, or even value vs. reference types before it introduces `for` loops or `if` (and `guard`).<br></p><p>My point was that someone who endeavors to learn a language like Swift which does include all these things, will not falter when he stumbles upon `where` in a `for` loop. He might be surprised for a moment (when coming from other languages but probably not when Swift is his first language, nor when he already knows languages like C# or SQL) but not more.<br></p><p>-Thorsten<br></p><p><br>&gt;  <br>&gt; <br>&gt; -Thorsten <br>&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think Erica&#39;s point is that what Vladimir earlier called the &quot;simple, common&quot; case may be simple but isn&#39;t actually common. I did a quick GitHub search earlier today (and the tools aren&#39;t there, afaik, for an accurate regexp search), but what I noticed on a random, not-statistically-sound sampling was that uses of `continue` and `break`, when they do occur inside a for loop (which isn&#39;t always), actually tend to happen after some work has been done at the top of the loop. These wouldn&#39;t be replaceable by a `where` clause. Moreover, I noticed an appreciable share of `return` and `fatalError()` calls from inside the loop, which surprised me; I had assumed I&#39;d find mostly `break` or `continue`, but even when I did find those it was as likely as not to be accompanied by logging. These again preclude refactoring into `where`.<br>&gt;&gt; <br>&gt;&gt; Logging hints at logic used for filtering out data errors. That&#39;s a good usage for `guard` as opposed to `where`. The latter is about logic, not about error handling. <br>&gt;&gt; <br>&gt;&gt; -Thorsten <br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160612/31d73858/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 12, 2016 at 07:00:00pm</p></header><div class="content"><p>On Sun, Jun 12, 2016 at 8:28 AM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br></p><p>&gt;<br>&gt; Am 12.06.2016 um 00:16 schrieb Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;:<br>&gt;<br>&gt; On Sat, Jun 11, 2016 at 5:07 PM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Am 11.06.2016 um 23:52 schrieb Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;:<br>&gt;&gt;<br>&gt;&gt; On Sat, Jun 11, 2016 at 3:31 PM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Am 11.06.2016 um 21:57 schrieb Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Sat, Jun 11, 2016 at 2:50 PM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Am 10.06.2016 um 17:22 schrieb Erica Sadun via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Jun 10, 2016, at 8:02 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 7:18 AM, Haravikk &lt;swift-evolution at haravikk.me&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; * The word &quot;where&quot; does not consistently imply `break` or `continue`.<br>&gt;&gt;&gt;&gt;&gt; In current Swift, `where` implies `break` in the context of a `while` loop<br>&gt;&gt;&gt;&gt;&gt; and `continue` in the context of a `for` loop. Some users intuitively guess<br>&gt;&gt;&gt;&gt;&gt; the correct meaning in each context, while others guess the wrong meaning.<br>&gt;&gt;&gt;&gt;&gt; Therefore, the only way to learn for sure what `where` means in any context<br>&gt;&gt;&gt;&gt;&gt; is to read the rulebook. That, by definition, means that this is<br>&gt;&gt;&gt;&gt;&gt; unintuitive.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; This is an argument for renaming the where keyword on for loops to be<br>&gt;&gt;&gt;&gt;&gt; more clear, or to somehow integrate continue/break to be more explicit<br>&gt;&gt;&gt;&gt;&gt; about what the developer intends for it to do.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Sure: I conclude that the keyword should be *either* removed *or*<br>&gt;&gt;&gt;&gt; reformed; both outcomes could address the issue.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; This is my stance as well and I reserve the right to flit between both<br>&gt;&gt;&gt;&gt; choices until we&#39;ve fully talked it through.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; One more data point.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; In the standard library there are just under 950 uses of &quot;for in<br>&gt;&gt;&gt;&gt; loops&quot;. There are 3 uses of &quot;for in while&quot; :<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; How many of the 950 &quot;for in loops&quot; use a guard with continue? Only<br>&gt;&gt;&gt;&gt; these can be compard with the &quot;for in where loops&quot;.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; That is a different argument, I think, from the one Erica is making. The<br>&gt;&gt;&gt; data you&#39;re asking about would answer the question, &quot;How often do stdlib<br>&gt;&gt;&gt; authors prefer `guard` over `where`?&quot; That is an interesting question,<br>&gt;&gt;&gt; certainly.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It is the relevant question to ask when deciding whether `where` should<br>&gt;&gt;&gt; be better replaced by `guard`. And it should be qualified by asking whether<br>&gt;&gt;&gt; the respective author did know about `where`. I wouldn&#39;t want a language to<br>&gt;&gt;&gt; be designed by looking at usage examples of inexperienced users...<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt; Here, I disagree with you vehemently. We should absolutely take into<br>&gt;&gt; consideration how inexperienced users work with the language. A language<br>&gt;&gt; that ignores the struggles and pain points of those who are less<br>&gt;&gt; experienced is one that will quickly find itself lacking in users.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; You don&#39;t want to tell me in earnest that discovering and understanding<br>&gt;&gt; `where` in for loops are stumbling blocks for beginners in a language<br>&gt;&gt; containing generics, associated types, existentials, value vs. reference<br>&gt;&gt; types etc.?<br>&gt;&gt;<br>&gt;<br>&gt; I do. I challenge you to find an introductory text that teaches generics,<br>&gt; associated types, existentials, or even value vs. reference types before it<br>&gt; introduces `for` loops or `if` (and `guard`).<br>&gt;<br>&gt;<br>&gt; My point was that someone who endeavors to learn a language like Swift<br>&gt; which does include all these things, will not falter when he stumbles upon<br>&gt; `where` in a `for` loop.<br>&gt;<br></p><p>I&#39;m not sure how you can come to this conclusion that a new user *will not*<br>falter over this concept or that simply because a language includes more<br>difficult concepts. I have seen bright students struggle with `i = i + 1`<br>when learning to code in languages with advanced concepts. (See if you can<br>guess what is confusing about `i = i + 1`.) Know that if a user cannot<br>master loops, then he or she cannot write very much of consequence in a<br>language at all. But a user who does not understand generics, associated<br>types, existentials, or value vs. reference types can still very well find<br>some good use for Swift in the meantime.<br></p><p>He might be surprised for a moment (when coming from other languages but<br>&gt; probably not when Swift is his first language, nor when he already knows<br>&gt; languages like C# or SQL) but not more.<br>&gt;<br>&gt; -Thorsten<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; -Thorsten<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; I think Erica&#39;s point is that what Vladimir earlier called the &quot;simple,<br>&gt;&gt;&gt; common&quot; case may be simple but isn&#39;t actually common. I did a quick GitHub<br>&gt;&gt;&gt; search earlier today (and the tools aren&#39;t there, afaik, for an accurate<br>&gt;&gt;&gt; regexp search), but what I noticed on a random, not-statistically-sound<br>&gt;&gt;&gt; sampling was that uses of `continue` and `break`, when they do occur inside<br>&gt;&gt;&gt; a for loop (which isn&#39;t always), actually tend to happen after some work<br>&gt;&gt;&gt; has been done at the top of the loop. These wouldn&#39;t be replaceable by a<br>&gt;&gt;&gt; `where` clause. Moreover, I noticed an appreciable share of `return` and<br>&gt;&gt;&gt; `fatalError()` calls from inside the loop, which surprised me; I had<br>&gt;&gt;&gt; assumed I&#39;d find mostly `break` or `continue`, but even when I did find<br>&gt;&gt;&gt; those it was as likely as not to be accompanied by logging. These again<br>&gt;&gt;&gt; preclude refactoring into `where`.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Logging hints at logic used for filtering out data errors. That&#39;s a good<br>&gt;&gt;&gt; usage for `guard` as opposed to `where`. The latter is about logic, not<br>&gt;&gt;&gt; about error handling.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; -Thorsten<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160612/cb3151fa/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/07fd59204e51d141632898356a6c1d00?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Jo Albright</string> &lt;me at jo2.co&gt;<p>June 14, 2016 at 10:00:00pm</p></header><div class="content"><p>This is probably going to get lost in this massive chain. But I am going to try to throw out a solution that I am not currently finding in this conversation.<br></p><p>There is a huge battle between removing and keeping keywords based on understanding. In my opinion keywords have a tendency to create more confusion than any other part of the language. We have a great tool in place to help teach developers what API methods and variables are and how they are to be used. Using “Quick Help” you can easily learn more about that declaration that didn’t make sense. <br></p><p>Currently we have a lot of keywords that could do different things… for example “in” is used in for loops to and also used in closure syntax. This can create confusion easily and at some point start a proposal such as this one. Instead of removing confusing pieces of a language, what about teaching others what the keywords do and how they should be used. If Quick Help was built to inform of what the keyword was doing in its current context, the developer could easily make sense of what is going on and choose to correctly use the syntax the way it is supposed to be used. You could even build in suggestions for other keywords that may have relevance. <br></p><p>Another example would be “return”. When teaching I noticed a lot of new developers didn’t understand that no lines of code would run after it, but then would get confused that you had to pass values on the same line to return a value. Having Quick Help to not only explain how return works but also tell you what Type it is expecting (including Void) would be very helpful in learning.<br></p><p>Whether or not “where” gets removed from for loops. I would really love the Apple team to think about extending Quick Help to work with other parts of syntax like keywords.<br></p><p>Imagine a new user trying to figure out what “import”, “guard”, “defer”, “lazy”, etc mean. They have to google or look through docs… Quick Help could instantly give them more information without leaving their code.<br></p><p>Thanks,<br>Jo<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 15, 2016 at 03:00:00am</p></header><div class="content"><p>This is a great point, Jo. I&#39;d love to see a conversation about this,<br>actually, and starting a new thread would probably be the best way to get<br>the widest attention :)<br>On Tue, Jun 14, 2016 at 21:43 Jo Albright &lt;me at jo2.co&gt; wrote:<br></p><p>&gt; This is probably going to get lost in this massive chain. But I am going<br>&gt; to try to throw out a solution that I am not currently finding in this<br>&gt; conversation.<br>&gt;<br>&gt; There is a huge battle between removing and keeping keywords based on<br>&gt; understanding. In my opinion keywords have a tendency to create more<br>&gt; confusion than any other part of the language. We have a great tool in<br>&gt; place to help teach developers what API methods and variables are and how<br>&gt; they are to be used. Using “Quick Help” you can easily learn more about<br>&gt; that declaration that didn’t make sense.<br>&gt;<br>&gt; Currently we have a lot of keywords that could do different things… for<br>&gt; example “in” is used in for loops to and also used in closure syntax. This<br>&gt; can create confusion easily and at some point start a proposal such as this<br>&gt; one. Instead of removing confusing pieces of a language, what about<br>&gt; teaching others what the keywords do and how they should be used. If Quick<br>&gt; Help was built to inform of what the keyword was doing in its current<br>&gt; context, the developer could easily make sense of what is going on and<br>&gt; choose to correctly use the syntax the way it is supposed to be used. You<br>&gt; could even build in suggestions for other keywords that may have relevance.<br>&gt;<br>&gt; Another example would be “return”. When teaching I noticed a lot of new<br>&gt; developers didn’t understand that no lines of code would run after it, but<br>&gt; then would get confused that you had to pass values on the same line to<br>&gt; return a value. Having Quick Help to not only explain how return works but<br>&gt; also tell you what Type it is expecting (including Void) would be very<br>&gt; helpful in learning.<br>&gt;<br>&gt; Whether or not “where” gets removed from for loops. I would really love<br>&gt; the Apple team to think about extending Quick Help to work with other parts<br>&gt; of syntax like keywords.<br>&gt;<br>&gt; Imagine a new user trying to figure out what “import”, “guard”, “defer”,<br>&gt; “lazy”, etc mean. They have to google or look through docs… Quick Help<br>&gt; could instantly give them more information without leaving their code.<br>&gt;<br>&gt; Thanks,<br>&gt; Jo<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/749d334c/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>June 15, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On 15 Jun 2016, at 03:43, Jo Albright &lt;me at jo2.co&gt; wrote:<br>&gt; <br>&gt; This is probably going to get lost in this massive chain. But I am going to try to throw out a solution that I am not currently finding in this conversation.<br>&gt; <br>&gt; There is a huge battle between removing and keeping keywords based on understanding. In my opinion keywords have a tendency to create more confusion than any other part of the language. We have a great tool in place to help teach developers what API methods and variables are and how they are to be used. Using “Quick Help” you can easily learn more about that declaration that didn’t make sense. <br>&gt; <br>&gt; Currently we have a lot of keywords that could do different things… for example “in” is used in for loops to and also used in closure syntax. This can create confusion easily and at some point start a proposal such as this one. Instead of removing confusing pieces of a language, what about teaching others what the keywords do and how they should be used. If Quick Help was built to inform of what the keyword was doing in its current context, the developer could easily make sense of what is going on and choose to correctly use the syntax the way it is supposed to be used. You could even build in suggestions for other keywords that may have relevance. <br>&gt; <br>&gt; Another example would be “return”. When teaching I noticed a lot of new developers didn’t understand that no lines of code would run after it, but then would get confused that you had to pass values on the same line to return a value. Having Quick Help to not only explain how return works but also tell you what Type it is expecting (including Void) would be very helpful in learning.<br>&gt; <br>&gt; Whether or not “where” gets removed from for loops. I would really love the Apple team to think about extending Quick Help to work with other parts of syntax like keywords.<br>&gt; <br>&gt; Imagine a new user trying to figure out what “import”, “guard”, “defer”, “lazy”, etc mean. They have to google or look through docs… Quick Help could instantly give them more information without leaving their code.<br>&gt; <br>&gt; Thanks,<br>&gt; Jo<br></p><p>This is a really fantastic idea! Actually a big issue with many keywords is that they’re often such common words that they’re very hard to search for without being given more context (which is in itself a skill, I’m still caught out searching for things that others find with very similar yet subtly different search terms).<br></p><p>I wonder where the correct place to suggest this would be, as it will require some kind of documenting mechanism for keywords, as well as the means to expose it inside Xcode, so possibly an Xcode feature? Not sure, but I think it’s absolutely worth exploring! I doubt anyone will mind if it gets a thread here on swift-evolution in the mean, as like you say it runs the risk of being buried here in this thread.<br></p><p><br>On which note I really do think the discussion on actually removing where has run its course as it’s just going back and forth with little to no change in arguments. I think it’s premature to remove where from for loops until after the removal of where from conditionals has actually gone through and been in the wild some time, as it may well affect how confusing (or not) it is on for loops, plus it’d be nice to spend some time exploring other options like Jo’s, and Brent/Erica’s moving of the keyword, changes and/or additions to the keywords and so-on, which have been comparatively forgotten.<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4ab486d7597af4cfe0be33a762150848?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Dany St-Amant</string> &lt;dsa.mls at icloud.com&gt;<p>June 10, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; Le 10 juin 2016 à 02:25, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; a écrit :<br>&gt; <br>&gt; * The word &quot;where&quot; does not consistently imply `break` or `continue`. In current Swift, `where` implies `break` in the context of a `while` loop and `continue` in the context of a `for` loop. Some users intuitively guess the correct meaning in each context, while others guess the wrong meaning. Therefore, the only way to learn for sure what `where` means in any context is to read the rulebook. That, by definition, means that this is unintuitive.<br></p><p>An example here would have help... I had trouble visualizing the &#39;where&#39; with &#39;while&#39;. A quick example I was able to conjure is:<br></p><p>var array =  [9,8,7,6,5,4,3,2,1]<br>while let x = are.popLast() where x &lt; 5 { print(x) }<br>print(array)<br></p><p>What? &#39;array&#39; is not empty at the end. I admit, I was surprised by the result at first. The confusion here is not that &#39;where&#39; in &#39;for&#39; behave like &#39;continue&#39; and &#39;where&#39; in &#39;while&#39; act like a &#39;break&#39;, as the later doesn&#39;t conceptually exist. The later concept is using &#39;where&#39; as a conditional binding in a &#39;while&#39; causes a failure of the bind and thus a &#39;break&#39; out of the loop. With the acceptance of the revised SE-0099, the &#39;while&#39; can no longer appear to be using &#39;where&#39;, thus removing this confusion.<br></p><p>Dany<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 10, 2016 at 11:00:00am</p></header><div class="content"><p>On Fri, Jun 10, 2016 at 7:45 AM, Dany St-Amant &lt;dsa.mls at icloud.com&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; Le 10 juin 2016 à 02:25, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; a écrit :<br>&gt; &gt;<br>&gt; &gt; * The word &quot;where&quot; does not consistently imply `break` or `continue`. In<br>&gt; current Swift, `where` implies `break` in the context of a `while` loop and<br>&gt; `continue` in the context of a `for` loop. Some users intuitively guess the<br>&gt; correct meaning in each context, while others guess the wrong meaning.<br>&gt; Therefore, the only way to learn for sure what `where` means in any context<br>&gt; is to read the rulebook. That, by definition, means that this is<br>&gt; unintuitive.<br>&gt;<br>&gt; An example here would have help... I had trouble visualizing the &#39;where&#39;<br>&gt; with &#39;while&#39;. A quick example I was able to conjure is:<br>&gt;<br>&gt; var array =  [9,8,7,6,5,4,3,2,1]<br>&gt; while let x = are.popLast() where x &lt; 5 { print(x) }<br>&gt; print(array)<br>&gt;<br>&gt; What? &#39;array&#39; is not empty at the end. I admit, I was surprised by the<br>&gt; result at first. The confusion here is not that &#39;where&#39; in &#39;for&#39; behave<br>&gt; like &#39;continue&#39; and &#39;where&#39; in &#39;while&#39; act like a &#39;break&#39;, as the later<br>&gt; doesn&#39;t conceptually exist. The later concept is using &#39;where&#39; as a<br>&gt; conditional binding in a &#39;while&#39; causes a failure of the bind and thus a<br>&gt; &#39;break&#39; out of the loop. With the acceptance of the revised SE-0099, the<br>&gt; &#39;while&#39; can no longer appear to be using &#39;where&#39;, thus removing this<br>&gt; confusion.<br>&gt;<br></p><p>I&#39;m relieved that it&#39;s been addressed. There was no small amount of<br>contention that `where` in `while` loops was stylistically delightful and<br>ought to remain, but I think you see why at least on first sight it is<br>rather alarming.<br></p><p><br>&gt;<br>&gt; Dany<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/1c4f9be0/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>June 11, 2016 at 09:00:00pm</p></header><div class="content"><p>+1<br></p><p>-Thorsten <br></p><p>&gt; Am 10.06.2016 um 07:48 schrieb Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Jun 10, 2016, at 1:08 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Thu, Jun 9, 2016 at 9:45 PM, Dany St-Amant &lt;dsa.mls at icloud.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Le 9 juin 2016 à 14:55, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; There have been, in previous threads, several examples given where users of Swift have found the behavior of `where` to be misleading and confusing.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sorry Xiaodi, but beside you (on multiple instances), and recently Erica, I have do not recall hearing that many voices saying that &#39;where&#39; is confusing.<br>&gt;&gt; <br>&gt;&gt; Shawn Erickson wrote this to the list just yesterday:<br>&gt;&gt; <br>&gt;&gt; &quot;I support your position on the use of where and while/when being confusing in the loop statement. I (and I know others) have for example used where in a loop statement mistakenly thinking it would terminate the loop early but of course learned that it basically filters what causes the loop body to be executed. After the fact that made sense to me but it didn&#39;t click at first.&quot;<br>&gt; <br>&gt; Couldn&#39;t we find examples of anyone being confused at any syntax? Especially with an unfamiliar construct in a new language. <br>&gt; <br>&gt; If people find the new proposed syntax confusing, do we pull that too? At what point do we stop?<br>&gt; <br>&gt;&gt;  <br>&gt;&gt;&gt; Yes, there&#39;s was maybe even less voices stating that it is not confusing, but which group is more vocal?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Maybe I have been recently corrupt by Solid SQL queries:<br>&gt;&gt;&gt; select * from PEOPLE_TABLE where AGE_FIELD = 100<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Or by my (likely) broken English:<br>&gt;&gt;&gt; The places where I had the most fun<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But, to me, where can only suggest some filtering (thus tag to a for ..  in .., continue if not matching). <br>&gt;&gt; <br>&gt;&gt; I&#39;m glad that you find it very clear. I do as well. That does not mean it is clear to everyone.<br>&gt; <br>&gt; I still have yet to see widespread confusion of this. A few people learning swift here or there, but once they learn the syntax...do they still find it confusing?<br>&gt; <br>&gt; I expect some concrete data on stuff like this...especially with proposed syntax changes. <br>&gt; <br>&gt; Without concrete examples, what would stop one from coming in here and waving their hands around to push *what they like* through?<br>&gt; <br>&gt;&gt;&gt; I know there&#39;s a linguist on the list, maybe he could comment on whether or not using &#39;where&#39; as a filter is proper or an abomination.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I do not think that because something is confusing to some, or at first, that it warrant removal from the language.<br>&gt;&gt; <br>&gt;&gt; It is a very bad sign if something is confusing at first, especially to a significant proportion of users. It&#39;s true by definition that once you have mastered something you are no longer confused by it.<br>&gt; <br>&gt; Again, where is this significant proportion of users? I don&#39;t mean to hound you on this, but I am genuinely curious where this is all coming from. <br>&gt; <br>&gt; The burden of evidence is on the proposers of these ideas. <br>&gt; <br>&gt;&gt; As has been stated on this list, education is a valid and important consideration for Swift. If something is confusing rather than difficult (and the *concept* of filtering a list is not at all a difficult concept), and if the same underlying concept can already be invoked in alternative and equivalent ways that are not confusing, then it&#39;s a no-brainer that the confusing thing is harmful to the language and should be removed on that basis alone.<br>&gt; <br>&gt; What is clear to one person may be confusing to another. There is no perfect syntax that will not make it confusing for some users. <br>&gt; <br>&gt; ----<br>&gt; <br>&gt; I really think it is important to come armed with more information with these proposals. It&#39;s easy to say a significant proportion of people are confused but it would make me much more comfortable to see this data to back it up. <br>&gt; <br>&gt; What if we are spinning our wheels for no reason on a feature that *most* don&#39;t find confusing? What if we make a bigger proportion of those who did understand it more confused now?<br>&gt; <br>&gt; Brandon <br>&gt; <br>&gt;&gt; <br>&gt;&gt; By analogy, Chinese and Japanese share difficult writing systems. Yet many people use those languages daily without difficulty. Does that mean there&#39;s not a problem? Far from it: in fact, you&#39;ll find that many intelligent people have devoted their life&#39;s work to mitigating the issue. Both Chinese and Japanese underwent a round of simplification in the 20th century. Think about it: real languages used for daily life by a significant fraction of the world&#39;s population were revamped for the purpose of increasing accessibility to new learners.<br>&gt;&gt; <br>&gt;&gt;&gt; The by-value/by-reference is well define, but can be confusing at first. Same goes for eager/lazy processing, or escaping vs non-escaping closure, or even the difference between closure and function. But no one suggest to remove them.<br>&gt;&gt; <br>&gt;&gt; Value types vs. reference types is a concept (and a moderately advanced one), eager vs. lazy processing is a concept (and a moderately advanced one), and closures are a concept (and definitely an advanced one).<br>&gt;&gt; <br>&gt;&gt; Filtering a collection is a concept as well, and no one is suggesting its removal. We are proposing to simplify and rationalize the syntax by which filtering is invoked. If there were a way to dramatically simplify the syntax surrounding value types and reference types so as to diminish confusion, you can absolutely guarantee that there would be proposals to change the syntax. If I could think of one tomorrow, you&#39;d see a thread tomorrow about it. I don&#39;t think I&#39;m that smart though.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Dany<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; In fact, the first of these proposals began with a question: how does one write arbitrary Boolean assertions after a let binding? The answer (use `where`) was found to be misleading and confusing.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think you&#39;re being unfair to say that these proposals have no purpose other than an academic consistency.<br>&gt;&gt;&gt;&gt;&gt; On Thu, Jun 9, 2016 at 13:29 Jon Shier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;         As time goes on, I’m feeling more and more that these consistency proposals are sorely misguided. Frankly, unless the syntax is confusing or misleading, even once the developer has learned the guiding principles of Swift, consistency is not a good argument for change. This proposal is the perfect example of this. No one will find the use of “where” in loops confusing, aside from those who will wonder why it was removed from if statements. There is no misleading behavior or confusing syntax here. This is just consistency for consistency’s sake. Once this proposal is done, then another will be made to remove “where” from another place in the language. Then another and another until it’s gone completely and a very useful part of the language is removed in the name of consistency. Which really just comes down to “where” isn’t used here, so it can’t be used there anymore. It’s death by a thousand cuts.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Jon Shier<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; &gt; On Jun 9, 2016, at 1:16 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; On Jun 9, 2016, at 11:11 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; See my latest post - included results with -Ofast. But still, using filter and lazy.filter is 10+% slower, which were the suggested alternatives to `where`.<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; I need to correct this misapprehension.<br>&gt;&gt;&gt;&gt;&gt; &gt; My suggested alternative to where was and remains `guard`.<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; -- E<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160611/b4627a4d/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>June 11, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; Am 10.06.2016 um 07:08 schrieb Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt;&gt; On Thu, Jun 9, 2016 at 9:45 PM, Dany St-Amant &lt;dsa.mls at icloud.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Le 9 juin 2016 à 14:55, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There have been, in previous threads, several examples given where users of Swift have found the behavior of `where` to be misleading and confusing.<br>&gt;&gt; <br>&gt;&gt; Sorry Xiaodi, but beside you (on multiple instances), and recently Erica, I have do not recall hearing that many voices saying that &#39;where&#39; is confusing.<br>&gt; <br>&gt; Shawn Erickson wrote this to the list just yesterday:<br>&gt; <br>&gt; &quot;I support your position on the use of where and while/when being confusing in the loop statement. I (and I know others) have for example used where in a loop statement mistakenly thinking it would terminate the loop early but of course learned that it basically filters what causes the loop body to be executed. After the fact that made sense to me but it didn&#39;t click at first.&quot;<br>&gt;  <br>&gt;&gt; Yes, there&#39;s was maybe even less voices stating that it is not confusing, but which group is more vocal?<br>&gt;&gt; <br>&gt;&gt; Maybe I have been recently corrupt by Solid SQL queries:<br>&gt;&gt; select * from PEOPLE_TABLE where AGE_FIELD = 100<br>&gt;&gt; <br>&gt;&gt; Or by my (likely) broken English:<br>&gt;&gt; The places where I had the most fun<br>&gt;&gt; <br>&gt;&gt; But, to me, where can only suggest some filtering (thus tag to a for ..  in .., continue if not matching). <br>&gt; <br>&gt; I&#39;m glad that you find it very clear. I do as well. That does not mean it is clear to everyone.<br></p><p>So all these people never had contact with SQL?<br></p><p>-Thorsten <br></p><p><br>&gt;  <br>&gt;&gt; I know there&#39;s a linguist on the list, maybe he could comment on whether or not using &#39;where&#39; as a filter is proper or an abomination.<br>&gt;&gt; <br>&gt;&gt; I do not think that because something is confusing to some, or at first, that it warrant removal from the language.<br>&gt; <br>&gt; It is a very bad sign if something is confusing at first, especially to a significant proportion of users. It&#39;s true by definition that once you have mastered something you are no longer confused by it.<br>&gt; <br>&gt; As has been stated on this list, education is a valid and important consideration for Swift. If something is confusing rather than difficult (and the *concept* of filtering a list is not at all a difficult concept), and if the same underlying concept can already be invoked in alternative and equivalent ways that are not confusing, then it&#39;s a no-brainer that the confusing thing is harmful to the language and should be removed on that basis alone.<br>&gt; <br>&gt; By analogy, Chinese and Japanese share difficult writing systems. Yet many people use those languages daily without difficulty. Does that mean there&#39;s not a problem? Far from it: in fact, you&#39;ll find that many intelligent people have devoted their life&#39;s work to mitigating the issue. Both Chinese and Japanese underwent a round of simplification in the 20th century. Think about it: real languages used for daily life by a significant fraction of the world&#39;s population were revamped for the purpose of increasing accessibility to new learners.<br>&gt; <br>&gt;&gt; The by-value/by-reference is well define, but can be confusing at first. Same goes for eager/lazy processing, or escaping vs non-escaping closure, or even the difference between closure and function. But no one suggest to remove them.<br>&gt; <br>&gt; Value types vs. reference types is a concept (and a moderately advanced one), eager vs. lazy processing is a concept (and a moderately advanced one), and closures are a concept (and definitely an advanced one).<br>&gt; <br>&gt; Filtering a collection is a concept as well, and no one is suggesting its removal. We are proposing to simplify and rationalize the syntax by which filtering is invoked. If there were a way to dramatically simplify the syntax surrounding value types and reference types so as to diminish confusion, you can absolutely guarantee that there would be proposals to change the syntax. If I could think of one tomorrow, you&#39;d see a thread tomorrow about it. I don&#39;t think I&#39;m that smart though.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Dany<br>&gt;&gt; <br>&gt;&gt;&gt; In fact, the first of these proposals began with a question: how does one write arbitrary Boolean assertions after a let binding? The answer (use `where`) was found to be misleading and confusing.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think you&#39;re being unfair to say that these proposals have no purpose other than an academic consistency.<br>&gt;&gt;&gt;&gt; On Thu, Jun 9, 2016 at 13:29 Jon Shier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;         As time goes on, I’m feeling more and more that these consistency proposals are sorely misguided. Frankly, unless the syntax is confusing or misleading, even once the developer has learned the guiding principles of Swift, consistency is not a good argument for change. This proposal is the perfect example of this. No one will find the use of “where” in loops confusing, aside from those who will wonder why it was removed from if statements. There is no misleading behavior or confusing syntax here. This is just consistency for consistency’s sake. Once this proposal is done, then another will be made to remove “where” from another place in the language. Then another and another until it’s gone completely and a very useful part of the language is removed in the name of consistency. Which really just comes down to “where” isn’t used here, so it can’t be used there anymore. It’s death by a thousand cuts.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Jon Shier<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &gt; On Jun 9, 2016, at 1:16 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; On Jun 9, 2016, at 11:11 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt;&gt; See my latest post - included results with -Ofast. But still, using filter and lazy.filter is 10+% slower, which were the suggested alternatives to `where`.<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; I need to correct this misapprehension.<br>&gt;&gt;&gt;&gt; &gt; My suggested alternative to where was and remains `guard`.<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; -- E<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160611/3a456555/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 11, 2016 at 02:00:00pm</p></header><div class="content"><p>On Sat, Jun 11, 2016 at 2:42 PM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br></p><p>&gt;<br>&gt;<br>&gt; Am 10.06.2016 um 07:08 schrieb Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt;:<br>&gt;<br>&gt; On Thu, Jun 9, 2016 at 9:45 PM, Dany St-Amant &lt;dsa.mls at icloud.com&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; Le 9 juin 2016 à 14:55, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;<br>&gt;&gt; There have been, in previous threads, several examples given where users<br>&gt;&gt; of Swift have found the behavior of `where` to be misleading and confusing.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Sorry Xiaodi, but beside you (on multiple instances), and recently Erica,<br>&gt;&gt; I have do not recall hearing that many voices saying that &#39;where&#39; is<br>&gt;&gt; confusing.<br>&gt;&gt;<br>&gt;<br>&gt; Shawn Erickson wrote this to the list just yesterday:<br>&gt;<br>&gt; &quot;I support your position on the use of where and while/when being<br>&gt; confusing in the loop statement. I (and I know others) have for example<br>&gt; used where in a loop statement mistakenly thinking it would terminate the<br>&gt; loop early but of course learned that it basically filters what causes the<br>&gt; loop body to be executed. After the fact that made sense to me but it<br>&gt; didn&#39;t click at first.&quot;<br>&gt;<br>&gt;<br>&gt;&gt; Yes, there&#39;s was maybe even less voices stating that it is not confusing,<br>&gt;&gt; but which group is more vocal?<br>&gt;&gt;<br>&gt;&gt; Maybe I have been recently corrupt by Solid SQL queries:<br>&gt;&gt; select * from PEOPLE_TABLE where AGE_FIELD = 100<br>&gt;&gt;<br>&gt;&gt; Or by my (likely) broken English:<br>&gt;&gt; The places where I had the most fun<br>&gt;&gt;<br>&gt;&gt; But, to me, where can only suggest some filtering (thus tag to a for ..<br>&gt;&gt;  in .., continue if not matching).<br>&gt;&gt;<br>&gt;<br>&gt; I&#39;m glad that you find it very clear. I do as well. That does not mean it<br>&gt; is clear to everyone.<br>&gt;<br>&gt;<br>&gt; So all these people never had contact with SQL?<br>&gt;<br></p><p>What do you mean by this comment? Do you expect users of Swift to arrive at<br>the language already knowing SQL?<br></p><p><br>&gt;<br>&gt; -Thorsten<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;&gt; I know there&#39;s a linguist on the list, maybe he could comment on whether<br>&gt;&gt; or not using &#39;where&#39; as a filter is proper or an abomination.<br>&gt;&gt;<br>&gt;&gt; I do not think that because something is confusing to some, or at first,<br>&gt;&gt; that it warrant removal from the language.<br>&gt;&gt;<br>&gt;<br>&gt; It is a very bad sign if something is confusing at first, especially to a<br>&gt; significant proportion of users. It&#39;s true by definition that once you have<br>&gt; mastered something you are no longer confused by it.<br>&gt;<br>&gt; As has been stated on this list, education is a valid and important<br>&gt; consideration for Swift. If something is confusing rather than difficult<br>&gt; (and the *concept* of filtering a list is not at all a difficult concept),<br>&gt; and if the same underlying concept can already be invoked in alternative<br>&gt; and equivalent ways that are not confusing, then it&#39;s a no-brainer that the<br>&gt; confusing thing is harmful to the language and should be removed on that<br>&gt; basis alone.<br>&gt;<br>&gt; By analogy, Chinese and Japanese share difficult writing systems. Yet many<br>&gt; people use those languages daily without difficulty. Does that mean there&#39;s<br>&gt; not a problem? Far from it: in fact, you&#39;ll find that many intelligent<br>&gt; people have devoted their life&#39;s work to mitigating the issue. Both Chinese<br>&gt; and Japanese underwent a round of simplification in the 20th century. Think<br>&gt; about it: real languages used for daily life by a significant fraction of<br>&gt; the world&#39;s population were revamped for the purpose of increasing<br>&gt; accessibility to new learners.<br>&gt;<br>&gt; The by-value/by-reference is well define, but can be confusing at first.<br>&gt;&gt; Same goes for eager/lazy processing, or escaping vs non-escaping closure,<br>&gt;&gt; or even the difference between closure and function. But no one suggest to<br>&gt;&gt; remove them.<br>&gt;&gt;<br>&gt;<br>&gt; Value types vs. reference types is a concept (and a moderately advanced<br>&gt; one), eager vs. lazy processing is a concept (and a moderately advanced<br>&gt; one), and closures are a concept (and definitely an advanced one).<br>&gt;<br>&gt; Filtering a collection is a concept as well, and no one is suggesting its<br>&gt; removal. We are proposing to simplify and rationalize the syntax by which<br>&gt; filtering is invoked. If there were a way to dramatically simplify the<br>&gt; syntax surrounding value types and reference types so as to diminish<br>&gt; confusion, you can absolutely guarantee that there would be proposals to<br>&gt; change the syntax. If I could think of one tomorrow, you&#39;d see a thread<br>&gt; tomorrow about it. I don&#39;t think I&#39;m that smart though.<br>&gt;<br>&gt;<br>&gt;&gt; Dany<br>&gt;&gt;<br>&gt;&gt; In fact, the first of these proposals began with a question: how does one<br>&gt;&gt; write arbitrary Boolean assertions after a let binding? The answer (use<br>&gt;&gt; `where`) was found to be misleading and confusing.<br>&gt;&gt;<br>&gt;&gt; I think you&#39;re being unfair to say that these proposals have no purpose<br>&gt;&gt; other than an academic consistency.<br>&gt;&gt; On Thu, Jun 9, 2016 at 13:29 Jon Shier via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;         As time goes on, I’m feeling more and more that these<br>&gt;&gt;&gt; consistency proposals are sorely misguided. Frankly, unless the syntax is<br>&gt;&gt;&gt; confusing or misleading, even once the developer has learned the guiding<br>&gt;&gt;&gt; principles of Swift, consistency is not a good argument for change. This<br>&gt;&gt;&gt; proposal is the perfect example of this. No one will find the use of<br>&gt;&gt;&gt; “where” in loops confusing, aside from those who will wonder why it was<br>&gt;&gt;&gt; removed from if statements. There is no misleading behavior or confusing<br>&gt;&gt;&gt; syntax here. This is just consistency for consistency’s sake. Once this<br>&gt;&gt;&gt; proposal is done, then another will be made to remove “where” from another<br>&gt;&gt;&gt; place in the language. Then another and another until it’s gone completely<br>&gt;&gt;&gt; and a very useful part of the language is removed in the name of<br>&gt;&gt;&gt; consistency. Which really just comes down to “where” isn’t used here, so it<br>&gt;&gt;&gt; can’t be used there anymore. It’s death by a thousand cuts.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Jon Shier<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt; On Jun 9, 2016, at 1:16 PM, Erica Sadun via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt; On Jun 9, 2016, at 11:11 AM, Charlie Monroe &lt;<br>&gt;&gt;&gt; charlie at charliemonroe.net&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt; See my latest post - included results with -Ofast. But still, using<br>&gt;&gt;&gt; filter and lazy.filter is 10+% slower, which were the suggested<br>&gt;&gt;&gt; alternatives to `where`.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; I need to correct this misapprehension.<br>&gt;&gt;&gt; &gt; My suggested alternative to where was and remains `guard`.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; -- E<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160611/15d0c8aa/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>June 11, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; Am 11.06.2016 um 21:50 schrieb Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;:<br>&gt; <br>&gt;&gt; On Sat, Jun 11, 2016 at 2:42 PM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; Am 10.06.2016 um 07:08 schrieb Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Thu, Jun 9, 2016 at 9:45 PM, Dany St-Amant &lt;dsa.mls at icloud.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Le 9 juin 2016 à 14:55, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; There have been, in previous threads, several examples given where users of Swift have found the behavior of `where` to be misleading and confusing.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sorry Xiaodi, but beside you (on multiple instances), and recently Erica, I have do not recall hearing that many voices saying that &#39;where&#39; is confusing.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Shawn Erickson wrote this to the list just yesterday:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &quot;I support your position on the use of where and while/when being confusing in the loop statement. I (and I know others) have for example used where in a loop statement mistakenly thinking it would terminate the loop early but of course learned that it basically filters what causes the loop body to be executed. After the fact that made sense to me but it didn&#39;t click at first.&quot;<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; Yes, there&#39;s was maybe even less voices stating that it is not confusing, but which group is more vocal?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Maybe I have been recently corrupt by Solid SQL queries:<br>&gt;&gt;&gt;&gt; select * from PEOPLE_TABLE where AGE_FIELD = 100<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Or by my (likely) broken English:<br>&gt;&gt;&gt;&gt; The places where I had the most fun<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; But, to me, where can only suggest some filtering (thus tag to a for ..  in .., continue if not matching). <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m glad that you find it very clear. I do as well. That does not mean it is clear to everyone.<br>&gt;&gt; <br>&gt;&gt; So all these people never had contact with SQL?<br>&gt; <br>&gt; What do you mean by this comment? Do you expect users of Swift to arrive at the language already knowing SQL?<br></p><p>Not as a requirement but as a probability.<br>I mean that it is likely that they already had contact with SQL (or C#) where `where` is used without the problems you insist being present in Swift.<br>I don&#39;t buy your argument that `where` in for-loops is confusing. It is perfectly aligned with its usage in mathematics or SQL.<br>That it is relatively little known is a deficiency in the documentation which would be easily fixed. I don&#39;t agree with your discoverability argument. When I wonder about the meaning of a keyword I&#39;m going to have a look at the documentation. It might be old school to look it up myself instead of getting it presented by clicking on it but it isn&#39;t that difficult. When learning a new language I read the languages documentation. How would you know how to write a for-loop in Swift in the first place when you come from Java, say? How would you know to use &quot;in&quot; instead of &quot;:&quot;? Just RTFM and you will discover `where` right in there (if the documentation is fixed).<br></p><p>-Thorsten <br></p><p><br></p><p>&gt;  <br>&gt;&gt; <br>&gt;&gt; -Thorsten <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; I know there&#39;s a linguist on the list, maybe he could comment on whether or not using &#39;where&#39; as a filter is proper or an abomination.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I do not think that because something is confusing to some, or at first, that it warrant removal from the language.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It is a very bad sign if something is confusing at first, especially to a significant proportion of users. It&#39;s true by definition that once you have mastered something you are no longer confused by it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As has been stated on this list, education is a valid and important consideration for Swift. If something is confusing rather than difficult (and the *concept* of filtering a list is not at all a difficult concept), and if the same underlying concept can already be invoked in alternative and equivalent ways that are not confusing, then it&#39;s a no-brainer that the confusing thing is harmful to the language and should be removed on that basis alone.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; By analogy, Chinese and Japanese share difficult writing systems. Yet many people use those languages daily without difficulty. Does that mean there&#39;s not a problem? Far from it: in fact, you&#39;ll find that many intelligent people have devoted their life&#39;s work to mitigating the issue. Both Chinese and Japanese underwent a round of simplification in the 20th century. Think about it: real languages used for daily life by a significant fraction of the world&#39;s population were revamped for the purpose of increasing accessibility to new learners.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The by-value/by-reference is well define, but can be confusing at first. Same goes for eager/lazy processing, or escaping vs non-escaping closure, or even the difference between closure and function. But no one suggest to remove them.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Value types vs. reference types is a concept (and a moderately advanced one), eager vs. lazy processing is a concept (and a moderately advanced one), and closures are a concept (and definitely an advanced one).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Filtering a collection is a concept as well, and no one is suggesting its removal. We are proposing to simplify and rationalize the syntax by which filtering is invoked. If there were a way to dramatically simplify the syntax surrounding value types and reference types so as to diminish confusion, you can absolutely guarantee that there would be proposals to change the syntax. If I could think of one tomorrow, you&#39;d see a thread tomorrow about it. I don&#39;t think I&#39;m that smart though.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Dany<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; In fact, the first of these proposals began with a question: how does one write arbitrary Boolean assertions after a let binding? The answer (use `where`) was found to be misleading and confusing.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I think you&#39;re being unfair to say that these proposals have no purpose other than an academic consistency.<br>&gt;&gt;&gt;&gt;&gt;&gt; On Thu, Jun 9, 2016 at 13:29 Jon Shier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;         As time goes on, I’m feeling more and more that these consistency proposals are sorely misguided. Frankly, unless the syntax is confusing or misleading, even once the developer has learned the guiding principles of Swift, consistency is not a good argument for change. This proposal is the perfect example of this. No one will find the use of “where” in loops confusing, aside from those who will wonder why it was removed from if statements. There is no misleading behavior or confusing syntax here. This is just consistency for consistency’s sake. Once this proposal is done, then another will be made to remove “where” from another place in the language. Then another and another until it’s gone completely and a very useful part of the language is removed in the name of consistency. Which really just comes down to “where” isn’t used here, so it can’t be used there anymore. It’s death by a thousand cuts.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Jon Shier<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; On Jun 9, 2016, at 1:16 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; On Jun 9, 2016, at 11:11 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; See my latest post - included results with -Ofast. But still, using filter and lazy.filter is 10+% slower, which were the suggested alternatives to `where`.<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; I need to correct this misapprehension.<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; My suggested alternative to where was and remains `guard`.<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; -- E<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160611/fc1569cf/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>June 11, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; Am 10.06.2016 um 04:45 schrieb Dany St-Amant via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; <br>&gt;&gt; Le 9 juin 2016 à 14:55, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; There have been, in previous threads, several examples given where users of Swift have found the behavior of `where` to be misleading and confusing.<br>&gt; <br>&gt; Sorry Xiaodi, but beside you (on multiple instances), and recently Erica, I have do not recall hearing that many voices saying that &#39;where&#39; is confusing. Yes, there&#39;s was maybe even less voices stating that it is not confusing, but which group is more vocal?<br></p><p>+1<br></p><p>In addition there have been quite a few voices stating that they like `where` and do not find it confusing. <br></p><p><br>&gt; <br>&gt; Maybe I have been recently corrupt by Solid SQL queries:<br>&gt; select * from PEOPLE_TABLE where AGE_FIELD = 100<br></p><p>Yes, that is just the same order as in Swift&#39;s `for` loop and in mathematics.<br>And the same semantics (filtering). No confusion there at all.<br></p><p>-Thorsten <br></p><p>&gt; <br>&gt; Or by my (likely) broken English:<br>&gt; The places where I had the most fun<br>&gt; <br>&gt; But, to me, where can only suggest some filtering (thus tag to a for ..  in .., continue if not matching). <br>&gt; <br>&gt; I know there&#39;s a linguist on the list, maybe he could comment on whether or not using &#39;where&#39; as a filter is proper or an abomination.<br>&gt; <br>&gt; I do not think that because something is confusing to some, or at first, that it warrant removal from the language. The by-value/by-reference is well define, but can be confusing at first. Same goes for eager/lazy processing, or escaping vs non-escaping closure, or even the difference between closure and function. But no one suggest to remove them.<br>&gt; <br>&gt; Dany<br>&gt; <br>&gt;&gt; In fact, the first of these proposals began with a question: how does one write arbitrary Boolean assertions after a let binding? The answer (use `where`) was found to be misleading and confusing.<br>&gt;&gt; <br>&gt;&gt; I think you&#39;re being unfair to say that these proposals have no purpose other than an academic consistency.<br>&gt;&gt;&gt; On Thu, Jun 9, 2016 at 13:29 Jon Shier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;         As time goes on, I’m feeling more and more that these consistency proposals are sorely misguided. Frankly, unless the syntax is confusing or misleading, even once the developer has learned the guiding principles of Swift, consistency is not a good argument for change. This proposal is the perfect example of this. No one will find the use of “where” in loops confusing, aside from those who will wonder why it was removed from if statements. There is no misleading behavior or confusing syntax here. This is just consistency for consistency’s sake. Once this proposal is done, then another will be made to remove “where” from another place in the language. Then another and another until it’s gone completely and a very useful part of the language is removed in the name of consistency. Which really just comes down to “where” isn’t used here, so it can’t be used there anymore. It’s death by a thousand cuts.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jon Shier<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt; On Jun 9, 2016, at 1:16 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt; On Jun 9, 2016, at 11:11 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt; See my latest post - included results with -Ofast. But still, using filter and lazy.filter is 10+% slower, which were the suggested alternatives to `where`.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; I need to correct this misapprehension.<br>&gt;&gt;&gt; &gt; My suggested alternative to where was and remains `guard`.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; -- E<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160611/fb7a8604/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 10, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; On Jun 9, 2016, at 7:16 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 9, 2016, at 11:11 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt;&gt; See my latest post - included results with -Ofast. But still, using filter and lazy.filter is 10+% slower, which were the suggested alternatives to `where`.<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; I need to correct this misapprehension.<br>&gt; My suggested alternative to where was and remains `guard`.<br>&gt; <br>&gt; -- E<br></p><p>Sorry, meant alternatives that didn&#39;t require any additional code in the body of the for loop.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d02ed1b20fc3e0fa1592ce5982f24d2b?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Leonardo Pessoa</string> &lt;me at lmpessoa.com&gt;<p>June 10, 2016 at 08:00:00am</p></header><div class="content"><p>I would vow to remove where clauses altogether. Most of the times I used it in ifs, fors and switches I ended up thinking it hardened readability of my code (perhaps because of placement, but I do not think alternatives made it more readable) and so it was my decision to stop using where whenever possible in my code. Since Erica&#39;s performance test pointed out using guard is nearly as fast as using where and the core team is removing wheres from ifs, I think the ones in fors could go next.<br></p><p>L<br></p><p>&gt; On 10 Jun 2016, at 2:01 am, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 9, 2016, at 7:16 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 9, 2016, at 11:11 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt;&gt;&gt; See my latest post - included results with -Ofast. But still, using filter and lazy.filter is 10+% slower, which were the suggested alternatives to `where`.<br>&gt;&gt; <br>&gt;&gt; I need to correct this misapprehension.<br>&gt;&gt; My suggested alternative to where was and remains `guard`.<br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt; <br>&gt; Sorry, meant alternatives that didn&#39;t require any additional code in the body of the for loop.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>June 14, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jun 8, 2016, at 10:51 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jun 8, 2016, at 9:36 PM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Upon accepting SE-0099, the core team is removing `where` clauses from condition clauses, writing &quot;the &#39;where&#39; keyword can be retired from its purpose as a boolean condition introducer.&quot; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Inspiried by Xiaodi Wu, I now propose removing `where` clauses from `for in` loops, where they are better expressed (and read) as guard conditions. <br>&gt;&gt; <br>&gt;&gt; Do you propose to remove `for case` as well? That can equally be handled by a `guard case` in the loop body.<br>&gt;&gt; <br>&gt;&gt; Alternate proposal: Move `where` clauses to be adjacent to the pattern—rather than the sequence expression—in a `for` loop, just as they are in these other syntaxes.<br>&gt;&gt; <br>&gt;&gt; 	for n where n.isOdd in 1...1_000 { … }<br>&gt;&gt; <br>&gt;&gt; This makes them more consistent with the syntax in `switch` cases and `catch` statements, while also IMHO clarifying the role of the `where` clause as a filter on the elements seen by the loop.<br>&gt; <br>&gt; I saw your post on that *after* I finished sending this. Moving `where` next to the pattern, like you&#39;d find in `catch` and switch `case`, the code would look like this:<br>&gt; <br>&gt; for i where i % 2 == 0 in sequence {<br>&gt;     // do stuff<br>&gt; }<br></p><p>What about just this?<br>for i % 2 == 0 in sequence { ... }<br></p><p>The first new identifier gets to be the index variable and subsequent new identifiers are errors.<br></p><p>- Dave Sweeris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160614/8bf06e1c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June 14, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; What about just this?<br>&gt; for i % 2 == 0 in sequence { ... }<br>&gt; <br>&gt; The first new identifier gets to be the index variable and subsequent new identifiers are errors.<br></p><p>If that weren&#39;t a syntax error, I would expect it to loop over `[true, false, true, false, …]`.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
