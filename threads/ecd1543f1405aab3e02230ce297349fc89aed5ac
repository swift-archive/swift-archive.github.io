<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 26, 2016 at 11:00:00pm</p></header><div class="content"><p>on Tue Jan 26 2016, Dany St-Amant &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; Le 26 janv. 2016 à 19:39, Dave Abrahams via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Tue Jan 26 2016, Charles Kissinger &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I agree with all of the small criticisms mentioned below by Radoslaw<br>&gt;&gt;&gt; except for the renaming of precondition() to require(). I think it is<br>&gt;&gt;&gt; an improvement that it describes an action now, just like assert().<br>&gt;&gt; <br>&gt;&gt; Interestingly, I was the one that insisted on that change, as I felt<br>&gt;&gt; “precondition” was too much of a term-of-art and “require” would be more<br>&gt;&gt; accessible, but I am now regretting that decision.  This function is not<br>&gt;&gt; conceptually an action; like “assert,” it&#39;s a declarative statement, and<br>&gt;&gt; “precondition” conveyed that aspect much better, IMO.<br>&gt;<br>&gt; How about expect()? Should not have much string attached to it. Only<br>&gt; thing coming to mind is the<br>&gt; TCL extension used for automation.<br></p><p>That is, again, more action-y and less declarative.  We could go with<br>&quot;expected,&quot; of course, but in either case we&#39;re just inventing names for<br>something that already has a perfectly good name.  Precondition is a<br>term of art with a precise meaning.  Does anybody on this list feel that<br>&quot;precondition&quot; is too inaccessible?<br></p><p>&gt;<br>&gt;<br>&gt; Dany<br>&gt;<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Count me among those who liked the ‘Type’ suffix for protocols though.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; —CK<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 25, 2016, at 7:40 AM, Radosław Pietruszewski via<br>&gt;&gt;&gt;&gt; swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hello all,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Just like with SE-0005<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160125/007658.html&gt;,<br>&gt;&gt;&gt;&gt; I’m overwhelmingly for this proposal. The Guidelines, as a whole do<br>&gt;&gt;&gt;&gt; a great job at making Swift APIs more consistent and clearer, and<br>&gt;&gt;&gt;&gt; applying them to the Swift stdlib is an important first step.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; * * *<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Nitpicks, criticisms and suggestions:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; == precondition was renamed to require ==<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This might be confusing to newcomers, as many languages use the word<br>&gt;&gt;&gt;&gt; `require` as a keyword for what we&#39;d call `import`. Although a bit<br>&gt;&gt;&gt;&gt; more technical, `precondition` is unambiguous and still easily<br>&gt;&gt;&gt;&gt; understandable. I feel like `required` does more damage than good.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; == Removed Type from protocol names ==<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Perhaps I’ve missed some discussion about this and I don’t see the<br>&gt;&gt;&gt;&gt; context, but I’m not sure this is a positive change.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I fear this might be confusing in practice, at least in some<br>&gt;&gt;&gt;&gt; contexts. For example, there&#39;s nothing signifying that &quot;Boolean&quot; or<br>&gt;&gt;&gt;&gt; &quot;Integer&quot; are protocols and not actual types. Same with “Sequence”,<br>&gt;&gt;&gt;&gt; “OptionSet”, etc. Perhaps it doesn&#39;t matter because everyone will<br>&gt;&gt;&gt;&gt; naturally go for `Bool`, `Int`, and `Array` anyway. But I can<br>&gt;&gt;&gt;&gt; imagine a lot of confusion if someone tried that anyway, or perhaps<br>&gt;&gt;&gt;&gt; saw that in the autocompletion, or the standard library browser<br>&gt;&gt;&gt;&gt; (with no intention of using the protocol).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’m all for removing unnecessary noise and verbosity, but I think I<br>&gt;&gt;&gt;&gt; would err on explicitness side here. It seemed like the -able/-Type<br>&gt;&gt;&gt;&gt; convention did a good job disambiguating types you can actually<br>&gt;&gt;&gt;&gt; instantiate from protocols, with very little “verbosity cost”.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; == sort() =&gt; sorted(), sortInPlace() =&gt; sort() etc ==<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’m torn on this.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Frankly, I find both the “foo/fooInPlace” and “bar/barred”<br>&gt;&gt;&gt;&gt; conventions awkward. Both seem weird. “InPlace” isn’t something I<br>&gt;&gt;&gt;&gt; recall seeing anywhere else in API naming, and seems a bizarre way<br>&gt;&gt;&gt;&gt; of signifying mutability. “-ed” doesn’t work with all words, so you<br>&gt;&gt;&gt;&gt; sometimes have to go with “-ing”, or give up and cry. And then you<br>&gt;&gt;&gt;&gt; have inconsistency that “-InPlace” doesn’t seem to have. Also,<br>&gt;&gt;&gt;&gt; -ed/-ing can sometimes be difficult to write, especially for<br>&gt;&gt;&gt;&gt; non-natives because of the “last letter is doubled” rule for some<br>&gt;&gt;&gt;&gt; words.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; But my biggest problem with this change is that IMHO we should<br>&gt;&gt;&gt;&gt; encourage to use the transforming (non-mutating) variants by<br>&gt;&gt;&gt;&gt; default. One way to achieve this as an API designer and slightly<br>&gt;&gt;&gt;&gt; push people towards doing what’s considered best practice is to make<br>&gt;&gt;&gt;&gt; the preferable variant easier to type. This might be a subtle<br>&gt;&gt;&gt;&gt; change, but I think it matters. Before, if you really wanted to<br>&gt;&gt;&gt;&gt; mutate something in place, you had to do that extra little bit of<br>&gt;&gt;&gt;&gt; work typing “sortInPlace”, whereas what would be preferable most of<br>&gt;&gt;&gt;&gt; the time had a simpler, shorter form: “sort” and would appear<br>&gt;&gt;&gt;&gt; earlier in autocomplete.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; == -ings in argument names ==<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’ve noticed these few tweaks in naming:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -  mutating func removeAll(keepCapacity keepCapacity: Bool = false)<br>&gt;&gt;&gt;&gt;&gt; +  mutating func removeAll(keepingCapacity keepingCapacity: Bool = false)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; public func transcode&lt;...&gt;(...<br>&gt;&gt;&gt;&gt;&gt; -  stopOnError: Bool<br>&gt;&gt;&gt;&gt;&gt; +  stoppingOnError: Bool<br>&gt;&gt;&gt;&gt;&gt; ) -&gt; Bool<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; +  public init(allocatingCapacity count: Int)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;m against this change. While I&#39;m not fully convinced of the<br>&gt;&gt;&gt;&gt; -ed/-ing rule for methods and properties, it does an important job<br>&gt;&gt;&gt;&gt; by conveying the non-mutating semantics of a symbol described. In<br>&gt;&gt;&gt;&gt; case of argument names, this rationale no longer applies.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The only reason to write &quot;stoppingOnError&quot; instead of &quot;stopOnError&quot;<br>&gt;&gt;&gt;&gt; is to make method invocations sound more like real English<br>&gt;&gt;&gt;&gt; sentences. This is the conventional Objective-C thinking the<br>&gt;&gt;&gt;&gt; Guidelines largely step back from. In my opinion, this is futile and<br>&gt;&gt;&gt;&gt; provides no readability benefits in this context. Method invocations<br>&gt;&gt;&gt;&gt; are _not_ sentences. It&#39;s not English, it&#39;s code. And while making<br>&gt;&gt;&gt;&gt; method names blatantly gramatically incorrect doesn&#39;t help<br>&gt;&gt;&gt;&gt; readability, neither does forcing `-ing` endings to all boolean<br>&gt;&gt;&gt;&gt; function arguments.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The only thing it does is it adds a few extra characters, an extra<br>&gt;&gt;&gt;&gt; word ending the reader has to parse and understand. I know that it&#39;s<br>&gt;&gt;&gt;&gt; a non-goal to make Swift code as terse as possible, and I&#39;m not<br>&gt;&gt;&gt;&gt; arguing for that. But the Guidelines seem to agree that adding extra<br>&gt;&gt;&gt;&gt; verbosity _without a good reason_ is a bad thing. Because every<br>&gt;&gt;&gt;&gt; extra word and symbol in code just adds to the cognitive load of the<br>&gt;&gt;&gt;&gt; reader. And when it doesn&#39;t serve a purpose, it just decreases the<br>&gt;&gt;&gt;&gt; signal-to-noise ratio.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Plus, as mentioned before, `-ed/-ing` can be tricky to spell for<br>&gt;&gt;&gt;&gt; non-natives. This might not be a big deal, but given that this<br>&gt;&gt;&gt;&gt; change provides no benefits, it&#39;s one more tiny thing you have to be<br>&gt;&gt;&gt;&gt; careful not to get wrong when writing Swift.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; And it&#39;s unnecessary:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   removeAll(keepCapacity: true)<br>&gt;&gt;&gt;&gt;   transcode(foo, bar, stopOnError: true)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Are just as clear and readable as:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   removeAll(keepingCapacity: true)<br>&gt;&gt;&gt;&gt;   transcode(foo, bar, stoppingOnError: true)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; And the former isn&#39;t gramatically incorrect, because this isn&#39;t a sentence.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Apologies for nitpicking on this tiniest possible detail. I just<br>&gt;&gt;&gt;&gt; care a lot that we don&#39;t create a precedent of trying to make<br>&gt;&gt;&gt;&gt; everything sound like English unnecessarily and add verbosity bit by<br>&gt;&gt;&gt;&gt; bit.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; * * *<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt; Yes, and yes, with small details still worth reconsidering.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; How much effort did you put into your review? A glance, a quick<br>&gt;&gt;&gt;&gt;&gt; reading, or an in-depth study?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’ve read the whole proposal, as well as the related proposals, and<br>&gt;&gt;&gt;&gt; read the thread for this review.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Cross-linking to my SE-0005 review:<br>&gt;&gt;&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160125/007658.html<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160125/007658.html&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt; — Radek<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 22 Jan 2016, at 22:02, Douglas Gregor via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The review of SE-0006 &quot;Apply API Guidelines to the Standard<br>&gt;&gt;&gt;&gt;&gt; Library&quot; begins now and runs through January 31, 2016. The proposal<br>&gt;&gt;&gt;&gt;&gt; is available here:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0006-apply-api-guidelines-to-the-standard-library.md<br>&gt;&gt;&gt;&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0006-apply-api-guidelines-to-the-standard-library.md&gt;<br>&gt;&gt;&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All<br>&gt;&gt;&gt;&gt;&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to<br>&gt;&gt;&gt;&gt;&gt; the review manager. When replying, please try to keep the proposal<br>&gt;&gt;&gt;&gt;&gt; link at the top of the message:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Proposal link:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0006-apply-api-guidelines-to-the-standard-library.md<br>&gt;&gt;&gt;&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0006-apply-api-guidelines-to-the-standard-library.md&gt;<br>&gt;&gt;&gt;&gt;&gt; Reply text<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Other replies<br>&gt;&gt;&gt;&gt;&gt; &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What<br>&gt;&gt;&gt;&gt;&gt; goes into a review?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The goal of the review process is to improve the proposal under<br>&gt;&gt;&gt;&gt;&gt; review through constructive criticism and, eventually, determine<br>&gt;&gt;&gt;&gt;&gt; the direction of Swift. When writing your review, here are some<br>&gt;&gt;&gt;&gt;&gt; questions you might want to answer in your review:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt;&gt; If you have used other languages or libraries with a similar<br>&gt;&gt;&gt;&gt;&gt; feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;&gt;&gt; How much effort did you put into your review? A glance, a quick<br>&gt;&gt;&gt;&gt;&gt; reading, or an in-depth study?<br>&gt;&gt;&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt;&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -Doug Gregor<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7abf2ce34651dd5e97cd97b16ce21bae?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>Guillaume Lessard</string> &lt;glessard at tffenterprises.com&gt;<p>January 27, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; On 27 janv. 2016, at 00:07, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Does anybody on this list feel that &quot;precondition&quot; is too inaccessible?<br></p><p>I don’t, but I do like “require”. Unlike “precondition”, “require” is straightforward language. That particular use of “precondition” isn’t necessarily “pre”-anything; nothing prevents anyone from sticking a precondition() call just before returning from a function; then it becomes a weird misnomer. I am skeptical of “term of art” as a justification, because it is nearly a synonym of “jargon”, and that is not a good thing.<br></p><p>Cheers,<br>Guillaume Lessard<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0089229ece6e648767cff4dc6c6d38ab?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>Charles Kissinger</string> &lt;crk at akkyra.com&gt;<p>January 27, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jan 26, 2016, at 11:07 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Tue Jan 26 2016, Dany St-Amant &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; Le 26 janv. 2016 à 19:39, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Tue Jan 26 2016, Charles Kissinger &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I agree with all of the small criticisms mentioned below by Radoslaw<br>&gt;&gt;&gt;&gt; except for the renaming of precondition() to require(). I think it is<br>&gt;&gt;&gt;&gt; an improvement that it describes an action now, just like assert().<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Interestingly, I was the one that insisted on that change, as I felt<br>&gt;&gt;&gt; “precondition” was too much of a term-of-art and “require” would be more<br>&gt;&gt;&gt; accessible, but I am now regretting that decision.  This function is not<br>&gt;&gt;&gt; conceptually an action; like “assert,” it&#39;s a declarative statement, and<br>&gt;&gt;&gt; “precondition” conveyed that aspect much better, IMO.<br>&gt;&gt; <br>&gt;&gt; How about expect()? Should not have much string attached to it. Only<br>&gt;&gt; thing coming to mind is the<br>&gt;&gt; TCL extension used for automation.<br>&gt; <br>&gt; That is, again, more action-y and less declarative.  We could go with<br>&gt; &quot;expected,&quot; of course, but in either case we&#39;re just inventing names for<br>&gt; something that already has a perfectly good name.  Precondition is a<br>&gt; term of art with a precise meaning.  Does anybody on this list feel that<br>&gt; &quot;precondition&quot; is too inaccessible?<br></p><p>‘Precondition’ is not particularly bad jargon since it is a standard dictionary word that is used with a similar meaning in areas outside of computer science. ‘Require’ probably has an advantage with students and non-native English speakers by virtue of being a much more commonly used and understood word.<br></p><p>—CK<br></p><p>&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Dany<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Count me among those who liked the ‘Type’ suffix for protocols though.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; —CK<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jan 25, 2016, at 7:40 AM, Radosław Pietruszewski via<br>&gt;&gt;&gt;&gt;&gt; swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hello all,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Just like with SE-0005<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160125/007658.html&gt;,<br>&gt;&gt;&gt;&gt;&gt; I’m overwhelmingly for this proposal. The Guidelines, as a whole do<br>&gt;&gt;&gt;&gt;&gt; a great job at making Swift APIs more consistent and clearer, and<br>&gt;&gt;&gt;&gt;&gt; applying them to the Swift stdlib is an important first step.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * * *<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Nitpicks, criticisms and suggestions:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; == precondition was renamed to require ==<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This might be confusing to newcomers, as many languages use the word<br>&gt;&gt;&gt;&gt;&gt; `require` as a keyword for what we&#39;d call `import`. Although a bit<br>&gt;&gt;&gt;&gt;&gt; more technical, `precondition` is unambiguous and still easily<br>&gt;&gt;&gt;&gt;&gt; understandable. I feel like `required` does more damage than good.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; == Removed Type from protocol names ==<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Perhaps I’ve missed some discussion about this and I don’t see the<br>&gt;&gt;&gt;&gt;&gt; context, but I’m not sure this is a positive change.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I fear this might be confusing in practice, at least in some<br>&gt;&gt;&gt;&gt;&gt; contexts. For example, there&#39;s nothing signifying that &quot;Boolean&quot; or<br>&gt;&gt;&gt;&gt;&gt; &quot;Integer&quot; are protocols and not actual types. Same with “Sequence”,<br>&gt;&gt;&gt;&gt;&gt; “OptionSet”, etc. Perhaps it doesn&#39;t matter because everyone will<br>&gt;&gt;&gt;&gt;&gt; naturally go for `Bool`, `Int`, and `Array` anyway. But I can<br>&gt;&gt;&gt;&gt;&gt; imagine a lot of confusion if someone tried that anyway, or perhaps<br>&gt;&gt;&gt;&gt;&gt; saw that in the autocompletion, or the standard library browser<br>&gt;&gt;&gt;&gt;&gt; (with no intention of using the protocol).<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I’m all for removing unnecessary noise and verbosity, but I think I<br>&gt;&gt;&gt;&gt;&gt; would err on explicitness side here. It seemed like the -able/-Type<br>&gt;&gt;&gt;&gt;&gt; convention did a good job disambiguating types you can actually<br>&gt;&gt;&gt;&gt;&gt; instantiate from protocols, with very little “verbosity cost”.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; == sort() =&gt; sorted(), sortInPlace() =&gt; sort() etc ==<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I’m torn on this.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Frankly, I find both the “foo/fooInPlace” and “bar/barred”<br>&gt;&gt;&gt;&gt;&gt; conventions awkward. Both seem weird. “InPlace” isn’t something I<br>&gt;&gt;&gt;&gt;&gt; recall seeing anywhere else in API naming, and seems a bizarre way<br>&gt;&gt;&gt;&gt;&gt; of signifying mutability. “-ed” doesn’t work with all words, so you<br>&gt;&gt;&gt;&gt;&gt; sometimes have to go with “-ing”, or give up and cry. And then you<br>&gt;&gt;&gt;&gt;&gt; have inconsistency that “-InPlace” doesn’t seem to have. Also,<br>&gt;&gt;&gt;&gt;&gt; -ed/-ing can sometimes be difficult to write, especially for<br>&gt;&gt;&gt;&gt;&gt; non-natives because of the “last letter is doubled” rule for some<br>&gt;&gt;&gt;&gt;&gt; words.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; But my biggest problem with this change is that IMHO we should<br>&gt;&gt;&gt;&gt;&gt; encourage to use the transforming (non-mutating) variants by<br>&gt;&gt;&gt;&gt;&gt; default. One way to achieve this as an API designer and slightly<br>&gt;&gt;&gt;&gt;&gt; push people towards doing what’s considered best practice is to make<br>&gt;&gt;&gt;&gt;&gt; the preferable variant easier to type. This might be a subtle<br>&gt;&gt;&gt;&gt;&gt; change, but I think it matters. Before, if you really wanted to<br>&gt;&gt;&gt;&gt;&gt; mutate something in place, you had to do that extra little bit of<br>&gt;&gt;&gt;&gt;&gt; work typing “sortInPlace”, whereas what would be preferable most of<br>&gt;&gt;&gt;&gt;&gt; the time had a simpler, shorter form: “sort” and would appear<br>&gt;&gt;&gt;&gt;&gt; earlier in autocomplete.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; == -ings in argument names ==<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I’ve noticed these few tweaks in naming:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func removeAll(keepCapacity keepCapacity: Bool = false)<br>&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func removeAll(keepingCapacity keepingCapacity: Bool = false)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; public func transcode&lt;...&gt;(...<br>&gt;&gt;&gt;&gt;&gt;&gt; -  stopOnError: Bool<br>&gt;&gt;&gt;&gt;&gt;&gt; +  stoppingOnError: Bool<br>&gt;&gt;&gt;&gt;&gt;&gt; ) -&gt; Bool<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; +  public init(allocatingCapacity count: Int)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I&#39;m against this change. While I&#39;m not fully convinced of the<br>&gt;&gt;&gt;&gt;&gt; -ed/-ing rule for methods and properties, it does an important job<br>&gt;&gt;&gt;&gt;&gt; by conveying the non-mutating semantics of a symbol described. In<br>&gt;&gt;&gt;&gt;&gt; case of argument names, this rationale no longer applies.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The only reason to write &quot;stoppingOnError&quot; instead of &quot;stopOnError&quot;<br>&gt;&gt;&gt;&gt;&gt; is to make method invocations sound more like real English<br>&gt;&gt;&gt;&gt;&gt; sentences. This is the conventional Objective-C thinking the<br>&gt;&gt;&gt;&gt;&gt; Guidelines largely step back from. In my opinion, this is futile and<br>&gt;&gt;&gt;&gt;&gt; provides no readability benefits in this context. Method invocations<br>&gt;&gt;&gt;&gt;&gt; are _not_ sentences. It&#39;s not English, it&#39;s code. And while making<br>&gt;&gt;&gt;&gt;&gt; method names blatantly gramatically incorrect doesn&#39;t help<br>&gt;&gt;&gt;&gt;&gt; readability, neither does forcing `-ing` endings to all boolean<br>&gt;&gt;&gt;&gt;&gt; function arguments.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The only thing it does is it adds a few extra characters, an extra<br>&gt;&gt;&gt;&gt;&gt; word ending the reader has to parse and understand. I know that it&#39;s<br>&gt;&gt;&gt;&gt;&gt; a non-goal to make Swift code as terse as possible, and I&#39;m not<br>&gt;&gt;&gt;&gt;&gt; arguing for that. But the Guidelines seem to agree that adding extra<br>&gt;&gt;&gt;&gt;&gt; verbosity _without a good reason_ is a bad thing. Because every<br>&gt;&gt;&gt;&gt;&gt; extra word and symbol in code just adds to the cognitive load of the<br>&gt;&gt;&gt;&gt;&gt; reader. And when it doesn&#39;t serve a purpose, it just decreases the<br>&gt;&gt;&gt;&gt;&gt; signal-to-noise ratio.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Plus, as mentioned before, `-ed/-ing` can be tricky to spell for<br>&gt;&gt;&gt;&gt;&gt; non-natives. This might not be a big deal, but given that this<br>&gt;&gt;&gt;&gt;&gt; change provides no benefits, it&#39;s one more tiny thing you have to be<br>&gt;&gt;&gt;&gt;&gt; careful not to get wrong when writing Swift.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; And it&#39;s unnecessary:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  removeAll(keepCapacity: true)<br>&gt;&gt;&gt;&gt;&gt;  transcode(foo, bar, stopOnError: true)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Are just as clear and readable as:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  removeAll(keepingCapacity: true)<br>&gt;&gt;&gt;&gt;&gt;  transcode(foo, bar, stoppingOnError: true)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; And the former isn&#39;t gramatically incorrect, because this isn&#39;t a sentence.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Apologies for nitpicking on this tiniest possible detail. I just<br>&gt;&gt;&gt;&gt;&gt; care a lot that we don&#39;t create a precedent of trying to make<br>&gt;&gt;&gt;&gt;&gt; everything sound like English unnecessarily and add verbosity bit by<br>&gt;&gt;&gt;&gt;&gt; bit.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * * *<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;&gt;&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt;&gt; Yes, and yes, with small details still worth reconsidering.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; How much effort did you put into your review? A glance, a quick<br>&gt;&gt;&gt;&gt;&gt;&gt; reading, or an in-depth study?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I’ve read the whole proposal, as well as the related proposals, and<br>&gt;&gt;&gt;&gt;&gt; read the thread for this review.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Cross-linking to my SE-0005 review:<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160125/007658.html<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160125/007658.html&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt; — Radek<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On 22 Jan 2016, at 22:02, Douglas Gregor via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The review of SE-0006 &quot;Apply API Guidelines to the Standard<br>&gt;&gt;&gt;&gt;&gt;&gt; Library&quot; begins now and runs through January 31, 2016. The proposal<br>&gt;&gt;&gt;&gt;&gt;&gt; is available here:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0006-apply-api-guidelines-to-the-standard-library.md<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0006-apply-api-guidelines-to-the-standard-library.md&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All<br>&gt;&gt;&gt;&gt;&gt;&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to<br>&gt;&gt;&gt;&gt;&gt;&gt; the review manager. When replying, please try to keep the proposal<br>&gt;&gt;&gt;&gt;&gt;&gt; link at the top of the message:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Proposal link:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0006-apply-api-guidelines-to-the-standard-library.md<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0006-apply-api-guidelines-to-the-standard-library.md&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Reply text<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Other replies<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What<br>&gt;&gt;&gt;&gt;&gt;&gt; goes into a review?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The goal of the review process is to improve the proposal under<br>&gt;&gt;&gt;&gt;&gt;&gt; review through constructive criticism and, eventually, determine<br>&gt;&gt;&gt;&gt;&gt;&gt; the direction of Swift. When writing your review, here are some<br>&gt;&gt;&gt;&gt;&gt;&gt; questions you might want to answer in your review:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt;&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;&gt;&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt;&gt;&gt; If you have used other languages or libraries with a similar<br>&gt;&gt;&gt;&gt;&gt;&gt; feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;&gt;&gt;&gt; How much effort did you put into your review? A glance, a quick<br>&gt;&gt;&gt;&gt;&gt;&gt; reading, or an in-depth study?<br>&gt;&gt;&gt;&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; -Doug Gregor<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>January 27, 2016 at 10:00:00pm</p></header><div class="content"><p>But don’t you think any relative advantage of “require” is overshadowed by the potential for confusion since “require” means something completely different in *a lot* of other languages?<br></p><p>— Radek<br></p><p>&gt; On 27 Jan 2016, at 22:56, Charles Kissinger via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; ‘Precondition’ is not particularly bad jargon since it is a standard dictionary word that is used with a similar meaning in areas outside of computer science. ‘Require’ probably has an advantage with students and non-native English speakers by virtue of being a much more commonly used and understood word.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160127/1c37c70f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>January 27, 2016 at 02:00:00pm</p></header><div class="content"><p>+1 to this. Unfortunately, require already has a different meaning in other very common languages. <br></p><p>Sent from my iPhone<br></p><p>&gt; On Jan 27, 2016, at 1:57 PM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; But don’t you think any relative advantage of “require” is overshadowed by the potential for confusion since “require” means something completely different in *a lot* of other languages?<br>&gt; <br>&gt; — Radek<br>&gt; <br>&gt;&gt; On 27 Jan 2016, at 22:56, Charles Kissinger via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; ‘Precondition’ is not particularly bad jargon since it is a standard dictionary word that is used with a similar meaning in areas outside of computer science. ‘Require’ probably has an advantage with students and non-native English speakers by virtue of being a much more commonly used and understood word.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160127/e35a4848/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0089229ece6e648767cff4dc6c6d38ab?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>Charles Kissinger</string> &lt;crk at akkyra.com&gt;<p>January 27, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jan 27, 2016, at 1:57 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt; <br>&gt; But don’t you think any relative advantage of “require” is overshadowed by the potential for confusion since “require” means something completely different in *a lot* of other languages?<br></p><p>A valid concern. I’m glad I don’t have to be the one making the call on this. ;-)<br></p><p>My gut feeling is that the two uses are *so* different that it might not be a big issue for anybody. I would only worry about confusion when there is a subtle difference in how a keyword or function is used. An assert() call that is still active in release builds would surprise a lot of people. A very different use for a common word like &#39;require’ might not.<br></p><p>—CK<br></p><p>&gt; — Radek<br>&gt; <br>&gt;&gt; On 27 Jan 2016, at 22:56, Charles Kissinger via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; ‘Precondition’ is not particularly bad jargon since it is a standard dictionary word that is used with a similar meaning in areas outside of computer science. ‘Require’ probably has an advantage with students and non-native English speakers by virtue of being a much more commonly used and understood word.<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160127/e415ed52/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January 27, 2016 at 03:00:00pm</p></header><div class="content"><p>My take: I&#39;m not concerned about this because you won&#39;t see it in isolation. It&#39;ll always have a boolean expression, and possibly a message as well.<br></p><p>require(offset &lt; self.count)<br></p><p>require(!self.isStarted, &quot;task has already been started&quot;)<br></p><p>I can&#39;t see anyone getting this confused with the import-like require in other languages. They might not think &quot;require&quot; when they first start using the feature, but they won&#39;t think &quot;precondition&quot; either; they&#39;ll think &quot;assert&quot; and do a search for &quot;assert in Release builds&quot; or something.<br></p><p>So I think I&#39;m mildly for &quot;require&quot; over &quot;precondition&quot;. But that said, I dug up our original rationale for choosing &quot;precondition&quot; (and &quot;preconditionFailure&quot;) over &quot;require&quot;:<br></p><p>&gt; We think  “precondition” is a more precise statement of intent than “require,” and “requirementFailure” is awkward.<br></p><p>Jordan<br></p><p><br>&gt; On Jan 27, 2016, at 13:57, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; But don’t you think any relative advantage of “require” is overshadowed by the potential for confusion since “require” means something completely different in *a lot* of other languages?<br>&gt; <br>&gt; — Radek<br>&gt; <br>&gt;&gt; On 27 Jan 2016, at 22:56, Charles Kissinger via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; ‘Precondition’ is not particularly bad jargon since it is a standard dictionary word that is used with a similar meaning in areas outside of computer science. ‘Require’ probably has an advantage with students and non-native English speakers by virtue of being a much more commonly used and understood word.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160127/d4e1af37/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4030f7e8f6b6d3c09d10ec12691773c1?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>John Randolph</string> &lt;jcr at mac.com&gt;<p>January 31, 2016 at 07:00:00pm</p></header><div class="content"><p>I’m fine with using “require” in this way.   Anyone new to Swift will figure it out in a minute or less.<br></p><p>-jcr<br></p><p>&gt; On Jan 27, 2016, at 1:57 PM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; But don’t you think any relative advantage of “require” is overshadowed by the potential for confusion since “require” means something completely different in *a lot* of other languages?<br>&gt; <br>&gt; — Radek<br>&gt; <br>&gt;&gt; On 27 Jan 2016, at 22:56, Charles Kissinger via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; ‘Precondition’ is not particularly bad jargon since it is a standard dictionary word that is used with a similar meaning in areas outside of computer science. ‘Require’ probably has an advantage with students and non-native English speakers by virtue of being a much more commonly used and understood word.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160131/e82324ee/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
