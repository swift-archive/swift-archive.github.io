<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Potential Bug in SE-0029 (Remove implicit tuple splat behavior from function applications)</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>April 18, 2016 at 03:00:00pm</p></header><div class="content"><p>I was updating some old code to Swift 2.2, and came across an unexpected tuple splat warning. This code is all you need to generate the deprecation warning:<br>public class Value&lt;T&gt; {<br>    public typealias Element = T<br>    public typealias Ret = T<br>}<br>public class Expression&lt;A, R&gt; : Value&lt;R&gt; {<br>    public typealias Arg = A<br>    public var args: Arg! = nil<br>    public subscript(arg: Arg) -&gt; Value&lt;Ret&gt; { return self }<br>}<br>public class Op&lt;A, R&gt; : Expression&lt;A, R&gt; {<br>    public typealias OpType = Arg -&gt; Value&lt;R&gt;<br>    public let op: OpType<br>    init(op: OpType) {<br>        self.op = op<br>        super.init()<br>    }<br>}<br>public class BinaryOp&lt;A1, A2, R&gt; : Op&lt;(A1, A2), R&gt; {<br>    override init(op: OpType) {<br>        super.init(op: op)<br>    }<br>    override public subscript(x: Arg) -&gt; Value&lt;Ret&gt; {<br>        return op(x) //Warning: Passing 2 arguments to a callee as a single tuple value is deprecated<br>    }<br>}<br></p><p>I don’t understand why the compiler thinks I’m trying to splat the tuple… `op` takes one argument of type `Arg` and I’m giving it one argument of type `Arg`. In the case of a `BinaryOp`, `Arg` does happen to be a tuple, but the proposal (https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md) specifically says &quot;it does not propose removing the ability to pass tuples as values to functions”.<br></p><p>Am I missing something, or have I found a bug in Swift 2.2?<br></p><p>- Dave Sweeris<br></p><p>(PS, Sorry if this is the wrong list… I’m not sure where potential bug reports go.)<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160418/76075a2c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Potential Bug in SE-0029 (Remove implicit tuple splat behavior from function applications)</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>April 18, 2016 at 02:00:00pm</p></header><div class="content"><p>Good catch. Seems like an issue with the diagnostic. Can you file a bug at bugs.swift.org?<br></p><p>Jordan<br></p><p>&gt; On Apr 18, 2016, at 13:45, David Sweeris via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I was updating some old code to Swift 2.2, and came across an unexpected tuple splat warning. This code is all you need to generate the deprecation warning:<br>&gt; public class Value&lt;T&gt; {<br>&gt;     public typealias Element = T<br>&gt;     public typealias Ret = T<br>&gt; }<br>&gt; public class Expression&lt;A, R&gt; : Value&lt;R&gt; {<br>&gt;     public typealias Arg = A<br>&gt;     public var args: Arg! = nil<br>&gt;     public subscript(arg: Arg) -&gt; Value&lt;Ret&gt; { return self }<br>&gt; }<br>&gt; public class Op&lt;A, R&gt; : Expression&lt;A, R&gt; {<br>&gt;     public typealias OpType = Arg -&gt; Value&lt;R&gt;<br>&gt;     public let op: OpType<br>&gt;     init(op: OpType) {<br>&gt;         self.op = op<br>&gt;         super.init()<br>&gt;     }<br>&gt; }<br>&gt; public class BinaryOp&lt;A1, A2, R&gt; : Op&lt;(A1, A2), R&gt; {<br>&gt;     override init(op: OpType) {<br>&gt;         super.init(op: op)<br>&gt;     }<br>&gt;     override public subscript(x: Arg) -&gt; Value&lt;Ret&gt; {<br>&gt;         return op(x) //Warning: Passing 2 arguments to a callee as a single tuple value is deprecated<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; I don’t understand why the compiler thinks I’m trying to splat the tuple… `op` takes one argument of type `Arg` and I’m giving it one argument of type `Arg`. In the case of a `BinaryOp`, `Arg` does happen to be a tuple, but the proposal (https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md&gt;) specifically says &quot;it does not propose removing the ability to pass tuples as values to functions”.<br>&gt; <br>&gt; Am I missing something, or have I found a bug in Swift 2.2?<br>&gt; <br>&gt; - Dave Sweeris<br>&gt; <br>&gt; (PS, Sorry if this is the wrong list… I’m not sure where potential bug reports go.)<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160418/b039ad64/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Potential Bug in SE-0029 (Remove implicit tuple splat behavior from function applications)</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>April 18, 2016 at 05:00:00pm</p></header><div class="content"><p>Sure<br>&gt; On Apr 18, 2016, at 4:25 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; Good catch. Seems like an issue with the diagnostic. Can you file a bug at bugs.swift.org &lt;http://bugs.swift.org/&gt;?<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt;&gt; On Apr 18, 2016, at 13:45, David Sweeris via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I was updating some old code to Swift 2.2, and came across an unexpected tuple splat warning. This code is all you need to generate the deprecation warning:<br>&gt;&gt; public class Value&lt;T&gt; {<br>&gt;&gt;     public typealias Element = T<br>&gt;&gt;     public typealias Ret = T<br>&gt;&gt; }<br>&gt;&gt; public class Expression&lt;A, R&gt; : Value&lt;R&gt; {<br>&gt;&gt;     public typealias Arg = A<br>&gt;&gt;     public var args: Arg! = nil<br>&gt;&gt;     public subscript(arg: Arg) -&gt; Value&lt;Ret&gt; { return self }<br>&gt;&gt; }<br>&gt;&gt; public class Op&lt;A, R&gt; : Expression&lt;A, R&gt; {<br>&gt;&gt;     public typealias OpType = Arg -&gt; Value&lt;R&gt;<br>&gt;&gt;     public let op: OpType<br>&gt;&gt;     init(op: OpType) {<br>&gt;&gt;         self.op = op<br>&gt;&gt;         super.init()<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; public class BinaryOp&lt;A1, A2, R&gt; : Op&lt;(A1, A2), R&gt; {<br>&gt;&gt;     override init(op: OpType) {<br>&gt;&gt;         super.init(op: op)<br>&gt;&gt;     }<br>&gt;&gt;     override public subscript(x: Arg) -&gt; Value&lt;Ret&gt; {<br>&gt;&gt;         return op(x) //Warning: Passing 2 arguments to a callee as a single tuple value is deprecated<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; I don’t understand why the compiler thinks I’m trying to splat the tuple… `op` takes one argument of type `Arg` and I’m giving it one argument of type `Arg`. In the case of a `BinaryOp`, `Arg` does happen to be a tuple, but the proposal (https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md&gt;) specifically says &quot;it does not propose removing the ability to pass tuples as values to functions”.<br>&gt;&gt; <br>&gt;&gt; Am I missing something, or have I found a bug in Swift 2.2?<br>&gt;&gt; <br>&gt;&gt; - Dave Sweeris<br>&gt;&gt; <br>&gt;&gt; (PS, Sorry if this is the wrong list… I’m not sure where potential bug reports go.)<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160418/46db89db/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Potential Bug in SE-0029 (Remove implicit tuple splat behavior from function applications)</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>April 18, 2016 at 05:00:00pm</p></header><div class="content"><p>Done. https://bugs.swift.org/browse/SR-1261<br></p><p>Out of curiosity, what happens if I click “Assign to me”? I think it’d be kinda fun to try to fix the glitch, but I don’t have the faintest idea where to start.<br></p><p>- Dave Sweeris<br></p><p>&gt; On Apr 18, 2016, at 5:31 PM, David Sweeris via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Sure<br>&gt;&gt; On Apr 18, 2016, at 4:25 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Good catch. Seems like an issue with the diagnostic. Can you file a bug at bugs.swift.org &lt;http://bugs.swift.org/&gt;?<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; <br>&gt;&gt;&gt; On Apr 18, 2016, at 13:45, David Sweeris via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I was updating some old code to Swift 2.2, and came across an unexpected tuple splat warning. This code is all you need to generate the deprecation warning:<br>&gt;&gt;&gt; public class Value&lt;T&gt; {<br>&gt;&gt;&gt;     public typealias Element = T<br>&gt;&gt;&gt;     public typealias Ret = T<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; public class Expression&lt;A, R&gt; : Value&lt;R&gt; {<br>&gt;&gt;&gt;     public typealias Arg = A<br>&gt;&gt;&gt;     public var args: Arg! = nil<br>&gt;&gt;&gt;     public subscript(arg: Arg) -&gt; Value&lt;Ret&gt; { return self }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; public class Op&lt;A, R&gt; : Expression&lt;A, R&gt; {<br>&gt;&gt;&gt;     public typealias OpType = Arg -&gt; Value&lt;R&gt;<br>&gt;&gt;&gt;     public let op: OpType<br>&gt;&gt;&gt;     init(op: OpType) {<br>&gt;&gt;&gt;         self.op = op<br>&gt;&gt;&gt;         super.init()<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; public class BinaryOp&lt;A1, A2, R&gt; : Op&lt;(A1, A2), R&gt; {<br>&gt;&gt;&gt;     override init(op: OpType) {<br>&gt;&gt;&gt;         super.init(op: op)<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt;     override public subscript(x: Arg) -&gt; Value&lt;Ret&gt; {<br>&gt;&gt;&gt;         return op(x) //Warning: Passing 2 arguments to a callee as a single tuple value is deprecated<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don’t understand why the compiler thinks I’m trying to splat the tuple… `op` takes one argument of type `Arg` and I’m giving it one argument of type `Arg`. In the case of a `BinaryOp`, `Arg` does happen to be a tuple, but the proposal (https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md&gt;) specifically says &quot;it does not propose removing the ability to pass tuples as values to functions”.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Am I missing something, or have I found a bug in Swift 2.2?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Dave Sweeris<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (PS, Sorry if this is the wrong list… I’m not sure where potential bug reports go.)<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160418/8a42d6e1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Potential Bug in SE-0029 (Remove implicit tuple splat behavior from function applications)</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>April 18, 2016 at 03:00:00pm</p></header><div class="content"><p>Nothing much happens, except other people who see the ticket will know someone else is working on it and not start on it themselves. You can always release the ticket if you decide you can&#39;t or don&#39;t want to work on it anymore.<br></p><p>Austin <br></p><p>&gt; On Apr 18, 2016, at 3:53 PM, David Sweeris via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Done. https://bugs.swift.org/browse/SR-1261 &lt;https://bugs.swift.org/browse/SR-1261&gt;<br>&gt; <br>&gt; Out of curiosity, what happens if I click “Assign to me”? I think it’d be kinda fun to try to fix the glitch, but I don’t have the faintest idea where to start.<br>&gt; <br>&gt; - Dave Sweeris<br>&gt; <br>&gt;&gt; On Apr 18, 2016, at 5:31 PM, David Sweeris via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Sure<br>&gt;&gt;&gt; On Apr 18, 2016, at 4:25 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Good catch. Seems like an issue with the diagnostic. Can you file a bug at bugs.swift.org &lt;http://bugs.swift.org/&gt;?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Apr 18, 2016, at 13:45, David Sweeris via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I was updating some old code to Swift 2.2, and came across an unexpected tuple splat warning. This code is all you need to generate the deprecation warning:<br>&gt;&gt;&gt;&gt; public class Value&lt;T&gt; {<br>&gt;&gt;&gt;&gt;     public typealias Element = T<br>&gt;&gt;&gt;&gt;     public typealias Ret = T<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; public class Expression&lt;A, R&gt; : Value&lt;R&gt; {<br>&gt;&gt;&gt;&gt;     public typealias Arg = A<br>&gt;&gt;&gt;&gt;     public var args: Arg! = nil<br>&gt;&gt;&gt;&gt;     public subscript(arg: Arg) -&gt; Value&lt;Ret&gt; { return self }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; public class Op&lt;A, R&gt; : Expression&lt;A, R&gt; {<br>&gt;&gt;&gt;&gt;     public typealias OpType = Arg -&gt; Value&lt;R&gt;<br>&gt;&gt;&gt;&gt;     public let op: OpType<br>&gt;&gt;&gt;&gt;     init(op: OpType) {<br>&gt;&gt;&gt;&gt;         self.op = op<br>&gt;&gt;&gt;&gt;         super.init()<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; public class BinaryOp&lt;A1, A2, R&gt; : Op&lt;(A1, A2), R&gt; {<br>&gt;&gt;&gt;&gt;     override init(op: OpType) {<br>&gt;&gt;&gt;&gt;         super.init(op: op)<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;     override public subscript(x: Arg) -&gt; Value&lt;Ret&gt; {<br>&gt;&gt;&gt;&gt;         return op(x) //Warning: Passing 2 arguments to a callee as a single tuple value is deprecated<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don’t understand why the compiler thinks I’m trying to splat the tuple… `op` takes one argument of type `Arg` and I’m giving it one argument of type `Arg`. In the case of a `BinaryOp`, `Arg` does happen to be a tuple, but the proposal (https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md&gt;) specifically says &quot;it does not propose removing the ability to pass tuples as values to functions”.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Am I missing something, or have I found a bug in Swift 2.2?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Dave Sweeris<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; (PS, Sorry if this is the wrong list… I’m not sure where potential bug reports go.)<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160418/c8aade90/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Potential Bug in SE-0029 (Remove implicit tuple splat behavior from function applications)</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>April 18, 2016 at 06:00:00pm</p></header><div class="content"><p>Oh, ok, thanks. I’ll be sure to *not* click on it until I figure out how LLVM works! :-D<br></p><p>- Dave Sweeris<br></p><p>&gt; On Apr 18, 2016, at 5:55 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt; <br>&gt; Nothing much happens, except other people who see the ticket will know someone else is working on it and not start on it themselves. You can always release the ticket if you decide you can&#39;t or don&#39;t want to work on it anymore.<br>&gt; <br>&gt; Austin <br>&gt; <br>&gt;&gt; On Apr 18, 2016, at 3:53 PM, David Sweeris via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Done. https://bugs.swift.org/browse/SR-1261 &lt;https://bugs.swift.org/browse/SR-1261&gt;<br>&gt;&gt; <br>&gt;&gt; Out of curiosity, what happens if I click “Assign to me”? I think it’d be kinda fun to try to fix the glitch, but I don’t have the faintest idea where to start.<br>&gt;&gt; <br>&gt;&gt; - Dave Sweeris<br>&gt;&gt; <br>&gt;&gt;&gt; On Apr 18, 2016, at 5:31 PM, David Sweeris via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sure<br>&gt;&gt;&gt;&gt; On Apr 18, 2016, at 4:25 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Good catch. Seems like an issue with the diagnostic. Can you file a bug at bugs.swift.org &lt;http://bugs.swift.org/&gt;?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Apr 18, 2016, at 13:45, David Sweeris via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I was updating some old code to Swift 2.2, and came across an unexpected tuple splat warning. This code is all you need to generate the deprecation warning:<br>&gt;&gt;&gt;&gt;&gt; public class Value&lt;T&gt; {<br>&gt;&gt;&gt;&gt;&gt;     public typealias Element = T<br>&gt;&gt;&gt;&gt;&gt;     public typealias Ret = T<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; public class Expression&lt;A, R&gt; : Value&lt;R&gt; {<br>&gt;&gt;&gt;&gt;&gt;     public typealias Arg = A<br>&gt;&gt;&gt;&gt;&gt;     public var args: Arg! = nil<br>&gt;&gt;&gt;&gt;&gt;     public subscript(arg: Arg) -&gt; Value&lt;Ret&gt; { return self }<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; public class Op&lt;A, R&gt; : Expression&lt;A, R&gt; {<br>&gt;&gt;&gt;&gt;&gt;     public typealias OpType = Arg -&gt; Value&lt;R&gt;<br>&gt;&gt;&gt;&gt;&gt;     public let op: OpType<br>&gt;&gt;&gt;&gt;&gt;     init(op: OpType) {<br>&gt;&gt;&gt;&gt;&gt;         self.op = op<br>&gt;&gt;&gt;&gt;&gt;         super.init()<br>&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; public class BinaryOp&lt;A1, A2, R&gt; : Op&lt;(A1, A2), R&gt; {<br>&gt;&gt;&gt;&gt;&gt;     override init(op: OpType) {<br>&gt;&gt;&gt;&gt;&gt;         super.init(op: op)<br>&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt;     override public subscript(x: Arg) -&gt; Value&lt;Ret&gt; {<br>&gt;&gt;&gt;&gt;&gt;         return op(x) //Warning: Passing 2 arguments to a callee as a single tuple value is deprecated<br>&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I don’t understand why the compiler thinks I’m trying to splat the tuple… `op` takes one argument of type `Arg` and I’m giving it one argument of type `Arg`. In the case of a `BinaryOp`, `Arg` does happen to be a tuple, but the proposal (https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md&gt;) specifically says &quot;it does not propose removing the ability to pass tuples as values to functions”.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Am I missing something, or have I found a bug in Swift 2.2?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; - Dave Sweeris<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; (PS, Sorry if this is the wrong list… I’m not sure where potential bug reports go.)<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160418/23fe864c/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
