<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>C vararg: Swift Package Manager and System Modules</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>December 17, 2015 at 10:00:00pm</p></header><div class="content"><p>If I need access to the C fcntl(2):<br></p><p>  int fcntl(int, int, ...)<br></p><p>can I get the swift-package-manager or swift-build-tool to compile C code that wraps this into a non-vararg version:<br></p><p>  int SocketHelper_fcntl_setFlags(int const fildes, int const flags)<br>  {<br>    return fcntl(fildes, F_SETFL, flags);<br>  }<br>  <br>  int SocketHelper_fcntl_getFlags(int const fildes)<br>  {<br>    return fcntl(fildes, F_GETFL);<br>  }<br></p><p>?<br></p><p>The “System Modules” approach from &lt;https://github.com/apple/swift-package-manager/blob/master/Documentation/SystemModules.md&gt; doesn’t really work. I’d have to create a .a file and put it into a /usr/lib/SocketHelper.so and /usr/include/SocketHelper.h -- which doesn’t make much sense for something this specific and trivial.<br></p><p>Should I look into libffi for this particular case?<br></p><p>/Daniel<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>C vararg: Swift Package Manager and System Modules</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>December 18, 2015 at 10:00:00am</p></header><div class="content"><p>&gt; On 17 Dec 2015, at 22:47, Daniel Eggert via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; If I need access to the C fcntl(2):<br>&gt; <br>&gt;  int fcntl(int, int, ...)<br>&gt; <br>&gt; can I get the swift-package-manager or swift-build-tool to compile C code that wraps this into a non-vararg version:<br>&gt; <br>&gt;  int SocketHelper_fcntl_setFlags(int const fildes, int const flags)<br>&gt;  {<br>&gt;    return fcntl(fildes, F_SETFL, flags);<br>&gt;  }<br>&gt; <br>&gt;  int SocketHelper_fcntl_getFlags(int const fildes)<br>&gt;  {<br>&gt;    return fcntl(fildes, F_GETFL);<br>&gt;  }<br>&gt; <br>&gt; ?<br></p><p>I solved it like this:<br></p><p>typealias fcntlType = @convention(c) (CInt, CInt, CInt) -&gt; (CInt)<br>let fcntlAddr = dlsym(UnsafeMutablePointer&lt;Void&gt;(bitPattern: Int(-2)), &quot;fcntl&quot;)<br>let fcntlType: myFcntl = unsafeBitCast(fcntlAddr, fcntlType.self)<br></p><p>which admittedly is a bit tacky, but it works for now.<br></p><p>/Daniel<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>C vararg: Swift Package Manager and System Modules</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December 18, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; On Dec 18, 2015, at 1:52 AM, Daniel Eggert via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On 17 Dec 2015, at 22:47, Daniel Eggert via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; If I need access to the C fcntl(2):<br>&gt;&gt; <br>&gt;&gt; int fcntl(int, int, ...)<br>&gt;&gt; <br>&gt;&gt; can I get the swift-package-manager or swift-build-tool to compile C code that wraps this into a non-vararg version:<br>&gt;&gt; <br>&gt;&gt; int SocketHelper_fcntl_setFlags(int const fildes, int const flags)<br>&gt;&gt; {<br>&gt;&gt;   return fcntl(fildes, F_SETFL, flags);<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; int SocketHelper_fcntl_getFlags(int const fildes)<br>&gt;&gt; {<br>&gt;&gt;   return fcntl(fildes, F_GETFL);<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; ?<br>&gt; <br>&gt; I solved it like this:<br>&gt; <br>&gt; typealias fcntlType = @convention(c) (CInt, CInt, CInt) -&gt; (CInt)<br>&gt; let fcntlAddr = dlsym(UnsafeMutablePointer&lt;Void&gt;(bitPattern: Int(-2)), &quot;fcntl&quot;)<br>&gt; let fcntlType: myFcntl = unsafeBitCast(fcntlAddr, fcntlType.self)<br>&gt; <br>&gt; which admittedly is a bit tacky, but it works for now.<br></p><p>This is broken, since fcntl is variadic and you&#39;re calling it like a non-variadic function. C doesn&#39;t guarantee that variadic and non-variadic ABIs are compatible—this will break watchOS and ARM64 iOS/tvOS, for instance. The latest open-source builds should provide a working fcntl in the Darwin/Glibc overlays.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151218/351e876e/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>C vararg: Swift Package Manager and System Modules</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 18, 2015 at 11:00:00am</p></header><div class="content"><p>&gt; On Dec 17, 2015, at 1:47 PM, Daniel Eggert via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; If I need access to the C fcntl(2):<br>&gt; <br>&gt;  int fcntl(int, int, ...)<br>&gt; <br>&gt; can I get the swift-package-manager or swift-build-tool to compile C code that wraps this into a non-vararg version:<br></p><p>Hi Daniel,<br></p><p>I’m pretty sure that Swift 2.2 master supports fcntl on both linux and darwin platforms.  What version are you using?<br></p><p>This support is done with “overlays” that you can see here:<br>https://github.com/apple/swift/blob/master/stdlib/public/Glibc/Glibc.swift<br>https://github.com/apple/swift/blob/master/stdlib/public/SDK/Darwin/Darwin.swift<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>C vararg: Swift Package Manager and System Modules</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>December 24, 2015 at 12:00:00am</p></header><div class="content"><p>On 18 Dec 2015, at 20:42, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 17, 2015, at 1:47 PM, Daniel Eggert via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; If I need access to the C fcntl(2):<br>&gt;&gt; <br>&gt;&gt; int fcntl(int, int, ...)<br>&gt;&gt; <br>&gt;&gt; can I get the swift-package-manager or swift-build-tool to compile C code that wraps this into a non-vararg version:<br>&gt; <br>&gt; Hi Daniel,<br>&gt; <br>&gt; I’m pretty sure that Swift 2.2 master supports fcntl on both linux and darwin platforms.  What version are you using?<br>&gt; <br>&gt; This support is done with “overlays” that you can see here:<br>&gt; https://github.com/apple/swift/blob/master/stdlib/public/Glibc/Glibc.swift<br>&gt; https://github.com/apple/swift/blob/master/stdlib/public/SDK/Darwin/Darwin.swift<br>&gt; <br>&gt; -Chris<br></p><p>Indeed. Thanks!<br></p><p>/Daniel<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
