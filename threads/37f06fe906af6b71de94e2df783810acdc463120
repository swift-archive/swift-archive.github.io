<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March 28, 2016 at 02:00:00pm</p></header><div class="content"><p>on Mon Mar 28 2016, Xiaodi Wu &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Right, Countable could refine Strideable. I&#39;m no expert on this, but<br>&gt; some cursory reading suggests that the analogous feature in C++ simply<br>&gt; requires the type to have operator++ defined. Obviously, that won&#39;t<br>&gt; work for Swift 3.0...<br></p><p>Hmm, instead of defining a new protocol (Countable), what if we just use<br>“Strideable where Stride : Integer” as a constraint?<br></p><p>&gt;<br>&gt; On Mon, Mar 28, 2016 at 12:19 PM, Dave Abrahams via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; on Fri Mar 25 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; I&#39;d reply inline but I&#39;m working around some technical limitations on<br>&gt;&gt;&gt; the go here. Agreed that anything countable should be good for a Range<br>&gt;&gt;&gt; that conforms to Collection. Well, anything finite, maybe.<br>&gt;&gt;<br>&gt;&gt; I don&#39;t think the domain being finite is important at all.  You have<br>&gt;&gt; concrete endpoints.<br>&gt;&gt;<br>&gt;&gt;&gt; See below about countably infinite ranges.Re hypothetical Countable<br>&gt;&gt;&gt; protocol:I&#39;m not advocating for another protocol for the numeric<br>&gt;&gt;&gt; type. I&#39;ll take your word for it that they aren&#39;t jolly, though I<br>&gt;&gt;&gt; don&#39;t know why.<br>&gt;&gt;<br>&gt;&gt; Then I should explain.  I don&#39;t want to have both a set of Countable<br>&gt;&gt; protocols and a set of Collection protocols, each with forward,<br>&gt;&gt; bidrectional and random-access traversal, the former being able t<br>&gt;&gt; traverse on their own and the latter being able to traverse via an<br>&gt;&gt; associated Index.  That would be an unpleasant level of complexity to<br>&gt;&gt; impose on users.<br>&gt;&gt;<br>&gt;&gt;&gt; The issue as I see it is this: currently, Range is documented as a<br>&gt;&gt;&gt; collection of *discrete* index values.<br>&gt;&gt;<br>&gt;&gt; Yes, that would change.<br>&gt;&gt;<br>&gt;&gt;&gt; If Intervals are going away, does a Range&lt;Float&gt; model a countable set<br>&gt;&gt;&gt; of Floats with unit stride, a finite set of Floats in the technical<br>&gt;&gt;&gt; sense that there exists only a finite set of representable numbers, or<br>&gt;&gt;&gt; an uncountable set?<br>&gt;&gt;<br>&gt;&gt; The latter; we mostly choose to ignore the fact that Floats are not<br>&gt;&gt; truly arbitrary real numbers, to match most peoples&#39; mental/programming<br>&gt;&gt; models.  The FloatingPoint protocol will also expose all the operations<br>&gt;&gt; that let you deal with the fact that they are not arbitrary reals.<br>&gt;&gt;<br>&gt;&gt;&gt; The former two preserves the current definition of Range as a<br>&gt;&gt;&gt; collection of discrete values but may be astonishing to users. But, if<br>&gt;&gt;&gt; we agree that the last scenario is most intuitive,<br>&gt;&gt;<br>&gt;&gt; we do<br>&gt;&gt;<br>&gt;&gt;&gt; how then can we make the distinction between a &quot;Range&quot; that represents<br>&gt;&gt;&gt; an uncountable set of things with an upper and lower bound and one<br>&gt;&gt;&gt; that represents a countable set of things?<br>&gt;&gt;<br>&gt;&gt; It depends on the characteristics of the range&#39;s Bound type.  If it&#39;s<br>&gt;&gt; discrete and Countable, you get the latter kind.<br>&gt;&gt;<br>&gt;&gt;&gt; Thinking more on this, expanding Range to floating point types opens<br>&gt;&gt;&gt; you up to another inconsistency. Can the bounds be -inf and inf?<br>&gt;&gt;<br>&gt;&gt; Yes.<br>&gt;&gt;<br>&gt;&gt;&gt; I don&#39;t see why that should be a problem for an Interval, but now<br>&gt;&gt;&gt; we&#39;re in for some trouble if you want it for a Range that can be<br>&gt;&gt;&gt; strided through.<br>&gt;&gt;<br>&gt;&gt; I don&#39;t.<br>&gt;&gt;<br>&gt;&gt;&gt; How about 0.0 and inf? That makes sense to allow.<br>&gt;&gt;<br>&gt;&gt; Yes.<br>&gt;&gt;<br>&gt;&gt;&gt; But why should the ranges I&#39;m allowed to specify be constrained by<br>&gt;&gt;&gt; what makes sense to stride?<br>&gt;&gt;<br>&gt;&gt; They are not.<br>&gt;&gt;<br>&gt;&gt;&gt; So the more I think about it, the more I&#39;m convinced that the logic<br>&gt;&gt;&gt; for what Range-Interval hybrids can be strided through can&#39;t neatly<br>&gt;&gt;&gt; accommodate floating point types. If you merge Range and Interval,<br>&gt;&gt;&gt; I still want to be able to specify<br>&gt;&gt;&gt; `-Double.infinity..&lt;Double.infinity`. But if I can do that, then<br>&gt;&gt;&gt; Range&lt;Double&gt; shouldn&#39;t even have `striding(by:)`.<br>&gt;&gt;<br>&gt;&gt; Right.  I think we&#39;re on the same page.  If we had conditional<br>&gt;&gt; conformances, we&#39;d have<br>&gt;&gt;<br>&gt;&gt;   struct Range&lt;T: Comparable&gt;<br>&gt;&gt;     : HalfOpenRange { ... }<br>&gt;&gt;<br>&gt;&gt;   extension Range&lt;T: Comparable where T: Countable&gt;<br>&gt;&gt;     : HalfOpenRange, Collection { ... }<br>&gt;&gt;<br>&gt;&gt; (and the closed-range variants). Until then, we&#39;ll need<br>&gt;&gt;<br>&gt;&gt;   struct RangeOfCountable&lt;T: Comparable where T: Countable&gt;<br>&gt;&gt;     : HalfOpenRange, Collection { ... }<br>&gt;&gt;<br>&gt;&gt; (and the closed-range variant).<br>&gt;&gt;<br>&gt;&gt; The problem is, how to define Countable?  If we had to account for all<br>&gt;&gt; the different possible traversals, we&#39;d end up with 8 different Range<br>&gt;&gt; types (3 Countable and 1 uncountable, closed and half-open).  We&#39;re<br>&gt;&gt; already in a similar position with 12 Slice types(!) in the new design.<br>&gt;&gt;<br>&gt;&gt; I&#39;m not sure if we can do without that complexity for Slices, but in<br>&gt;&gt; the case of Ranges, I think it&#39;s probably OK to say Countable refines<br>&gt;&gt; Strideable, because we won&#39;t have any models of Countable that don&#39;t<br>&gt;&gt; have random access.<br>&gt;&gt;<br>&gt;&gt;&gt; From: Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; Sent: Friday, March 25, 2016 8:11 PM Subject: Re: [swift-evolution]<br>&gt;&gt;&gt; Feature proposal: Range operator with step To:<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;<br>&gt;&gt; ...&lt;schnipp 19&gt;...<br>&gt;&gt;&gt; on Fri Mar 25 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Ah, I think the conceptual muddle arises in the plan<br>&gt;&gt;&gt;&gt; then. Specifically, I&#39;d argue that not all Ranges with Strideable<br>&gt;&gt;&gt;&gt; bounds should conform to Collection.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Conceptually, whether a type can be advanced by some distance<br>&gt;&gt;&gt;&gt; (guaranteed by Strideable) is orthogonal to whether a type has an<br>&gt;&gt;&gt;&gt; obviously correct increment when calling next() on its iterator. Thus,<br>&gt;&gt;&gt;&gt; although *strides* with Strideable bounds should obviously conform to<br>&gt;&gt;&gt;&gt; Collection, Ranges that conform to Collection should be constrained to<br>&gt;&gt;&gt;&gt; types which imply that the Range represents a countable set (as the<br>&gt;&gt;&gt;&gt; mathematicians say) of numbers.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I think any countable set should be OK, regardless of whether the<br>&gt;&gt;&gt; elements are numbers.  Ranges of UnsafePointers, for example, are<br>&gt;&gt;&gt; countable.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; This distinction may come in handy for implementing strides that don&#39;t<br>&gt;&gt;&gt;&gt; accumulate error. Striding through a Range that represents a countable<br>&gt;&gt;&gt;&gt; set of elements shouldn&#39;t accumulate error and we can use what we<br>&gt;&gt;&gt;&gt; already have--i.e. increment the current value every iteration without<br>&gt;&gt;&gt;&gt; inspecting the value of the starting bound. Striding through a Range<br>&gt;&gt;&gt;&gt; that represents an uncountable set of elements definitely requires<br>&gt;&gt;&gt;&gt; reckoning from the starting bound every iteration.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; So, what does this Countable protocol look like?  It seems like it would<br>&gt;&gt;&gt; bring back the Index protocols that are otherwise obviated by this<br>&gt;&gt;&gt; plan... not a jolly prospect.<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Dave<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March 28, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Mar 28, 2016, at 3:25 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Mon Mar 28 2016, Xiaodi Wu &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Right, Countable could refine Strideable. I&#39;m no expert on this, but<br>&gt;&gt; some cursory reading suggests that the analogous feature in C++ simply<br>&gt;&gt; requires the type to have operator++ defined. Obviously, that won&#39;t<br>&gt;&gt; work for Swift 3.0...<br>&gt; <br>&gt; Hmm, instead of defining a new protocol (Countable), what if we just use<br>&gt; “Strideable where Stride : Integer” as a constraint?<br></p><p><br>I like a differentiation between continuous and discrete things<br>although both can have ranges, membership, fences,<br>and a way to stride through them<br></p><p>-- E, just musing, not passing judgement on names<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160328/6272dd0e/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
