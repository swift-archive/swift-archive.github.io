<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/83406789e96a6b136f4ecb7abc5107ea?s=50"></div><header><strong>Proposal: Change of syntax for class protocols</strong> from <string>Matthew Cheok</string> &lt;hello at matthewcheok.com&gt;<p>December  7, 2015 at 08:00:00am</p></header><div class="content"><p>Currently, we declare class protocols with the following syntax:<br></p><p>protocol TestProtocol: class, OtherProtocol {}<br></p><p>This is odd for a few reasons:<br>1) The keyword class exists in the middle of the declaration<br>2) The keyword class follows the colon and looks a lot like inheritance<br>3) The keyword class occupies a somewhat arbitrary first position after the colon (otherwise we have an error)<br></p><p>We also have another use of the class keyword as a modifier when declaring class methods:<br></p><p>class func doSomething() {}<br></p><p>I’m suggesting a change of syntax that rectifies the above issues:<br></p><p>class protocol TestProtocol: OtherProtocol {}<br></p><p>Would love to hear other thoughts on this.<br></p><p>- Matthew<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>Proposal: Change of syntax for class protocols</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>December  7, 2015 at 10:00:00am</p></header><div class="content"><p>I found this odd, too. I don’t know what kind of parsing ramifications this might have, but I like the idea. I suppose one downside is that it makes protocols for classes seem somehow special or different from other protocols - but then again, they kind of are!<br></p><p>l8r<br>Sean<br></p><p><br>&gt; On Dec 7, 2015, at 10:00 AM, Matthew Cheok via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Currently, we declare class protocols with the following syntax:<br>&gt; <br>&gt; protocol TestProtocol: class, OtherProtocol {}<br>&gt; <br>&gt; This is odd for a few reasons:<br>&gt; 1) The keyword class exists in the middle of the declaration<br>&gt; 2) The keyword class follows the colon and looks a lot like inheritance<br>&gt; 3) The keyword class occupies a somewhat arbitrary first position after the colon (otherwise we have an error)<br>&gt; <br>&gt; We also have another use of the class keyword as a modifier when declaring class methods:<br>&gt; <br>&gt; class func doSomething() {}<br>&gt; <br>&gt; I’m suggesting a change of syntax that rectifies the above issues:<br>&gt; <br>&gt; class protocol TestProtocol: OtherProtocol {}<br>&gt; <br>&gt; Would love to hear other thoughts on this.<br>&gt; <br>&gt; - Matthew<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>Proposal: Change of syntax for class protocols</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>December  7, 2015 at 11:00:00am</p></header><div class="content"><p>Do others find themselves implementing class-only protocols often? They<br>seem to be the exception, rather than the rule, to me.<br></p><p>Stephen<br></p><p>On Mon, Dec 7, 2015 at 11:32 AM, Sean Heber via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I found this odd, too. I don’t know what kind of parsing ramifications<br>&gt; this might have, but I like the idea. I suppose one downside is that it<br>&gt; makes protocols for classes seem somehow special or different from other<br>&gt; protocols - but then again, they kind of are!<br>&gt;<br>&gt; l8r<br>&gt; Sean<br>&gt;<br>&gt;<br>&gt; &gt; On Dec 7, 2015, at 10:00 AM, Matthew Cheok via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Currently, we declare class protocols with the following syntax:<br>&gt; &gt;<br>&gt; &gt; protocol TestProtocol: class, OtherProtocol {}<br>&gt; &gt;<br>&gt; &gt; This is odd for a few reasons:<br>&gt; &gt; 1) The keyword class exists in the middle of the declaration<br>&gt; &gt; 2) The keyword class follows the colon and looks a lot like inheritance<br>&gt; &gt; 3) The keyword class occupies a somewhat arbitrary first position after<br>&gt; the colon (otherwise we have an error)<br>&gt; &gt;<br>&gt; &gt; We also have another use of the class keyword as a modifier when<br>&gt; declaring class methods:<br>&gt; &gt;<br>&gt; &gt; class func doSomething() {}<br>&gt; &gt;<br>&gt; &gt; I’m suggesting a change of syntax that rectifies the above issues:<br>&gt; &gt;<br>&gt; &gt; class protocol TestProtocol: OtherProtocol {}<br>&gt; &gt;<br>&gt; &gt; Would love to hear other thoughts on this.<br>&gt; &gt;<br>&gt; &gt; - Matthew<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/9cbb4a03/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>Proposal: Change of syntax for class protocols</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>December  7, 2015 at 08:00:00am</p></header><div class="content"><p>&gt; On Dec 7, 2015, at 8:51 AM, Stephen Celis via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Do others find themselves implementing class-only protocols often? They seem to be the exception, rather than the rule, to me.<br></p><p>I rarely do.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fdf9cae14b796ccd70a965133cf64f85?s=50"></div><header><strong>Proposal: Change of syntax for class protocols</strong> from <string>Vivien Leroy</string> &lt;vivienleroy at me.com&gt;<p>December  7, 2015 at 05:00:00pm</p></header><div class="content"><p>Same here, to me it’s not the most common use. Almost feels hackish but maybe it’s related to a bias we have because we’re all trying to think more with structs and enums rather than classes because of what Swift allows us to do.<br></p><p>&gt; Le 7 déc. 2015 à 17:53, David Owens II via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 7, 2015, at 8:51 AM, Stephen Celis via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Do others find themselves implementing class-only protocols often? They seem to be the exception, rather than the rule, to me.<br>&gt; <br>&gt; I rarely do.<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>Proposal: Change of syntax for class protocols</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>December  7, 2015 at 10:00:00am</p></header><div class="content"><p>Rare here, too, but I don’t think that means the syntax for doing so needs to feel weird. :P <br></p><p>l8r<br>Sean<br></p><p><br>&gt; On Dec 7, 2015, at 10:53 AM, David Owens II &lt;david at owensd.io&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 7, 2015, at 8:51 AM, Stephen Celis via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Do others find themselves implementing class-only protocols often? They seem to be the exception, rather than the rule, to me.<br>&gt; <br>&gt; I rarely do.<br>&gt; <br>&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/83406789e96a6b136f4ecb7abc5107ea?s=50"></div><header><strong>Proposal: Change of syntax for class protocols</strong> from <string>Matthew Cheok</string> &lt;hello at matthewcheok.com&gt;<p>December  7, 2015 at 09:00:00am</p></header><div class="content"><p>I would expect this to be somewhat common for building weakly referenced<br>delegates without @objc. Shouldn&#39;t this be more common in practice?<br></p><p>On Mon, Dec 7, 2015 at 8:51 AM, Stephen Celis &lt;stephen.celis at gmail.com&gt;<br>wrote:<br></p><p>&gt; Do others find themselves implementing class-only protocols often? They<br>&gt; seem to be the exception, rather than the rule, to me.<br>&gt;<br>&gt; Stephen<br>&gt;<br>&gt; On Mon, Dec 7, 2015 at 11:32 AM, Sean Heber via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; I found this odd, too. I don’t know what kind of parsing ramifications<br>&gt;&gt; this might have, but I like the idea. I suppose one downside is that it<br>&gt;&gt; makes protocols for classes seem somehow special or different from other<br>&gt;&gt; protocols - but then again, they kind of are!<br>&gt;&gt;<br>&gt;&gt; l8r<br>&gt;&gt; Sean<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; &gt; On Dec 7, 2015, at 10:00 AM, Matthew Cheok via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Currently, we declare class protocols with the following syntax:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; protocol TestProtocol: class, OtherProtocol {}<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; This is odd for a few reasons:<br>&gt;&gt; &gt; 1) The keyword class exists in the middle of the declaration<br>&gt;&gt; &gt; 2) The keyword class follows the colon and looks a lot like inheritance<br>&gt;&gt; &gt; 3) The keyword class occupies a somewhat arbitrary first position after<br>&gt;&gt; the colon (otherwise we have an error)<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; We also have another use of the class keyword as a modifier when<br>&gt;&gt; declaring class methods:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class func doSomething() {}<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I’m suggesting a change of syntax that rectifies the above issues:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class protocol TestProtocol: OtherProtocol {}<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Would love to hear other thoughts on this.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; - Matthew<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/7610413c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/009173d589176cfd9c8146cc49849ff6?s=50"></div><header><strong>Proposal: Change of syntax for class protocols</strong> from <string>Riley Testut</string> &lt;rileytestut at gmail.com&gt;<p>December  7, 2015 at 11:00:00am</p></header><div class="content"><p>Yes, whenever I implement the delegate pattern, I have to make sure the protocol is a class protocol so I can use a weak reference. <br></p><p>While I use protocols for far more than just delegation, for the newer developers coming to Swift from Objective-C, the delegation pattern probably remains the most common use of protocols, so I agree we should make it as simple to use/understand as possible. +1 for the proposed syntax.<br></p><p>&gt; On Dec 7, 2015, at 9:20 AM, Matthew Cheok via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I would expect this to be somewhat common for building weakly referenced delegates without @objc. Shouldn&#39;t this be more common in practice?<br>&gt; <br>&gt; On Mon, Dec 7, 2015 at 8:51 AM, Stephen Celis &lt;stephen.celis at gmail.com &lt;mailto:stephen.celis at gmail.com&gt;&gt; wrote:<br>&gt; Do others find themselves implementing class-only protocols often? They seem to be the exception, rather than the rule, to me.<br>&gt; <br>&gt; Stephen<br>&gt; <br>&gt; On Mon, Dec 7, 2015 at 11:32 AM, Sean Heber via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I found this odd, too. I don’t know what kind of parsing ramifications this might have, but I like the idea. I suppose one downside is that it makes protocols for classes seem somehow special or different from other protocols - but then again, they kind of are!<br>&gt; <br>&gt; l8r<br>&gt; Sean<br>&gt; <br>&gt; <br>&gt; &gt; On Dec 7, 2015, at 10:00 AM, Matthew Cheok via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Currently, we declare class protocols with the following syntax:<br>&gt; &gt;<br>&gt; &gt; protocol TestProtocol: class, OtherProtocol {}<br>&gt; &gt;<br>&gt; &gt; This is odd for a few reasons:<br>&gt; &gt; 1) The keyword class exists in the middle of the declaration<br>&gt; &gt; 2) The keyword class follows the colon and looks a lot like inheritance<br>&gt; &gt; 3) The keyword class occupies a somewhat arbitrary first position after the colon (otherwise we have an error)<br>&gt; &gt;<br>&gt; &gt; We also have another use of the class keyword as a modifier when declaring class methods:<br>&gt; &gt;<br>&gt; &gt; class func doSomething() {}<br>&gt; &gt;<br>&gt; &gt; I’m suggesting a change of syntax that rectifies the above issues:<br>&gt; &gt;<br>&gt; &gt; class protocol TestProtocol: OtherProtocol {}<br>&gt; &gt;<br>&gt; &gt; Would love to hear other thoughts on this.<br>&gt; &gt;<br>&gt; &gt; - Matthew<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/cb87730b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Proposal: Change of syntax for class protocols</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>December  7, 2015 at 11:00:00am</p></header><div class="content"><p>I prefer the original syntax. It&#39;s easier to parse at a glance that the reference is a protocol and emphasizes the primacy of the protocol, with &#39;class&#39; being a modifier on the type. I do think, though, that &quot;protocol P : class&quot; is inconsistent with Joe&#39;s proposed &quot;typealias TA : class&quot; or &quot;func&lt;T : class&gt;&quot;, as the list of things following &quot;protocol P&quot; isn&#39;t a constraint like the other two examples. So I could see a compelling reason for going either way.<br></p><p>Austin<br></p><p><br>&gt; On Dec 7, 2015, at 11:36 AM, Riley Testut via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Yes, whenever I implement the delegate pattern, I have to make sure the protocol is a class protocol so I can use a weak reference. <br>&gt; <br>&gt; While I use protocols for far more than just delegation, for the newer developers coming to Swift from Objective-C, the delegation pattern probably remains the most common use of protocols, so I agree we should make it as simple to use/understand as possible. +1 for the proposed syntax.<br>&gt; <br>&gt;&gt; On Dec 7, 2015, at 9:20 AM, Matthew Cheok via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I would expect this to be somewhat common for building weakly referenced delegates without @objc. Shouldn&#39;t this be more common in practice?<br>&gt;&gt; <br>&gt;&gt; On Mon, Dec 7, 2015 at 8:51 AM, Stephen Celis &lt;stephen.celis at gmail.com &lt;mailto:stephen.celis at gmail.com&gt;&gt; wrote:<br>&gt;&gt; Do others find themselves implementing class-only protocols often? They seem to be the exception, rather than the rule, to me.<br>&gt;&gt; <br>&gt;&gt; Stephen<br>&gt;&gt; <br>&gt;&gt; On Mon, Dec 7, 2015 at 11:32 AM, Sean Heber via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; I found this odd, too. I don’t know what kind of parsing ramifications this might have, but I like the idea. I suppose one downside is that it makes protocols for classes seem somehow special or different from other protocols - but then again, they kind of are!<br>&gt;&gt; <br>&gt;&gt; l8r<br>&gt;&gt; Sean<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; &gt; On Dec 7, 2015, at 10:00 AM, Matthew Cheok via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Currently, we declare class protocols with the following syntax:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; protocol TestProtocol: class, OtherProtocol {}<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; This is odd for a few reasons:<br>&gt;&gt; &gt; 1) The keyword class exists in the middle of the declaration<br>&gt;&gt; &gt; 2) The keyword class follows the colon and looks a lot like inheritance<br>&gt;&gt; &gt; 3) The keyword class occupies a somewhat arbitrary first position after the colon (otherwise we have an error)<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; We also have another use of the class keyword as a modifier when declaring class methods:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class func doSomething() {}<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I’m suggesting a change of syntax that rectifies the above issues:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class protocol TestProtocol: OtherProtocol {}<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Would love to hear other thoughts on this.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; - Matthew<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/cfcafa97/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Proposal: Change of syntax for class protocols</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December  7, 2015 at 08:00:00am</p></header><div class="content"><p>&gt; On Dec 7, 2015, at 8:00 AM, Matthew Cheok via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Currently, we declare class protocols with the following syntax:<br>&gt; <br>&gt; protocol TestProtocol: class, OtherProtocol {}<br>&gt; <br>&gt; This is odd for a few reasons:<br>&gt; 1) The keyword class exists in the middle of the declaration<br>&gt; 2) The keyword class follows the colon and looks a lot like inheritance<br>&gt; 3) The keyword class occupies a somewhat arbitrary first position after the colon (otherwise we have an error)<br>&gt; <br>&gt; We also have another use of the class keyword as a modifier when declaring class methods:<br>&gt; <br>&gt; class func doSomething() {}<br>&gt; <br>&gt; I’m suggesting a change of syntax that rectifies the above issues:<br>&gt; <br>&gt; class protocol TestProtocol: OtherProtocol {}<br>&gt; <br>&gt; Would love to hear other thoughts on this.<br></p><p>The constraint syntax is used because, in the fullness of time, it should also be applicable to type parameters and associated types:<br></p><p>protocol Foo { typealias T: class }<br></p><p>func foo&lt;T: class&gt;(x: T)<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7abf2ce34651dd5e97cd97b16ce21bae?s=50"></div><header><strong>Proposal: Change of syntax for class protocols</strong> from <string>Guillaume Lessard</string> &lt;glessard at tffenterprises.com&gt;<p>December  7, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; On 7 déc. 2015, at 09:58, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The constraint syntax is used because, in the fullness of time, it should also be applicable to type parameters and associated types:<br>&gt; <br>&gt; protocol Foo { typealias T: class }<br>&gt; <br>&gt; func foo&lt;T: class&gt;(x: T)<br></p><p>Is using the AnyObject protocol significantly less desirable in those cases?<br></p><p>(It may be that you consider AnyObject to be a workaround…)<br></p><p>Guillaume Lessard<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Proposal: Change of syntax for class protocols</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December  7, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; On Dec 7, 2015, at 12:49 PM, Guillaume Lessard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 7 déc. 2015, at 09:58, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The constraint syntax is used because, in the fullness of time, it should also be applicable to type parameters and associated types:<br>&gt;&gt; <br>&gt;&gt; protocol Foo { typealias T: class }<br>&gt;&gt; <br>&gt;&gt; func foo&lt;T: class&gt;(x: T)<br>&gt; <br>&gt; Is using the AnyObject protocol significantly less desirable in those cases?<br>&gt; <br>&gt; (It may be that you consider AnyObject to be a workaround…)<br></p><p>Yeah, &#39;: AnyObject&#39; is more or less a workaround for &#39;: class&#39; not working. AnyObject should be just a typealias for the protocol&lt;class&gt; type.<br></p><p>-Joe<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>Proposal: Change of syntax for class protocols</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>December  7, 2015 at 02:00:00pm</p></header><div class="content"><p>&gt; On Dec 7, 2015, at 8:58 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 7, 2015, at 8:00 AM, Matthew Cheok via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Currently, we declare class protocols with the following syntax:<br>&gt;&gt; <br>&gt;&gt; protocol TestProtocol: class, OtherProtocol {}<br>&gt;&gt; <br>&gt;&gt; This is odd for a few reasons:<br>&gt;&gt; 1) The keyword class exists in the middle of the declaration<br>&gt;&gt; 2) The keyword class follows the colon and looks a lot like inheritance<br>&gt;&gt; 3) The keyword class occupies a somewhat arbitrary first position after the colon (otherwise we have an error)<br>&gt;&gt; <br>&gt;&gt; We also have another use of the class keyword as a modifier when declaring class methods:<br>&gt;&gt; <br>&gt;&gt; class func doSomething() {}<br>&gt;&gt; <br>&gt;&gt; I’m suggesting a change of syntax that rectifies the above issues:<br>&gt;&gt; <br>&gt;&gt; class protocol TestProtocol: OtherProtocol {}<br>&gt;&gt; <br>&gt;&gt; Would love to hear other thoughts on this.<br>&gt; <br>&gt; The constraint syntax is used because, in the fullness of time, it should also be applicable to type parameters and associated types:<br>&gt; <br>&gt; protocol Foo { typealias T: class }<br>&gt; <br>&gt; func foo&lt;T: class&gt;(x: T)<br></p><p><br>Right. This is exactly the reason why we have the syntax<br></p><p>	protocol X : class { … }<br></p><p>and why I’m against changing the current syntax.<br></p><p>	- Doug<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/6f351b03/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c68458ef31619f30cfc2b4ebbc17c4f6?s=50"></div><header><strong>Proposal: Change of syntax for class protocols</strong> from <string>Felix Gabel</string> &lt;felix.gabel at me.com&gt;<p>December  7, 2015 at 11:00:00pm</p></header><div class="content"><p>Great to hear about being able to apply this to type parameters and associated types in the future. But I still propose to rethink the syntax decision. <br> <br>class protocol FooType {}<br>typealias class Bar: FooType<br>func foo&lt;class T&gt;()<br></p><p>This is more consistent with for example the declaration of a class or property<br></p><p>Construct name: Type<br></p><p>&gt; On 07 Dec 2015, at 23:04, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt;&gt; On Dec 7, 2015, at 8:58 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Dec 7, 2015, at 8:00 AM, Matthew Cheok via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Currently, we declare class protocols with the following syntax:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; protocol TestProtocol: class, OtherProtocol {}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is odd for a few reasons:<br>&gt;&gt;&gt; 1) The keyword class exists in the middle of the declaration<br>&gt;&gt;&gt; 2) The keyword class follows the colon and looks a lot like inheritance<br>&gt;&gt;&gt; 3) The keyword class occupies a somewhat arbitrary first position after the colon (otherwise we have an error)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We also have another use of the class keyword as a modifier when declaring class methods:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class func doSomething() {}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m suggesting a change of syntax that rectifies the above issues:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class protocol TestProtocol: OtherProtocol {}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Would love to hear other thoughts on this.<br>&gt;&gt; <br>&gt;&gt; The constraint syntax is used because, in the fullness of time, it should also be applicable to type parameters and associated types:<br>&gt;&gt; <br>&gt;&gt; protocol Foo { typealias T: class }<br>&gt;&gt; <br>&gt;&gt; func foo&lt;T: class&gt;(x: T)<br>&gt; <br>&gt; <br>&gt; Right. This is exactly the reason why we have the syntax<br>&gt; <br>&gt; 	protocol X : class { … }<br>&gt; <br>&gt; and why I’m against changing the current syntax.<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/421b8f95/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>Proposal: Change of syntax for class protocols</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>December  8, 2015 at 07:00:00am</p></header><div class="content"><p>Lets say (and hope) in some future we’ll be able to write functions like this:<br></p><p>func foo&lt;T: class&gt;(_: T) { /* do something */ }<br>func foo&lt;T: enum&gt;(_: T) { /* do something */ }<br>func foo&lt;T: struct&gt;(_: T) { /* do something */ }<br></p><p>// or we might want to have more than one generic types<br></p><p>func foo&lt;A: class, B: enum, C: struct&gt;(_: A, _: B, _: C) {<br>    // do something better<br>}<br></p><p>// try to use `where` clause with `class A`, `struct C`. It looks ugly to me.<br>So ins’t it better to stick to the original syntax and write code like this!?<br></p><p>protocol MagicType {} // can be applied to any type<br>protocol ClassType: class {} // only for classes<br>protocol StructType: struct {} only for structs<br>protocol ValueType: struct, enum {}  <br>protocol MixedType: struct, class {}<br>This is why in my eyes the current syntax for protocols is just perfect.<br></p><p><br></p><p>— <br>Regards Adrian<br></p><p>Am 7. Dezember 2015 bei 23:29:34, Felix Gabel via swift-evolution (swift-evolution at swift.org) schrieb:<br></p><p>Great to hear about being able to apply this to type parameters and associated types in the future. But I still propose to rethink the syntax decision. <br> <br>class protocol FooType {}<br>typealias class Bar: FooType<br>func foo&lt;class T&gt;()<br></p><p>This is more consistent with for example the declaration of a class or property<br></p><p>Construct name: Type<br></p><p>On 07 Dec 2015, at 23:04, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p><br>On Dec 7, 2015, at 8:58 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p><br>On Dec 7, 2015, at 8:00 AM, Matthew Cheok via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>Currently, we declare class protocols with the following syntax:<br></p><p>protocol TestProtocol: class, OtherProtocol {}<br></p><p>This is odd for a few reasons:<br>1) The keyword class exists in the middle of the declaration<br>2) The keyword class follows the colon and looks a lot like inheritance<br>3) The keyword class occupies a somewhat arbitrary first position after the colon (otherwise we have an error)<br></p><p>We also have another use of the class keyword as a modifier when declaring class methods:<br></p><p>class func doSomething() {}<br></p><p>I’m suggesting a change of syntax that rectifies the above issues:<br></p><p>class protocol TestProtocol: OtherProtocol {}<br></p><p>Would love to hear other thoughts on this.<br></p><p>The constraint syntax is used because, in the fullness of time, it should also be applicable to type parameters and associated types:<br></p><p>protocol Foo { typealias T: class }<br></p><p>func foo&lt;T: class&gt;(x: T)<br></p><p>Right. This is exactly the reason why we have the syntax<br></p><p>protocol X : class { … }<br></p><p>and why I’m against changing the current syntax.<br></p><p>- Doug<br></p><p><br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br> _______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/44364442/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c68458ef31619f30cfc2b4ebbc17c4f6?s=50"></div><header><strong>Proposal: Change of syntax for class protocols</strong> from <string>Felix Gabel</string> &lt;felix.gabel at me.com&gt;<p>December  8, 2015 at 10:00:00am</p></header><div class="content"><p>I can only think of one use case for restricting a protocol to be only conformable by structs or enums and that is their special behavior for &#39;willSet’ and ‘didSet’. But this is already discussed in another thread. <br></p><p>It boils down to this: The sole purpose for a class protocol is its memory management semantics.<br></p><p><br>&gt; On Dec 8, 2015, at 7:43 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Lets say (and hope) in some future we’ll be able to write functions like this:<br>&gt; <br>&gt; func foo&lt;T: class&gt;(_: T) { /* do something */ }<br>&gt; func foo&lt;T: enum&gt;(_: T) { /* do something */ }<br>&gt; func foo&lt;T: struct&gt;(_: T) { /* do something */ }<br>&gt; <br>&gt; // or we might want to have more than one generic types<br>&gt; <br>&gt; func foo&lt;A: class, B: enum, C: struct&gt;(_: A, _: B, _: C) {<br>&gt;     // do something better<br>&gt; }<br>&gt; <br>&gt; // try to use `where` clause with `class A`, `struct C`. It looks ugly to me.<br>&gt; So ins’t it better to stick to the original syntax and write code like this!?<br>&gt; <br>&gt; protocol MagicType {} // can be applied to any type<br>&gt; protocol ClassType: class {} // only for classes<br>&gt; protocol StructType: struct {} only for structs<br>&gt; protocol ValueType: struct, enum {}  <br>&gt; protocol MixedType: struct, class {}<br>&gt; This is why in my eyes the current syntax for protocols is just perfect.<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; — <br>&gt; Regards Adrian<br>&gt; <br>&gt; Am 7. Dezember 2015 bei 23:29:34, Felix Gabel via swift-evolution (swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;) schrieb:<br>&gt; <br>&gt;&gt; Great to hear about being able to apply this to type parameters and associated types in the future. But I still propose to rethink the syntax decision. <br>&gt;&gt;  <br>&gt;&gt; class protocol FooType {}<br>&gt;&gt; typealias class Bar: FooType<br>&gt;&gt; func foo&lt;class T&gt;()<br>&gt;&gt; <br>&gt;&gt; This is more consistent with for example the declaration of a class or property<br>&gt;&gt; <br>&gt;&gt; Construct name: Type<br>&gt;&gt; <br>&gt;&gt; On 07 Dec 2015, at 23:04, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 7, 2015, at 8:58 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 7, 2015, at 8:00 AM, Matthew Cheok via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Currently, we declare class protocols with the following syntax:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; protocol TestProtocol: class, OtherProtocol {}<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This is odd for a few reasons:<br>&gt;&gt;&gt;&gt;&gt; 1) The keyword class exists in the middle of the declaration<br>&gt;&gt;&gt;&gt;&gt; 2) The keyword class follows the colon and looks a lot like inheritance<br>&gt;&gt;&gt;&gt;&gt; 3) The keyword class occupies a somewhat arbitrary first position after the colon (otherwise we have an error)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; We also have another use of the class keyword as a modifier when declaring class methods:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; class func doSomething() {}<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I’m suggesting a change of syntax that rectifies the above issues:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; class protocol TestProtocol: OtherProtocol {}<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Would love to hear other thoughts on this.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The constraint syntax is used because, in the fullness of time, it should also be applicable to type parameters and associated types:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; protocol Foo { typealias T: class }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func foo&lt;T: class&gt;(x: T)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Right. This is exactly the reason why we have the syntax<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; protocol X : class { … }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; and why I’m against changing the current syntax.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Doug<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/0770db54/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d5c03d71ebd1813a9c856bff896009b7?s=50"></div><header><strong>Proposal: Change of syntax for class protocols</strong> from <string>Daniel Valls Estella</string> &lt;daniel at upzzle.com&gt;<p>December  8, 2015 at 05:00:00pm</p></header><div class="content"><p>Maybe the restriction of being a class wouldn’t have to do anyting in the protocol definition and it is more a concern of who is managing an element (conforming that protocols and some others).<br></p><p>Avoiding  protocol modifiers and then when using it and if needed:<br></p><p>func doSomething(localvar: MyProtocol class){<br></p><p>	<br>}<br></p><p><br>In fact, if it will be constrained that way in other situations:<br></p><p>&gt;&gt;&gt;&gt;&gt; protocol Foo { typealias T: class }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; func foo&lt;T: class&gt;(x: T)<br></p><p>I understant T can also be a protocol no only a concrete implementation, a class.<br></p><p><br>In that way, and it’s another branch to talk about, perhaps it is desirable to constrain method parameters to more than one protocol at a time. <br></p><p>func doSomething(localvar: MyProtocol Equatable){<br></p><p>	<br>}<br></p><p><br></p><p>&gt; El 8 des 2015, a les 10:56, Felix Gabel via swift-evolution &lt;swift-evolution at swift.org&gt; va escriure:<br>&gt; <br>&gt; I can only think of one use case for restricting a protocol to be only conformable by structs or enums and that is their special behavior for &#39;willSet’ and ‘didSet’. But this is already discussed in another thread. <br>&gt; <br>&gt; It boils down to this: The sole purpose for a class protocol is its memory management semantics.<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 8, 2015, at 7:43 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Lets say (and hope) in some future we’ll be able to write functions like this:<br>&gt;&gt; <br>&gt;&gt; func foo&lt;T: class&gt;(_: T) { /* do something */ }<br>&gt;&gt; func foo&lt;T: enum&gt;(_: T) { /* do something */ }<br>&gt;&gt; func foo&lt;T: struct&gt;(_: T) { /* do something */ }<br>&gt;&gt; <br>&gt;&gt; // or we might want to have more than one generic types<br>&gt;&gt; <br>&gt;&gt; func foo&lt;A: class, B: enum, C: struct&gt;(_: A, _: B, _: C) {<br>&gt;&gt;     // do something better<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; // try to use `where` clause with `class A`, `struct C`. It looks ugly to me.<br>&gt;&gt; So ins’t it better to stick to the original syntax and write code like this!?<br>&gt;&gt; <br>&gt;&gt; protocol MagicType {} // can be applied to any type<br>&gt;&gt; protocol ClassType: class {} // only for classes<br>&gt;&gt; protocol StructType: struct {} only for structs<br>&gt;&gt; protocol ValueType: struct, enum {}  <br>&gt;&gt; protocol MixedType: struct, class {}<br>&gt;&gt; This is why in my eyes the current syntax for protocols is just perfect.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; — <br>&gt;&gt; Regards Adrian<br>&gt;&gt; <br>&gt;&gt; Am 7. Dezember 2015 bei 23:29:34, Felix Gabel via swift-evolution (swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;) schrieb:<br>&gt;&gt; <br>&gt;&gt;&gt; Great to hear about being able to apply this to type parameters and associated types in the future. But I still propose to rethink the syntax decision. <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; class protocol FooType {}<br>&gt;&gt;&gt; typealias class Bar: FooType<br>&gt;&gt;&gt; func foo&lt;class T&gt;()<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is more consistent with for example the declaration of a class or property<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Construct name: Type<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 07 Dec 2015, at 23:04, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 7, 2015, at 8:58 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Dec 7, 2015, at 8:00 AM, Matthew Cheok via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Currently, we declare class protocols with the following syntax:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; protocol TestProtocol: class, OtherProtocol {}<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; This is odd for a few reasons:<br>&gt;&gt;&gt;&gt;&gt;&gt; 1) The keyword class exists in the middle of the declaration<br>&gt;&gt;&gt;&gt;&gt;&gt; 2) The keyword class follows the colon and looks a lot like inheritance<br>&gt;&gt;&gt;&gt;&gt;&gt; 3) The keyword class occupies a somewhat arbitrary first position after the colon (otherwise we have an error)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; We also have another use of the class keyword as a modifier when declaring class methods:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; class func doSomething() {}<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I’m suggesting a change of syntax that rectifies the above issues:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; class protocol TestProtocol: OtherProtocol {}<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Would love to hear other thoughts on this.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The constraint syntax is used because, in the fullness of time, it should also be applicable to type parameters and associated types:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; protocol Foo { typealias T: class }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; func foo&lt;T: class&gt;(x: T)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Right. This is exactly the reason why we have the syntax<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; protocol X : class { … }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; and why I’m against changing the current syntax.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Doug<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/59966d24/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d5c03d71ebd1813a9c856bff896009b7?s=50"></div><header><strong>Proposal: Change of syntax for class protocols</strong> from <string>Daniel Valls Estella</string> &lt;daniel at upzzle.com&gt;<p>December  8, 2015 at 05:00:00pm</p></header><div class="content"><p>Just to clarify.<br></p><p>I think maybe it’s better to move away class constrain from protocol definitions <br>and enable such type of restriction when requesting elements alongside with type/protocol conformance requirements.<br></p><p>func doSomething(localvar: MyProtocol class){<br></p><p>	<br>}<br></p><p><br>&gt; El 8 des 2015, a les 17:34, Daniel Valls Estella &lt;daniel at upzzle.com&gt; va escriure:<br>&gt; <br>&gt; Maybe the restriction of being a class wouldn’t have to do anyting in the protocol definition and it is more a concern of who is managing an element (conforming that protocols and some others).<br>&gt; <br>&gt; Avoiding  protocol modifiers and then when using it and if needed:<br>&gt; <br>&gt; func doSomething(localvar: MyProtocol class){<br>&gt; <br>&gt; 	<br>&gt; }<br>&gt; <br>&gt; <br>&gt; In fact, if it will be constrained that way in other situations:<br>&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; protocol Foo { typealias T: class }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; func foo&lt;T: class&gt;(x: T)<br>&gt; <br>&gt; I understant T can also be a protocol no only a concrete implementation, a class.<br>&gt; <br>&gt; <br>&gt; In that way, and it’s another branch to talk about, perhaps it is desirable to constrain method parameters to more than one protocol at a time. <br>&gt; <br>&gt; func doSomething(localvar: MyProtocol Equatable){<br>&gt; <br>&gt; 	<br>&gt; }<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; El 8 des 2015, a les 10:56, Felix Gabel via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; va escriure:<br>&gt;&gt; <br>&gt;&gt; I can only think of one use case for restricting a protocol to be only conformable by structs or enums and that is their special behavior for &#39;willSet’ and ‘didSet’. But this is already discussed in another thread. <br>&gt;&gt; <br>&gt;&gt; It boils down to this: The sole purpose for a class protocol is its memory management semantics.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 8, 2015, at 7:43 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Lets say (and hope) in some future we’ll be able to write functions like this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func foo&lt;T: class&gt;(_: T) { /* do something */ }<br>&gt;&gt;&gt; func foo&lt;T: enum&gt;(_: T) { /* do something */ }<br>&gt;&gt;&gt; func foo&lt;T: struct&gt;(_: T) { /* do something */ }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // or we might want to have more than one generic types<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func foo&lt;A: class, B: enum, C: struct&gt;(_: A, _: B, _: C) {<br>&gt;&gt;&gt;     // do something better<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // try to use `where` clause with `class A`, `struct C`. It looks ugly to me.<br>&gt;&gt;&gt; So ins’t it better to stick to the original syntax and write code like this!?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; protocol MagicType {} // can be applied to any type<br>&gt;&gt;&gt; protocol ClassType: class {} // only for classes<br>&gt;&gt;&gt; protocol StructType: struct {} only for structs<br>&gt;&gt;&gt; protocol ValueType: struct, enum {}  <br>&gt;&gt;&gt; protocol MixedType: struct, class {}<br>&gt;&gt;&gt; This is why in my eyes the current syntax for protocols is just perfect.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; — <br>&gt;&gt;&gt; Regards Adrian<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Am 7. Dezember 2015 bei 23:29:34, Felix Gabel via swift-evolution (swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;) schrieb:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Great to hear about being able to apply this to type parameters and associated types in the future. But I still propose to rethink the syntax decision. <br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; class protocol FooType {}<br>&gt;&gt;&gt;&gt; typealias class Bar: FooType<br>&gt;&gt;&gt;&gt; func foo&lt;class T&gt;()<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This is more consistent with for example the declaration of a class or property<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Construct name: Type<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 07 Dec 2015, at 23:04, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Dec 7, 2015, at 8:58 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Dec 7, 2015, at 8:00 AM, Matthew Cheok via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Currently, we declare class protocols with the following syntax:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; protocol TestProtocol: class, OtherProtocol {}<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; This is odd for a few reasons:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1) The keyword class exists in the middle of the declaration<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2) The keyword class follows the colon and looks a lot like inheritance<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 3) The keyword class occupies a somewhat arbitrary first position after the colon (otherwise we have an error)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; We also have another use of the class keyword as a modifier when declaring class methods:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; class func doSomething() {}<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I’m suggesting a change of syntax that rectifies the above issues:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; class protocol TestProtocol: OtherProtocol {}<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Would love to hear other thoughts on this.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The constraint syntax is used because, in the fullness of time, it should also be applicable to type parameters and associated types:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; protocol Foo { typealias T: class }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; func foo&lt;T: class&gt;(x: T)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Right. This is exactly the reason why we have the syntax<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; protocol X : class { … }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; and why I’m against changing the current syntax.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; - Doug<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/22c83189/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>Proposal: Change of syntax for class protocols</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>December  8, 2015 at 11:00:00am</p></header><div class="content"><p>On Tue, Dec 8, 2015 at 11:52 AM, Daniel Valls Estella via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Just to clarify.<br>&gt;<br>&gt; I think maybe it’s better to move away class constrain from protocol<br>&gt; definitions<br>&gt; and enable such type of restriction when requesting elements alongside<br>&gt; with type/protocol conformance requirements.<br>&gt;<br>&gt; func doSomething(localvar: MyProtocol class)<br>&gt;<br></p><p>Doesn&#39;t the following work?<br></p><p>    func doSomething(localvar: protocol&lt;MyProtocol, class&gt;)<br></p><p>You could, of course, use a typealias or protocol inheritance to avoid<br>&quot;protocol&lt;...&gt;&quot;.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/09758a61/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d5c03d71ebd1813a9c856bff896009b7?s=50"></div><header><strong>Proposal: Change of syntax for class protocols</strong> from <string>Daniel Valls Estella</string> &lt;daniel at upzzle.com&gt;<p>December  8, 2015 at 06:00:00pm</p></header><div class="content"><p>You are right, I was unaware of “inline” protocol composition. Nice! <br></p><p>But I didn’t found that you can specify class…<br></p><p>Although I’d prefer just to list required protocols spaceseparated. <br></p><p>I also think that it has to be explained as normal/basic option when explaining method declaration (not in protocols definition chapter).<br></p><p><br>Thanks!<br></p><p><br></p><p><br>&gt; El 8 des 2015, a les 17:55, Stephen Celis &lt;stephen.celis at gmail.com&gt; va escriure:<br>&gt; <br>&gt; On Tue, Dec 8, 2015 at 11:52 AM, Daniel Valls Estella via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Just to clarify.<br>&gt; <br>&gt; I think maybe it’s better to move away class constrain from protocol definitions <br>&gt; and enable such type of restriction when requesting elements alongside with type/protocol conformance requirements.<br>&gt; <br>&gt; func doSomething(localvar: MyProtocol class)<br>&gt; <br>&gt; Doesn&#39;t the following work? <br>&gt; <br>&gt;     func doSomething(localvar: protocol&lt;MyProtocol, class&gt;)<br>&gt; <br>&gt; You could, of course, use a typealias or protocol inheritance to avoid &quot;protocol&lt;...&gt;&quot;. <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/4ccbd730/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c68458ef31619f30cfc2b4ebbc17c4f6?s=50"></div><header><strong>Proposal: Change of syntax for class protocols</strong> from <string>Felix Gabel</string> &lt;felix.gabel at me.com&gt;<p>December  8, 2015 at 06:00:00pm</p></header><div class="content"><p>I like the idea of separating memory semantics and protocol declaration but this solution is not scalable. Implementing one function like that is feasible but having to implement 20 or more introduces a lot of overhead. A class protocol is only necessary to fulfill the requirements for a weakly referenced instance (e.g. delegate pattern).<br></p><p><br>&gt; On Dec 8, 2015, at 5:52 PM, Daniel Valls Estella &lt;daniel at upzzle.com&gt; wrote:<br>&gt; <br>&gt; Just to clarify.<br>&gt; <br>&gt; I think maybe it’s better to move away class constrain from protocol definitions <br>&gt; and enable such type of restriction when requesting elements alongside with type/protocol conformance requirements.<br>&gt; <br>&gt; func doSomething(localvar: MyProtocol class){<br>&gt; <br>&gt; 	<br>&gt; }<br>&gt; <br>&gt; <br>&gt;&gt; El 8 des 2015, a les 17:34, Daniel Valls Estella &lt;daniel at upzzle.com &lt;mailto:daniel at upzzle.com&gt;&gt; va escriure:<br>&gt;&gt; <br>&gt;&gt; Maybe the restriction of being a class wouldn’t have to do anyting in the protocol definition and it is more a concern of who is managing an element (conforming that protocols and some others).<br>&gt;&gt; <br>&gt;&gt; Avoiding  protocol modifiers and then when using it and if needed:<br>&gt;&gt; <br>&gt;&gt; func doSomething(localvar: MyProtocol class){<br>&gt;&gt; <br>&gt;&gt; 	<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; In fact, if it will be constrained that way in other situations:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; protocol Foo { typealias T: class }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; func foo&lt;T: class&gt;(x: T)<br>&gt;&gt; <br>&gt;&gt; I understant T can also be a protocol no only a concrete implementation, a class.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; In that way, and it’s another branch to talk about, perhaps it is desirable to constrain method parameters to more than one protocol at a time. <br>&gt;&gt; <br>&gt;&gt; func doSomething(localvar: MyProtocol Equatable){<br>&gt;&gt; <br>&gt;&gt; 	<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; El 8 des 2015, a les 10:56, Felix Gabel via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; va escriure:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I can only think of one use case for restricting a protocol to be only conformable by structs or enums and that is their special behavior for &#39;willSet’ and ‘didSet’. But this is already discussed in another thread. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It boils down to this: The sole purpose for a class protocol is its memory management semantics.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 8, 2015, at 7:43 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Lets say (and hope) in some future we’ll be able to write functions like this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func foo&lt;T: class&gt;(_: T) { /* do something */ }<br>&gt;&gt;&gt;&gt; func foo&lt;T: enum&gt;(_: T) { /* do something */ }<br>&gt;&gt;&gt;&gt; func foo&lt;T: struct&gt;(_: T) { /* do something */ }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; // or we might want to have more than one generic types<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func foo&lt;A: class, B: enum, C: struct&gt;(_: A, _: B, _: C) {<br>&gt;&gt;&gt;&gt;     // do something better<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; // try to use `where` clause with `class A`, `struct C`. It looks ugly to me.<br>&gt;&gt;&gt;&gt; So ins’t it better to stick to the original syntax and write code like this!?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; protocol MagicType {} // can be applied to any type<br>&gt;&gt;&gt;&gt; protocol ClassType: class {} // only for classes<br>&gt;&gt;&gt;&gt; protocol StructType: struct {} only for structs<br>&gt;&gt;&gt;&gt; protocol ValueType: struct, enum {}  <br>&gt;&gt;&gt;&gt; protocol MixedType: struct, class {}<br>&gt;&gt;&gt;&gt; This is why in my eyes the current syntax for protocols is just perfect.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; — <br>&gt;&gt;&gt;&gt; Regards Adrian<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Am 7. Dezember 2015 bei 23:29:34, Felix Gabel via swift-evolution (swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;) schrieb:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Great to hear about being able to apply this to type parameters and associated types in the future. But I still propose to rethink the syntax decision. <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; class protocol FooType {}<br>&gt;&gt;&gt;&gt;&gt; typealias class Bar: FooType<br>&gt;&gt;&gt;&gt;&gt; func foo&lt;class T&gt;()<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This is more consistent with for example the declaration of a class or property<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Construct name: Type<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 07 Dec 2015, at 23:04, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Dec 7, 2015, at 8:58 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Dec 7, 2015, at 8:00 AM, Matthew Cheok via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Currently, we declare class protocols with the following syntax:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; protocol TestProtocol: class, OtherProtocol {}<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This is odd for a few reasons:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1) The keyword class exists in the middle of the declaration<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2) The keyword class follows the colon and looks a lot like inheritance<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 3) The keyword class occupies a somewhat arbitrary first position after the colon (otherwise we have an error)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; We also have another use of the class keyword as a modifier when declaring class methods:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; class func doSomething() {}<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I’m suggesting a change of syntax that rectifies the above issues:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; class protocol TestProtocol: OtherProtocol {}<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Would love to hear other thoughts on this.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The constraint syntax is used because, in the fullness of time, it should also be applicable to type parameters and associated types:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; protocol Foo { typealias T: class }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; func foo&lt;T: class&gt;(x: T)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Right. This is exactly the reason why we have the syntax<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; protocol X : class { … }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; and why I’m against changing the current syntax.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; - Doug<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/90c67ebe/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d5c03d71ebd1813a9c856bff896009b7?s=50"></div><header><strong>Proposal: Change of syntax for class protocols</strong> from <string>Daniel Valls Estella</string> &lt;daniel at upzzle.com&gt;<p>December  8, 2015 at 07:00:00pm</p></header><div class="content"><p>Maybe value instances (structs, enums) could be also accepted as a valid weak reference criteria. Or in other words, maybe the weak keyword would not have to force a reference instance but define that condition in case it is.<br></p><p><br></p><p>&gt; El 8 des 2015, a les 18:36, Felix Gabel &lt;felix.gabel at me.com&gt; va escriure:<br>&gt; <br>&gt; I like the idea of separating memory semantics and protocol declaration but this solution is not scalable. Implementing one function like that is feasible but having to implement 20 or more introduces a lot of overhead. A class protocol is only necessary to fulfill the requirements for a weakly referenced instance (e.g. delegate pattern).<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 8, 2015, at 5:52 PM, Daniel Valls Estella &lt;daniel at upzzle.com &lt;mailto:daniel at upzzle.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Just to clarify.<br>&gt;&gt; <br>&gt;&gt; I think maybe it’s better to move away class constrain from protocol definitions <br>&gt;&gt; and enable such type of restriction when requesting elements alongside with type/protocol conformance requirements.<br>&gt;&gt; <br>&gt;&gt; func doSomething(localvar: MyProtocol class){<br>&gt;&gt; <br>&gt;&gt; 	<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; El 8 des 2015, a les 17:34, Daniel Valls Estella &lt;daniel at upzzle.com &lt;mailto:daniel at upzzle.com&gt;&gt; va escriure:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Maybe the restriction of being a class wouldn’t have to do anyting in the protocol definition and it is more a concern of who is managing an element (conforming that protocols and some others).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Avoiding  protocol modifiers and then when using it and if needed:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func doSomething(localvar: MyProtocol class){<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In fact, if it will be constrained that way in other situations:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; protocol Foo { typealias T: class }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func foo&lt;T: class&gt;(x: T)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I understant T can also be a protocol no only a concrete implementation, a class.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In that way, and it’s another branch to talk about, perhaps it is desirable to constrain method parameters to more than one protocol at a time. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func doSomething(localvar: MyProtocol Equatable){<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; El 8 des 2015, a les 10:56, Felix Gabel via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; va escriure:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I can only think of one use case for restricting a protocol to be only conformable by structs or enums and that is their special behavior for &#39;willSet’ and ‘didSet’. But this is already discussed in another thread. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It boils down to this: The sole purpose for a class protocol is its memory management semantics.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 8, 2015, at 7:43 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Lets say (and hope) in some future we’ll be able to write functions like this:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; func foo&lt;T: class&gt;(_: T) { /* do something */ }<br>&gt;&gt;&gt;&gt;&gt; func foo&lt;T: enum&gt;(_: T) { /* do something */ }<br>&gt;&gt;&gt;&gt;&gt; func foo&lt;T: struct&gt;(_: T) { /* do something */ }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; // or we might want to have more than one generic types<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; func foo&lt;A: class, B: enum, C: struct&gt;(_: A, _: B, _: C) {<br>&gt;&gt;&gt;&gt;&gt;     // do something better<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; // try to use `where` clause with `class A`, `struct C`. It looks ugly to me.<br>&gt;&gt;&gt;&gt;&gt; So ins’t it better to stick to the original syntax and write code like this!?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; protocol MagicType {} // can be applied to any type<br>&gt;&gt;&gt;&gt;&gt; protocol ClassType: class {} // only for classes<br>&gt;&gt;&gt;&gt;&gt; protocol StructType: struct {} only for structs<br>&gt;&gt;&gt;&gt;&gt; protocol ValueType: struct, enum {}  <br>&gt;&gt;&gt;&gt;&gt; protocol MixedType: struct, class {}<br>&gt;&gt;&gt;&gt;&gt; This is why in my eyes the current syntax for protocols is just perfect.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; — <br>&gt;&gt;&gt;&gt;&gt; Regards Adrian<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Am 7. Dezember 2015 bei 23:29:34, Felix Gabel via swift-evolution (swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;) schrieb:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Great to hear about being able to apply this to type parameters and associated types in the future. But I still propose to rethink the syntax decision. <br>&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; class protocol FooType {}<br>&gt;&gt;&gt;&gt;&gt;&gt; typealias class Bar: FooType<br>&gt;&gt;&gt;&gt;&gt;&gt; func foo&lt;class T&gt;()<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; This is more consistent with for example the declaration of a class or property<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Construct name: Type<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On 07 Dec 2015, at 23:04, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Dec 7, 2015, at 8:58 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Dec 7, 2015, at 8:00 AM, Matthew Cheok via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Currently, we declare class protocols with the following syntax:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; protocol TestProtocol: class, OtherProtocol {}<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This is odd for a few reasons:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1) The keyword class exists in the middle of the declaration<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2) The keyword class follows the colon and looks a lot like inheritance<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 3) The keyword class occupies a somewhat arbitrary first position after the colon (otherwise we have an error)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; We also have another use of the class keyword as a modifier when declaring class methods:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; class func doSomething() {}<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I’m suggesting a change of syntax that rectifies the above issues:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; class protocol TestProtocol: OtherProtocol {}<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Would love to hear other thoughts on this.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The constraint syntax is used because, in the fullness of time, it should also be applicable to type parameters and associated types:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; protocol Foo { typealias T: class }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func foo&lt;T: class&gt;(x: T)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Right. This is exactly the reason why we have the syntax<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; protocol X : class { … }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; and why I’m against changing the current syntax.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; - Doug<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/86219e06/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7abf2ce34651dd5e97cd97b16ce21bae?s=50"></div><header><strong>Proposal: Change of syntax for class protocols</strong> from <string>Guillaume Lessard</string> &lt;glessard at tffenterprises.com&gt;<p>December  8, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; On 8 déc. 2015, at 10:36, Felix Gabel via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; A class protocol is only necessary to fulfill the requirements for a weakly referenced instance (e.g. delegate pattern).<br>&gt; <br></p><p>There are such things as thread-safe data structures, e.g. message queues. Many such constructs require reference semantics for their interface to make sense. As long as the language can have reference semantics, it must be possible to restrict specific protocols to those semantics.<br></p><p>Guillaume Lessard<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
