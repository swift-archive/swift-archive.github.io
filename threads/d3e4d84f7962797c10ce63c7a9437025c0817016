<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/582b7183bda90126e385e2cc95cb7088?s=50"></div><header><strong>Case conventions for mixed-case words (like</strong> from <string>Justin Jia</string> &lt;justin.jia.developer at gmail.com&gt;<p>May  5, 2016 at 07:00:00pm</p></header><div class="content"><p>I think ipad and IPAD are better. Ipad and IPad look really bad. <br>e.g isIPAD / ipadUser / isNAN / nan<br></p><p>Or what about this: For lowerCamelCase, we use all lower letters (like ipad).<br>For UpperCamelCase, we keep the original one (iPad). <br>e.g. isiPad / ipadUser isNaN / nan<br></p><p>Justin<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Case conventions for mixed-case words (like</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>May  5, 2016 at 11:00:00pm</p></header><div class="content"><p>NaN is really a problem only because of using it as an acronym rather than just having .invalidNumber or .notANumber (little uglier) or something similar instead. This comes back to the annoying consideration between something being prior art, at the cost of potentially defining something that’s better, or a better fit for the language. If NaN didn’t exist elsewhere, would we even consider it at all if we were implementing float point numbers for the first ever time in Swift? I’d prefer we defined something more verbose as an alternative to avoid the acronym entirely.<br></p><p>When it comes to having iPad conformance the question is; should we ever actually test for names at all? An iPad is a brand, it’s not really something that a program should test for, as what’s important to a program are capabilities. The same is true with testing for an OS, we don’t want to test Windows, Mac etc., but rather to test what libraries are available. Same is true with hardware; it doesn’t matter if a device is an iPad, what matters is that it has a touch-screen rather than a keyboard, that it has a small screen rather than a full monitor, that it’s mobile (and not plugged in) etc.<br>Testing for names like that should be avoided at all costs when it comes to variable and method names, and be relegated to string-based tests for when you absolutely have to access that information. In other words programs should be platform agnostic, and only need to know whether capabilities they require or optionally support exist or not.<br>For these I’d prefer that the guidelines warn against these in the strongest possible terms, as they’re usually a bad idea IMO.<br></p><p>&gt; On 5 May 2016, at 20:49, Justin Jia via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think ipad and IPAD are better. Ipad and IPad look really bad. <br>&gt; e.g isIPAD / ipadUser / isNAN / nan<br>&gt; <br>&gt; Or what about this: For lowerCamelCase, we use all lower letters (like ipad).<br>&gt; For UpperCamelCase, we keep the original one (iPad). <br>&gt; e.g. isiPad / ipadUser isNaN / nan<br>&gt; <br>&gt; Justin<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Case conventions for mixed-case words (like</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May  5, 2016 at 05:00:00pm</p></header><div class="content"><p>On Thu, May 5, 2016 at 5:31 PM, Haravikk via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; NaN is really a problem only because of using it as an acronym rather than<br>&gt; just having .invalidNumber or .notANumber (little uglier) or something<br>&gt; similar instead. This comes back to the annoying consideration between<br>&gt; something being prior art, at the cost of potentially defining something<br>&gt; that’s better, or a better fit for the language. If NaN didn’t exist<br>&gt; elsewhere, would we even consider it at all if we were implementing float<br>&gt; point numbers for the first ever time in Swift? I’d prefer we defined<br>&gt; something more verbose as an alternative to avoid the acronym entirely.<br>&gt;<br>&gt; When it comes to having iPad conformance the question is; should we ever<br>&gt; actually test for names at all? An iPad is a brand, it’s not really<br>&gt; something that a program should test for, as what’s important to a program<br>&gt; are capabilities. The same is true with testing for an OS, we don’t want to<br>&gt; test Windows, Mac etc., but rather to test what libraries are available.<br>&gt; Same is true with hardware; it doesn’t matter if a device is an iPad, what<br>&gt; matters is that it has a touch-screen rather than a keyboard, that it has a<br>&gt; small screen rather than a full monitor, that it’s mobile (and not plugged<br>&gt; in) etc.<br>&gt; Testing for names like that should be avoided at all costs when it comes<br>&gt; to variable and method names, and be relegated to string-based tests for<br>&gt; when you absolutely have to access that information. In other words<br>&gt; programs should be platform agnostic, and only need to know whether<br>&gt; capabilities they require or optionally support exist or not.<br>&gt; For these I’d prefer that the guidelines warn against these in the<br>&gt; strongest possible terms, as they’re usually a bad idea IMO.<br></p><p><br>Whether using the word iPad is wise or not, the question still remains what<br>to do when encountering a term that looks like that. If I&#39;m writing an app<br>that deals with chemical compounds, how should I name a type that deals<br>with pH? How about a computed property representing pH? Should either or<br>both be PH, pH, or ph? It certainly will not do to say &quot;just name it<br>powerOfHydrogen&quot;.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160505/f351e7de/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Case conventions for mixed-case words (like</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>May  5, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On May 5, 2016, at 15:54, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Thu, May 5, 2016 at 5:31 PM, Haravikk via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; NaN is really a problem only because of using it as an acronym rather than just having .invalidNumber or .notANumber (little uglier) or something similar instead. This comes back to the annoying consideration between something being prior art, at the cost of potentially defining something that’s better, or a better fit for the language. If NaN didn’t exist elsewhere, would we even consider it at all if we were implementing float point numbers for the first ever time in Swift? I’d prefer we defined something more verbose as an alternative to avoid the acronym entirely.<br>&gt; <br>&gt; When it comes to having iPad conformance the question is; should we ever actually test for names at all? An iPad is a brand, it’s not really something that a program should test for, as what’s important to a program are capabilities. The same is true with testing for an OS, we don’t want to test Windows, Mac etc., but rather to test what libraries are available. Same is true with hardware; it doesn’t matter if a device is an iPad, what matters is that it has a touch-screen rather than a keyboard, that it has a small screen rather than a full monitor, that it’s mobile (and not plugged in) etc.<br>&gt; Testing for names like that should be avoided at all costs when it comes to variable and method names, and be relegated to string-based tests for when you absolutely have to access that information. In other words programs should be platform agnostic, and only need to know whether capabilities they require or optionally support exist or not.<br>&gt; For these I’d prefer that the guidelines warn against these in the strongest possible terms, as they’re usually a bad idea IMO.<br>&gt; <br>&gt; Whether using the word iPad is wise or not, the question still remains what to do when encountering a term that looks like that. If I&#39;m writing an app that deals with chemical compounds, how should I name a type that deals with pH? How about a computed property representing pH? Should either or both be PH, pH, or ph? It certainly will not do to say &quot;just name it powerOfHydrogen”.<br></p><p>Right, stating that you don’t like these particular examples or terms of art doesn’t change the need for a proper convention. There will be cases where a term of art is the right thing to use, and that term happens to be conventionally spelled with mixed case. The point of naming guidelines is to provide an answer when the situation does arise; right now they’re ambiguous.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160505/04da71dd/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
