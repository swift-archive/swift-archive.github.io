<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: Python&#39;s list, generator, and dictionary comprehensions</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>December 17, 2015 at 11:00:00am</p></header><div class="content"><p>Python examples:<br></p><p>l = [x*x for x in range(10)] // list comprehension<br></p><p>l2 = [(x,y) for x in range(10) for y in range(10) if x + y &lt; 8] // another list comprehension<br></p><p>g = (x*x for x in range(10)) // generator comprehension<br></p><p>d = {x:x*x for x in range(10)} // dictionary comprehension<br></p><p><br>I think most programmers would like using these. They are concise and easy to understand.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>Proposal: Python&#39;s list, generator, and dictionary comprehensions</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 17, 2015 at 09:00:00am</p></header><div class="content"><p>I like this in python. +1<br></p><p><br>&gt; On Dec 17, 2015, at 8:26 AM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Python examples:<br>&gt; <br>&gt; l = [x*x for x in range(10)] // list comprehension<br>&gt; <br>&gt; l2 = [(x,y) for x in range(10) for y in range(10) if x + y &lt; 8] // another list comprehension<br>&gt; <br>&gt; g = (x*x for x in range(10)) // generator comprehension<br>&gt; <br>&gt; d = {x:x*x for x in range(10)} // dictionary comprehension<br>&gt; <br>&gt; <br>&gt; I think most programmers would like using these. They are concise and easy to understand.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f7877c384b6a5494c1b0283eb805831c?s=50"></div><header><strong>Proposal: Python&#39;s list, generator, and dictionary comprehensions</strong> from <string>Liam Butler-Lawrence</string> &lt;liamdunn at me.com&gt;<p>December 17, 2015 at 03:00:00pm</p></header><div class="content"><p>Hi Amir,<br></p><p>Comprehensions are great in Python. However, Swift can already do all of these things via for...in, map() and/or generate(). Your examples:<br></p><p>Ex. #1<br>&gt; let l = 1...10.map { (Int) -&gt; (Int) in<br>&gt;     return x*x<br>&gt; }<br></p><p>Ex. #2<br>&gt; let l2: [(Int, Int)]<br>&gt; for x in 1...10 {<br>    for y in 1...10 where (x + y) &lt; 8 {<br>        l2.append((x, y))<br>    }<br>}<br></p><p>Ex. #3<br>&gt; let g = (1...10.map { (Int) -&gt; (Int) in<br>&gt;     return x*x<br>&gt; }).generate()<br></p><p><br>Ex. #4<br>&gt; let d = [Int: Int]()<br>for x in 1...10 {<br>    d[x] = x*x<br>}<br></p><p>Liam<br></p><p>Sent from my iPhone<br></p><p>&gt; On Dec 17, 2015, at 11:26 AM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Python examples:<br>&gt; <br>&gt; l = [x*x for x in range(10)] // list comprehension<br>&gt; <br>&gt; l2 = [(x,y) for x in range(10) for y in range(10) if x + y &lt; 8] // another list comprehension<br>&gt; <br>&gt; g = (x*x for x in range(10)) // generator comprehension<br>&gt; <br>&gt; d = {x:x*x for x in range(10)} // dictionary comprehension<br>&gt; <br>&gt; <br>&gt; I think most programmers would like using these. They are concise and easy to understand.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/32783daa/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/abf891ba571d5a819ddf547917abe1e1?s=50"></div><header><strong>Proposal: Python&#39;s list, generator, and dictionary comprehensions</strong> from <string>Al Skipp</string> &lt;al_skipp at fastmail.fm&gt;<p>December 18, 2015 at 12:00:00am</p></header><div class="content"><p>&gt; On 17 Dec 2015, at 20:25, Liam Butler-Lawrence via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Comprehensions are great in Python. However, Swift can already do all of these things via for...in, map() and/or generate().<br></p><p>Whether Comprehensions should be introduced to the language is worth consideration (Are they vital? Probably not). But I don’t find the Swift examples using ‘for&#39; statements particularly compelling. The ‘for’ statement needs to declare a mutable variable which is updated from within the loop. It works, but it’s not particularly elegant.<br></p><p>var l2: [(Int, Int)] = []<br>for x in 1...10 {<br>  for y in 1...10 where (x + y) &lt; 8 {<br>    l2.append((x, y))<br>  }<br>}<br></p><p>It could be achieved using an expression, but it’s pretty horrible too for several reasons:<br></p><p>let l3 = (1...10).flatMap { x in<br>  (1...10).map { y in (x,y) }<br>}.filter { (x, y) in x + y &lt; 8 }<br></p><p>(Maybe there’s a more elegant solution?)<br></p><p>If Swift had Comprehensions, they probably wouldn’t look exactly like the example below, but in my opinion it’s superior to the 2 code samples above.<br></p><p>l2 = [(x,y) for x in range(10) for y in range(10) if x + y &lt; 8]<br></p><p>Al<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/08edf5e8/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>Proposal: Python&#39;s list, generator, and dictionary comprehensions</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>December 17, 2015 at 08:00:00pm</p></header><div class="content"><p>Using a sequence meant to represent a [Cartesian Product](<br>https://github.com/griotspeak/CartesianProduct)<br></p><p>You can write this<br></p><p>        for (i, j) in (0...10) • (0...10) where i + j &lt; 8 {<br></p><p>            print(i)<br></p><p>        }<br></p><p><br></p><p>I am not dead set on the • operator as cartesian product and only added it<br>back in to demonstrate that this can be  *this* pretty.<br></p><p><br>TJ<br></p><p>On Thu, Dec 17, 2015 at 7:41 PM, Al Skipp via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On 17 Dec 2015, at 20:25, Liam Butler-Lawrence via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Comprehensions are great in Python. However, Swift can already do all of<br>&gt; these things via for...in, map() and/or generate().<br>&gt;<br>&gt;<br>&gt; Whether Comprehensions should be introduced to the language is worth<br>&gt; consideration (Are they vital? Probably not). But I don’t find the Swift<br>&gt; examples using ‘for&#39; statements particularly compelling. The ‘for’<br>&gt; statement needs to declare a mutable variable which is updated from within<br>&gt; the loop. It works, but it’s not particularly elegant.<br>&gt;<br>&gt; var l2: [(Int, Int)] = []<br>&gt; for x in 1...10 {<br>&gt;   for y in 1...10 where (x + y) &lt; 8 {<br>&gt;     l2.append((x, y))<br>&gt;   }<br>&gt; }<br>&gt;<br>&gt; It could be achieved using an expression, but it’s pretty horrible too for<br>&gt; several reasons:<br>&gt;<br>&gt; let l3 = (1...10).flatMap { x in<br>&gt;   (1...10).map { y in (x,y) }<br>&gt; }.filter { (x, y) in x + y &lt; 8 }<br>&gt;<br>&gt; (Maybe there’s a more elegant solution?)<br>&gt;<br>&gt; If Swift had Comprehensions, they probably wouldn’t look exactly like the<br>&gt; example below, but in my opinion it’s superior to the 2 code samples above.<br>&gt;<br>&gt; l2 = [(x,y) for x in range(10) for y in range(10) if x + y &lt; 8]<br>&gt;<br>&gt; Al<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/13694e5d/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>Proposal: Python&#39;s list, generator, and dictionary comprehensions</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>December 17, 2015 at 09:00:00pm</p></header><div class="content"><p>Amir, your proposal contradicts &quot;clarity over brevity&quot; principle. As pointed by Liam all those things are fairly easy to do without any major complexity.<br></p><p>Pozdrawiam – Regards,<br>Adrian Kashivskyy<br></p><p>&gt; Wiadomość napisana przez Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; w dniu 17.12.2015, o godz. 17:26:<br>&gt; <br>&gt; Python examples:<br>&gt; <br>&gt; l = [x*x for x in range(10)] // list comprehension<br>&gt; <br>&gt; l2 = [(x,y) for x in range(10) for y in range(10) if x + y &lt; 8] // another list comprehension<br>&gt; <br>&gt; g = (x*x for x in range(10)) // generator comprehension<br>&gt; <br>&gt; d = {x:x*x for x in range(10)} // dictionary comprehension<br>&gt; <br>&gt; <br>&gt; I think most programmers would like using these. They are concise and easy to understand.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/c9d3db7d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: Python&#39;s list, generator, and dictionary comprehensions</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>December 17, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; On Dec 17, 2015, at 3:27 PM, Adrian Kashivskyy &lt;adrian.kashivskyy at me.com&gt; wrote:<br>&gt; <br>&gt; Amir, your proposal contradicts &quot;clarity over brevity&quot; principle. As pointed by Liam all those things are fairly easy to do without any major complexity.<br>&gt; <br></p><p>I think the comprehensions are very clear though.<br></p><p>&gt; Pozdrawiam – Regards,<br>&gt; Adrian Kashivskyy<br>&gt; <br>&gt;&gt; Wiadomość napisana przez Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; w dniu 17.12.2015, o godz. 17:26:<br>&gt;&gt; <br>&gt;&gt; Python examples:<br>&gt;&gt; <br>&gt;&gt; l = [x*x for x in range(10)] // list comprehension<br>&gt;&gt; <br>&gt;&gt; l2 = [(x,y) for x in range(10) for y in range(10) if x + y &lt; 8] // another list comprehension<br>&gt;&gt; <br>&gt;&gt; g = (x*x for x in range(10)) // generator comprehension<br>&gt;&gt; <br>&gt;&gt; d = {x:x*x for x in range(10)} // dictionary comprehension<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I think most programmers would like using these. They are concise and easy to understand.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/6d8febcc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/49e77a417c2ab608756778c4a75ee14f?s=50"></div><header><strong>Proposal: Python&#39;s list, generator, and dictionary comprehensions</strong> from <string>Alex Popov</string> &lt;hello at alexpopov.ca&gt;<p>December 17, 2015 at 01:00:00pm</p></header><div class="content"><p>Data of 1: I misunderstood the second comprehension until I saw it written in<br>Swift, and I do know about list comprehensions from Erlang.<br></p><p>  <br></p><p>I agree that this seems to contradict &quot;clarity over brevity&quot;.<br></p><p>&lt;br  <br>—<br></p><p>Alex Popov Jr.<br></p><p>Principal iOS Developer | Shelfie<br></p><p>&gt; On Dec 17 2015, at 12:44 pm, Amir Michail via swift-evolution &amp;lt;swift-<br>evolution at swift.org&amp;gt; wrote:  <br>  <br></p><p>&gt;<br></p><p>&gt;&gt; On Dec 17, 2015, at 3:27 PM, Adrian Kashivskyy<br>&amp;lt;[adrian.kashivskyy at me.com](mailto:adrian.kashivskyy at me.com)&amp;gt; wrote:<br></p><p>&gt;&gt;<br></p><p>&gt;&gt;  <br></p><p>&gt;&gt;<br></p><p>&gt;&gt; Amir, your proposal contradicts &quot;clarity over brevity&quot; principle. As<br>pointed by Liam all those things are fairly easy to do without any major<br>complexity.  <br></p><p>&gt;&gt;<br></p><p>&gt;&gt;  <br></p><p>&gt;<br></p><p>&gt;  <br></p><p>&gt;<br></p><p>&gt; I think the comprehensions are very clear though.<br></p><p>&gt;<br></p><p>&gt;  <br></p><p>&gt;<br></p><p>&gt;&gt; Pozdrawiam – Regards,<br></p><p>&gt;&gt;<br></p><p>&gt;&gt; Adrian Kashivskyy<br></p><p>&gt;&gt;<br></p><p>&gt;&gt;  <br></p><p>&gt;&gt;<br></p><p>&gt;&gt;&gt; Wiadomość napisana przez Amir Michail via swift-evolution &amp;lt;[swift-<br>evolution at swift.org](mailto:swift-evolution at swift.org)&amp;gt; w dniu 17.12.2015,<br>o godz. 17:26:<br></p><p>&gt;&gt;&gt;<br></p><p>&gt;&gt;&gt;  <br></p><p>&gt;&gt;&gt;<br></p><p>&gt;&gt;&gt; Python examples:  <br>  <br>l = [x*x for x in range(10)] // list comprehension  <br>  <br>l2 = [(x,y) for x in range(10) for y in range(10) if x + y &amp;lt; 8] // another<br>list comprehension  <br>  <br>g = (x*x for x in range(10)) // generator comprehension  <br>  <br>d = {x:x*x for x in range(10)} // dictionary comprehension  <br>  <br>  <br>I think most programmers would like using these. They are concise and easy to<br>understand.  <br>  <br>_______________________________________________  <br>swift-evolution mailing list  <br>[swift-evolution at swift.org](mailto:swift-evolution at swift.org)  <br>&lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;  <br></p><p>&gt;&gt;<br></p><p>&gt;&gt;  <br></p><p>&gt;<br></p><p>&gt;  <br>![](https://u2002410.ct.sendgrid.net/wf/open?upn=CmwAv3oRa0AH4Hd1bWC6X-<br>2BzbhPqo1YEo6mPHEujr90sblMts0lyHPlhqzvj-2Fp-2BC5OEMkczNuE6qNGof856voE-<br>2BZnswBliGIoLaS-2BjycYlE0gnxN5cGJ98YQMEUtmMgZFbBpSh1ddBJSm21Gb1SvtRV0<br>-2BUl5I9pgd4gfaSj3QH9liTjcXY0B-2FKLe-<br>2BGskz0t2ZkdLzgQYgLttL6QnIT6UrERxZgyT9dQfFRCqL1CVFzAU-3D)<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/f602d4c4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>Proposal: Python&#39;s list, generator, and dictionary comprehensions</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>December 17, 2015 at 10:00:00pm</p></header><div class="content"><p>Yup, I thought it zips them (creates pairs of (1, 1), (2, 2), (3, 3), etc.).<br></p><p>Pozdrawiam – Regards,<br>Adrian Kashivskyy<br></p><p>&gt; Wiadomość napisana przez Alex Popov via swift-evolution &lt;swift-evolution at swift.org&gt; w dniu 17.12.2015, o godz. 22:50:<br>&gt; <br>&gt; Data of 1: I misunderstood the second comprehension until I saw it written in Swift, and I do know about list comprehensions from Erlang. <br>&gt; <br>&gt; I agree that this seems to contradict &quot;clarity over brevity&quot;.<br>&gt; <br>&gt; <br>&gt; —<br>&gt; Alex Popov Jr.<br>&gt; Principal iOS Developer | Shelfie<br>&gt; <br>&gt; <br>&gt; On Dec 17 2015, at 12:44 pm, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote: <br>&gt; <br>&gt;&gt; On Dec 17, 2015, at 3:27 PM, Adrian Kashivskyy &lt;adrian.kashivskyy at me.com &lt;mailto:adrian.kashivskyy at me.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Amir, your proposal contradicts &quot;clarity over brevity&quot; principle. As pointed by Liam all those things are fairly easy to do without any major complexity.<br>&gt;&gt; <br>&gt; <br>&gt; I think the comprehensions are very clear though.<br>&gt; <br>&gt;&gt; Pozdrawiam – Regards,<br>&gt;&gt; Adrian Kashivskyy<br>&gt;&gt; <br>&gt;&gt;&gt; Wiadomość napisana przez Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; w dniu 17.12.2015, o godz. 17:26:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Python examples:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; l = [x*x for x in range(10)] // list comprehension<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; l2 = [(x,y) for x in range(10) for y in range(10) if x + y &lt; 8] // another list comprehension<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; g = (x*x for x in range(10)) // generator comprehension<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; d = {x:x*x for x in range(10)} // dictionary comprehension<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think most programmers would like using these. They are concise and easy to understand.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/63e2f745/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Proposal: Python&#39;s list, generator, and dictionary comprehensions</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December 18, 2015 at 09:00:00pm</p></header><div class="content"><p>-1 from me. I find list comprehensions, on average, roughly as concise as methods on SequenceType, and generally harder to understand as soon as you have more than one collection.<br></p><p>Jordan<br></p><p>&gt; On Dec 17, 2015, at 8:26 , Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Python examples:<br>&gt; <br>&gt; l = [x*x for x in range(10)] // list comprehension<br>&gt; <br>&gt; l2 = [(x,y) for x in range(10) for y in range(10) if x + y &lt; 8] // another list comprehension<br>&gt; <br>&gt; g = (x*x for x in range(10)) // generator comprehension<br>&gt; <br>&gt; d = {x:x*x for x in range(10)} // dictionary comprehension<br>&gt; <br>&gt; <br>&gt; I think most programmers would like using these. They are concise and easy to understand.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
