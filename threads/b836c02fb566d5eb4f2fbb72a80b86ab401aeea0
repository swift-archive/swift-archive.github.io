<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Splat</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 10, 2016 at 01:00:00pm</p></header><div class="content"><p>on Wed Feb 10 2016, Brent Royal-Gordon &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; So, since SE-0029 has been accepted, let&#39;s think about explicit<br>&gt; replacements. So far, I&#39;ve been able to think of three general<br>&gt; approaches. For the examples below, I&#39;ll assume there&#39;s a `func<br>&gt; concatenate(number: Int, to string: String) -&gt; String`, which does the<br>&gt; obvious thing. Where supported, I will fully qualify names with<br>&gt; SE-0021 syntax, but in some cases this might not be necessary.<br></p><p>Small request: please accompany proposal numbers with a title or link.<br>Thanks!<br></p><p>&gt;<br>&gt; 		1. Special parameter label.<br>&gt;<br>&gt; `concatenate` is implicitly overloaded with a `func<br>&gt; concatenate(parameters: (Int, String)) -&gt; String`.<br>&gt;<br>&gt; 	concatenate(parameters: tuple)<br>&gt; 	tuples.map(concatenate(parameters:))<br>&gt;<br>&gt; Advantages: <br>&gt; - Does not require any new call-side syntax.<br>&gt; - Googleable thanks to use of identifiers.<br>&gt;<br>&gt; Disadvantages:<br>&gt; - Could conflict with functions that use `parameters` as an argument<br>&gt; label.<br>&gt; - Not clear how it would distinguish between `concatenate(_:to:)` and<br>&gt; e.g. `concatenate(_:with:)`.<br>&gt; - Might reintroduce type checking complexity, since it&#39;s adding<br>&gt; overloads.<br>&gt; - A bit wordy.<br>&gt; - As far as I know, not precedented in other languages.<br>&gt;<br>&gt; 		2. Method on functions.<br>&gt;<br>&gt; `concatenate` has a method on it called, say, `apply(to:)` which takes<br>&gt; a tuple of parameters.<br>&gt;<br>&gt; 	concatenate(_:to:).apply(to: tuple)<br>&gt; 	tuples.map(concatenate(_:to:).apply(to:))<br>&gt;<br>&gt; Advantages:<br>&gt; - You can be sure of the variant you&#39;re selecting.<br>&gt; - Googleable thanks to use of identifiers.<br>&gt; - Similar to usage in Javascript.<br>&gt;<br>&gt; Disadvantages:<br>&gt; - Rather wordy, with lots of chaining and extra parentheses.<br>&gt; - Methods on unapplied functions might be a little confusing.<br>&gt;<br>&gt; 		3. Splat operator.<br>&gt;<br>&gt; An operator like `*` is used to indicate splatting. A tuple can be put<br>&gt; to the right of the operator to splat it in immediately, or it can be<br>&gt; omitted to select a splattable version of the function.<br>&gt;<br>&gt; 	concatenate(_:to: *tuple)<br>&gt; 	tuples.map(concatenate(_:to: *))<br>&gt;<br>&gt; Advantages:<br>&gt; - You can be sure of the variant you&#39;re selecting.<br>&gt; - Similar to usage in Ruby and Perl 6.<br>&gt; - Fairly short in all forms.<br>&gt;<br>&gt; Disadvantages:<br>&gt; - Not Googleable.<br>&gt; - New magic syntax.<br>&gt; - Two slightly different forms depending on whether you&#39;re calling or<br>&gt; not.<br>&gt;<br>&gt; Any thoughts on these, or alternative approaches (as opposed to small<br>&gt; syntax tweaks)?<br>&gt;<br>&gt; P.S. As for pointers potentially using prefix `*` for memory<br>&gt; dereferencing, I would instead make them use postfix `!`. `!` could<br>&gt; become an `unwrapped` pseudo-property that any type can use,<br>&gt; democratizing another piece of `Optional` magic and working around the<br>&gt; vexing problem of what you name the `Pointer` property for &quot;that thing<br>&gt; you&#39;re actually pointing to&quot;.<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
