<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2bbba677a69c179b3e6bfb9a88a3fd8d?s=50"></div><header><strong>Pure Swift, cross platform way to open, read/write files?</strong> from <string>Greg Skluzacek</string> &lt;swftcdnnj at gmail.com&gt;<p>December  7, 2015 at 09:00:00pm</p></header><div class="content"><p>Hi new to Swift and I am really excited that Apple has open sourced it! I<br>use macs at home an Linux at work, so now I may actually be able to develop<br>in one language on both platforms (and not use Java).<br></p><p>That being said, is there a way open a file for either reading line by line<br>and writing line by line that is done purely in Swift and is cross platform.<br></p><p>I did go through the Getting Started page and saw that one was able to<br>import Glibc on Linux which implements the C fopen, etc., but when I tried<br>to import it in the REPL on OS X, I got the error:<br></p><p>repl.swift:1:8: error: no such module &#39;Glibc&#39;<br></p><p>import Glibc<br></p><p>       ^<br></p><p>swift --version returns:<br></p><p>Chateau-Louise:/ gskluzacek$ swift --version<br></p><p>Apple Swift version 2.1 (swiftlang-700.1.101.6 clang-700.1.76)<br></p><p>Target: x86_64-apple-darwin14.5.0<br></p><p>Chateau-Louise:/ gskluzacek$<br></p><p>Thanks,<br>-- Greg<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151207/e893521d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/355cfb661f7d21135ffd756f4059d982?s=50"></div><header><strong>Pure Swift, cross platform way to open, read/write files?</strong> from <string>Kwame Bryan</string> &lt;kwame.bryan at gmail.com&gt;<p>December  7, 2015 at 10:00:00pm</p></header><div class="content"><p>Hi Greg, you’ll need to do something like the following.<br>#if os(Linux)<br>    import Glibc<br>#else<br>    import Darwin<br>#endif<br>Also, take a look at this blog post. http://blog.krzyzanowskim.com/2015/12/04/swift-package-manager-and-linux-compatible/ &lt;http://blog.krzyzanowskim.com/2015/12/04/swift-package-manager-and-linux-compatible/&gt; Hope this helps.<br></p><p>Kwame<br></p><p>&gt; On Dec 7, 2015, at 10:47 PM, Greg Skluzacek via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi new to Swift and I am really excited that Apple has open sourced it! I use macs at home an Linux at work, so now I may actually be able to develop in one language on both platforms (and not use Java).<br>&gt; <br>&gt; That being said, is there a way open a file for either reading line by line and writing line by line that is done purely in Swift and is cross platform.<br>&gt; <br>&gt; I did go through the Getting Started page and saw that one was able to import Glibc on Linux which implements the C fopen, etc., but when I tried to import it in the REPL on OS X, I got the error:<br>&gt; <br>&gt; repl.swift:1:8: error: no such module &#39;Glibc&#39;<br>&gt; import Glibc<br>&gt;        ^<br>&gt; <br>&gt; swift --version returns:<br>&gt; <br>&gt; Chateau-Louise:/ gskluzacek$ swift --version<br>&gt; Apple Swift version 2.1 (swiftlang-700.1.101.6 clang-700.1.76)<br>&gt; Target: x86_64-apple-darwin14.5.0<br>&gt; Chateau-Louise:/ gskluzacek$ <br>&gt; <br>&gt; Thanks,<br>&gt; -- Greg<br>&gt;  _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151207/b1b0f0cd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2bbba677a69c179b3e6bfb9a88a3fd8d?s=50"></div><header><strong>Pure Swift, cross platform way to open, read/write files?</strong> from <string>Greg Skluzacek</string> &lt;swftcdnnj at gmail.com&gt;<p>December  8, 2015 at 10:00:00pm</p></header><div class="content"><p>Thanks for that blog post... perhaps I wasn&#39;t clear in what my actual<br>question was. Let me restate:<br></p><p>Obviously I can use Glibc on Linux to open a file and read it. And since<br>there is no Glibc on OS X, is there some other way that would be both CROSS<br>PLATFORM and done purely in swift instead of relying on some external C<br>library?<br></p><p>I&#39;ve taken a cursory look at some of the early swift resources and didn&#39;t<br>see anything that mentioned how to open a file using JUST Native Swift<br>code... One would surely think that a programing language as nifty and cool<br>as Swift would have a easy way to read files. Maybe its obvious and I just<br>am missing it.<br></p><p>But at the same time I get your point just use #if #else #endif to<br>conditional import / call functions... but coding like that doesn&#39;t seem<br>vary fun... reminds me of looking a C code that was meant to be compiled on<br>different processor architectures. :-(<br></p><p>--Greg<br></p><p><br></p><p>On Mon, Dec 7, 2015 at 9:51 PM, Kwame Bryan &lt;kwame.bryan at gmail.com&gt; wrote:<br></p><p>&gt; Hi Greg, you’ll need to do something like the following.<br>&gt;<br>&gt; #if os(Linux)<br>&gt;     import Glibc<br>&gt; #else<br>&gt;     import Darwin<br>&gt; #endif<br>&gt;<br>&gt; Also, take a look at this blog post.<br>&gt; http://blog.krzyzanowskim.com/2015/12/04/swift-package-manager-and-linux-compatible/ Hope<br>&gt; this helps.<br>&gt;<br>&gt; Kwame<br>&gt;<br>&gt; On Dec 7, 2015, at 10:47 PM, Greg Skluzacek via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; Hi new to Swift and I am really excited that Apple has open sourced it! I<br>&gt; use macs at home an Linux at work, so now I may actually be able to develop<br>&gt; in one language on both platforms (and not use Java).<br>&gt;<br>&gt; That being said, is there a way open a file for either reading line by<br>&gt; line and writing line by line that is done purely in Swift and is cross<br>&gt; platform.<br>&gt;<br>&gt; I did go through the Getting Started page and saw that one was able to<br>&gt; import Glibc on Linux which implements the C fopen, etc., but when I tried<br>&gt; to import it in the REPL on OS X, I got the error:<br>&gt;<br>&gt; repl.swift:1:8: error: no such module &#39;Glibc&#39;<br>&gt; import Glibc<br>&gt;        ^<br>&gt;<br>&gt; swift --version returns:<br>&gt;<br>&gt; Chateau-Louise:/ gskluzacek$ swift --version<br>&gt; Apple Swift version 2.1 (swiftlang-700.1.101.6 clang-700.1.76)<br>&gt; Target: x86_64-apple-darwin14.5.0<br>&gt; Chateau-Louise:/ gskluzacek$<br>&gt;<br>&gt; Thanks,<br>&gt; -- Greg<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151208/7bbb3205/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Pure Swift, cross platform way to open, read/write files?</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December  8, 2015 at 08:00:00pm</p></header><div class="content"><p>&gt; But at the same time I get your point just use #if #else #endif to conditional import / call functions... but coding like that doesn&#39;t seem vary fun... reminds me of looking a C code that was meant to be compiled on different processor architectures. :-( <br></p><p>I would really like to see Swift offer a “POSIX” or “LibC” module which would import whatever the current platform offered for a C library. Obviously there would be differences between Glibc and Darwin.C, and I wouldn’t expect Swift to try to paper those over, but this `#if os` dance in every file is kind of ridiculous.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Pure Swift, cross platform way to open, read/write files?</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  8, 2015 at 09:00:00pm</p></header><div class="content"><p>&gt; On Dec 8, 2015, at 8:55 PM, Brent Royal-Gordon via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; But at the same time I get your point just use #if #else #endif to conditional import / call functions... but coding like that doesn&#39;t seem vary fun... reminds me of looking a C code that was meant to be compiled on different processor architectures. :-( <br>&gt; <br>&gt; I would really like to see Swift offer a “POSIX” or “LibC” module which would import whatever the current platform offered for a C library. Obviously there would be differences between Glibc and Darwin.C, and I wouldn’t expect Swift to try to paper those over, but this `#if os` dance in every file is kind of ridiculous.<br></p><p>+1<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f6b43a34278b86fef0fb5aad3771d7b?s=50"></div><header><strong>Pure Swift, cross platform way to open, read/write files?</strong> from <string>Perry E. Metzger</string> &lt;perry at piermont.com&gt;<p>December  9, 2015 at 09:00:00am</p></header><div class="content"><p>On Tue, 8 Dec 2015 21:09:33 -0800 Chris Lattner via swift-users<br>&lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; &gt; On Dec 8, 2015, at 8:55 PM, Brent Royal-Gordon via swift-users<br>&gt; &gt; &lt;swift-users at swift.org&gt; wrote:<br>&gt; &gt; <br>&gt; &gt;&gt; But at the same time I get your point just use #if #else #endif<br>&gt; &gt;&gt; to conditional import / call functions... but coding like that<br>&gt; &gt;&gt; doesn&#39;t seem vary fun... reminds me of looking a C code that was<br>&gt; &gt;&gt; meant to be compiled on different processor architectures. :-( <br>&gt; &gt; <br>&gt; &gt; I would really like to see Swift offer a &quot;POSIX&quot; or &quot;LibC&quot; module<br>&gt; &gt; which would import whatever the current platform offered for a C<br>&gt; &gt; library. Obviously there would be differences between Glibc and<br>&gt; &gt; Darwin.C, and I wouldn&#39;t expect Swift to try to paper those over,<br>&gt; &gt; but this `#if os` dance in every file is kind of ridiculous.<br>&gt; <br>&gt; +1<br></p><p>Going through the SUX (http://www.unix.org/online.html ) and reading<br>the available APIs will probably be inspirational for what&#39;s needed<br>for a POSIX module, and all sorts of things like sockets with a Swifty<br>flavor are probably needed in the short term, but a good start would<br>just be a Swifty version of stdio.<br></p><p>I recommend re-implementing stdio in pure Swift rather than just<br>wrapping the C library. This will make the swift code immune to safety<br>bugs in an underlying C implementation, and translating the existing<br>open source BSD stdio will not be onerous.<br></p><p>This will also require a bit of design to look &quot;Swifty&quot;. An IO<br>interface, for example, so that IO to various kinds of things can all<br>inherit a common API would be useful. (Imagine, later on, being able<br>to do things like pushing a TLS library on top of an underlying<br>socket and having the interface remain entirely clean and unchanged.)<br></p><p>A lower layer is also needed -- simple Swifty wrappers for the Unix<br>system calls so that Swift implementations can get at them without<br>having to use unsafe constructs. open(2), read(2), write(2), lseek(2)<br>and close(2) would provide about 75% of what one needs for the higher<br>layer stuff (and everything one would want for stdio) with quite<br>minimal hacking.<br></p><p>Perry<br>-- <br>Perry E. Metzger		perry at piermont.com<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Pure Swift, cross platform way to open, read/write files?</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>December  9, 2015 at 09:00:00am</p></header><div class="content"><p>&gt; On Dec 9, 2015, at 6:40 AM, Perry E. Metzger via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; This will also require a bit of design to look &quot;Swifty”.<br></p><p>Yes, amen. The thought of a Swift bridge to the standard C library gives me queasy thoughts of PHP, whose core APIs are a horrible pidgin translation of C.<br></p><p>An I/O library should begin with an abstract stream API, which can then be given a concrete file-descriptor-based implementation that can be used for files, sockets, etc. (Although the fact that it’s based on file descriptors should be hidden.)<br></p><p>IMHO one of the biggest design problems of Foundation is that it has very weak support for streams. NSStream is very difficult to subclass, and most I/O doesn’t even use it, so there are historical remnants like NSFileHandle and high-level alternatives like -[NSData initWithContentsOfFile:] that everyone ends up using.<br></p><p>&gt; A lower layer is also needed -- simple Swifty wrappers for the Unix<br>&gt; system calls so that Swift implementations can get at them without<br>&gt; having to use unsafe constructs. open(2), read(2), write(2), lseek(2)<br>&gt; and close(2) would provide about 75% of what one needs for the higher<br>&gt; layer stuff (and everything one would want for stdio) with quite<br>&gt; minimal hacking.<br></p><p>I agree, but I foresee problems in the future when Swift is ported to Windows. :/<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151209/2eb159c9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f6b43a34278b86fef0fb5aad3771d7b?s=50"></div><header><strong>Pure Swift, cross platform way to open, read/write files?</strong> from <string>Perry E. Metzger</string> &lt;perry at piermont.com&gt;<p>December  9, 2015 at 12:00:00pm</p></header><div class="content"><p>On Wed, 9 Dec 2015 09:36:01 -0800 Jens Alfke &lt;jens at mooseyard.com&gt;<br>wrote:<br>&gt; &gt; A lower layer is also needed -- simple Swifty wrappers for the<br>&gt; &gt; Unix system calls so that Swift implementations can get at them<br>&gt; &gt; without having to use unsafe constructs. open(2), read(2),<br>&gt; &gt; write(2), lseek(2) and close(2) would provide about 75% of what<br>&gt; &gt; one needs for the higher layer stuff (and everything one would<br>&gt; &gt; want for stdio) with quite minimal hacking.<br>&gt; <br>&gt; I agree, but I foresee problems in the future when Swift is ported<br>&gt; to Windows. :/<br></p><p>I&#39;m a big believer in not prematurely generalizing an implementation.<br>APIs last a long time, implementations can be redone later. :)<br></p><p>-- <br>Perry E. Metzger		perry at piermont.com<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae51ca494b37cc270597830da66f089f?s=50"></div><header><strong>Pure Swift, cross platform way to open, read/write files?</strong> from <string>Max Howell</string> &lt;max.howell at apple.com&gt;<p>December  9, 2015 at 10:00:00am</p></header><div class="content"><p>I feel I must point the community at:<br></p><p>https://github.com/apple/swift-package-manager/tree/master/Sources/POSIX<br></p><p>Which is mostly what I think you are calling the lower layer.<br></p><p>&gt;&gt;&gt; A lower layer is also needed -- simple Swifty wrappers for the<br>&gt;&gt;&gt; Unix system calls so that Swift implementations can get at them<br>&gt;&gt;&gt; without having to use unsafe constructs. open(2), read(2),<br>&gt;&gt;&gt; write(2), lseek(2) and close(2) would provide about 75% of what<br>&gt;&gt;&gt; one needs for the higher layer stuff (and everything one would<br>&gt;&gt;&gt; want for stdio) with quite minimal hacking.<br>&gt;&gt; <br>&gt;&gt; I agree, but I foresee problems in the future when Swift is ported<br>&gt;&gt; to Windows. :/<br>&gt; <br>&gt; I&#39;m a big believer in not prematurely generalizing an implementation.<br>&gt; APIs last a long time, implementations can be redone later. :)<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f6b43a34278b86fef0fb5aad3771d7b?s=50"></div><header><strong>Pure Swift, cross platform way to open, read/write files?</strong> from <string>Perry E. Metzger</string> &lt;perry at piermont.com&gt;<p>December  9, 2015 at 02:00:00pm</p></header><div class="content"><p>On Wed, 09 Dec 2015 10:25:11 -0800 Max Howell &lt;max.howell at apple.com&gt;<br>wrote:<br>&gt; I feel I must point the community at:<br>&gt; <br>&gt; https://github.com/apple/swift-package-manager/tree/master/Sources/POSIX<br>&gt; <br>&gt; Which is mostly what I think you are calling the lower layer.<br></p><p>It looks like a start. Some of it (say the unlink routine) is what you<br>want, but some seems to be too high level, i.e. bindings against<br>library calls rather than system calls (i.e. things calling in to C<br>at the fopen/fputs layer rather than the open/write).<br></p><p>One would really like to re-implement the stdio stuff rather than<br>simply rebinding the C implementation. The implementation of much of<br>the stuff isn&#39;t very deep, and avoiding the potential safety issues<br>in the C library would be nice. (stdio only looks scary -- it is<br>mostly just a buffering layer above read(2)/write(2) plus some<br>formatting.)<br></p><p>Perry<br></p><p>&gt; <br>&gt; &gt;&gt;&gt; A lower layer is also needed -- simple Swifty wrappers for the<br>&gt; &gt;&gt;&gt; Unix system calls so that Swift implementations can get at them<br>&gt; &gt;&gt;&gt; without having to use unsafe constructs. open(2), read(2),<br>&gt; &gt;&gt;&gt; write(2), lseek(2) and close(2) would provide about 75% of what<br>&gt; &gt;&gt;&gt; one needs for the higher layer stuff (and everything one would<br>&gt; &gt;&gt;&gt; want for stdio) with quite minimal hacking.<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; I agree, but I foresee problems in the future when Swift is<br>&gt; &gt;&gt; ported to Windows. :/<br>&gt; &gt; <br>&gt; &gt; I&#39;m a big believer in not prematurely generalizing an<br>&gt; &gt; implementation. APIs last a long time, implementations can be<br>&gt; &gt; redone later. :)<br>&gt; <br></p><p><br></p><p>-- <br>Perry E. Metzger		perry at piermont.com<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Pure Swift, cross platform way to open, read/write files?</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>December  8, 2015 at 10:00:00pm</p></header><div class="content"><p>&gt; On Dec 8, 2015, at 8:45 PM, Greg Skluzacek via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; One would surely think that a programing language as nifty and cool as Swift would have a easy way to read files. Maybe its obvious and I just am missing it.<br></p><p>File I/O isn’t usually part of a language, it’s part of a library. Until now Swift has been able to depend on the Foundation framework, which includes APIs for files. Taking Swift cross-platform severed it from the Cocoa frameworks, so one of the resulting challenges is to create cross-platform libraries to do basic things like file I/O. Those are in development (the Core Libraries project.)<br></p><p>(Another hole in the standard library is that it’s ridiculously complex to create a String from a UTF-8 encoded byte array without “cheating” and using Foundation’s NSString API.)<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151208/483e6ea1/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
