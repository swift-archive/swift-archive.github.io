<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0089: Renaming String.init&lt;T&gt;(_: T)</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May 20, 2016 at 05:00:00pm</p></header><div class="content"><p>on Fri May 20 2016, Kevin Ballard &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Tue, May 17, 2016, at 08:32 PM, Chris Lattner via swift-evolution wrote:<br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;<br>&gt; I&#39;m a little nervous about this change, because converting things to<br>&gt; strings is a fairly basic operation and it should be immediately<br>&gt; obvious how to do that. That said, the described issues are pretty<br>&gt; bad, and I know I&#39;ve had to carefully triple-check sometimes to make<br>&gt; sure I was calling the right initializer. So I&#39;m +1 on the idea.<br>&gt;<br>&gt; That said, I don&#39;t like the name String(printing:). As others have<br>&gt; pointed out, it sounds like this is related to print(), but this<br>&gt; initializer does not actually print anything, it just converts any<br>&gt; value into a string. I also don&#39;t like String(describing:) because<br>&gt; it&#39;s too long. This initializer should be easier to call than<br>&gt; String(reflecting:). Also, in my experience this initializer is<br>&gt; particularly useful with code of the form `someOpt.map(String.init)`,<br>&gt; and saying `someOpt.map(String.init(describing:))` is annoyingly long.<br>&gt;<br>&gt; Given this, I&#39;d like to suggest the simpler `String(from:)`. It&#39;s<br>&gt; short and generic, and it makes sense as it creates a String from any<br>&gt; value.<br></p><p>Not too bad.  I could live with it.<br></p><p>&gt; I&#39;m also not a fan of Dave&#39;s suggestion of removing this initializer<br>&gt; entirely in favor of &quot;\(foo)&quot;.  This feels weird, and it also can&#39;t be<br>&gt; turned into a first-class function value.<br></p><p>  { &quot;\($0)&quot; }<br></p><p>?<br></p><p>&gt; I also think that this approach may encourage people to start using<br>&gt; the .description property instead, even though accessing this property<br>&gt; is discouraged.<br>&gt;<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;<br>&gt; Yes.<br>&gt;<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt; Yes. Initializers that take one unlabeled argument are typically used<br>&gt; for full-width conversions, and I don&#39;t think this initializer<br>&gt; qualifies as a full-width conversion.<br>&gt;<br>&gt;&gt; 	* If you have used other languages or libraries with a similar<br>&gt;&gt; feature, how do you feel that this proposal compares to those?<br>&gt;<br>&gt; Some languages have a global function that does this, such as Python&#39;s<br>&gt; str(foo) or Haskell&#39;s `show`. Some languages have a method/property,<br>&gt; such as Obj-C (-description) and Ruby (foo.to_s(), though I believe<br>&gt; you can also say String(foo)). I&#39;m not aware of any languages that<br>&gt; require string interpolation for this functionality. Keeping the<br>&gt; initializer and just giving it a label is similar to a global function<br>&gt; or to Ruby&#39;s String(foo). Removing the initializer in favor of just<br>&gt; just string interpolation does not compare to any language I know of.<br>&gt;<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;<br>&gt; A quick reading of the proposal, and a reading of the review thread to date.<br>&gt;<br>&gt; -Kevin Ballard<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Review] SE-0089: Renaming String.init&lt;T&gt;(_: T)</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>May 20, 2016 at 05:00:00pm</p></header><div class="content"><p>On Fri, May 20, 2016, at 05:14 PM, Dave Abrahams via swift-evolution wrote:<br>&gt; <br>&gt; on Fri May 20 2016, Kevin Ballard &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; &gt; On Tue, May 17, 2016, at 08:32 PM, Chris Lattner via swift-evolution wrote:<br>&gt; &gt;&gt; 	* What is your evaluation of the proposal?<br>&gt; &gt;<br>&gt; &gt; I&#39;m a little nervous about this change, because converting things to<br>&gt; &gt; strings is a fairly basic operation and it should be immediately<br>&gt; &gt; obvious how to do that. That said, the described issues are pretty<br>&gt; &gt; bad, and I know I&#39;ve had to carefully triple-check sometimes to make<br>&gt; &gt; sure I was calling the right initializer. So I&#39;m +1 on the idea.<br>&gt; &gt;<br>&gt; &gt; That said, I don&#39;t like the name String(printing:). As others have<br>&gt; &gt; pointed out, it sounds like this is related to print(), but this<br>&gt; &gt; initializer does not actually print anything, it just converts any<br>&gt; &gt; value into a string. I also don&#39;t like String(describing:) because<br>&gt; &gt; it&#39;s too long. This initializer should be easier to call than<br>&gt; &gt; String(reflecting:). Also, in my experience this initializer is<br>&gt; &gt; particularly useful with code of the form `someOpt.map(String.init)`,<br>&gt; &gt; and saying `someOpt.map(String.init(describing:))` is annoyingly long.<br>&gt; &gt;<br>&gt; &gt; Given this, I&#39;d like to suggest the simpler `String(from:)`. It&#39;s<br>&gt; &gt; short and generic, and it makes sense as it creates a String from any<br>&gt; &gt; value.<br>&gt; <br>&gt; Not too bad.  I could live with it.<br></p><p>ðŸ˜€<br></p><p>&gt; &gt; I&#39;m also not a fan of Dave&#39;s suggestion of removing this initializer<br>&gt; &gt; entirely in favor of &quot;\(foo)&quot;.  This feels weird, and it also can&#39;t be<br>&gt; &gt; turned into a first-class function value.<br>&gt; <br>&gt;   { &quot;\($0)&quot; }<br>&gt; <br>&gt; ?<br></p><p>Good point. I think what I intended to express was you cannot refer to this operation by name anymore. Maybe not a big deal, but it feels weird.<br></p><p>-Kevin Ballard<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Review] SE-0089: Renaming String.init&lt;T&gt;(_: T)</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>May 21, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On May 21, 2016, at 2:14 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; on Fri May 20 2016, Kevin Ballard &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Tue, May 17, 2016, at 08:32 PM, Chris Lattner via swift-evolution wrote:<br>&gt;&gt;&gt;    * What is your evaluation of the proposal?<br>&gt;&gt; <br>&gt;&gt; I&#39;m a little nervous about this change, because converting things to<br>&gt;&gt; strings is a fairly basic operation and it should be immediately<br>&gt;&gt; obvious how to do that. That said, the described issues are pretty<br>&gt;&gt; bad, and I know I&#39;ve had to carefully triple-check sometimes to make<br>&gt;&gt; sure I was calling the right initializer. So I&#39;m +1 on the idea.<br>&gt;&gt; <br>&gt;&gt; That said, I don&#39;t like the name String(printing:). As others have<br>&gt;&gt; pointed out, it sounds like this is related to print(), but this<br>&gt;&gt; initializer does not actually print anything, it just converts any<br>&gt;&gt; value into a string. I also don&#39;t like String(describing:) because<br>&gt;&gt; it&#39;s too long. This initializer should be easier to call than<br>&gt;&gt; String(reflecting:). Also, in my experience this initializer is<br>&gt;&gt; particularly useful with code of the form `someOpt.map(String.init)`,<br>&gt;&gt; and saying `someOpt.map(String.init(describing:))` is annoyingly long.<br>&gt;&gt; <br>&gt;&gt; Given this, I&#39;d like to suggest the simpler `String(from:)`. It&#39;s<br>&gt;&gt; short and generic, and it makes sense as it creates a String from any<br>&gt;&gt; value.<br>&gt; <br>&gt; Not too bad.  I could live with it.<br>&gt; <br>&gt;&gt; I&#39;m also not a fan of Dave&#39;s suggestion of removing this initializer<br>&gt;&gt; entirely in favor of &quot;\(foo)&quot;.  This feels weird, and it also can&#39;t be<br>&gt;&gt; turned into a first-class function value.<br>&gt; <br>&gt;  { &quot;\($0)&quot; }<br>&gt; <br>&gt; ?<br></p><p>Yeah... Perl is back.. <br>Mr Swift o&#39; please, can we have some syntax sugering for this? Please, o&#39; please :)<br></p><p><br>&gt; <br>&gt;&gt; I also think that this approach may encourage people to start using<br>&gt;&gt; the .description property instead, even though accessing this property<br>&gt;&gt; is discouraged.<br>&gt;&gt; <br>&gt;&gt;&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; <br>&gt;&gt; Yes.<br>&gt;&gt; <br>&gt;&gt;&gt;    * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; <br>&gt;&gt; Yes. Initializers that take one unlabeled argument are typically used<br>&gt;&gt; for full-width conversions, and I don&#39;t think this initializer<br>&gt;&gt; qualifies as a full-width conversion.<br>&gt;&gt; <br>&gt;&gt;&gt;    * If you have used other languages or libraries with a similar<br>&gt;&gt;&gt; feature, how do you feel that this proposal compares to those?<br>&gt;&gt; <br>&gt;&gt; Some languages have a global function that does this, such as Python&#39;s<br>&gt;&gt; str(foo) or Haskell&#39;s `show`. Some languages have a method/property,<br>&gt;&gt; such as Obj-C (-description) and Ruby (foo.to_s(), though I believe<br>&gt;&gt; you can also say String(foo)). I&#39;m not aware of any languages that<br>&gt;&gt; require string interpolation for this functionality. Keeping the<br>&gt;&gt; initializer and just giving it a label is similar to a global function<br>&gt;&gt; or to Ruby&#39;s String(foo). Removing the initializer in favor of just<br>&gt;&gt; just string interpolation does not compare to any language I know of.<br>&gt;&gt; <br>&gt;&gt;&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; A quick reading of the proposal, and a reading of the review thread to date.<br>&gt;&gt; <br>&gt;&gt; -Kevin Ballard<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
