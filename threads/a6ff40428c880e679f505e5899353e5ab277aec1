<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1ca49cd3335ea901615e52fc87e71372?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Sean Alling</string> &lt;allings at icloud.com&gt;<p>July 31, 2016 at 04:00:00pm</p></header><div class="content"><p>I disagree with this suggestion.  Both a protocol conformance &amp; class inheritance define behavior conformance.  If anything the protocol is more explicitly shown because the required properties and methods are conformed to within its declaration.<br></p><p>We used to define protocol conformance like so:  &lt;myProtocol&gt;<br>This was removed to make protocol-oriented programming a bit more powerful I’d suspect.  Also, it reads much easier in the current syntax.  <br></p><p>If we were to change it, I would suggest a keyword ‘conform’ because your suggested operators don’t make it explicit what behavior is being defined. Whereas, the current syntax behavior is simple and easily understood.<br></p><p>Sean<br></p><p><br></p><p><br>&gt; I remember that this was discussed, but can&#39;t find any decision regarding<br>&gt; this.. So, as a last chance, don&#39;t we want in Swift 3.0, as big source<br>&gt; breaking change, separate class inheritance and protocol conformance in syntax?<br>&gt; <br>&gt; Sorry if there was a decision about this suggestions. Please let know in<br>&gt; this case.<br>&gt; <br>&gt; I.e. when I see the following I can&#39;t understand if the class inherits from<br>&gt; base class and conforms to protocols or just conforms to two protocols:<br>&gt; <br>&gt; class MyClass : First, Second, Third {<br>&gt; }<br>&gt; <br>&gt; We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other suffix/prefix,<br>&gt; or classes with &#39;T&#39;/&#39;C&#39; prefix or something like this, so I believe to<br>&gt; improve the clarity of code we should separate in syntax inheritance and<br>&gt; conformance.<br>&gt; <br>&gt; As I understand we should discuss changes in these areas:<br>&gt; <br>&gt; 1. class inheritance :<br>&gt; class Child: BaseClass<br>&gt; <br>&gt; 2. class conformance :<br>&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 3. class inheritance + conformance :<br>&gt; class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 4. protocol conformance for structs:<br>&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 5. protocol inheritance:<br>&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt; <br>&gt; <br>&gt; My suggestions:<br>&gt; <br>&gt; I) separate inheritance with double colon :<br>&gt; <br>&gt; 1. class inheritance :<br>&gt; class Child:: BaseClass<br>&gt; <br>&gt; 2. class conformance :<br>&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 3. class inheritance + conformance :<br>&gt; class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 4. protocol conformance for structs:<br>&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 5. protocol inheritance:<br>&gt; protocol Child:: BaseProtocol1, BaseProtocol2<br>&gt; <br>&gt; <br>&gt; II) in class definition use parenthesis to separate inheritance and<br>&gt; conformance :<br>&gt; <br>&gt; 1. class inheritance :<br>&gt; class Child: BaseClass<br>&gt; <br>&gt; 2. class conformance :<br>&gt; class Child: (SomeProtocol1, SomeProtocol2)<br>&gt; <br>&gt; 3. class inheritance + conformance :<br>&gt; class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br>&gt; <br>&gt; 4. protocol conformance for structs:<br>&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt; or<br>&gt; struct Struct: (SomeProtocol1, SomeProtocol2)<br>&gt; should be discussed<br>&gt; <br>&gt; 5. protocol inheritance:<br>&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt; <br>&gt; <br>&gt; III) special word like &#39;conforms&#39;<br>&gt; <br>&gt; 1. class inheritance :<br>&gt; class Child: BaseClass<br>&gt; <br>&gt; 2. class conformance :<br>&gt; class Child: conforms SomeProtocol1, SomeProtocol2<br>&gt; or<br>&gt; class Child conforms SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 3. class inheritance + conformance :<br>&gt; class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 4. protocol conformance for structs:<br>&gt; struct Struct: conforms SomeProtocol1, SomeProtocol2<br>&gt; or<br>&gt; struct Struct conforms SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 5. protocol inheritance:<br>&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt; <br>&gt; <br>&gt; Thoughts?<br>&gt; <br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>August  1, 2016 at 07:00:00pm</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On 31 Jul 2016, at 21:19, Sean Alling via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I disagree with this suggestion.  Both a protocol conformance &amp; class inheritance define behavior conformance.  If anything the protocol is more explicitly shown because the required properties and methods are conformed to within its declaration.<br></p><p>Especially in a language without abstract classes, inheritance and protocol conformance have a quite important distinction: protocols are about decoupling concrete implementation from behaviour which is not what inheritance allows or promises.<br></p><p>&gt; <br>&gt; We used to define protocol conformance like so:  &lt;myProtocol&gt;<br>&gt; This was removed to make protocol-oriented programming a bit more powerful I’d suspect.  Also, it reads much easier in the current syntax.  <br>&gt; <br>&gt; If we were to change it, I would suggest a keyword ‘conform’ because your suggested operators don’t make it explicit what behavior is being defined. Whereas, the current syntax behavior is simple and easily understood.<br>&gt; <br>&gt; Sean<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; I remember that this was discussed, but can&#39;t find any decision regarding<br>&gt;&gt; this.. So, as a last chance, don&#39;t we want in Swift 3.0, as big source<br>&gt;&gt; breaking change, separate class inheritance and protocol conformance in syntax?<br>&gt;&gt; <br>&gt;&gt; Sorry if there was a decision about this suggestions. Please let know in<br>&gt;&gt; this case.<br>&gt;&gt; <br>&gt;&gt; I.e. when I see the following I can&#39;t understand if the class inherits from<br>&gt;&gt; base class and conforms to protocols or just conforms to two protocols:<br>&gt;&gt; <br>&gt;&gt; class MyClass : First, Second, Third {<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other suffix/prefix,<br>&gt;&gt; or classes with &#39;T&#39;/&#39;C&#39; prefix or something like this, so I believe to<br>&gt;&gt; improve the clarity of code we should separate in syntax inheritance and<br>&gt;&gt; conformance.<br>&gt;&gt; <br>&gt;&gt; As I understand we should discuss changes in these areas:<br>&gt;&gt; <br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; class Child: BaseClass<br>&gt;&gt; <br>&gt;&gt; 2. class conformance :<br>&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; My suggestions:<br>&gt;&gt; <br>&gt;&gt; I) separate inheritance with double colon :<br>&gt;&gt; <br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; class Child:: BaseClass<br>&gt;&gt; <br>&gt;&gt; 2. class conformance :<br>&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; protocol Child:: BaseProtocol1, BaseProtocol2<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; II) in class definition use parenthesis to separate inheritance and<br>&gt;&gt; conformance :<br>&gt;&gt; <br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; class Child: BaseClass<br>&gt;&gt; <br>&gt;&gt; 2. class conformance :<br>&gt;&gt; class Child: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt; <br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br>&gt;&gt; <br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt; or<br>&gt;&gt; struct Struct: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt; should be discussed<br>&gt;&gt; <br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; III) special word like &#39;conforms&#39;<br>&gt;&gt; <br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; class Child: BaseClass<br>&gt;&gt; <br>&gt;&gt; 2. class conformance :<br>&gt;&gt; class Child: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; or<br>&gt;&gt; class Child conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; struct Struct: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; or<br>&gt;&gt; struct Struct conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Thoughts?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>August  1, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On 1 Aug 2016, at 19:05, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt;&gt; On 31 Jul 2016, at 21:19, Sean Alling via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I disagree with this suggestion.  Both a protocol conformance &amp; class inheritance define behavior conformance.  If anything the protocol is more explicitly shown because the required properties and methods are conformed to within its declaration.<br>&gt; <br>&gt; Especially in a language without abstract classes, inheritance and protocol conformance have a quite important distinction: protocols are about decoupling concrete implementation from behaviour which is not what inheritance allows or promises.<br></p><p>But is it a big enough case for its own syntax? I&#39;ve had to work quite hard to break myself of old OOP habits, but I&#39;ve now gotten pretty good at using protocols with extensions to do much of what I used abstract classes and such for (took a while though).<br></p><p>Even when I do use classes with inheritance, unless it&#39;s a very simple type I don&#39;t usually define protocol conformance as part of the type declaration, so I know the only thing up there will be inheritance; I put all my protocol conformances into extensions.<br></p><p>Also, I don&#39;t think it&#39;s that hard to figure out what a type represents, as you can alt-click in Xcode to quickly find out whether a type is a class or a protocol, and of course class inheritance is only possible on classes.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>August  1, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On Aug 1, 2016, at 10:22 PM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 1 Aug 2016, at 19:05, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt;&gt; On 31 Jul 2016, at 21:19, Sean Alling via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I disagree with this suggestion.  Both a protocol conformance &amp; class inheritance define behavior conformance.  If anything the protocol is more explicitly shown because the required properties and methods are conformed to within its declaration.<br>&gt;&gt; <br>&gt;&gt; Especially in a language without abstract classes, inheritance and protocol conformance have a quite important distinction: protocols are about decoupling concrete implementation from behaviour which is not what inheritance allows or promises.<br>&gt; <br>&gt; But is it a big enough case for its own syntax? I&#39;ve had to work quite hard to break myself of old OOP habits, but I&#39;ve now gotten pretty good at using protocols with extensions to do much of what I used abstract classes and such for (took a while though).<br>&gt; <br>&gt; Even when I do use classes with inheritance, unless it&#39;s a very simple type I don&#39;t usually define protocol conformance as part of the type declaration, so I know the only thing up there will be inheritance; I put all my protocol conformances into extensions.<br>&gt; <br>&gt; Also, I don&#39;t think it&#39;s that hard to figure out what a type represents, as you can alt-click in Xcode to quickly find out whether a type is a class or a protocol, and of course class inheritance is only possible on classes.<br></p><p>Xcode (or any other IDE) is not part of the language. Many people here are still forgetting that. Saying that it&#39;s not an issue, since Xcode will do this, will highlight that. Github doesn&#39;t have an Option-Click. Neither do any other SCM-tools. Try to browse the stdlib on Github using a person seeing the code for the first time.<br></p><p>Swift is aiming to be cross-platform - any argument that Xcode (or any other IDE) can do something is IMHO irrelevant.<br></p><p><br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4a9841be165fb834d08296761b4a32e3?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Christopher Kornher</string> &lt;ckornher at me.com&gt;<p>August  1, 2016 at 03:00:00pm</p></header><div class="content"><p>-1 <br></p><p>I hope that this does not seem too hash but I think that this would be a gratuitous change and it would not provide any benefit to me. With protocol extensions, the difference between classes and protocols is not that great. As far as I am converted, this change would just complicate the syntax and add visual clutter.<br></p><p>I know that some language must have a similar feature, but I have never seen this feature in any other language and I have not missed it.<br></p><p>I fail to see how knowing if some “parent” of a class is a protocol or a class (and this is only an issue for classes) eliminates the need to actually look at the parent to determine its significance / capabilities.<br></p><p>- Chris<br></p><p><br>&gt; On Aug 1, 2016, at 2:40 PM, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Aug 1, 2016, at 10:22 PM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 1 Aug 2016, at 19:05, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 31 Jul 2016, at 21:19, Sean Alling via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I disagree with this suggestion.  Both a protocol conformance &amp; class inheritance define behavior conformance.  If anything the protocol is more explicitly shown because the required properties and methods are conformed to within its declaration.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Especially in a language without abstract classes, inheritance and protocol conformance have a quite important distinction: protocols are about decoupling concrete implementation from behaviour which is not what inheritance allows or promises.<br>&gt;&gt; <br>&gt;&gt; But is it a big enough case for its own syntax? I&#39;ve had to work quite hard to break myself of old OOP habits, but I&#39;ve now gotten pretty good at using protocols with extensions to do much of what I used abstract classes and such for (took a while though).<br>&gt;&gt; <br>&gt;&gt; Even when I do use classes with inheritance, unless it&#39;s a very simple type I don&#39;t usually define protocol conformance as part of the type declaration, so I know the only thing up there will be inheritance; I put all my protocol conformances into extensions.<br>&gt;&gt; <br>&gt;&gt; Also, I don&#39;t think it&#39;s that hard to figure out what a type represents, as you can alt-click in Xcode to quickly find out whether a type is a class or a protocol, and of course class inheritance is only possible on classes.<br>&gt; <br>&gt; Xcode (or any other IDE) is not part of the language. Many people here are still forgetting that. Saying that it&#39;s not an issue, since Xcode will do this, will highlight that. Github doesn&#39;t have an Option-Click. Neither do any other SCM-tools. Try to browse the stdlib on Github using a person seeing the code for the first time.<br>&gt; <br>&gt; Swift is aiming to be cross-platform - any argument that Xcode (or any other IDE) can do something is IMHO irrelevant.<br>&gt; <br>&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160801/2f97c074/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>August  1, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On 1 Aug 2016, at 21:40, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Aug 1, 2016, at 10:22 PM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 1 Aug 2016, at 19:05, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 31 Jul 2016, at 21:19, Sean Alling via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I disagree with this suggestion.  Both a protocol conformance &amp; class inheritance define behavior conformance.  If anything the protocol is more explicitly shown because the required properties and methods are conformed to within its declaration.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Especially in a language without abstract classes, inheritance and protocol conformance have a quite important distinction: protocols are about decoupling concrete implementation from behaviour which is not what inheritance allows or promises.<br>&gt;&gt; <br>&gt;&gt; But is it a big enough case for its own syntax? I&#39;ve had to work quite hard to break myself of old OOP habits, but I&#39;ve now gotten pretty good at using protocols with extensions to do much of what I used abstract classes and such for (took a while though).<br>&gt;&gt; <br>&gt;&gt; Even when I do use classes with inheritance, unless it&#39;s a very simple type I don&#39;t usually define protocol conformance as part of the type declaration, so I know the only thing up there will be inheritance; I put all my protocol conformances into extensions.<br>&gt;&gt; <br>&gt;&gt; Also, I don&#39;t think it&#39;s that hard to figure out what a type represents, as you can alt-click in Xcode to quickly find out whether a type is a class or a protocol, and of course class inheritance is only possible on classes.<br>&gt; <br>&gt; Xcode (or any other IDE) is not part of the language. Many people here are still forgetting that. Saying that it&#39;s not an issue, since Xcode will do this, will highlight that. Github doesn&#39;t have an Option-Click. Neither do any other SCM-tools. Try to browse the stdlib on Github using a person seeing the code for the first time.<br>&gt; <br>&gt; Swift is aiming to be cross-platform - any argument that Xcode (or any other IDE) can do something is IMHO irrelevant.<br></p><p>And? I was just pointing out that it can be easy to find out the type is in Xcode, the important part is the end; inheritance is only possible on a class, and in Swift structs are generally preferred wherever possible, so classes shouldn&#39;t (ideally) be very common. This means the types that you are extending aren&#39;t especially common either; if you both inherit from and conform to a bunch of things that the developer doesn&#39;t recognise, then I don&#39;t think a syntax separating them makes much of a difference, while if they know most or all of them then they know which is which. Plus like I say there are patterns to make it even easier, with inheritance always first and/or protocol conformance in extensions.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160801/ed8610a5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>August  2, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; On Aug 2, 2016, at 12:08 AM, Haravikk &lt;swift-evolution at haravikk.me&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On 1 Aug 2016, at 21:40, Charlie Monroe &lt;charlie at charliemonroe.net &lt;mailto:charlie at charliemonroe.net&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Aug 1, 2016, at 10:22 PM, Haravikk via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; Also, I don&#39;t think it&#39;s that hard to figure out what a type represents, as you can alt-click in Xcode to quickly find out whether a type is a class or a protocol, and of course class inheritance is only possible on classes.<br>&gt;&gt; <br>&gt;&gt; Xcode (or any other IDE) is not part of the language. Many people here are still forgetting that. Saying that it&#39;s not an issue, since Xcode will do this, will highlight that. Github doesn&#39;t have an Option-Click. Neither do any other SCM-tools. Try to browse the stdlib on Github using a person seeing the code for the first time.<br>&gt;&gt; <br>&gt;&gt; Swift is aiming to be cross-platform - any argument that Xcode (or any other IDE) can do something is IMHO irrelevant.<br>&gt; <br>&gt; And? I was just pointing out that it can be easy to find out the type is in Xcode, the important part is the end; inheritance is only possible on a class, and in Swift structs are generally preferred wherever possible, so classes shouldn&#39;t (ideally) be very common. This means the types that you are extending aren&#39;t especially common either; if you both inherit from and conform to a bunch of things that the developer doesn&#39;t recognise, then I don&#39;t think a syntax separating them makes much of a difference, while if they know most or all of them then they know which is which. Plus like I say there are patterns to make it even easier, with inheritance always first and/or protocol conformance in extensions.<br></p><p>I&#39;ve actually re-evaluated my position on this and agree with you when it comes to this issue - I see now that the benefit is minimal and if you don&#39;t know the types, it doesn&#39;t tell you much anyway. It would tell you when debugging someone elses code since you&#39;d know you should look into parent implementation as well. But since protocols can have default implementation as well, this point is kind of moot.<br></p><p>I&#39;m just opposed to anyone mentioning Xcode here as an argument for or against a language feature/change. You could argue this way that we can keep making code-breaking changes and the IDE will migrate the code for you. While this is true, I remember reading a post from someone on the core team specifically mentioning that the code-breaking changes need to stop in order to spread Swift onto other platforms since not all platforms have Xcode and some are unlikely to even have a decent IDE with even syntax highlighting. Not to mention diffs, Github, etc.<br></p><p>While Xcode (or AppCode) is currently the tool to use at this moment, I feel that some features, where I&#39;m told to &quot;change the syntax highlighting to highlight this, highlight that&quot; in order to compensate are not valid points to the language readability or usability.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160802/fdf20ffd/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
