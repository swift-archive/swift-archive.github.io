<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Comparing POP to OOP</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 25, 2016 at 04:00:00pm</p></header><div class="content"><p>on Mon Feb 15 2016, Jon Hoffman &lt;swift-users-AT-swift.org&gt; wrote:<br></p><p>&gt; Thank you for the feedback however you cannot design the code as you<br>&gt; describe, if I understand your explanation correctly, because one of the<br>&gt; requirements is the animals may be apart of multiple categories.  As the<br>&gt; example in the post shows the alligator belongs to both the Land and the<br>&gt; Sea categories.  In you description that would mean that the Alligator type<br>&gt; would need to be a subclass of both the Land and Sea superclasses which is<br>&gt; not permitted.  Remember that one of the drawbacks with OOP is a subclass<br>&gt; can only inherit from one superclass.<br></p><p>That&#39;s true in Swift, but not in all realizations of OOP.  If your<br>article is merely using protocols to get the benefits of multiple<br>inheritance from abstract classes, it may not touch at all on what<br>differentiates OOP from POP at a fundamental level.<br></p><p>&gt;<br>&gt; <br>&gt; Jon<br>&gt;<br>&gt; On Mon, Feb 15, 2016 at 1:17 PM, Daniel Tartaglia &lt;danielt1263 at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; (Reposting because I forgot to change the subject line. Hope that this is<br>&gt;&gt; the correct thing to do.)<br>&gt;&gt;<br>&gt;&gt; I have to say John that I am not a fan of your OOP code. I would have<br>&gt;&gt; written the OOP code very much like you wrote the POP version using the<br>&gt;&gt; Strategy pattern.<br>&gt;&gt;<br>&gt;&gt; [Animal]&lt;*&gt;---&gt;[Mode]<br>&gt;&gt;                   ^<br>&gt;&gt;                   |<br>&gt;&gt;            +------+------+<br>&gt;&gt;            |      |      |<br>&gt;&gt;         [Land]  [Sea]  [Air]<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; (View the above with a mono-spaced font.)<br>&gt;&gt;<br>&gt;&gt; In essence, I see no difference. There may be a difference, but I don’t<br>&gt;&gt; think your example presents one.<br>&gt;&gt;<br>&gt;&gt; On Feb 15, 2016, at 1:00 PM, swift-users-request at swift.org wrote:<br>&gt;&gt;<br>&gt;&gt; Date: Sun, 14 Feb 2016 18:59:05 -0500<br>&gt;&gt; From: Jon Hoffman &lt;hoffman.jon at gmail.com&gt;<br>&gt;&gt; To: swift-users &lt;swift-users at swift.org&gt;<br>&gt;&gt; Subject: [swift-users] Comparing POP to OOP<br>&gt;&gt; Message-ID: &lt;5DA5F8F5-D645-4BF9-A0CE-1AF1DB8B3735 at gmail.com&gt;<br>&gt;&gt; Content-Type: text/plain; charset=&quot;utf-8&quot;<br>&gt;&gt;<br>&gt;&gt; Numerous tutorials that I have seen take a very Object-Oriented approach<br>&gt;&gt; to the protocol-oriented programming (POP) paradigm.  By this statement I<br>&gt;&gt; mean that they tell us that with POP we should begin our design with the<br>&gt;&gt; protocol rather than with the superclass as we did with OOP however the<br>&gt;&gt; protocol design tends to mirror the superclass design of OOP.   They also<br>&gt;&gt; tell us that we should use extensions to add common functionality to types<br>&gt;&gt; that conform to a protocol as we did with superclasses in OOP.  While<br>&gt;&gt; protocols and protocol extensions are arguably two of the most important<br>&gt;&gt; concepts of POP these tutorials seem to be missing some other very<br>&gt;&gt; important concepts.<br>&gt;&gt;<br>&gt;&gt; In this post I would like to compare Protocol-Oriented design to<br>&gt;&gt; Object-Oriented design to highlight some of the conceptual differences.<br>&gt;&gt; You can view the blog post here:<br>&gt;&gt; http://masteringswift.blogspot.com/2016/02/pop-and-oop.html &lt;<br>&gt;&gt; http://masteringswift.blogspot.com/2016/02/pop-and-oop.html&gt;<br>&gt;&gt;<br>&gt;&gt; Jon<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c8bc65b07027beac76b917624be47611?s=50"></div><header><strong>Comparing POP to OOP</strong> from <string>Jon Hoffman</string> &lt;hoffman.jon at gmail.com&gt;<p>March  5, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Feb 25, 2016, at 7:38 PM, Dave Abrahams via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Mon Feb 15 2016, Jon Hoffman &lt;swift-users-AT-swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Thank you for the feedback however you cannot design the code as you<br>&gt;&gt; describe, if I understand your explanation correctly, because one of the<br>&gt;&gt; requirements is the animals may be apart of multiple categories.  As the<br>&gt;&gt; example in the post shows the alligator belongs to both the Land and the<br>&gt;&gt; Sea categories.  In you description that would mean that the Alligator type<br>&gt;&gt; would need to be a subclass of both the Land and Sea superclasses which is<br>&gt;&gt; not permitted.  Remember that one of the drawbacks with OOP is a subclass<br>&gt;&gt; can only inherit from one superclass.<br>&gt; <br>&gt; That&#39;s true in Swift, but not in all realizations of OOP.  If your<br>&gt; article is merely using protocols to get the benefits of multiple<br>&gt; inheritance from abstract classes, it may not touch at all on what<br>&gt; differentiates OOP from POP at a fundamental level.<br></p><p>You are absolutely correct; with protocols we do gain a lot more than just multiple inheritance.   In this post I touch on protocol composition and also extensions just to name two of them.  One of the things that I do emphasize when I talk about Protocol-Oriented programming is it is about so much more than just the protocol. <br></p><p>To be honest, I think that Apple may have done a disservice to POP by giving it the name “Protocol-Oriented Programming”.   With OOP and POP having such similar names, people tend to relate them together and in my opinion, how you design your application with POP is fundamentally different than with OOP.  Hopefully I will be able to write some additional posts about designing applications in a POP way using case studies.  Just a matter of finding time.<br></p><p>In one of the e-mails about this post, someone mentioned Entity-Component Systems (https://en.wikipedia.org/wiki/Entity_component_system).  I personally have not used ECS however from what I read from the links provided in that e-mail, in a lot of ways the design philosophy behind POP seems to be closer to ECS than OOP<br></p><p> Jon<br></p><p><br></p><p>&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Jon<br>&gt;&gt; <br>&gt;&gt; On Mon, Feb 15, 2016 at 1:17 PM, Daniel Tartaglia &lt;danielt1263 at gmail.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; (Reposting because I forgot to change the subject line. Hope that this is<br>&gt;&gt;&gt; the correct thing to do.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I have to say John that I am not a fan of your OOP code. I would have<br>&gt;&gt;&gt; written the OOP code very much like you wrote the POP version using the<br>&gt;&gt;&gt; Strategy pattern.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; [Animal]&lt;*&gt;---&gt;[Mode]<br>&gt;&gt;&gt;                  ^<br>&gt;&gt;&gt;                  |<br>&gt;&gt;&gt;           +------+------+<br>&gt;&gt;&gt;           |      |      |<br>&gt;&gt;&gt;        [Land]  [Sea]  [Air]<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (View the above with a mono-spaced font.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In essence, I see no difference. There may be a difference, but I don’t<br>&gt;&gt;&gt; think your example presents one.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Feb 15, 2016, at 1:00 PM, swift-users-request at swift.org wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Date: Sun, 14 Feb 2016 18:59:05 -0500<br>&gt;&gt;&gt; From: Jon Hoffman &lt;hoffman.jon at gmail.com&gt;<br>&gt;&gt;&gt; To: swift-users &lt;swift-users at swift.org&gt;<br>&gt;&gt;&gt; Subject: [swift-users] Comparing POP to OOP<br>&gt;&gt;&gt; Message-ID: &lt;5DA5F8F5-D645-4BF9-A0CE-1AF1DB8B3735 at gmail.com&gt;<br>&gt;&gt;&gt; Content-Type: text/plain; charset=&quot;utf-8&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Numerous tutorials that I have seen take a very Object-Oriented approach<br>&gt;&gt;&gt; to the protocol-oriented programming (POP) paradigm.  By this statement I<br>&gt;&gt;&gt; mean that they tell us that with POP we should begin our design with the<br>&gt;&gt;&gt; protocol rather than with the superclass as we did with OOP however the<br>&gt;&gt;&gt; protocol design tends to mirror the superclass design of OOP.   They also<br>&gt;&gt;&gt; tell us that we should use extensions to add common functionality to types<br>&gt;&gt;&gt; that conform to a protocol as we did with superclasses in OOP.  While<br>&gt;&gt;&gt; protocols and protocol extensions are arguably two of the most important<br>&gt;&gt;&gt; concepts of POP these tutorials seem to be missing some other very<br>&gt;&gt;&gt; important concepts.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In this post I would like to compare Protocol-Oriented design to<br>&gt;&gt;&gt; Object-Oriented design to highlight some of the conceptual differences.<br>&gt;&gt;&gt; You can view the blog post here:<br>&gt;&gt;&gt; http://masteringswift.blogspot.com/2016/02/pop-and-oop.html &lt;<br>&gt;&gt;&gt; http://masteringswift.blogspot.com/2016/02/pop-and-oop.html&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jon<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160305/b4d8c9e3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd033b3ed46d65c7d7394eab52d53e6b?s=50"></div><header><strong>Comparing POP to OOP</strong> from <string>Evan Maloney</string> &lt;emaloney at gilt.com&gt;<p>March  9, 2016 at 03:00:00pm</p></header><div class="content"><p>On Mar 5, 2016, at 5:15 PM, Jon Hoffman via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; To be honest, I think that Apple may have done a disservice to POP by giving it the name “Protocol-Oriented Programming”.   With OOP and POP having such similar names, people tend to relate them together and in my opinion, how you design your application with POP is fundamentally different than with OOP.  Hopefully I will be able to write some additional posts about designing applications in a POP way using case studies.  Just a matter of finding time<br>&gt; <br>Interestingly, we just had a discussion about abstract classes on the Swift Evolution mailing list, and many of the people who opposed the idea of adding the feature cited the fact that Swift was a protocol-oriented programming language rather than an object-oriented programming language.<br></p><p>By that argument, because Swift is protocol-oriented, classes should be treated like second-class citizens that shouldn&#39;t evolve new features and don&#39;t deserve the same level of functionality provided by just about every other object-oriented programming language (aside from ObjC).<br></p><p>Calling Swift protocol-oriented seems to have led to a certain level of dogmatism and reflexive opposition to anything seen as object-oriented; it&#39;s protocols vs. classes.<br></p><p>Personally, what I love about Swift is that it doesn&#39;t fit into just one &quot;oriented programming&quot; box. But perhaps I&#39;m in the minority.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160309/cb7a8b5e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>Comparing POP to OOP</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>March  9, 2016 at 08:00:00pm</p></header><div class="content"><p>On Wed, Mar 9, 2016 at 12:15 PM Evan Maloney via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Personally, what I love about Swift is that it doesn&#39;t fit into just one<br>&gt; &quot;oriented programming&quot; box. But perhaps I&#39;m in the minority.<br>&gt;<br></p><p>You can count me in that minority :)<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160309/2e7f44b1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Comparing POP to OOP</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>March  9, 2016 at 12:00:00pm</p></header><div class="content"><p>Same, and part of the decision rationale reiterated the point that Swift is foremost a pragmatic language for getting things done :). <br></p><p>Austin<br></p><p>&gt; On Mar 9, 2016, at 12:17 PM, Shawn Erickson via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Wed, Mar 9, 2016 at 12:15 PM Evan Maloney via swift-users &lt;swift-users at swift.org&gt; wrote: <br>&gt;&gt; Personally, what I love about Swift is that it doesn&#39;t fit into just one &quot;oriented programming&quot; box. But perhaps I&#39;m in the minority.<br>&gt; <br>&gt; You can count me in that minority :) <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160309/ef56c9d5/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Comparing POP to OOP</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March  9, 2016 at 02:00:00pm</p></header><div class="content"><p>on Wed Mar 09 2016, Evan Maloney &lt;emaloney-AT-gilt.com&gt; wrote:<br></p><p>&gt; On Mar 5, 2016, at 5:15 PM, Jon Hoffman via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; To be honest, I think that Apple may have done a disservice to POP<br>&gt;&gt; by giving it the name “Protocol-Oriented Programming”.  With OOP and<br>&gt;&gt; POP having such similar names, people tend to relate them together<br>&gt;&gt; and in my opinion, how you design your application with POP is<br>&gt;&gt; fundamentally different than with OOP.  Hopefully I will be able to<br>&gt;&gt; write some additional posts about designing applications in a POP<br>&gt;&gt; way using case studies.  Just a matter of finding time<br>&gt;&gt; <br>&gt; Interestingly, we just had a discussion about abstract classes on the<br>&gt; Swift Evolution mailing list, and many of the people who opposed the<br>&gt; idea of adding the feature cited the fact that Swift was a<br>&gt; protocol-oriented programming language rather than an object-oriented<br>&gt; programming language.<br>&gt;<br>&gt; By that argument, because Swift is protocol-oriented, classes should<br>&gt; be treated like second-class citizens that shouldn&#39;t evolve new<br>&gt; features and don&#39;t deserve the same level of functionality provided by<br>&gt; just about every other object-oriented programming language (aside<br>&gt; from ObjC).<br>&gt;<br>&gt; Calling Swift protocol-oriented seems to have led to a certain level<br>&gt; of dogmatism and reflexive opposition to anything seen as<br>&gt; object-oriented; it&#39;s protocols vs. classes.<br>&gt;<br>&gt; Personally, what I love about Swift is that it doesn&#39;t fit into just<br>&gt; one &quot;oriented programming&quot; box. But perhaps I&#39;m in the minority.<br></p><p>For every good idea, there&#39;s always some fraction of the community that<br>will take it too far.  Swift is more protocol-oriented than<br>object-oriented at its core, but Swift is a multiparadigm language.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd033b3ed46d65c7d7394eab52d53e6b?s=50"></div><header><strong>Comparing POP to OOP</strong> from <string>Evan Maloney</string> &lt;emaloney at gilt.com&gt;<p>March  9, 2016 at 05:00:00pm</p></header><div class="content"><p>Don&#39;t get me wrong -- I love protocol-oriented programming. I thought your &quot;Crusty&quot; WWDC talk was quite illuminating (and funny). But I still wish Swift had abstract classes! ;)<br></p><p><br></p><p>&gt; On Mar 9, 2016, at 5:10 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Wed Mar 09 2016, Evan Maloney &lt;emaloney-AT-gilt.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Mar 5, 2016, at 5:15 PM, Jon Hoffman via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt; To be honest, I think that Apple may have done a disservice to POP<br>&gt;&gt;&gt; by giving it the name “Protocol-Oriented Programming”.  With OOP and<br>&gt;&gt;&gt; POP having such similar names, people tend to relate them together<br>&gt;&gt;&gt; and in my opinion, how you design your application with POP is<br>&gt;&gt;&gt; fundamentally different than with OOP.  Hopefully I will be able to<br>&gt;&gt;&gt; write some additional posts about designing applications in a POP<br>&gt;&gt;&gt; way using case studies.  Just a matter of finding time<br>&gt;&gt;&gt; <br>&gt;&gt; Interestingly, we just had a discussion about abstract classes on the<br>&gt;&gt; Swift Evolution mailing list, and many of the people who opposed the<br>&gt;&gt; idea of adding the feature cited the fact that Swift was a<br>&gt;&gt; protocol-oriented programming language rather than an object-oriented<br>&gt;&gt; programming language.<br>&gt;&gt; <br>&gt;&gt; By that argument, because Swift is protocol-oriented, classes should<br>&gt;&gt; be treated like second-class citizens that shouldn&#39;t evolve new<br>&gt;&gt; features and don&#39;t deserve the same level of functionality provided by<br>&gt;&gt; just about every other object-oriented programming language (aside<br>&gt;&gt; from ObjC).<br>&gt;&gt; <br>&gt;&gt; Calling Swift protocol-oriented seems to have led to a certain level<br>&gt;&gt; of dogmatism and reflexive opposition to anything seen as<br>&gt;&gt; object-oriented; it&#39;s protocols vs. classes.<br>&gt;&gt; <br>&gt;&gt; Personally, what I love about Swift is that it doesn&#39;t fit into just<br>&gt;&gt; one &quot;oriented programming&quot; box. But perhaps I&#39;m in the minority.<br>&gt; <br>&gt; For every good idea, there&#39;s always some fraction of the community that<br>&gt; will take it too far.  Swift is more protocol-oriented than<br>&gt; object-oriented at its core, but Swift is a multiparadigm language.<br>&gt; <br>&gt; -- <br>&gt; -Dave<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c8bc65b07027beac76b917624be47611?s=50"></div><header><strong>Comparing POP to OOP</strong> from <string>Jon Hoffman</string> &lt;hoffman.jon at gmail.com&gt;<p>March  9, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Mar 9, 2016, at 3:15 PM, Evan Maloney &lt;emaloney at gilt.com&gt; wrote:<br>&gt; <br>&gt; On Mar 5, 2016, at 5:15 PM, Jon Hoffman via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; To be honest, I think that Apple may have done a disservice to POP by giving it the name “Protocol-Oriented Programming”.   With OOP and POP having such similar names, people tend to relate them together and in my opinion, how you design your application with POP is fundamentally different than with OOP.  Hopefully I will be able to write some additional posts about designing applications in a POP way using case studies.  Just a matter of finding time<br>&gt;&gt; <br>&gt; Interestingly, we just had a discussion about abstract classes on the Swift Evolution mailing list, and many of the people who opposed the idea of adding the feature cited the fact that Swift was a protocol-oriented programming language rather than an object-oriented programming language.<br>&gt; <br>&gt; By that argument, because Swift is protocol-oriented, classes should be treated like second-class citizens that shouldn&#39;t evolve new features and don&#39;t deserve the same level of functionality provided by just about every other object-oriented programming language (aside from ObjC).<br>&gt; <br>&gt; Calling Swift protocol-oriented seems to have led to a certain level of dogmatism and reflexive opposition to anything seen as object-oriented; it&#39;s protocols vs. classes.<br>&gt; <br>&gt; Personally, what I love about Swift is that it doesn&#39;t fit into just one &quot;oriented programming&quot; box. But perhaps I&#39;m in the minority.<br>&gt; <br></p><p><br>I am not a big fan of abstract classes however that is a personal opinion.  Being able to use the paradigm that you want to use with Swift is one of the best features.  <br>Jon<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160309/75ef0211/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
