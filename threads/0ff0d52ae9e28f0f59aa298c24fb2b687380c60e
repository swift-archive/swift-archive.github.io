<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Accepted] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>April 18, 2016 at 02:00:00pm</p></header><div class="content"><p>Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0059-updated-set-apis.md<br></p><p><br>Hello Swift Community,<br></p><p>The review of SE-0059 &quot;Update API Naming Guidelines and Rewrite Set APIs Accordingly” ran from March 31...April 5, 2016. The proposal is accepted. <br></p><p>There was much debate, both before and during the review, over the “InPlace” suffix/ “form” prefix, and at this point any answer will be objectionable to some. The core team has opted to accept the proposal as-is, keeping the “form” prefix to describe the mutating counterpart to an operation naturally described by a noun (e.g., “formUnion” for the mutating variant of “union”), for the reasons described in the proposal itself. Thanks all for the spirited discussion!<br></p><p>	- Doug<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20160418/0ff0c60e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Accepted] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 19, 2016 at 10:00:00am</p></header><div class="content"><p>Just wanted to go back to<br>Apply API Guidelines to the Standard Library  SE-0006<br>https://github.com/apple/swift-evolution/blob/master/proposals/0006-apply-api-guidelines-to-the-standard-library.md<br>for a second.<br></p><p>Just found out that this code is working in 3.0(mar 24):<br>var z1 = [3,2,1]<br>let z2 = z1.sort() // mutating method!<br>print(z2) // =&gt; ()<br></p><p>so.. is this a final implementation or we are expecting to have a lot of <br>hard-to-find errors in our Swift 3.0 code if code written for previous <br>Swift will be used(private lib/snippet/etc)?<br></p><p>Also, just interesting, are we all expecting libs like RxSwift and <br>ReacriveCocoa will rename their methods accordingly to names changed in <br>Swift 3.0?<br></p><p>On 19.04.2016 0:18, Douglas Gregor via swift-evolution wrote:<br>&gt;<br>&gt; Proposal<br>&gt; link: https://github.com/apple/swift-evolution/blob/master/proposals/0059-updated-set-apis.md<br>&gt;<br>&gt;<br>&gt; Hello Swift Community,<br>&gt;<br>&gt; The review of SE-0059 &quot;Update API Naming Guidelines and Rewrite Set APIs<br>&gt; Accordingly” ran from March 31...April 5, 2016. The proposal is *accepted*.<br>&gt;<br>&gt; There was much debate, both before and during the review, over the<br>&gt; “InPlace” suffix/ “form” prefix, and at this point any answer will be<br>&gt; objectionable to some. The core team has opted to accept the proposal<br>&gt; as-is, keeping the “form” prefix to describe the mutating counterpart to an<br>&gt; operation naturally described by a noun (e.g., “formUnion” for the mutating<br>&gt; variant of “union”), for the reasons described in the proposal itself.<br>&gt; Thanks all for the spirited discussion!<br>&gt;<br>&gt; - Doug<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Accepted] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>April 20, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Apr 19, 2016, at 12:41 AM, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br>&gt; <br>&gt; Just wanted to go back to<br>&gt; Apply API Guidelines to the Standard Library  SE-0006<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0006-apply-api-guidelines-to-the-standard-library.md<br>&gt; for a second.<br>&gt; <br>&gt; Just found out that this code is working in 3.0(mar 24):<br>&gt; var z1 = [3,2,1]<br>&gt; let z2 = z1.sort() // mutating method!<br>&gt; print(z2) // =&gt; ()<br>&gt; <br>&gt; so.. is this a final implementation or we are expecting to have a lot of hard-to-find errors in our Swift 3.0 code if code written for previous Swift will be used(private lib/snippet/etc)?<br>&gt; <br>&gt; Also, just interesting, are we all expecting libs like RxSwift and ReacriveCocoa will rename their methods accordingly to names changed in Swift 3.0?<br></p><p>It definitely seems reasonable for us to warn on this kind of example, e.g., placing a Void result of a call to a mutating method in a variable. Can you file a ticket a bugs.swift.org? It would be a great starter bug.<br></p><p>	- Doug<br></p><p>&gt; <br>&gt; On 19.04.2016 0:18, Douglas Gregor via swift-evolution wrote:<br>&gt;&gt; <br>&gt;&gt; Proposal<br>&gt;&gt; link: https://github.com/apple/swift-evolution/blob/master/proposals/0059-updated-set-apis.md<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Hello Swift Community,<br>&gt;&gt; <br>&gt;&gt; The review of SE-0059 &quot;Update API Naming Guidelines and Rewrite Set APIs<br>&gt;&gt; Accordingly” ran from March 31...April 5, 2016. The proposal is *accepted*.<br>&gt;&gt; <br>&gt;&gt; There was much debate, both before and during the review, over the<br>&gt;&gt; “InPlace” suffix/ “form” prefix, and at this point any answer will be<br>&gt;&gt; objectionable to some. The core team has opted to accept the proposal<br>&gt;&gt; as-is, keeping the “form” prefix to describe the mutating counterpart to an<br>&gt;&gt; operation naturally described by a noun (e.g., “formUnion” for the mutating<br>&gt;&gt; variant of “union”), for the reasons described in the proposal itself.<br>&gt;&gt; Thanks all for the spirited discussion!<br>&gt;&gt; <br>&gt;&gt; - Doug<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Accepted] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 22, 2016 at 09:00:00am</p></header><div class="content"><p>On 21.04.2016 6:57, Douglas Gregor wrote:<br>&gt;<br>&gt;&gt; On Apr 19, 2016, at 12:41 AM, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Just wanted to go back to<br>&gt;&gt; Apply API Guidelines to the Standard Library  SE-0006<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0006-apply-api-guidelines-to-the-standard-library.md<br>&gt;&gt; for a second.<br>&gt;&gt;<br>&gt;&gt; Just found out that this code is working in 3.0(mar 24):<br>&gt;&gt; var z1 = [3,2,1]<br>&gt;&gt; let z2 = z1.sort() // mutating method!<br>&gt;&gt; print(z2) // =&gt; ()<br>&gt;&gt;<br>&gt;&gt; so.. is this a final implementation or we are expecting to have a lot of hard-to-find errors in our Swift 3.0 code if code written for previous Swift will be used(private lib/snippet/etc)?<br>&gt;&gt;<br>&gt;&gt; Also, just interesting, are we all expecting libs like RxSwift and ReacriveCocoa will rename their methods accordingly to names changed in Swift 3.0?<br>&gt;<br>&gt; It definitely seems reasonable for us to warn on this kind of example, e.g., placing a Void result of a call to a mutating method in a variable. Can you file a ticket a bugs.swift.org? It would be a great starter bug.<br>&gt;<br>&gt; 	- Doug<br></p><p><br>Ticket created. SR-1288<br></p><p>&gt;<br>&gt;&gt;<br>&gt;&gt; On 19.04.2016 0:18, Douglas Gregor via swift-evolution wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Proposal<br>&gt;&gt;&gt; link: https://github.com/apple/swift-evolution/blob/master/proposals/0059-updated-set-apis.md<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Hello Swift Community,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The review of SE-0059 &quot;Update API Naming Guidelines and Rewrite Set APIs<br>&gt;&gt;&gt; Accordingly” ran from March 31...April 5, 2016. The proposal is *accepted*.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; There was much debate, both before and during the review, over the<br>&gt;&gt;&gt; “InPlace” suffix/ “form” prefix, and at this point any answer will be<br>&gt;&gt;&gt; objectionable to some. The core team has opted to accept the proposal<br>&gt;&gt;&gt; as-is, keeping the “form” prefix to describe the mutating counterpart to an<br>&gt;&gt;&gt; operation naturally described by a noun (e.g., “formUnion” for the mutating<br>&gt;&gt;&gt; variant of “union”), for the reasons described in the proposal itself.<br>&gt;&gt;&gt; Thanks all for the spirited discussion!<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; - Doug<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
