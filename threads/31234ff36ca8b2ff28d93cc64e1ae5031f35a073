<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e4e5b58d3d1e4b872f92e277eb03090?s=50"></div><header><strong>Why isn&#39;t Foundation shipped in OS X and iOS open source?</strong> from <string>Kiel Gillard</string> &lt;kiel.gillard at gmail.com&gt;<p>April 14, 2016 at 10:00:00am</p></header><div class="content"><p>Hello all,<br></p><p>I’m considering contributing yet part of me feels hesitant or reluctant to do so because I do not want to do a poor job at what feels like I’d be reverse-engineering the Foundation APIs (as opposed to Core Foundation and the pure Swift Foundation).<br></p><p>Perhaps I missed the answer somewhere else or maybe I’m lacking the imagination to come up with reasons myself, but why isn’t Foundation (as it ships in iOS and OS X now) open source, too?<br></p><p>Wouldn’t a pure Swift implementation of Foundation benefit from insights from the implementation details of Foundation? For example, Foundation may have implemented such-and-such an API in a particular way for performance reasons that would be unacceptable if released. That insight may be lost by providing a Swift implementation of an API that merely reproduces the same output from the same input. Concretely speaking, I seem to recall such a conversation a few months ago or so with respect to the implementation NSJSONSerialization (unfortunately, I can’t seem to find the thread).<br></p><p>I’m not suggesting a pure Swift Foundation should be a one-to-one port of Foundation’s implementation, but surely it would be helpful (not just for me, but for others too) to take the learnings of a mature API into account when implementing Swift Foundation?<br></p><p>Thanks,<br></p><p>Kiel<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b0f3d20f0d205130240660612589db5f?s=50"></div><header><strong>Why isn&#39;t Foundation shipped in OS X and iOS open source?</strong> from <string>Alexander Alemayhu</string> &lt;alexander at alemayhu.com&gt;<p>April 14, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On 14 Apr 2016, at 02:32, Kiel Gillard via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello all,<br></p><p>Hei,<br></p><p>&gt; <br>&gt; I’m considering contributing yet part of me feels hesitant or reluctant to do so because I do not want to do a poor job at what feels like I’d be reverse-engineering the Foundation APIs (as opposed to Core Foundation and the pure Swift Foundation).<br></p><p>Cool, I also want to contribute :)<br></p><p>&gt; <br>&gt; Perhaps I missed the answer somewhere else or maybe I’m lacking the imagination to come up with reasons myself, but why isn’t Foundation (as it ships in iOS and OS X now) open source, too?<br>&gt; <br>&gt; Wouldn’t a pure Swift implementation of Foundation benefit from insights from the implementation details of Foundation? For example, Foundation may have implemented such-and-such an API in a particular way for performance reasons that would be unacceptable if released. That insight may be lost by providing a Swift implementation of an API that merely reproduces the same output from the same input. Concretely speaking, I seem to recall such a conversation a few months ago or so with respect to the implementation NSJSONSerialization (unfortunately, I can’t seem to find the thread).<br>&gt; <br>&gt; I’m not suggesting a pure Swift Foundation should be a one-to-one port of Foundation’s implementation, but surely it would be helpful (not just for me, but for others too) to take the learnings of a mature API into account when implementing Swift Foundation?<br>&gt; <br>&gt; Thanks,<br></p><p><br>If you haven’t looked at the Design Principles[0] for swift-corelibs-foundation consider reading it.<br></p><p>[0]: https://github.com/apple/swift-corelibs-foundation/blob/master/Docs/Design.md &lt;https://github.com/apple/swift-corelibs-foundation/blob/master/Docs/Design.md&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160414/9b32215d/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
