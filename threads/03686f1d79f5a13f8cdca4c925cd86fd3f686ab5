<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Pitch: disallow `()` from Switch statement case satisfaction</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>October 11, 2016 at 12:00:00pm</p></header><div class="content"><p>I thought this was long gone but today I found out it is still legal:<br></p><p>switch i {<br>case 4 ... 6: ()<br>case 3: print(&quot;Here&quot;)<br>default: break<br>}<br></p><p>Is there a motivating factor for keeping this in the language? The compiler picks up on Void and emits an error. You&#39;d think () would produce the same results but it doesn&#39;t.<br></p><p>-- Erica<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161011/03686ab5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Pitch: disallow `()` from Switch statement case satisfaction</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>October 11, 2016 at 01:00:00pm</p></header><div class="content"><p>Well, unless I&#39;m mistaken, `()` here is a value. I can replace it with `3`<br>and the compiler emits a warning about unused results. I&#39;m guessing that<br>since () is a value of type Void, the warning about unused results isn&#39;t<br>triggered.<br>While it&#39;s true that `Void` causes an error, I can write `Void()` instead<br>and everything compiles just fine, which is what the `()` is doing too.<br>Seems fine to me?<br></p><p><br>On Tue, Oct 11, 2016 at 1:43 PM, Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I thought this was long gone but today I found out it is still legal:<br>&gt;<br>&gt; switch i {<br>&gt; case 4 ... 6: ()<br>&gt; case 3: print(&quot;Here&quot;)<br>&gt; default: break<br>&gt; }<br>&gt;<br>&gt; Is there a motivating factor for keeping this in the language? The<br>&gt; compiler picks up on Void and emits an error. You&#39;d think () would produce<br>&gt; the same results but it doesn&#39;t.<br>&gt;<br>&gt; -- Erica<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161011/645bed3d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>Pitch: disallow `()` from Switch statement case satisfaction</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>October 11, 2016 at 03:00:00pm</p></header><div class="content"><p>I agree, though it may seem counterintuitive at first.  () is a value of unit type that exists here to satisfy the sema’s requirements that all branches are destructive, productive or defer to another productive branch.<br></p><p>~Robert Widmann<br></p><p>&gt; On Oct 11, 2016, at 2:54 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Well, unless I&#39;m mistaken, `()` here is a value. I can replace it with `3` and the compiler emits a warning about unused results. I&#39;m guessing that since () is a value of type Void, the warning about unused results isn&#39;t triggered.<br>&gt; While it&#39;s true that `Void` causes an error, I can write `Void()` instead and everything compiles just fine, which is what the `()` is doing too. Seems fine to me?<br>&gt; <br>&gt; <br>&gt; On Tue, Oct 11, 2016 at 1:43 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I thought this was long gone but today I found out it is still legal:<br>&gt; <br>&gt; switch i {<br>&gt; case 4 ... 6: ()<br>&gt; case 3: print(&quot;Here&quot;)<br>&gt; default: break<br>&gt; }<br>&gt; <br>&gt; Is there a motivating factor for keeping this in the language? The compiler picks up on Void and emits an error. You&#39;d think () would produce the same results but it doesn&#39;t.<br>&gt; <br>&gt; -- Erica<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161011/27538a33/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Pitch: disallow `()` from Switch statement case satisfaction</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>October 11, 2016 at 02:00:00pm</p></header><div class="content"><p>Fair enough. I defer to both of you.<br></p><p>Thanks, -- E<br></p><p>&gt; On Oct 11, 2016, at 1:41 PM, Robert Widmann &lt;devteam.codafi at gmail.com&gt; wrote:<br>&gt; <br>&gt; I agree, though it may seem counterintuitive at first.  () is a value of unit type that exists here to satisfy the sema’s requirements that all branches are destructive, productive or defer to another productive branch.<br>&gt; <br>&gt; ~Robert Widmann<br>&gt; <br>&gt;&gt; On Oct 11, 2016, at 2:54 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Well, unless I&#39;m mistaken, `()` here is a value. I can replace it with `3` and the compiler emits a warning about unused results. I&#39;m guessing that since () is a value of type Void, the warning about unused results isn&#39;t triggered.<br>&gt;&gt; While it&#39;s true that `Void` causes an error, I can write `Void()` instead and everything compiles just fine, which is what the `()` is doing too. Seems fine to me?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Tue, Oct 11, 2016 at 1:43 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; I thought this was long gone but today I found out it is still legal:<br>&gt;&gt; <br>&gt;&gt; switch i {<br>&gt;&gt; case 4 ... 6: ()<br>&gt;&gt; case 3: print(&quot;Here&quot;)<br>&gt;&gt; default: break<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Is there a motivating factor for keeping this in the language? The compiler picks up on Void and emits an error. You&#39;d think () would produce the same results but it doesn&#39;t.<br>&gt;&gt; <br>&gt;&gt; -- Erica<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161011/e50f0997/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Pitch: disallow `()` from Switch statement case satisfaction</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>October 13, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On 11 Oct 2016, at 19:43, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I thought this was long gone but today I found out it is still legal:<br>&gt; <br>&gt; switch i {<br>&gt; case 4 ... 6: ()<br>&gt; case 3: print(&quot;Here&quot;)<br>&gt; default: break<br>&gt; }<br>&gt; <br>&gt; Is there a motivating factor for keeping this in the language? The compiler picks up on Void and emits an error. You&#39;d think () would produce the same results but it doesn&#39;t.<br>&gt; <br>&gt; — Erica<br></p><p>Hopefully I&#39;m not the only one but… how are we supposed to be doing this? Because () is exactly what I&#39;ve been using the entire time for cases that I want to ignore (or are handled in code outside the switch). I&#39;m going to have a few dozen files to edit if there&#39;s something else I&#39;m supposed to be using… <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161013/8a522e57/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4c60436f08b7b107f0bb0848c31297fa?s=50"></div><header><strong>Pitch: disallow `()` from Switch statement case satisfaction</strong> from <string>Alex Blewitt</string> &lt;alblue at apple.com&gt;<p>October 13, 2016 at 12:00:00pm</p></header><div class="content"><p>On 13 Oct 2016, at 11:06, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On 11 Oct 2016, at 19:43, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I thought this was long gone but today I found out it is still legal:<br>&gt;&gt; <br>&gt;&gt; switch i {<br>&gt;&gt; case 4 ... 6: ()<br>&gt;&gt; case 3: print(&quot;Here&quot;)<br>&gt;&gt; default: break<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Is there a motivating factor for keeping this in the language? The compiler picks up on Void and emits an error. You&#39;d think () would produce the same results but it doesn&#39;t.<br>&gt;&gt; <br>&gt;&gt; — Erica<br>&gt; <br>&gt; Hopefully I&#39;m not the only one but… how are we supposed to be doing this? Because () is exactly what I&#39;ve been using the entire time for cases that I want to ignore (or are handled in code outside the switch). I&#39;m going to have a few dozen files to edit if there&#39;s something else I&#39;m supposed to be using… <br></p><p>You can have a &#39;break&#39; there, which is equivalent to a nop but without a return value. Whether that&#39;s what you&#39;re supposed to do or not is a different issue :)<br></p><p>Alex<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161013/d601ef87/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Pitch: disallow `()` from Switch statement case satisfaction</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>October 13, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On 13 Oct 2016, at 12:26, Alex Blewitt &lt;alblue at apple.com&gt; wrote:<br>&gt; <br>&gt; On 13 Oct 2016, at 11:06, Haravikk via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 11 Oct 2016, at 19:43, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I thought this was long gone but today I found out it is still legal:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; switch i {<br>&gt;&gt;&gt; case 4 ... 6: ()<br>&gt;&gt;&gt; case 3: print(&quot;Here&quot;)<br>&gt;&gt;&gt; default: break<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is there a motivating factor for keeping this in the language? The compiler picks up on Void and emits an error. You&#39;d think () would produce the same results but it doesn&#39;t.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; — Erica<br>&gt;&gt; <br>&gt;&gt; Hopefully I&#39;m not the only one but… how are we supposed to be doing this? Because () is exactly what I&#39;ve been using the entire time for cases that I want to ignore (or are handled in code outside the switch). I&#39;m going to have a few dozen files to edit if there&#39;s something else I&#39;m supposed to be using… <br>&gt; <br>&gt; You can have a &#39;break&#39; there, which is equivalent to a nop but without a return value. Whether that&#39;s what you&#39;re supposed to do or not is a different issue :)<br></p><p>Perhaps too philosophical a question? ^^<br></p><p>You&#39;re right though, I probably should be using breaks as they&#39;re more explicit, and I suppose fallthrough should work too so all cases should be covered without having to use (), in that case it maybe is something worth getting rid of?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161013/783b743e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8149b5bd66abbc94babfda2995153481?s=50"></div><header><strong>Pitch: disallow `()` from Switch statement case satisfaction</strong> from <string>Nevin Brackett-Rozinsky</string> &lt;nevin.brackettrozinsky at gmail.com&gt;<p>October 13, 2016 at 11:00:00am</p></header><div class="content"><p>If I might be so bold, perhaps we should consider the opposite. Suppose you<br>have a conditional statement inside a loop. It would be easier for the<br>reader to understand what it does if “break” meant the same thing<br>regardless of whether you used “if” or “switch” for the condition.<br></p><p>Right now, these two loops behave differently:<br></p><p>let seq = [1, 2, 3]<br></p><p>for x in seq {  // prints ! 2 ! 3 !<br>    switch x {<br>    case 1: break<br>    case _: print(x)<br>    }<br>    print(&quot;!&quot;)<br>}<br></p><p>for x in seq {  // prints nothing<br>    if x == 1 {<br>        break<br>    } else {<br>        print(x)<br>    }<br>    print(&quot;!&quot;)<br>}<br></p><p>In particular, the current behavior of “break” means you need to label the<br>loop if you want to break out of it from a “switch”, but not from an “if”.<br>This is at least inconsistent.<br></p><p>Nevin<br></p><p><br></p><p>On Thu, Oct 13, 2016 at 7:59 AM, Haravikk via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On 13 Oct 2016, at 12:26, Alex Blewitt &lt;alblue at apple.com&gt; wrote:<br>&gt;<br>&gt; On 13 Oct 2016, at 11:06, Haravikk via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt;<br>&gt; On 11 Oct 2016, at 19:43, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I thought this was long gone but today I found out it is still legal:<br>&gt;<br>&gt; switch i {<br>&gt; case 4 ... 6: ()<br>&gt; case 3: print(&quot;Here&quot;)<br>&gt; default: break<br>&gt; }<br>&gt;<br>&gt; Is there a motivating factor for keeping this in the language? The<br>&gt; compiler picks up on Void and emits an error. You&#39;d think () would produce<br>&gt; the same results but it doesn&#39;t.<br>&gt;<br>&gt; — Erica<br>&gt;<br>&gt;<br>&gt; Hopefully I&#39;m not the only one but… how are we *supposed* to be doing<br>&gt; this? Because () is exactly what I&#39;ve been using the entire time for cases<br>&gt; that I want to ignore (or are handled in code outside the switch). I&#39;m<br>&gt; going to have a few dozen files to edit if there&#39;s something else I&#39;m<br>&gt; supposed to be using…<br>&gt;<br>&gt;<br>&gt; You can have a &#39;break&#39; there, which is equivalent to a nop but without a<br>&gt; return value. Whether that&#39;s what you&#39;re supposed to do or not is a<br>&gt; different issue :)<br>&gt;<br>&gt;<br>&gt; Perhaps too philosophical a question? ^^<br>&gt;<br>&gt; You&#39;re right though, I probably should be using breaks as they&#39;re more<br>&gt; explicit, and I suppose fallthrough should work too so all cases should be<br>&gt; covered without having to use (), in that case it maybe is something worth<br>&gt; getting rid of?<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161013/1633282d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Pitch: disallow `()` from Switch statement case satisfaction</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>October 13, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On 13 Oct 2016, at 16:19, Nevin Brackett-Rozinsky via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; If I might be so bold, perhaps we should consider the opposite. Suppose you have a conditional statement inside a loop. It would be easier for the reader to understand what it does if “break” meant the same thing regardless of whether you used “if” or “switch” for the condition.<br>&gt; <br>&gt; Right now, these two loops behave differently:<br>&gt; <br>&gt; let seq = [1, 2, 3]<br>&gt; <br>&gt; for x in seq {  // prints ! 2 ! 3 !<br>&gt;     switch x {<br>&gt;     case 1: break<br>&gt;     case _: print(x)<br>&gt;     }<br>&gt;     print(&quot;!&quot;)<br>&gt; }<br>&gt; <br>&gt; for x in seq {  // prints nothing<br>&gt;     if x == 1 {<br>&gt;         break<br>&gt;     } else {<br>&gt;         print(x)<br>&gt;     }<br>&gt;     print(&quot;!&quot;)<br>&gt; }<br>&gt; <br>&gt; In particular, the current behavior of “break” means you need to label the loop if you want to break out of it from a “switch”, but not from an “if”. This is at least inconsistent.<br>&gt; <br>&gt; Nevin<br></p><p>That&#39;s an interesting point, but seems like it might be better covered by using a different keyword; e.g- we could use &quot;end&quot; for a loop and &quot;break&quot; for a switch? &quot;End&quot; feels more consistent with &quot;continue&quot;, but we get into the pesky &quot;terms of art&quot; territory =)<br></p><p>I don&#39;t think that requiring use of () is the right solution though, as it is admittedly kind of strange, I just seem to have picked up it in one tutorial and then never stopped using it =D<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Pitch: disallow `()` from Switch statement case satisfaction</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>October 13, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Oct 13, 2016, at 4:26 AM, Alex Blewitt via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On 13 Oct 2016, at 11:06, Haravikk via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 11 Oct 2016, at 19:43, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I thought this was long gone but today I found out it is still legal:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; switch i {<br>&gt;&gt;&gt; case 4 ... 6: ()<br>&gt;&gt;&gt; case 3: print(&quot;Here&quot;)<br>&gt;&gt;&gt; default: break<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is there a motivating factor for keeping this in the language? The compiler picks up on Void and emits an error. You&#39;d think () would produce the same results but it doesn&#39;t.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; — Erica<br>&gt;&gt; <br>&gt;&gt; Hopefully I&#39;m not the only one but… how are we supposed to be doing this? Because () is exactly what I&#39;ve been using the entire time for cases that I want to ignore (or are handled in code outside the switch). I&#39;m going to have a few dozen files to edit if there&#39;s something else I&#39;m supposed to be using… <br>&gt; <br>&gt; You can have a &#39;break&#39; there, which is equivalent to a nop but without a return value. Whether that&#39;s what you&#39;re supposed to do or not is a different issue :)<br></p><p>Right, I’d recommend using “break” for a case that you’re intentionally ignoring.  That communicates clearly to someone maintaining the code that you thought about it and are intentionally ignoring it (or bailing out before other cases could match it).<br></p><p>-Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161013/aa9e0ee4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Pitch: disallow `()` from Switch statement case satisfaction</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>October 13, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Oct 13, 2016, at 9:31 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Oct 13, 2016, at 4:26 AM, Alex Blewitt via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On 13 Oct 2016, at 11:06, Haravikk via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 11 Oct 2016, at 19:43, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I thought this was long gone but today I found out it is still legal:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; switch i {<br>&gt;&gt;&gt;&gt; case 4 ... 6: ()<br>&gt;&gt;&gt;&gt; case 3: print(&quot;Here&quot;)<br>&gt;&gt;&gt;&gt; default: break<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Is there a motivating factor for keeping this in the language? The compiler picks up on Void and emits an error. You&#39;d think () would produce the same results but it doesn&#39;t.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; — Erica<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hopefully I&#39;m not the only one but… how are we supposed to be doing this? Because () is exactly what I&#39;ve been using the entire time for cases that I want to ignore (or are handled in code outside the switch). I&#39;m going to have a few dozen files to edit if there&#39;s something else I&#39;m supposed to be using… <br>&gt;&gt; <br>&gt;&gt; You can have a &#39;break&#39; there, which is equivalent to a nop but without a return value. Whether that&#39;s what you&#39;re supposed to do or not is a different issue :)<br>&gt; <br>&gt; Right, I’d recommend using “break” for a case that you’re intentionally ignoring.  That communicates clearly to someone maintaining the code that you thought about it and are intentionally ignoring it (or bailing out before other cases could match it).<br>&gt; <br>&gt; -Chris<br></p><p>This brings up a particular pet peeve of mine in terms of ability (or lack thereof) to communicate about returns from closures.<br></p><p>func forInExample() -&gt; String {<br>    for _ in [1, 2, 3] {<br>        return &quot;Inner&quot;<br>    }<br>    return &quot;Outer&quot;<br>}<br></p><p>let y = forInExample() // Inner<br></p><p>func forEachExample() -&gt; String {<br>    [1, 2, 3].forEach { _ in <br>        return &quot;Inner&quot;<br>    }<br>    return &quot;Outer&quot;<br>}<br></p><p>let x = forEachExample() // &quot;Outer&quot;<br></p><p>In Objective-C, it was possible to create a `blockReturn` macro and substitute it for block `return` statements. This customization cannot be duplicated in Swift without a change to the language. In regard to clear communication to code maintainers, this issue is problematic, although it&#39;s mitigated by strict adherence to the &quot;Rule of Kevin&quot; (parens around functional closures, none around procedural ones)<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161013/012fa71b/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
