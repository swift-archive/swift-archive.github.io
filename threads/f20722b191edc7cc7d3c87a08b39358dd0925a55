<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/23a31075ffa046c5a4da64af895ceb07?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Cihat Gündüz</string> &lt;CihatGuenduez at posteo.de&gt;<p>December 18, 2015 at 07:00:00pm</p></header><div class="content"><p>Dear Swift-Community,<br></p><p>I’d like to propose an addition of a useful method, especially for beginners that also makes Swift much more readable in some situations: The addition of a .times method to Integer type(s).<br></p><p>For example recently in one of my projects I wanted to test the scalability of an important piece of code and wrote this method:<br></p><p>    func testPerfQualityInPercentWithoutQualityImprovements() {<br>        self.measureBlock {<br>            let expectedQuality = 33.33<br>            0.stride(to: 5_000, by: 1).forEach { _ in<br>                XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>            }   <br>        }<br>    }<br></p><p>As you can see what I basically wanted was to repeat the test some thousand times. I also like to use the Ruby language and one thing I love about it is that it has some really handy methods integrated to the language in situations like this which make the code very readable and therefore fun to use.<br></p><p>I’m an even bigger fan of Swift so I’d love to see such useful methods appear in Swift, too and this is the first I came across that I really missed. So I’m asking myself, what if I could write the same code above like this:<br></p><p>    func testPerfQualityInPercentWithoutQualityImprovements() {<br>        self.measureBlock {<br>            let expectedQuality = 33.33<br>            5_000.times {<br>                XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>            }   <br>        }<br>    }<br></p><p>I think it could be added to the Swift standard library very easily (for example by using the .stride method like I used) without any side effects and has enough advantages to be part of Swift itself. What do you think?<br></p><p>I wish you all the best,<br>Cihat<br></p><p><br>P.S.: This is my very first mail in such a mailing list so I did everything correctly. ^.^<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/f2075a55/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0eaab3d5d1d4428f74a711f724f2eb47?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Etan Kissling</string> &lt;kissling at oberon.ch&gt;<p>December 18, 2015 at 06:00:00pm</p></header><div class="content"><p>You don&#39;t need stride for this.<br></p><p>    func foo() {<br>        (0..&lt;5_000).forEach { _ in<br>            print(&quot;asdf&quot;)<br>        }<br>    }<br></p><p><br>On 18 Dec 2015, at 19:25, Cihat Gündüz via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>Dear Swift-Community,<br></p><p>I’d like to propose an addition of a useful method, especially for beginners that also makes Swift much more readable in some situations: The addition of a .times method to Integer type(s).<br></p><p>For example recently in one of my projects I wanted to test the scalability of an important piece of code and wrote this method:<br></p><p>    func testPerfQualityInPercentWithoutQualityImprovements() {<br>        self.measureBlock {<br>            let expectedQuality = 33.33<br>            0.stride(to: 5_000, by: 1).forEach { _ in<br>                XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)<br>            }<br>        }<br>    }<br></p><p>As you can see what I basically wanted was to repeat the test some thousand times. I also like to use the Ruby language and one thing I love about it is that it has some really handy methods integrated to the language in situations like this which make the code very readable and therefore fun to use.<br></p><p>I’m an even bigger fan of Swift so I’d love to see such useful methods appear in Swift, too and this is the first I came across that I really missed. So I’m asking myself, what if I could write the same code above like this:<br></p><p>    func testPerfQualityInPercentWithoutQualityImprovements() {<br>        self.measureBlock {<br>            let expectedQuality = 33.33<br>            5_000.times {<br>                XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)<br>            }<br>        }<br>    }<br></p><p>I think it could be added to the Swift standard library very easily (for example by using the .stride method like I used) without any side effects and has enough advantages to be part of Swift itself. What do you think?<br></p><p>I wish you all the best,<br>Cihat<br></p><p><br>P.S.: This is my very first mail in such a mailing list so I did everything correctly. ^.^<br></p><p><br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/b49314a9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0eaab3d5d1d4428f74a711f724f2eb47?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Etan Kissling</string> &lt;kissling at oberon.ch&gt;<p>December 18, 2015 at 06:00:00pm</p></header><div class="content"><p>(or with a for in loop  -- but i guess you have a reason for using .foreach)<br></p><p>        for _ in 0..&lt;5_000 {<br>            print(&quot;asdf&quot;)<br>        }<br></p><p><br>On 18 Dec 2015, at 19:31, Etan Kissling via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>You don&#39;t need stride for this.<br></p><p>    func foo() {<br>        (0..&lt;5_000).forEach { _ in<br>            print(&quot;asdf&quot;)<br>        }<br>    }<br></p><p><br>On 18 Dec 2015, at 19:25, Cihat Gündüz via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>Dear Swift-Community,<br></p><p>I’d like to propose an addition of a useful method, especially for beginners that also makes Swift much more readable in some situations: The addition of a .times method to Integer type(s).<br></p><p>For example recently in one of my projects I wanted to test the scalability of an important piece of code and wrote this method:<br></p><p>    func testPerfQualityInPercentWithoutQualityImprovements() {<br>        self.measureBlock {<br>            let expectedQuality = 33.33<br>            0.stride(to: 5_000, by: 1).forEach { _ in<br>                XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)<br>            }<br>        }<br>    }<br></p><p>As you can see what I basically wanted was to repeat the test some thousand times. I also like to use the Ruby language and one thing I love about it is that it has some really handy methods integrated to the language in situations like this which make the code very readable and therefore fun to use.<br></p><p>I’m an even bigger fan of Swift so I’d love to see such useful methods appear in Swift, too and this is the first I came across that I really missed. So I’m asking myself, what if I could write the same code above like this:<br></p><p>    func testPerfQualityInPercentWithoutQualityImprovements() {<br>        self.measureBlock {<br>            let expectedQuality = 33.33<br>            5_000.times {<br>                XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)<br>            }<br>        }<br>    }<br></p><p>I think it could be added to the Swift standard library very easily (for example by using the .stride method like I used) without any side effects and has enough advantages to be part of Swift itself. What do you think?<br></p><p>I wish you all the best,<br>Cihat<br></p><p><br>P.S.: This is my very first mail in such a mailing list so I did everything correctly. ^.^<br></p><p><br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/c98b095f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/23a31075ffa046c5a4da64af895ceb07?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Cihat Gündüz</string> &lt;CihatGuenduez at posteo.de&gt;<p>December 18, 2015 at 07:00:00pm</p></header><div class="content"><p>I agree with both of you about the alternative implementations.<br></p><p>That’s exactly what I’d love to see integrated to the standard library like Ruby is here:<br>http://ruby-doc.org/core-2.2.4/Integer.html#method-i-times &lt;http://ruby-doc.org/core-2.2.4/Integer.html#method-i-times&gt;<br></p><p>My main problem is that it neither looks clean nor readable especially for beginners that there is an underscore in the closure. Also beginners often get confused with the number of times some code is run when starting to count from 0 which is also why I think it shouldn’t appear. The .times method would solve both of these problems.<br></p><p>&gt; Am 18.12.2015 um 19:33 schrieb Etan Kissling &lt;kissling at oberon.ch&gt;:<br>&gt; <br>&gt; (or with a for in loop  -- but i guess you have a reason for using .foreach)<br>&gt; <br>&gt;         for _ in 0..&lt;5_000 {<br>&gt;             print(&quot;asdf&quot;)<br>&gt;         }<br>&gt; <br>&gt; <br>&gt;&gt; On 18 Dec 2015, at 19:31, Etan Kissling via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; You don&#39;t need stride for this.<br>&gt;&gt; <br>&gt;&gt;     func foo() {<br>&gt;&gt;         (0..&lt;5_000).forEach { _ in<br>&gt;&gt;             print(&quot;asdf&quot;)<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 18 Dec 2015, at 19:25, Cihat Gündüz via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Dear Swift-Community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’d like to propose an addition of a useful method, especially for beginners that also makes Swift much more readable in some situations: The addition of a .times method to Integer type(s).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For example recently in one of my projects I wanted to test the scalability of an important piece of code and wrote this method:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;&gt;&gt;         self.measureBlock {<br>&gt;&gt;&gt;             let expectedQuality = 33.33<br>&gt;&gt;&gt;             0.stride(to: 5_000, by: 1).forEach { _ in<br>&gt;&gt;&gt;                 XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>&gt;&gt;&gt;             }   <br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As you can see what I basically wanted was to repeat the test some thousand times. I also like to use the Ruby language and one thing I love about it is that it has some really handy methods integrated to the language in situations like this which make the code very readable and therefore fun to use.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m an even bigger fan of Swift so I’d love to see such useful methods appear in Swift, too and this is the first I came across that I really missed. So I’m asking myself, what if I could write the same code above like this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;&gt;&gt;         self.measureBlock {<br>&gt;&gt;&gt;             let expectedQuality = 33.33<br>&gt;&gt;&gt;             5_000.times {<br>&gt;&gt;&gt;                 XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>&gt;&gt;&gt;             }   <br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think it could be added to the Swift standard library very easily (for example by using the .stride method like I used) without any side effects and has enough advantages to be part of Swift itself. What do you think?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I wish you all the best,<br>&gt;&gt;&gt; Cihat<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; P.S.: This is my very first mail in such a mailing list so I did everything correctly. ^.^<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/9cba6eae/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>December 18, 2015 at 08:00:00pm</p></header><div class="content"><p>I’m +1. It’s not something that’s super common, but `100.times { … }` expresses the intention far better than the rather cryptic `for _ in 0..&lt;100 { … }`.<br></p><p>The only possible concern — and this has been expressed in the proposal to remove `forEach` — is that closures have different semantics than `for`. Mostly, if someone wants to return from a containing function, you can’t do that from a closure.<br></p><p>— Radek<br></p><p>&gt; On 18 Dec 2015, at 19:38, Cihat Gündüz via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I agree with both of you about the alternative implementations.<br>&gt; <br>&gt; That’s exactly what I’d love to see integrated to the standard library like Ruby is here:<br>&gt; http://ruby-doc.org/core-2.2.4/Integer.html#method-i-times &lt;http://ruby-doc.org/core-2.2.4/Integer.html#method-i-times&gt;<br>&gt; <br>&gt; My main problem is that it neither looks clean nor readable especially for beginners that there is an underscore in the closure. Also beginners often get confused with the number of times some code is run when starting to count from 0 which is also why I think it shouldn’t appear. The .times method would solve both of these problems.<br>&gt; <br>&gt;&gt; Am 18.12.2015 um 19:33 schrieb Etan Kissling &lt;kissling at oberon.ch &lt;mailto:kissling at oberon.ch&gt;&gt;:<br>&gt;&gt; <br>&gt;&gt; (or with a for in loop  -- but i guess you have a reason for using .foreach)<br>&gt;&gt; <br>&gt;&gt;         for _ in 0..&lt;5_000 {<br>&gt;&gt;             print(&quot;asdf&quot;)<br>&gt;&gt;         }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 18 Dec 2015, at 19:31, Etan Kissling via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You don&#39;t need stride for this.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     func foo() {<br>&gt;&gt;&gt;         (0..&lt;5_000).forEach { _ in<br>&gt;&gt;&gt;             print(&quot;asdf&quot;)<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 18 Dec 2015, at 19:25, Cihat Gündüz via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Dear Swift-Community,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’d like to propose an addition of a useful method, especially for beginners that also makes Swift much more readable in some situations: The addition of a .times method to Integer type(s).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; For example recently in one of my projects I wanted to test the scalability of an important piece of code and wrote this method:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;&gt;&gt;&gt;         self.measureBlock {<br>&gt;&gt;&gt;&gt;             let expectedQuality = 33.33<br>&gt;&gt;&gt;&gt;             0.stride(to: 5_000, by: 1).forEach { _ in<br>&gt;&gt;&gt;&gt;                 XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>&gt;&gt;&gt;&gt;             }   <br>&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; As you can see what I basically wanted was to repeat the test some thousand times. I also like to use the Ruby language and one thing I love about it is that it has some really handy methods integrated to the language in situations like this which make the code very readable and therefore fun to use.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’m an even bigger fan of Swift so I’d love to see such useful methods appear in Swift, too and this is the first I came across that I really missed. So I’m asking myself, what if I could write the same code above like this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;&gt;&gt;&gt;         self.measureBlock {<br>&gt;&gt;&gt;&gt;             let expectedQuality = 33.33<br>&gt;&gt;&gt;&gt;             5_000.times {<br>&gt;&gt;&gt;&gt;                 XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>&gt;&gt;&gt;&gt;             }   <br>&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think it could be added to the Swift standard library very easily (for example by using the .stride method like I used) without any side effects and has enough advantages to be part of Swift itself. What do you think?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I wish you all the best,<br>&gt;&gt;&gt;&gt; Cihat<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; P.S.: This is my very first mail in such a mailing list so I did everything correctly. ^.^<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/4b8770fc/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>December 18, 2015 at 02:00:00pm</p></header><div class="content"><p>It doesn&#39;t need to be an underscore, but when it is not, the compiler emits an educative warning steering you towards _:<br></p><p>/tmp/test.swift:3:7: warning: immutable value &#39;i&#39; was never used; consider replacing with &#39;_&#39; or removing it<br></p><p>You can also use inclusive ranges instead if you&#39;re more comfortable with that: 1...5000 will do just that.<br></p><p>I don&#39;t mean to come across as dismissive, and I&#39;m all for an inclusive Swift that you can pick up without knowing advanced concepts. However, there is definitely value in helping people learn, and learning always moves you a little bit out of your comfort zone. When do we remove the training wheels? How long can we hide the fact that indices usually start at 0? How long before you need to iterate an array using the same range-based for loop?<br></p><p>I spend a lot of time on Stack Overflow and I&#39;ve seen lots of beginners ask for lots of things, but the people who ask about the for loop are usually people with a background in another C-like language who try to use the arguably less readable C-like for loop. I&#39;ve never seen anyone before say that it looks unclean or unreadable.<br></p><p>&gt; Le 18 déc. 2015 à 13:38:59, Cihat Gündüz via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; I agree with both of you about the alternative implementations.<br>&gt; <br>&gt; That’s exactly what I’d love to see integrated to the standard library like Ruby is here:<br>&gt; http://ruby-doc.org/core-2.2.4/Integer.html#method-i-times &lt;http://ruby-doc.org/core-2.2.4/Integer.html#method-i-times&gt;<br>&gt; <br>&gt; My main problem is that it neither looks clean nor readable especially for beginners that there is an underscore in the closure. Also beginners often get confused with the number of times some code is run when starting to count from 0 which is also why I think it shouldn’t appear. The .times method would solve both of these problems.<br>&gt; <br>&gt;&gt; Am 18.12.2015 um 19:33 schrieb Etan Kissling &lt;kissling at oberon.ch &lt;mailto:kissling at oberon.ch&gt;&gt;:<br>&gt;&gt; <br>&gt;&gt; (or with a for in loop  -- but i guess you have a reason for using .foreach)<br>&gt;&gt; <br>&gt;&gt;         for _ in 0..&lt;5_000 {<br>&gt;&gt;             print(&quot;asdf&quot;)<br>&gt;&gt;         }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 18 Dec 2015, at 19:31, Etan Kissling via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You don&#39;t need stride for this.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     func foo() {<br>&gt;&gt;&gt;         (0..&lt;5_000).forEach { _ in<br>&gt;&gt;&gt;             print(&quot;asdf&quot;)<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 18 Dec 2015, at 19:25, Cihat Gündüz via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Dear Swift-Community,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’d like to propose an addition of a useful method, especially for beginners that also makes Swift much more readable in some situations: The addition of a .times method to Integer type(s).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; For example recently in one of my projects I wanted to test the scalability of an important piece of code and wrote this method:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;&gt;&gt;&gt;         self.measureBlock {<br>&gt;&gt;&gt;&gt;             let expectedQuality = 33.33<br>&gt;&gt;&gt;&gt;             0.stride(to: 5_000, by: 1).forEach { _ in<br>&gt;&gt;&gt;&gt;                 XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>&gt;&gt;&gt;&gt;             }   <br>&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; As you can see what I basically wanted was to repeat the test some thousand times. I also like to use the Ruby language and one thing I love about it is that it has some really handy methods integrated to the language in situations like this which make the code very readable and therefore fun to use.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’m an even bigger fan of Swift so I’d love to see such useful methods appear in Swift, too and this is the first I came across that I really missed. So I’m asking myself, what if I could write the same code above like this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;&gt;&gt;&gt;         self.measureBlock {<br>&gt;&gt;&gt;&gt;             let expectedQuality = 33.33<br>&gt;&gt;&gt;&gt;             5_000.times {<br>&gt;&gt;&gt;&gt;                 XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>&gt;&gt;&gt;&gt;             }   <br>&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think it could be added to the Swift standard library very easily (for example by using the .stride method like I used) without any side effects and has enough advantages to be part of Swift itself. What do you think?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I wish you all the best,<br>&gt;&gt;&gt;&gt; Cihat<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; P.S.: This is my very first mail in such a mailing list so I did everything correctly. ^.^<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/d965ddcd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>December 18, 2015 at 08:00:00pm</p></header><div class="content"><p>Who says it’s useful only for beginners?<br></p><p>The way I see it, it’s about expressivity. What conveys the intention better when you want to do something 10 times? `10.times { … }` or an iteration over a range from 0 to 10?<br></p><p>— Radek<br></p><p>&gt; On 18 Dec 2015, at 20:13, Félix Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It doesn&#39;t need to be an underscore, but when it is not, the compiler emits an educative warning steering you towards _:<br>&gt; <br>&gt; /tmp/test.swift:3:7: warning: immutable value &#39;i&#39; was never used; consider replacing with &#39;_&#39; or removing it<br>&gt; <br>&gt; You can also use inclusive ranges instead if you&#39;re more comfortable with that: 1...5000 will do just that.<br>&gt; <br>&gt; I don&#39;t mean to come across as dismissive, and I&#39;m all for an inclusive Swift that you can pick up without knowing advanced concepts. However, there is definitely value in helping people learn, and learning always moves you a little bit out of your comfort zone. When do we remove the training wheels? How long can we hide the fact that indices usually start at 0? How long before you need to iterate an array using the same range-based for loop?<br>&gt; <br>&gt; I spend a lot of time on Stack Overflow and I&#39;ve seen lots of beginners ask for lots of things, but the people who ask about the for loop are usually people with a background in another C-like language who try to use the arguably less readable C-like for loop. I&#39;ve never seen anyone before say that it looks unclean or unreadable.<br>&gt; <br>&gt;&gt; Le 18 déc. 2015 à 13:38:59, Cihat Gündüz via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; I agree with both of you about the alternative implementations.<br>&gt;&gt; <br>&gt;&gt; That’s exactly what I’d love to see integrated to the standard library like Ruby is here:<br>&gt;&gt; http://ruby-doc.org/core-2.2.4/Integer.html#method-i-times &lt;http://ruby-doc.org/core-2.2.4/Integer.html#method-i-times&gt;<br>&gt;&gt; <br>&gt;&gt; My main problem is that it neither looks clean nor readable especially for beginners that there is an underscore in the closure. Also beginners often get confused with the number of times some code is run when starting to count from 0 which is also why I think it shouldn’t appear. The .times method would solve both of these problems.<br>&gt;&gt; <br>&gt;&gt;&gt; Am 18.12.2015 um 19:33 schrieb Etan Kissling &lt;kissling at oberon.ch &lt;mailto:kissling at oberon.ch&gt;&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (or with a for in loop  -- but i guess you have a reason for using .foreach)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;         for _ in 0..&lt;5_000 {<br>&gt;&gt;&gt;             print(&quot;asdf&quot;)<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 18 Dec 2015, at 19:31, Etan Kissling via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; You don&#39;t need stride for this.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     func foo() {<br>&gt;&gt;&gt;&gt;         (0..&lt;5_000).forEach { _ in<br>&gt;&gt;&gt;&gt;             print(&quot;asdf&quot;)<br>&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 18 Dec 2015, at 19:25, Cihat Gündüz via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Dear Swift-Community,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I’d like to propose an addition of a useful method, especially for beginners that also makes Swift much more readable in some situations: The addition of a .times method to Integer type(s).<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; For example recently in one of my projects I wanted to test the scalability of an important piece of code and wrote this method:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;     func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;&gt;&gt;&gt;&gt;         self.measureBlock {<br>&gt;&gt;&gt;&gt;&gt;             let expectedQuality = 33.33<br>&gt;&gt;&gt;&gt;&gt;             0.stride(to: 5_000, by: 1).forEach { _ in<br>&gt;&gt;&gt;&gt;&gt;                 XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>&gt;&gt;&gt;&gt;&gt;             }   <br>&gt;&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; As you can see what I basically wanted was to repeat the test some thousand times. I also like to use the Ruby language and one thing I love about it is that it has some really handy methods integrated to the language in situations like this which make the code very readable and therefore fun to use.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I’m an even bigger fan of Swift so I’d love to see such useful methods appear in Swift, too and this is the first I came across that I really missed. So I’m asking myself, what if I could write the same code above like this:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;     func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;&gt;&gt;&gt;&gt;         self.measureBlock {<br>&gt;&gt;&gt;&gt;&gt;             let expectedQuality = 33.33<br>&gt;&gt;&gt;&gt;&gt;             5_000.times {<br>&gt;&gt;&gt;&gt;&gt;                 XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>&gt;&gt;&gt;&gt;&gt;             }   <br>&gt;&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I think it could be added to the Swift standard library very easily (for example by using the .stride method like I used) without any side effects and has enough advantages to be part of Swift itself. What do you think?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I wish you all the best,<br>&gt;&gt;&gt;&gt;&gt; Cihat<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; P.S.: This is my very first mail in such a mailing list so I did everything correctly. ^.^<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/0de45ed6/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/23a31075ffa046c5a4da64af895ceb07?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Cihat Gündüz</string> &lt;CihatGuenduez at posteo.de&gt;<p>December 18, 2015 at 08:00:00pm</p></header><div class="content"><p>&gt; Am 18.12.2015 um 20:13 schrieb Félix Cloutier &lt;felixcca at yahoo.ca&gt;:<br>&gt; <br>&gt; It doesn&#39;t need to be an underscore, but when it is not, the compiler emits an educative warning steering you towards _:<br></p><p>It’s not about the underscore as a character, it’s about the fact that there is the clutter of an underscore at all what I don’t like and what makes me feel the code isn’t as clean as it could be.<br></p><p>&gt; <br>&gt; /tmp/test.swift:3:7: warning: immutable value &#39;i&#39; was never used; consider replacing with &#39;_&#39; or removing it<br>&gt; <br>&gt; You can also use inclusive ranges instead if you&#39;re more comfortable with that: 1...5000 will do just that.<br></p><p>I’m comfortable with ranges but I also used to teach Java back a few years ago and I saw computer science students struggle with the exact number a loop was being executed. So that’s the only reason I brought up that example to have an additional argument.<br></p><p>But again, for me it is more about the clutter that the 1… or 0..&lt; adds to something that could so easily made simpler and more descriptive.<br></p><p>I think this is also a question of: How many convenience methods do we want to see in the Swift standard library? In Ruby, at least, there seemed to be enough people to find this one useful. And it’s the first method I missed until now, so I took that as a sign before suggesting the addition. I also don’t like when there are thousands of convenience methods for things that could easily be written in other ways – but I don’t feel that way with the suggested .times method.<br></p><p>&gt; <br>&gt; I don&#39;t mean to come across as dismissive, and I&#39;m all for an inclusive Swift that you can pick up without knowing advanced concepts. However, there is definitely value in helping people learn, and learning always moves you a little bit out of your comfort zone. When do we remove the training wheels? How long can we hide the fact that indices usually start at 0? How long before you need to iterate an array using the same range-based for loop?<br>&gt; <br>&gt; I spend a lot of time on Stack Overflow and I&#39;ve seen lots of beginners ask for lots of things, but the people who ask about the for loop are usually people with a background in another C-like language who try to use the arguably less readable C-like for loop. I&#39;ve never seen anyone before say that it looks unclean or unreadable.<br></p><p>I understand what you mean but I don’t think that this is about indices or beginners. The fact that readability and expressiveness make a language easier to learn for beginners IMHO is just a side effect of a well thought-out and developed language. Maybe I wasn’t clear enough but I want to see the .times method in Swift for my own usage, not for beginners. :)<br></p><p>&gt; <br>&gt;&gt; Le 18 déc. 2015 à 13:38:59, Cihat Gündüz via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; I agree with both of you about the alternative implementations.<br>&gt;&gt; <br>&gt;&gt; That’s exactly what I’d love to see integrated to the standard library like Ruby is here:<br>&gt;&gt; http://ruby-doc.org/core-2.2.4/Integer.html#method-i-times &lt;http://ruby-doc.org/core-2.2.4/Integer.html#method-i-times&gt;<br>&gt;&gt; <br>&gt;&gt; My main problem is that it neither looks clean nor readable especially for beginners that there is an underscore in the closure. Also beginners often get confused with the number of times some code is run when starting to count from 0 which is also why I think it shouldn’t appear. The .times method would solve both of these problems.<br>&gt;&gt; <br>&gt;&gt;&gt; Am 18.12.2015 um 19:33 schrieb Etan Kissling &lt;kissling at oberon.ch &lt;mailto:kissling at oberon.ch&gt;&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (or with a for in loop  -- but i guess you have a reason for using .foreach)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;         for _ in 0..&lt;5_000 {<br>&gt;&gt;&gt;             print(&quot;asdf&quot;)<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 18 Dec 2015, at 19:31, Etan Kissling via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; You don&#39;t need stride for this.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     func foo() {<br>&gt;&gt;&gt;&gt;         (0..&lt;5_000).forEach { _ in<br>&gt;&gt;&gt;&gt;             print(&quot;asdf&quot;)<br>&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 18 Dec 2015, at 19:25, Cihat Gündüz via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Dear Swift-Community,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I’d like to propose an addition of a useful method, especially for beginners that also makes Swift much more readable in some situations: The addition of a .times method to Integer type(s).<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; For example recently in one of my projects I wanted to test the scalability of an important piece of code and wrote this method:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;     func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;&gt;&gt;&gt;&gt;         self.measureBlock {<br>&gt;&gt;&gt;&gt;&gt;             let expectedQuality = 33.33<br>&gt;&gt;&gt;&gt;&gt;             0.stride(to: 5_000, by: 1).forEach { _ in<br>&gt;&gt;&gt;&gt;&gt;                 XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>&gt;&gt;&gt;&gt;&gt;             }   <br>&gt;&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; As you can see what I basically wanted was to repeat the test some thousand times. I also like to use the Ruby language and one thing I love about it is that it has some really handy methods integrated to the language in situations like this which make the code very readable and therefore fun to use.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I’m an even bigger fan of Swift so I’d love to see such useful methods appear in Swift, too and this is the first I came across that I really missed. So I’m asking myself, what if I could write the same code above like this:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;     func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;&gt;&gt;&gt;&gt;         self.measureBlock {<br>&gt;&gt;&gt;&gt;&gt;             let expectedQuality = 33.33<br>&gt;&gt;&gt;&gt;&gt;             5_000.times {<br>&gt;&gt;&gt;&gt;&gt;                 XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>&gt;&gt;&gt;&gt;&gt;             }   <br>&gt;&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I think it could be added to the Swift standard library very easily (for example by using the .stride method like I used) without any side effects and has enough advantages to be part of Swift itself. What do you think?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I wish you all the best,<br>&gt;&gt;&gt;&gt;&gt; Cihat<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; P.S.: This is my very first mail in such a mailing list so I did everything correctly. ^.^<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/7313008c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December 18, 2015 at 11:00:00am</p></header><div class="content"><p>I like how clean &quot;100.times { doSomething() }&quot; looks, but I&#39;m concerned its<br>usefulness will be limited because control-flow statements like<br>break/continue/return won&#39;t work from inside a closure.<br></p><p>Jacob<br></p><p>On Fri, Dec 18, 2015 at 11:36 AM, Cihat Gündüz &lt;swift-evolution at swift.org&gt;<br>wrote:<br></p><p>&gt;<br>&gt; Am 18.12.2015 um 20:13 schrieb Félix Cloutier &lt;felixcca at yahoo.ca&gt;:<br>&gt;<br>&gt; It doesn&#39;t need to be an underscore, but when it is not, the compiler<br>&gt; emits an educative warning steering you towards _:<br>&gt;<br>&gt;<br>&gt; It’s not about the underscore as a character, it’s about the fact that<br>&gt; there is the clutter of an underscore at all what I don’t like and what<br>&gt; makes me feel the code isn’t as clean as it could be.<br>&gt;<br>&gt;<br>&gt; */tmp/test.swift:3:7: **warning: **immutable value &#39;i&#39; was never used;<br>&gt; consider replacing with &#39;_&#39; or removing it*<br>&gt;<br>&gt; You can also use inclusive ranges instead if you&#39;re more comfortable with<br>&gt; that: 1...5000 will do just that.<br>&gt;<br>&gt;<br>&gt; I’m comfortable with ranges but I also used to teach Java back a few years<br>&gt; ago and I saw computer science students struggle with the exact number a<br>&gt; loop was being executed. So that’s the only reason I brought up that<br>&gt; example to have an additional argument.<br>&gt;<br>&gt; But again, for me it is more about the clutter that the 1… or 0..&lt; adds to<br>&gt; something that could so easily made simpler and more descriptive.<br>&gt;<br>&gt; I think this is also a question of: *How many convenience methods do we<br>&gt; want to see in the Swift standard library?* In Ruby, at least, there<br>&gt; seemed to be enough people to find this one useful. And it’s the first<br>&gt; method I missed until now, so I took that as a sign before suggesting the<br>&gt; addition. I also don’t like when there are thousands of convenience methods<br>&gt; for things that could easily be written in other ways – but I don’t feel<br>&gt; that way with the suggested .times method.<br>&gt;<br>&gt;<br>&gt; I don&#39;t mean to come across as dismissive, and I&#39;m all for an inclusive<br>&gt; Swift that you can pick up without knowing advanced concepts. However,<br>&gt; there is definitely value in helping people learn, and learning always<br>&gt; moves you a little bit out of your comfort zone. When do we remove the<br>&gt; training wheels? How long can we hide the fact that indices usually start<br>&gt; at 0? How long before you need to iterate an array using the same<br>&gt; range-based for loop?<br>&gt;<br>&gt; I spend a lot of time on Stack Overflow and I&#39;ve seen lots of beginners<br>&gt; ask for lots of things, but the people who ask about the for loop are<br>&gt; usually people with a background in another C-like language who try to use<br>&gt; the arguably less readable C-like for loop. I&#39;ve never seen anyone before<br>&gt; say that it looks unclean or unreadable.<br>&gt;<br>&gt;<br>&gt; I understand what you mean but I don’t think that this is about indices or<br>&gt; beginners. The fact that readability and expressiveness make a language<br>&gt; easier to learn for beginners IMHO is just a side effect of a well<br>&gt; thought-out and developed language. Maybe I wasn’t clear enough but I want<br>&gt; to see the .times method in Swift for my own usage, not for beginners. :)<br>&gt;<br>&gt;<br>&gt; Le 18 déc. 2015 à 13:38:59, Cihat Gündüz via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;<br>&gt; I agree with both of you about the alternative implementations.<br>&gt;<br>&gt; That’s exactly what I’d love to see integrated to the standard library<br>&gt; like Ruby is here:<br>&gt; http://ruby-doc.org/core-2.2.4/Integer.html#method-i-times<br>&gt;<br>&gt; My main problem is that it neither looks *clean* nor *readable* especially<br>&gt; for beginners that there is an *underscore* in the closure. Also<br>&gt; beginners often get confused with the number of times some code is run when<br>&gt;  *starting to count from 0* which is also why I think it shouldn’t<br>&gt; appear. The .times method would solve both of these problems.<br>&gt;<br>&gt; Am 18.12.2015 um 19:33 schrieb Etan Kissling &lt;kissling at oberon.ch&gt;:<br>&gt;<br>&gt; (or with a for in loop  -- but i guess you have a reason for using<br>&gt; .foreach)<br>&gt;<br>&gt;         for _ in 0..&lt;5_000 {<br>&gt;             print(&quot;asdf&quot;)<br>&gt;         }<br>&gt;<br>&gt;<br>&gt; On 18 Dec 2015, at 19:31, Etan Kissling via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; You don&#39;t need stride for this.<br>&gt;<br>&gt;     func foo() {<br>&gt;         (0..&lt;5_000).forEach { _ in<br>&gt;             print(&quot;asdf&quot;)<br>&gt;         }<br>&gt;     }<br>&gt;<br>&gt;<br>&gt; On 18 Dec 2015, at 19:25, Cihat Gündüz via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Dear Swift-Community,<br>&gt;<br>&gt; I’d like to propose an *addition of a useful method*, especially for<br>&gt; beginners that also makes Swift much more readable in some situations: The<br>&gt; addition of a .times method to Integer type(s).<br>&gt;<br>&gt; For example recently in one of my projects I wanted to test the<br>&gt; scalability of an important piece of code and wrote this method:<br>&gt;<br>&gt;     func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;         self.measureBlock {<br>&gt;             let expectedQuality = 33.33<br>&gt;             0.stride(to: 5_000, by: 1).forEach { _ in<br>&gt;                 XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent,<br>&gt; expectedQuality, accuracy: 0.1)<br>&gt;             }<br>&gt;         }<br>&gt;     }<br>&gt;<br>&gt; As you can see what I basically wanted was to repeat the test some<br>&gt; thousand times. I also like to use the Ruby language and one thing I love<br>&gt; about it is that it has some really handy methods integrated to the<br>&gt; language in situations like this which make the code very readable and<br>&gt; therefore fun to use.<br>&gt;<br>&gt; I’m an even bigger fan of Swift so I’d love to see such useful methods<br>&gt; appear in Swift, too and this is the first I came across that I really<br>&gt; missed. So I’m asking myself, what if I could write the same code above<br>&gt; like this:<br>&gt;<br>&gt;     func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;         self.measureBlock {<br>&gt;             let expectedQuality = 33.33<br>&gt;             5_000.times {<br>&gt;                 XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent,<br>&gt; expectedQuality, accuracy: 0.1)<br>&gt;             }<br>&gt;         }<br>&gt;     }<br>&gt;<br>&gt; I think it could be added to the Swift standard library very easily (for<br>&gt; example by using the .stride method like I used) without any side effects<br>&gt; and has enough advantages to be part of Swift itself. What do you think?<br>&gt;<br>&gt; I wish you all the best,<br>&gt; Cihat<br>&gt;<br>&gt;<br>&gt; P.S.: This is my very first mail in such a mailing list so I did<br>&gt; everything correctly. ^.^<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/1fe71d40/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>December 18, 2015 at 12:00:00pm</p></header><div class="content"><p>-1 from me, if nothing else because the name is confusable with multiplication in the context of integers.<br></p><p>&gt; On Dec 18, 2015, at 11:53 AM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I like how clean &quot;100.times { doSomething() }&quot; looks, but I&#39;m concerned its usefulness will be limited because control-flow statements like break/continue/return won&#39;t work from inside a closure.<br>&gt; <br>&gt; Jacob<br>&gt; <br>&gt; On Fri, Dec 18, 2015 at 11:36 AM, Cihat Gündüz &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Am 18.12.2015 um 20:13 schrieb Félix Cloutier &lt;felixcca at yahoo.ca &lt;mailto:felixcca at yahoo.ca&gt;&gt;:<br>&gt;&gt; <br>&gt;&gt; It doesn&#39;t need to be an underscore, but when it is not, the compiler emits an educative warning steering you towards _:<br>&gt; <br>&gt; It’s not about the underscore as a character, it’s about the fact that there is the clutter of an underscore at all what I don’t like and what makes me feel the code isn’t as clean as it could be.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; /tmp/test.swift:3:7: warning: immutable value &#39;i&#39; was never used; consider replacing with &#39;_&#39; or removing it<br>&gt;&gt; <br>&gt;&gt; You can also use inclusive ranges instead if you&#39;re more comfortable with that: 1...5000 will do just that.<br>&gt; <br>&gt; I’m comfortable with ranges but I also used to teach Java back a few years ago and I saw computer science students struggle with the exact number a loop was being executed. So that’s the only reason I brought up that example to have an additional argument.<br>&gt; <br>&gt; But again, for me it is more about the clutter that the 1… or 0..&lt; adds to something that could so easily made simpler and more descriptive.<br>&gt; <br>&gt; I think this is also a question of: How many convenience methods do we want to see in the Swift standard library? In Ruby, at least, there seemed to be enough people to find this one useful. And it’s the first method I missed until now, so I took that as a sign before suggesting the addition. I also don’t like when there are thousands of convenience methods for things that could easily be written in other ways – but I don’t feel that way with the suggested .times method.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; I don&#39;t mean to come across as dismissive, and I&#39;m all for an inclusive Swift that you can pick up without knowing advanced concepts. However, there is definitely value in helping people learn, and learning always moves you a little bit out of your comfort zone. When do we remove the training wheels? How long can we hide the fact that indices usually start at 0? How long before you need to iterate an array using the same range-based for loop?<br>&gt;&gt; <br>&gt;&gt; I spend a lot of time on Stack Overflow and I&#39;ve seen lots of beginners ask for lots of things, but the people who ask about the for loop are usually people with a background in another C-like language who try to use the arguably less readable C-like for loop. I&#39;ve never seen anyone before say that it looks unclean or unreadable.<br>&gt; <br>&gt; I understand what you mean but I don’t think that this is about indices or beginners. The fact that readability and expressiveness make a language easier to learn for beginners IMHO is just a side effect of a well thought-out and developed language. Maybe I wasn’t clear enough but I want to see the .times method in Swift for my own usage, not for beginners. :)<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; Le 18 déc. 2015 à 13:38:59, Cihat Gündüz via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I agree with both of you about the alternative implementations.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That’s exactly what I’d love to see integrated to the standard library like Ruby is here:<br>&gt;&gt;&gt; http://ruby-doc.org/core-2.2.4/Integer.html#method-i-times &lt;http://ruby-doc.org/core-2.2.4/Integer.html#method-i-times&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My main problem is that it neither looks clean nor readable especially for beginners that there is an underscore in the closure. Also beginners often get confused with the number of times some code is run when starting to count from 0 which is also why I think it shouldn’t appear. The .times method would solve both of these problems.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Am 18.12.2015 um 19:33 schrieb Etan Kissling &lt;kissling at oberon.ch &lt;mailto:kissling at oberon.ch&gt;&gt;:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; (or with a for in loop  -- but i guess you have a reason for using .foreach)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;         for _ in 0..&lt;5_000 {<br>&gt;&gt;&gt;&gt;             print(&quot;asdf&quot;)<br>&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 18 Dec 2015, at 19:31, Etan Kissling via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; You don&#39;t need stride for this.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;     func foo() {<br>&gt;&gt;&gt;&gt;&gt;         (0..&lt;5_000).forEach { _ in<br>&gt;&gt;&gt;&gt;&gt;             print(&quot;asdf&quot;)<br>&gt;&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On 18 Dec 2015, at 19:25, Cihat Gündüz via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Dear Swift-Community,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I’d like to propose an addition of a useful method, especially for beginners that also makes Swift much more readable in some situations: The addition of a .times method to Integer type(s).<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; For example recently in one of my projects I wanted to test the scalability of an important piece of code and wrote this method:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;     func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;&gt;&gt;&gt;&gt;&gt;         self.measureBlock {<br>&gt;&gt;&gt;&gt;&gt;&gt;             let expectedQuality = 33.33<br>&gt;&gt;&gt;&gt;&gt;&gt;             0.stride(to: 5_000, by: 1).forEach { _ in<br>&gt;&gt;&gt;&gt;&gt;&gt;                 XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>&gt;&gt;&gt;&gt;&gt;&gt;             }   <br>&gt;&gt;&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; As you can see what I basically wanted was to repeat the test some thousand times. I also like to use the Ruby language and one thing I love about it is that it has some really handy methods integrated to the language in situations like this which make the code very readable and therefore fun to use.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I’m an even bigger fan of Swift so I’d love to see such useful methods appear in Swift, too and this is the first I came across that I really missed. So I’m asking myself, what if I could write the same code above like this:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;     func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;&gt;&gt;&gt;&gt;&gt;         self.measureBlock {<br>&gt;&gt;&gt;&gt;&gt;&gt;             let expectedQuality = 33.33<br>&gt;&gt;&gt;&gt;&gt;&gt;             5_000.times {<br>&gt;&gt;&gt;&gt;&gt;&gt;                 XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>&gt;&gt;&gt;&gt;&gt;&gt;             }   <br>&gt;&gt;&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I think it could be added to the Swift standard library very easily (for example by using the .stride method like I used) without any side effects and has enough advantages to be part of Swift itself. What do you think?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I wish you all the best,<br>&gt;&gt;&gt;&gt;&gt;&gt; Cihat<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; P.S.: This is my very first mail in such a mailing list so I did everything correctly. ^.^<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-Dave<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/c07c625a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/23a31075ffa046c5a4da64af895ceb07?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Cihat Gündüz</string> &lt;CihatGuenduez at posteo.de&gt;<p>December 18, 2015 at 09:00:00pm</p></header><div class="content"><p>&gt; Am 18.12.2015 um 21:02 schrieb Dave Abrahams &lt;dabrahams at apple.com&gt;:<br>&gt; <br>&gt; -1 from me, if nothing else because the name is confusable with multiplication in the context of integers.<br></p><p>Isn’t it a multiplication? A multiplication of the closure specified? I see it as such.<br></p><p>Also I don’t think many will confuse a method that takes a closure with the multiplication of two integers. I may be wrong, of course.<br></p><p>– Cihat<br></p><p>&gt; <br>&gt;&gt; On Dec 18, 2015, at 11:53 AM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I like how clean &quot;100.times { doSomething() }&quot; looks, but I&#39;m concerned its usefulness will be limited because control-flow statements like break/continue/return won&#39;t work from inside a closure.<br>&gt;&gt; <br>&gt;&gt; Jacob<br>&gt;&gt; <br>&gt;&gt; On Fri, Dec 18, 2015 at 11:36 AM, Cihat Gündüz &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Am 18.12.2015 um 20:13 schrieb Félix Cloutier &lt;felixcca at yahoo.ca &lt;mailto:felixcca at yahoo.ca&gt;&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It doesn&#39;t need to be an underscore, but when it is not, the compiler emits an educative warning steering you towards _:<br>&gt;&gt; <br>&gt;&gt; It’s not about the underscore as a character, it’s about the fact that there is the clutter of an underscore at all what I don’t like and what makes me feel the code isn’t as clean as it could be.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; /tmp/test.swift:3:7: warning: immutable value &#39;i&#39; was never used; consider replacing with &#39;_&#39; or removing it<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You can also use inclusive ranges instead if you&#39;re more comfortable with that: 1...5000 will do just that.<br>&gt;&gt; <br>&gt;&gt; I’m comfortable with ranges but I also used to teach Java back a few years ago and I saw computer science students struggle with the exact number a loop was being executed. So that’s the only reason I brought up that example to have an additional argument.<br>&gt;&gt; <br>&gt;&gt; But again, for me it is more about the clutter that the 1… or 0..&lt; adds to something that could so easily made simpler and more descriptive.<br>&gt;&gt; <br>&gt;&gt; I think this is also a question of: How many convenience methods do we want to see in the Swift standard library? In Ruby, at least, there seemed to be enough people to find this one useful. And it’s the first method I missed until now, so I took that as a sign before suggesting the addition. I also don’t like when there are thousands of convenience methods for things that could easily be written in other ways – but I don’t feel that way with the suggested .times method.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t mean to come across as dismissive, and I&#39;m all for an inclusive Swift that you can pick up without knowing advanced concepts. However, there is definitely value in helping people learn, and learning always moves you a little bit out of your comfort zone. When do we remove the training wheels? How long can we hide the fact that indices usually start at 0? How long before you need to iterate an array using the same range-based for loop?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I spend a lot of time on Stack Overflow and I&#39;ve seen lots of beginners ask for lots of things, but the people who ask about the for loop are usually people with a background in another C-like language who try to use the arguably less readable C-like for loop. I&#39;ve never seen anyone before say that it looks unclean or unreadable.<br>&gt;&gt; <br>&gt;&gt; I understand what you mean but I don’t think that this is about indices or beginners. The fact that readability and expressiveness make a language easier to learn for beginners IMHO is just a side effect of a well thought-out and developed language. Maybe I wasn’t clear enough but I want to see the .times method in Swift for my own usage, not for beginners. :)<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Le 18 déc. 2015 à 13:38:59, Cihat Gündüz via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I agree with both of you about the alternative implementations.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; That’s exactly what I’d love to see integrated to the standard library like Ruby is here:<br>&gt;&gt;&gt;&gt; http://ruby-doc.org/core-2.2.4/Integer.html#method-i-times &lt;http://ruby-doc.org/core-2.2.4/Integer.html#method-i-times&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; My main problem is that it neither looks clean nor readable especially for beginners that there is an underscore in the closure. Also beginners often get confused with the number of times some code is run when starting to count from 0 which is also why I think it shouldn’t appear. The .times method would solve both of these problems.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Am 18.12.2015 um 19:33 schrieb Etan Kissling &lt;kissling at oberon.ch &lt;mailto:kissling at oberon.ch&gt;&gt;:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; (or with a for in loop  -- but i guess you have a reason for using .foreach)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;         for _ in 0..&lt;5_000 {<br>&gt;&gt;&gt;&gt;&gt;             print(&quot;asdf&quot;)<br>&gt;&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On 18 Dec 2015, at 19:31, Etan Kissling via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; You don&#39;t need stride for this.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;     func foo() {<br>&gt;&gt;&gt;&gt;&gt;&gt;         (0..&lt;5_000).forEach { _ in<br>&gt;&gt;&gt;&gt;&gt;&gt;             print(&quot;asdf&quot;)<br>&gt;&gt;&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On 18 Dec 2015, at 19:25, Cihat Gündüz via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dear Swift-Community,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I’d like to propose an addition of a useful method, especially for beginners that also makes Swift much more readable in some situations: The addition of a .times method to Integer type(s).<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; For example recently in one of my projects I wanted to test the scalability of an important piece of code and wrote this method:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         self.measureBlock {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             let expectedQuality = 33.33<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             0.stride(to: 5_000, by: 1).forEach { _ in<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             }   <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; As you can see what I basically wanted was to repeat the test some thousand times. I also like to use the Ruby language and one thing I love about it is that it has some really handy methods integrated to the language in situations like this which make the code very readable and therefore fun to use.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I’m an even bigger fan of Swift so I’d love to see such useful methods appear in Swift, too and this is the first I came across that I really missed. So I’m asking myself, what if I could write the same code above like this:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         self.measureBlock {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             let expectedQuality = 33.33<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             5_000.times {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             }   <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think it could be added to the Swift standard library very easily (for example by using the .stride method like I used) without any side effects and has enough advantages to be part of Swift itself. What do you think?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I wish you all the best,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Cihat<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; P.S.: This is my very first mail in such a mailing list so I did everything correctly. ^.^<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; -Dave<br>&gt; <br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/2c59a17b/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/23a31075ffa046c5a4da64af895ceb07?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Cihat Gündüz</string> &lt;CihatGuenduez at posteo.de&gt;<p>December 18, 2015 at 09:00:00pm</p></header><div class="content"><p>@Jacob, @Radek: Seems like you’ve found a clear restriction to the methods usefulness given a simple implementation. You are right, of course. But isn’t that more a sign that Swift needs a way to make closures more useful by adding the possibility of breaking/continueing/returning from within them rather than a disadvantage of the `times`-syntax itself?<br></p><p>I mean, I find the closure-solution useful already. But if break/continue/return would work from within the curly braces somehow (either by a non-closure-based implementation like for-in loops or via a future addition of some kind of strong/weak return etc.) then I agree that it would be even more useful.<br></p><p>Do you think `times` wouldn’t be useful enough with the closure restriction?<br></p><p><br>&gt; Am 18.12.2015 um 20:53 schrieb Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;:<br>&gt; <br>&gt; I like how clean &quot;100.times { doSomething() }&quot; looks, but I&#39;m concerned its usefulness will be limited because control-flow statements like break/continue/return won&#39;t work from inside a closure.<br>&gt; <br>&gt; Jacob<br>&gt; <br>&gt; On Fri, Dec 18, 2015 at 11:36 AM, Cihat Gündüz &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Am 18.12.2015 um 20:13 schrieb Félix Cloutier &lt;felixcca at yahoo.ca &lt;mailto:felixcca at yahoo.ca&gt;&gt;:<br>&gt;&gt; <br>&gt;&gt; It doesn&#39;t need to be an underscore, but when it is not, the compiler emits an educative warning steering you towards _:<br>&gt; <br>&gt; It’s not about the underscore as a character, it’s about the fact that there is the clutter of an underscore at all what I don’t like and what makes me feel the code isn’t as clean as it could be.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; /tmp/test.swift:3:7: warning: immutable value &#39;i&#39; was never used; consider replacing with &#39;_&#39; or removing it<br>&gt;&gt; <br>&gt;&gt; You can also use inclusive ranges instead if you&#39;re more comfortable with that: 1...5000 will do just that.<br>&gt; <br>&gt; I’m comfortable with ranges but I also used to teach Java back a few years ago and I saw computer science students struggle with the exact number a loop was being executed. So that’s the only reason I brought up that example to have an additional argument.<br>&gt; <br>&gt; But again, for me it is more about the clutter that the 1… or 0..&lt; adds to something that could so easily made simpler and more descriptive.<br>&gt; <br>&gt; I think this is also a question of: How many convenience methods do we want to see in the Swift standard library? In Ruby, at least, there seemed to be enough people to find this one useful. And it’s the first method I missed until now, so I took that as a sign before suggesting the addition. I also don’t like when there are thousands of convenience methods for things that could easily be written in other ways – but I don’t feel that way with the suggested .times method.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; I don&#39;t mean to come across as dismissive, and I&#39;m all for an inclusive Swift that you can pick up without knowing advanced concepts. However, there is definitely value in helping people learn, and learning always moves you a little bit out of your comfort zone. When do we remove the training wheels? How long can we hide the fact that indices usually start at 0? How long before you need to iterate an array using the same range-based for loop?<br>&gt;&gt; <br>&gt;&gt; I spend a lot of time on Stack Overflow and I&#39;ve seen lots of beginners ask for lots of things, but the people who ask about the for loop are usually people with a background in another C-like language who try to use the arguably less readable C-like for loop. I&#39;ve never seen anyone before say that it looks unclean or unreadable.<br>&gt; <br>&gt; I understand what you mean but I don’t think that this is about indices or beginners. The fact that readability and expressiveness make a language easier to learn for beginners IMHO is just a side effect of a well thought-out and developed language. Maybe I wasn’t clear enough but I want to see the .times method in Swift for my own usage, not for beginners. :)<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; Le 18 déc. 2015 à 13:38:59, Cihat Gündüz via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I agree with both of you about the alternative implementations.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That’s exactly what I’d love to see integrated to the standard library like Ruby is here:<br>&gt;&gt;&gt; http://ruby-doc.org/core-2.2.4/Integer.html#method-i-times &lt;http://ruby-doc.org/core-2.2.4/Integer.html#method-i-times&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My main problem is that it neither looks clean nor readable especially for beginners that there is an underscore in the closure. Also beginners often get confused with the number of times some code is run when starting to count from 0 which is also why I think it shouldn’t appear. The .times method would solve both of these problems.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Am 18.12.2015 um 19:33 schrieb Etan Kissling &lt;kissling at oberon.ch &lt;mailto:kissling at oberon.ch&gt;&gt;:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; (or with a for in loop  -- but i guess you have a reason for using .foreach)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;         for _ in 0..&lt;5_000 {<br>&gt;&gt;&gt;&gt;             print(&quot;asdf&quot;)<br>&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 18 Dec 2015, at 19:31, Etan Kissling via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; You don&#39;t need stride for this.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;     func foo() {<br>&gt;&gt;&gt;&gt;&gt;         (0..&lt;5_000).forEach { _ in<br>&gt;&gt;&gt;&gt;&gt;             print(&quot;asdf&quot;)<br>&gt;&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On 18 Dec 2015, at 19:25, Cihat Gündüz via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Dear Swift-Community,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I’d like to propose an addition of a useful method, especially for beginners that also makes Swift much more readable in some situations: The addition of a .times method to Integer type(s).<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; For example recently in one of my projects I wanted to test the scalability of an important piece of code and wrote this method:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;     func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;&gt;&gt;&gt;&gt;&gt;         self.measureBlock {<br>&gt;&gt;&gt;&gt;&gt;&gt;             let expectedQuality = 33.33<br>&gt;&gt;&gt;&gt;&gt;&gt;             0.stride(to: 5_000, by: 1).forEach { _ in<br>&gt;&gt;&gt;&gt;&gt;&gt;                 XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>&gt;&gt;&gt;&gt;&gt;&gt;             }   <br>&gt;&gt;&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; As you can see what I basically wanted was to repeat the test some thousand times. I also like to use the Ruby language and one thing I love about it is that it has some really handy methods integrated to the language in situations like this which make the code very readable and therefore fun to use.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I’m an even bigger fan of Swift so I’d love to see such useful methods appear in Swift, too and this is the first I came across that I really missed. So I’m asking myself, what if I could write the same code above like this:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;     func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;&gt;&gt;&gt;&gt;&gt;         self.measureBlock {<br>&gt;&gt;&gt;&gt;&gt;&gt;             let expectedQuality = 33.33<br>&gt;&gt;&gt;&gt;&gt;&gt;             5_000.times {<br>&gt;&gt;&gt;&gt;&gt;&gt;                 XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>&gt;&gt;&gt;&gt;&gt;&gt;             }   <br>&gt;&gt;&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I think it could be added to the Swift standard library very easily (for example by using the .stride method like I used) without any side effects and has enough advantages to be part of Swift itself. What do you think?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I wish you all the best,<br>&gt;&gt;&gt;&gt;&gt;&gt; Cihat<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; P.S.: This is my very first mail in such a mailing list so I did everything correctly. ^.^<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/f883fe11/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>December 18, 2015 at 09:00:00pm</p></header><div class="content"><p>&gt; But isn’t that more a sign that Swift needs a way to make closures more useful by adding the possibility of breaking/continueing/returning from within them rather than a disadvantage of the `times`-syntax itself?<br></p><p>Perhaps — there’s a thread, somewhere, with possible solutions to this.<br></p><p>FWIW, I’m just as concerned about allowing returning/etc in closures, as with the lack of this ability. Ruby has different forms of “closures”, far too many of them actually, and some of them truly act like functions (just like in Swift), and in some, return/etc changes the calling function. And… albeit useful… this can be _really_ confusing.<br></p><p>&gt; Do you think `times` wouldn’t be useful enough with the closure restriction?<br></p><p>I’d still like it, but it’s just this tiny little thing. Swift standard library is currently very bare-bones, unlike, say, Ruby’s, which has *a ton* of stuff on Arrays, Strings, etc. Unless the Core Team is OK with expanding those standard types with more useful helper methods more broadly, there’s no reason why `times` in particular should go in.<br></p><p>/ccing Chris on this question.<br></p><p>— Radek<br></p><p>&gt; On 18 Dec 2015, at 21:09, Cihat Gündüz via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; @Jacob, @Radek: Seems like you’ve found a clear restriction to the methods usefulness given a simple implementation. You are right, of course. But isn’t that more a sign that Swift needs a way to make closures more useful by adding the possibility of breaking/continueing/returning from within them rather than a disadvantage of the `times`-syntax itself?<br>&gt; <br>&gt; I mean, I find the closure-solution useful already. But if break/continue/return would work from within the curly braces somehow (either by a non-closure-based implementation like for-in loops or via a future addition of some kind of strong/weak return etc.) then I agree that it would be even more useful.<br>&gt; <br>&gt; Do you think `times` wouldn’t be useful enough with the closure restriction?<br>&gt; <br>&gt; <br>&gt;&gt; Am 18.12.2015 um 20:53 schrieb Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt;:<br>&gt;&gt; <br>&gt;&gt; I like how clean &quot;100.times { doSomething() }&quot; looks, but I&#39;m concerned its usefulness will be limited because control-flow statements like break/continue/return won&#39;t work from inside a closure.<br>&gt;&gt; <br>&gt;&gt; Jacob<br>&gt;&gt; <br>&gt;&gt; On Fri, Dec 18, 2015 at 11:36 AM, Cihat Gündüz &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Am 18.12.2015 um 20:13 schrieb Félix Cloutier &lt;felixcca at yahoo.ca &lt;mailto:felixcca at yahoo.ca&gt;&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It doesn&#39;t need to be an underscore, but when it is not, the compiler emits an educative warning steering you towards _:<br>&gt;&gt; <br>&gt;&gt; It’s not about the underscore as a character, it’s about the fact that there is the clutter of an underscore at all what I don’t like and what makes me feel the code isn’t as clean as it could be.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; /tmp/test.swift:3:7: warning: immutable value &#39;i&#39; was never used; consider replacing with &#39;_&#39; or removing it<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You can also use inclusive ranges instead if you&#39;re more comfortable with that: 1...5000 will do just that.<br>&gt;&gt; <br>&gt;&gt; I’m comfortable with ranges but I also used to teach Java back a few years ago and I saw computer science students struggle with the exact number a loop was being executed. So that’s the only reason I brought up that example to have an additional argument.<br>&gt;&gt; <br>&gt;&gt; But again, for me it is more about the clutter that the 1… or 0..&lt; adds to something that could so easily made simpler and more descriptive.<br>&gt;&gt; <br>&gt;&gt; I think this is also a question of: How many convenience methods do we want to see in the Swift standard library? In Ruby, at least, there seemed to be enough people to find this one useful. And it’s the first method I missed until now, so I took that as a sign before suggesting the addition. I also don’t like when there are thousands of convenience methods for things that could easily be written in other ways – but I don’t feel that way with the suggested .times method.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t mean to come across as dismissive, and I&#39;m all for an inclusive Swift that you can pick up without knowing advanced concepts. However, there is definitely value in helping people learn, and learning always moves you a little bit out of your comfort zone. When do we remove the training wheels? How long can we hide the fact that indices usually start at 0? How long before you need to iterate an array using the same range-based for loop?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I spend a lot of time on Stack Overflow and I&#39;ve seen lots of beginners ask for lots of things, but the people who ask about the for loop are usually people with a background in another C-like language who try to use the arguably less readable C-like for loop. I&#39;ve never seen anyone before say that it looks unclean or unreadable.<br>&gt;&gt; <br>&gt;&gt; I understand what you mean but I don’t think that this is about indices or beginners. The fact that readability and expressiveness make a language easier to learn for beginners IMHO is just a side effect of a well thought-out and developed language. Maybe I wasn’t clear enough but I want to see the .times method in Swift for my own usage, not for beginners. :)<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Le 18 déc. 2015 à 13:38:59, Cihat Gündüz via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I agree with both of you about the alternative implementations.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; That’s exactly what I’d love to see integrated to the standard library like Ruby is here:<br>&gt;&gt;&gt;&gt; http://ruby-doc.org/core-2.2.4/Integer.html#method-i-times &lt;http://ruby-doc.org/core-2.2.4/Integer.html#method-i-times&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; My main problem is that it neither looks clean nor readable especially for beginners that there is an underscore in the closure. Also beginners often get confused with the number of times some code is run when starting to count from 0 which is also why I think it shouldn’t appear. The .times method would solve both of these problems.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Am 18.12.2015 um 19:33 schrieb Etan Kissling &lt;kissling at oberon.ch &lt;mailto:kissling at oberon.ch&gt;&gt;:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; (or with a for in loop  -- but i guess you have a reason for using .foreach)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;         for _ in 0..&lt;5_000 {<br>&gt;&gt;&gt;&gt;&gt;             print(&quot;asdf&quot;)<br>&gt;&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On 18 Dec 2015, at 19:31, Etan Kissling via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; You don&#39;t need stride for this.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;     func foo() {<br>&gt;&gt;&gt;&gt;&gt;&gt;         (0..&lt;5_000).forEach { _ in<br>&gt;&gt;&gt;&gt;&gt;&gt;             print(&quot;asdf&quot;)<br>&gt;&gt;&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On 18 Dec 2015, at 19:25, Cihat Gündüz via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dear Swift-Community,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I’d like to propose an addition of a useful method, especially for beginners that also makes Swift much more readable in some situations: The addition of a .times method to Integer type(s).<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; For example recently in one of my projects I wanted to test the scalability of an important piece of code and wrote this method:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         self.measureBlock {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             let expectedQuality = 33.33<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             0.stride(to: 5_000, by: 1).forEach { _ in<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             }   <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; As you can see what I basically wanted was to repeat the test some thousand times. I also like to use the Ruby language and one thing I love about it is that it has some really handy methods integrated to the language in situations like this which make the code very readable and therefore fun to use.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I’m an even bigger fan of Swift so I’d love to see such useful methods appear in Swift, too and this is the first I came across that I really missed. So I’m asking myself, what if I could write the same code above like this:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         self.measureBlock {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             let expectedQuality = 33.33<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             5_000.times {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             }   <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think it could be added to the Swift standard library very easily (for example by using the .stride method like I used) without any side effects and has enough advantages to be part of Swift itself. What do you think?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I wish you all the best,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Cihat<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; P.S.: This is my very first mail in such a mailing list so I did everything correctly. ^.^<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/fac19f14/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 18, 2015 at 12:00:00pm</p></header><div class="content"><p>&gt; On Dec 18, 2015, at 12:19 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; But isn’t that more a sign that Swift needs a way to make closures more useful by adding the possibility of breaking/continueing/returning from within them rather than a disadvantage of the `times`-syntax itself?<br>&gt; <br>&gt; Perhaps — there’s a thread, somewhere, with possible solutions to this.<br>&gt; <br>&gt; FWIW, I’m just as concerned about allowing returning/etc in closures, as with the lack of this ability. Ruby has different forms of “closures”, far too many of them actually, and some of them truly act like functions (just like in Swift), and in some, return/etc changes the calling function. And… albeit useful… this can be _really_ confusing.<br>&gt; <br>&gt;&gt; Do you think `times` wouldn’t be useful enough with the closure restriction?<br>&gt; <br>&gt; I’d still like it, but it’s just this tiny little thing. Swift standard library is currently very bare-bones, unlike, say, Ruby’s, which has *a ton* of stuff on Arrays, Strings, etc. Unless the Core Team is OK with expanding those standard types with more useful helper methods more broadly, there’s no reason why `times` in particular should go in.<br></p><p>My personal opinion on this is that 5.times { stuff} offers no benefits over “repeat 5 { stuff }”, so I’d rather see the later (if anything).<br></p><p>This is all shades of gray with no clear answer.  We generally want to have standard APIs pay for themselves and avoid confusion.  I agree with DaveA’s points upthread.  If you contrast it with forEach, forEach (barely!) pays for itself by allowing things like:<br></p><p>	collection.forEach(curriedMethod)<br></p><p>That benefit doesn’t translate to “.times&quot;.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>December 18, 2015 at 09:00:00pm</p></header><div class="content"><p>&gt; <br>&gt; My personal opinion on this is that 5.times { stuff} offers no benefits over “repeat 5 { stuff }”, so I’d rather see the later (if anything).<br>&gt; <br>&gt; This is all shades of gray with no clear answer.  We generally want to have standard APIs pay for themselves and avoid confusion.  I agree with DaveA’s points upthread.  If you contrast it with forEach, forEach (barely!) pays for itself by allowing things like:<br>&gt; <br>&gt; 	collection.forEach(curriedMethod)<br>&gt; <br>&gt; That benefit doesn’t translate to “.times&quot;.<br>&gt; <br>&gt; -Chris<br></p><p>Thanks for weighing in!<br></p><p>The benefit of `5.times` vs `repeat 5` is that the former is (and can easily be) defined in Swift, not as a language-level feature. OTOH `repeat 5` is a bit more useful because it allows returning/breaking/etc.<br></p><p>But I also understand the argument that this feature isn’t worth it at all. (There’s already a lot of libraries extending stdlib with things of this sort!)<br></p><p>— Radek<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 18, 2015 at 12:00:00pm</p></header><div class="content"><p>&gt; On Dec 18, 2015, at 12:32 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; My personal opinion on this is that 5.times { stuff} offers no benefits over “repeat 5 { stuff }”, so I’d rather see the later (if anything).<br>&gt;&gt; <br>&gt;&gt; This is all shades of gray with no clear answer.  We generally want to have standard APIs pay for themselves and avoid confusion.  I agree with DaveA’s points upthread.  If you contrast it with forEach, forEach (barely!) pays for itself by allowing things like:<br>&gt;&gt; <br>&gt;&gt; 	collection.forEach(curriedMethod)<br>&gt;&gt; <br>&gt;&gt; That benefit doesn’t translate to “.times&quot;.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt; <br>&gt; Thanks for weighing in!<br>&gt; <br>&gt; The benefit of `5.times` vs `repeat 5` is that the former is (and can easily be) defined in Swift, not as a language-level feature. OTOH `repeat 5` is a bit more useful because it allows returning/breaking/etc.<br>&gt; <br>&gt; But I also understand the argument that this feature isn’t worth it at all. (There’s already a lot of libraries extending stdlib with things of this sort!)<br></p><p>It’s important to differentiate “not interesting” vs “not appropriate to include in the swift standard library”.  I love that you can express things like that directly in the language, and if someone felt compelled to do that in their own code (or in a SPM package someday) that would be fine with me.  It just shouldn’t (again, IMO) come with swift out of the box.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/23a31075ffa046c5a4da64af895ceb07?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Cihat Gündüz</string> &lt;CihatGuenduez at posteo.de&gt;<p>December 18, 2015 at 09:00:00pm</p></header><div class="content"><p>I see your points and agree that this is a small feature. My thinking was that it can be added to the standard library pretty easily just because of this without real disadvantages – but it may of course not pay for itself and maybe even cause confusion.<br></p><p>As I stated earlier implementing the method also is about what the standard library should be and what it should not. I learned more about it now and understand that the suggested method may not be appropriate for it. I will probably stick with libraries for a `times` method in the future then.<br></p><p>Thank you very much Radek, Chris and the others for your feedback and consideration!<br></p><p>– Cihat<br></p><p>&gt; Am 18.12.2015 um 21:37 schrieb Chris Lattner &lt;clattner at apple.com&gt;:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 18, 2015, at 12:32 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My personal opinion on this is that 5.times { stuff} offers no benefits over “repeat 5 { stuff }”, so I’d rather see the later (if anything).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is all shades of gray with no clear answer.  We generally want to have standard APIs pay for themselves and avoid confusion.  I agree with DaveA’s points upthread.  If you contrast it with forEach, forEach (barely!) pays for itself by allowing things like:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	collection.forEach(curriedMethod)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That benefit doesn’t translate to “.times&quot;.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt; Thanks for weighing in!<br>&gt;&gt; <br>&gt;&gt; The benefit of `5.times` vs `repeat 5` is that the former is (and can easily be) defined in Swift, not as a language-level feature. OTOH `repeat 5` is a bit more useful because it allows returning/breaking/etc.<br>&gt;&gt; <br>&gt;&gt; But I also understand the argument that this feature isn’t worth it at all. (There’s already a lot of libraries extending stdlib with things of this sort!)<br>&gt; <br>&gt; It’s important to differentiate “not interesting” vs “not appropriate to include in the swift standard library”.  I love that you can express things like that directly in the language, and if someone felt compelled to do that in their own code (or in a SPM package someday) that would be fine with me.  It just shouldn’t (again, IMO) come with swift out of the box.<br>&gt; <br>&gt; -Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/33f5bbbe/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4de621aec7ff90a03f5b9b21e790bc66?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Dennis Lysenko</string> &lt;dennis.s.lysenko at gmail.com&gt;<p>December 18, 2015 at 08:00:00pm</p></header><div class="content"><p>It&#39;s a bit tangential but has there been any discussion about inlining<br>closures that anyone is aware of? So you could return from the outer<br>function within a closure, or break the outer loop.<br></p><p>On Fri, Dec 18, 2015, 3:09 PM Cihat Gündüz &lt;swift-evolution at swift.org&gt;<br>wrote:<br></p><p>&gt; @Jacob, @Radek: Seems like you’ve found a clear restriction to the methods<br>&gt; usefulness given a simple implementation. You are right, of course. But<br>&gt; isn’t that more a sign that Swift needs a way to make closures more useful<br>&gt; by adding the possibility of breaking/continueing/returning from within<br>&gt; them rather than a disadvantage of the `times`-syntax itself?<br>&gt;<br>&gt; I mean, I find the closure-solution useful already. But if<br>&gt; break/continue/return would work from within the curly braces somehow<br>&gt; (either by a non-closure-based implementation like for-in loops or via a<br>&gt; future addition of some kind of strong/weak return etc.) then I agree that<br>&gt; it would be even more useful.<br>&gt;<br>&gt; Do you think `times` wouldn’t be useful enough with the closure<br>&gt; restriction?<br>&gt;<br>&gt;<br>&gt;<br>&gt; Am 18.12.2015 um 20:53 schrieb Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;:<br>&gt;<br>&gt; I like how clean &quot;100.times { doSomething() }&quot; looks, but I&#39;m concerned<br>&gt; its usefulness will be limited because control-flow statements like<br>&gt; break/continue/return won&#39;t work from inside a closure.<br>&gt;<br>&gt; Jacob<br>&gt;<br>&gt; On Fri, Dec 18, 2015 at 11:36 AM, Cihat Gündüz &lt;swift-evolution at swift.org&gt;<br>&gt;  wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; Am 18.12.2015 um 20:13 schrieb Félix Cloutier &lt;felixcca at yahoo.ca&gt;:<br>&gt;&gt;<br>&gt;&gt; It doesn&#39;t need to be an underscore, but when it is not, the compiler<br>&gt;&gt; emits an educative warning steering you towards _:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; It’s not about the underscore as a character, it’s about the fact that<br>&gt;&gt; there is the clutter of an underscore at all what I don’t like and what<br>&gt;&gt; makes me feel the code isn’t as clean as it could be.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; */tmp/test.swift:3:7: **warning: **immutable value &#39;i&#39; was never used;<br>&gt;&gt; consider replacing with &#39;_&#39; or removing it*<br>&gt;&gt;<br>&gt;&gt; You can also use inclusive ranges instead if you&#39;re more comfortable with<br>&gt;&gt; that: 1...5000 will do just that.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I’m comfortable with ranges but I also used to teach Java back a few<br>&gt;&gt; years ago and I saw computer science students struggle with the exact<br>&gt;&gt; number a loop was being executed. So that’s the only reason I brought up<br>&gt;&gt; that example to have an additional argument.<br>&gt;&gt;<br>&gt;&gt; But again, for me it is more about the clutter that the 1… or 0..&lt; adds<br>&gt;&gt; to something that could so easily made simpler and more descriptive.<br>&gt;&gt;<br>&gt;&gt; I think this is also a question of: *How many convenience methods do we<br>&gt;&gt; want to see in the Swift standard library?* In Ruby, at least, there<br>&gt;&gt; seemed to be enough people to find this one useful. And it’s the first<br>&gt;&gt; method I missed until now, so I took that as a sign before suggesting the<br>&gt;&gt; addition. I also don’t like when there are thousands of convenience methods<br>&gt;&gt; for things that could easily be written in other ways – but I don’t feel<br>&gt;&gt; that way with the suggested .times method.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I don&#39;t mean to come across as dismissive, and I&#39;m all for an inclusive<br>&gt;&gt; Swift that you can pick up without knowing advanced concepts. However,<br>&gt;&gt; there is definitely value in helping people learn, and learning always<br>&gt;&gt; moves you a little bit out of your comfort zone. When do we remove the<br>&gt;&gt; training wheels? How long can we hide the fact that indices usually start<br>&gt;&gt; at 0? How long before you need to iterate an array using the same<br>&gt;&gt; range-based for loop?<br>&gt;&gt;<br>&gt;&gt; I spend a lot of time on Stack Overflow and I&#39;ve seen lots of beginners<br>&gt;&gt; ask for lots of things, but the people who ask about the for loop are<br>&gt;&gt; usually people with a background in another C-like language who try to use<br>&gt;&gt; the arguably less readable C-like for loop. I&#39;ve never seen anyone before<br>&gt;&gt; say that it looks unclean or unreadable.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I understand what you mean but I don’t think that this is about indices<br>&gt;&gt; or beginners. The fact that readability and expressiveness make a language<br>&gt;&gt; easier to learn for beginners IMHO is just a side effect of a well<br>&gt;&gt; thought-out and developed language. Maybe I wasn’t clear enough but I want<br>&gt;&gt; to see the .times method in Swift for my own usage, not for beginners. :)<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Le 18 déc. 2015 à 13:38:59, Cihat Gündüz via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;<br>&gt;&gt; I agree with both of you about the alternative implementations.<br>&gt;&gt;<br>&gt;&gt; That’s exactly what I’d love to see integrated to the standard library<br>&gt;&gt; like Ruby is here:<br>&gt;&gt; http://ruby-doc.org/core-2.2.4/Integer.html#method-i-times<br>&gt;&gt;<br>&gt;&gt; My main problem is that it neither looks *clean* nor *readable* especially<br>&gt;&gt; for beginners that there is an *underscore* in the closure. Also<br>&gt;&gt; beginners often get confused with the number of times some code is run when<br>&gt;&gt;  *starting to count from 0* which is also why I think it shouldn’t<br>&gt;&gt; appear. The .times method would solve both of these problems.<br>&gt;&gt;<br>&gt;&gt; Am 18.12.2015 um 19:33 schrieb Etan Kissling &lt;kissling at oberon.ch&gt;:<br>&gt;&gt;<br>&gt;&gt; (or with a for in loop  -- but i guess you have a reason for using<br>&gt;&gt; .foreach)<br>&gt;&gt;<br>&gt;&gt;         for _ in 0..&lt;5_000 {<br>&gt;&gt;             print(&quot;asdf&quot;)<br>&gt;&gt;         }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On 18 Dec 2015, at 19:31, Etan Kissling via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; You don&#39;t need stride for this.<br>&gt;&gt;<br>&gt;&gt;     func foo() {<br>&gt;&gt;         (0..&lt;5_000).forEach { _ in<br>&gt;&gt;             print(&quot;asdf&quot;)<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On 18 Dec 2015, at 19:25, Cihat Gündüz via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Dear Swift-Community,<br>&gt;&gt;<br>&gt;&gt; I’d like to propose an *addition of a useful method*, especially for<br>&gt;&gt; beginners that also makes Swift much more readable in some situations: The<br>&gt;&gt; addition of a .times method to Integer type(s).<br>&gt;&gt;<br>&gt;&gt; For example recently in one of my projects I wanted to test the<br>&gt;&gt; scalability of an important piece of code and wrote this method:<br>&gt;&gt;<br>&gt;&gt;     func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;&gt;         self.measureBlock {<br>&gt;&gt;             let expectedQuality = 33.33<br>&gt;&gt;             0.stride(to: 5_000, by: 1).forEach { _ in<br>&gt;&gt;                 XCTAssertEqualWithAccuracy(self.crossword.<br>&gt;&gt; qualityInPercent, expectedQuality, accuracy: 0.1)<br>&gt;&gt;             }<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt;<br>&gt;&gt; As you can see what I basically wanted was to repeat the test some<br>&gt;&gt; thousand times. I also like to use the Ruby language and one thing I love<br>&gt;&gt; about it is that it has some really handy methods integrated to the<br>&gt;&gt; language in situations like this which make the code very readable and<br>&gt;&gt; therefore fun to use.<br>&gt;&gt;<br>&gt;&gt; I’m an even bigger fan of Swift so I’d love to see such useful methods<br>&gt;&gt; appear in Swift, too and this is the first I came across that I really<br>&gt;&gt; missed. So I’m asking myself, what if I could write the same code above<br>&gt;&gt; like this:<br>&gt;&gt;<br>&gt;&gt;     func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;&gt;         self.measureBlock {<br>&gt;&gt;             let expectedQuality = 33.33<br>&gt;&gt;             5_000.times {<br>&gt;&gt;                 XCTAssertEqualWithAccuracy(self.crossword.<br>&gt;&gt; qualityInPercent, expectedQuality, accuracy: 0.1)<br>&gt;&gt;             }<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt;<br>&gt;&gt; I think it could be added to the Swift standard library very easily (for<br>&gt;&gt; example by using the .stride method like I used) without any side effects<br>&gt;&gt; and has enough advantages to be part of Swift itself. What do you think?<br>&gt;&gt;<br>&gt;&gt; I wish you all the best,<br>&gt;&gt; Cihat<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; P.S.: This is my very first mail in such a mailing list so I did<br>&gt;&gt; everything correctly. ^.^<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/9bf3a815/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>December 18, 2015 at 09:00:00pm</p></header><div class="content"><p>This thread: https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001150.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001150.html&gt;<br></p><p>— Radek<br></p><p>&gt; On 18 Dec 2015, at 21:40, Dennis Lysenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It&#39;s a bit tangential but has there been any discussion about inlining closures that anyone is aware of? So you could return from the outer function within a closure, or break the outer loop. <br>&gt; <br>&gt; <br>&gt; On Fri, Dec 18, 2015, 3:09 PM Cihat Gündüz &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; @Jacob, @Radek: Seems like you’ve found a clear restriction to the methods usefulness given a simple implementation. You are right, of course. But isn’t that more a sign that Swift needs a way to make closures more useful by adding the possibility of breaking/continueing/returning from within them rather than a disadvantage of the `times`-syntax itself?<br>&gt; <br>&gt; I mean, I find the closure-solution useful already. But if break/continue/return would work from within the curly braces somehow (either by a non-closure-based implementation like for-in loops or via a future addition of some kind of strong/weak return etc.) then I agree that it would be even more useful.<br>&gt; <br>&gt; Do you think `times` wouldn’t be useful enough with the closure restriction?<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; Am 18.12.2015 um 20:53 schrieb Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt;:<br>&gt;&gt; <br>&gt;&gt; I like how clean &quot;100.times { doSomething() }&quot; looks, but I&#39;m concerned its usefulness will be limited because control-flow statements like break/continue/return won&#39;t work from inside a closure.<br>&gt;&gt; <br>&gt;&gt; Jacob<br>&gt;&gt; <br>&gt;&gt; On Fri, Dec 18, 2015 at 11:36 AM, Cihat Gündüz &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Am 18.12.2015 um 20:13 schrieb Félix Cloutier &lt;felixcca at yahoo.ca &lt;mailto:felixcca at yahoo.ca&gt;&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It doesn&#39;t need to be an underscore, but when it is not, the compiler emits an educative warning steering you towards _:<br>&gt;&gt; <br>&gt;&gt; It’s not about the underscore as a character, it’s about the fact that there is the clutter of an underscore at all what I don’t like and what makes me feel the code isn’t as clean as it could be.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; /tmp/test.swift:3:7: warning: immutable value &#39;i&#39; was never used; consider replacing with &#39;_&#39; or removing it<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You can also use inclusive ranges instead if you&#39;re more comfortable with that: 1...5000 will do just that.<br>&gt;&gt; <br>&gt;&gt; I’m comfortable with ranges but I also used to teach Java back a few years ago and I saw computer science students struggle with the exact number a loop was being executed. So that’s the only reason I brought up that example to have an additional argument.<br>&gt;&gt; <br>&gt;&gt; But again, for me it is more about the clutter that the 1… or 0..&lt; adds to something that could so easily made simpler and more descriptive.<br>&gt;&gt; <br>&gt;&gt; I think this is also a question of: How many convenience methods do we want to see in the Swift standard library? In Ruby, at least, there seemed to be enough people to find this one useful. And it’s the first method I missed until now, so I took that as a sign before suggesting the addition. I also don’t like when there are thousands of convenience methods for things that could easily be written in other ways – but I don’t feel that way with the suggested .times method.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t mean to come across as dismissive, and I&#39;m all for an inclusive Swift that you can pick up without knowing advanced concepts. However, there is definitely value in helping people learn, and learning always moves you a little bit out of your comfort zone. When do we remove the training wheels? How long can we hide the fact that indices usually start at 0? How long before you need to iterate an array using the same range-based for loop?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I spend a lot of time on Stack Overflow and I&#39;ve seen lots of beginners ask for lots of things, but the people who ask about the for loop are usually people with a background in another C-like language who try to use the arguably less readable C-like for loop. I&#39;ve never seen anyone before say that it looks unclean or unreadable.<br>&gt;&gt; <br>&gt;&gt; I understand what you mean but I don’t think that this is about indices or beginners. The fact that readability and expressiveness make a language easier to learn for beginners IMHO is just a side effect of a well thought-out and developed language. Maybe I wasn’t clear enough but I want to see the .times method in Swift for my own usage, not for beginners. :)<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Le 18 déc. 2015 à 13:38:59, Cihat Gündüz via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I agree with both of you about the alternative implementations.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; That’s exactly what I’d love to see integrated to the standard library like Ruby is here:<br>&gt;&gt;&gt;&gt; http://ruby-doc.org/core-2.2.4/Integer.html#method-i-times &lt;http://ruby-doc.org/core-2.2.4/Integer.html#method-i-times&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; My main problem is that it neither looks clean nor readable especially for beginners that there is an underscore in the closure. Also beginners often get confused with the number of times some code is run when starting to count from 0 which is also why I think it shouldn’t appear. The .times method would solve both of these problems.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Am 18.12.2015 um 19:33 schrieb Etan Kissling &lt;kissling at oberon.ch &lt;mailto:kissling at oberon.ch&gt;&gt;:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; (or with a for in loop  -- but i guess you have a reason for using .foreach)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;         for _ in 0..&lt;5_000 {<br>&gt;&gt;&gt;&gt;&gt;             print(&quot;asdf&quot;)<br>&gt;&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On 18 Dec 2015, at 19:31, Etan Kissling via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; You don&#39;t need stride for this.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;     func foo() {<br>&gt;&gt;&gt;&gt;&gt;&gt;         (0..&lt;5_000).forEach { _ in<br>&gt;&gt;&gt;&gt;&gt;&gt;             print(&quot;asdf&quot;)<br>&gt;&gt;&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On 18 Dec 2015, at 19:25, Cihat Gündüz via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dear Swift-Community,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I’d like to propose an addition of a useful method, especially for beginners that also makes Swift much more readable in some situations: The addition of a .times method to Integer type(s).<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; For example recently in one of my projects I wanted to test the scalability of an important piece of code and wrote this method:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         self.measureBlock {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             let expectedQuality = 33.33<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             0.stride(to: 5_000, by: 1).forEach { _ in<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             }   <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; As you can see what I basically wanted was to repeat the test some thousand times. I also like to use the Ruby language and one thing I love about it is that it has some really handy methods integrated to the language in situations like this which make the code very readable and therefore fun to use.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I’m an even bigger fan of Swift so I’d love to see such useful methods appear in Swift, too and this is the first I came across that I really missed. So I’m asking myself, what if I could write the same code above like this:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         self.measureBlock {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             let expectedQuality = 33.33<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             5_000.times {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             }   <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think it could be added to the Swift standard library very easily (for example by using the .stride method like I used) without any side effects and has enough advantages to be part of Swift itself. What do you think?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I wish you all the best,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Cihat<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; P.S.: This is my very first mail in such a mailing list so I did everything correctly. ^.^<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/058d2f8f/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>December 18, 2015 at 01:00:00pm</p></header><div class="content"><p>You can already write this:<br></p><p>extension IntegerType {<br>	func times(block: () -&gt; ()) {<br>		for _ in 0..&lt;self {<br>			block()<br>		}<br>	}<br>}<br></p><p>10.times { print(&quot;hello&quot;) }<br></p><p>I don&#39;t know how I feel about adding that to the standard library.<br></p><p>&gt; Le 18 déc. 2015 à 13:25:59, Cihat Gündüz via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Dear Swift-Community,<br>&gt; <br>&gt; I’d like to propose an addition of a useful method, especially for beginners that also makes Swift much more readable in some situations: The addition of a .times method to Integer type(s).<br>&gt; <br>&gt; For example recently in one of my projects I wanted to test the scalability of an important piece of code and wrote this method:<br>&gt; <br>&gt;     func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;         self.measureBlock {<br>&gt;             let expectedQuality = 33.33<br>&gt;             0.stride(to: 5_000, by: 1).forEach { _ in<br>&gt;                 XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>&gt;             }   <br>&gt;         }<br>&gt;     }<br>&gt; <br>&gt; As you can see what I basically wanted was to repeat the test some thousand times. I also like to use the Ruby language and one thing I love about it is that it has some really handy methods integrated to the language in situations like this which make the code very readable and therefore fun to use.<br>&gt; <br>&gt; I’m an even bigger fan of Swift so I’d love to see such useful methods appear in Swift, too and this is the first I came across that I really missed. So I’m asking myself, what if I could write the same code above like this:<br>&gt; <br>&gt;     func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;         self.measureBlock {<br>&gt;             let expectedQuality = 33.33<br>&gt;             5_000.times {<br>&gt;                 XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>&gt;             }   <br>&gt;         }<br>&gt;     }<br>&gt; <br>&gt; I think it could be added to the Swift standard library very easily (for example by using the .stride method like I used) without any side effects and has enough advantages to be part of Swift itself. What do you think?<br>&gt; <br>&gt; I wish you all the best,<br>&gt; Cihat<br>&gt; <br>&gt; <br>&gt; P.S.: This is my very first mail in such a mailing list so I did everything correctly. ^.^<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/53e75afe/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December 18, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; I’d like to propose an addition of a useful method, especially for beginners that also makes Swift much more readable in some situations: The addition of a .times method to Integer type(s).<br></p><p>I’ve said it before, but I don’t think `times` is a good solution for learners. It teaches them a form of looping they will never use in practice and does not allow them to practice with ancillary loop skills like `break` and `continue`.<br></p><p>I think our best bet is to extend the `for` loop to allow a single number, meaning either `1…n` or `0..&lt;n` (you can argue it either way), and also to allow the `variableName in` part to be omitted, meaning `_ in`. This gives us the pedagogical simplicity of a “do this N times” loop, but couches it in a form where, when the student moves on, more commonly used loop forms are a straightforward extension of that simple case.<br></p><p>	for 5 { print(“Hello!”) }<br>	for i in 5 { print(“Hello \(i)!”) }<br>	for i in 10..&lt;20 { print(“Hello \(i)!”) }<br>	for i in 10...20 { print(“Hello \(i)!”) }<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December 18, 2015 at 01:00:00pm</p></header><div class="content"><p>This can be done pretty easily, although I think the approach has the<br>potential to cause confusion elsewhere in code. An obvious question is,<br>should it be equivalent to 1...n, or 0..&lt;n?<br></p><p>extension Int: SequenceType {<br>    public func generate() -&gt; RangeGenerator&lt;Int&gt; {<br>        return (0..&lt;self).generate()<br>    }<br>}<br></p><p>for i in 5 {<br>    print(&quot;hello \(i)&quot;)<br>}<br></p><p>Jacob Bandes-Storch<br></p><p>On Fri, Dec 18, 2015 at 1:03 PM, Brent Royal-Gordon via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt; I’d like to propose an addition of a useful method, especially for<br>&gt; beginners that also makes Swift much more readable in some situations: The<br>&gt; addition of a .times method to Integer type(s).<br>&gt;<br>&gt; I’ve said it before, but I don’t think `times` is a good solution for<br>&gt; learners. It teaches them a form of looping they will never use in practice<br>&gt; and does not allow them to practice with ancillary loop skills like `break`<br>&gt; and `continue`.<br>&gt;<br>&gt; I think our best bet is to extend the `for` loop to allow a single number,<br>&gt; meaning either `1…n` or `0..&lt;n` (you can argue it either way), and also to<br>&gt; allow the `variableName in` part to be omitted, meaning `_ in`. This gives<br>&gt; us the pedagogical simplicity of a “do this N times” loop, but couches it<br>&gt; in a form where, when the student moves on, more commonly used loop forms<br>&gt; are a straightforward extension of that simple case.<br>&gt;<br>&gt;         for 5 { print(“Hello!”) }<br>&gt;         for i in 5 { print(“Hello \(i)!”) }<br>&gt;         for i in 10..&lt;20 { print(“Hello \(i)!”) }<br>&gt;         for i in 10...20 { print(“Hello \(i)!”) }<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/406d53a4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>December 18, 2015 at 10:00:00pm</p></header><div class="content"><p>&gt; An obvious question is, should it be equivalent to 1...n, or 0..&lt;n?<br></p><p>I think that’s exactly why this isn’t a good idea. The semantics of `for i in 5` are not immediately clear at all.<br></p><p>If this was to be a language feature, `repeat 5`, suggested by Chris, seems like the least-ambiguous choice.<br></p><p>— Radek<br></p><p>&gt; On 18 Dec 2015, at 22:09, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; This can be done pretty easily, although I think the approach has the potential to cause confusion elsewhere in code. An obvious question is, should it be equivalent to 1...n, or 0..&lt;n?<br>&gt; <br>&gt; extension Int: SequenceType {<br>&gt;     public func generate() -&gt; RangeGenerator&lt;Int&gt; {<br>&gt;         return (0..&lt;self).generate()<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; for i in 5 {<br>&gt;     print(&quot;hello \(i)&quot;)<br>&gt; }<br>&gt; <br>&gt; Jacob Bandes-Storch<br>&gt; <br>&gt; On Fri, Dec 18, 2015 at 1:03 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt; I’d like to propose an addition of a useful method, especially for beginners that also makes Swift much more readable in some situations: The addition of a .times method to Integer type(s).<br>&gt; <br>&gt; I’ve said it before, but I don’t think `times` is a good solution for learners. It teaches them a form of looping they will never use in practice and does not allow them to practice with ancillary loop skills like `break` and `continue`.<br>&gt; <br>&gt; I think our best bet is to extend the `for` loop to allow a single number, meaning either `1…n` or `0..&lt;n` (you can argue it either way), and also to allow the `variableName in` part to be omitted, meaning `_ in`. This gives us the pedagogical simplicity of a “do this N times” loop, but couches it in a form where, when the student moves on, more commonly used loop forms are a straightforward extension of that simple case.<br>&gt; <br>&gt;         for 5 { print(“Hello!”) }<br>&gt;         for i in 5 { print(“Hello \(i)!”) }<br>&gt;         for i in 10..&lt;20 { print(“Hello \(i)!”) }<br>&gt;         for i in 10...20 { print(“Hello \(i)!”) }<br>&gt; <br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/e0f8ce74/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/23a31075ffa046c5a4da64af895ceb07?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Cihat Gündüz</string> &lt;CihatGuenduez at posteo.de&gt;<p>December 18, 2015 at 10:00:00pm</p></header><div class="content"><p>I agree with Radek. I find `for i in 5 { doSomething() }` or `for 5 { doSomething() }` to be very confusing since it is neither close to human language nor to any common programming language I know of.<br></p><p>I like the idea of giving students a step by step introduction into things, but this is IMO not the right way/place to do that.<br></p><p>– Cihat<br></p><p><br>&gt; Am 18.12.2015 um 22:26 schrieb Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt;&gt; An obvious question is, should it be equivalent to 1...n, or 0..&lt;n?<br>&gt; <br>&gt; I think that’s exactly why this isn’t a good idea. The semantics of `for i in 5` are not immediately clear at all.<br>&gt; <br>&gt; If this was to be a language feature, `repeat 5`, suggested by Chris, seems like the least-ambiguous choice.<br>&gt; <br>&gt; — Radek<br>&gt; <br>&gt;&gt; On 18 Dec 2015, at 22:09, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; This can be done pretty easily, although I think the approach has the potential to cause confusion elsewhere in code. An obvious question is, should it be equivalent to 1...n, or 0..&lt;n?<br>&gt;&gt; <br>&gt;&gt; extension Int: SequenceType {<br>&gt;&gt;     public func generate() -&gt; RangeGenerator&lt;Int&gt; {<br>&gt;&gt;         return (0..&lt;self).generate()<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; for i in 5 {<br>&gt;&gt;     print(&quot;hello \(i)&quot;)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Jacob Bandes-Storch<br>&gt;&gt; <br>&gt;&gt; On Fri, Dec 18, 2015 at 1:03 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt; I’d like to propose an addition of a useful method, especially for beginners that also makes Swift much more readable in some situations: The addition of a .times method to Integer type(s).<br>&gt;&gt; <br>&gt;&gt; I’ve said it before, but I don’t think `times` is a good solution for learners. It teaches them a form of looping they will never use in practice and does not allow them to practice with ancillary loop skills like `break` and `continue`.<br>&gt;&gt; <br>&gt;&gt; I think our best bet is to extend the `for` loop to allow a single number, meaning either `1…n` or `0..&lt;n` (you can argue it either way), and also to allow the `variableName in` part to be omitted, meaning `_ in`. This gives us the pedagogical simplicity of a “do this N times” loop, but couches it in a form where, when the student moves on, more commonly used loop forms are a straightforward extension of that simple case.<br>&gt;&gt; <br>&gt;&gt;         for 5 { print(“Hello!”) }<br>&gt;&gt;         for i in 5 { print(“Hello \(i)!”) }<br>&gt;&gt;         for i in 10..&lt;20 { print(“Hello \(i)!”) }<br>&gt;&gt;         for i in 10...20 { print(“Hello \(i)!”) }<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/0fc32f4e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ecdb231117dda838340bfcbb8873d28e?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Paul Cantrell</string> &lt;cantrell at pobox.com&gt;<p>December 18, 2015 at 03:00:00pm</p></header><div class="content"><p>I’d be in favor of deferring this until other discussions about the ability to return/break/continue from closures play out. With that in place, there’s even the notion that for…in could be replaced by a library function. At that point, 5.times, or repeat(5) as a library call, would look a lot more attractive.<br></p><p>P<br></p><p>&gt; On Dec 18, 2015, at 3:41 PM, Cihat Gündüz via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I agree with Radek. I find `for i in 5 { doSomething() }` or `for 5 { doSomething() }` to be very confusing since it is neither close to human language nor to any common programming language I know of.<br>&gt; <br>&gt; I like the idea of giving students a step by step introduction into things, but this is IMO not the right way/place to do that.<br>&gt; <br>&gt; – Cihat<br>&gt; <br>&gt; <br>&gt;&gt; Am 18.12.2015 um 22:26 schrieb Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt; <br>&gt;&gt;&gt; An obvious question is, should it be equivalent to 1...n, or 0..&lt;n?<br>&gt;&gt; <br>&gt;&gt; I think that’s exactly why this isn’t a good idea. The semantics of `for i in 5` are not immediately clear at all.<br>&gt;&gt; <br>&gt;&gt; If this was to be a language feature, `repeat 5`, suggested by Chris, seems like the least-ambiguous choice.<br>&gt;&gt; <br>&gt;&gt; — Radek<br>&gt;&gt; <br>&gt;&gt;&gt; On 18 Dec 2015, at 22:09, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This can be done pretty easily, although I think the approach has the potential to cause confusion elsewhere in code. An obvious question is, should it be equivalent to 1...n, or 0..&lt;n?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension Int: SequenceType {<br>&gt;&gt;&gt;     public func generate() -&gt; RangeGenerator&lt;Int&gt; {<br>&gt;&gt;&gt;         return (0..&lt;self).generate()<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for i in 5 {<br>&gt;&gt;&gt;     print(&quot;hello \(i)&quot;)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jacob Bandes-Storch<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Fri, Dec 18, 2015 at 1:03 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt; I’d like to propose an addition of a useful method, especially for beginners that also makes Swift much more readable in some situations: The addition of a .times method to Integer type(s).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’ve said it before, but I don’t think `times` is a good solution for learners. It teaches them a form of looping they will never use in practice and does not allow them to practice with ancillary loop skills like `break` and `continue`.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think our best bet is to extend the `for` loop to allow a single number, meaning either `1…n` or `0..&lt;n` (you can argue it either way), and also to allow the `variableName in` part to be omitted, meaning `_ in`. This gives us the pedagogical simplicity of a “do this N times” loop, but couches it in a form where, when the student moves on, more commonly used loop forms are a straightforward extension of that simple case.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;         for 5 { print(“Hello!”) }<br>&gt;&gt;&gt;         for i in 5 { print(“Hello \(i)!”) }<br>&gt;&gt;&gt;         for i in 10..&lt;20 { print(“Hello \(i)!”) }<br>&gt;&gt;&gt;         for i in 10...20 { print(“Hello \(i)!”) }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/d6eb5f98/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e01e37acbfad671da1b94a61cf819d82?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Kenny Leung</string> &lt;kenny_leung at pobox.com&gt;<p>December 18, 2015 at 02:00:00pm</p></header><div class="content"><p>I don’t agree with this on the grounds that it isn’t very object-oriented. That is, it does not conform with what one usually associates with an integer. A number has certain intrinsic properties: 5 is greater than 4 but less than 6. If you’re a synesthete, it may have the color blue. But I never think of there being a big number 5 that takes something and repeats it 5 times. I think of a person taking something and doing it over 5 times.<br></p><p>-Kenny<br></p><p>&gt; On Dec 18, 2015, at 10:25 AM, Cihat Gündüz via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Dear Swift-Community,<br>&gt; <br>&gt; I’d like to propose an addition of a useful method, especially for beginners that also makes Swift much more readable in some situations: The addition of a .times method to Integer type(s).<br>&gt; <br>&gt; For example recently in one of my projects I wanted to test the scalability of an important piece of code and wrote this method:<br>&gt; <br>&gt;     func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;         self.measureBlock {<br>&gt;             let expectedQuality = 33.33<br>&gt;             0.stride(to: 5_000, by: 1).forEach { _ in<br>&gt;                 XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>&gt;             }   <br>&gt;         }<br>&gt;     }<br>&gt; <br>&gt; As you can see what I basically wanted was to repeat the test some thousand times. I also like to use the Ruby language and one thing I love about it is that it has some really handy methods integrated to the language in situations like this which make the code very readable and therefore fun to use.<br>&gt; <br>&gt; I’m an even bigger fan of Swift so I’d love to see such useful methods appear in Swift, too and this is the first I came across that I really missed. So I’m asking myself, what if I could write the same code above like this:<br>&gt; <br>&gt;     func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;         self.measureBlock {<br>&gt;             let expectedQuality = 33.33<br>&gt;             5_000.times {<br>&gt;                 XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>&gt;             }   <br>&gt;         }<br>&gt;     }<br>&gt; <br>&gt; I think it could be added to the Swift standard library very easily (for example by using the .stride method like I used) without any side effects and has enough advantages to be part of Swift itself. What do you think?<br>&gt; <br>&gt; I wish you all the best,<br>&gt; Cihat<br>&gt; <br>&gt; <br>&gt; P.S.: This is my very first mail in such a mailing list so I did everything correctly. ^.^<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/23a31075ffa046c5a4da64af895ceb07?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Cihat Gündüz</string> &lt;CihatGuenduez at posteo.de&gt;<p>December 18, 2015 at 11:00:00pm</p></header><div class="content"><p>As far as I can remember it was never a goal of Swift to be a purely object-oriented language. Instead I can find expressiveness stated explicitly amongst the three main goals behind the language here: https://swift.org/about/#platform-support &lt;https://swift.org/about/#platform-support&gt;<br></p><p>Therefore I feel it is okay if the language becomes more expressive in a way that is less object-oriented. I see the suggested method as a functional construct.<br></p><p>– Cihat<br></p><p><br>&gt; Am 18.12.2015 um 23:22 schrieb Kenny Leung &lt;kenny_leung at pobox.com&gt;:<br>&gt; <br>&gt; I don’t agree with this on the grounds that it isn’t very object-oriented. That is, it does not conform with what one usually associates with an integer. A number has certain intrinsic properties: 5 is greater than 4 but less than 6. If you’re a synesthete, it may have the color blue. But I never think of there being a big number 5 that takes something and repeats it 5 times. I think of a person taking something and doing it over 5 times.<br>&gt; <br>&gt; -Kenny<br>&gt; <br>&gt;&gt; On Dec 18, 2015, at 10:25 AM, Cihat Gündüz via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Dear Swift-Community,<br>&gt;&gt; <br>&gt;&gt; I’d like to propose an addition of a useful method, especially for beginners that also makes Swift much more readable in some situations: The addition of a .times method to Integer type(s).<br>&gt;&gt; <br>&gt;&gt; For example recently in one of my projects I wanted to test the scalability of an important piece of code and wrote this method:<br>&gt;&gt; <br>&gt;&gt;    func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;&gt;        self.measureBlock {<br>&gt;&gt;            let expectedQuality = 33.33<br>&gt;&gt;            0.stride(to: 5_000, by: 1).forEach { _ in<br>&gt;&gt;                XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>&gt;&gt;            }   <br>&gt;&gt;        }<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt; As you can see what I basically wanted was to repeat the test some thousand times. I also like to use the Ruby language and one thing I love about it is that it has some really handy methods integrated to the language in situations like this which make the code very readable and therefore fun to use.<br>&gt;&gt; <br>&gt;&gt; I’m an even bigger fan of Swift so I’d love to see such useful methods appear in Swift, too and this is the first I came across that I really missed. So I’m asking myself, what if I could write the same code above like this:<br>&gt;&gt; <br>&gt;&gt;    func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;&gt;        self.measureBlock {<br>&gt;&gt;            let expectedQuality = 33.33<br>&gt;&gt;            5_000.times {<br>&gt;&gt;                XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>&gt;&gt;            }   <br>&gt;&gt;        }<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt; I think it could be added to the Swift standard library very easily (for example by using the .stride method like I used) without any side effects and has enough advantages to be part of Swift itself. What do you think?<br>&gt;&gt; <br>&gt;&gt; I wish you all the best,<br>&gt;&gt; Cihat<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; P.S.: This is my very first mail in such a mailing list so I did everything correctly. ^.^<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/f714681e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/23a31075ffa046c5a4da64af895ceb07?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Cihat Gündüz</string> &lt;CihatGuenduez at posteo.de&gt;<p>December 19, 2015 at 12:00:00am</p></header><div class="content"><p>By the way and/or for all of you who like the idea of a .times method:<br></p><p>I’ve just setup a library for features like this `times` method and implemented the suggested method there. Feel free to contribute code / provide feedback via that third party library (as suggested by Chris) here:<br></p><p>https://github.com/Flinesoft/HandySwift &lt;https://github.com/Flinesoft/HandySwift&gt;<br></p><p>– Cihat<br></p><p>&gt; Am 18.12.2015 um 23:42 schrieb Cihat Gündüz via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; As far as I can remember it was never a goal of Swift to be a purely object-oriented language. Instead I can find expressiveness stated explicitly amongst the three main goals behind the language here: https://swift.org/about/#platform-support &lt;https://swift.org/about/#platform-support&gt;<br>&gt; <br>&gt; Therefore I feel it is okay if the language becomes more expressive in a way that is less object-oriented. I see the suggested method as a functional construct.<br>&gt; <br>&gt; – Cihat<br>&gt; <br>&gt; <br>&gt;&gt; Am 18.12.2015 um 23:22 schrieb Kenny Leung &lt;kenny_leung at pobox.com &lt;mailto:kenny_leung at pobox.com&gt;&gt;:<br>&gt;&gt; <br>&gt;&gt; I don’t agree with this on the grounds that it isn’t very object-oriented. That is, it does not conform with what one usually associates with an integer. A number has certain intrinsic properties: 5 is greater than 4 but less than 6. If you’re a synesthete, it may have the color blue. But I never think of there being a big number 5 that takes something and repeats it 5 times. I think of a person taking something and doing it over 5 times.<br>&gt;&gt; <br>&gt;&gt; -Kenny<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 18, 2015, at 10:25 AM, Cihat Gündüz via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Dear Swift-Community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’d like to propose an addition of a useful method, especially for beginners that also makes Swift much more readable in some situations: The addition of a .times method to Integer type(s).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For example recently in one of my projects I wanted to test the scalability of an important piece of code and wrote this method:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;&gt;&gt;        self.measureBlock {<br>&gt;&gt;&gt;            let expectedQuality = 33.33<br>&gt;&gt;&gt;            0.stride(to: 5_000, by: 1).forEach { _ in<br>&gt;&gt;&gt;                XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>&gt;&gt;&gt;            }   <br>&gt;&gt;&gt;        }<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As you can see what I basically wanted was to repeat the test some thousand times. I also like to use the Ruby language and one thing I love about it is that it has some really handy methods integrated to the language in situations like this which make the code very readable and therefore fun to use.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m an even bigger fan of Swift so I’d love to see such useful methods appear in Swift, too and this is the first I came across that I really missed. So I’m asking myself, what if I could write the same code above like this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;&gt;&gt;        self.measureBlock {<br>&gt;&gt;&gt;            let expectedQuality = 33.33<br>&gt;&gt;&gt;            5_000.times {<br>&gt;&gt;&gt;                XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>&gt;&gt;&gt;            }   <br>&gt;&gt;&gt;        }<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think it could be added to the Swift standard library very easily (for example by using the .stride method like I used) without any side effects and has enough advantages to be part of Swift itself. What do you think?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I wish you all the best,<br>&gt;&gt;&gt; Cihat<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; P.S.: This is my very first mail in such a mailing list so I did everything correctly. ^.^<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/433f8bc7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85ade213ef182c4a30916753b3c82b1e?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Ian Ynda-Hummel</string> &lt;ianynda at gmail.com&gt;<p>December 18, 2015 at 11:00:00pm</p></header><div class="content"><p>I think I&#39;m -1 for this. It feels like something that should exist in a<br>utility library rather than in the standard one.<br></p><p>I do have an honest question that comes from ignorance rather than malice:<br>has anyone actually used .times in ruby outside of the context of learning<br>or testing? I&#39;ve written a fair amount of ruby and I don&#39;t think I&#39;ve ever<br>seen it in production code. It is definitely a cleaner construct for what<br>it&#39;s trying to do, but I&#39;m having trouble convincing myself it&#39;s a common<br>enough pattern to justify it being standard.<br>On Fri, Dec 18, 2015 at 6:20 PM Cihat Gündüz &lt;swift-evolution at swift.org&gt;<br>wrote:<br></p><p>&gt; By the way and/or for all of you who like the idea of a .times method:<br>&gt;<br>&gt; I’ve just setup a library for features like this `times` method and<br>&gt; implemented the suggested method there. Feel free to contribute code /<br>&gt; provide feedback via that third party library (as suggested by Chris) here:<br>&gt;<br>&gt; https://github.com/Flinesoft/HandySwift<br>&gt;<br>&gt; – Cihat<br>&gt;<br>&gt; Am 18.12.2015 um 23:42 schrieb Cihat Gündüz via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt;:<br>&gt;<br>&gt; As far as I can remember it was never a goal of Swift to be a purely<br>&gt; object-oriented language. Instead I can find expressiveness stated<br>&gt; explicitly amongst the three main goals behind the language here:<br>&gt; https://swift.org/about/#platform-support<br>&gt;<br>&gt; Therefore I feel it is okay if the language becomes more expressive in a<br>&gt; way that is less object-oriented. I see the suggested method as a<br>&gt; functional construct.<br>&gt;<br>&gt; – Cihat<br>&gt;<br>&gt;<br>&gt; Am 18.12.2015 um 23:22 schrieb Kenny Leung &lt;kenny_leung at pobox.com&gt;:<br>&gt;<br>&gt; I don’t agree with this on the grounds that it isn’t very object-oriented.<br>&gt; That is, it does not conform with what one usually associates with an<br>&gt; integer. A number has certain intrinsic properties: 5 is greater than 4 but<br>&gt; less than 6. If you’re a synesthete, it may have the color blue. But I<br>&gt; never think of there being a big number 5 that takes something and repeats<br>&gt; it 5 times. I think of a person taking something and doing it over 5 times.<br>&gt;<br>&gt; -Kenny<br>&gt;<br>&gt; On Dec 18, 2015, at 10:25 AM, Cihat Gündüz via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Dear Swift-Community,<br>&gt;<br>&gt; I’d like to propose an addition of a useful method, especially for<br>&gt; beginners that also makes Swift much more readable in some situations: The<br>&gt; addition of a .times method to Integer type(s).<br>&gt;<br>&gt; For example recently in one of my projects I wanted to test the<br>&gt; scalability of an important piece of code and wrote this method:<br>&gt;<br>&gt;    func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;        self.measureBlock {<br>&gt;            let expectedQuality = 33.33<br>&gt;            0.stride(to: 5_000, by: 1).forEach { _ in<br>&gt;                XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent,<br>&gt; expectedQuality, accuracy: 0.1)<br>&gt;            }<br>&gt;        }<br>&gt;    }<br>&gt;<br>&gt; As you can see what I basically wanted was to repeat the test some<br>&gt; thousand times. I also like to use the Ruby language and one thing I love<br>&gt; about it is that it has some really handy methods integrated to the<br>&gt; language in situations like this which make the code very readable and<br>&gt; therefore fun to use.<br>&gt;<br>&gt; I’m an even bigger fan of Swift so I’d love to see such useful methods<br>&gt; appear in Swift, too and this is the first I came across that I really<br>&gt; missed. So I’m asking myself, what if I could write the same code above<br>&gt; like this:<br>&gt;<br>&gt;    func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;        self.measureBlock {<br>&gt;            let expectedQuality = 33.33<br>&gt;            5_000.times {<br>&gt;                XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent,<br>&gt; expectedQuality, accuracy: 0.1)<br>&gt;            }<br>&gt;        }<br>&gt;    }<br>&gt;<br>&gt; I think it could be added to the Swift standard library very easily (for<br>&gt; example by using the .stride method like I used) without any side effects<br>&gt; and has enough advantages to be part of Swift itself. What do you think?<br>&gt;<br>&gt; I wish you all the best,<br>&gt; Cihat<br>&gt;<br>&gt;<br>&gt; P.S.: This is my very first mail in such a mailing list so I did<br>&gt; everything correctly. ^.^<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/956194a0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December 19, 2015 at 04:00:00pm</p></header><div class="content"><p>&gt; I do have an honest question that comes from ignorance rather than malice: has anyone actually used .times in ruby outside of the context of learning or testing?<br></p><p>I&#39;ve seen it used to retry a failing operation a certain number of times:<br></p><p>	5.times do<br>		return true if do_network_call<br>		sleep 5<br>	end<br>	raise NetworkCallFailedError<br></p><p>Of course, that requires you to be able to return out of the surrounding function from the `times` loop, which you can do in Ruby but not in Swift.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/97013db1005ef6260fd8f1278f37b831?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Andrew Hoos</string> &lt;andrewjhoos at gmail.com&gt;<p>December 19, 2015 at 05:00:00pm</p></header><div class="content"><p>Summary of feedback<br></p><p>Cons<br>Block based API prevents return/break/continue<br>Can be implemented by an extension without language changes<br>Vaguely confusable with multiplication<br></p><p>Pros<br>Is easier for new learners<br>Removes ambiguity of ..&lt; vs ... (again mostly new learners)<br>shorter than existing syntax<br></p><p>Alternatives<br>for _ in 0..&lt; 5_000 (current solution)<br>repeat 5_000 (alternative syntax)<br>for 5_000<br></p><p>My $.02<br></p><p>If we are going to introduce a new &quot;something&quot; it should either provide a feature that is currently impossible or it should provide a significantly better way to do something that can already be done. With that as my metric I find 5_000.times to be moderately better at best and does not meet my standard for inclusion.<br></p><p>Andrew Hoos<br></p><p><br>&gt; On Dec 19, 2015, at 16:35, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; I do have an honest question that comes from ignorance rather than malice: has anyone actually used .times in ruby outside of the context of learning or testing?<br>&gt; <br>&gt; I&#39;ve seen it used to retry a failing operation a certain number of times:<br>&gt; <br>&gt; 	5.times do<br>&gt; 		return true if do_network_call<br>&gt; 		sleep 5<br>&gt; 	end<br>&gt; 	raise NetworkCallFailedError<br>&gt; <br>&gt; Of course, that requires you to be able to return out of the surrounding function from the `times` loop, which you can do in Ruby but not in Swift.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December 18, 2015 at 03:00:00pm</p></header><div class="content"><p>-1 here. It provides almost no utility outside of &quot;hello world&quot; style<br>sample code. Also this particular method is ambiguous, as people have<br>already said (the word &quot;times&quot; can mean multiplication just as much as<br>it can mean looping), and it also doesn&#39;t even make much sense when used<br>with non-literals, e.g. &quot;foo.count.times&quot; does not have the same &quot;sounds<br>like English&quot; behavior that &quot;5.times&quot; does. More generally, we shouldn&#39;t<br>be adding stuff to the standard library that doesn&#39;t provide any clear<br>benefit, both because it&#39;s API bloat and because everybody has to pay<br>for the code size.<br></p><p>-Kevin Ballrd<br></p><p>On Fri, Dec 18, 2015, at 10:25 AM, Cihat Gündüz via swift-evolution wrote:<br>&gt; Dear Swift-Community,<br>&gt;<br>&gt; I’d like to propose an *addition of a useful method*, especially for<br>&gt; beginners that also makes Swift much more readable in some situations:<br>&gt; The addition of a .times method to Integer type(s).<br>&gt;<br>&gt; For example recently in one of my projects I wanted to test the<br>&gt; scalability of an important piece of code and wrote this method:<br>&gt;<br>&gt; func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt; self.measureBlock { let expectedQuality = 33.33 .stride(to: 5_000, by:<br>&gt; 1).forEach { _ in<br>&gt; XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent,<br>&gt; expectedQuality, accuracy: 0.1)               }        }    }<br>&gt;<br>&gt; As you can see what I basically wanted was to repeat the test some<br>&gt; thousand times. I also like to use the Ruby language and one thing I<br>&gt; love about it is that it has some really handy methods integrated to<br>&gt; the language in situations like this which make the code very readable<br>&gt; and therefore fun to use.<br>&gt;<br>&gt; I’m an even bigger fan of Swift so I’d love to see such useful methods<br>&gt; appear in Swift, too and this is the first I came across that I really<br>&gt; missed. So I’m asking myself, what if I could write the same code<br>&gt; above like this:<br>&gt;<br>&gt; func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt; self.measureBlock { let expectedQuality = 33.33 5_000.times {<br>&gt; XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent,<br>&gt; expectedQuality, accuracy: 0.1)               }        }    }<br>&gt;<br>&gt; I think it could be added to the Swift standard library very easily<br>&gt; (for example by using the .stride method like I used) without any side<br>&gt; effects and has enough advantages to be part of Swift itself. What do<br>&gt; you think?<br>&gt;<br>&gt; I wish you all the best, Cihat<br>&gt;<br>&gt;<br>&gt; P.S.: This is my very first mail in such a mailing list so I did<br>&gt;       everything correctly. ^.^<br>&gt;<br>&gt;<br>&gt; _________________________________________________<br>&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/76f0fc3d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>December 19, 2015 at 05:00:00pm</p></header><div class="content"><p>-1 as well. This Int extension is super-easy to implement if you want it. I don&#39;t remember ever using it in code outside tutorials. <br></p><p>&quot;What ought to be in the standard C++ library? One ideal is for a programmer to be able to find every interesting, significant, and reasonably general class, function, template, etc., in a library. However, the question here is not, &quot;What ought to be in some library?&quot; but &quot;What ought to be in the standard library?&quot; The answer &quot;Everything!&quot; is a reasonable first approximation to an answer to the former question but not the latter. A standard library is something every implementer must supply so that every programmer can rely on it&quot; -- B. Strustroup<br></p><p>Would including this proposal in the Standard Library make a programmer&#39;s job easier? Probably, but not often<br>Does this proposal represent a fundamental element of daily development tasks? In my opinion, no<br>Does this proposal extend the core functionality of the language? No<br>Does this proposal deserve a place in an expended Standard Library? No.<br>-- E<br></p><p><br>&gt; On Dec 18, 2015, at 4:18 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; -1 here. It provides almost no utility outside of &quot;hello world&quot; style sample code. Also this particular method is ambiguous, as people have already said (the word &quot;times&quot; can mean multiplication just as much as it can mean looping), and it also doesn&#39;t even make much sense when used with non-literals, e.g. &quot;foo.count.times&quot; does not have the same &quot;sounds like English&quot; behavior that &quot;5.times&quot; does. More generally, we shouldn&#39;t be adding stuff to the standard library that doesn&#39;t provide any clear benefit, both because it&#39;s API bloat and because everybody has to pay for the code size.<br>&gt;  <br>&gt; -Kevin Ballrd<br>&gt;  <br>&gt; On Fri, Dec 18, 2015, at 10:25 AM, Cihat Gündüz via swift-evolution wrote:<br>&gt;&gt; Dear Swift-Community,<br>&gt;&gt;  <br>&gt;&gt; I’d like to propose an addition of a useful method, especially for beginners that also makes Swift much more readable in some situations: The addition of a .times method to Integer type(s).<br>&gt;&gt;  <br>&gt;&gt; For example recently in one of my projects I wanted to test the scalability of an important piece of code and wrote this method:<br>&gt;&gt;  <br>&gt;&gt; func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;&gt; self.measureBlock {<br>&gt;&gt; let expectedQuality = 33.33<br>&gt;&gt; 0.stride(to: 5_000, by: 1).forEach { _ in<br>&gt;&gt; XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>&gt;&gt;             }   <br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt;  <br>&gt;&gt; As you can see what I basically wanted was to repeat the test some thousand times. I also like to use the Ruby language and one thing I love about it is that it has some really handy methods integrated to the language in situations like this which make the code very readable and therefore fun to use.<br>&gt;&gt;  <br>&gt;&gt; I’m an even bigger fan of Swift so I’d love to see such useful methods appear in Swift, too and this is the first I came across that I really missed. So I’m asking myself, what if I could write the same code above like this:<br>&gt;&gt;  <br>&gt;&gt; func testPerfQualityInPercentWithoutQualityImprovements() {<br>&gt;&gt; self.measureBlock {<br>&gt;&gt; let expectedQuality = 33.33<br>&gt;&gt; 5_000.times {<br>&gt;&gt; XCTAssertEqualWithAccuracy(self.crossword.qualityInPercent, expectedQuality, accuracy: 0.1)   <br>&gt;&gt;             }   <br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt;  <br>&gt;&gt; I think it could be added to the Swift standard library very easily (for example by using the .stride method like I used) without any side effects and has enough advantages to be part of Swift itself. What do you think?<br>&gt;&gt;  <br>&gt;&gt; I wish you all the best,<br>&gt;&gt; Cihat<br>&gt;&gt;  <br>&gt;&gt;  <br>&gt;&gt; P.S.: This is my very first mail in such a mailing list so I did everything correctly. ^.^<br>&gt;&gt;  <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/50b824ac/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>December 20, 2015 at 12:00:00pm</p></header><div class="content"><p>I guess everyone agrees that it is easy to add the functionality with an extension — and I&#39;m quite sure many will do so.<br>For me, the need to add the method on my own (if I want to use it) is not an issue, but imho having several thousand implementations of the same concept isn&#39;t that appealing.<br>Tiny methods like &quot;times&quot; should be inlined anyways, so it actually doesn&#39;t matter, but for types and bigger functions, standardization would be a good thing:<br>C++ for example might have seen many thousand incompatible implementations of basic concepts like &quot;point&quot;, &quot;vector&quot;, &quot;either&quot; or &quot;picture&quot;, most of them nearly identical and only created because there was nothing to build on.<br>It is a bad idea to put every possible concept into the standard lib, which imho should be as small and compact as possible, but looking at C++ again, there is boost…<br></p><p>So for me it would make sense to have a set of &quot;semi&quot;-standard libs to ensure that there is some consensus on common datatypes (especially protocols).<br>Right now, the Cocoa libs help us with things like CGSize, NSDate and UIImage, but I think this fundament is not the best choice for Swift on other platforms.<br></p><p>How about proposing to start adding some more official git-repositories for libs? That would be a much bigger thing than adding &quot;Int.times&quot;, but as with boost, it could easily evolve alongside core Swift.<br></p><p>Tino<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Proposal: Add .times method to Integer type</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>December 20, 2015 at 10:00:00am</p></header><div class="content"><p>The Foundation &lt;https://github.com/apple/swift-corelibs-foundation&gt; framework is being ported to other platforms and it has CGSize and NSDate (but not NSImage/UIImage). For the rest, the Swift package manager &lt;https://github.com/apple/swift-package-manager&gt; will probably fulfill that role, no?<br></p><p>&gt; Le 20 déc. 2015 à 06:09:19, Tino Heth via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; I guess everyone agrees that it is easy to add the functionality with an extension — and I&#39;m quite sure many will do so.<br>&gt; For me, the need to add the method on my own (if I want to use it) is not an issue, but imho having several thousand implementations of the same concept isn&#39;t that appealing.<br>&gt; Tiny methods like &quot;times&quot; should be inlined anyways, so it actually doesn&#39;t matter, but for types and bigger functions, standardization would be a good thing:<br>&gt; C++ for example might have seen many thousand incompatible implementations of basic concepts like &quot;point&quot;, &quot;vector&quot;, &quot;either&quot; or &quot;picture&quot;, most of them nearly identical and only created because there was nothing to build on.<br>&gt; It is a bad idea to put every possible concept into the standard lib, which imho should be as small and compact as possible, but looking at C++ again, there is boost…<br>&gt; <br>&gt; So for me it would make sense to have a set of &quot;semi&quot;-standard libs to ensure that there is some consensus on common datatypes (especially protocols).<br>&gt; Right now, the Cocoa libs help us with things like CGSize, NSDate and UIImage, but I think this fundament is not the best choice for Swift on other platforms.<br>&gt; <br>&gt; How about proposing to start adding some more official git-repositories for libs? That would be a much bigger thing than adding &quot;Int.times&quot;, but as with boost, it could easily evolve alongside core Swift.<br>&gt; <br>&gt; Tino<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/41d74993/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
