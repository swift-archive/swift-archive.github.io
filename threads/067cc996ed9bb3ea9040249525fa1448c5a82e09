<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Language or XCTest improvements to allow testing assert/precondition failures</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>December 13, 2015 at 11:00:00am</p></header><div class="content"><p>Currently, it is impossible for XCTest to unit test assert and precondition failures because they kill the process. And those are important to unit test: how would you test NSArray&#39;s objectAtIndex bound conditions? Currently, the standard library tests those with StdlibUnittest, a small piece of code which runs those tests in a forked process.<br></p><p>I want to start a proposal but I&#39;m not sure if it should come as a XCTest improvement which spawns a process or if the language should implement assert and precondition as a special kind of throw?<br></p><p>David<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d47baf3a0f80c9fd13ece9c4b87c7fce?s=50"></div><header><strong>[swift-evolution] Language or XCTest improvements to allow testing assert/precondition failures</strong> from <string>Marc Knaup</string> &lt;marc at knaup.koeln&gt;<p>December 13, 2015 at 03:00:00pm</p></header><div class="content"><p>+1 from me. I&#39;m really annoyed by the fact I can&#39;t reach 100% code coverage<br>due to this :)<br></p><p>Being able to test them is very valuable. Take Swift&#39;s promise to be safe<br>for example. If you can&#39;t test the behavior in cases where an array index<br>was used which is out of bounds then you can&#39;t test even the promise to be<br>safe.<br></p><p>On Sun, Dec 13, 2015 at 11:03 AM, David Hart via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Currently, it is impossible for XCTest to unit test assert and<br>&gt; precondition failures because they kill the process. And those are<br>&gt; important to unit test: how would you test NSArray&#39;s objectAtIndex bound<br>&gt; conditions? Currently, the standard library tests those with<br>&gt; StdlibUnittest, a small piece of code which runs those tests in a forked<br>&gt; process.<br>&gt;<br>&gt; I want to start a proposal but I&#39;m not sure if it should come as a XCTest<br>&gt; improvement which spawns a process or if the language should implement<br>&gt; assert and precondition as a special kind of throw?<br>&gt;<br>&gt; David<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151213/689e1850/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>[swift-evolution] Language or XCTest improvements to allow testing assert/precondition failures</strong> from <string>Rudolf Adamkoviƒç</string> &lt;salutis at me.com&gt;<p>February  2, 2016 at 02:00:00pm</p></header><div class="content"><p>+1<br></p><p>I would like to test both asserts and preconditions too.<br></p><p>&gt; On 13 Dec 2015, at 15:18, Marc Knaup via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; +1 from me. I&#39;m really annoyed by the fact I can&#39;t reach 100% code coverage due to this :)<br>&gt; <br>&gt; Being able to test them is very valuable. Take Swift&#39;s promise to be safe for example. If you can&#39;t test the behavior in cases where an array index was used which is out of bounds then you can&#39;t test even the promise to be safe.<br>&gt; <br>&gt; On Sun, Dec 13, 2015 at 11:03 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Currently, it is impossible for XCTest to unit test assert and precondition failures because they kill the process. And those are important to unit test: how would you test NSArray&#39;s objectAtIndex bound conditions? Currently, the standard library tests those with StdlibUnittest, a small piece of code which runs those tests in a forked process.<br>&gt; <br>&gt; I want to start a proposal but I&#39;m not sure if it should come as a XCTest improvement which spawns a process or if the language should implement assert and precondition as a special kind of throw?<br>&gt; <br>&gt; David<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160202/1fa9694c/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>[swift-evolution] Language or XCTest improvements to allow testing assert/precondition failures</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>December 13, 2015 at 09:00:00am</p></header><div class="content"><p>&gt; On Dec 13, 2015, at 2:03 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Currently, it is impossible for XCTest to unit test assert and precondition failures because they kill the process. And those are important to unit test: how would you test NSArray&#39;s objectAtIndex bound conditions? Currently, the standard library tests those with StdlibUnittest, a small piece of code which runs those tests in a forked process.<br>&gt; <br>&gt; I want to start a proposal but I&#39;m not sure if it should come as a XCTest improvement which spawns a process or if the language should implement assert and precondition as a special kind of throw?<br></p><p>One way to start a proposal is to try and work through what the implications of each approach are, decide which is best, and then write that up in a proposal explaining why you chose the approach you did.<br></p><p>If you are interested in working on this, I would definitely also survey how other frameworks do this. Googletest, for example, supports this via a &quot;death tests&quot; mechanism, which would be good to understand and compare to:<br>  https://github.com/google/googletest/blob/master/googletest/docs/AdvancedGuide.md#death-tests<br></p><p>I suspect that spawning a process is the best approach, because it can cover more cases than the language built in features, and doesn&#39;t require language support, but I would be interested in seeing an in depth study of what this would mean for the framework and the APIs.<br></p><p> - Daniel<br></p><p>&gt; <br>&gt; David<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[swift-evolution] Language or XCTest improvements to allow testing assert/precondition failures</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February  2, 2016 at 09:00:00am</p></header><div class="content"><p>As it stands today, having the test harness run the test under a separate process, the way StdlibUnittest does, is the best approach IMO. Making failure traps even conditionally recoverable would be a fairly large semantic design and codegen complication. In the bright distant future where we have an actor model, then actor failures might be isolatable.<br></p><p>-Joe<br></p><p>&gt; On Dec 13, 2015, at 2:03 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Currently, it is impossible for XCTest to unit test assert and precondition failures because they kill the process. And those are important to unit test: how would you test NSArray&#39;s objectAtIndex bound conditions? Currently, the standard library tests those with StdlibUnittest, a small piece of code which runs those tests in a forked process.<br>&gt; <br>&gt; I want to start a proposal but I&#39;m not sure if it should come as a XCTest improvement which spawns a process or if the language should implement assert and precondition as a special kind of throw?<br>&gt; <br>&gt; David<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
