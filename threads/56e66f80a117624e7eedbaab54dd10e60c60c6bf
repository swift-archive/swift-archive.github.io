<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7655c90d0e6ae4e1cb871916ee9bdf7a?s=50"></div><header><strong>Proposal: Protocol methods should accept default arguments</strong> from <string>Ben</string> &lt;ben_cocoa_dev_list at yahoo.co.uk&gt;<p>December  4, 2015 at 04:00:00pm</p></header><div class="content"><p>Hi list,<br></p><p>I propose that methods defined in protocols should accept default arguments. This could help remove the need for method families where only one parameter is essential, but others are often used.<br></p><p>For example:<br></p><p>protocol Datastore {<br>  func executeQuery(query: String)<br>  func executeQuery(query: String, usingParameters: [Any])<br>  func executeQuery(query: String, usingParameters: [Any], logType: LogType)<br>  func executeQuery(query: String, usingParameters: [Any], logType: LogType, completionHandler:ClosureOfSomeSort)<br>}<br></p><p>Where typically the implementing object funnels the first three methods through to the final, more verbose method.<br></p><p>This could be shortened to:<br></p><p>protocol Database {<br>  func executeQuery(query: String, usingParameters: [Any] = [], logType: LogType  = .NotLogged  completionHandler:ClosureOfSomeSort? = nil)<br>}<br></p><p>Advantages:<br>- Only one method to implement<br>- Less to document, less cluttered interface<br>- Prevent objects adopting the protocol from using different default values<br>- Prevent objects from implementing similar methods in the family differently - fewer code paths to inspect, less confusion over behaviour since no argument values are hidden<br></p><p>This fits in well with the parameters section of the Swift API design page: https://swift.org/documentation/api-design-guidelines.html#parameters &lt;https://swift.org/documentation/api-design-guidelines.html#parameters&gt;<br></p><p><br>What do you think?<br></p><p>Regards,<br></p><p>Ben Barnett<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/56e6c6bf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c68458ef31619f30cfc2b4ebbc17c4f6?s=50"></div><header><strong>Proposal: Protocol methods should accept default arguments</strong> from <string>Felix Gabel</string> &lt;felix.gabel at me.com&gt;<p>December  4, 2015 at 05:00:00pm</p></header><div class="content"><p>Default parameters are in my opinion an implementation detail and should be always handled by the conforming type. What can be done here is only declare the 4th method in the protocol and create a protocol extension with default forwarding.<br></p><p>&gt; On 04 Dec 2015, at 17:31, Ben &lt;ben_cocoa_dev_list at yahoo.co.uk&gt; wrote:<br>&gt; <br>&gt; Hi list,<br>&gt; <br>&gt; I propose that methods defined in protocols should accept default arguments. This could help remove the need for method families where only one parameter is essential, but others are often used.<br>&gt; <br>&gt; For example:<br>&gt; <br>&gt; protocol Datastore {<br>&gt;   func executeQuery(query: String)<br>&gt;   func executeQuery(query: String, usingParameters: [Any])<br>&gt;   func executeQuery(query: String, usingParameters: [Any], logType: LogType)<br>&gt;   func executeQuery(query: String, usingParameters: [Any], logType: LogType, completionHandler:ClosureOfSomeSort)<br>&gt; }<br>&gt; <br>&gt; Where typically the implementing object funnels the first three methods through to the final, more verbose method.<br>&gt; <br>&gt; This could be shortened to:<br>&gt; <br>&gt; protocol Database {<br>&gt;   func executeQuery(query: String, usingParameters: [Any] = [], logType: LogType  = .NotLogged  completionHandler:ClosureOfSomeSort? = nil)<br>&gt; }<br>&gt; <br>&gt; Advantages:<br>&gt; - Only one method to implement<br>&gt; - Less to document, less cluttered interface<br>&gt; - Prevent objects adopting the protocol from using different default values<br>&gt; - Prevent objects from implementing similar methods in the family differently - fewer code paths to inspect, less confusion over behaviour since no argument values are hidden<br>&gt; <br>&gt; This fits in well with the parameters section of the Swift API design page: https://swift.org/documentation/api-design-guidelines.html#parameters<br>&gt; <br>&gt; <br>&gt; What do you think?<br>&gt; <br>&gt; Regards,<br>&gt; <br>&gt; Ben Barnett<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/d4641d2a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7655c90d0e6ae4e1cb871916ee9bdf7a?s=50"></div><header><strong>Proposal: Protocol methods should accept default arguments</strong> from <string>Ben</string> &lt;ben_cocoa_dev_list at yahoo.co.uk&gt;<p>December  4, 2015 at 07:00:00pm</p></header><div class="content"><p>Thank you Felix and Sean for the advice. I am happy to cautiously withdraw my suggestion, since this is a mostly acceptable workaround. The only hiccup appears to be with where inline documentation should be placed to have it appear in Xcode (in the extension, not the original protocol). I will think further and perhaps file a radar for Xcode later.<br></p><p>Incidentally, having explored the mailing lists further it seems that stuff like my original post should start in the swift-users list then works it&#39;s way over here. Would that be correct? I don&#39;t want to be extra noise in the wrong place.<br></p><p>- Ben<br></p><p><br></p><p><br>&gt; On 4 Dec 2015, at 16:37, Felix Gabel &lt;felix.gabel at me.com&gt; wrote:<br>&gt; <br>&gt; Default parameters are in my opinion an implementation detail and should be always handled by the conforming type. What can be done here is only declare the 4th method in the protocol and create a protocol extension with default forwarding.<br>&gt; <br>&gt; On 04 Dec 2015, at 17:31, Ben &lt;ben_cocoa_dev_list at yahoo.co.uk &lt;mailto:ben_cocoa_dev_list at yahoo.co.uk&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Hi list,<br>&gt;&gt; <br>&gt;&gt; I propose that methods defined in protocols should accept default arguments. This could help remove the need for method families where only one parameter is essential, but others are often used.<br>&gt;&gt; <br>&gt;&gt; For example:<br>&gt;&gt; <br>&gt;&gt; protocol Datastore {<br>&gt;&gt;   func executeQuery(query: String)<br>&gt;&gt;   func executeQuery(query: String, usingParameters: [Any])<br>&gt;&gt;   func executeQuery(query: String, usingParameters: [Any], logType: LogType)<br>&gt;&gt;   func executeQuery(query: String, usingParameters: [Any], logType: LogType, completionHandler:ClosureOfSomeSort)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Where typically the implementing object funnels the first three methods through to the final, more verbose method.<br>&gt;&gt; <br>&gt;&gt; This could be shortened to:<br>&gt;&gt; <br>&gt;&gt; protocol Database {<br>&gt;&gt;   func executeQuery(query: String, usingParameters: [Any] = [], logType: LogType  = .NotLogged  completionHandler:ClosureOfSomeSort? = nil)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Advantages:<br>&gt;&gt; - Only one method to implement<br>&gt;&gt; - Less to document, less cluttered interface<br>&gt;&gt; - Prevent objects adopting the protocol from using different default values<br>&gt;&gt; - Prevent objects from implementing similar methods in the family differently - fewer code paths to inspect, less confusion over behaviour since no argument values are hidden<br>&gt;&gt; <br>&gt;&gt; This fits in well with the parameters section of the Swift API design page: https://swift.org/documentation/api-design-guidelines.html#parameters &lt;https://swift.org/documentation/api-design-guidelines.html#parameters&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; What do you think?<br>&gt;&gt; <br>&gt;&gt; Regards,<br>&gt;&gt; <br>&gt;&gt; Ben Barnett<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/69e02c29/attachment-0001.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>Proposal: Protocol methods should accept default arguments</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>December  4, 2015 at 10:00:00am</p></header><div class="content"><p>I ran into a situation like this in my own code and thought the same before I realized that the protocol only needs the single function that takes all of the parameters (with no need for defaults) and convenience variants can provide default values by implementing them in a protocol extension.<br></p><p>l8r<br>Sean<br></p><p><br>&gt; On Dec 4, 2015, at 10:31 AM, Ben &lt;ben_cocoa_dev_list at yahoo.co.uk&gt; wrote:<br>&gt; <br>&gt; Hi list,<br>&gt; <br>&gt; I propose that methods defined in protocols should accept default arguments. This could help remove the need for method families where only one parameter is essential, but others are often used.<br>&gt; <br>&gt; For example:<br>&gt; <br>&gt; protocol Datastore {<br>&gt;   func executeQuery(query: String)<br>&gt;   func executeQuery(query: String, usingParameters: [Any])<br>&gt;   func executeQuery(query: String, usingParameters: [Any], logType: LogType)<br>&gt;   func executeQuery(query: String, usingParameters: [Any], logType: LogType, completionHandler:ClosureOfSomeSort)<br>&gt; }<br>&gt; <br>&gt; Where typically the implementing object funnels the first three methods through to the final, more verbose method.<br>&gt; <br>&gt; This could be shortened to:<br>&gt; <br>&gt; protocol Database {<br>&gt;   func executeQuery(query: String, usingParameters: [Any] = [], logType: LogType  = .NotLogged  completionHandler:ClosureOfSomeSort? = nil)<br>&gt; }<br>&gt; <br>&gt; Advantages:<br>&gt; - Only one method to implement<br>&gt; - Less to document, less cluttered interface<br>&gt; - Prevent objects adopting the protocol from using different default values<br>&gt; - Prevent objects from implementing similar methods in the family differently - fewer code paths to inspect, less confusion over behaviour since no argument values are hidden<br>&gt; <br>&gt; This fits in well with the parameters section of the Swift API design page: https://swift.org/documentation/api-design-guidelines.html#parameters<br>&gt; <br>&gt; <br>&gt; What do you think?<br>&gt; <br>&gt; Regards,<br>&gt; <br>&gt; Ben Barnett<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
