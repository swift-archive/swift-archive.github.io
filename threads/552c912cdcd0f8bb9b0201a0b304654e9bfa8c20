<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Issues with 0005-Better Translation of Objective-C APIs Into Swift</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  2, 2016 at 04:00:00pm</p></header><div class="content"><p>on Tue Feb 02 2016, Aaron Crespo &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I think Kevin and I come from the same place and largely agree. I feel like<br>&gt; this is trading in of accessibility and discoverability for the sake of<br>&gt; terseness. This might be aesthetically pleasing but gives up many positive<br>&gt; side effects the more descriptive names provide.<br></p><p>This is not about aesthetics; it&#39;s about clarifying code by omitting<br>details that don&#39;t carry their weight in terms of communicative power.<br></p><p>&gt; Consider the time before you knew you could or how to &quot;check the<br>&gt; documentation&quot;. Or the time spent scanning unfamiliar or long<br>&gt; forgotten code.<br></p><p>I am considering that.  Code like this is hard for me to read because<br>there is a great deal of information that is either redundant or<br>irrelevant, and I have to filter it out.<br></p><p>  let cleansedString = listItemView.stringValue.stringByTrimmingCharactersInSet(<br>     NSCharacterSet.whitespaceAndNewlineCharacterSet())<br></p><p>The above is not an improvement over<br></p><p>  let cleansed = listItemView.stringValue.trimming(.whitespaceAndNewlines)<br></p><p>in understandability, especially when you put it in context in a large<br>program.  Programmers have a great deal of complexity to manage, and<br>giving them twice the number of words to process in order to understand<br>a piece of code makes their job a lot harder.<br></p><p>We don&#39;t write English that way, for good reason: it results in<br>impenetrable text.  You might be able to pick apart the details of a<br>sentence with great precision, but you&#39;ll never be able to grasp the<br>meaning of a paragraph.  The same applies to programs.<br></p><p>&gt; These concerns might be eased if consideration was also being given to the<br>&gt; first parameter rule. <br></p><p>If you mean the default for first parameters, some of us are thinking<br>about that; just not in this thread please.  But regardless, I don&#39;t see<br>how changing the default would address any of your concerns about<br>comprehensibility of code that follows the guidelines.<br></p><p>&gt; And the (now) odd difference between initializers and function<br>&gt; parameter names. Apply the same rules as any parameter name.<br>&gt;<br>&gt; Stealing Kevins example:<br>&gt;<br>&gt; let next = current.updating(proximity: p)<br>&gt;<br>&gt; Not great but better.<br></p><p>&gt;<br>&gt; On Tue, Feb 2, 2016 at 2:16 PM, Kevin Schlei via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Sorry for the premature send! Continuing:<br>&gt;&gt;<br>&gt;&gt; let content = listItemView.text.trimming(.whitespaceAndNewlines)<br>&gt;&gt;<br>&gt;&gt; For a beginning programmer, there is no indication of what .trimming does.<br>&gt;&gt; In this case, it returns a new string instance. Where is that explained? In<br>&gt;&gt; the documentation. Nowhere near the method call.<br>&gt;&gt;<br>&gt;&gt; So are we reduced now to looking up documentation just to read code? What<br>&gt;&gt; does this line do:<br>&gt;&gt;<br>&gt;&gt; let next = current.updating(p)<br>&gt;&gt;<br>&gt;&gt; It&#39;s 100% unclear because you&#39;re relying on parameter names to contain all<br>&gt;&gt; the hints. But this line:<br>&gt;&gt;<br>&gt;&gt; let next = current.locationByUpdatingProximity(p)<br>&gt;&gt;<br>&gt;&gt; Lets you know that:<br>&gt;&gt;<br>&gt;&gt; 1. we&#39;re returning a *&#39;location&#39;*<br>&gt;&gt; 2. &#39;*by* *updating&#39; *current with a new *&#39;proximity&#39;*<br>&gt;&gt;<br>&gt;&gt; When is the last time you saw a gerund (-ing) as a method name? I wouldn&#39;t<br>&gt;&gt; let my students write that. Gerunds make good boolean properties. How would<br>&gt;&gt; you even read the first line above out loud? Probably by filling in the<br>&gt;&gt; words in the second line, magically.<br>&gt;&gt;<br>&gt;&gt; My second major issue is that autocomplete grouping is totally lost when<br>&gt;&gt; dropping the type returned at the beginning of the call. How many of us<br>&gt;&gt; learned a *ton* when we just autocompleted .stringBy? Look at all the<br>&gt;&gt; things you can do! But by removing the &#39;useless word&#39; (really don&#39;t like<br>&gt;&gt; that flag name) we have no grouping of constructor methods.<br>&gt;&gt;<br>&gt;&gt; I see a lot of discussion on how to deal with &#39;with&#39; and &#39;by&#39; and other<br>&gt;&gt; words, but I want to strongly suggest that the current naming practices<br>&gt;&gt; provide context and clarity. It makes code readable and accessible. Don&#39;t<br>&gt;&gt; forget about when you didn&#39;t know how to code! These method names are<br>&gt;&gt; teaching tools!<br>&gt;&gt;<br>&gt;&gt; Finally, I just want to ask: why? What is the great benefit? Shouldn&#39;t<br>&gt;&gt; clarity be prioritized over brevity (where have I seen that...)<br>&gt;&gt;<br>&gt;&gt; I can&#39;t put it better than another forums poster:<br>&gt;&gt;<br>&gt;&gt; Does the Swift team seriously believe that systematically parsing and<br>&gt;&gt;&gt; extensively munging patterns in not-quite-natural-language is tractable to<br>&gt;&gt;&gt; support all the corner cases for? And that, even if it were, that it could<br>&gt;&gt;&gt; avoid confusion in less-than-perfect codebases? The idea that this will<br>&gt;&gt;&gt; somehow benefit a language, particularly one in which clear and obvious<br>&gt;&gt;&gt; bridging is so vital is *insane*. The best it can do is a reasonable<br>&gt;&gt;&gt; job, with some amount of either unfixable brokenness forced upon developers<br>&gt;&gt;&gt; in perpetuity, or constant churn stemming from perpetual fixing of<br>&gt;&gt;&gt; brokenness. Swift&#39;s translation is currently simple to reason about, and<br>&gt;&gt;&gt; the language as a whole has got a really great thing going on. I&#39;m really<br>&gt;&gt;&gt; happy with where it is at this moment. Why ruin it by boneheadedly<br>&gt;&gt;&gt; detonating the utility of two years of progress in literature and the<br>&gt;&gt;&gt; library of online information about Swift? Seriously, why?<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Tue, Feb 2, 2016 at 1:04 PM, Kevin Schlei<br>&gt;&gt; &lt;kevinschlei at gmail.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; I am strongly against the proposed changes to the translation of<br>&gt;&gt;&gt; Objective-C APIs. I think the changes promote terseness for terseness sake,<br>&gt;&gt;&gt; lose vital context in method names, and are a huge loss pedagogically.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; If you teach programming, you&#39;ll know why this line will be a nightmare:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; let content = listItemView.text.trimming(.whitespaceAndNewlines)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
