<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Proposal] Improving operator requirements in protocols</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May  2, 2016 at 01:00:00pm</p></header><div class="content"><p>Tony, thanks for writing this up!<br></p><p>on Mon May 02 2016, Tony Allevato &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Other kinds of operators (prefix, postfix, assignment)<br>&gt;<br>&gt; Static operator methods have the same signatures as their global counterparts.<br>&gt; So, for example, prefix and postfix operators as well as assignment operators<br>&gt; would be defined the way one would expect:<br>&gt;<br>&gt; protocol SomeProtocol {<br>&gt;   static func +=(lhs: inout Self, rhs: Self)<br>&gt;   static prefix func ~(value: Self) -&gt; Self<br>&gt;<br>&gt;   // This one is deprecated, of course, but used here just to serve as an<br>&gt;   // example.<br>&gt;   static postfix func ++(value: inout Self) -&gt; Self<br>&gt; }<br>&gt;<br>&gt; // Trampolines<br>&gt; func += &lt;T: SomeProtocol&gt;(lhs: inout T, rhs T) {<br>&gt;   T.+=(&amp;lhs, rhs)<br>&gt; }<br>&gt; prefix func ~ &lt;T: SomeProtocol&gt;(value: T) -&gt; T {<br>&gt;   return T.~(value)<br>&gt; }<br>&gt; postfix func ++ &lt;T: SomeProtocol&gt;(value: inout T) -&gt; T {<br>&gt;   return T.++(&amp;value)<br>&gt; }<br></p><p>How does one distinguish between calls to a static prefix operator and a<br>static postfix operator with the same name?<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>[Proposal] Improving operator requirements in protocols</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>May  2, 2016 at 08:00:00pm</p></header><div class="content"><p>On Mon, May 2, 2016 at 1:20 PM Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; Tony, thanks for writing this up!<br>&gt;<br>&gt; on Mon May 02 2016, Tony Allevato &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; Other kinds of operators (prefix, postfix, assignment)<br>&gt; &gt;<br>&gt; &gt; Static operator methods have the same signatures as their global<br>&gt; counterparts.<br>&gt; &gt; So, for example, prefix and postfix operators as well as assignment<br>&gt; operators<br>&gt; &gt; would be defined the way one would expect:<br>&gt; &gt;<br>&gt; &gt; protocol SomeProtocol {<br>&gt; &gt;   static func +=(lhs: inout Self, rhs: Self)<br>&gt; &gt;   static prefix func ~(value: Self) -&gt; Self<br>&gt; &gt;<br>&gt; &gt;   // This one is deprecated, of course, but used here just to serve as an<br>&gt; &gt;   // example.<br>&gt; &gt;   static postfix func ++(value: inout Self) -&gt; Self<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; // Trampolines<br>&gt; &gt; func += &lt;T: SomeProtocol&gt;(lhs: inout T, rhs T) {<br>&gt; &gt;   T.+=(&amp;lhs, rhs)<br>&gt; &gt; }<br>&gt; &gt; prefix func ~ &lt;T: SomeProtocol&gt;(value: T) -&gt; T {<br>&gt; &gt;   return T.~(value)<br>&gt; &gt; }<br>&gt; &gt; postfix func ++ &lt;T: SomeProtocol&gt;(value: inout T) -&gt; T {<br>&gt; &gt;   return T.++(&amp;value)<br>&gt; &gt; }<br>&gt;<br>&gt; How does one distinguish between calls to a static prefix operator and a<br>&gt; static postfix operator with the same name?<br>&gt;<br></p><p>Ah, that&#39;s a tricky one that I don&#39;t have an immediate answer to, so I&#39;m<br>definitely open to creative thoughts here.<br></p><p>The first stab I would take at is, what if we included the token &quot;prefix&quot;<br>or &quot;suffix&quot; before the operator name in the expression, like this?<br></p><p>    return T.prefix ++(&amp;value)<br>    return T.postfix ++(&amp;value)<br></p><p>But that could start to look like an invocation of &quot;++&quot; on a static<br>property &quot;T.prefix&quot;. I haven&#39;t dug into the parser to determine if that<br>would even be feasible or not.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/acadfd81/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Proposal] Improving operator requirements in protocols</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May  2, 2016 at 01:00:00pm</p></header><div class="content"><p>on Mon May 02 2016, Tony Allevato &lt;allevato-AT-google.com&gt; wrote:<br></p><p>&gt; On Mon, May 2, 2016 at 1:20 PM Dave Abrahams via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;     Tony, thanks for writing this up!<br>&gt;<br>&gt;     on Mon May 02 2016, Tony Allevato &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;     &gt; Other kinds of operators (prefix, postfix, assignment)<br>&gt;     &gt;<br>&gt;     &gt; Static operator methods have the same signatures as their global<br>&gt;     counterparts.<br>&gt;     &gt; So, for example, prefix and postfix operators as well as assignment<br>&gt;     operators<br>&gt;     &gt; would be defined the way one would expect:<br>&gt;     &gt;<br>&gt;     &gt; protocol SomeProtocol {<br>&gt;     &gt; static func +=(lhs: inout Self, rhs: Self)<br>&gt;     &gt; static prefix func ~(value: Self) -&gt; Self<br>&gt;     &gt;<br>&gt;     &gt; // This one is deprecated, of course, but used here just to serve as an<br>&gt;     &gt; // example.<br>&gt;     &gt; static postfix func ++(value: inout Self) -&gt; Self<br>&gt;     &gt; }<br>&gt;     &gt;<br>&gt;     &gt; // Trampolines<br>&gt;     &gt; func += &lt;T: SomeProtocol&gt;(lhs: inout T, rhs T) {<br>&gt;     &gt; T.+=(&amp;lhs, rhs)<br>&gt;     &gt; }<br>&gt;     &gt; prefix func ~ &lt;T: SomeProtocol&gt;(value: T) -&gt; T {<br>&gt;     &gt; return T.~(value)<br>&gt;     &gt; }<br>&gt;     &gt; postfix func ++ &lt;T: SomeProtocol&gt;(value: inout T) -&gt; T {<br>&gt;     &gt; return T.++(&amp;value)<br>&gt;     &gt; }<br>&gt;<br>&gt;     How does one distinguish between calls to a static prefix operator and a<br>&gt;     static postfix operator with the same name?<br>&gt;<br>&gt; Ah, that&#39;s a tricky one that I don&#39;t have an immediate answer to, so I&#39;m<br>&gt; definitely open to creative thoughts here.<br></p><p>One possibility: just use “qualified operator” notation.<br></p><p>    lhs T.+= rhs<br>    <br>    T.++x<br>    x T.++<br></p><p>&gt; The first stab I would take at is, what if we included the token &quot;prefix&quot; or<br>&gt; &quot;suffix&quot; before the operator name in the expression, like this?<br>&gt;<br>&gt; return T.prefix ++(&amp;value)<br>&gt; return T.postfix ++(&amp;value)<br>&gt;<br>&gt; But that could start to look like an invocation of &quot;++&quot; on a static property<br>&gt; &quot;T.prefix&quot;. I haven&#39;t dug into the parser to determine if that would even be<br>&gt; feasible or not.<br></p><p>These are not unreasonable either:<br></p><p>return prefix T.++(&amp;value)<br>return postfix T.++(&amp;value)<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Proposal] Improving operator requirements in protocols</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May  2, 2016 at 09:00:00pm</p></header><div class="content"><p>Maybe one minimalist approach could be to have these take two arguments as<br>though it&#39;s an infix operator where one of lhs or rhs is Void:<br></p><p>T.++(&amp;value, ()) //postfix<br>T.++((), &amp;value) // prefix<br>On Mon, May 2, 2016 at 15:56 Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Mon May 02 2016, Tony Allevato &lt;allevato-AT-google.com&gt; wrote:<br>&gt;<br>&gt; &gt; On Mon, May 2, 2016 at 1:20 PM Dave Abrahams via swift-evolution<br>&gt; &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;     Tony, thanks for writing this up!<br>&gt; &gt;<br>&gt; &gt;     on Mon May 02 2016, Tony Allevato &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;     &gt; Other kinds of operators (prefix, postfix, assignment)<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; Static operator methods have the same signatures as their global<br>&gt; &gt;     counterparts.<br>&gt; &gt;     &gt; So, for example, prefix and postfix operators as well as assignment<br>&gt; &gt;     operators<br>&gt; &gt;     &gt; would be defined the way one would expect:<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; protocol SomeProtocol {<br>&gt; &gt;     &gt; static func +=(lhs: inout Self, rhs: Self)<br>&gt; &gt;     &gt; static prefix func ~(value: Self) -&gt; Self<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; // This one is deprecated, of course, but used here just to serve<br>&gt; as an<br>&gt; &gt;     &gt; // example.<br>&gt; &gt;     &gt; static postfix func ++(value: inout Self) -&gt; Self<br>&gt; &gt;     &gt; }<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; // Trampolines<br>&gt; &gt;     &gt; func += &lt;T: SomeProtocol&gt;(lhs: inout T, rhs T) {<br>&gt; &gt;     &gt; T.+=(&amp;lhs, rhs)<br>&gt; &gt;     &gt; }<br>&gt; &gt;     &gt; prefix func ~ &lt;T: SomeProtocol&gt;(value: T) -&gt; T {<br>&gt; &gt;     &gt; return T.~(value)<br>&gt; &gt;     &gt; }<br>&gt; &gt;     &gt; postfix func ++ &lt;T: SomeProtocol&gt;(value: inout T) -&gt; T {<br>&gt; &gt;     &gt; return T.++(&amp;value)<br>&gt; &gt;     &gt; }<br>&gt; &gt;<br>&gt; &gt;     How does one distinguish between calls to a static prefix operator<br>&gt; and a<br>&gt; &gt;     static postfix operator with the same name?<br>&gt; &gt;<br>&gt; &gt; Ah, that&#39;s a tricky one that I don&#39;t have an immediate answer to, so I&#39;m<br>&gt; &gt; definitely open to creative thoughts here.<br>&gt;<br>&gt; One possibility: just use “qualified operator” notation.<br>&gt;<br>&gt;     lhs T.+= rhs<br>&gt;<br>&gt;     T.++x<br>&gt;     x T.++<br>&gt;<br>&gt; &gt; The first stab I would take at is, what if we included the token<br>&gt; &quot;prefix&quot; or<br>&gt; &gt; &quot;suffix&quot; before the operator name in the expression, like this?<br>&gt; &gt;<br>&gt; &gt; return T.prefix ++(&amp;value)<br>&gt; &gt; return T.postfix ++(&amp;value)<br>&gt; &gt;<br>&gt; &gt; But that could start to look like an invocation of &quot;++&quot; on a static<br>&gt; property<br>&gt; &gt; &quot;T.prefix&quot;. I haven&#39;t dug into the parser to determine if that would<br>&gt; even be<br>&gt; &gt; feasible or not.<br>&gt;<br>&gt; These are not unreasonable either:<br>&gt;<br>&gt; return prefix T.++(&amp;value)<br>&gt; return postfix T.++(&amp;value)<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/3b022e16/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>[Proposal] Improving operator requirements in protocols</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>May  2, 2016 at 09:00:00pm</p></header><div class="content"><p>On Mon, May 2, 2016 at 2:01 PM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br></p><p>&gt; Maybe one minimalist approach could be to have these take two arguments as<br>&gt; though it&#39;s an infix operator where one of lhs or rhs is Void:<br>&gt;<br>&gt; T.++(&amp;value, ()) //postfix<br>&gt; T.++((), &amp;value) // prefix<br></p><p><br>This feels a little too much like the &quot;magic unused int&quot; parameter that C++<br>uses to differentiate prefix/postfix operators. My biggest concern would be<br>that I always have to look up which is which when I need to override them<br>because I can never remember it for longer than a few hours. :)<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/6974033f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Proposal] Improving operator requirements in protocols</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May  2, 2016 at 06:00:00pm</p></header><div class="content"><p>On Mon, May 2, 2016 at 4:24 PM, Tony Allevato &lt;allevato at google.com&gt; wrote:<br></p><p>&gt; On Mon, May 2, 2016 at 2:01 PM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; Maybe one minimalist approach could be to have these take two arguments<br>&gt;&gt; as though it&#39;s an infix operator where one of lhs or rhs is Void:<br>&gt;&gt;<br>&gt;&gt; T.++(&amp;value, ()) //postfix<br>&gt;&gt; T.++((), &amp;value) // prefix<br>&gt;<br>&gt;<br>&gt; This feels a little too much like the &quot;magic unused int&quot; parameter that<br>&gt; C++ uses to differentiate prefix/postfix operators. My biggest concern<br>&gt; would be that I always have to look up which is which when I need to<br>&gt; override them because I can never remember it for longer than a few hours.<br>&gt; :)<br>&gt;<br></p><p>Yeah, true. I had to check a few times while writing that email to make<br>sure I&#39;d written what I thought I had :) Not a good idea, clearly.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/97e781f7/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>[Proposal] Improving operator requirements in protocols</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>May  2, 2016 at 09:00:00pm</p></header><div class="content"><p>On Mon, May 2, 2016 at 1:56 PM Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; on Mon May 02 2016, Tony Allevato &lt;allevato-AT-google.com&gt; wrote:<br>&gt;<br>&gt; &gt; On Mon, May 2, 2016 at 1:20 PM Dave Abrahams via swift-evolution<br>&gt; &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;     How does one distinguish between calls to a static prefix operator<br>&gt; and a<br>&gt; &gt;     static postfix operator with the same name?<br>&gt; &gt;<br>&gt; &gt; Ah, that&#39;s a tricky one that I don&#39;t have an immediate answer to, so I&#39;m<br>&gt; &gt; definitely open to creative thoughts here.<br>&gt;<br>&gt; One possibility: just use “qualified operator” notation.<br>&gt;<br>&gt;     lhs T.+= rhs<br>&gt;<br>&gt;     T.++x<br>&gt;     x T.++<br>&gt;<br></p><p>Even though this seemed a little odd when you first suggested it in the<br>other thread, it&#39;s growing on me now that we have to deal with this<br>ambiguity.<br></p><p>Fortunately the only situation I foresee where a person would explicitly<br>use this notation would be in the trampoline operator, so even if it looks<br>a little odd, at least it&#39;s isolated.<br></p><p><br>&gt; &gt; The first stab I would take at is, what if we included the token<br>&gt; &quot;prefix&quot; or<br>&gt; &gt; &quot;suffix&quot; before the operator name in the expression, like this?<br>&gt; &gt;<br>&gt; &gt; return T.prefix ++(&amp;value)<br>&gt; &gt; return T.postfix ++(&amp;value)<br>&gt; &gt;<br>&gt; &gt; But that could start to look like an invocation of &quot;++&quot; on a static<br>&gt; property<br>&gt; &gt; &quot;T.prefix&quot;. I haven&#39;t dug into the parser to determine if that would<br>&gt; even be<br>&gt; &gt; feasible or not.<br>&gt;<br>&gt; These are not unreasonable either:<br>&gt;<br>&gt; return prefix T.++(&amp;value)<br>&gt; return postfix T.++(&amp;value)<br>&gt;<br></p><p>I could get behind this one as well.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/d031b3b2/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Proposal] Improving operator requirements in protocols</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May  2, 2016 at 03:00:00pm</p></header><div class="content"><p>On May 2, 2016, at 1:56 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;    How does one distinguish between calls to a static prefix operator and a<br>&gt;&gt;    static postfix operator with the same name?<br>&gt;&gt; <br>&gt;&gt; Ah, that&#39;s a tricky one that I don&#39;t have an immediate answer to, so I&#39;m<br>&gt;&gt; definitely open to creative thoughts here.<br>&gt; <br>&gt; One possibility: just use “qualified operator” notation.<br>&gt; <br>&gt;    lhs T.+= rhs<br>&gt; <br>&gt;    T.++x<br>&gt;    x T.++<br></p><p>I’m not sure if this is exactly right, but it seems close.  I think that something like this is probably the best way to go, since it composes properly in arbitrary expressions.  It does have a surface level weirdness to it, but it also &quot;makes sense” in terms of how operators work.  <br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Proposal] Improving operator requirements in protocols</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>May  2, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On May 2, 2016, at 5:58 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On May 2, 2016, at 1:56 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;   How does one distinguish between calls to a static prefix operator and a<br>&gt;&gt;&gt;   static postfix operator with the same name?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Ah, that&#39;s a tricky one that I don&#39;t have an immediate answer to, so I&#39;m<br>&gt;&gt;&gt; definitely open to creative thoughts here.<br>&gt;&gt; <br>&gt;&gt; One possibility: just use “qualified operator” notation.<br>&gt;&gt; <br>&gt;&gt;   lhs T.+= rhs<br>&gt;&gt; <br>&gt;&gt;   T.++x<br>&gt;&gt;   x T.++<br>&gt; <br>&gt; I’m not sure if this is exactly right, but it seems close.  I think that something like this is probably the best way to go, since it composes properly in arbitrary expressions.  It does have a surface level weirdness to it, but it also &quot;makes sense” in terms of how operators work.  <br>Yeah… Maybe with parens?<br>T.++(x)<br>(x)T.++<br>Or is that worse?<br></p><p>- Dave Sweeris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/ee0a4e93/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Proposal] Improving operator requirements in protocols</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May  2, 2016 at 06:00:00pm</p></header><div class="content"><p>Hmm, a thought going in a slightly different direction: if these static<br>functions were called like any other function, there might not be a need<br>for having special rules for parameter labels, which can then be freed to<br>denote prefix and postfix operators. In other words, we could have:<br></p><p>* for infix operators, no labels, like so: `static func + (_ lhs: T, _ rhs:<br>T)`, used like this: `T.+(1, 2)`<br>* for prefix and postfix operators, a label, like so: `static func +<br>(prefixing value: T)`, used like this: `T.+(prefixing: 1)`<br></p><p><br>On Mon, May 2, 2016 at 6:26 PM, David Sweeris via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On May 2, 2016, at 5:58 PM, Chris Lattner via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On May 2, 2016, at 1:56 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;   How does one distinguish between calls to a static prefix operator and a<br>&gt;   static postfix operator with the same name?<br>&gt;<br>&gt; Ah, that&#39;s a tricky one that I don&#39;t have an immediate answer to, so I&#39;m<br>&gt; definitely open to creative thoughts here.<br>&gt;<br>&gt;<br>&gt; One possibility: just use “qualified operator” notation.<br>&gt;<br>&gt;   lhs T.+= rhs<br>&gt;<br>&gt;   T.++x<br>&gt;   x T.++<br>&gt;<br>&gt;<br>&gt; I’m not sure if this is exactly right, but it seems close.  I think that<br>&gt; something like this is probably the best way to go, since it composes<br>&gt; properly in arbitrary expressions.  It does have a surface level weirdness<br>&gt; to it, but it also &quot;makes sense” in terms of how operators work.<br>&gt;<br>&gt; Yeah… Maybe with parens?<br>&gt;<br>&gt; T.++(x)<br>&gt; (x)T.++<br>&gt;<br>&gt; Or is that worse?<br>&gt;<br>&gt; - Dave Sweeris<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/9c12d015/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Proposal] Improving operator requirements in protocols</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May  2, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On May 2, 2016, at 4:59 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hmm, a thought going in a slightly different direction: if these static functions were called like any other function, there might not be a need for having special rules for parameter labels, which can then be freed to denote prefix and postfix operators. In other words, we could have:<br>&gt; <br>&gt; * for infix operators, no labels, like so: `static func + (_ lhs: T, _ rhs: T)`, used like this: `T.+(1, 2)`<br>&gt; * for prefix and postfix operators, a label, like so: `static func + (prefixing value: T)`, used like this: `T.+(prefixing: 1)`<br></p><p>Using labels for this is pretty nice.  &quot;T.++(prefix: abc)” and “T.++(postfix: abc)” seem like they could work!<br></p><p>-Chris<br></p><p>&gt; <br>&gt; <br>&gt; On Mon, May 2, 2016 at 6:26 PM, David Sweeris via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On May 2, 2016, at 5:58 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On May 2, 2016, at 1:56 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;   How does one distinguish between calls to a static prefix operator and a<br>&gt;&gt;&gt;&gt;   static postfix operator with the same name?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Ah, that&#39;s a tricky one that I don&#39;t have an immediate answer to, so I&#39;m<br>&gt;&gt;&gt;&gt; definitely open to creative thoughts here.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; One possibility: just use “qualified operator” notation.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   lhs T.+= rhs<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   T.++x<br>&gt;&gt;&gt;   x T.++<br>&gt;&gt; <br>&gt;&gt; I’m not sure if this is exactly right, but it seems close.  I think that something like this is probably the best way to go, since it composes properly in arbitrary expressions.  It does have a surface level weirdness to it, but it also &quot;makes sense” in terms of how operators work.  <br>&gt; Yeah… Maybe with parens?<br>&gt; T.++(x)<br>&gt; (x)T.++<br>&gt; Or is that worse?<br>&gt; <br>&gt; - Dave Sweeris<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/b0861dba/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Proposal] Improving operator requirements in protocols</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May  3, 2016 at 10:00:00am</p></header><div class="content"><p>on Mon May 02 2016, Chris Lattner &lt;clattner-AT-apple.com&gt; wrote:<br></p><p>&gt;     On May 2, 2016, at 4:59 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt;     Hmm, a thought going in a slightly different direction: if these static<br>&gt;     functions were called like any other function, there might not be a need for<br>&gt;     having special rules for parameter labels, which can then be freed to denote<br>&gt;     prefix and postfix operators. In other words, we could have:<br>&gt;<br>&gt;     * for infix operators, no labels, like so: `static func + (_ lhs: T, _ rhs:<br>&gt;     T)`, used like this: `T.+(1, 2)`<br>&gt;     * for prefix and postfix operators, a label, like so: `static func +<br>&gt;     (prefixing value: T)`, used like this: `T.+(prefixing: 1)`<br>&gt;<br>&gt; Using labels for this is pretty nice. &quot;T.++(prefix: abc)” and “T.++(postfix:<br>&gt; abc)” seem like they could work!<br></p><p>Doing that feels like it creates a very weird corner of the language<br>rules.  What &quot;fix&quot; are the static operators?  Do they need to be<br>declared as prefix and suffix as well as labeled?  If not, do the label<br>need to match up with a declared fixity of the operator?<br></p><p>&gt;<br>&gt; -Chris<br>&gt;<br>&gt;     On Mon, May 2, 2016 at 6:26 PM, David Sweeris via swift-evolution<br>&gt;     &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;                 On May 2, 2016, at 5:58 PM, Chris Lattner via swift-evolution<br>&gt;             &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;             On May 2, 2016, at 1:56 PM, Dave Abrahams via swift-evolution<br>&gt;             &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;                             How does one distinguish between calls to a static<br>&gt;                     prefix operator and a<br>&gt;                     static postfix operator with the same name?<br>&gt;<br>&gt;                     Ah, that&#39;s a tricky one that I don&#39;t have an immediate<br>&gt;                     answer to, so I&#39;m<br>&gt;                     definitely open to creative thoughts here.<br>&gt;<br>&gt;                 One possibility: just use “qualified operator” notation.<br>&gt;<br>&gt;                 lhs T.+= rhs<br>&gt;<br>&gt;                 T.++x<br>&gt;                 x T.++<br>&gt;<br>&gt;             I’m not sure if this is exactly right, but it seems close. I think<br>&gt;             that something like this is probably the best way to go, since it<br>&gt;             composes properly in arbitrary expressions. It does have a surface<br>&gt;             level weirdness to it, but it also &quot;makes sense” in terms of how<br>&gt;             operators work. <br>&gt;<br>&gt;         Yeah… Maybe with parens?<br>&gt;<br>&gt;             T.++(x)<br>&gt;             (x)T.++<br>&gt;<br>&gt;         Or is that worse?<br>&gt;<br>&gt;         - Dave Sweeris<br>&gt;<br>&gt;         _______________________________________________<br>&gt;         swift-evolution mailing list<br>&gt;         swift-evolution at swift.org<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>[Proposal] Improving operator requirements in protocols</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>May  3, 2016 at 06:00:00pm</p></header><div class="content"><p>On Tue, May 3, 2016 at 10:44 AM Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Mon May 02 2016, Chris Lattner &lt;clattner-AT-apple.com&gt; wrote:<br>&gt;<br>&gt; &gt;     On May 2, 2016, at 4:59 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;     Hmm, a thought going in a slightly different direction: if these<br>&gt; static<br>&gt; &gt;     functions were called like any other function, there might not be a<br>&gt; need for<br>&gt; &gt;     having special rules for parameter labels, which can then be freed<br>&gt; to denote<br>&gt; &gt;     prefix and postfix operators. In other words, we could have:<br>&gt; &gt;<br>&gt; &gt;     * for infix operators, no labels, like so: `static func + (_ lhs: T,<br>&gt; _ rhs:<br>&gt; &gt;     T)`, used like this: `T.+(1, 2)`<br>&gt; &gt;     * for prefix and postfix operators, a label, like so: `static func +<br>&gt; &gt;     (prefixing value: T)`, used like this: `T.+(prefixing: 1)`<br>&gt; &gt;<br>&gt; &gt; Using labels for this is pretty nice. &quot;T.++(prefix: abc)” and<br>&gt; “T.++(postfix:<br>&gt; &gt; abc)” seem like they could work!<br>&gt;<br>&gt; Doing that feels like it creates a very weird corner of the language<br>&gt; rules.  What &quot;fix&quot; are the static operators?  Do they need to be<br>&gt; declared as prefix and suffix as well as labeled?  If not, do the label<br>&gt; need to match up with a declared fixity of the operator?<br></p><p><br>As I started writing this up, I ran into a couple issues:<br></p><p>If prefix/postfix are argument labels, do we still have to use the keyword<br>before the function declaration as well? Seems we would have to, in order<br>to do the correct argument list checking. This looks bad requiring it to be<br>duplicated:<br></p><p>    protocol Foo {<br>        prefix func ++(prefix value: inout Self) -&gt; Self<br>    }<br></p><p>If we leave out the prefix/postfix keyword at the front, then now it&#39;s<br>inconsistent with the way global operators are defined, and that&#39;s not good<br>either.<br></p><p>Fully-qualified operators don&#39;t have this problem, and as Chris pointed out<br>earlier, they do compose nicely, so I&#39;m starting to lean back in that<br>direction again.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160503/f440d099/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Proposal] Improving operator requirements in protocols</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>May  2, 2016 at 07:00:00pm</p></header><div class="content"><p>Yes, I think that’s better.<br></p><p>I’m not sure how I feel about the “ing” at the end of the labels, but conceptually your idea is clearly the way to go, IMHO.<br></p><p>- Dave Sweeris<br></p><p>&gt; On May 2, 2016, at 6:59 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hmm, a thought going in a slightly different direction: if these static functions were called like any other function, there might not be a need for having special rules for parameter labels, which can then be freed to denote prefix and postfix operators. In other words, we could have:<br>&gt; <br>&gt; * for infix operators, no labels, like so: `static func + (_ lhs: T, _ rhs: T)`, used like this: `T.+(1, 2)`<br>&gt; * for prefix and postfix operators, a label, like so: `static func + (prefixing value: T)`, used like this: `T.+(prefixing: 1)`<br>&gt; <br>&gt; <br>&gt; On Mon, May 2, 2016 at 6:26 PM, David Sweeris via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On May 2, 2016, at 5:58 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On May 2, 2016, at 1:56 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;   How does one distinguish between calls to a static prefix operator and a<br>&gt;&gt;&gt;&gt;   static postfix operator with the same name?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Ah, that&#39;s a tricky one that I don&#39;t have an immediate answer to, so I&#39;m<br>&gt;&gt;&gt;&gt; definitely open to creative thoughts here.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; One possibility: just use “qualified operator” notation.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   lhs T.+= rhs<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   T.++x<br>&gt;&gt;&gt;   x T.++<br>&gt;&gt; <br>&gt;&gt; I’m not sure if this is exactly right, but it seems close.  I think that something like this is probably the best way to go, since it composes properly in arbitrary expressions.  It does have a surface level weirdness to it, but it also &quot;makes sense” in terms of how operators work.  <br>&gt; Yeah… Maybe with parens?<br>&gt; T.++(x)<br>&gt; (x)T.++<br>&gt; Or is that worse?<br>&gt; <br>&gt; - Dave Sweeris<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/bedbc92a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>[Proposal] Improving operator requirements in protocols</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>May  3, 2016 at 12:00:00am</p></header><div class="content"><p>I like this suggestion a lot. Using labels has a nice elegance to it and<br>makes the usage very clear. If we drop the -ing like Chris suggests, it<br>also aligns nicely with the same keywords used to define them.<br></p><p>I&#39;m not a parser expert, but this seems like it might be easier to parse<br>than fully-qualified operators. It is visually, at least.<br></p><p>On Mon, May 2, 2016 at 4:59 PM Xiaodi Wu via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hmm, a thought going in a slightly different direction: if these static<br>&gt; functions were called like any other function, there might not be a need<br>&gt; for having special rules for parameter labels, which can then be freed to<br>&gt; denote prefix and postfix operators. In other words, we could have:<br>&gt;<br>&gt; * for infix operators, no labels, like so: `static func + (_ lhs: T, _<br>&gt; rhs: T)`, used like this: `T.+(1, 2)`<br>&gt; * for prefix and postfix operators, a label, like so: `static func +<br>&gt; (prefixing value: T)`, used like this: `T.+(prefixing: 1)`<br>&gt;<br>&gt;<br>&gt; On Mon, May 2, 2016 at 6:26 PM, David Sweeris via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On May 2, 2016, at 5:58 PM, Chris Lattner via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On May 2, 2016, at 1:56 PM, Dave Abrahams via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;   How does one distinguish between calls to a static prefix operator and a<br>&gt;&gt;   static postfix operator with the same name?<br>&gt;&gt;<br>&gt;&gt; Ah, that&#39;s a tricky one that I don&#39;t have an immediate answer to, so I&#39;m<br>&gt;&gt; definitely open to creative thoughts here.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; One possibility: just use “qualified operator” notation.<br>&gt;&gt;<br>&gt;&gt;   lhs T.+= rhs<br>&gt;&gt;<br>&gt;&gt;   T.++x<br>&gt;&gt;   x T.++<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I’m not sure if this is exactly right, but it seems close.  I think that<br>&gt;&gt; something like this is probably the best way to go, since it composes<br>&gt;&gt; properly in arbitrary expressions.  It does have a surface level weirdness<br>&gt;&gt; to it, but it also &quot;makes sense” in terms of how operators work.<br>&gt;&gt;<br>&gt;&gt; Yeah… Maybe with parens?<br>&gt;&gt;<br>&gt;&gt; T.++(x)<br>&gt;&gt; (x)T.++<br>&gt;&gt;<br>&gt;&gt; Or is that worse?<br>&gt;&gt;<br>&gt;&gt; - Dave Sweeris<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160503/f78d4572/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Proposal] Improving operator requirements in protocols</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May  3, 2016 at 10:00:00am</p></header><div class="content"><p>on Mon May 02 2016, David Sweeris &lt;davesweeris-AT-mac.com&gt; wrote:<br></p><p>&gt;     On May 2, 2016, at 5:58 PM, Chris Lattner via swift-evolution<br>&gt;     &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;     On May 2, 2016, at 1:56 PM, Dave Abrahams via swift-evolution<br>&gt;     &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;             How does one distinguish between calls to a static prefix operator<br>&gt;             and a<br>&gt;             static postfix operator with the same name?<br>&gt;<br>&gt;             Ah, that&#39;s a tricky one that I don&#39;t have an immediate answer to, so<br>&gt;             I&#39;m<br>&gt;             definitely open to creative thoughts here.<br>&gt;<br>&gt;         One possibility: just use “qualified operator” notation.<br>&gt;<br>&gt;         lhs T.+= rhs<br>&gt;<br>&gt;         T.++x<br>&gt;         x T.++<br>&gt;<br>&gt;     I’m not sure if this is exactly right, but it seems close. I think that<br>&gt;     something like this is probably the best way to go, since it composes<br>&gt;     properly in arbitrary expressions. It does have a surface level weirdness to<br>&gt;     it, but it also &quot;makes sense” in terms of how operators work. <br>&gt;<br>&gt; Yeah… Maybe with parens?<br>&gt;<br>&gt;     T.++(x)<br>&gt;     (x)T.++<br>&gt;<br>&gt; Or is that worse?<br></p><p>The parens are legal if the other syntax is legal, but I don&#39;t see a reason<br>to require them.<br></p><p>-- <br>Dave<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
