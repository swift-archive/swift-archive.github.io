<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 24, 2016 at 11:00:00am</p></header><div class="content"><p>on Wed Feb 24 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Feb 24, 2016, at 7:13 AM, Janosch Hildebrand via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Erica&#39;s proposal about &quot;Modernizing Attribute Case and Attribute Argument Naming&quot; made me remember this discussion.<br>&gt;&gt; <br>&gt;&gt; I don&#39;t think a proposal was ever submitted? If no one else is<br>&gt;&gt; working on a proposal already I would offer myself up for writing<br>&gt;&gt; this up.<br>&gt;<br>&gt; I don’t recall a real proposal, it would be great for you to drive this.<br></p><p>Yes, please!  I *really* want this change.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>February 24, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On 24 Feb 2016, at 19:27, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Wed Feb 24 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Feb 24, 2016, at 7:13 AM, Janosch Hildebrand via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Erica&#39;s proposal about &quot;Modernizing Attribute Case and Attribute Argument Naming&quot; made me remember this discussion.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t think a proposal was ever submitted? If no one else is<br>&gt;&gt;&gt; working on a proposal already I would offer myself up for writing<br>&gt;&gt;&gt; this up.<br>&gt;&gt; <br>&gt;&gt; I don’t recall a real proposal, it would be great for you to drive this.<br>&gt; <br>&gt; Yes, please!  I *really* want this change.<br></p><p>Same!<br></p><p>The only thing that needs to be considered is what to name the replacement attribute (for methods where the return value isn’t important). I’m thinking @optionalReturn or @ignoreUnusedResult or such.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>February 24, 2016 at 02:00:00pm</p></header><div class="content"><p>@discardableResult?<br></p><p><br>l8r<br>Sean<br></p><p><br>&gt; On Feb 24, 2016, at 2:37 PM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On 24 Feb 2016, at 19:27, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Wed Feb 24 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 24, 2016, at 7:13 AM, Janosch Hildebrand via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Erica&#39;s proposal about &quot;Modernizing Attribute Case and Attribute Argument Naming&quot; made me remember this discussion.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don&#39;t think a proposal was ever submitted? If no one else is<br>&gt;&gt;&gt;&gt; working on a proposal already I would offer myself up for writing<br>&gt;&gt;&gt;&gt; this up.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don’t recall a real proposal, it would be great for you to drive this.<br>&gt;&gt; <br>&gt;&gt; Yes, please!  I *really* want this change.<br>&gt; <br>&gt; Same!<br>&gt; <br>&gt; The only thing that needs to be considered is what to name the replacement attribute (for methods where the return value isn’t important). I’m thinking @optionalReturn or @ignoreUnusedResult or such.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b660eecceda60138f137d353b8289925?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Janosch Hildebrand</string> &lt;jnosh at jnosh.com&gt;<p>February 25, 2016 at 12:00:00am</p></header><div class="content"><p>Thanks for the encouragement everyone! I’ll start drafting over the weekend.<br></p><p>With regard to the inverted attribute, that is definitely open to discussion.<br>Other variants that had been mentioned previously include:<br></p><p>@suppress_unused_result - suggested by Adrian Kashivskyy<br>@allow_unused_result - suggested by Kevin Ballard<br>@ignoreresult - suggested by Brent Royal-Gordon<br></p><p>Also the aforementioned “Modernizing Attribute Case and Attribute Argument Naming” proposal[1] will also play into this discussion as well.<br></p><p>[1] https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160215/010510.html<br></p><p>- Janosch<br></p><p>&gt; On 24 Feb 2016, at 21:37, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On 24 Feb 2016, at 19:27, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Wed Feb 24 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 24, 2016, at 7:13 AM, Janosch Hildebrand via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Erica&#39;s proposal about &quot;Modernizing Attribute Case and Attribute Argument Naming&quot; made me remember this discussion.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don&#39;t think a proposal was ever submitted? If no one else is<br>&gt;&gt;&gt;&gt; working on a proposal already I would offer myself up for writing<br>&gt;&gt;&gt;&gt; this up.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don’t recall a real proposal, it would be great for you to drive this.<br>&gt;&gt; <br>&gt;&gt; Yes, please!  I *really* want this change.<br>&gt; <br>&gt; Same!<br>&gt; <br>&gt; The only thing that needs to be considered is what to name the replacement attribute (for methods where the return value isn’t important). I’m thinking @optionalReturn or @ignoreUnusedResult or such.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160225/cd4c49af/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>February 25, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; On 24 Feb 2016, at 23:44, Janosch Hildebrand &lt;jnosh at jnosh.com&gt; wrote:<br>&gt; <br>&gt; Thanks for the encouragement everyone! I’ll start drafting over the weekend.<br>&gt; <br>&gt; With regard to the inverted attribute, that is definitely open to discussion.<br>&gt; Other variants that had been mentioned previously include:<br>&gt; <br>&gt; @suppress_unused_result - suggested by Adrian Kashivskyy<br>&gt; @allow_unused_result - suggested by Kevin Ballard<br>&gt; @ignoreresult - suggested by Brent Royal-Gordon<br>&gt; <br>&gt; Also the aforementioned “Modernizing Attribute Case and Attribute Argument Naming” proposal[1] will also play into this discussion as well.<br>&gt; <br>&gt; [1] https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160215/010510.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160215/010510.html&gt;<br>&gt; <br>&gt; - Janosch<br></p><p>While I like the brevity, I don’t think @ignoreresult is clear enough on what it does, @optional_result (or ideally @optionalResult if camel-case for attributes is accepted) is clearer I think if we want a shortened two-word form. Or there’s Sean’s @discardable_result alternative which is even clearer.<br></p><p>Otherwise @allow_unused_result is the best of the three word options I think; @suppress_unused_result is a bit unclear as what you’re actually suppressing is the compiler warning, as in most cases a result will still be generated, it’s just not stored anywhere at the call site.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160225/0632e42e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February 24, 2016 at 05:00:00pm</p></header><div class="content"><p>I&#39;d recommend against snake case. (It&#39;s a thing). Some thoughts:<br></p><p>@SuppressResultUseWarning<br>@SuppressResultUsageWarning<br>@SuppressUnusedResultWarning<br></p><p>@OptionalResultUse (or Usage)<br>@PermitOptionalResultUse (or Usage)<br>@AllowOptionalResultUse (or Usage)<br></p><p>@IgnoreUnusedResult<br>@PermitUnusedResult<br>@AllowUnusedResult<br></p><p>@NoWarnUnusedResult<br>@NoResultWarning<br>@NoResultUseWarning<br>@NoResultUsageWarning<br>@NoWarningUnusedResult<br>@NoWarningForUnusedResult<br>@NoWarningOnUnusedResult<br></p><p>@AllowProceduralCall<br>@EnableProceduralCall<br>@PermitProceduralCall<br></p><p>-- E<br></p><p>&gt; On Feb 24, 2016, at 5:08 PM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On 24 Feb 2016, at 23:44, Janosch Hildebrand &lt;jnosh at jnosh.com &lt;mailto:jnosh at jnosh.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Thanks for the encouragement everyone! I’ll start drafting over the weekend.<br>&gt;&gt; <br>&gt;&gt; With regard to the inverted attribute, that is definitely open to discussion.<br>&gt;&gt; Other variants that had been mentioned previously include:<br>&gt;&gt; <br>&gt;&gt; @suppress_unused_result - suggested by Adrian Kashivskyy<br>&gt;&gt; @allow_unused_result - suggested by Kevin Ballard<br>&gt;&gt; @ignoreresult - suggested by Brent Royal-Gordon<br>&gt;&gt; <br>&gt;&gt; Also the aforementioned “Modernizing Attribute Case and Attribute Argument Naming” proposal[1] will also play into this discussion as well.<br>&gt;&gt; <br>&gt;&gt; [1] https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160215/010510.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160215/010510.html&gt;<br>&gt;&gt; <br>&gt;&gt; - Janosch<br>&gt; <br>&gt; While I like the brevity, I don’t think @ignoreresult is clear enough on what it does, @optional_result (or ideally @optionalResult if camel-case for attributes is accepted) is clearer I think if we want a shortened two-word form. Or there’s Sean’s @discardable_result alternative which is even clearer.<br>&gt; <br>&gt; Otherwise @allow_unused_result is the best of the three word options I think; @suppress_unused_result is a bit unclear as what you’re actually suppressing is the compiler warning, as in most cases a result will still be generated, it’s just not stored anywhere at the call site.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160224/e8f21759/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e9b374b9587bd8da1a1a027c8716ac0d?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Rod Brown</string> &lt;rodney.brown6 at icloud.com&gt;<p>February 25, 2016 at 11:00:00am</p></header><div class="content"><p>I’m on board with @AllowUnusedResult or @IgnoreUnusedResult.<br></p><p>I think allow looks nicer and works as an attribute, but I suspect though that this may have an implied suggestion that without it, this is disallowed (rather than just a warning).<br></p><p>&gt; On 25 Feb 2016, at 11:22 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;d recommend against snake case. (It&#39;s a thing). Some thoughts:<br>&gt; <br>&gt; @SuppressResultUseWarning<br>&gt; @SuppressResultUsageWarning<br>&gt; @SuppressUnusedResultWarning<br>&gt; <br>&gt; @OptionalResultUse (or Usage)<br>&gt; @PermitOptionalResultUse (or Usage)<br>&gt; @AllowOptionalResultUse (or Usage)<br>&gt; <br>&gt; @IgnoreUnusedResult<br>&gt; @PermitUnusedResult<br>&gt; @AllowUnusedResult<br>&gt; <br>&gt; @NoWarnUnusedResult<br>&gt; @NoResultWarning<br>&gt; @NoResultUseWarning<br>&gt; @NoResultUsageWarning<br>&gt; @NoWarningUnusedResult<br>&gt; @NoWarningForUnusedResult<br>&gt; @NoWarningOnUnusedResult<br>&gt; <br>&gt; @AllowProceduralCall<br>&gt; @EnableProceduralCall<br>&gt; @PermitProceduralCall<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt;&gt; On Feb 24, 2016, at 5:08 PM, Haravikk via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 24 Feb 2016, at 23:44, Janosch Hildebrand &lt;jnosh at jnosh.com &lt;mailto:jnosh at jnosh.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks for the encouragement everyone! I’ll start drafting over the weekend.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; With regard to the inverted attribute, that is definitely open to discussion.<br>&gt;&gt;&gt; Other variants that had been mentioned previously include:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; @suppress_unused_result - suggested by Adrian Kashivskyy<br>&gt;&gt;&gt; @allow_unused_result - suggested by Kevin Ballard<br>&gt;&gt;&gt; @ignoreresult - suggested by Brent Royal-Gordon<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Also the aforementioned “Modernizing Attribute Case and Attribute Argument Naming” proposal[1] will also play into this discussion as well.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; [1] https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160215/010510.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160215/010510.html&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Janosch<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160225/f251cb82/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February 24, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; @optional_result (or ideally @optionalResult if camel-case for attributes is accepted) is clearer I think if we want a shortened two-word form.<br></p><p>I don&#39;t like &quot;optional&quot; here because it falsely implies a connection with the Optional type.<br></p><p>I do think, however, that this needs to be something very short—one or two words, not three or four. One way to trim words would be to attach the attribute to the return type; the position would imply that the keyword related to the return type, so the word &quot;result&quot; would be unnecessary:<br></p><p>	@ignoreUnusedResult mutating func removeLast() -&gt; Element<br>	mutating func removeLast() -&gt; @ignoreUnused Element<br></p><p>That might be a little strange, though—we don&#39;t currently have any attributes in that position.<br></p><p>Another way to make this shorter is to try to find an adjective which implies *why* we can ignore the result—that is, because it isn&#39;t important. The problem is that most such adjectives are either compound words:<br></p><p>	@unimportantResult mutating func removeLast() -&gt; Element<br>	mutating func removeLast() -&gt; @unimportant Element<br></p><p>	@discardableResult mutating func removeLast() -&gt; Element<br>	mutating func removeLast() -&gt; @discardable Element<br></p><p>Or they&#39;re uncommon words people may need to look up:<br></p><p>	@banalResult mutating func removeLast() -&gt; Element<br>	mutating func removeLast() -&gt; @banal Element<br></p><p>Actually, I can think of one word in the latter category that many programmers *do* know:<br></p><p>	@trivialResult mutating func removeLast() -&gt; Element<br>	mutating func removeLast() -&gt; @trivial Element<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February 24, 2016 at 08:00:00pm</p></header><div class="content"><p>I&#39;d rather have something clear than short.<br></p><p>Some short ones that haven&#39;t been mentioned:<br>@Statement has a problem because the result can be used, it&#39;s just not mandated. <br>@Statementable just makes no English sense at all (similarly @Procedurable) but kind of communicates the idea<br>@ResultDiscardable: not a fan<br>@StatementAllowed or @AllowStatement really doesn&#39;t make a ton of sense, but it&#39;s short and kind of gets the point across.<br>@SideEffects also short, also kind hints at stuff, also could be misleading, and the same for @HasSideEffects.<br>My favorite remains @SuppressUnusedResultWarning, which isn&#39;t short but pretty damn clear.<br> <br></p><p>&gt; On Feb 24, 2016, at 7:32 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; @optional_result (or ideally @optionalResult if camel-case for attributes is accepted) is clearer I think if we want a shortened two-word form.<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160224/41d874b7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0089229ece6e648767cff4dc6c6d38ab?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Charles Kissinger</string> &lt;crk at akkyra.com&gt;<p>February 24, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Feb 24, 2016, at 7:12 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;d rather have something clear than short.<br>&gt; <br>&gt; Some short ones that haven&#39;t been mentioned:<br>&gt; @Statement has a problem because the result can be used, it&#39;s just not mandated. <br>&gt; @Statementable just makes no English sense at all (similarly @Procedurable) but kind of communicates the idea<br>&gt; @ResultDiscardable: not a fan<br>&gt; @StatementAllowed or @AllowStatement really doesn&#39;t make a ton of sense, but it&#39;s short and kind of gets the point across.<br>&gt; @SideEffects also short, also kind hints at stuff, also could be misleading, and the same for @HasSideEffects.<br>&gt; My favorite remains @SuppressUnusedResultWarning, which isn&#39;t short but pretty damn clear.<br></p><p>+1. This would be my choice as well. It is the warning that is affected, not the result, so “Warning” or “NoWarn” should be in the name.<br></p><p>—CK<br></p><p>&gt;  <br>&gt; <br>&gt;&gt; On Feb 24, 2016, at 7:32 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; @optional_result (or ideally @optionalResult if camel-case for attributes is accepted) is clearer I think if we want a shortened two-word form.<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160224/2a584f12/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>February 24, 2016 at 09:00:00pm</p></header><div class="content"><p>These lack conciseness. What about the already supported: <br></p><p>let _ = ingoreResult()<br></p><p>Where ignoreResult is the function. Or maybe something even more brief? What was wrong with (void)? or <br></p><p>	(_)ingoreResult()<br></p><p>- Paul <br></p><p><br>&gt; On Feb 24, 2016, at 8:42 PM, Charles Kissinger via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 24, 2016, at 7:12 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;d rather have something clear than short.<br>&gt;&gt; <br>&gt;&gt; Some short ones that haven&#39;t been mentioned:<br>&gt;&gt; @Statement has a problem because the result can be used, it&#39;s just not mandated. <br>&gt;&gt; @Statementable just makes no English sense at all (similarly @Procedurable) but kind of communicates the idea<br>&gt;&gt; @ResultDiscardable: not a fan<br>&gt;&gt; @StatementAllowed or @AllowStatement really doesn&#39;t make a ton of sense, but it&#39;s short and kind of gets the point across.<br>&gt;&gt; @SideEffects also short, also kind hints at stuff, also could be misleading, and the same for @HasSideEffects.<br>&gt;&gt; My favorite remains @SuppressUnusedResultWarning, which isn&#39;t short but pretty damn clear.<br>&gt; <br>&gt; +1. This would be my choice as well. It is the warning that is affected, not the result, so “Warning” or “NoWarn” should be in the name.<br>&gt; <br>&gt; —CK<br>&gt; <br>&gt;&gt;  <br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 24, 2016, at 7:32 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; @optional_result (or ideally @optionalResult if camel-case for attributes is accepted) is clearer I think if we want a shortened two-word form.<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160224/5caa1d18/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0089229ece6e648767cff4dc6c6d38ab?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Charles Kissinger</string> &lt;crk at akkyra.com&gt;<p>February 24, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Feb 24, 2016, at 9:19 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br>&gt; <br>&gt; These lack conciseness. What about the already supported: <br>&gt; <br>&gt; let _ = ingoreResult()<br></p><p>I would be perfectly happy with requiring “let _ = “ myself. My recollection of the previous discussion is that most people didn’t want that to be necessary and preferred a suppressible warning.<br></p><p>Thinking about the attribute name some more, I might prefer:<br></p><p>@NoUnusedResultWarning<br></p><p>which is a variation of one of Erica’s suggestions. It is at least slightly shorter than @SuppressUnusedResultWarning<br></p><p>—CK<br></p><p>&gt; <br>&gt; Where ignoreResult is the function. Or maybe something even more brief? What was wrong with (void)? or <br>&gt; <br>&gt; 	(_)ingoreResult()<br>&gt; <br>&gt; - Paul <br>&gt; <br>&gt; <br>&gt;&gt; On Feb 24, 2016, at 8:42 PM, Charles Kissinger via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 24, 2016, at 7:12 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;d rather have something clear than short.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Some short ones that haven&#39;t been mentioned:<br>&gt;&gt;&gt; @Statement has a problem because the result can be used, it&#39;s just not mandated. <br>&gt;&gt;&gt; @Statementable just makes no English sense at all (similarly @Procedurable) but kind of communicates the idea<br>&gt;&gt;&gt; @ResultDiscardable: not a fan<br>&gt;&gt;&gt; @StatementAllowed or @AllowStatement really doesn&#39;t make a ton of sense, but it&#39;s short and kind of gets the point across.<br>&gt;&gt;&gt; @SideEffects also short, also kind hints at stuff, also could be misleading, and the same for @HasSideEffects.<br>&gt;&gt;&gt; My favorite remains @SuppressUnusedResultWarning, which isn&#39;t short but pretty damn clear.<br>&gt;&gt; <br>&gt;&gt; +1. This would be my choice as well. It is the warning that is affected, not the result, so “Warning” or “NoWarn” should be in the name.<br>&gt;&gt; <br>&gt;&gt; —CK<br>&gt;&gt; <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 24, 2016, at 7:32 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; @optional_result (or ideally @optionalResult if camel-case for attributes is accepted) is clearer I think if we want a shortened two-word form.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160224/fdd7b8d3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>February 24, 2016 at 09:00:00pm</p></header><div class="content"><p>Since we don’t care about the result?<br></p><p>_ = ignoreResult()<br></p><p>It does not matter whether it is mutable or not so dropping the keyword is ok here. This is really obvious what it does and is concise. <br> <br></p><p>&gt; On Feb 24, 2016, at 9:54 PM, Charles Kissinger &lt;crk at akkyra.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 24, 2016, at 9:19 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;mailto:possen at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; These lack conciseness. What about the already supported: <br>&gt;&gt; <br>&gt;&gt; let _ = ingoreResult()<br>&gt; <br>&gt; I would be perfectly happy with requiring “let _ = “ myself. My recollection of the previous discussion is that most people didn’t want that to be necessary and preferred a suppressible warning.<br>&gt; <br>&gt; Thinking about the attribute name some more, I might prefer:<br>&gt; <br>&gt; @NoUnusedResultWarning<br>&gt; <br>&gt; which is a variation of one of Erica’s suggestions. It is at least slightly shorter than @SuppressUnusedResultWarning<br>&gt; <br>&gt; —CK<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Where ignoreResult is the function. Or maybe something even more brief? What was wrong with (void)? or <br>&gt;&gt; <br>&gt;&gt; 	(_)ingoreResult()<br>&gt;&gt; <br>&gt;&gt; - Paul <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 24, 2016, at 8:42 PM, Charles Kissinger via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 24, 2016, at 7:12 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;d rather have something clear than short.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Some short ones that haven&#39;t been mentioned:<br>&gt;&gt;&gt;&gt; @Statement has a problem because the result can be used, it&#39;s just not mandated. <br>&gt;&gt;&gt;&gt; @Statementable just makes no English sense at all (similarly @Procedurable) but kind of communicates the idea<br>&gt;&gt;&gt;&gt; @ResultDiscardable: not a fan<br>&gt;&gt;&gt;&gt; @StatementAllowed or @AllowStatement really doesn&#39;t make a ton of sense, but it&#39;s short and kind of gets the point across.<br>&gt;&gt;&gt;&gt; @SideEffects also short, also kind hints at stuff, also could be misleading, and the same for @HasSideEffects.<br>&gt;&gt;&gt;&gt; My favorite remains @SuppressUnusedResultWarning, which isn&#39;t short but pretty damn clear.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; +1. This would be my choice as well. It is the warning that is affected, not the result, so “Warning” or “NoWarn” should be in the name.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; —CK<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Feb 24, 2016, at 7:32 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; @optional_result (or ideally @optionalResult if camel-case for attributes is accepted) is clearer I think if we want a shortened two-word form.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160224/29e3e364/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>February 24, 2016 at 10:00:00pm</p></header><div class="content"><p>Also this is not without precedent and feels more swift like to me.  In switch cases you can include or drop the let or the var. <br></p><p>for example;<br></p><p>switch coord {<br>case (let x, _): print(x)<br>case (_, let y); print(y)<br>case let (x, y): print(x,y)<br>}<br></p><p>underscore does not need the keyword let here.<br></p><p><br>&gt; On Feb 24, 2016, at 9:59 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br>&gt; <br>&gt; Since we don’t care about the result?<br>&gt; <br>&gt; _ = ignoreResult()<br>&gt; <br>&gt; It does not matter whether it is mutable or not so dropping the keyword is ok here. This is really obvious what it does and is concise. <br>&gt;  <br>&gt; <br>&gt;&gt; On Feb 24, 2016, at 9:54 PM, Charles Kissinger &lt;crk at akkyra.com &lt;mailto:crk at akkyra.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 24, 2016, at 9:19 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;mailto:possen at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; These lack conciseness. What about the already supported: <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let _ = ingoreResult()<br>&gt;&gt; <br>&gt;&gt; I would be perfectly happy with requiring “let _ = “ myself. My recollection of the previous discussion is that most people didn’t want that to be necessary and preferred a suppressible warning.<br>&gt;&gt; <br>&gt;&gt; Thinking about the attribute name some more, I might prefer:<br>&gt;&gt; <br>&gt;&gt; @NoUnusedResultWarning<br>&gt;&gt; <br>&gt;&gt; which is a variation of one of Erica’s suggestions. It is at least slightly shorter than @SuppressUnusedResultWarning<br>&gt;&gt; <br>&gt;&gt; —CK<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Where ignoreResult is the function. Or maybe something even more brief? What was wrong with (void)? or <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	(_)ingoreResult()<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Paul <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 24, 2016, at 8:42 PM, Charles Kissinger via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Feb 24, 2016, at 7:12 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I&#39;d rather have something clear than short.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Some short ones that haven&#39;t been mentioned:<br>&gt;&gt;&gt;&gt;&gt; @Statement has a problem because the result can be used, it&#39;s just not mandated. <br>&gt;&gt;&gt;&gt;&gt; @Statementable just makes no English sense at all (similarly @Procedurable) but kind of communicates the idea<br>&gt;&gt;&gt;&gt;&gt; @ResultDiscardable: not a fan<br>&gt;&gt;&gt;&gt;&gt; @StatementAllowed or @AllowStatement really doesn&#39;t make a ton of sense, but it&#39;s short and kind of gets the point across.<br>&gt;&gt;&gt;&gt;&gt; @SideEffects also short, also kind hints at stuff, also could be misleading, and the same for @HasSideEffects.<br>&gt;&gt;&gt;&gt;&gt; My favorite remains @SuppressUnusedResultWarning, which isn&#39;t short but pretty damn clear.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; +1. This would be my choice as well. It is the warning that is affected, not the result, so “Warning” or “NoWarn” should be in the name.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; —CK<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Feb 24, 2016, at 7:32 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; @optional_result (or ideally @optionalResult if camel-case for attributes is accepted) is clearer I think if we want a shortened two-word form.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160224/d046587b/attachment-0001.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>February 25, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; On 25 Feb 2016, at 05:19, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; These lack conciseness. What about the already supported: <br>&gt; <br>&gt; let _ = ingoreResult()<br></p><p>This could work until we gain some other, general purpose, method to suppress warnings, though it isn’t pretty IMO. For example, if a class’ methods are designed to be chain able then the result isn’t necessary (it’s just self), so in things like loops you could end up having to use let _ an awful lot, like so:<br></p><p>	class Chainable {<br>		var value = 0<br>		func add(add:Int) {<br>			value += add<br>			return self<br>		}<br>	}<br></p><p>	let chainable = Chainable()<br>	for _ in 0 ..&lt; 10 {<br>		if getSomeCondition() {<br>			let _ = chainable.add(5)<br>		} else {<br>			let _ = chainable.add(2)<br>		}<br>	}<br></p><p>Stupid example, but imagine if there were a few other operations, perhaps handled by other conditionals, then suddenly you end up with a lot of these let _ statements, which is why being able to suppress the warnings in all cases is still desirable.<br></p><p>On the topic of verbosity in the attribute, I don’t think there’s any need to go to four words; the current attribute is @warn_unused_result, and I think that @ignore_unused_result works a direct opposite (i.e- the result being unused is still strange to the compiler, but it chooses not to issue a warning about it). I’m only using snake case because that’s what the current value has, obviously we’ll adjust for whatever the final attribute naming convention turns out to be.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160225/4b248389/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2050a4c85c8fc9b9042ba39f0fe796ad?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Mathieu Godart</string> &lt;m at godart.co&gt;<p>February 25, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; Le 25 févr. 2016 à 08:50, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; <br>&gt;&gt; On 25 Feb 2016, at 05:19, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; These lack conciseness. What about the already supported: <br>&gt;&gt; <br>&gt;&gt; let _ = ingoreResult()<br>&gt; <br>&gt; This could work until we gain some other, general purpose, method to suppress warnings, though it isn’t pretty IMO. For example, if a class’ methods are designed to be chain able then the result isn’t necessary (it’s just self), so in things like loops you could end up having to use let _ an awful lot, like so:<br>&gt; <br>&gt; 	class Chainable {<br>&gt; 		var value = 0<br>&gt; 		func add(add:Int) {<br>&gt; 			value += add<br>&gt; 			return self<br>&gt; 		}<br>&gt; 	}<br>&gt; <br>&gt; 	let chainable = Chainable()<br>&gt; 	for _ in 0 ..&lt; 10 {<br>&gt; 		if getSomeCondition() {<br>&gt; 			let _ = chainable.add(5)<br>&gt; 		} else {<br>&gt; 			let _ = chainable.add(2)<br>&gt; 		}<br>&gt; 	}<br>&gt; <br>&gt; Stupid example, but imagine if there were a few other operations, perhaps handled by other conditionals, then suddenly you end up with a lot of these let _ statements, which is why being able to suppress the warnings in all cases is still desirable.<br></p><p>You convince me here. The two ways to ensure we do this deliberately seem useful and not conflicting. <br></p><p>&gt; On the topic of verbosity in the attribute, I don’t think there’s any need to go to four words; the current attribute is @warn_unused_result, and I think that @ignore_unused_result works a direct opposite (i.e- the result being unused is still strange to the compiler, but it chooses not to issue a warning about it). I’m only using snake case because that’s what the current value has, obviously we’ll adjust for whatever the final attribute naming convention turns out to be.<br></p><p>+1 Coherent, expressive and short!<br></p><p>Mathieu<br></p><p><br></p><p>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160225/c4d83bda/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>February 25, 2016 at 08:00:00am</p></header><div class="content"><p>Without the “let” is not objectionable, using your example:<br></p><p>	let chainable = Chainable()<br>	for _ in 0 ..&lt; 10 {<br>		if getSomeCondition() {<br>		   	_ = chainable.add(5)<br>		} else {<br>		        _ = chainable.add(2)<br>		}<br>	}<br></p><p>Let is unnecessary since we are just throwing away the result we don’t need the keyword. It is optional.  I don’t think @ignoreUnusedResult or the other options looks very nice either. <br></p><p><br></p><p>&gt; On Feb 24, 2016, at 11:50 PM, Haravikk &lt;swift-evolution at haravikk.me&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 25 Feb 2016, at 05:19, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; These lack conciseness. What about the already supported: <br>&gt;&gt; <br>&gt;&gt; let _ = ingoreResult()<br>&gt; <br>&gt; This could work until we gain some other, general purpose, method to suppress warnings, though it isn’t pretty IMO. For example, if a class’ methods are designed to be chain able then the result isn’t necessary (it’s just self), so in things like loops you could end up having to use let _ an awful lot, like so:<br>&gt; <br>&gt; 	class Chainable {<br>&gt; 		var value = 0<br>&gt; 		func add(add:Int) {<br>&gt; 			value += add<br>&gt; 			return self<br>&gt; 		}<br>&gt; 	}<br>&gt; <br>&gt; 	let chainable = Chainable()<br>&gt; 	for _ in 0 ..&lt; 10 {<br>&gt; 		if getSomeCondition() {<br>&gt; 			let _ = chainable.add(5)<br>&gt; 		} else {<br>&gt; 			let _ = chainable.add(2)<br>&gt; 		}<br>&gt; 	}<br>&gt; <br>&gt; Stupid example, but imagine if there were a few other operations, perhaps handled by other conditionals, then suddenly you end up with a lot of these let _ statements, which is why being able to suppress the warnings in all cases is still desirable.<br>&gt; <br>&gt; On the topic of verbosity in the attribute, I don’t think there’s any need to go to four words; the current attribute is @warn_unused_result, and I think that @ignore_unused_result works a direct opposite (i.e- the result being unused is still strange to the compiler, but it chooses not to issue a warning about it). I’m only using snake case because that’s what the current value has, obviously we’ll adjust for whatever the final attribute naming convention turns out to be.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160225/710a692e/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 25, 2016 at 07:00:00am</p></header><div class="content"><p>on Wed Feb 24 2016, Haravikk &lt;swift-evolution-AT-haravikk.me&gt; wrote:<br></p><p>&gt;&gt; On 24 Feb 2016, at 23:44, Janosch Hildebrand &lt;jnosh at jnosh.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Thanks for the encouragement everyone! I’ll start drafting over the weekend.<br>&gt;&gt; <br>&gt;&gt; With regard to the inverted attribute, that is definitely open to discussion.<br>&gt;<br>&gt;&gt; Other variants that had been mentioned previously include:<br>&gt;&gt; <br>&gt;&gt; @suppress_unused_result - suggested by Adrian Kashivskyy<br>&gt;&gt; @allow_unused_result - suggested by Kevin Ballard<br>&gt;&gt; @ignoreresult - suggested by Brent Royal-Gordon<br>&gt;&gt; <br>&gt;&gt; Also the aforementioned “Modernizing Attribute Case and Attribute<br>&gt;&gt; Argument Naming” proposal[1] will also play into this discussion as<br>&gt;&gt; well.<br>&gt;&gt; <br>&gt;&gt; [1]<br>&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160215/010510.html<br>&gt;&gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160215/010510.html&gt;<br>&gt;&gt; <br>&gt;&gt; - Janosch<br>&gt;<br>&gt; While I like the brevity, I don’t think @ignoreresult is clear enough<br>&gt; on what it does, @optional_result (or ideally @optionalResult if<br>&gt; camel-case for attributes is accepted) is clearer I think if we want a<br>&gt; shortened two-word form. Or there’s Sean’s @discardable_result<br>&gt; alternative which is even clearer.<br>&gt;<br>&gt; Otherwise @allow_unused_result is the best of the three word options I<br>&gt; think; @suppress_unused_result is a bit unclear as what you’re<br>&gt; actually suppressing is the compiler warning, as in most cases a<br>&gt; result will still be generated, it’s just not stored anywhere at the<br>&gt; call site.<br></p><p>@discardable_result is nice.  I kinda wish it were an annotation on the result<br>type; then it could just be @discardable.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9ae1f2ed10d2ef77cce06bbb5a2dcf7e?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Alex Hoppen</string> &lt;alex at ateamer.de&gt;<p>February 25, 2016 at 05:00:00pm</p></header><div class="content"><p>+1 for the proposal and @discardableResult<br></p><p>– Alex<br></p><p>&gt; On 25 Feb 2016, at 16:49, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Wed Feb 24 2016, Haravikk &lt;swift-evolution-AT-haravikk.me &lt;http://swift-evolution-at-haravikk.me/&gt;&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On 24 Feb 2016, at 23:44, Janosch Hildebrand &lt;jnosh at jnosh.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks for the encouragement everyone! I’ll start drafting over the weekend.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; With regard to the inverted attribute, that is definitely open to discussion.<br>&gt;&gt; <br>&gt;&gt;&gt; Other variants that had been mentioned previously include:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; @suppress_unused_result - suggested by Adrian Kashivskyy<br>&gt;&gt;&gt; @allow_unused_result - suggested by Kevin Ballard<br>&gt;&gt;&gt; @ignoreresult - suggested by Brent Royal-Gordon<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Also the aforementioned “Modernizing Attribute Case and Attribute<br>&gt;&gt;&gt; Argument Naming” proposal[1] will also play into this discussion as<br>&gt;&gt;&gt; well.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; [1]<br>&gt;&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160215/010510.html<br>&gt;&gt;&gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160215/010510.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160215/010510.html&gt;&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Janosch<br>&gt;&gt; <br>&gt;&gt; While I like the brevity, I don’t think @ignoreresult is clear enough<br>&gt;&gt; on what it does, @optional_result (or ideally @optionalResult if<br>&gt;&gt; camel-case for attributes is accepted) is clearer I think if we want a<br>&gt;&gt; shortened two-word form. Or there’s Sean’s @discardable_result<br>&gt;&gt; alternative which is even clearer.<br>&gt;&gt; <br>&gt;&gt; Otherwise @allow_unused_result is the best of the three word options I<br>&gt;&gt; think; @suppress_unused_result is a bit unclear as what you’re<br>&gt;&gt; actually suppressing is the compiler warning, as in most cases a<br>&gt;&gt; result will still be generated, it’s just not stored anywhere at the<br>&gt;&gt; call site.<br>&gt; <br>&gt; @discardable_result is nice.  I kinda wish it were an annotation on the result<br>&gt; type; then it could just be @discardable.<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160225/76d017d5/attachment-0001.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>February 25, 2016 at 03:00:00pm</p></header><div class="content"><p>On Feb 25, 2016, at 7:49 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160215/010510.html<br>&gt;&gt;&gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160215/010510.html&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Janosch<br>&gt;&gt; <br>&gt;&gt; While I like the brevity, I don’t think @ignoreresult is clear enough<br>&gt;&gt; on what it does, @optional_result (or ideally @optionalResult if<br>&gt;&gt; camel-case for attributes is accepted) is clearer I think if we want a<br>&gt;&gt; shortened two-word form. Or there’s Sean’s @discardable_result<br>&gt;&gt; alternative which is even clearer.<br>&gt;&gt; <br>&gt;&gt; Otherwise @allow_unused_result is the best of the three word options I<br>&gt;&gt; think; @suppress_unused_result is a bit unclear as what you’re<br>&gt;&gt; actually suppressing is the compiler warning, as in most cases a<br>&gt;&gt; result will still be generated, it’s just not stored anywhere at the<br>&gt;&gt; call site.<br>&gt; <br>&gt; @discardable_result is nice.  I kinda wish it were an annotation on the result<br>&gt; type; then it could just be @discardable.<br></p><p>+1 for @discardable on the result.<br></p><p>-Chris<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 25, 2016 at 07:00:00am</p></header><div class="content"><p>on Wed Feb 24 2016, Janosch Hildebrand &lt;jnosh-AT-jnosh.com&gt; wrote:<br></p><p>&gt; Thanks for the encouragement everyone! I’ll start drafting over the weekend.<br>&gt;<br>&gt; With regard to the inverted attribute, that is definitely open to discussion.<br>&gt; Other variants that had been mentioned previously include:<br>&gt;<br>&gt; @suppress_unused_result - suggested by Adrian Kashivskyy<br>&gt; @allow_unused_result - suggested by Kevin Ballard<br>&gt; @ignoreresult - suggested by Brent Royal-Gordon<br></p><p>@no_warn_unused_result would seem to be the least confusable spelling.<br>@incidental_result would be semantically valid and shorter, but I can&#39;t<br>say I like it.<br></p><p>&gt; Also the aforementioned “Modernizing Attribute Case and Attribute<br>&gt; Argument Naming” proposal[1] will also play into this discussion as<br>&gt; well.<br>&gt;<br>&gt; [1] https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160215/010510.html<br>&gt;<br>&gt; - Janosch<br>&gt;<br>&gt;&gt; On 24 Feb 2016, at 21:37, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 24 Feb 2016, at 19:27, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Wed Feb 24 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Feb 24, 2016, at 7:13 AM, Janosch Hildebrand via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Erica&#39;s proposal about &quot;Modernizing Attribute Case and Attribute<br>&gt;&gt;&gt;&gt;&gt; Argument Naming&quot; made me remember this discussion.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I don&#39;t think a proposal was ever submitted? If no one else is<br>&gt;&gt;&gt;&gt;&gt; working on a proposal already I would offer myself up for writing<br>&gt;&gt;&gt;&gt;&gt; this up.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don’t recall a real proposal, it would be great for you to drive this.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yes, please!  I *really* want this change.<br>&gt;&gt; <br>&gt;&gt; Same!<br>&gt;&gt; <br>&gt;&gt; The only thing that needs to be considered is what to name the<br>&gt;&gt; replacement attribute (for methods where the return value isn’t<br>&gt;&gt; important). I’m thinking @optionalReturn or @ignoreUnusedResult or<br>&gt;&gt; such.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/063adc064d3d040fcbfba0265019aecd?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>James Hillhouse</string> &lt;jdhillhouse4 at icloud.com&gt;<p>February 25, 2016 at 11:00:00am</p></header><div class="content"><p>+1 for the proposal<br></p><p>&gt; On Feb 25, 2016, at 9:46 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Wed Feb 24 2016, Janosch Hildebrand &lt;jnosh-AT-jnosh.com &lt;http://jnosh-at-jnosh.com/&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Thanks for the encouragement everyone! I’ll start drafting over the weekend.<br>&gt;&gt; <br>&gt;&gt; With regard to the inverted attribute, that is definitely open to discussion.<br>&gt;&gt; Other variants that had been mentioned previously include:<br>&gt;&gt; <br>&gt;&gt; @suppress_unused_result - suggested by Adrian Kashivskyy<br>&gt;&gt; @allow_unused_result - suggested by Kevin Ballard<br>&gt;&gt; @ignoreresult - suggested by Brent Royal-Gordon<br>&gt; <br>&gt; @no_warn_unused_result would seem to be the least confusable spelling.<br>&gt; @incidental_result would be semantically valid and shorter, but I can&#39;t<br>&gt; say I like it.<br>&gt; <br>&gt;&gt; Also the aforementioned “Modernizing Attribute Case and Attribute<br>&gt;&gt; Argument Naming” proposal[1] will also play into this discussion as<br>&gt;&gt; well.<br>&gt;&gt; <br>&gt;&gt; [1] https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160215/010510.html<br>&gt;&gt; <br>&gt;&gt; - Janosch<br>&gt;&gt; <br>&gt;&gt;&gt; On 24 Feb 2016, at 21:37, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 24 Feb 2016, at 19:27, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; on Wed Feb 24 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Feb 24, 2016, at 7:13 AM, Janosch Hildebrand via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Erica&#39;s proposal about &quot;Modernizing Attribute Case and Attribute<br>&gt;&gt;&gt;&gt;&gt;&gt; Argument Naming&quot; made me remember this discussion.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t think a proposal was ever submitted? If no one else is<br>&gt;&gt;&gt;&gt;&gt;&gt; working on a proposal already I would offer myself up for writing<br>&gt;&gt;&gt;&gt;&gt;&gt; this up.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I don’t recall a real proposal, it would be great for you to drive this.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Yes, please!  I *really* want this change.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Same!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The only thing that needs to be considered is what to name the<br>&gt;&gt;&gt; replacement attribute (for methods where the return value isn’t<br>&gt;&gt;&gt; important). I’m thinking @optionalReturn or @ignoreUnusedResult or<br>&gt;&gt;&gt; such.<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160225/35f42d38/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d0659d0725d0f35fa2b7d2cd23631502?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Vanderlei Martinelli</string> &lt;vmartinelli at alecrim.com&gt;<p>February 25, 2016 at 05:00:00pm</p></header><div class="content"><p>+1 for the proposal, but I&#39;d like to use `@supress_unused_result_warning`.<br></p><p>-Van<br></p><p>On Thu, Feb 25, 2016 at 2:46 PM, James Hillhouse via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; +1 for the proposal<br>&gt;<br>&gt; On Feb 25, 2016, at 9:46 AM, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; on Wed Feb 24 2016, Janosch Hildebrand &lt;jnosh-AT-jnosh.com<br>&gt; &lt;http://jnosh-at-jnosh.com/&gt;&gt; wrote:<br>&gt;<br>&gt; Thanks for the encouragement everyone! I’ll start drafting over the<br>&gt; weekend.<br>&gt;<br>&gt; With regard to the inverted attribute, that is definitely open to<br>&gt; discussion.<br>&gt; Other variants that had been mentioned previously include:<br>&gt;<br>&gt; @suppress_unused_result - suggested by Adrian Kashivskyy<br>&gt; @allow_unused_result - suggested by Kevin Ballard<br>&gt; @ignoreresult - suggested by Brent Royal-Gordon<br>&gt;<br>&gt;<br>&gt; @no_warn_unused_result would seem to be the least confusable spelling.<br>&gt; @incidental_result would be semantically valid and shorter, but I can&#39;t<br>&gt; say I like it.<br>&gt;<br>&gt; Also the aforementioned “Modernizing Attribute Case and Attribute<br>&gt; Argument Naming” proposal[1] will also play into this discussion as<br>&gt; well.<br>&gt;<br>&gt; [1]<br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160215/010510.html<br>&gt;<br>&gt; - Janosch<br>&gt;<br>&gt; On 24 Feb 2016, at 21:37, Haravikk via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On 24 Feb 2016, at 19:27, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; on Wed Feb 24 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Feb 24, 2016, at 7:13 AM, Janosch Hildebrand via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Erica&#39;s proposal about &quot;Modernizing Attribute Case and Attribute<br>&gt; Argument Naming&quot; made me remember this discussion.<br>&gt;<br>&gt; I don&#39;t think a proposal was ever submitted? If no one else is<br>&gt; working on a proposal already I would offer myself up for writing<br>&gt; this up.<br>&gt;<br>&gt;<br>&gt; I don’t recall a real proposal, it would be great for you to drive this.<br>&gt;<br>&gt;<br>&gt; Yes, please!  I *really* want this change.<br>&gt;<br>&gt;<br>&gt; Same!<br>&gt;<br>&gt; The only thing that needs to be considered is what to name the<br>&gt; replacement attribute (for methods where the return value isn’t<br>&gt; important). I’m thinking @optionalReturn or @ignoreUnusedResult or<br>&gt; such.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org<br>&gt; &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution&lt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; -Dave<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160225/8f36aa16/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ecdb231117dda838340bfcbb8873d28e?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Paul Cantrell</string> &lt;cantrell at pobox.com&gt;<p>February 25, 2016 at 02:00:00pm</p></header><div class="content"><p>+1 @allow_unused_result<br></p><p>&gt; On Feb 25, 2016, at 2:41 PM, Vanderlei Martinelli via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1 for the proposal, but I&#39;d like to use `@supress_unused_result_warning`.<br>&gt; <br>&gt; -Van<br>&gt; <br>&gt;&gt; On Thu, Feb 25, 2016 at 2:46 PM, James Hillhouse via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; +1 for the proposal<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 25, 2016, at 9:46 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Wed Feb 24 2016, Janosch Hildebrand &lt;jnosh-AT-jnosh.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks for the encouragement everyone! I’ll start drafting over the weekend.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; With regard to the inverted attribute, that is definitely open to discussion.<br>&gt;&gt;&gt;&gt; Other variants that had been mentioned previously include:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; @suppress_unused_result - suggested by Adrian Kashivskyy<br>&gt;&gt;&gt;&gt; @allow_unused_result - suggested by Kevin Ballard<br>&gt;&gt;&gt;&gt; @ignoreresult - suggested by Brent Royal-Gordon<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; @no_warn_unused_result would seem to be the least confusable spelling.<br>&gt;&gt;&gt; @incidental_result would be semantically valid and shorter, but I can&#39;t<br>&gt;&gt;&gt; say I like it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Also the aforementioned “Modernizing Attribute Case and Attribute<br>&gt;&gt;&gt;&gt; Argument Naming” proposal[1] will also play into this discussion as<br>&gt;&gt;&gt;&gt; well.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; [1] https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160215/010510.html<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Janosch<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On 24 Feb 2016, at 21:37, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On 24 Feb 2016, at 19:27, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; on Wed Feb 24 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Feb 24, 2016, at 7:13 AM, Janosch Hildebrand via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Erica&#39;s proposal about &quot;Modernizing Attribute Case and Attribute<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Argument Naming&quot; made me remember this discussion.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t think a proposal was ever submitted? If no one else is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; working on a proposal already I would offer myself up for writing<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; this up.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I don’t recall a real proposal, it would be great for you to drive this.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Yes, please!  I *really* want this change.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Same!<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The only thing that needs to be considered is what to name the<br>&gt;&gt;&gt;&gt;&gt; replacement attribute (for methods where the return value isn’t<br>&gt;&gt;&gt;&gt;&gt; important). I’m thinking @optionalReturn or @ignoreUnusedResult or<br>&gt;&gt;&gt;&gt;&gt; such.<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution&lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160225/3db3b976/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
