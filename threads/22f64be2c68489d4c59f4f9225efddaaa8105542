<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1d1aca7a6cde36af51a4628b3776fb0b?s=50"></div><header><strong>Enforcing guidelines</strong> from <string>Steven Van Impe</string> &lt;steven.vanimpe at icloud.com&gt;<p>December 10, 2015 at 09:00:00am</p></header><div class="content"><p>Has any thought been given to making some of the design guidelines required by the compiler, instead of just guidelines? One guideline in particular I am thinking of is:<br></p><p>&quot;Follow case conventions: names of types, protocols and enum cases are UpperCamelCase. Everything else is lowerCamelCase.”<br></p><p>As a teacher, I have to remind my students of this convention several times a day, mostly because students learn and use different languages (with different conventions) at the same time. After nil unwrapping, inconsistent casing is probably the #2 source of bugs my students write.<br></p><p>---<br>Steven Van Impe<br>Lecturer @ University College Ghent, Belgium<br>@svanimpe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Enforcing guidelines</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 10, 2015 at 09:00:00pm</p></header><div class="content"><p>&gt; On Dec 10, 2015, at 12:45 AM, Steven Van Impe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Has any thought been given to making some of the design guidelines required by the compiler, instead of just guidelines? One guideline in particular I am thinking of is:<br>&gt; <br>&gt; &quot;Follow case conventions: names of types, protocols and enum cases are UpperCamelCase. Everything else is lowerCamelCase.”<br>&gt; <br>&gt; As a teacher, I have to remind my students of this convention several times a day, mostly because students learn and use different languages (with different conventions) at the same time. After nil unwrapping, inconsistent casing is probably the #2 source of bugs my students write.<br></p><p>I think we’d have to carefully consider the exact policies that we support out of the box, but I’m not completely opposed to this sort of feature.  It should also only apply to declarations, not uses of values (e.g. you should be able to “use” a misnamed decl imported from a C header).<br></p><p>I’d also suggest that this produce a warning for violations, not an error.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Enforcing guidelines</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December 11, 2015 at 01:00:00am</p></header><div class="content"><p>&gt;&gt; Has any thought been given to making some of the design guidelines required by the compiler, instead of just guidelines? One guideline in particular I am thinking of is:<br>&gt;&gt; <br>&gt;&gt; &quot;Follow case conventions: names of types, protocols and enum cases are UpperCamelCase. Everything else is lowerCamelCase.”<br>&gt;&gt; <br>&gt;&gt; As a teacher, I have to remind my students of this convention several times a day, mostly because students learn and use different languages (with different conventions) at the same time. After nil unwrapping, inconsistent casing is probably the #2 source of bugs my students write.<br>&gt; <br>&gt; I think we’d have to carefully consider the exact policies that we support out of the box, but I’m not completely opposed to this sort of feature.  It should also only apply to declarations, not uses of values (e.g. you should be able to “use” a misnamed decl imported from a C header).<br>&gt; <br>&gt; I’d also suggest that this produce a warning for violations, not an error.<br></p><p>Does Swift have a general policy that it should be possible to silence any warning the compiler emits?<br></p><p>If so, I might tie this to a pragma (“strict caps”/“no strict caps”?). I’m not sure if it should be on by default in source files, but I think it definitely should be in the REPL (and in Xcode playgrounds) so that students learn good style.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>Enforcing guidelines</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>December 11, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; On Dec 11, 2015, at 1:40 AM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; Has any thought been given to making some of the design guidelines required by the compiler, instead of just guidelines? One guideline in particular I am thinking of is:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &quot;Follow case conventions: names of types, protocols and enum cases are UpperCamelCase. Everything else is lowerCamelCase.”<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As a teacher, I have to remind my students of this convention several times a day, mostly because students learn and use different languages (with different conventions) at the same time. After nil unwrapping, inconsistent casing is probably the #2 source of bugs my students write.<br>&gt;&gt; <br>&gt;&gt; I think we’d have to carefully consider the exact policies that we support out of the box, but I’m not completely opposed to this sort of feature.  It should also only apply to declarations, not uses of values (e.g. you should be able to “use” a misnamed decl imported from a C header).<br>&gt;&gt; <br>&gt;&gt; I’d also suggest that this produce a warning for violations, not an error.<br>&gt; <br>&gt; Does Swift have a general policy that it should be possible to silence any warning the compiler emits?<br></p><p>We should have such a policy, and Clang’s approach to handling warnings is a fairly good model:<br></p><p>	http://clang.llvm.org/docs/UsersManual.html &lt;http://clang.llvm.org/docs/UsersManual.html&gt;<br></p><p>But, nobody has signed up to design/implement a warning opt-in/opt-out/escalation mechanism for the Swift compiler.<br></p><p>	- Doug<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151211/405e218a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/94064636d740f54a1ea944b46f4dd8bd?s=50"></div><header><strong>Enforcing guidelines</strong> from <string>Jason Dusek</string> &lt;jason.dusek at gmail.com&gt;<p>December 11, 2015 at 09:00:00pm</p></header><div class="content"><p>What if there were a kind of quoting for non-conforming names? For example,<br>instead of:<br></p><p>PQlibVersion()<br></p><p>one writes:<br></p><p>`PQlibVersion`()<br></p><p>This would have the effect of marking out non-conforming, weird code<br>explicitly.<br></p><p>(It might be the case that only a single leading backtick, in the manner of<br>Lisp quoting, is better in practice; and I don&#39;t know enough about the<br>grammar of Swift to say that backtick is the best choice.)<br></p><p>Best Regards,<br>Jason Dusek<br></p><p>On Fri, 11 Dec 2015 at 13:14, Douglas Gregor via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Dec 11, 2015, at 1:40 AM, Brent Royal-Gordon via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Has any thought been given to making some of the design guidelines<br>&gt; required by the compiler, instead of just guidelines? One guideline in<br>&gt; particular I am thinking of is:<br>&gt;<br>&gt; &quot;Follow case conventions: names of types, protocols and enum cases are<br>&gt; UpperCamelCase. Everything else is lowerCamelCase.”<br>&gt;<br>&gt; As a teacher, I have to remind my students of this convention several<br>&gt; times a day, mostly because students learn and use different languages<br>&gt; (with different conventions) at the same time. After nil unwrapping,<br>&gt; inconsistent casing is probably the #2 source of bugs my students write.<br>&gt;<br>&gt;<br>&gt; I think we’d have to carefully consider the exact policies that we support<br>&gt; out of the box, but I’m not completely opposed to this sort of feature.  It<br>&gt; should also only apply to declarations, not uses of values (e.g. you should<br>&gt; be able to “use” a misnamed decl imported from a C header).<br>&gt;<br>&gt; I’d also suggest that this produce a warning for violations, not an error.<br>&gt;<br>&gt;<br>&gt; Does Swift have a general policy that it should be possible to silence any<br>&gt; warning the compiler emits?<br>&gt;<br>&gt;<br>&gt; We should have such a policy, and Clang’s approach to handling warnings is<br>&gt; a fairly good model:<br>&gt;<br>&gt; http://clang.llvm.org/docs/UsersManual.html<br>&gt;<br>&gt; But, nobody has signed up to design/implement a warning<br>&gt; opt-in/opt-out/escalation mechanism for the Swift compiler.<br>&gt;<br>&gt; - Doug<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151211/4d8fc90b/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
