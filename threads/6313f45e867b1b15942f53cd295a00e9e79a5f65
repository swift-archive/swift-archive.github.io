<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>IUO in Swift 3.0</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>June 21, 2016 at 10:00:00pm</p></header><div class="content"><p>Just saw this article about IUO in Swift 3.0:<br></p><p>https://www.bignerdranch.com/blog/wwdc-2016-increased-safety-in-swift-3/<br></p><p>I was surprised that the IUO type still exists. From what I understood, SE-0054 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0054-abolish-iuo.md&gt; gives a clear example that:<br></p><p>func f() -&gt; Int! { return 3 } // f: () -&gt; Int?, has IUO attribute<br>// ...<br>let x3: Int! = f() // succeeds; x3: Int? = .some(3), has IUO attribute<br>// ...<br>func g() -&gt; Int! { return nil } // f: () -&gt; Int?, has IUO attribute<br>// ...<br>let y3: Int! = g() // succeeds; y3: Int? = .none, has IUO attribute<br></p><p>x3 and y3 should be a of type Int? but trying those out in Xcode 8’s beta 1 playground show that they are still of type Int!. Did I miss something?<br></p><p>David.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160621/63135f65/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>IUO in Swift 3.0</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>June 21, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jun 21, 2016, at 1:06 PM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Just saw this article about IUO in Swift 3.0:<br>&gt; <br>&gt; https://www.bignerdranch.com/blog/wwdc-2016-increased-safety-in-swift-3/<br>&gt; <br>&gt; I was surprised that the IUO type still exists. From what I understood, SE-0054 gives a clear example that:<br>&gt; <br>&gt; func f() -&gt; Int! { return 3 } <br>&gt; // f: () -&gt; Int?, has IUO attribute<br>&gt; // ...<br>&gt; <br>&gt; let x3: Int! = f() <br>&gt; // succeeds; x3: Int? = .some(3), has IUO attribute<br>&gt; // ...<br>&gt; <br>&gt; func g() -&gt; Int! { return nil } <br>&gt; // f: () -&gt; Int?, has IUO attribute<br>&gt; // ...<br>&gt; <br>&gt; let y3: Int! = g() // succeeds; y3: Int? = .none, has IUO attribute<br>&gt; <br>&gt; x3 and y3 should be a of type Int? but trying those out in Xcode 8’s beta 1 playground show that they are still of type Int!. Did I miss something?<br></p><p>SE-0054 hasn&#39;t been fully implemented yet. The stricter implicit promotions are mostly there, but the IUO type still exists.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fda162b7805f56b22d58a90236a3583a?s=50"></div><header><strong>IUO in Swift 3.0</strong> from <string>Jonathan Cotton</string> &lt;joncotton at icloud.com&gt;<p>June 21, 2016 at 09:00:00pm</p></header><div class="content"><p>I was also surprised this type still exists as I&#39;d taken that the proposal was for the removal of IUO as an explicit type, but after some testing of IUO propagation behaviour in Swift 3.0, I&#39;m happy to report the behaviour has been changed to meet the desired behaviour in the spec, specifically, I now don&#39;t need to define a separate interface signature to specifically expect type T!<br></p><p>&gt; On 21 Jun 2016, at 21:22, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 21, 2016, at 1:06 PM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Just saw this article about IUO in Swift 3.0:<br>&gt;&gt; <br>&gt;&gt; https://www.bignerdranch.com/blog/wwdc-2016-increased-safety-in-swift-3/<br>&gt;&gt; <br>&gt;&gt; I was surprised that the IUO type still exists. From what I understood, SE-0054 gives a clear example that:<br>&gt;&gt; <br>&gt;&gt; func f() -&gt; Int! { return 3 } <br>&gt;&gt; // f: () -&gt; Int?, has IUO attribute<br>&gt;&gt; // ...<br>&gt;&gt; <br>&gt;&gt; let x3: Int! = f() <br>&gt;&gt; // succeeds; x3: Int? = .some(3), has IUO attribute<br>&gt;&gt; // ...<br>&gt;&gt; <br>&gt;&gt; func g() -&gt; Int! { return nil } <br>&gt;&gt; // f: () -&gt; Int?, has IUO attribute<br>&gt;&gt; // ...<br>&gt;&gt; <br>&gt;&gt; let y3: Int! = g() // succeeds; y3: Int? = .none, has IUO attribute<br>&gt;&gt; <br>&gt;&gt; x3 and y3 should be a of type Int? but trying those out in Xcode 8’s beta 1 playground show that they are still of type Int!. Did I miss something?<br>&gt; <br>&gt; SE-0054 hasn&#39;t been fully implemented yet. The stricter implicit promotions are mostly there, but the IUO type still exists.<br>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>IUO in Swift 3.0</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>June 21, 2016 at 11:00:00pm</p></header><div class="content"><p>Is there a bug tracking the remaining part of the implementation?<br>Shouldn’t the proposal still be under “Not yet implemented” as its not completely implemented?<br></p><p>David.<br></p><p>&gt; On 21 Jun 2016, at 22:22, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jun 21, 2016, at 1:06 PM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Just saw this article about IUO in Swift 3.0:<br>&gt;&gt; <br>&gt;&gt; https://www.bignerdranch.com/blog/wwdc-2016-increased-safety-in-swift-3/<br>&gt;&gt; <br>&gt;&gt; I was surprised that the IUO type still exists. From what I understood, SE-0054 gives a clear example that:<br>&gt;&gt; <br>&gt;&gt; func f() -&gt; Int! { return 3 } <br>&gt;&gt; // f: () -&gt; Int?, has IUO attribute<br>&gt;&gt; // ...<br>&gt;&gt; <br>&gt;&gt; let x3: Int! = f() <br>&gt;&gt; // succeeds; x3: Int? = .some(3), has IUO attribute<br>&gt;&gt; // ...<br>&gt;&gt; <br>&gt;&gt; func g() -&gt; Int! { return nil } <br>&gt;&gt; // f: () -&gt; Int?, has IUO attribute<br>&gt;&gt; // ...<br>&gt;&gt; <br>&gt;&gt; let y3: Int! = g() // succeeds; y3: Int? = .none, has IUO attribute<br>&gt;&gt; <br>&gt;&gt; x3 and y3 should be a of type Int? but trying those out in Xcode 8’s beta 1 playground show that they are still of type Int!. Did I miss something?<br>&gt; <br>&gt; SE-0054 hasn&#39;t been fully implemented yet. The stricter implicit promotions are mostly there, but the IUO type still exists.<br>&gt; <br>&gt; -Joe<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160621/fcb44928/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/90b3a613e2149c7b7ef411b8680d3ef3?s=50"></div><header><strong>IUO in Swift 3.0</strong> from <string>Jonathan Cotton</string> &lt;joncotton at me.com&gt;<p>June 21, 2016 at 09:00:00pm</p></header><div class="content"><p>I was also surprised this type still exists as I&#39;d taken that the proposal was for the removal of IUO as an explicit type, but after some testing of IUO propagation behaviour in Swift 3.0, I&#39;m happy to report the behaviour has been changed to meet the desired behaviour in the spec, specifically, I now don&#39;t need to define a separate interface signature to specifically expect type T!<br></p><p>&gt; On 21 Jun 2016, at 21:22, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 21, 2016, at 1:06 PM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Just saw this article about IUO in Swift 3.0:<br>&gt;&gt; <br>&gt;&gt; https://www.bignerdranch.com/blog/wwdc-2016-increased-safety-in-swift-3/<br>&gt;&gt; <br>&gt;&gt; I was surprised that the IUO type still exists. From what I understood, SE-0054 gives a clear example that:<br>&gt;&gt; <br>&gt;&gt; func f() -&gt; Int! { return 3 } <br>&gt;&gt; // f: () -&gt; Int?, has IUO attribute<br>&gt;&gt; // ...<br>&gt;&gt; <br>&gt;&gt; let x3: Int! = f() <br>&gt;&gt; // succeeds; x3: Int? = .some(3), has IUO attribute<br>&gt;&gt; // ...<br>&gt;&gt; <br>&gt;&gt; func g() -&gt; Int! { return nil } <br>&gt;&gt; // f: () -&gt; Int?, has IUO attribute<br>&gt;&gt; // ...<br>&gt;&gt; <br>&gt;&gt; let y3: Int! = g() // succeeds; y3: Int? = .none, has IUO attribute<br>&gt;&gt; <br>&gt;&gt; x3 and y3 should be a of type Int? but trying those out in Xcode 8’s beta 1 playground show that they are still of type Int!. Did I miss something?<br>&gt; <br>&gt; SE-0054 hasn&#39;t been fully implemented yet. The stricter implicit promotions are mostly there, but the IUO type still exists.<br>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>IUO in Swift 3.0</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>June 21, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jun 21, 2016, at 1:39 PM, Jonathan Cotton via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I was also surprised this type still exists as I&#39;d taken that the proposal was for the removal of IUO as an explicit type, but after some testing of IUO propagation behaviour in Swift 3.0, I&#39;m happy to report the behaviour has been changed to meet the desired behaviour in the spec, specifically, I now don&#39;t need to define a separate interface signature to specifically expect type T!<br></p><p>I think that there is some confusion here: it is true that IUO exists internally as a type within the compiler, but the idea of our current implementation is that that is just an implementation detail within the compiler (similar to LValueType, which has no user syntax), not an exposed part of the programmer model.<br></p><p>That said, the “T!” *syntax* is intended to stay in Swift.  This is the way to model the IUO declaration modifier, as outlined in the proposal.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>IUO in Swift 3.0</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>June 22, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Jun 21, 2016, at 9:55 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 21, 2016, at 1:39 PM, Jonathan Cotton via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I was also surprised this type still exists as I&#39;d taken that the proposal was for the removal of IUO as an explicit type, but after some testing of IUO propagation behaviour in Swift 3.0, I&#39;m happy to report the behaviour has been changed to meet the desired behaviour in the spec, specifically, I now don&#39;t need to define a separate interface signature to specifically expect type T!<br>&gt; <br>&gt; I think that there is some confusion here: it is true that IUO exists internally as a type within the compiler, but the idea of our current implementation is that that is just an implementation detail within the compiler (similar to LValueType, which has no user syntax), not an exposed part of the programmer model.<br>&gt; <br>&gt; That said, the “T!” *syntax* is intended to stay in Swift.  This is the way to model the IUO declaration modifier, as outlined in the proposal.<br></p><p>As implemented in the seed, T! still leaks into the user type system.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>IUO in Swift 3.0</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>June 22, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jun 22, 2016, at 8:56 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt; I think that there is some confusion here: it is true that IUO exists internally as a type within the compiler, but the idea of our current implementation is that that is just an implementation detail within the compiler (similar to LValueType, which has no user syntax), not an exposed part of the programmer model.<br>&gt;&gt; <br>&gt;&gt; That said, the “T!” *syntax* is intended to stay in Swift.  This is the way to model the IUO declaration modifier, as outlined in the proposal.<br>&gt; <br>&gt; As implemented in the seed, T! still leaks into the user type system.<br></p><p>Are there specific examples of that?  Those examples are bugs, that should be fixed.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>IUO in Swift 3.0</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>June 22, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jun 22, 2016, at 1:03 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Jun 22, 2016, at 8:56 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt; I think that there is some confusion here: it is true that IUO exists internally as a type within the compiler, but the idea of our current implementation is that that is just an implementation detail within the compiler (similar to LValueType, which has no user syntax), not an exposed part of the programmer model.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That said, the “T!” *syntax* is intended to stay in Swift.  This is the way to model the IUO declaration modifier, as outlined in the proposal.<br>&gt;&gt; <br>&gt;&gt; As implemented in the seed, T! still leaks into the user type system.<br>&gt; <br>&gt; Are there specific examples of that?  Those examples are bugs, that should be fixed.<br>&gt; <br>&gt; -Chris<br></p><p>var x = [Int!]()<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>IUO in Swift 3.0</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>June 29, 2016 at 08:00:00am</p></header><div class="content"><p>Just to close the discussion: have all the bugs pertaining to the incomplete implementation of SE-0054 been tracked? If not, I don’t mind writing them.<br></p><p>David.<br></p><p>&gt; On 22 Jun 2016, at 22:07, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jun 22, 2016, at 1:03 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 22, 2016, at 8:56 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt; I think that there is some confusion here: it is true that IUO exists internally as a type within the compiler, but the idea of our current implementation is that that is just an implementation detail within the compiler (similar to LValueType, which has no user syntax), not an exposed part of the programmer model.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; That said, the “T!” *syntax* is intended to stay in Swift.  This is the way to model the IUO declaration modifier, as outlined in the proposal.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As implemented in the seed, T! still leaks into the user type system.<br>&gt;&gt; <br>&gt;&gt; Are there specific examples of that?  Those examples are bugs, that should be fixed.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt; <br>&gt; var x = [Int!]()<br>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160629/30e5b33e/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
