<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>February 21, 2016 at 05:00:00pm</p></header><div class="content"><p>First I see that Dmitri G. appears to be most involved with this yet in the<br>other thread I see Dmitri H. being copied. So which/both of you involved<br>with this effort? ...or are you one and the same given the similarity of<br>the name? /me hopes he doesn&#39;t look like a total idiot now<br></p><p>Second given commit access limits it may make sense for those of us on the<br>&quot;outside&quot; to work in same fork (e.g. added as collaborators)? It may help<br>avoid pull request overhead between us while work is underway? My github<br>identity is &quot;shawnce&quot;. I have a fork created<br>https://github.com/shawnce/swift if so desired to use that as the sandbox<br>(set default branch to swift-3-indexing-model). ...looking for guidance on<br>how best to make things work efficiently.<br></p><p>I am digging into<br>https://github.com/apple/swift/blob/master/test/Prototypes/CollectionsMoveIndices.swift<br>to<br>understand the scope of the work involved.<br></p><p>Anyway I am looking at the current state of the code and I see things like<br>the following...<br>   @available(*, unavailable, renamed=&quot;MutableCollection&quot;)<br>    public typealias MutableCollectionType = MutableCollection<br>...so it looks like the use of Type is being dropped in the updated naming<br>methodology? So this obviously implies... right?<br>//     [new]   protocol BidirectionalCollection : Collection {}<br>//     [new]   protocol RandomAccessCollection : BidirectionalCollection<br></p><p>I expect additional – hopefully less mundane :) – questions to popup as I<br>dig into things.<br></p><p>-Shawn<br></p><p>As reference Dave outlined the following in the other email thread...<br>-----<br>Okay, I&#39;ve up a branch for you guys: swift-3-indexing-model.<br></p><p>* You can submit pull requests against that.<br></p><p>* There are corresponding branches in the swift-llvm and swift-clang<br>  repos that this branch will build/test against.<br></p><p>* The branch is based on swift-3-api-guidelines, where we&#39;re doing all<br>  the renaming work associated with the new guidelines; we expect to<br>  merge that branch into master in a few days, so basing the indexing model<br>  work on it should reduce conflicts when we merge this work.<br></p><p>Most of the stdlib team is currently occupied with other fires, but we<br>want to move on to work on this ASAP.  If it&#39;s possible for you guys to<br>get it started in the meantime, that would be truly awesome.<br>Unfortunately the hardest part is right at the beginning.<br></p><p>The first step is to make the minimal changes required to get the<br>standard library to build after replacing the Collection protocol with<br>the three shown in the prototype.  That step may not be very<br>parallelizable and might require either close coordination or for one of<br>you to do it alone.  Tests will be horribly broken at this point, and<br>you may have even commented out parts of the standard library, so this<br>step requires intestinal fortitude.<br></p><p>If parts of the library have been disabled in step 1, next you can split<br>up the work of getting the whole library to work.<br></p><p>At this point you should be able to mark the old Index protocols<br>@unavailable and move on to fixing tests.<br>-----<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160221/6c1e638a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>February 21, 2016 at 12:00:00pm</p></header><div class="content"><p>Agreed. I created a GitHub organization<br>(&#39;swift-stdlib-opensource-collaborators&#39;), and will try to invite the<br>non-Apple (&#39;outsider&#39;) folks to join. Once that&#39;s happened, maybe Shawn can<br>move his fork under the organization, or one of us can fork the repo again.<br>I&#39;m not very familiar with how orgs work, but I assume we&#39;ll be able to<br>push to the fork with minimal friction, and then occasionally the org<br>itself can make PRs to Swift proper?<br></p><p>Once we get this worked out I&#39;ll begin working through the first part of<br>Dave&#39;s tasklist.<br></p><p>Best,<br>Austin<br></p><p><br></p><p>On Sun, Feb 21, 2016 at 9:57 AM, Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br></p><p>&gt; First I see that Dmitri G. appears to be most involved with this yet in<br>&gt; the other thread I see Dmitri H. being copied. So which/both of you<br>&gt; involved with this effort? ...or are you one and the same given the<br>&gt; similarity of the name? /me hopes he doesn&#39;t look like a total idiot now<br>&gt;<br>&gt; Second given commit access limits it may make sense for those of us on the<br>&gt; &quot;outside&quot; to work in same fork (e.g. added as collaborators)? It may help<br>&gt; avoid pull request overhead between us while work is underway? My github<br>&gt; identity is &quot;shawnce&quot;. I have a fork created<br>&gt; https://github.com/shawnce/swift if so desired to use that as the sandbox<br>&gt; (set default branch to swift-3-indexing-model). ...looking for guidance on<br>&gt; how best to make things work efficiently.<br>&gt;<br>&gt; I am digging into<br>&gt; https://github.com/apple/swift/blob/master/test/Prototypes/CollectionsMoveIndices.swift to<br>&gt; understand the scope of the work involved.<br>&gt;<br>&gt; Anyway I am looking at the current state of the code and I see things like<br>&gt; the following...<br>&gt;    @available(*, unavailable, renamed=&quot;MutableCollection&quot;)<br>&gt;     public typealias MutableCollectionType = MutableCollection<br>&gt; ...so it looks like the use of Type is being dropped in the updated naming<br>&gt; methodology? So this obviously implies... right?<br>&gt; //     [new]   protocol BidirectionalCollection : Collection {}<br>&gt; //     [new]   protocol RandomAccessCollection : BidirectionalCollection<br>&gt;<br>&gt; I expect additional – hopefully less mundane :) – questions to popup as I<br>&gt; dig into things.<br>&gt;<br>&gt; -Shawn<br>&gt;<br>&gt; As reference Dave outlined the following in the other email thread...<br>&gt; -----<br>&gt; Okay, I&#39;ve up a branch for you guys: swift-3-indexing-model.<br>&gt;<br>&gt; * You can submit pull requests against that.<br>&gt;<br>&gt; * There are corresponding branches in the swift-llvm and swift-clang<br>&gt;   repos that this branch will build/test against.<br>&gt;<br>&gt; * The branch is based on swift-3-api-guidelines, where we&#39;re doing all<br>&gt;   the renaming work associated with the new guidelines; we expect to<br>&gt;   merge that branch into master in a few days, so basing the indexing model<br>&gt;   work on it should reduce conflicts when we merge this work.<br>&gt;<br>&gt; Most of the stdlib team is currently occupied with other fires, but we<br>&gt; want to move on to work on this ASAP.  If it&#39;s possible for you guys to<br>&gt; get it started in the meantime, that would be truly awesome.<br>&gt; Unfortunately the hardest part is right at the beginning.<br>&gt;<br>&gt; The first step is to make the minimal changes required to get the<br>&gt; standard library to build after replacing the Collection protocol with<br>&gt; the three shown in the prototype.  That step may not be very<br>&gt; parallelizable and might require either close coordination or for one of<br>&gt; you to do it alone.  Tests will be horribly broken at this point, and<br>&gt; you may have even commented out parts of the standard library, so this<br>&gt; step requires intestinal fortitude.<br>&gt;<br>&gt; If parts of the library have been disabled in step 1, next you can split<br>&gt; up the work of getting the whole library to work.<br>&gt;<br>&gt; At this point you should be able to mark the old Index protocols<br>&gt; @unavailable and move on to fixing tests.<br>&gt; -----<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160221/41045942/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>February 21, 2016 at 05:00:00pm</p></header><div class="content"><p>On Sun, Feb 21, 2016 at 12:13 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt; Agreed. I created a GitHub organization<br>&gt; (&#39;swift-stdlib-opensource-collaborators&#39;), and will try to invite the<br>&gt; non-Apple (&#39;outsider&#39;) folks to join. Once that&#39;s happened, maybe Shawn can<br>&gt; move his fork under the organization, or one of us can fork the repo again.<br></p><p>Hi Austin, Shawn,<br></p><p>We&#39;re still working out the general policy for commit access for<br>non-Apple contributors.<br></p><p>I&#39;m trying to understand the situation better -- could you explain why<br>pull requests present too much overhead for this project?  Many Apple<br>engineers who have commit access find that the pull request approach<br>works better for their day-to-day work.<br></p><p>My concern is that doing this work in a parallel organization hides<br>this project from other contributors who might be interested.  Also,<br>you would only get CI coverage in the primary Swift organization.  In<br>general, creating a parallel organization sends an ambiguous message<br>to other people working on the project.<br></p><p>Furthermore, even Shawn started his work on this project with a pull<br>request against his fork (https://github.com/shawnce/swift/pull/1).<br></p><p>Could we start with pull requests against the swift-3-indexing-model<br>branch in the primary repository, and possibly move to direct commits<br>later?<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>February 21, 2016 at 05:00:00pm</p></header><div class="content"><p>Hi Dmitri (et al),<br></p><p>I have no personal objection to pull requests. If PRs directly to the Swift project are the best way to do things, let&#39;s keep it that way.<br></p><p>Austin<br></p><p>&gt; On Feb 21, 2016, at 5:24 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Sun, Feb 21, 2016 at 12:13 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;&gt; Agreed. I created a GitHub organization<br>&gt;&gt; (&#39;swift-stdlib-opensource-collaborators&#39;), and will try to invite the<br>&gt;&gt; non-Apple (&#39;outsider&#39;) folks to join. Once that&#39;s happened, maybe Shawn can<br>&gt;&gt; move his fork under the organization, or one of us can fork the repo again.<br>&gt; <br>&gt; Hi Austin, Shawn,<br>&gt; <br>&gt; We&#39;re still working out the general policy for commit access for<br>&gt; non-Apple contributors.<br>&gt; <br>&gt; I&#39;m trying to understand the situation better -- could you explain why<br>&gt; pull requests present too much overhead for this project?  Many Apple<br>&gt; engineers who have commit access find that the pull request approach<br>&gt; works better for their day-to-day work.<br>&gt; <br>&gt; My concern is that doing this work in a parallel organization hides<br>&gt; this project from other contributors who might be interested.  Also,<br>&gt; you would only get CI coverage in the primary Swift organization.  In<br>&gt; general, creating a parallel organization sends an ambiguous message<br>&gt; to other people working on the project.<br>&gt; <br>&gt; Furthermore, even Shawn started his work on this project with a pull<br>&gt; request against his fork (https://github.com/shawnce/swift/pull/1).<br>&gt; <br>&gt; Could we start with pull requests against the swift-3-indexing-model<br>&gt; branch in the primary repository, and possibly move to direct commits<br>&gt; later?<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 21, 2016 at 06:00:00pm</p></header><div class="content"><p>Until we open commit access, they still need one or more repos to push to and create PRs from. Seems better for them to have an org repo for that so other collaborators have a centralized place to go for the latest non-integrated work. <br></p><p>Sent from my moss-covered three-handled family gradunza<br></p><p>&gt; On Feb 21, 2016, at 5:34 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hi Dmitri (et al),<br>&gt; <br>&gt; I have no personal objection to pull requests. If PRs directly to the Swift project are the best way to do things, let&#39;s keep it that way.<br>&gt; <br>&gt; Austin<br>&gt; <br>&gt;&gt; On Feb 21, 2016, at 5:24 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Sun, Feb 21, 2016 at 12:13 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;&gt;&gt; Agreed. I created a GitHub organization<br>&gt;&gt;&gt; (&#39;swift-stdlib-opensource-collaborators&#39;), and will try to invite the<br>&gt;&gt;&gt; non-Apple (&#39;outsider&#39;) folks to join. Once that&#39;s happened, maybe Shawn can<br>&gt;&gt;&gt; move his fork under the organization, or one of us can fork the repo again.<br>&gt;&gt; <br>&gt;&gt; Hi Austin, Shawn,<br>&gt;&gt; <br>&gt;&gt; We&#39;re still working out the general policy for commit access for<br>&gt;&gt; non-Apple contributors.<br>&gt;&gt; <br>&gt;&gt; I&#39;m trying to understand the situation better -- could you explain why<br>&gt;&gt; pull requests present too much overhead for this project?  Many Apple<br>&gt;&gt; engineers who have commit access find that the pull request approach<br>&gt;&gt; works better for their day-to-day work.<br>&gt;&gt; <br>&gt;&gt; My concern is that doing this work in a parallel organization hides<br>&gt;&gt; this project from other contributors who might be interested.  Also,<br>&gt;&gt; you would only get CI coverage in the primary Swift organization.  In<br>&gt;&gt; general, creating a parallel organization sends an ambiguous message<br>&gt;&gt; to other people working on the project.<br>&gt;&gt; <br>&gt;&gt; Furthermore, even Shawn started his work on this project with a pull<br>&gt;&gt; request against his fork (https://github.com/shawnce/swift/pull/1).<br>&gt;&gt; <br>&gt;&gt; Could we start with pull requests against the swift-3-indexing-model<br>&gt;&gt; branch in the primary repository, and possibly move to direct commits<br>&gt;&gt; later?<br>&gt;&gt; <br>&gt;&gt; Dmitri<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>February 21, 2016 at 06:00:00pm</p></header><div class="content"><p>I copy-pasted the prototype code into Collections.swift (commenting out the old code), renamed the types that conflicted with the naming guidelines, and am going through the errors one at a time to get the project into a buildable state. This might take a few more days. Let me know if there are any objections to this approach.<br></p><p>Austin<br></p><p>&gt; On Feb 21, 2016, at 6:21 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; Until we open commit access, they still need one or more repos to push to and create PRs from. Seems better for them to have an org repo for that so other collaborators have a centralized place to go for the latest non-integrated work. <br>&gt; <br>&gt; Sent from my moss-covered three-handled family gradunza<br>&gt; <br>&gt;&gt; On Feb 21, 2016, at 5:34 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Dmitri (et al),<br>&gt;&gt; <br>&gt;&gt; I have no personal objection to pull requests. If PRs directly to the Swift project are the best way to do things, let&#39;s keep it that way.<br>&gt;&gt; <br>&gt;&gt; Austin<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 21, 2016, at 5:24 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Sun, Feb 21, 2016 at 12:13 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; Agreed. I created a GitHub organization<br>&gt;&gt;&gt;&gt; (&#39;swift-stdlib-opensource-collaborators&#39;), and will try to invite the<br>&gt;&gt;&gt;&gt; non-Apple (&#39;outsider&#39;) folks to join. Once that&#39;s happened, maybe Shawn can<br>&gt;&gt;&gt;&gt; move his fork under the organization, or one of us can fork the repo again.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi Austin, Shawn,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We&#39;re still working out the general policy for commit access for<br>&gt;&gt;&gt; non-Apple contributors.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m trying to understand the situation better -- could you explain why<br>&gt;&gt;&gt; pull requests present too much overhead for this project?  Many Apple<br>&gt;&gt;&gt; engineers who have commit access find that the pull request approach<br>&gt;&gt;&gt; works better for their day-to-day work.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My concern is that doing this work in a parallel organization hides<br>&gt;&gt;&gt; this project from other contributors who might be interested.  Also,<br>&gt;&gt;&gt; you would only get CI coverage in the primary Swift organization.  In<br>&gt;&gt;&gt; general, creating a parallel organization sends an ambiguous message<br>&gt;&gt;&gt; to other people working on the project.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Furthermore, even Shawn started his work on this project with a pull<br>&gt;&gt;&gt; request against his fork (https://github.com/shawnce/swift/pull/1).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Could we start with pull requests against the swift-3-indexing-model<br>&gt;&gt;&gt; branch in the primary repository, and possibly move to direct commits<br>&gt;&gt;&gt; later?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Dmitri<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>February 22, 2016 at 03:00:00pm</p></header><div class="content"><p>If you can see a way that I can assist Austin let me know. I was<br>approaching it by systematically pulling in the API and implementation in a<br>passive way into the existing code. Then toggling things to see the scope<br>of changes that would be needed. Not sure what is the best way to attack<br>this. I will hold on that attempt for now.<br></p><p>See my pull request or fork for what little I had started (if you haven&#39;t<br>already).<br></p><p>https://github.com/shawnce/swift/pull/1/files<br>https://github.com/shawnce/swift/<br></p><p>-Shawn<br></p><p>On Sun, Feb 21, 2016 at 6:45 PM Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br></p><p>&gt; I copy-pasted the prototype code into Collections.swift (commenting out<br>&gt; the old code), renamed the types that conflicted with the naming<br>&gt; guidelines, and am going through the errors one at a time to get the<br>&gt; project into a buildable state. This might take a few more days. Let me<br>&gt; know if there are any objections to this approach.<br>&gt;<br>&gt; Austin<br>&gt;<br>&gt; &gt; On Feb 21, 2016, at 6:21 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Until we open commit access, they still need one or more repos to push<br>&gt; to and create PRs from. Seems better for them to have an org repo for that<br>&gt; so other collaborators have a centralized place to go for the latest<br>&gt; non-integrated work.<br>&gt; &gt;<br>&gt; &gt; Sent from my moss-covered three-handled family gradunza<br>&gt; &gt;<br>&gt; &gt;&gt; On Feb 21, 2016, at 5:34 PM, Austin Zheng &lt;austinzheng at gmail.com&gt;<br>&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Hi Dmitri (et al),<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I have no personal objection to pull requests. If PRs directly to the<br>&gt; Swift project are the best way to do things, let&#39;s keep it that way.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Austin<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On Feb 21, 2016, at 5:24 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br>&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; On Sun, Feb 21, 2016 at 12:13 PM, Austin Zheng &lt;austinzheng at gmail.com&gt;<br>&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt; Agreed. I created a GitHub organization<br>&gt; &gt;&gt;&gt;&gt; (&#39;swift-stdlib-opensource-collaborators&#39;), and will try to invite the<br>&gt; &gt;&gt;&gt;&gt; non-Apple (&#39;outsider&#39;) folks to join. Once that&#39;s happened, maybe<br>&gt; Shawn can<br>&gt; &gt;&gt;&gt;&gt; move his fork under the organization, or one of us can fork the repo<br>&gt; again.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Hi Austin, Shawn,<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; We&#39;re still working out the general policy for commit access for<br>&gt; &gt;&gt;&gt; non-Apple contributors.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; I&#39;m trying to understand the situation better -- could you explain why<br>&gt; &gt;&gt;&gt; pull requests present too much overhead for this project?  Many Apple<br>&gt; &gt;&gt;&gt; engineers who have commit access find that the pull request approach<br>&gt; &gt;&gt;&gt; works better for their day-to-day work.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; My concern is that doing this work in a parallel organization hides<br>&gt; &gt;&gt;&gt; this project from other contributors who might be interested.  Also,<br>&gt; &gt;&gt;&gt; you would only get CI coverage in the primary Swift organization.  In<br>&gt; &gt;&gt;&gt; general, creating a parallel organization sends an ambiguous message<br>&gt; &gt;&gt;&gt; to other people working on the project.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Furthermore, even Shawn started his work on this project with a pull<br>&gt; &gt;&gt;&gt; request against his fork (https://github.com/shawnce/swift/pull/1).<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Could we start with pull requests against the swift-3-indexing-model<br>&gt; &gt;&gt;&gt; branch in the primary repository, and possibly move to direct commits<br>&gt; &gt;&gt;&gt; later?<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Dmitri<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; &gt;&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt; &gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160222/312f9664/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 22, 2016 at 07:00:00am</p></header><div class="content"><p>on Sun Feb 21 2016, Austin Zheng &lt;austinzheng-AT-gmail.com&gt; wrote:<br></p><p>&gt; I copy-pasted the prototype code into Collections.swift (commenting<br>&gt; out the old code), <br></p><p>Request: don&#39;t comment out old code; it just makes a mess and makes<br>changesets harder to analyze.  The old code is still available; that&#39;s<br>what Git is for.<br></p><p>&gt; renamed the types that conflicted with the naming guidelines, and am<br>&gt; going through the errors one at a time to get the project into a<br>&gt; buildable state. This might take a few more days. Let me know if there<br>&gt; are any objections to this approach.<br></p><p>None whatsoever.  If you can push your WIP to some publicly-visible<br>repository, maybe you could find a way to share the effort of fixing<br>errors with Shawn...?<br></p><p>&gt;<br>&gt; Austin<br>&gt;<br>&gt;&gt; On Feb 21, 2016, at 6:21 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Until we open commit access, they still need one or more repos to<br>&gt;&gt; push to and create PRs from. Seems better for them to have an org<br>&gt;&gt; repo for that so other collaborators have a centralized place to go<br>&gt;&gt; for the latest non-integrated work.<br>&gt;&gt; <br>&gt;&gt; Sent from my moss-covered three-handled family gradunza<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 21, 2016, at 5:34 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi Dmitri (et al),<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I have no personal objection to pull requests. If PRs directly to<br>&gt;&gt;&gt; the Swift project are the best way to do things, let&#39;s keep it that<br>&gt;&gt;&gt; way.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Austin<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 21, 2016, at 5:24 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Sun, Feb 21, 2016 at 12:13 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; Agreed. I created a GitHub organization<br>&gt;&gt;&gt;&gt;&gt; (&#39;swift-stdlib-opensource-collaborators&#39;), and will try to invite the<br>&gt;&gt;&gt;&gt;&gt; non-Apple (&#39;outsider&#39;) folks to join. Once that&#39;s happened, maybe Shawn can<br>&gt;&gt;&gt;&gt;&gt; move his fork under the organization, or one of us can fork the repo again.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi Austin, Shawn,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; We&#39;re still working out the general policy for commit access for<br>&gt;&gt;&gt;&gt; non-Apple contributors.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;m trying to understand the situation better -- could you explain why<br>&gt;&gt;&gt;&gt; pull requests present too much overhead for this project?  Many Apple<br>&gt;&gt;&gt;&gt; engineers who have commit access find that the pull request approach<br>&gt;&gt;&gt;&gt; works better for their day-to-day work.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; My concern is that doing this work in a parallel organization hides<br>&gt;&gt;&gt;&gt; this project from other contributors who might be interested.  Also,<br>&gt;&gt;&gt;&gt; you would only get CI coverage in the primary Swift organization.  In<br>&gt;&gt;&gt;&gt; general, creating a parallel organization sends an ambiguous message<br>&gt;&gt;&gt;&gt; to other people working on the project.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Furthermore, even Shawn started his work on this project with a pull<br>&gt;&gt;&gt;&gt; request against his fork (https://github.com/shawnce/swift/pull/1).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Could we start with pull requests against the swift-3-indexing-model<br>&gt;&gt;&gt;&gt; branch in the primary repository, and possibly move to direct commits<br>&gt;&gt;&gt;&gt; later?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Dmitri<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt;&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;&gt;&gt; <br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>February 22, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Feb 22, 2016, at 7:54 AM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Sun Feb 21 2016, Austin Zheng &lt;austinzheng-AT-gmail.com &lt;http://austinzheng-at-gmail.com/&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; I copy-pasted the prototype code into Collections.swift (commenting<br>&gt;&gt; out the old code), <br>&gt; <br>&gt; Request: don&#39;t comment out old code; it just makes a mess and makes<br>&gt; changesets harder to analyze.  The old code is still available; that&#39;s<br>&gt; what Git is for.<br>&gt; <br></p><p>Of course, you mentioned this before. I&#39;ll make sure it goes away.<br></p><p>&gt;&gt; renamed the types that conflicted with the naming guidelines, and am<br>&gt;&gt; going through the errors one at a time to get the project into a<br>&gt;&gt; buildable state. This might take a few more days. Let me know if there<br>&gt;&gt; are any objections to this approach.<br>&gt; <br>&gt; None whatsoever.  If you can push your WIP to some publicly-visible<br>&gt; repository, maybe you could find a way to share the effort of fixing<br>&gt; errors with Shawn...?<br></p><p>I&#39;ll push what I have to my local repo, but it&#39;s a very brute-force approach. Like Shawn, I don&#39;t know if this is the *best* way; if necessary we can go with his more methodical approach.<br></p><p>Austin<br></p><p>&gt; <br>&gt;&gt; <br>&gt;&gt; Austin<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 21, 2016, at 6:21 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Until we open commit access, they still need one or more repos to<br>&gt;&gt;&gt; push to and create PRs from. Seems better for them to have an org<br>&gt;&gt;&gt; repo for that so other collaborators have a centralized place to go<br>&gt;&gt;&gt; for the latest non-integrated work.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my moss-covered three-handled family gradunza<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 21, 2016, at 5:34 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi Dmitri (et al),<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I have no personal objection to pull requests. If PRs directly to<br>&gt;&gt;&gt;&gt; the Swift project are the best way to do things, let&#39;s keep it that<br>&gt;&gt;&gt;&gt; way.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Austin<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Feb 21, 2016, at 5:24 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Sun, Feb 21, 2016 at 12:13 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; Agreed. I created a GitHub organization<br>&gt;&gt;&gt;&gt;&gt;&gt; (&#39;swift-stdlib-opensource-collaborators&#39;), and will try to invite the<br>&gt;&gt;&gt;&gt;&gt;&gt; non-Apple (&#39;outsider&#39;) folks to join. Once that&#39;s happened, maybe Shawn can<br>&gt;&gt;&gt;&gt;&gt;&gt; move his fork under the organization, or one of us can fork the repo again.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hi Austin, Shawn,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; We&#39;re still working out the general policy for commit access for<br>&gt;&gt;&gt;&gt;&gt; non-Apple contributors.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I&#39;m trying to understand the situation better -- could you explain why<br>&gt;&gt;&gt;&gt;&gt; pull requests present too much overhead for this project?  Many Apple<br>&gt;&gt;&gt;&gt;&gt; engineers who have commit access find that the pull request approach<br>&gt;&gt;&gt;&gt;&gt; works better for their day-to-day work.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; My concern is that doing this work in a parallel organization hides<br>&gt;&gt;&gt;&gt;&gt; this project from other contributors who might be interested.  Also,<br>&gt;&gt;&gt;&gt;&gt; you would only get CI coverage in the primary Swift organization.  In<br>&gt;&gt;&gt;&gt;&gt; general, creating a parallel organization sends an ambiguous message<br>&gt;&gt;&gt;&gt;&gt; to other people working on the project.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Furthermore, even Shawn started his work on this project with a pull<br>&gt;&gt;&gt;&gt;&gt; request against his fork (https://github.com/shawnce/swift/pull/1).<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Could we start with pull requests against the swift-3-indexing-model<br>&gt;&gt;&gt;&gt;&gt; branch in the primary repository, and possibly move to direct commits<br>&gt;&gt;&gt;&gt;&gt; later?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Dmitri<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt;&gt;&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;&gt;&gt;&gt; <br>&gt; <br>&gt; -- <br>&gt; -Dave<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160222/5127fe12/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>February 22, 2016 at 10:00:00am</p></header><div class="content"><p>What I have can be found here. All the TODOs will eventually be removed: https://github.com/austinzheng/swift/commit/950e49268b37ca9b0a9643834e8d877b90759971 &lt;https://github.com/austinzheng/swift/commit/950e49268b37ca9b0a9643834e8d877b90759971&gt;<br></p><p>I must leave for work now, but welcome any comments etc.<br></p><p>Austin<br></p><p>&gt; On Feb 22, 2016, at 10:34 AM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 22, 2016, at 7:54 AM, Dave Abrahams &lt;dabrahams at apple.com &lt;mailto:dabrahams at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Sun Feb 21 2016, Austin Zheng &lt;austinzheng-AT-gmail.com &lt;http://austinzheng-at-gmail.com/&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I copy-pasted the prototype code into Collections.swift (commenting<br>&gt;&gt;&gt; out the old code), <br>&gt;&gt; <br>&gt;&gt; Request: don&#39;t comment out old code; it just makes a mess and makes<br>&gt;&gt; changesets harder to analyze.  The old code is still available; that&#39;s<br>&gt;&gt; what Git is for.<br>&gt;&gt; <br>&gt; <br>&gt; Of course, you mentioned this before. I&#39;ll make sure it goes away.<br>&gt; <br>&gt;&gt;&gt; renamed the types that conflicted with the naming guidelines, and am<br>&gt;&gt;&gt; going through the errors one at a time to get the project into a<br>&gt;&gt;&gt; buildable state. This might take a few more days. Let me know if there<br>&gt;&gt;&gt; are any objections to this approach.<br>&gt;&gt; <br>&gt;&gt; None whatsoever.  If you can push your WIP to some publicly-visible<br>&gt;&gt; repository, maybe you could find a way to share the effort of fixing<br>&gt;&gt; errors with Shawn...?<br>&gt; <br>&gt; I&#39;ll push what I have to my local repo, but it&#39;s a very brute-force approach. Like Shawn, I don&#39;t know if this is the *best* way; if necessary we can go with his more methodical approach.<br>&gt; <br>&gt; Austin<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Austin<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 21, 2016, at 6:21 PM, Dave Abrahams &lt;dabrahams at apple.com &lt;mailto:dabrahams at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Until we open commit access, they still need one or more repos to<br>&gt;&gt;&gt;&gt; push to and create PRs from. Seems better for them to have an org<br>&gt;&gt;&gt;&gt; repo for that so other collaborators have a centralized place to go<br>&gt;&gt;&gt;&gt; for the latest non-integrated work.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sent from my moss-covered three-handled family gradunza<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Feb 21, 2016, at 5:34 PM, Austin Zheng &lt;austinzheng at gmail.com &lt;mailto:austinzheng at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hi Dmitri (et al),<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I have no personal objection to pull requests. If PRs directly to<br>&gt;&gt;&gt;&gt;&gt; the Swift project are the best way to do things, let&#39;s keep it that<br>&gt;&gt;&gt;&gt;&gt; way.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Austin<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Feb 21, 2016, at 5:24 PM, Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Sun, Feb 21, 2016 at 12:13 PM, Austin Zheng &lt;austinzheng at gmail.com &lt;mailto:austinzheng at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Agreed. I created a GitHub organization<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; (&#39;swift-stdlib-opensource-collaborators&#39;), and will try to invite the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; non-Apple (&#39;outsider&#39;) folks to join. Once that&#39;s happened, maybe Shawn can<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; move his fork under the organization, or one of us can fork the repo again.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Hi Austin, Shawn,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; We&#39;re still working out the general policy for commit access for<br>&gt;&gt;&gt;&gt;&gt;&gt; non-Apple contributors.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I&#39;m trying to understand the situation better -- could you explain why<br>&gt;&gt;&gt;&gt;&gt;&gt; pull requests present too much overhead for this project?  Many Apple<br>&gt;&gt;&gt;&gt;&gt;&gt; engineers who have commit access find that the pull request approach<br>&gt;&gt;&gt;&gt;&gt;&gt; works better for their day-to-day work.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; My concern is that doing this work in a parallel organization hides<br>&gt;&gt;&gt;&gt;&gt;&gt; this project from other contributors who might be interested.  Also,<br>&gt;&gt;&gt;&gt;&gt;&gt; you would only get CI coverage in the primary Swift organization.  In<br>&gt;&gt;&gt;&gt;&gt;&gt; general, creating a parallel organization sends an ambiguous message<br>&gt;&gt;&gt;&gt;&gt;&gt; to other people working on the project.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Furthermore, even Shawn started his work on this project with a pull<br>&gt;&gt;&gt;&gt;&gt;&gt; request against his fork (https://github.com/shawnce/swift/pull/1 &lt;https://github.com/shawnce/swift/pull/1&gt;).<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Could we start with pull requests against the swift-3-indexing-model<br>&gt;&gt;&gt;&gt;&gt;&gt; branch in the primary repository, and possibly move to direct commits<br>&gt;&gt;&gt;&gt;&gt;&gt; later?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Dmitri<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt;&gt;&gt;&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt;*/<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160222/2581ba22/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>February 21, 2016 at 04:00:00pm</p></header><div class="content"><p>On Sun, Feb 21, 2016 at 9:57 AM, Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt; First I see that Dmitri G. appears to be most involved with this yet in the<br>&gt; other thread I see Dmitri H. being copied. So which/both of you involved<br>&gt; with this effort? ...or are you one and the same given the similarity of the<br>&gt; name? /me hopes he doesn&#39;t look like a total idiot now<br></p><p>I&#39;m just one Dmitri.<br></p><p>&gt; Second given commit access limits it may make sense for those of us on the<br>&gt; &quot;outside&quot; to work in same fork (e.g. added as collaborators)? It may help<br>&gt; avoid pull request overhead between us while work is underway? My github<br>&gt; identity is &quot;shawnce&quot;. I have a fork created<br>&gt; https://github.com/shawnce/swift if so desired to use that as the sandbox<br>&gt; (set default branch to swift-3-indexing-model). ...looking for guidance on<br>&gt; how best to make things work efficiently.<br></p><p>I&#39;ll check if it is possible to give you commit access.<br></p><p>&gt; I am digging into<br>&gt; https://github.com/apple/swift/blob/master/test/Prototypes/CollectionsMoveIndices.swift<br>&gt; to understand the scope of the work involved.<br>&gt;<br>&gt; Anyway I am looking at the current state of the code and I see things like<br>&gt; the following...<br>&gt;    @available(*, unavailable, renamed=&quot;MutableCollection&quot;)<br>&gt;     public typealias MutableCollectionType = MutableCollection<br>&gt; ...so it looks like the use of Type is being dropped in the updated naming<br>&gt; methodology? So this obviously implies... right?<br>&gt; //     [new]   protocol BidirectionalCollection : Collection {}<br>&gt; //     [new]   protocol RandomAccessCollection : BidirectionalCollection<br></p><p>Right.  The prototype is currently written using old names.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>February 22, 2016 at 12:00:00am</p></header><div class="content"><p>As an FYI I have been playing around with things mostly to get my head<br>around the base changes and implications on the existing stdlib<br>implementation. It is very early still. I have no issues throwing it away<br>if I am way off the rails.<br></p><p>Review - https://github.com/shawnce/swift/pull/1<br></p><p>On Sun, Feb 21, 2016 at 4:12 PM Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br></p><p>&gt; On Sun, Feb 21, 2016 at 9:57 AM, Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt; &gt; First I see that Dmitri G. appears to be most involved with this yet in<br>&gt; the<br>&gt; &gt; other thread I see Dmitri H. being copied. So which/both of you involved<br>&gt; &gt; with this effort? ...or are you one and the same given the similarity of<br>&gt; the<br>&gt; &gt; name? /me hopes he doesn&#39;t look like a total idiot now<br>&gt;<br>&gt; I&#39;m just one Dmitri.<br>&gt;<br>&gt; &gt; Second given commit access limits it may make sense for those of us on<br>&gt; the<br>&gt; &gt; &quot;outside&quot; to work in same fork (e.g. added as collaborators)? It may help<br>&gt; &gt; avoid pull request overhead between us while work is underway? My github<br>&gt; &gt; identity is &quot;shawnce&quot;. I have a fork created<br>&gt; &gt; https://github.com/shawnce/swift if so desired to use that as the<br>&gt; sandbox<br>&gt; &gt; (set default branch to swift-3-indexing-model). ...looking for guidance<br>&gt; on<br>&gt; &gt; how best to make things work efficiently.<br>&gt;<br>&gt; I&#39;ll check if it is possible to give you commit access.<br>&gt;<br>&gt; &gt; I am digging into<br>&gt; &gt;<br>&gt; https://github.com/apple/swift/blob/master/test/Prototypes/CollectionsMoveIndices.swift<br>&gt; &gt; to understand the scope of the work involved.<br>&gt; &gt;<br>&gt; &gt; Anyway I am looking at the current state of the code and I see things<br>&gt; like<br>&gt; &gt; the following...<br>&gt; &gt;    @available(*, unavailable, renamed=&quot;MutableCollection&quot;)<br>&gt; &gt;     public typealias MutableCollectionType = MutableCollection<br>&gt; &gt; ...so it looks like the use of Type is being dropped in the updated<br>&gt; naming<br>&gt; &gt; methodology? So this obviously implies... right?<br>&gt; &gt; //     [new]   protocol BidirectionalCollection : Collection {}<br>&gt; &gt; //     [new]   protocol RandomAccessCollection : BidirectionalCollection<br>&gt;<br>&gt; Right.  The prototype is currently written using old names.<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160222/1c952f99/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>February 21, 2016 at 04:00:00pm</p></header><div class="content"><p>On Sun, Feb 21, 2016 at 4:21 PM, Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt; As an FYI I have been playing around with things mostly to get my head<br>&gt; around the base changes and implications on the existing stdlib<br>&gt; implementation. It is very early still. I have no issues throwing it away if<br>&gt; I am way off the rails.<br></p><p>Thank you!  I took a look briefly, and I have a question -- why are<br>you using ~Indexable as the base protocol?  Indexable itself only<br>exists to work around a compiler limitation and implement<br>IndexingIterator.  Otherwise we should be using Collection.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>February 22, 2016 at 12:00:00am</p></header><div class="content"><p>Yeah I was fairly sure that was the direction it should go. Was trying to<br>understand what existed and why. I was also bucketing things in a<br>nondestructive way in the short term until I understood more about the<br>existing Collection code.<br></p><p>Do we want a ForewardCollection like the prototype or just refocus<br>Collection on that with the two new subprotocols adding in the other<br>behaviors (existing Collection is mostly forward indexing with where on<br>Index type to adjust behavior).<br>On Sun, Feb 21, 2016 at 4:26 PM Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br></p><p>&gt; On Sun, Feb 21, 2016 at 4:21 PM, Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt; &gt; As an FYI I have been playing around with things mostly to get my head<br>&gt; &gt; around the base changes and implications on the existing stdlib<br>&gt; &gt; implementation. It is very early still. I have no issues throwing it<br>&gt; away if<br>&gt; &gt; I am way off the rails.<br>&gt;<br>&gt; Thank you!  I took a look briefly, and I have a question -- why are<br>&gt; you using ~Indexable as the base protocol?  Indexable itself only<br>&gt; exists to work around a compiler limitation and implement<br>&gt; IndexingIterator.  Otherwise we should be using Collection.<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160222/ebb907ac/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>February 21, 2016 at 04:00:00pm</p></header><div class="content"><p>On Sun, Feb 21, 2016 at 4:35 PM, Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt; Yeah I was fairly sure that was the direction it should go. Was trying to<br>&gt; understand what existed and why. I was also bucketing things in a<br>&gt; nondestructive way in the short term until I understood more about the<br>&gt; existing Collection code.<br>&gt;<br>&gt; Do we want a ForewardCollection like the prototype or just refocus<br>&gt; Collection on that with the two new subprotocols adding in the other<br>&gt; behaviors (existing Collection is mostly forward indexing with where on<br>&gt; Index type to adjust behavior).<br></p><p>I think ForwardCollection should be called just Collection, and have<br>two refined protocols just as you are describing it.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February 22, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Feb 21, 2016, at 9:57 AM, Shawn Erickson via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; First I see that Dmitri G. appears to be most involved with this yet in the other thread I see Dmitri H. being copied.<br></p><p>That&#39;s just a romanization failure. Dmitri G. and H. are the same person.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160222/623cbfce/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>March  9, 2016 at 07:00:00pm</p></header><div class="content"><p>Dmitri, just checking in... I have some more time to work on things it<br>looks like. I will continue on Flatten.swift but that may go quickly. Just<br>wanted some guidance on what to work on next (or what not to work on). I<br>don&#39;t want to duplicate anything you may be working on. For now I will<br>assume I should just continue on getting things back to a compiling state<br>(and less on backfilling missing implementation).<br></p><p>Current state of my hacking...<br>https://github.com/apple/swift/pull/1592<br>https://github.com/apple/swift/pull/1588<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160309/9b1d201e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>March  9, 2016 at 11:00:00am</p></header><div class="content"><p>On Wed, Mar 9, 2016 at 11:17 AM, Shawn Erickson via swift-dev<br>&lt;swift-dev at swift.org&gt; wrote:<br>&gt; Dmitri, just checking in... I have some more time to work on things it looks<br>&gt; like. I will continue on Flatten.swift but that may go quickly. Just wanted<br>&gt; some guidance on what to work on next (or what not to work on). I don&#39;t want<br>&gt; to duplicate anything you may be working on. For now I will assume I should<br>&gt; just continue on getting things back to a compiling state (and less on<br>&gt; backfilling missing implementation).<br></p><p>Hi Shawn,<br></p><p>Sorry I haven&#39;t had time to work on the code or review PRs yesterday.<br>When the standard library compiles, we should continue with fixing the<br>build for other components -- the SDK overlays and unittest support<br>libraries, so that `build-script -R` can finish cleanly.<br></p><p>&gt; Current state of my hacking...<br>&gt; https://github.com/apple/swift/pull/1592<br>&gt; https://github.com/apple/swift/pull/1588<br></p><p>Thank you!  I was reviewing these this morning, and I want to merge<br>them shortly.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>March  9, 2016 at 11:00:00pm</p></header><div class="content"><p>I see a handful of issues like the following coming about because of<br>changes to `Range`. In the past `Range` conformed to `Collection` so<br>`count` came from `Collection` which returned a type of<br>`ForwardIndex.Distance` (e.g. `_SignedInteger`). It now comes from<br>`Strideable`’s `distance(to:)` which returns `Strideable.Stride` (e.g.<br>`SignedNumber`).<br></p><p>error: value of type &#39;C.Index.Stride&#39; has no member &#39;toIntMax&#39;<br>  let len = range.count.toIntMax()<br>            ~~~~~~^~~~~ ~~~~~~~~<br></p><p>Additionally when trying to provide `Strideable` optimized `Collection`<br>default implementations I hit issues like the following (note<br>`Collection.IndexDistance` minimally conforms to SignedInteger). I picked<br>`Strideable` as the optimization point since `RandomAccessCollection.Index`<br>minimally conforms to `Strideable` and `Strideable` provides the first<br>level of possible optimizations after `Comparable`.<br></p><p>extension Collection where Index : Strideable {<br>  public func next(i: Index) -&gt; Index {<br>    return i.advanced(by: 1) &lt;— this is ok<br>  }<br>  public func advance(i: Index, by n: IndexDistance) -&gt; Index {<br>    return i.advanced(by: n) &lt;— this errors<br>  }<br>…<br>}<br></p><p>error: cannot invoke &#39;advanced&#39; with an argument list of type &#39;(by:<br>Self.IndexDistance)&#39;<br>    return i.advanced(by: n)<br>             ^<br>note: expected an argument list of type &#39;(by: Self.Index.Stride)&#39;<br>    return i.advanced(by: n)<br></p><p>Looking at things (see below ASCII art) I see that `_SignedInteger`<br>conforms to `SignedNumber `(and `SignedInteger` conforms to<br>`_SignedInteger`). `SignedNumber` doesn’t provide toIntMax nor can it act<br>as an `SignedInteger`. The use of `SignedNumber` in `Strideable` is hence<br>problematic. I guess the reason for `SignedNumber` is to let distances in<br>Strideable support non-integer types?<br></p><p>I am not sure the best path forward at the moment. Do I attempt to scope<br>things to `Strideable` where `Stride : SignedInteger` since<br>`Collection.IndexDistance` – as currently defined – doesn’t allow for<br>non-integer types? I am not sure the allowable scoping for Range in that<br>situation? ...or do we change `Strideable.Stride` to minimally conform to<br>`SignedInteger`? ...or?<br></p><p>Pardon my naïvety in this area of things,<br>-Shawn<br></p><p>————————————————————————————————————————<br>Equatable<br>  ^<br>Comparable<br>  ^<br>Strideable (associatedtype Stride : SignedNumber) -&gt;<br>advanced(by:Self.Stride) &amp; distance(to: Self)<br>  ^<br>  ^              SignedNumber<br>  ^                 ^<br>Integer &amp; _SignedInteger —&gt; func toIntMax()<br>  ^<br>SignedInteger —&gt; func toIntMax()<br>————————————————————————————————————————<br>Indexable (associatedtype Index : Comparable)<br>  ^<br>Collection (associatedtype IndexDistance : SignedInteger)<br>  ^<br>BidrectionalCollection<br>  ^<br>RandomAccessCollection (associatedtype Index : Strideable)<br>————————————————————————————————————————<br>MutableIndexable (associatedtype Index : Comparable)<br>  ^<br>  ^    Collection<br>  ^       ^<br>MutableCollection (associatedtype IndexDistance : SignedInteger)<br>————————————————————————————————————————<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160309/b163cd22/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>March  9, 2016 at 03:00:00pm</p></header><div class="content"><p>On Wed, Mar 9, 2016 at 3:52 PM, Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt; I see a handful of issues like the following coming about because of changes<br>&gt; to `Range`. In the past `Range` conformed to `Collection` so `count` came<br>&gt; from `Collection` which returned a type of `ForwardIndex.Distance` (e.g.<br>&gt; `_SignedInteger`). It now comes from `Strideable`’s `distance(to:)` which<br>&gt; returns `Strideable.Stride` (e.g. `SignedNumber`).<br></p><p>Yeah, we had those.  Try pulling from the branch, I have resolved some<br>of these issues.  I&#39;ll be working on HashedCollections next, feel free<br>to take Flatten and FlatMap.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>March 10, 2016 at 12:00:00am</p></header><div class="content"><p>On Wed, Mar 9, 2016 at 3:59 PM Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br></p><p>&gt; On Wed, Mar 9, 2016 at 3:52 PM, Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt; &gt; I see a handful of issues like the following coming about because of<br>&gt; changes<br>&gt; &gt; to `Range`. In the past `Range` conformed to `Collection` so `count` came<br>&gt; &gt; from `Collection` which returned a type of `ForwardIndex.Distance` (e.g.<br>&gt; &gt; `_SignedInteger`). It now comes from `Strideable`’s `distance(to:)` which<br>&gt; &gt; returns `Strideable.Stride` (e.g. `SignedNumber`).<br>&gt;<br>&gt; Yeah, we had those.  Try pulling from the branch, I have resolved some<br>&gt; of these issues.  I&#39;ll be working on HashedCollections next, feel free<br>&gt; to take Flatten and FlatMap.<br>&gt;<br></p><p>Ah I see... should have thought of that fix, forest for the trees.<br></p><p>You also fixed some of the things I had fixed locally! :)<br></p><p>Will put aside my changes for all but Flatten at the moment.<br></p><p>Thanks,<br>-Shawn<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160310/2619f8b2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>March 10, 2016 at 10:00:00pm</p></header><div class="content"><p>Hi everyone,<br></p><p>I just wanted to announce that we have sufficient change on the<br>swift-3-indexing-model branch so that we can build the core standard<br>library and StdlibUnittest.  We achieved this by putting the protocol<br>new structure into place, and stubbing out with fatalError() or just<br>commenting out parts that didn&#39;t compile.  Now we have a baseline that<br>we won&#39;t regress, and we are starting to work towards improving it,<br>making existing tests pass, and then writing new tests, and addressing<br>TODOs and FIXMEs that we left in the code as we were doing the first<br>pass.<br></p><p>Here&#39;s the most recent pull request from Shawn where he starts to fix<br>the tests: https://github.com/apple/swift/pull/1632<br></p><p>Now we are in the &quot;massively-parallel&quot; stage of this project and we,<br>as always, welcome contributions to this branch!<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>March 10, 2016 at 10:00:00pm</p></header><div class="content"><p>Great work! I&#39;ll take a closer look this weekend. Sorry for not being involved at all this past week(s).<br></p><p>Austin<br></p><p>&gt; On Mar 10, 2016, at 10:48 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hi everyone,<br>&gt; <br>&gt; I just wanted to announce that we have sufficient change on the<br>&gt; swift-3-indexing-model branch so that we can build the core standard<br>&gt; library and StdlibUnittest.  We achieved this by putting the protocol<br>&gt; new structure into place, and stubbing out with fatalError() or just<br>&gt; commenting out parts that didn&#39;t compile.  Now we have a baseline that<br>&gt; we won&#39;t regress, and we are starting to work towards improving it,<br>&gt; making existing tests pass, and then writing new tests, and addressing<br>&gt; TODOs and FIXMEs that we left in the code as we were doing the first<br>&gt; pass.<br>&gt; <br>&gt; Here&#39;s the most recent pull request from Shawn where he starts to fix<br>&gt; the tests: https://github.com/apple/swift/pull/1632<br>&gt; <br>&gt; Now we are in the &quot;massively-parallel&quot; stage of this project and we,<br>&gt; as always, welcome contributions to this branch!<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>March 11, 2016 at 11:00:00am</p></header><div class="content"><p>Nice work Shawn, Austin, Dmitri!<br></p><p>Jordan<br></p><p>&gt; On Mar 10, 2016, at 22:50 , Austin Zheng via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Great work! I&#39;ll take a closer look this weekend. Sorry for not being involved at all this past week(s).<br>&gt; <br>&gt; Austin<br>&gt; <br>&gt;&gt; On Mar 10, 2016, at 10:48 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi everyone,<br>&gt;&gt; <br>&gt;&gt; I just wanted to announce that we have sufficient change on the<br>&gt;&gt; swift-3-indexing-model branch so that we can build the core standard<br>&gt;&gt; library and StdlibUnittest.  We achieved this by putting the protocol<br>&gt;&gt; new structure into place, and stubbing out with fatalError() or just<br>&gt;&gt; commenting out parts that didn&#39;t compile.  Now we have a baseline that<br>&gt;&gt; we won&#39;t regress, and we are starting to work towards improving it,<br>&gt;&gt; making existing tests pass, and then writing new tests, and addressing<br>&gt;&gt; TODOs and FIXMEs that we left in the code as we were doing the first<br>&gt;&gt; pass.<br>&gt;&gt; <br>&gt;&gt; Here&#39;s the most recent pull request from Shawn where he starts to fix<br>&gt;&gt; the tests: https://github.com/apple/swift/pull/1632<br>&gt;&gt; <br>&gt;&gt; Now we are in the &quot;massively-parallel&quot; stage of this project and we,<br>&gt;&gt; as always, welcome contributions to this branch!<br>&gt;&gt; <br>&gt;&gt; Dmitri<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>March 14, 2016 at 06:00:00pm</p></header><div class="content"><p>On Thu, Mar 10, 2016 at 10:49 PM Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br>wrote:<br></p><p>&gt; Hi everyone,<br>&gt;<br>&gt; I just wanted to announce that we have sufficient change on the<br>&gt; swift-3-indexing-model branch so that we can build the core standard<br>&gt; library and StdlibUnittest.  We achieved this by putting the protocol<br>&gt; new structure into place, and stubbing out with fatalError() or just<br>&gt; commenting out parts that didn&#39;t compile.  Now we have a baseline that<br>&gt; we won&#39;t regress, and we are starting to work towards improving it,<br>&gt; making existing tests pass, and then writing new tests, and addressing<br>&gt; TODOs and FIXMEs that we left in the code as we were doing the first<br>&gt; pass.<br>&gt;<br>&gt; Here&#39;s the most recent pull request from Shawn where he starts to fix<br>&gt; the tests: https://github.com/apple/swift/pull/1632<br>&gt;<br>&gt; Now we are in the &quot;massively-parallel&quot; stage of this project and we,<br>&gt; as always, welcome contributions to this branch!<br>&gt;<br></p><p>Is their a reason we are suppressing sort in place for MutableCollections?<br></p><p>benchmark/single-source/StaticArray.swift:86:17: error: &#39;sort()&#39; has been<br>renamed to &#39;sorted&#39;<br>    staticArray.sort()<br>                ^~~~<br>                sorted<br>Swift.MutableCollection:3:17: note: &#39;sort()&#39; has been explicitly marked<br>unavailable here<br>    public func sort() -&gt; [Self.Iterator.Element]<br>                ^<br></p><p>In CollectionAlgorithms we have `sortInPlace` marked as unavailable renamed<br>to `sort` and `sort -&gt; [Iterator.Element]` marked as unavailable renamed<br>`sorted`.<br></p><p>I believe we want `sort()` to be the mutating one (in place) and `sorted()`<br>to return a sorted version, right? I poke around more on this. It could be<br>we have an overzealous unavailable?<br></p><p><br>----------<br>extension MutableCollection<br>  where<br>  Self : RandomAccessCollection,<br>  Self.Iterator.Element : Comparable {<br></p><p>  @available(*, unavailable, renamed=&quot;sort&quot;)<br>  public mutating func sortInPlace() {<br>    fatalError(&quot;unavailable function can&#39;t be called&quot;)<br>  }<br>}<br></p><p>extension MutableCollection where Self.Iterator.Element : Comparable {<br>  @available(*, unavailable, renamed=&quot;sorted&quot;)<br>  public func sort() -&gt; [Iterator.Element] {<br>    fatalError(&quot;unavailable function can&#39;t be called&quot;)<br>  }<br></p><p>  @available(*, unavailable, renamed=&quot;sorted(isOrderedBefore:)&quot;)<br>  public func sort(<br>    @noescape isOrderedBefore: (Iterator.Element, Iterator.Element) -&gt; Bool<br>  ) -&gt; [Iterator.Element] {<br>    fatalError(&quot;unavailable function can&#39;t be called&quot;)<br>  }<br>}<br>-----------<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160314/510b0a08/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>March 14, 2016 at 12:00:00pm</p></header><div class="content"><p>On Mon, Mar 14, 2016 at 11:57 AM, Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Thu, Mar 10, 2016 at 10:49 PM Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br>&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hi everyone,<br>&gt;&gt;<br>&gt;&gt; I just wanted to announce that we have sufficient change on the<br>&gt;&gt; swift-3-indexing-model branch so that we can build the core standard<br>&gt;&gt; library and StdlibUnittest.  We achieved this by putting the protocol<br>&gt;&gt; new structure into place, and stubbing out with fatalError() or just<br>&gt;&gt; commenting out parts that didn&#39;t compile.  Now we have a baseline that<br>&gt;&gt; we won&#39;t regress, and we are starting to work towards improving it,<br>&gt;&gt; making existing tests pass, and then writing new tests, and addressing<br>&gt;&gt; TODOs and FIXMEs that we left in the code as we were doing the first<br>&gt;&gt; pass.<br>&gt;&gt;<br>&gt;&gt; Here&#39;s the most recent pull request from Shawn where he starts to fix<br>&gt;&gt; the tests: https://github.com/apple/swift/pull/1632<br>&gt;&gt;<br>&gt;&gt; Now we are in the &quot;massively-parallel&quot; stage of this project and we,<br>&gt;&gt; as always, welcome contributions to this branch!<br>&gt;<br>&gt;<br>&gt; Is their a reason we are suppressing sort in place for MutableCollections?<br></p><p>No, that wasn&#39;t intentional.<br></p><p>&gt; benchmark/single-source/StaticArray.swift:86:17: error: &#39;sort()&#39; has been<br>&gt; renamed to &#39;sorted&#39;<br>&gt;     staticArray.sort()<br>&gt;                 ^~~~<br>&gt;                 sorted<br>&gt; Swift.MutableCollection:3:17: note: &#39;sort()&#39; has been explicitly marked<br>&gt; unavailable here<br>&gt;     public func sort() -&gt; [Self.Iterator.Element]<br>&gt;                 ^<br>&gt;<br>&gt; In CollectionAlgorithms we have `sortInPlace` marked as unavailable renamed<br>&gt; to `sort` and `sort -&gt; [Iterator.Element]` marked as unavailable renamed<br>&gt; `sorted`.<br>&gt;<br>&gt; I believe we want `sort()` to be the mutating one (in place) and `sorted()`<br>&gt; to return a sorted version, right? I poke around more on this. It could be<br>&gt; we have an overzealous unavailable?<br></p><p>I think that&#39;s right.  There is a mutating implementation already in<br>CollectionAlgorithms.swift.gyb, which is followed by an unavailable<br>one with a renamed clause.  I think we should remove the unavailable<br>one.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>March 15, 2016 at 02:00:00am</p></header><div class="content"><p>On Thu, Mar 10, 2016 at 10:49 PM Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br>wrote:<br></p><p>&gt; Hi everyone,<br>&gt;<br>&gt; I just wanted to announce that we have sufficient change on the<br>&gt; swift-3-indexing-model branch so that we can build the core standard<br>&gt; library and StdlibUnittest.  We achieved this by putting the protocol<br>&gt; new structure into place, and stubbing out with fatalError() or just<br>&gt; commenting out parts that didn&#39;t compile.  Now we have a baseline that<br>&gt; we won&#39;t regress, and we are starting to work towards improving it,<br>&gt; making existing tests pass, and then writing new tests, and addressing<br>&gt; TODOs and FIXMEs that we left in the code as we were doing the first<br>&gt; pass.<br>&gt;<br>&gt; Here&#39;s the most recent pull request from Shawn where he starts to fix<br>&gt; the tests: https://github.com/apple/swift/pull/1632<br>&gt;<br>&gt; Now we are in the &quot;massively-parallel&quot; stage of this project and we,<br>&gt; as always, welcome contributions to this branch!<br>&gt;<br></p><p>FYI<br></p><p>I am working on the following:<br></p><p>FAIL: Swift :: 1_stdlib/StringDiagnostics.swift<br>FAIL: Swift :: 1_stdlib/StringDiagnostics_without_Foundation.swift<br>...and looking at converting String.XxxxIndexes to the new index style<br>while maintaining existing public API.<br></p><p>-Shawn<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160315/353b6f79/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>March 15, 2016 at 01:00:00am</p></header><div class="content"><p>On Mon, Mar 14, 2016 at 7:59 PM, Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Thu, Mar 10, 2016 at 10:49 PM Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br>&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hi everyone,<br>&gt;&gt;<br>&gt;&gt; I just wanted to announce that we have sufficient change on the<br>&gt;&gt; swift-3-indexing-model branch so that we can build the core standard<br>&gt;&gt; library and StdlibUnittest.  We achieved this by putting the protocol<br>&gt;&gt; new structure into place, and stubbing out with fatalError() or just<br>&gt;&gt; commenting out parts that didn&#39;t compile.  Now we have a baseline that<br>&gt;&gt; we won&#39;t regress, and we are starting to work towards improving it,<br>&gt;&gt; making existing tests pass, and then writing new tests, and addressing<br>&gt;&gt; TODOs and FIXMEs that we left in the code as we were doing the first<br>&gt;&gt; pass.<br>&gt;&gt;<br>&gt;&gt; Here&#39;s the most recent pull request from Shawn where he starts to fix<br>&gt;&gt; the tests: https://github.com/apple/swift/pull/1632<br>&gt;&gt;<br>&gt;&gt; Now we are in the &quot;massively-parallel&quot; stage of this project and we,<br>&gt;&gt; as always, welcome contributions to this branch!<br>&gt;<br>&gt;<br>&gt; FYI<br>&gt;<br>&gt; I am working on the following:<br>&gt;<br>&gt; FAIL: Swift :: 1_stdlib/StringDiagnostics.swift<br>&gt; FAIL: Swift :: 1_stdlib/StringDiagnostics_without_Foundation.swift<br>&gt; ...and looking at converting String.XxxxIndexes to the new index style while<br>&gt; maintaining existing public API.<br></p><p>There doesn&#39;t seem to be many tests actively failing in the primary<br>testsuite, so I&#39;ll be working on making StdlibCollectionUnittest<br>compile, which will allow us to run the validation testsuite.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>March 21, 2016 at 06:00:00pm</p></header><div class="content"><p>Anything I can help with on this effort? It looks like things are moving<br>along among the Apple folks. Not sure how to jump in without stepping on in<br>flight work, etc.<br></p><p>On Tue, Mar 15, 2016 at 1:39 AM Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br></p><p>&gt; On Mon, Mar 14, 2016 at 7:59 PM, Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; On Thu, Mar 10, 2016 at 10:49 PM Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br>&gt; &gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Hi everyone,<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I just wanted to announce that we have sufficient change on the<br>&gt; &gt;&gt; swift-3-indexing-model branch so that we can build the core standard<br>&gt; &gt;&gt; library and StdlibUnittest.  We achieved this by putting the protocol<br>&gt; &gt;&gt; new structure into place, and stubbing out with fatalError() or just<br>&gt; &gt;&gt; commenting out parts that didn&#39;t compile.  Now we have a baseline that<br>&gt; &gt;&gt; we won&#39;t regress, and we are starting to work towards improving it,<br>&gt; &gt;&gt; making existing tests pass, and then writing new tests, and addressing<br>&gt; &gt;&gt; TODOs and FIXMEs that we left in the code as we were doing the first<br>&gt; &gt;&gt; pass.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Here&#39;s the most recent pull request from Shawn where he starts to fix<br>&gt; &gt;&gt; the tests: https://github.com/apple/swift/pull/1632<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Now we are in the &quot;massively-parallel&quot; stage of this project and we,<br>&gt; &gt;&gt; as always, welcome contributions to this branch!<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; FYI<br>&gt; &gt;<br>&gt; &gt; I am working on the following:<br>&gt; &gt;<br>&gt; &gt; FAIL: Swift :: 1_stdlib/StringDiagnostics.swift<br>&gt; &gt; FAIL: Swift :: 1_stdlib/StringDiagnostics_without_Foundation.swift<br>&gt; &gt; ...and looking at converting String.XxxxIndexes to the new index style<br>&gt; while<br>&gt; &gt; maintaining existing public API.<br>&gt;<br>&gt; There doesn&#39;t seem to be many tests actively failing in the primary<br>&gt; testsuite, so I&#39;ll be working on making StdlibCollectionUnittest<br>&gt; compile, which will allow us to run the validation testsuite.<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160321/b3240481/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>April 10, 2016 at 10:00:00pm</p></header><div class="content"><p>I&#39;m really sorry for dropping the ball and disappearing off the list. I&#39;d<br>like to help out if I can. I&#39;ll check out the current branch tomorrow and<br>see what the status of the work is, but let me know if everything is done<br>already/there&#39;s something in particular that should be worked on.<br></p><p>Austin<br></p><p>On Mon, Mar 21, 2016 at 11:39 AM, Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br></p><p>&gt; Anything I can help with on this effort? It looks like things are moving<br>&gt; along among the Apple folks. Not sure how to jump in without stepping on in<br>&gt; flight work, etc.<br>&gt;<br>&gt; On Tue, Mar 15, 2016 at 1:39 AM Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; On Mon, Mar 14, 2016 at 7:59 PM, Shawn Erickson &lt;shawnce at gmail.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; On Thu, Mar 10, 2016 at 10:49 PM Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br>&gt;&gt; &gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Hi everyone,<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; I just wanted to announce that we have sufficient change on the<br>&gt;&gt; &gt;&gt; swift-3-indexing-model branch so that we can build the core standard<br>&gt;&gt; &gt;&gt; library and StdlibUnittest.  We achieved this by putting the protocol<br>&gt;&gt; &gt;&gt; new structure into place, and stubbing out with fatalError() or just<br>&gt;&gt; &gt;&gt; commenting out parts that didn&#39;t compile.  Now we have a baseline that<br>&gt;&gt; &gt;&gt; we won&#39;t regress, and we are starting to work towards improving it,<br>&gt;&gt; &gt;&gt; making existing tests pass, and then writing new tests, and addressing<br>&gt;&gt; &gt;&gt; TODOs and FIXMEs that we left in the code as we were doing the first<br>&gt;&gt; &gt;&gt; pass.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Here&#39;s the most recent pull request from Shawn where he starts to fix<br>&gt;&gt; &gt;&gt; the tests: https://github.com/apple/swift/pull/1632<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Now we are in the &quot;massively-parallel&quot; stage of this project and we,<br>&gt;&gt; &gt;&gt; as always, welcome contributions to this branch!<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; FYI<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I am working on the following:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; FAIL: Swift :: 1_stdlib/StringDiagnostics.swift<br>&gt;&gt; &gt; FAIL: Swift :: 1_stdlib/StringDiagnostics_without_Foundation.swift<br>&gt;&gt; &gt; ...and looking at converting String.XxxxIndexes to the new index style<br>&gt;&gt; while<br>&gt;&gt; &gt; maintaining existing public API.<br>&gt;&gt;<br>&gt;&gt; There doesn&#39;t seem to be many tests actively failing in the primary<br>&gt;&gt; testsuite, so I&#39;ll be working on making StdlibCollectionUnittest<br>&gt;&gt; compile, which will allow us to run the validation testsuite.<br>&gt;&gt;<br>&gt;&gt; Dmitri<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160410/74e641e7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 11, 2016 at 11:00:00am</p></header><div class="content"><p>on Sun Apr 10 2016, Austin Zheng &lt;austinzheng-AT-gmail.com&gt; wrote:<br></p><p>&gt; I&#39;m really sorry for dropping the ball and disappearing off the list. I&#39;d like<br>&gt; to help out if I can. I&#39;ll check out the current branch tomorrow and see what<br>&gt; the status of the work is, but let me know if everything is done already/there&#39;s<br>&gt; something in particular that should be worked on.<br></p><p>Dmitri may have other ideas, but one thing we haven&#39;t done is to take<br>advantage of the new model by removing references from indices.  I&#39;d<br>like to prove that the new model does what it&#39;s supposed to.  You might<br>try simplifying the indices for Set and Dictionary.  It should be<br>possible to represent them as a wrapper around an Int.<br></p><p>&gt;<br>&gt;<br>&gt; Austin<br>&gt;<br>&gt; On Mon, Mar 21, 2016 at 11:39 AM, Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt;<br>&gt;     Anything I can help with on this effort? It looks like things are moving<br>&gt;     along among the Apple folks. Not sure how to jump in without stepping on in<br>&gt;     flight work, etc.<br>&gt;<br>&gt;     On Tue, Mar 15, 2016 at 1:39 AM Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;<br>&gt;     On Mon, Mar 14, 2016 at 7:59 PM, Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt;         &gt;<br>&gt;         &gt;<br>&gt;         &gt; On Thu, Mar 10, 2016 at 10:49 PM Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br>&gt;         &gt; wrote:<br>&gt;         &gt;&gt;<br>&gt;         &gt;&gt; Hi everyone,<br>&gt;         &gt;&gt;<br>&gt;         &gt;&gt; I just wanted to announce that we have sufficient change on the<br>&gt;         &gt;&gt; swift-3-indexing-model branch so that we can build the core standard<br>&gt;         &gt;&gt; library and StdlibUnittest. We achieved this by putting the protocol<br>&gt;         &gt;&gt; new structure into place, and stubbing out with fatalError() or just<br>&gt;         &gt;&gt; commenting out parts that didn&#39;t compile. Now we have a baseline that<br>&gt;         &gt;&gt; we won&#39;t regress, and we are starting to work towards improving it,<br>&gt;         &gt;&gt; making existing tests pass, and then writing new tests, and<br>&gt;         addressing<br>&gt;         &gt;&gt; TODOs and FIXMEs that we left in the code as we were doing the first<br>&gt;         &gt;&gt; pass.<br>&gt;         &gt;&gt;<br>&gt;         &gt;&gt; Here&#39;s the most recent pull request from Shawn where he starts to fix<br>&gt;         &gt;&gt; the tests: https://github.com/apple/swift/pull/1632<br>&gt;         &gt;&gt;<br>&gt;         &gt;&gt; Now we are in the &quot;massively-parallel&quot; stage of this project and we,<br>&gt;         &gt;&gt; as always, welcome contributions to this branch!<br>&gt;         &gt;<br>&gt;         &gt;<br>&gt;         &gt; FYI<br>&gt;         &gt;<br>&gt;         &gt; I am working on the following:<br>&gt;         &gt;<br>&gt;         &gt; FAIL: Swift :: 1_stdlib/StringDiagnostics.swift<br>&gt;         &gt; FAIL: Swift :: 1_stdlib/StringDiagnostics_without_Foundation.swift<br>&gt;         &gt; ...and looking at converting String.XxxxIndexes to the new index style<br>&gt;         while<br>&gt;         &gt; maintaining existing public API.<br>&gt;<br>&gt;         There doesn&#39;t seem to be many tests actively failing in the primary<br>&gt;         testsuite, so I&#39;ll be working on making StdlibCollectionUnittest<br>&gt;         compile, which will allow us to run the validation testsuite.<br>&gt;<br>&gt;         Dmitri<br>&gt;<br>&gt;         --<br>&gt;         main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;         (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>April 11, 2016 at 11:00:00am</p></header><div class="content"><p>Excellent! I&#39;ll begin working on this today.<br></p><p>Austin<br></p><p>&gt; On Apr 11, 2016, at 11:07 AM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Sun Apr 10 2016, Austin Zheng &lt;austinzheng-AT-gmail.com &lt;http://austinzheng-at-gmail.com/&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; I&#39;m really sorry for dropping the ball and disappearing off the list. I&#39;d like<br>&gt;&gt; to help out if I can. I&#39;ll check out the current branch tomorrow and see what<br>&gt;&gt; the status of the work is, but let me know if everything is done already/there&#39;s<br>&gt;&gt; something in particular that should be worked on.<br>&gt; <br>&gt; Dmitri may have other ideas, but one thing we haven&#39;t done is to take<br>&gt; advantage of the new model by removing references from indices.  I&#39;d<br>&gt; like to prove that the new model does what it&#39;s supposed to.  You might<br>&gt; try simplifying the indices for Set and Dictionary.  It should be<br>&gt; possible to represent them as a wrapper around an Int.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Austin<br>&gt;&gt; <br>&gt;&gt; On Mon, Mar 21, 2016 at 11:39 AM, Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;    Anything I can help with on this effort? It looks like things are moving<br>&gt;&gt;    along among the Apple folks. Not sure how to jump in without stepping on in<br>&gt;&gt;    flight work, etc.<br>&gt;&gt; <br>&gt;&gt;    On Tue, Mar 15, 2016 at 1:39 AM Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;    On Mon, Mar 14, 2016 at 7:59 PM, Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Thu, Mar 10, 2016 at 10:49 PM Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi everyone,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I just wanted to announce that we have sufficient change on the<br>&gt;&gt;&gt;&gt; swift-3-indexing-model branch so that we can build the core standard<br>&gt;&gt;&gt;&gt; library and StdlibUnittest. We achieved this by putting the protocol<br>&gt;&gt;&gt;&gt; new structure into place, and stubbing out with fatalError() or just<br>&gt;&gt;&gt;&gt; commenting out parts that didn&#39;t compile. Now we have a baseline that<br>&gt;&gt;&gt;&gt; we won&#39;t regress, and we are starting to work towards improving it,<br>&gt;&gt;&gt;&gt; making existing tests pass, and then writing new tests, and<br>&gt;&gt;        addressing<br>&gt;&gt;&gt;&gt; TODOs and FIXMEs that we left in the code as we were doing the first<br>&gt;&gt;&gt;&gt; pass.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Here&#39;s the most recent pull request from Shawn where he starts to fix<br>&gt;&gt;&gt;&gt; the tests: https://github.com/apple/swift/pull/1632<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Now we are in the &quot;massively-parallel&quot; stage of this project and we,<br>&gt;&gt;&gt;&gt; as always, welcome contributions to this branch!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; FYI<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I am working on the following:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; FAIL: Swift :: 1_stdlib/StringDiagnostics.swift<br>&gt;&gt;&gt; FAIL: Swift :: 1_stdlib/StringDiagnostics_without_Foundation.swift<br>&gt;&gt;&gt; ...and looking at converting String.XxxxIndexes to the new index style<br>&gt;&gt;        while<br>&gt;&gt;&gt; maintaining existing public API.<br>&gt;&gt; <br>&gt;&gt;        There doesn&#39;t seem to be many tests actively failing in the primary<br>&gt;&gt;        testsuite, so I&#39;ll be working on making StdlibCollectionUnittest<br>&gt;&gt;        compile, which will allow us to run the validation testsuite.<br>&gt;&gt; <br>&gt;&gt;        Dmitri<br>&gt;&gt; <br>&gt;&gt;        --<br>&gt;&gt;        main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt;        (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;&gt; <br>&gt; <br>&gt; -- <br>&gt; Dave<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160411/81915f26/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>April 11, 2016 at 06:00:00pm</p></header><div class="content"><p>Anything to attempt on strings? I see you are considering consolidating<br>down to a single index type for those, etc. Of course you also imply a<br>large string rework that may happen in the future.<br></p><p>-Shawn<br></p><p>On Mon, Apr 11, 2016 at 11:07 AM Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; on Sun Apr 10 2016, Austin Zheng &lt;austinzheng-AT-gmail.com&gt; wrote:<br>&gt;<br>&gt; &gt; I&#39;m really sorry for dropping the ball and disappearing off the list.<br>&gt; I&#39;d like<br>&gt; &gt; to help out if I can. I&#39;ll check out the current branch tomorrow and see<br>&gt; what<br>&gt; &gt; the status of the work is, but let me know if everything is done<br>&gt; already/there&#39;s<br>&gt; &gt; something in particular that should be worked on.<br>&gt;<br>&gt; Dmitri may have other ideas, but one thing we haven&#39;t done is to take<br>&gt; advantage of the new model by removing references from indices.  I&#39;d<br>&gt; like to prove that the new model does what it&#39;s supposed to.  You might<br>&gt; try simplifying the indices for Set and Dictionary.  It should be<br>&gt; possible to represent them as a wrapper around an Int.<br>&gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; Austin<br>&gt; &gt;<br>&gt; &gt; On Mon, Mar 21, 2016 at 11:39 AM, Shawn Erickson &lt;shawnce at gmail.com&gt;<br>&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;     Anything I can help with on this effort? It looks like things are<br>&gt; moving<br>&gt; &gt;     along among the Apple folks. Not sure how to jump in without<br>&gt; stepping on in<br>&gt; &gt;     flight work, etc.<br>&gt; &gt;<br>&gt; &gt;     On Tue, Mar 15, 2016 at 1:39 AM Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br>&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;     On Mon, Mar 14, 2016 at 7:59 PM, Shawn Erickson &lt;shawnce at gmail.com&gt;<br>&gt; wrote:<br>&gt; &gt;         &gt;<br>&gt; &gt;         &gt;<br>&gt; &gt;         &gt; On Thu, Mar 10, 2016 at 10:49 PM Dmitri Gribenko &lt;<br>&gt; gribozavr at gmail.com&gt;<br>&gt; &gt;         &gt; wrote:<br>&gt; &gt;         &gt;&gt;<br>&gt; &gt;         &gt;&gt; Hi everyone,<br>&gt; &gt;         &gt;&gt;<br>&gt; &gt;         &gt;&gt; I just wanted to announce that we have sufficient change on<br>&gt; the<br>&gt; &gt;         &gt;&gt; swift-3-indexing-model branch so that we can build the core<br>&gt; standard<br>&gt; &gt;         &gt;&gt; library and StdlibUnittest. We achieved this by putting the<br>&gt; protocol<br>&gt; &gt;         &gt;&gt; new structure into place, and stubbing out with fatalError()<br>&gt; or just<br>&gt; &gt;         &gt;&gt; commenting out parts that didn&#39;t compile. Now we have a<br>&gt; baseline that<br>&gt; &gt;         &gt;&gt; we won&#39;t regress, and we are starting to work towards<br>&gt; improving it,<br>&gt; &gt;         &gt;&gt; making existing tests pass, and then writing new tests, and<br>&gt; &gt;         addressing<br>&gt; &gt;         &gt;&gt; TODOs and FIXMEs that we left in the code as we were doing<br>&gt; the first<br>&gt; &gt;         &gt;&gt; pass.<br>&gt; &gt;         &gt;&gt;<br>&gt; &gt;         &gt;&gt; Here&#39;s the most recent pull request from Shawn where he<br>&gt; starts to fix<br>&gt; &gt;         &gt;&gt; the tests: https://github.com/apple/swift/pull/1632<br>&gt; &gt;         &gt;&gt;<br>&gt; &gt;         &gt;&gt; Now we are in the &quot;massively-parallel&quot; stage of this project<br>&gt; and we,<br>&gt; &gt;         &gt;&gt; as always, welcome contributions to this branch!<br>&gt; &gt;         &gt;<br>&gt; &gt;         &gt;<br>&gt; &gt;         &gt; FYI<br>&gt; &gt;         &gt;<br>&gt; &gt;         &gt; I am working on the following:<br>&gt; &gt;         &gt;<br>&gt; &gt;         &gt; FAIL: Swift :: 1_stdlib/StringDiagnostics.swift<br>&gt; &gt;         &gt; FAIL: Swift ::<br>&gt; 1_stdlib/StringDiagnostics_without_Foundation.swift<br>&gt; &gt;         &gt; ...and looking at converting String.XxxxIndexes to the new<br>&gt; index style<br>&gt; &gt;         while<br>&gt; &gt;         &gt; maintaining existing public API.<br>&gt; &gt;<br>&gt; &gt;         There doesn&#39;t seem to be many tests actively failing in the<br>&gt; primary<br>&gt; &gt;         testsuite, so I&#39;ll be working on making StdlibCollectionUnittest<br>&gt; &gt;         compile, which will allow us to run the validation testsuite.<br>&gt; &gt;<br>&gt; &gt;         Dmitri<br>&gt; &gt;<br>&gt; &gt;         --<br>&gt; &gt;<br>&gt;  main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; &gt;         (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com<br>&gt; &gt;*/<br>&gt; &gt;<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160411/d7e4746f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 11, 2016 at 11:00:00am</p></header><div class="content"><p>on Mon Apr 11 2016, Shawn Erickson &lt;shawnce-AT-gmail.com&gt; wrote:<br></p><p>&gt; Anything to attempt on strings? I see you are considering consolidating down to<br>&gt; a single index type for those, etc. Of course you also imply a large string<br>&gt; rework that may happen in the future.<br></p><p>Yes, Strings need the same treatment (though it may be a bit simpler<br>since one doesn&#39;t have to unwind the broken double-indirection hack<br>mentioned in the paper).<br></p><p>&gt;<br>&gt;<br>&gt; -Shawn<br>&gt;<br>&gt; On Mon, Apr 11, 2016 at 11:07 AM Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;<br>&gt;     on Sun Apr 10 2016, Austin Zheng &lt;austinzheng-AT-gmail.com&gt; wrote:<br>&gt;<br>&gt;     &gt; I&#39;m really sorry for dropping the ball and disappearing off the list. I&#39;d<br>&gt;     like<br>&gt;     &gt; to help out if I can. I&#39;ll check out the current branch tomorrow and see<br>&gt;     what<br>&gt;     &gt; the status of the work is, but let me know if everything is done<br>&gt;     already/there&#39;s<br>&gt;     &gt; something in particular that should be worked on.<br>&gt;<br>&gt;     Dmitri may have other ideas, but one thing we haven&#39;t done is to take<br>&gt;     advantage of the new model by removing references from indices. I&#39;d<br>&gt;     like to prove that the new model does what it&#39;s supposed to. You might<br>&gt;     try simplifying the indices for Set and Dictionary. It should be<br>&gt;     possible to represent them as a wrapper around an Int.<br>&gt;<br>&gt;     &gt;<br>&gt;     &gt;<br>&gt;     &gt; Austin<br>&gt;     &gt;<br>&gt;     &gt; On Mon, Mar 21, 2016 at 11:39 AM, Shawn Erickson &lt;shawnce at gmail.com&gt;<br>&gt;     wrote:<br>&gt;     &gt;<br>&gt;     &gt; Anything I can help with on this effort? It looks like things are moving<br>&gt;     &gt; along among the Apple folks. Not sure how to jump in without stepping on<br>&gt;     in<br>&gt;     &gt; flight work, etc.<br>&gt;     &gt;<br>&gt;     &gt; On Tue, Mar 15, 2016 at 1:39 AM Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br>&gt;     wrote:<br>&gt;     &gt;<br>&gt;     &gt; On Mon, Mar 14, 2016 at 7:59 PM, Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; On Thu, Mar 10, 2016 at 10:49 PM Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br>&gt;     &gt; &gt; wrote:<br>&gt;     &gt; &gt;&gt;<br>&gt;     &gt; &gt;&gt; Hi everyone,<br>&gt;     &gt; &gt;&gt;<br>&gt;     &gt; &gt;&gt; I just wanted to announce that we have sufficient change on the<br>&gt;     &gt; &gt;&gt; swift-3-indexing-model branch so that we can build the core standard<br>&gt;     &gt; &gt;&gt; library and StdlibUnittest. We achieved this by putting the protocol<br>&gt;     &gt; &gt;&gt; new structure into place, and stubbing out with fatalError() or just<br>&gt;     &gt; &gt;&gt; commenting out parts that didn&#39;t compile. Now we have a baseline that<br>&gt;     &gt; &gt;&gt; we won&#39;t regress, and we are starting to work towards improving it,<br>&gt;     &gt; &gt;&gt; making existing tests pass, and then writing new tests, and<br>&gt;     &gt; addressing<br>&gt;     &gt; &gt;&gt; TODOs and FIXMEs that we left in the code as we were doing the first<br>&gt;     &gt; &gt;&gt; pass.<br>&gt;     &gt; &gt;&gt;<br>&gt;     &gt; &gt;&gt; Here&#39;s the most recent pull request from Shawn where he starts to fix<br>&gt;     &gt; &gt;&gt; the tests: https://github.com/apple/swift/pull/1632<br>&gt;     &gt; &gt;&gt;<br>&gt;     &gt; &gt;&gt; Now we are in the &quot;massively-parallel&quot; stage of this project and we,<br>&gt;     &gt; &gt;&gt; as always, welcome contributions to this branch!<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; FYI<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; I am working on the following:<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; FAIL: Swift :: 1_stdlib/StringDiagnostics.swift<br>&gt;     &gt; &gt; FAIL: Swift :: 1_stdlib/StringDiagnostics_without_Foundation.swift<br>&gt;     &gt; &gt; ...and looking at converting String.XxxxIndexes to the new index style<br>&gt;     &gt; while<br>&gt;     &gt; &gt; maintaining existing public API.<br>&gt;     &gt;<br>&gt;     &gt; There doesn&#39;t seem to be many tests actively failing in the primary<br>&gt;     &gt; testsuite, so I&#39;ll be working on making StdlibCollectionUnittest<br>&gt;     &gt; compile, which will allow us to run the validation testsuite.<br>&gt;     &gt;<br>&gt;     &gt; Dmitri<br>&gt;     &gt;<br>&gt;     &gt; --<br>&gt;     &gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;     &gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;     &gt;<br>&gt;<br>&gt;     --<br>&gt;     Dave<br>&gt;<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>April 11, 2016 at 09:00:00pm</p></header><div class="content"><p>On Mon, Apr 11, 2016 at 11:42 AM Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; on Mon Apr 11 2016, Shawn Erickson &lt;shawnce-AT-gmail.com&gt; wrote:<br>&gt;<br>&gt; &gt; Anything to attempt on strings? I see you are considering consolidating<br>&gt; down to<br>&gt; &gt; a single index type for those, etc. Of course you also imply a large<br>&gt; string<br>&gt; &gt; rework that may happen in the future.<br>&gt;<br>&gt; Yes, Strings need the same treatment (though it may be a bit simpler<br>&gt; since one doesn&#39;t have to unwind the broken double-indirection hack<br>&gt; mentioned in the paper).<br></p><p><br>I was going to start working on String indices since I had some changes<br>stashed from a while back that make still make sense. Then I could likely<br>help with building out tests as well. Would want to coordinate that with<br>folks some how.<br></p><p>-Shawn<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160411/ec07b287/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 11, 2016 at 03:00:00pm</p></header><div class="content"><p>on Mon Apr 11 2016, Shawn Erickson &lt;shawnce-AT-gmail.com&gt; wrote:<br></p><p>&gt; On Mon, Apr 11, 2016 at 11:42 AM Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;<br>&gt;     on Mon Apr 11 2016, Shawn Erickson &lt;shawnce-AT-gmail.com&gt; wrote:<br>&gt;<br>&gt;     &gt; Anything to attempt on strings? I see you are considering consolidating<br>&gt;     down to<br>&gt;     &gt; a single index type for those, etc. Of course you also imply a large<br>&gt;     string<br>&gt;     &gt; rework that may happen in the future.<br>&gt;<br>&gt;     Yes, Strings need the same treatment (though it may be a bit simpler<br>&gt;     since one doesn&#39;t have to unwind the broken double-indirection hack<br>&gt;     mentioned in the paper).<br>&gt;<br>&gt; I was going to start working on String indices since I had some changes stashed<br>&gt; from a while back that make still make sense. Then I could likely help with<br>&gt; building out tests as well. Would want to coordinate that with folks some how.<br></p><p>Dmitri can give you great guidance about testing.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>April 11, 2016 at 03:00:00pm</p></header><div class="content"><p>On Mon, Apr 11, 2016 at 3:16 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;<br>&gt; on Mon Apr 11 2016, Shawn Erickson &lt;shawnce-AT-gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; On Mon, Apr 11, 2016 at 11:42 AM Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;     on Mon Apr 11 2016, Shawn Erickson &lt;shawnce-AT-gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;     &gt; Anything to attempt on strings? I see you are considering consolidating<br>&gt;&gt;     down to<br>&gt;&gt;     &gt; a single index type for those, etc. Of course you also imply a large<br>&gt;&gt;     string<br>&gt;&gt;     &gt; rework that may happen in the future.<br>&gt;&gt;<br>&gt;&gt;     Yes, Strings need the same treatment (though it may be a bit simpler<br>&gt;&gt;     since one doesn&#39;t have to unwind the broken double-indirection hack<br>&gt;&gt;     mentioned in the paper).<br>&gt;&gt;<br>&gt;&gt; I was going to start working on String indices since I had some changes stashed<br>&gt;&gt; from a while back that make still make sense. Then I could likely help with<br>&gt;&gt; building out tests as well. Would want to coordinate that with folks some how.<br>&gt;<br>&gt; Dmitri can give you great guidance about testing.<br></p><p>Shawn and Austin, please feel free to reach out to me with any<br>questions you might have.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>April 11, 2016 at 11:00:00am</p></header><div class="content"><p>On Mon, Apr 11, 2016 at 11:07 AM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;<br>&gt; on Sun Apr 10 2016, Austin Zheng &lt;austinzheng-AT-gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; I&#39;m really sorry for dropping the ball and disappearing off the list. I&#39;d like<br>&gt;&gt; to help out if I can. I&#39;ll check out the current branch tomorrow and see what<br>&gt;&gt; the status of the work is, but let me know if everything is done already/there&#39;s<br>&gt;&gt; something in particular that should be worked on.<br>&gt;<br>&gt; Dmitri may have other ideas, but one thing we haven&#39;t done is to take<br>&gt; advantage of the new model by removing references from indices.  I&#39;d<br>&gt; like to prove that the new model does what it&#39;s supposed to.  You might<br>&gt; try simplifying the indices for Set and Dictionary.  It should be<br>&gt; possible to represent them as a wrapper around an Int.<br></p><p>String could also make use of such simplification.<br></p><p>Another important task is writing tests for new APIs, such as range<br>APIs and collection APIs.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 11, 2016 at 11:00:00am</p></header><div class="content"><p>on Mon Apr 11 2016, Dmitri Gribenko &lt;gribozavr-AT-gmail.com&gt; wrote:<br></p><p>&gt; On Mon, Apr 11, 2016 at 11:07 AM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; on Sun Apr 10 2016, Austin Zheng &lt;austinzheng-AT-gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; I&#39;m really sorry for dropping the ball and disappearing off the list. I&#39;d like<br>&gt;&gt;&gt; to help out if I can. I&#39;ll check out the current branch tomorrow and see what<br>&gt;&gt;&gt; the status of the work is, but let me know if everything is done already/there&#39;s<br>&gt;&gt;&gt; something in particular that should be worked on.<br>&gt;&gt;<br>&gt;&gt; Dmitri may have other ideas, but one thing we haven&#39;t done is to take<br>&gt;&gt; advantage of the new model by removing references from indices.  I&#39;d<br>&gt;&gt; like to prove that the new model does what it&#39;s supposed to.  You might<br>&gt;&gt; try simplifying the indices for Set and Dictionary.  It should be<br>&gt;&gt; possible to represent them as a wrapper around an Int.<br>&gt;<br>&gt; String could also make use of such simplification.<br>&gt;<br>&gt; Another important task is writing tests for new APIs, such as range<br>&gt; APIs and collection APIs.<br></p><p>This is hugely important, probably more important than what I<br>suggested.  If Dmitri can use your help, it would be best to work with<br>him on that.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>April 11, 2016 at 02:00:00pm</p></header><div class="content"><p>Hi Dmitri,<br></p><p>Happy to help with either/both of tests and new collection indices. Just point me in your preferred direction!<br></p><p>Thanks,<br>Austin<br></p><p>Sent from my iPhone<br></p><p>&gt; On Apr 11, 2016, at 11:43 AM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; on Mon Apr 11 2016, Dmitri Gribenko &lt;gribozavr-AT-gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Mon, Apr 11, 2016 at 11:07 AM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; on Sun Apr 10 2016, Austin Zheng &lt;austinzheng-AT-gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;m really sorry for dropping the ball and disappearing off the list. I&#39;d like<br>&gt;&gt;&gt;&gt; to help out if I can. I&#39;ll check out the current branch tomorrow and see what<br>&gt;&gt;&gt;&gt; the status of the work is, but let me know if everything is done already/there&#39;s<br>&gt;&gt;&gt;&gt; something in particular that should be worked on.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Dmitri may have other ideas, but one thing we haven&#39;t done is to take<br>&gt;&gt;&gt; advantage of the new model by removing references from indices.  I&#39;d<br>&gt;&gt;&gt; like to prove that the new model does what it&#39;s supposed to.  You might<br>&gt;&gt;&gt; try simplifying the indices for Set and Dictionary.  It should be<br>&gt;&gt;&gt; possible to represent them as a wrapper around an Int.<br>&gt;&gt; <br>&gt;&gt; String could also make use of such simplification.<br>&gt;&gt; <br>&gt;&gt; Another important task is writing tests for new APIs, such as range<br>&gt;&gt; APIs and collection APIs.<br>&gt; <br>&gt; This is hugely important, probably more important than what I<br>&gt; suggested.  If Dmitri can use your help, it would be best to work with<br>&gt; him on that.<br>&gt; <br>&gt; -- <br>&gt; Dave<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>SR-122 / CollectionsMoveIndices.swift Prototype</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>March 10, 2016 at 12:00:00am</p></header><div class="content"><p>On Wed, Mar 9, 2016 at 3:52 PM Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br></p><p>Additionally when trying to provide `Strideable` optimized `Collection`<br>&gt; default implementations I hit issues like the following (note<br>&gt; `Collection.IndexDistance` minimally conforms to SignedInteger). I picked<br>&gt; `Strideable` as the optimization point since `RandomAccessCollection.Index`<br>&gt; minimally conforms to `Strideable` and `Strideable` provides the first<br>&gt; level of possible optimizations after `Comparable`.<br>&gt;<br>&gt; extension Collection where Index : Strideable {<br>&gt;   public func next(i: Index) -&gt; Index {<br>&gt;     return i.advanced(by: 1) &lt;— this is ok<br>&gt;   }<br>&gt;   public func advance(i: Index, by n: IndexDistance) -&gt; Index {<br>&gt;     return i.advanced(by: n) &lt;— this errors<br>&gt;   }<br>&gt; …<br>&gt; }<br>&gt;<br>&gt; error: cannot invoke &#39;advanced&#39; with an argument list of type &#39;(by:<br>&gt; Self.IndexDistance)&#39;<br>&gt;     return i.advanced(by: n)<br>&gt;              ^<br>&gt; note: expected an argument list of type &#39;(by: Self.Index.Stride)&#39;<br>&gt;     return i.advanced(by: n)<br>&gt;<br></p><p>Actually as soon as I sent that I realized I was looking at the error<br>backwards... Strideable&#39;s advanced(by:) takes something that conforms to<br>SignedNumber. IndexDistance is a SignedInteger which does conform to<br>SignedNumber. So am I hitting a limit of the compiler? ...or missing<br>something obvious here?<br></p><p>————————————————————————————————————————<br>Equatable<br>  ^<br>Comparable<br>  ^<br>Strideable (associatedtype Stride : SignedNumber) -&gt;<br>advanced(by:Self.Stride) &amp; distance(to: Self)<br>  ^<br>  ^              SignedNumber<br>  ^                 ^<br>Integer &amp; _SignedInteger —&gt; func toIntMax()<br>  ^<br>SignedInteger —&gt; func toIntMax()<br>————————————————————————————————————————<br></p><p>-Shawn<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160310/7690ce89/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
