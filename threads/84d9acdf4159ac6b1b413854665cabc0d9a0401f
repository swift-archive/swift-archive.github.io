<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>October 18, 2016 at 09:00:00am</p></header><div class="content"><p>on Mon Oct 17 2016, Jean-Denis Muys &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; While I already tersely supported this proposal, following all the negative<br>&gt; reactions, I feel compelled to revisit my position. The main reason is that<br>&gt; it strikes me that most points of view so far, including mine, were really<br>&gt; culturally short sighted, and far too much US-centric.<br>&gt;<br>&gt; I totally agree that &#39;$&#39; being use by one (or even several) piece of code<br>&gt; is not reason enough to change the language. But I also think that it being<br>&gt; used by only one piece of code is no reason to reject the change.<br>&gt;<br>&gt; Most of us, including me, have been blinded by two things:<br>&gt;<br>&gt; 1- the use of the $ sign in other programming languages<br>&gt; 2- the use of the $ sign in Swift as a prefix for implicitly declared<br>&gt; closure parameters<br>&gt;<br>&gt; I think this second use is not Swifty at all. It clearly (to me) would fail<br>&gt; the litmus test &quot;if it wasn&#39;t there, would you add it to the language?&quot;. Of<br>&gt; course, it has been blessed by time, and it has *become* Swifty, by usage<br>&gt; because it&#39;s a useful feature, despite the choice of its syntax being so<br>&gt; ugly (to my non-american eyes).<br></p><p>I don&#39;t think it&#39;s un-swifty by any measure.  It&#39;s not particularly<br>beautiful, I agree, but what would make a better, extremely terse, way<br>to refer to a posiitional parameter of a closure?  Unless we can think<br>of something that&#39;s obviously better, then it is thoroughly swifty: a<br>pragmatic solution for an important problem.  Unless we can think<br>of something that&#39;s obviously better, then it certainly *is* what we<br>would have added to the language.<br></p><p>&gt; Similarly, I believe the use of the $ in other language should not be a<br>&gt; guide in the decision here, either positively, nor negatively. We may pay<br>&gt; some mild attention to the concern that we should perhaps avoid some<br>&gt; confusion. I haven&#39;t seen much of that.<br>&gt;<br>&gt; Now for the elephant in the room: &#39;$&#39; is a currency symbol. As such it<br>&gt; should be handled like any other currency symbol. Thinking otherwise would<br>&gt; be very culturally offensive.<br></p><p>&lt;snip&gt;<br></p><p>&gt;<br>&gt; In conclusion, I believe this proposal must be accepted, and actually<br>&gt; expanded to include ¥, ¢, £, and also to make it explicit that currency<br>&gt; symbols can be used in variable names as first and only character, as first<br>&gt; of many characters, and at any position.<br>&gt;<br>&gt; This would make $0, $1, $2… legal variable names. I believe this is OK.<br>&gt;<br>&gt; What would happen to implicitly declared closure parameters then? Nothing.<br>&gt; They would continue to be implicitly declared in the context of closures<br>&gt; that do not declare their parameters explicitly, similarly to `self` being<br>&gt; implicitly declared in the context of a class. A user willing to use $0<br>&gt; there would be facing a name collision, which is OK.<br>&gt;<br>&gt; Note that such a change is purely additive: no legal source code today<br>&gt; would fail with this change.<br></p><p>That is actually a relatively un-swifty answer in some ways.  It means<br>there are magic identifiers that are usable in all contexts but given<br>special meaning in some contexts.  I think making the lexical roles of<br>various currency symbols more consistent is a worthy goal, but I&#39;m not<br>sure this is the way to do it.<br></p><p>&gt; I hope that at the very least, I opened a new perspective on this proposal,<br>&gt; and I hope we can find a way to be less culturally biased.<br></p><p>If there&#39;s cultural bias here, it&#39;s a bias based on programming language<br>precedent. \$[0-9] has a long history of use as a positional parameter<br>identifier in programming languages.  Swift very explicitly embraces<br>*that* sort of “cultural bias.”  The culture of programmers matters.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8149b5bd66abbc94babfda2995153481?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Nevin Brackett-Rozinsky</string> &lt;nevin.brackettrozinsky at gmail.com&gt;<p>October 18, 2016 at 12:00:00pm</p></header><div class="content"><p>It seems natural to me that currency symbols should be operators. This<br>would allow, for example, prefix and postfix operators that take a number<br>and return a “Currency” instance:<br></p><p>let inMyPocket = $20<br>let lochNess = £3.50<br>let twoBits = 25¢<br></p><p>if (inMyPocket - lochNess) &gt; twoBits { … }<br></p><p>Of course, the unnamed closure parameter identifiers would conflict with<br>that use of the dollar sign. However, I think Anton has the right idea. We<br>already use the number sign for compiler magic, so it would make sense to<br>call the closure parameters #0, #1, etc. In my view those even read better<br>than what we have now.<br></p><p>Nevin<br></p><p><br>On Tue, Oct 18, 2016 at 12:19 PM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Mon Oct 17 2016, Jean-Denis Muys &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; While I already tersely supported this proposal, following all the<br>&gt; negative<br>&gt; &gt; reactions, I feel compelled to revisit my position. The main reason is<br>&gt; that<br>&gt; &gt; it strikes me that most points of view so far, including mine, were<br>&gt; really<br>&gt; &gt; culturally short sighted, and far too much US-centric.<br>&gt; &gt;<br>&gt; &gt; I totally agree that &#39;$&#39; being use by one (or even several) piece of code<br>&gt; &gt; is not reason enough to change the language. But I also think that it<br>&gt; being<br>&gt; &gt; used by only one piece of code is no reason to reject the change.<br>&gt; &gt;<br>&gt; &gt; Most of us, including me, have been blinded by two things:<br>&gt; &gt;<br>&gt; &gt; 1- the use of the $ sign in other programming languages<br>&gt; &gt; 2- the use of the $ sign in Swift as a prefix for implicitly declared<br>&gt; &gt; closure parameters<br>&gt; &gt;<br>&gt; &gt; I think this second use is not Swifty at all. It clearly (to me) would<br>&gt; fail<br>&gt; &gt; the litmus test &quot;if it wasn&#39;t there, would you add it to the language?&quot;.<br>&gt; Of<br>&gt; &gt; course, it has been blessed by time, and it has *become* Swifty, by usage<br>&gt; &gt; because it&#39;s a useful feature, despite the choice of its syntax being so<br>&gt; &gt; ugly (to my non-american eyes).<br>&gt;<br>&gt; I don&#39;t think it&#39;s un-swifty by any measure.  It&#39;s not particularly<br>&gt; beautiful, I agree, but what would make a better, extremely terse, way<br>&gt; to refer to a posiitional parameter of a closure?  Unless we can think<br>&gt; of something that&#39;s obviously better, then it is thoroughly swifty: a<br>&gt; pragmatic solution for an important problem.  Unless we can think<br>&gt; of something that&#39;s obviously better, then it certainly *is* what we<br>&gt; would have added to the language.<br>&gt;<br>&gt; &gt; Similarly, I believe the use of the $ in other language should not be a<br>&gt; &gt; guide in the decision here, either positively, nor negatively. We may pay<br>&gt; &gt; some mild attention to the concern that we should perhaps avoid some<br>&gt; &gt; confusion. I haven&#39;t seen much of that.<br>&gt; &gt;<br>&gt; &gt; Now for the elephant in the room: &#39;$&#39; is a currency symbol. As such it<br>&gt; &gt; should be handled like any other currency symbol. Thinking otherwise<br>&gt; would<br>&gt; &gt; be very culturally offensive.<br>&gt;<br>&gt; &lt;snip&gt;<br>&gt;<br>&gt; &gt;<br>&gt; &gt; In conclusion, I believe this proposal must be accepted, and actually<br>&gt; &gt; expanded to include ¥, ¢, £, and also to make it explicit that currency<br>&gt; &gt; symbols can be used in variable names as first and only character, as<br>&gt; first<br>&gt; &gt; of many characters, and at any position.<br>&gt; &gt;<br>&gt; &gt; This would make $0, $1, $2… legal variable names. I believe this is OK.<br>&gt; &gt;<br>&gt; &gt; What would happen to implicitly declared closure parameters then?<br>&gt; Nothing.<br>&gt; &gt; They would continue to be implicitly declared in the context of closures<br>&gt; &gt; that do not declare their parameters explicitly, similarly to `self`<br>&gt; being<br>&gt; &gt; implicitly declared in the context of a class. A user willing to use $0<br>&gt; &gt; there would be facing a name collision, which is OK.<br>&gt; &gt;<br>&gt; &gt; Note that such a change is purely additive: no legal source code today<br>&gt; &gt; would fail with this change.<br>&gt;<br>&gt; That is actually a relatively un-swifty answer in some ways.  It means<br>&gt; there are magic identifiers that are usable in all contexts but given<br>&gt; special meaning in some contexts.  I think making the lexical roles of<br>&gt; various currency symbols more consistent is a worthy goal, but I&#39;m not<br>&gt; sure this is the way to do it.<br>&gt;<br>&gt; &gt; I hope that at the very least, I opened a new perspective on this<br>&gt; proposal,<br>&gt; &gt; and I hope we can find a way to be less culturally biased.<br>&gt;<br>&gt; If there&#39;s cultural bias here, it&#39;s a bias based on programming language<br>&gt; precedent. \$[0-9] has a long history of use as a positional parameter<br>&gt; identifier in programming languages.  Swift very explicitly embraces<br>&gt; *that* sort of “cultural bias.”  The culture of programmers matters.<br>&gt;<br>&gt; --<br>&gt; -Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161018/393145b5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>October 19, 2016 at 01:00:00pm</p></header><div class="content"><p>I&#39;m actually vaguely surprised that the other currency symbols are<br>considered valid identifiers, since they&#39;re not alphanumeric symbols.<br>As for turning them into operators, it&#39;s a cute idea, but it doesn&#39;t<br>work for any symbol that&#39;s used by multiple countries. For example,<br>would $3.50 be USD, AUD, CAD, or any of the other dozens of countries<br>that use dollars?<br></p><p>-Kevin Ballard<br></p><p>On Tue, Oct 18, 2016, at 09:39 AM, Nevin Brackett-Rozinsky via swift-evolution wrote:<br>&gt; It seems natural to me that currency symbols should be operators. This<br>&gt; would allow, for example, prefix and postfix operators that take a<br>&gt; number and return a “Currency” instance:<br>&gt;<br>&gt; let inMyPocket = $20<br>&gt; let lochNess = £3.50<br>&gt; let twoBits = 25¢<br>&gt;<br>&gt; if (inMyPocket - lochNess) &gt; twoBits { … }<br>&gt;<br>&gt; Of course, the unnamed closure parameter identifiers would conflict<br>&gt; with that use of the dollar sign. However, I think Anton has the right<br>&gt; idea. We already use the number sign for compiler magic, so it would<br>&gt; make sense to call the closure parameters #0, #1, etc. In my view<br>&gt; those even read better than what we have now.<br>&gt;<br>&gt; Nevin<br>&gt;<br>&gt;<br>&gt; On Tue, Oct 18, 2016 at 12:19 PM, Dave Abrahams via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; on Mon Oct 17 2016, Jean-Denis Muys &lt;swift-<br>&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;  &gt; While I already tersely supported this proposal, following all the<br>&gt;&gt;  &gt; negative reactions, I feel compelled to revisit my position. The<br>&gt;&gt;  &gt; main reason is that it strikes me that most points of view so far,<br>&gt;&gt;  &gt; including mine, were really culturally short sighted, and far too<br>&gt;&gt;  &gt; much US-centric.<br>&gt;&gt;  &gt;<br>&gt;&gt;  &gt; I totally agree that &#39;$&#39; being use by one (or even several) piece<br>&gt;&gt;  &gt; of code is not reason enough to change the language. But I also<br>&gt;&gt;  &gt; think that it being used by only one piece of code is no reason to<br>&gt;&gt;  &gt; reject the change.<br>&gt;&gt;  &gt;<br>&gt;&gt;  &gt; Most of us, including me, have been blinded by two things:<br>&gt;&gt;  &gt;<br>&gt;&gt;  &gt; 1- the use of the $ sign in other programming languages 2- the use<br>&gt;&gt;  &gt; of the $ sign in Swift as a prefix for implicitly declared closure<br>&gt;&gt;  &gt; parameters<br>&gt;&gt;  &gt;<br>&gt;&gt;  &gt; I think this second use is not Swifty at all. It clearly (to me)<br>&gt;&gt;  &gt; would fail the litmus test &quot;if it wasn&#39;t there, would you add it<br>&gt;&gt;  &gt; to the language?&quot;. Of course, it has been blessed by time, and it<br>&gt;&gt;  &gt; has *become* Swifty, by usage because it&#39;s a useful feature,<br>&gt;&gt;  &gt; despite the choice of its syntax being so ugly (to my non-american<br>&gt;&gt;  &gt; eyes).<br>&gt;&gt;<br>&gt;&gt; I don&#39;t think it&#39;s un-swifty by any measure.  It&#39;s not particularly<br>&gt;&gt;  beautiful, I agree, but what would make a better, extremely<br>&gt;&gt;  terse, way<br>&gt;&gt;  to refer to a posiitional parameter of a closure?  Unless we<br>&gt;&gt;  can think<br>&gt;&gt;  of something that&#39;s obviously better, then it is thoroughly<br>&gt;&gt;  swifty: a<br>&gt;&gt;  pragmatic solution for an important problem.  Unless we can think<br>&gt;&gt;  of something that&#39;s obviously better, then it certainly *is* what we<br>&gt;&gt;  would have added to the language.<br>&gt;&gt;<br>&gt;&gt;  &gt; Similarly, I believe the use of the $ in other language should not<br>&gt;&gt;  &gt; be a guide in the decision here, either positively, nor<br>&gt;&gt;  &gt; negatively. We may pay some mild attention to the concern that we<br>&gt;&gt;  &gt; should perhaps avoid some confusion. I haven&#39;t seen much of that.<br>&gt;&gt;  &gt;<br>&gt;&gt;  &gt; Now for the elephant in the room: &#39;$&#39; is a currency symbol. As<br>&gt;&gt;  &gt; such it should be handled like any other currency symbol. Thinking<br>&gt;&gt;  &gt; otherwise would be very culturally offensive.<br>&gt;&gt;<br>&gt;&gt; &lt;snip&gt;<br>&gt;&gt;<br>&gt;&gt;  &gt;<br>&gt;&gt;  &gt; In conclusion, I believe this proposal must be accepted, and<br>&gt;&gt;  &gt; actually expanded to include ¥, ¢, £, and also to make it explicit<br>&gt;&gt;  &gt; that currency symbols can be used in variable names as first and<br>&gt;&gt;  &gt; only character, as first of many characters, and at any position.<br>&gt;&gt;  &gt;<br>&gt;&gt;  &gt; This would make $0, $1, $2… legal variable names. I believe this<br>&gt;&gt;  &gt; is OK.<br>&gt;&gt;  &gt;<br>&gt;&gt;  &gt; What would happen to implicitly declared closure parameters then?<br>&gt;&gt;  &gt; Nothing. They would continue to be implicitly declared in the<br>&gt;&gt;  &gt; context of closures that do not declare their parameters<br>&gt;&gt;  &gt; explicitly, similarly to `self` being implicitly declared in the<br>&gt;&gt;  &gt; context of a class. A user willing to use $0 there would be facing<br>&gt;&gt;  &gt; a name collision, which is OK.<br>&gt;&gt;  &gt;<br>&gt;&gt;  &gt; Note that such a change is purely additive: no legal source code<br>&gt;&gt;  &gt; today would fail with this change.<br>&gt;&gt;<br>&gt;&gt; That is actually a relatively un-swifty answer in some ways.<br>&gt;&gt; It means<br>&gt;&gt;  there are magic identifiers that are usable in all contexts<br>&gt;&gt;  but given<br>&gt;&gt;  special meaning in some contexts.  I think making the lexical<br>&gt;&gt;  roles of<br>&gt;&gt;  various currency symbols more consistent is a worthy goal, but<br>&gt;&gt;  I&#39;m not<br>&gt;&gt;  sure this is the way to do it.<br>&gt;&gt;<br>&gt;&gt;  &gt; I hope that at the very least, I opened a new perspective on this<br>&gt;&gt;  &gt; proposal, and I hope we can find a way to be less culturally<br>&gt;&gt;  &gt; biased.<br>&gt;&gt;<br>&gt;&gt; If there&#39;s cultural bias here, it&#39;s a bias based on programming<br>&gt;&gt; language<br>&gt;&gt;  precedent. \$[0-9] has a long history of use as a positional<br>&gt;&gt;  parameter<br>&gt;&gt;  identifier in programming languages.  Swift very explicitly embraces<br>&gt;&gt;  *that* sort of “cultural bias.”  The culture of programmers matters.<br>&gt;&gt;<br>&gt;&gt;  --<br>&gt;&gt;  -Dave<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt;  swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _________________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161019/1ad453e9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5931766360e7b16042376524df12d61c?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Jonathan S. Shapiro</string> &lt;jonathan.s.shapiro at gmail.com&gt;<p>October 21, 2016 at 07:00:00pm</p></header><div class="content"><p>On Wed, Oct 19, 2016 at 1:02 PM, Kevin Ballard via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I&#39;m actually vaguely surprised that the other currency symbols are<br>&gt; considered valid identifiers, since they&#39;re not alphanumeric symbols. As<br>&gt; for turning them into operators, it&#39;s a cute idea, but it doesn&#39;t work for<br>&gt; any symbol that&#39;s used by multiple countries. For example, would $3.50 be<br>&gt; USD, AUD, CAD, or any of the other dozens of countries that use dollars?<br>&gt;<br></p><p>This is true, but not compelling. While using USD, AUD, CAD, and friends is<br>better practice for a truly internationalized code base, it does not follow<br>that use of $ for a more local-consumption code base should be rejected out<br>of hand.<br></p><p><br>Jonathan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161021/35c744c0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5931766360e7b16042376524df12d61c?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Jonathan S. Shapiro</string> &lt;jonathan.s.shapiro at gmail.com&gt;<p>October 21, 2016 at 07:00:00pm</p></header><div class="content"><p>Several people here have called out implicit closure parameters as a<br>concern, which is actually irrelevant to adopting &#39;$&#39; in parameters.<br></p><p>It is perfectly feasible to accept &#39;$&#39; in parameters *generally*, and<br>reject identifiers of the form<br></p><p>$ followed by one or more decimal digits<br></p><p><br>in defining occurrences. This is completely compatible with current Swift<br>practice, and logically consistent with other kinds of reserved words.<br></p><p>I&#39;m not taking a position pro or con here. I&#39;m saying that we should reject<br>non-impacting arguments as a basis for deciding one way or the other.<br></p><p><br>Jonathan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161021/50058e36/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5931766360e7b16042376524df12d61c?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Jonathan S. Shapiro</string> &lt;jonathan.s.shapiro at gmail.com&gt;<p>October 21, 2016 at 07:00:00pm</p></header><div class="content"><p>Now for a position:<br></p><p>-1 on this proposal, because &#39;$&#39; should be legal in *any* identifier<br>position.<br></p><p>+1 for the proposal that &#39;$&#39; should be legal in *any* position.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161021/2d825ff5/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>October 19, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Oct 18, 2016, at 11:39 AM, Nevin Brackett-Rozinsky via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It seems natural to me that currency symbols should be operators. This would allow, for example, prefix and postfix operators that take a number and return a “Currency” instance:<br>&gt; <br>&gt; let inMyPocket = $20<br>&gt; let lochNess = £3.50<br>&gt; let twoBits = 25¢<br>&gt; <br>&gt; if (inMyPocket - lochNess) &gt; twoBits { … }<br>&gt; <br>&gt; Of course, the unnamed closure parameter identifiers would conflict with that use of the dollar sign. However, I think Anton has the right idea. We already use the number sign for compiler magic, so it would make sense to call the closure parameters #0, #1, etc. In my view those even read better than what we have now.<br>&gt; <br>&gt; Nevin<br></p><p><br>+1<br></p><p>- Dave Sweeris<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8809800aec2460f291384b794d7e6f8f?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Rick Mann</string> &lt;rmann at latencyzero.com&gt;<p>October 19, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Oct 18, 2016, at 09:39 , Nevin Brackett-Rozinsky via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It seems natural to me that currency symbols should be operators. This would allow, for example, prefix and postfix operators that take a number and return a “Currency” instance:<br>&gt; <br>&gt; let inMyPocket = $20<br>&gt; let lochNess = £3.50<br>&gt; let twoBits = 25¢<br>&gt; <br>&gt; if (inMyPocket - lochNess) &gt; twoBits { … }<br>&gt; <br>&gt; Of course, the unnamed closure parameter identifiers would conflict with that use of the dollar sign. However, I think Anton has the right idea. We already use the number sign for compiler magic, so it would make sense to call the closure parameters #0, #1, etc. In my view those even read better than what we have now.<br></p><p>Except of course, &#39;#&#39; means &quot;pound&quot; is some contexts, and you might want to make a # operator return a weight.<br></p><p>I&#39;m okay with giving up &#39;#&#39; for this, however.<br></p><p><br>-- <br>Rick Mann<br>rmann at latencyzero.com<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
