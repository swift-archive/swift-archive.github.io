<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9b5e7f229ebf32c8eca02e7cee0f379f?s=50"></div><header><strong>[Review] SE-0025 Scoped Access Level</strong> from <string>Nicola Salmoria</string> &lt;nicola.salmoria at gmail.com&gt;<p>February 27, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br></p><p>+1<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I think it addresses a significant omission in the language which deserves to be filled.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br></p><p>I think it does.<br></p><p>The emerging pattern in Swift development is to keep type definitions short and focused, and then add additional functionality with extensions.<br></p><p>Extensions therefore become the basic blocks of code in a type. Sometimes they need to contain implementation details which are only relevant to the specific functionality implemented in the extension, and don’t need to bubble up to the surface of the whole type.<br></p><p>Normally when we work in a block between curly braces, everything we declare is local.<br>When we work between the curly braces of an extension block, however, we don’t have any way to achieve the same behaviour: everything we declare needs to be shared at a minimum with the whole file.<br></p><p>Adding the ‘local’ access level merely reinstates what we take for granted in other parts of the code. It means that as a code maintainer, when I see a ‘local’ entity in an extension I only need to check how it is used inside that extension, rather than in the whole file.<br></p><p>This will become even more important if in the future it will be possible to declare properties inside extensions.<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I don’t have experience with any other language that uses extensions in such a significant way.<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>A quick reading.<br></p><p>—<br>Nicola<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Review] SE-0025 Scoped Access Level</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 27, 2016 at 02:00:00pm</p></header><div class="content"><p>Just a note:<br></p><p>&gt; The emerging pattern in Swift development is to keep type definitions short and focused, and then add additional functionality with extensions.<br></p><p>The remaining big problem for me in using extensions a lot is the fact that you can’t define stored properties in them. This means I rarely split classes into core and extensions as a means of grouping related stuff, because I want to visually group related methods *and* properties.<br></p><p>I’m not 100% convinced on the proposal just yet, but I think I like the idea. However, without the capability to extend a class with an additional property, the usefulness of `local` is greatly limited.<br></p><p>— Radek<br></p><p>&gt; On 27 Feb 2016, at 07:46, Nicola Salmoria via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; What is your evaluation of the proposal?<br>&gt; <br>&gt; +1<br>&gt; <br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; I think it addresses a significant omission in the language which deserves to be filled.<br>&gt; <br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; I think it does.<br>&gt; <br>&gt; The emerging pattern in Swift development is to keep type definitions short and focused, and then add additional functionality with extensions.<br>&gt; <br>&gt; Extensions therefore become the basic blocks of code in a type. Sometimes they need to contain implementation details which are only relevant to the specific functionality implemented in the extension, and don’t need to bubble up to the surface of the whole type.<br>&gt; <br>&gt; Normally when we work in a block between curly braces, everything we declare is local.<br>&gt; When we work between the curly braces of an extension block, however, we don’t have any way to achieve the same behaviour: everything we declare needs to be shared at a minimum with the whole file.<br>&gt; <br>&gt; Adding the ‘local’ access level merely reinstates what we take for granted in other parts of the code. It means that as a code maintainer, when I see a ‘local’ entity in an extension I only need to check how it is used inside that extension, rather than in the whole file.<br>&gt; <br>&gt; This will become even more important if in the future it will be possible to declare properties inside extensions.<br>&gt; <br>&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; I don’t have experience with any other language that uses extensions in such a significant way.<br>&gt; <br>&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; A quick reading.<br>&gt; <br>&gt; —<br>&gt; Nicola<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>[Review] SE-0025 Scoped Access Level</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>March  1, 2016 at 11:00:00am</p></header><div class="content"><p>• What is your evaluation of the proposal?<br></p><p>+0.1 I can see the rationale but it’s not something I particularly miss and I probably wouldn’t use it. <br></p><p>I’m also not crazy about the keyword “local”. Ideally, “private” is the correct keyword for scoped access and “local” would be better for file scoped access, but I guess there is too much  prior art to change things now.<br></p><p>Has anybody given any thought to the mechanics? For example, would it be legal for instances of types to access private members of other instances of the same type?<br></p><p>	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I don’t think so, but I don’t know how much effort would be involved in the implementation.<br></p><p>	• Does this proposal fit well with the feel and direction of Swift?<br></p><p>I think it probably does.<br></p><p>	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>It’s a straight copy of the private modifier in Java, C++ and Objective-C (instance variables only).<br></p><p>	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I read the proposal several times and have been following the thread.<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
