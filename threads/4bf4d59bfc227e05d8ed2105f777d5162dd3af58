<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March 14, 2016 at 03:00:00pm</p></header><div class="content"><p>on Sun Mar 13 2016, Shawn Erickson &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Fri, Mar 11, 2016 at 1:30 PM Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; Anyone who wants to measure is free to do so: simple regexps and wc<br>&gt;&gt; generally work for this purpose.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-3-api-guidelines-review/tree/swift-3/Platforms<br>&gt;&gt;<br>&gt;<br>&gt; Not sure if anyone actually got around to this so doing a basic set of<br>&gt; regex (includes class functions and overrides)...<br>&gt;<br>&gt; func foo(bar baz:Baz... ---&gt; 10544<br>&gt; func foo(baz:Baz... ---&gt; 526<br>&gt; func foo(_:Baz... ---&gt; 92<br>&gt; func foo() ---&gt; 7392<br> <br>Are you certain?  Last we checked it was about 50/50 between having and<br>not-having a distinct argument label.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>March 14, 2016 at 11:00:00pm</p></header><div class="content"><p>I could have easily screwed up my grep but doing spot checks on the<br>resulting data sets I didn&#39;t spot an issue. I did make assumptions about<br>how well formed the data set was.<br></p><p>[shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>[0:554]&gt; grep -R &quot;func [A-Za-z0-9]*([A-Za-z0-9]* [A-Za-z0-9]*:&quot; Platforms/<br>| wc -l<br>   10587<br></p><p>[shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>[0:555]&gt; grep -R &quot;func [A-Za-z0-9]*(_ [A-Za-z0-9]*:&quot; Platforms/ | wc -l<br>   21654<br></p><p>[shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>[0:556]&gt; grep -R &quot;func [A-Za-z0-9]*([A-Za-z0-9]* _:&quot; Platforms/ | wc -l<br>       0<br></p><p>[shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>[0:557]&gt; grep -R &quot;func [A-Za-z0-9]*([A-Za-z0-9]*:&quot; Platforms/ | wc -l<br>      14<br></p><p>[shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>[0:558]&gt; grep -R &quot;func [A-Za-z0-9]*()&quot; Platforms/ | wc -l<br>    7190<br></p><p>----<br></p><p>[shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>[0:559]&gt; grep -R &quot;func [A-Za-z0-9]*([A-Za-z0-9]* [A-Za-z0-9]*:&quot; SampleCode/<br>| wc -l<br>      12<br></p><p>[shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>[0:560]&gt; grep -R &quot;func [A-Za-z0-9]*(_ [A-Za-z0-9]*:&quot; SampleCode/ | wc -l<br>       0<br></p><p>[shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>[0:561]&gt; grep -R &quot;func [A-Za-z0-9]*([A-Za-z0-9]* _:&quot; SampleCode/ | wc -l<br>       0<br></p><p>[shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>[0:562]&gt; grep -R &quot;func [A-Za-z0-9]*([A-Za-z0-9]*:&quot; SampleCode/ | wc -l<br>     512<br></p><p>[shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>[0:563]&gt; grep -R &quot;func [A-Za-z0-9]*()&quot; SampleCode/ | wc -l<br>     221<br></p><p><br>On Mon, Mar 14, 2016 at 3:28 PM Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Sun Mar 13 2016, Shawn Erickson &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; On Fri, Mar 11, 2016 at 1:30 PM Dave Abrahams via swift-evolution &lt;<br>&gt; &gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Anyone who wants to measure is free to do so: simple regexps and wc<br>&gt; &gt;&gt; generally work for this purpose.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; https://github.com/apple/swift-3-api-guidelines-review/tree/swift-3/Platforms<br>&gt; &gt;&gt;<br>&gt; &gt;<br>&gt; &gt; Not sure if anyone actually got around to this so doing a basic set of<br>&gt; &gt; regex (includes class functions and overrides)...<br>&gt; &gt;<br>&gt; &gt; func foo(bar baz:Baz... ---&gt; 10544<br>&gt; &gt; func foo(baz:Baz... ---&gt; 526<br>&gt; &gt; func foo(_:Baz... ---&gt; 92<br>&gt; &gt; func foo() ---&gt; 7392<br>&gt;<br>&gt; Are you certain?  Last we checked it was about 50/50 between having and<br>&gt; not-having a distinct argument label.<br>&gt;<br>&gt; --<br>&gt; -Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160314/1d576b87/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>March 14, 2016 at 08:00:00pm</p></header><div class="content"><p>Ah, this doesn&#39;t distinguish<br></p><p>func foo(bar baz: Int)<br></p><p>from<br></p><p>func foo(bar bar: Int)<br></p><p>That&#39;s pretty important for this discussion.<br></p><p>(Thanks for actually doing this! I just let it drop last week.)<br></p><p>Jordan<br></p><p>&gt; On Mar 14, 2016, at 16:01 , Shawn Erickson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I could have easily screwed up my grep but doing spot checks on the resulting data sets I didn&#39;t spot an issue. I did make assumptions about how well formed the data set was.<br>&gt; <br>&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt; [0:554]&gt; grep -R &quot;func [A-Za-z0-9]*([A-Za-z0-9]* [A-Za-z0-9]*:&quot; Platforms/ | wc -l<br>&gt;    10587<br>&gt; <br>&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt; [0:555]&gt; grep -R &quot;func [A-Za-z0-9]*(_ [A-Za-z0-9]*:&quot; Platforms/ | wc -l<br>&gt;    21654<br>&gt; <br>&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt; [0:556]&gt; grep -R &quot;func [A-Za-z0-9]*([A-Za-z0-9]* _:&quot; Platforms/ | wc -l<br>&gt;        0<br>&gt; <br>&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt; [0:557]&gt; grep -R &quot;func [A-Za-z0-9]*([A-Za-z0-9]*:&quot; Platforms/ | wc -l<br>&gt;       14<br>&gt; <br>&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt; [0:558]&gt; grep -R &quot;func [A-Za-z0-9]*()&quot; Platforms/ | wc -l<br>&gt;     7190<br>&gt; <br>&gt; ----<br>&gt; <br>&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt; [0:559]&gt; grep -R &quot;func [A-Za-z0-9]*([A-Za-z0-9]* [A-Za-z0-9]*:&quot; SampleCode/ | wc -l<br>&gt;       12<br>&gt; <br>&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt; [0:560]&gt; grep -R &quot;func [A-Za-z0-9]*(_ [A-Za-z0-9]*:&quot; SampleCode/ | wc -l<br>&gt;        0<br>&gt; <br>&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt; [0:561]&gt; grep -R &quot;func [A-Za-z0-9]*([A-Za-z0-9]* _:&quot; SampleCode/ | wc -l<br>&gt;        0<br>&gt; <br>&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt; [0:562]&gt; grep -R &quot;func [A-Za-z0-9]*([A-Za-z0-9]*:&quot; SampleCode/ | wc -l<br>&gt;      512<br>&gt; <br>&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt; [0:563]&gt; grep -R &quot;func [A-Za-z0-9]*()&quot; SampleCode/ | wc -l<br>&gt;      221<br>&gt; <br>&gt; <br>&gt; On Mon, Mar 14, 2016 at 3:28 PM Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; on Sun Mar 13 2016, Shawn Erickson &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; &gt; On Fri, Mar 11, 2016 at 1:30 PM Dave Abrahams via swift-evolution &lt;<br>&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Anyone who wants to measure is free to do so: simple regexps and wc<br>&gt; &gt;&gt; generally work for this purpose.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; https://github.com/apple/swift-3-api-guidelines-review/tree/swift-3/Platforms &lt;https://github.com/apple/swift-3-api-guidelines-review/tree/swift-3/Platforms&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;<br>&gt; &gt; Not sure if anyone actually got around to this so doing a basic set of<br>&gt; &gt; regex (includes class functions and overrides)...<br>&gt; &gt;<br>&gt; &gt; func foo(bar baz:Baz... ---&gt; 10544<br>&gt; &gt; func foo(baz:Baz... ---&gt; 526<br>&gt; &gt; func foo(_:Baz... ---&gt; 92<br>&gt; &gt; func foo() ---&gt; 7392<br>&gt; <br>&gt; Are you certain?  Last we checked it was about 50/50 between having and<br>&gt; not-having a distinct argument label.<br>&gt; <br>&gt; --<br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160314/d56245c4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>March 15, 2016 at 03:00:00am</p></header><div class="content"><p>On Mon, Mar 14, 2016 at 8:05 PM Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br></p><p>&gt; Ah, this doesn&#39;t distinguish<br>&gt;<br>&gt; func foo(bar baz: Int)<br>&gt;<br>&gt;<br>&gt; from<br>&gt;<br>&gt; func foo(bar bar: Int)<br>&gt;<br>&gt;<br>&gt; That&#39;s pretty important for this discussion.<br>&gt;<br>&gt; (Thanks for actually doing this! I just let it drop last week.)<br>&gt;<br>&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>[0:574]&gt; grep -R &quot;func [A-Za-z0-9]*(\([A-Za-z0-9]*\) \1:&quot; Platforms/ | wc -l<br>     274<br></p><p>[shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>[0:579]&gt; grep -R &quot;func [A-Za-z0-9]*(\([A-Za-z0-9]*\) \1:&quot; Platforms/ | head<br>-5<br>Platforms//iOS/AssetsLibrary/ALAssetRepresentation.swift:  func<br>cgImage(options options: [NSObject : AnyObject]! = [:]) -&gt;<br>Unmanaged&lt;CGImage&gt;!<br>Platforms//iOS/CloudKit/CKContainer.swift:  func<br>accountStatus(completionHandler completionHandler: (CKAccountStatus,<br>NSError?) -&gt; Void)<br>Platforms//iOS/CloudKit/CKContainer.swift:  func<br>fetchUserRecordID(completionHandler completionHandler: (CKRecordID?,<br>NSError?) -&gt; Void)<br>Platforms//iOS/CloudKit/CKContainer.swift:  func<br>discoverAllContactUserInfos(completionHandler completionHandler:<br>([CKDiscoveredUserInfo]?, NSError?) -&gt; Void)<br>Platforms//iOS/CloudKit/CKDatabase.swift:  func<br>fetchAllRecordZones(completionHandler completionHandler: ([CKRecordZone]?,<br>NSError?) -&gt; Void)<br></p><p><br>On Mar 14, 2016, at 16:01 , Shawn Erickson via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I could have easily screwed up my grep but doing spot checks on the<br>&gt; resulting data sets I didn&#39;t spot an issue. I did make assumptions about<br>&gt; how well formed the data set was.<br>&gt;<br>&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt; [0:554]&gt; grep -R &quot;func [A-Za-z0-9]*([A-Za-z0-9]* [A-Za-z0-9]*:&quot; Platforms/<br>&gt; | wc -l<br>&gt;    10587<br>&gt;<br>&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt; [0:555]&gt; grep -R &quot;func [A-Za-z0-9]*(_ [A-Za-z0-9]*:&quot; Platforms/ | wc -l<br>&gt;    21654<br>&gt;<br>&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt; [0:556]&gt; grep -R &quot;func [A-Za-z0-9]*([A-Za-z0-9]* _:&quot; Platforms/ | wc -l<br>&gt;        0<br>&gt;<br>&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt; [0:557]&gt; grep -R &quot;func [A-Za-z0-9]*([A-Za-z0-9]*:&quot; Platforms/ | wc -l<br>&gt;       14<br>&gt;<br>&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt; [0:558]&gt; grep -R &quot;func [A-Za-z0-9]*()&quot; Platforms/ | wc -l<br>&gt;     7190<br>&gt;<br>&gt; ----<br>&gt;<br>&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt; [0:559]&gt; grep -R &quot;func [A-Za-z0-9]*([A-Za-z0-9]* [A-Za-z0-9]*:&quot;<br>&gt; SampleCode/ | wc -l<br>&gt;       12<br>&gt;<br>&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt; [0:560]&gt; grep -R &quot;func [A-Za-z0-9]*(_ [A-Za-z0-9]*:&quot; SampleCode/ | wc -l<br>&gt;        0<br>&gt;<br>&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt; [0:561]&gt; grep -R &quot;func [A-Za-z0-9]*([A-Za-z0-9]* _:&quot; SampleCode/ | wc -l<br>&gt;        0<br>&gt;<br>&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt; [0:562]&gt; grep -R &quot;func [A-Za-z0-9]*([A-Za-z0-9]*:&quot; SampleCode/ | wc -l<br>&gt;      512<br>&gt;<br>&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt; [0:563]&gt; grep -R &quot;func [A-Za-z0-9]*()&quot; SampleCode/ | wc -l<br>&gt;      221<br>&gt;<br>&gt;<br>&gt; On Mon, Mar 14, 2016 at 3:28 PM Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; on Sun Mar 13 2016, Shawn Erickson &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; &gt; On Fri, Mar 11, 2016 at 1:30 PM Dave Abrahams via swift-evolution &lt;<br>&gt;&gt; &gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Anyone who wants to measure is free to do so: simple regexps and wc<br>&gt;&gt; &gt;&gt; generally work for this purpose.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-3-api-guidelines-review/tree/swift-3/Platforms<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Not sure if anyone actually got around to this so doing a basic set of<br>&gt;&gt; &gt; regex (includes class functions and overrides)...<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; func foo(bar baz:Baz... ---&gt; 10544<br>&gt;&gt; &gt; func foo(baz:Baz... ---&gt; 526<br>&gt;&gt; &gt; func foo(_:Baz... ---&gt; 92<br>&gt;&gt; &gt; func foo() ---&gt; 7392<br>&gt;&gt;<br>&gt;&gt; Are you certain?  Last we checked it was about 50/50 between having and<br>&gt;&gt; not-having a distinct argument label.<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; -Dave<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160315/e4fc09b0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>March 15, 2016 at 09:00:00am</p></header><div class="content"><p>Thank you! I realized one other potential flaw in the data-gathering: your search for &quot;func foo(_ bar&quot; will match both Objective-C methods and C functions. I&#39;m not sure CF should really be contributing to the scores. Unfortunately the main way I can think of to differentiate them is by indentation, which seems a little sketchy.<br></p><p>Still, the conclusions I would draw from this are that the vast majority of methods fall into one of the three following categories:<br></p><p>- No arguments.<br>- Empty first argument label.<br>- First argument label that does not match the parameter name.<br></p><p>This doesn&#39;t mean we shouldn&#39;t change the convention—&quot;_ completionHandler&quot; is much easier to type than &quot;completionHandler completionHandler&quot;, and it&#39;s still removing complexity—but it does mean (to me) that the new API naming guidelines don&#39;t make the &quot;matching&quot; case more important; they only make the &quot;no label&quot; case less important.<br></p><p>Jordan<br></p><p><br>&gt; On Mar 14, 2016, at 20:30 , Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Mon, Mar 14, 2016 at 8:05 PM Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt; Ah, this doesn&#39;t distinguish<br>&gt; <br>&gt; func foo(bar baz: Int)<br>&gt; <br>&gt; from<br>&gt; <br>&gt; func foo(bar bar: Int)<br>&gt; <br>&gt; That&#39;s pretty important for this discussion.<br>&gt; <br>&gt; (Thanks for actually doing this! I just let it drop last week.)<br>&gt; <br>&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt; [0:574]&gt; grep -R &quot;func [A-Za-z0-9]*(\([A-Za-z0-9]*\) \1:&quot; Platforms/ | wc -l<br>&gt;      274<br>&gt; <br>&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt; [0:579]&gt; grep -R &quot;func [A-Za-z0-9]*(\([A-Za-z0-9]*\) \1:&quot; Platforms/ | head -5<br>&gt; Platforms//iOS/AssetsLibrary/ALAssetRepresentation.swift:  func cgImage(options options: [NSObject : AnyObject]! = [:]) -&gt; Unmanaged&lt;CGImage&gt;!<br>&gt; Platforms//iOS/CloudKit/CKContainer.swift:  func accountStatus(completionHandler completionHandler: (CKAccountStatus, NSError?) -&gt; Void)<br>&gt; Platforms//iOS/CloudKit/CKContainer.swift:  func fetchUserRecordID(completionHandler completionHandler: (CKRecordID?, NSError?) -&gt; Void)<br>&gt; Platforms//iOS/CloudKit/CKContainer.swift:  func discoverAllContactUserInfos(completionHandler completionHandler: ([CKDiscoveredUserInfo]?, NSError?) -&gt; Void)<br>&gt; Platforms//iOS/CloudKit/CKDatabase.swift:  func fetchAllRecordZones(completionHandler completionHandler: ([CKRecordZone]?, NSError?) -&gt; Void)<br>&gt; <br>&gt; <br>&gt;&gt; On Mar 14, 2016, at 16:01 , Shawn Erickson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I could have easily screwed up my grep but doing spot checks on the resulting data sets I didn&#39;t spot an issue. I did make assumptions about how well formed the data set was.<br>&gt;&gt; <br>&gt;&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt;&gt; [0:554]&gt; grep -R &quot;func [A-Za-z0-9]*([A-Za-z0-9]* [A-Za-z0-9]*:&quot; Platforms/ | wc -l<br>&gt;&gt;    10587<br>&gt;&gt; <br>&gt;&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt;&gt; [0:555]&gt; grep -R &quot;func [A-Za-z0-9]*(_ [A-Za-z0-9]*:&quot; Platforms/ | wc -l<br>&gt;&gt;    21654<br>&gt;&gt; <br>&gt;&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt;&gt; [0:556]&gt; grep -R &quot;func [A-Za-z0-9]*([A-Za-z0-9]* _:&quot; Platforms/ | wc -l<br>&gt;&gt;        0<br>&gt;&gt; <br>&gt;&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt;&gt; [0:557]&gt; grep -R &quot;func [A-Za-z0-9]*([A-Za-z0-9]*:&quot; Platforms/ | wc -l<br>&gt;&gt;       14<br>&gt;&gt; <br>&gt;&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt;&gt; [0:558]&gt; grep -R &quot;func [A-Za-z0-9]*()&quot; Platforms/ | wc -l<br>&gt;&gt;     7190<br>&gt;&gt; <br>&gt;&gt; ----<br>&gt;&gt; <br>&gt;&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt;&gt; [0:559]&gt; grep -R &quot;func [A-Za-z0-9]*([A-Za-z0-9]* [A-Za-z0-9]*:&quot; SampleCode/ | wc -l<br>&gt;&gt;       12<br>&gt;&gt; <br>&gt;&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt;&gt; [0:560]&gt; grep -R &quot;func [A-Za-z0-9]*(_ [A-Za-z0-9]*:&quot; SampleCode/ | wc -l<br>&gt;&gt;        0<br>&gt;&gt; <br>&gt;&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt;&gt; [0:561]&gt; grep -R &quot;func [A-Za-z0-9]*([A-Za-z0-9]* _:&quot; SampleCode/ | wc -l<br>&gt;&gt;        0<br>&gt;&gt; <br>&gt;&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt;&gt; [0:562]&gt; grep -R &quot;func [A-Za-z0-9]*([A-Za-z0-9]*:&quot; SampleCode/ | wc -l<br>&gt;&gt;      512<br>&gt;&gt; <br>&gt;&gt; [shawnce:~/Downloads/swift-3-api-guidelines-review-swift-3]<br>&gt;&gt; [0:563]&gt; grep -R &quot;func [A-Za-z0-9]*()&quot; SampleCode/ | wc -l<br>&gt;&gt;      221<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Mon, Mar 14, 2016 at 3:28 PM Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; on Sun Mar 13 2016, Shawn Erickson &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt; On Fri, Mar 11, 2016 at 1:30 PM Dave Abrahams via swift-evolution &lt;<br>&gt;&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Anyone who wants to measure is free to do so: simple regexps and wc<br>&gt;&gt; &gt;&gt; generally work for this purpose.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; https://github.com/apple/swift-3-api-guidelines-review/tree/swift-3/Platforms &lt;https://github.com/apple/swift-3-api-guidelines-review/tree/swift-3/Platforms&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Not sure if anyone actually got around to this so doing a basic set of<br>&gt;&gt; &gt; regex (includes class functions and overrides)...<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; func foo(bar baz:Baz... ---&gt; 10544<br>&gt;&gt; &gt; func foo(baz:Baz... ---&gt; 526<br>&gt;&gt; &gt; func foo(_:Baz... ---&gt; 92<br>&gt;&gt; &gt; func foo() ---&gt; 7392<br>&gt;&gt; <br>&gt;&gt; Are you certain?  Last we checked it was about 50/50 between having and<br>&gt;&gt; not-having a distinct argument label.<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160315/a2f6a9e2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March 15, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Mar 15, 2016, at 10:41 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Thank you! I realized one other potential flaw in the data-gathering: your search for &quot;func foo(_ bar&quot; will match both Objective-C methods and C functions. I&#39;m not sure CF should really be contributing to the scores. Unfortunately the main way I can think of to differentiate them is by indentation, which seems a little sketchy.<br>&gt; <br>&gt; Still, the conclusions I would draw from this are that the vast majority of methods fall into one of the three following categories:<br>&gt; <br>&gt; - No arguments.<br></p><p>No harm, no foul situation.<br></p><p>&gt; - Empty first argument label.<br></p><p>Change would primarily affect adding &quot;_ &quot;, two characters<br></p><p>&gt; - First argument label that does not match the parameter name.<br></p><p>No harm, no foul situation.<br></p><p>I still feel that adding consistency outweighs the inconvenience of the two extra characters, <br>which then show an *intent* that the argument label is empty by choice rather than convention.<br></p><p>-- E<br></p><p>&gt; This doesn&#39;t mean we shouldn&#39;t change the convention—&quot;_ completionHandler&quot; is much easier to type than &quot;completionHandler completionHandler&quot;, and it&#39;s still removing complexity—but it does mean (to me) that the new API naming guidelines don&#39;t make the &quot;matching&quot; case more important; they only make the &quot;no label&quot; case less important.<br>&gt; <br>&gt; Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160315/b6c0ee93/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
