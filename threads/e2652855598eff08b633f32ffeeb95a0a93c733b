<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[idle] COW wrapper in 30 lines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March 10, 2016 at 03:00:00pm</p></header><div class="content"><p>on Wed Mar 09 2016, Jordan Rose &lt;swift-dev-AT-swift.org&gt; wrote:<br></p><p>&gt; Just for fun, I wrote a wrapper for COW types that don&#39;t need the flexible inline storage of ManagedBuffer. It turned<br>&gt; out to be pretty straightforward, though I didn&#39;t bother with materializeForSet and thus am incurring the cost of<br>&gt; many extra value copies on mutation. The major downside is having to forward all operations through, something I&#39;m<br>&gt; sure the implementers of Array and Dictionary are very used to!<br>&gt;<br>&gt; Disclaimer: This is not performant; don&#39;t use it in your app.<br></p><p>Several issues with this:<br></p><p>1. a performant CoW type will often *not* want to start by copying<br>   itself when there is a mutation.  A trivial example: when you clear<br>   an Array.  So a simpleminded “always make a copy when I write the<br>   value” approach is not going to scale.<br></p><p>2. The thing in your box has to be a value type for this to work.  It&#39;s<br>   pretty uncommon that a thing that&#39;s already a value type benefits<br>   from being CoW-ified in this way.  That could usually only happen<br>   when it is quite atypically large.  It&#39;s a fine optimization to make<br>   when you can use it, but it doesn&#39;t change the programming model.<br>   The more interesting case for CoW is to produce value semantics where<br>   you otherwise wouldn&#39;t have it (e.g. Array).<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[idle] COW wrapper in 30 lines</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March 10, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Mar 10, 2016, at 3:54 PM, Dave Abrahams via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; 2. The thing in your box has to be a value type for this to work.  It&#39;s<br>&gt;   pretty uncommon that a thing that&#39;s already a value type benefits<br>&gt;   from being CoW-ified in this way.  <br></p><p>It doesn&#39;t need to be particularly large—if your value type contains two or more refcounted fields, it becomes cheaper to retain/release a single indirect box than to copy around the entire value inline.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160310/940f720a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[idle] COW wrapper in 30 lines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March 10, 2016 at 04:00:00pm</p></header><div class="content"><p>on Thu Mar 10 2016, Joe Groff &lt;jgroff-AT-apple.com&gt; wrote:<br></p><p>&gt;&gt; On Mar 10, 2016, at 3:54 PM, Dave Abrahams via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 2. The thing in your box has to be a value type for this to work.  It&#39;s<br>&gt;&gt;   pretty uncommon that a thing that&#39;s already a value type benefits<br>&gt;&gt;   from being CoW-ified in this way.  <br>&gt;<br>&gt; It doesn&#39;t need to be particularly large—if your value type contains<br>&gt; two or more refcounted fields, it becomes cheaper to retain/release a<br>&gt; single indirect box than to copy around the entire value inline.<br></p><p>You do have to trade that off against the cost of the allocation, but<br>you make a good point.  I&#39;d guess that value instances are probably<br>copied more often than they&#39;re created in other ways.<br></p><p>-- <br>-Dave<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
