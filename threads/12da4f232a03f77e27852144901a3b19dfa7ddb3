<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Draft] Apply -ed/-ing rule to core functional methods (e.g. filter =&gt; filtered)</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 20, 2016 at 02:00:00pm</p></header><div class="content"><p>on Fri Jun 17 2016, Brent Royal-Gordon &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; – What sin(x) should do is unambiguous, unlike array.filter { ... }.<br>&gt;<br>&gt; A decent argument label, like `including` or even `to`, would fix the<br>&gt; name `filter`. <br></p><p>  x.filter(to: isPrime)<br></p><p>? I don&#39;t think that reads nearly as well as <br></p><p>  x.where(isPrime)<br></p><p>even when considering the term-of-art recognizability.<br></p><p>&gt; And as I said, if we feel `filter` is unsalvageable, the alternate<br>&gt; Smalltalk-lineage `select` is clearer.<br></p><p>Than “where?”<br></p><p>&gt;&gt; – There&#39;s very significant brevity issues here, e.g. hyperbolicArcTangent() vs atanh().<br>&gt;<br>&gt; Sure, but `mappingAndFlattening(to:)` would have brevity issues as<br>&gt; well. (You didn&#39;t think the API Guidelines merely meant &quot;add -ed or<br>&gt; -ing to everything&quot;, did you?)<br></p><p>That would, IMO, be:<br></p><p>  x.flatMapping(fourCopies)<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Draft] Apply -ed/-ing rule to core functional methods (e.g. filter =&gt; filtered)</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June 20, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt;&gt; And as I said, if we feel `filter` is unsalvageable, the alternate<br>&gt;&gt; Smalltalk-lineage `select` is clearer.<br>&gt; <br>&gt; Than “where?”<br></p><p>No, than &quot;filter&quot;. &quot;filter&quot; is the most common name, but &quot;select&quot; is also fairly popular, and doesn&#39;t have the same ambiguity issues as &quot;filter&quot;. &quot;where&quot; is slightly clearer than &quot;filter&quot;, but it finds little precedent in other languages (the only other use I&#39;m aware of is in SQL and LINQ, which are declarative), ignores the normal grammar rules for a method (&quot;where&quot; is an adverb, not a noun or verb), and is already a language keyword which has been overloaded with several slightly different semantics, including list filtering in the `for` loop.<br></p><p>&gt;&gt;&gt; – There&#39;s very significant brevity issues here, e.g. hyperbolicArcTangent() vs atanh().<br>&gt;&gt; <br>&gt;&gt; Sure, but `mappingAndFlattening(to:)` would have brevity issues as<br>&gt;&gt; well. (You didn&#39;t think the API Guidelines merely meant &quot;add -ed or<br>&gt;&gt; -ing to everything&quot;, did you?)<br>&gt; <br>&gt; That would, IMO, be:<br>&gt; <br>&gt;  x.flatMapping(fourCopies)<br></p><p>Why? If we&#39;re leaving the terms of art behind, we probably ought to consider that the base name `flatMap` is rather opaque to new users; I&#39;ve seen people in my NSCoder group struggle with it. For that matter, `map` and `reduce` aren&#39;t the best names either.<br></p><p>I can understand wanting to keep terms of art even if they&#39;re a little opaque. I can understand wanting to invent new, clear terms. I cannot understand wanting to make minor cosmetic changes to the terms of art while still keeping the parts that make them opaque. You lose many of the benefits of a term of art *and* most of the benefits of a new term.<br></p><p>It&#39;s a bit like painting a single wall in a room: You can match the existing color exactly and have it look seamless, or you can choose an obviously different color and make a statement, but choosing a slightly different shade of the existing color does neither of those things.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Draft] Apply -ed/-ing rule to core functional methods (e.g. filter =&gt; filtered)</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 20, 2016 at 03:00:00pm</p></header><div class="content"><p>on Mon Jun 20 2016, Brent Royal-Gordon &lt;brent-AT-architechies.com&gt; wrote:<br></p><p>&gt;&gt;&gt; And as I said, if we feel `filter` is unsalvageable, the alternate<br>&gt;&gt;&gt; Smalltalk-lineage `select` is clearer.<br>&gt;&gt; <br>&gt;&gt; Than “where?”<br>&gt;<br>&gt; No, than &quot;filter&quot;. &quot;filter&quot; is the most common name, but &quot;select&quot; is<br>&gt; also fairly popular, and doesn&#39;t have the same ambiguity issues as<br>&gt; &quot;filter&quot;. <br></p><p>True.<br></p><p>&gt; &quot;where&quot; is slightly clearer than &quot;filter&quot;, but it finds little<br>&gt; precedent in other languages (the only other use I&#39;m aware of is in<br>&gt; SQL and LINQ, which are declarative), ignores the normal grammar rules<br>&gt; for a method (&quot;where&quot; is an adverb, not a noun or verb),<br></p><p>There&#39;s no rule that says the base name should be a noun or verb.  The<br>rule says that *usage* should be a verb *phrase* or noun *phrase.*<br></p><p>&gt; and is already a language keyword which has been overloaded with<br>&gt; several slightly different semantics, including list filtering in the<br>&gt; `for` loop.<br>&gt;<br>&gt;&gt;&gt;&gt; – There&#39;s very significant brevity issues here, e.g. hyperbolicArcTangent() vs atanh().<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sure, but `mappingAndFlattening(to:)` would have brevity issues as<br>&gt;&gt;&gt; well. (You didn&#39;t think the API Guidelines merely meant &quot;add -ed or<br>&gt;&gt;&gt; -ing to everything&quot;, did you?)<br>&gt;&gt; <br>&gt;&gt; That would, IMO, be:<br>&gt;&gt; <br>&gt;&gt;  x.flatMapping(fourCopies)<br>&gt;<br>&gt; Why? <br></p><p>Because one (flat)maps a function over a sequence.  The function is the direct<br>object.<br></p><p>&gt; If we&#39;re leaving the terms of art behind, we probably ought to<br>&gt; consider that the base name `flatMap` is rather opaque to new users;<br>&gt; I&#39;ve seen people in my NSCoder group struggle with it. For that<br>&gt; matter, `map` and `reduce` aren&#39;t the best names either.<br>&gt;<br>&gt; I can understand wanting to keep terms of art even if they&#39;re a little<br>&gt; opaque. I can understand wanting to invent new, clear terms. I cannot<br>&gt; understand wanting to make minor cosmetic changes to the terms of art<br>&gt; while still keeping the parts that make them opaque. You lose many of<br>&gt; the benefits of a term of art *and* most of the benefits of a new<br>&gt; term.<br></p><p>I agree.  However, we really need to discuss<br>http://article.gmane.org/gmane.comp.lang.swift.evolution/21046 before we<br>go any further down this road.<br></p><p>-- <br>Dave<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Draft] Apply -ed/-ing rule to core functional methods (e.g. filter =&gt; filtered)</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 21, 2016 at 06:00:00pm</p></header><div class="content"><p>On 21.06.2016 0:56, Brent Royal-Gordon via swift-evolution wrote:<br>&gt;&gt;&gt; And as I said, if we feel `filter` is unsalvageable, the alternate<br>&gt;&gt;&gt; Smalltalk-lineage `select` is clearer.<br>&gt;&gt;<br>&gt;&gt; Than “where?”<br>&gt;<br>&gt; No, than &quot;filter&quot;. &quot;filter&quot; is the most common name, but &quot;select&quot; is<br></p><p>Why not x.select(where: isPrime) ? IMO this is more clear than<br>x.select(filter: isPrime) and looks similar to `where` in other parts of <br>language.<br></p><p>&gt; also fairly popular, and doesn&#39;t have the same ambiguity issues as<br>&gt; &quot;filter&quot;. &quot;where&quot; is slightly clearer than &quot;filter&quot;, but it finds little<br>&gt; precedent in other languages (the only other use I&#39;m aware of is in SQL<br>&gt; and LINQ, which are declarative), ignores the normal grammar rules for a<br></p><p>FWIW  `Where` is used as method also in c#<br></p><p>Example:<br>IEnumerable&lt;int&gt; numQuery2 = numbers.Where(num =&gt; num % 2 == 0).OrderBy(n <br>=&gt; n);<br></p><p>&gt; method (&quot;where&quot; is an adverb, not a noun or verb), and is already a<br>&gt; language keyword which has been overloaded with several slightly<br>&gt; different semantics, including list filtering in the `for` loop.<br>&gt;<br>&gt;&gt;&gt;&gt; – There&#39;s very significant brevity issues here, e.g.<br>&gt;&gt;&gt;&gt; hyperbolicArcTangent() vs atanh().<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Sure, but `mappingAndFlattening(to:)` would have brevity issues as<br>&gt;&gt;&gt; well. (You didn&#39;t think the API Guidelines merely meant &quot;add -ed or<br>&gt;&gt;&gt; -ing to everything&quot;, did you?)<br>&gt;&gt;<br>&gt;&gt; That would, IMO, be:<br>&gt;&gt;<br>&gt;&gt; x.flatMapping(fourCopies)<br>&gt;<br>&gt; Why? If we&#39;re leaving the terms of art behind, we probably ought to<br>&gt; consider that the base name `flatMap` is rather opaque to new users;<br>&gt; I&#39;ve seen people in my NSCoder group struggle with it. For that matter,<br>&gt; `map` and `reduce` aren&#39;t the best names either.<br>&gt;<br>&gt; I can understand wanting to keep terms of art even if they&#39;re a little<br>&gt; opaque. I can understand wanting to invent new, clear terms. I cannot<br>&gt; understand wanting to make minor cosmetic changes to the terms of art<br>&gt; while still keeping the parts that make them opaque. You lose many of<br>&gt; the benefits of a term of art *and* most of the benefits of a new term.<br>&gt;<br>&gt; It&#39;s a bit like painting a single wall in a room: You can match the<br>&gt; existing color exactly and have it look seamless, or you can choose an<br>&gt; obviously different color and make a statement, but choosing a slightly<br>&gt; different shade of the existing color does neither of those things.<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Draft] Apply -ed/-ing rule to core functional methods (e.g. filter =&gt; filtered)</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June 21, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; FWIW  `Where` is used as method also in c#<br>&gt; <br>&gt; Example:<br>&gt; IEnumerable&lt;int&gt; numQuery2 = numbers.Where(num =&gt; num % 2 == 0).OrderBy(n =&gt; n);<br></p><p>C# Where is part of LINQ; even when called as a method instead of as special syntax, it still has lazy, declarative behavior.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
