<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Epic: Typesafe calculations</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 21, 2016 at 01:00:00pm</p></header><div class="content"><p>on Thu Jan 21 2016, Erica Sadun &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Going off the top of my head, I&#39;d imagine it&#39;s a product type that<br>&gt; inherits memory layout, code reuse, and conformances but introduces a<br>&gt; distinct type for type safety checks. <br></p><p>FWIW, that&#39;s definitely not what *I&#39;m* talking about, though some of the<br>people in this thread may have meant that.<br></p><p>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Epic: Typesafe calculations</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>January 21, 2016 at 03:00:00pm</p></header><div class="content"><p>I vaguely remember having the discussion on this so the compiler could catch, for example:<br></p><p>typealias MyQuantityType = Int<br>typealias MyCounterType = Int<br></p><p>let x: MyQuantityType = 2<br>let y: MyCounterType = 3<br></p><p>x something blah something y // COMPILER ERROR<br></p><p>-- E<br></p><p><br>&gt; On Jan 21, 2016, at 2:58 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Thu Jan 21 2016, Erica Sadun &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Going off the top of my head, I&#39;d imagine it&#39;s a product type that<br>&gt;&gt; inherits memory layout, code reuse, and conformances but introduces a<br>&gt;&gt; distinct type for type safety checks. <br>&gt; <br>&gt; FWIW, that&#39;s definitely not what *I&#39;m* talking about, though some of the<br>&gt; people in this thread may have meant that.<br>&gt; <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Epic: Typesafe calculations</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>January 21, 2016 at 02:00:00pm</p></header><div class="content"><p>I made a post vaguely similar to that on the Apple dev forums, but I don&#39;t think I said anything about it here.<br></p><p>Basically I wanted to be able to define &quot;List&quot; and &quot;Vector&quot; as copies of Array, so that I could overload + for them and not worry about ambiguous code.<br></p><p>- Dave Sweeris<br></p><p>&gt; On Jan 21, 2016, at 14:14, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I vaguely remember having the discussion on this so the compiler could catch, for example:<br>&gt; <br>&gt; typealias MyQuantityType = Int<br>&gt; typealias MyCounterType = Int<br>&gt; <br>&gt; let x: MyQuantityType = 2<br>&gt; let y: MyCounterType = 3<br>&gt; <br>&gt; x something blah something y // COMPILER ERROR<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 21, 2016, at 2:58 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; on Thu Jan 21 2016, Erica Sadun &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Going off the top of my head, I&#39;d imagine it&#39;s a product type that<br>&gt;&gt;&gt; inherits memory layout, code reuse, and conformances but introduces a<br>&gt;&gt;&gt; distinct type for type safety checks.<br>&gt;&gt; <br>&gt;&gt; FWIW, that&#39;s definitely not what *I&#39;m* talking about, though some of the<br>&gt;&gt; people in this thread may have meant that.<br>&gt;&gt; <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
