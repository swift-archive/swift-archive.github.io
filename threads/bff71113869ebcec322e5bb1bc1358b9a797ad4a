<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dbefca1948defb75c917225e62d321a5?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Hans Huck</string> &lt;gutgedacht at gmx.de&gt;<p>April 14, 2016 at 11:00:00pm</p></header><div class="content"><p>Dave Abrahams via swift-evolution &lt;swift-evolution at ...&gt; writes:<br>&gt; <br>&gt; <br>&gt; on Thu Apr 14 2016, Hans Huck &lt;swift-evolution &lt;at&gt; swift.org&gt; wrote:<br>&gt; <br>&gt; &gt; Dave Abrahams via swift-evolution &lt;swift-evolution &lt;at&gt; ...&gt; writes:<br>&gt; &gt;<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; If I thought extreme concision was important for this application, I&#39;d be<br>&gt; &gt;&gt; proposing something like <br>&gt; &gt;&gt; <br>&gt; &gt;&gt;   for x in 0.0..&lt;20.0//1.3 {}<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; but personally, I don&#39;t,<br>&gt; &gt;&gt;<br>&gt; &gt; And that is why exactly? The For-loop is at the very core of the language<br>&gt; &gt; and one of its most frequently used structures. Any unnecessary noise should<br>&gt; &gt; be avoided here.<br>&gt; &gt;<br>&gt; &gt;&gt; which is why I propose `.striding(by: x)`<br>&gt; &gt;&gt; rather than simply `.by(x)`, the latter being more open to<br>&gt; &gt;&gt; misinterpretation.<br>&gt; &gt;&gt; <br>&gt; &gt; Please elaborate. How could<br>&gt; &gt;<br>&gt; &gt; for i in (1...10).by(3)<br>&gt; &gt;<br>&gt; &gt; possibly be misinterpreted?<br>&gt; <br>&gt;   (p1..&lt;p2).by(lineCount)<br>&gt; <br>&gt; Doesn&#39;t exactly tell me what role lineCount is playing or what &quot;by&quot;<br>&gt; does.  Maybe it means give me the range sorted by line count.  In this<br>&gt; case a little more verbosity can be the difference between<br>&gt; understandable and unmistakable.<br>&gt; <br></p><p>I find that unlikely, unless one is completely new to the language, but I<br>see your point -- for ranges in general.<br></p><p>It is impossible though to misinterprete it in the context of a For-loop, so<br>to keep the latter concise and the former unmistakable, what do you think of <br></p><p>for i in p1..&lt;p2 by x<br></p><p>as syntactic sugar for and internally mapped to<br></p><p>for i in (p1..&lt;p2).striding(by: x)<br></p><p>Best of both worlds?<br></p><p>-- Hans<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>April 14, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; for i in p1..&lt;p2 by x<br>&gt; <br>&gt; as syntactic sugar for and internally mapped to<br>&gt; <br>&gt; for i in (p1..&lt;p2).striding(by: x)<br>&gt; <br>&gt; Best of both worlds?<br></p><p>Look. It is very, very unlikely that you will get people to add syntactic sugar *just* for striding and *just* for the for loop. If this:<br></p><p>	for i in (1..&lt;10).striding(by: 2) { … }<br></p><p>Is so ugly that we need special syntactic sugar for it, then so is this:<br></p><p>	(1..&lt;10).striding(by: 2).map { … }<br></p><p>That means we would need an expression along the lines of:<br></p><p>	1..&lt;10 by 2<br></p><p>Which could be used anywhere. Unfortunately, Swift does not allow word characters in identifiers, so `by` as an operator is a non-starter. I can&#39;t think of a non-letter operator for `by` that would make sense, so we&#39;re probably not going to go that route, either (but if you have a suggestion—preferably one backed by existing notation from, say, math—by all means suggest it).<br></p><p>I don&#39;t think you&#39;re going to make anything happen here.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>April 14, 2016 at 09:00:00pm</p></header><div class="content"><p>“|” often means “with” in math, which is only one word off from “with step”.<br>func | &lt;T: Strideable where T.Stride : IntegerType&gt; (range: Range&lt;T&gt;, stride: T.Stride) -&gt; IntegerStrideTo&lt;T&gt; {<br>    return IntegerStrideTo(_start: range.startIndex, end: range.endIndex, stride: stride)<br>}<br>var arr = [Int]()<br>for i in (0 ..&lt; 10) | 2 {<br>    arr.append(i)<br>}<br>arr //[0,2,4,6,8]<br></p><p>I couldn’t figure out how to do it without the parens… everything I could think to try is determined to parse as `(0) ..&lt; (10 | 2)`, so `arr` ends up equalling [0,1,2,3,4,5,6,7,8,9]. If operator precedence and associativity were per-function rather than per-op, it could be made to work without the ().<br></p><p>- Dave Sweeris<br></p><p>&gt; On Apr 14, 2016, at 8:27 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; That means we would need an expression along the lines of:<br>&gt; <br>&gt; 	1..&lt;10 by 2<br>&gt; <br>&gt; Which could be used anywhere. Unfortunately, Swift does not allow word characters in identifiers, so `by` as an operator is a non-starter. I can&#39;t think of a non-letter operator for `by` that would make sense, so we&#39;re probably not going to go that route, either (but if you have a suggestion—preferably one backed by existing notation from, say, math—by all means suggest it).<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160414/4f1eb9c1/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
