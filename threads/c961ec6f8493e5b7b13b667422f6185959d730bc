<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05540cd6be96706f76aa66a4519f7db9?s=50"></div><header><strong>Release build performance tests in SwiftPM</strong> from <string>Ankit Agarwal</string> &lt;ankit at ankit.im&gt;<p>August  2, 2016 at 12:00:00am</p></header><div class="content"><p>Hi,<br></p><p>Currently SwiftPM builds tests in debug configuration with testability<br>enabled i.e. @testable import Module which gives tests internal level<br>access to that module. This works ok for normal unit tests but there is no<br>way to run performance tests in release mode right now.<br></p><p>SwiftPM can enable a release config with testability for building and<br>running tests but enabling testability will remove some<br>compiler optimisations and will not be the final release code which will be<br>shipping and users would almost always want to run perf tests on the final<br>release code. Not enabling testability in release mode tests will make the<br>code that uses @testable import fail to compile.<br></p><p>There are two potential solutions which I can think of:<br>1. let testability be enabled in release mode tests and not care about the<br>difference.<br></p><p>2. Have another convention especially for performance tests. A PerfTests<br>directory besides Tests directory which will always test in release mode<br>with testability off and user is expected not to use the @testable imports<br>there.<br></p><p>Thoughts?<br></p><p>-- <br>Ankit<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160802/c96130bc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Release build performance tests in SwiftPM</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>August  1, 2016 at 12:00:00pm</p></header><div class="content"><p>FWIW, and this isn&#39;t really an answer, but the convention I have personally adopted (in Xcode, not SwiftPM) to deal with this problem is that performance tests always go into their own module, so it can have a different set of build dependencies, flags, workflows, etc.<br></p><p>This is a workable model, but it feels unfortunate to me because it is partly in response to both (a) how testability is currently defined, and (b) how XCTest defines performance tests. I have dreams we will eventually improve (a), which makes me wonder if adding a convention specifically for performance tests is the right direction.<br></p><p>On the other hand, I also believe performance tests end up having very different workflow requirements than regular tests. That may mean they deserve a special case independent of the @testability problem.<br></p><p>I am very strongly opposed to any workflow which only works by building with @testability enabled in release mode. Those workflows don&#39;t work well for very performance sensitive code which depend critically on compiler optimization, and which need that behavior to be tracked by performance tests to defend against regressions.<br></p><p>BTW, this is somewhat related to the topic Brian raised recently:<br>  https://lists.swift.org/pipermail/swift-build-dev/Week-of-Mon-20160725/000567.html<br></p><p>Also, this is basically part of:<br>  https://bugs.swift.org/browse/SR-1354 &lt;https://bugs.swift.org/browse/SR-1354&gt;<br></p><p>I think it would be worth brainstorming what a performance test &quot;convention&quot; would look like, and then see if the proposal has sufficient interest and can justify its own existence versus alternatives.<br></p><p> - Daniel<br></p><p>&gt; On Aug 1, 2016, at 11:33 AM, Ankit Agarwal via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; Currently SwiftPM builds tests in debug configuration with testability enabled i.e. @testable import Module which gives tests internal level access to that module. This works ok for normal unit tests but there is no way to run performance tests in release mode right now.<br>&gt; <br>&gt; SwiftPM can enable a release config with testability for building and running tests but enabling testability will remove some compiler optimisations and will not be the final release code which will be shipping and users would almost always want to run perf tests on the final release code. Not enabling testability in release mode tests will make the code that uses @testable import fail to compile.<br>&gt; <br>&gt; There are two potential solutions which I can think of:<br>&gt; 1. let testability be enabled in release mode tests and not care about the difference.<br>&gt; <br>&gt; 2. Have another convention especially for performance tests. A PerfTests directory besides Tests directory which will always test in release mode with testability off and user is expected not to use the @testable imports there.<br>&gt; <br>&gt; Thoughts?<br>&gt; <br>&gt; -- <br>&gt; Ankit<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160801/ad7f2b59/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc38aef146f886571b3c445851add884?s=50"></div><header><strong>Release build performance tests in SwiftPM</strong> from <string>Honza Dvorsky</string> &lt;jan.dvorsky at me.com&gt;<p>August  2, 2016 at 07:00:00am</p></header><div class="content"><p>A workable convention could be to detect classes which end with<br>&quot;*PerformanceTests&quot; and when building, create their own test module that<br>doesn&#39;t have testability enabled. So we&#39;d end up with building two<br>underlying test modules and running them both under the hood. All that<br>users would need to do is 1) name some of their test classes with<br>PerformanceTests at the end and 2) not use @testable import in those test<br>classes.<br></p><p>Might be too much magic, but I&#39;m just building on top of *Tests naming<br>conventions that we&#39;re already using.<br></p><p>Honza<br></p><p>On Mon, Aug 1, 2016 at 9:33 PM Daniel Dunbar via swift-build-dev &lt;<br>swift-build-dev at swift.org&gt; wrote:<br></p><p>&gt; FWIW, and this isn&#39;t really an answer, but the convention I have<br>&gt; personally adopted (in Xcode, not SwiftPM) to deal with this problem is<br>&gt; that performance tests always go into their own module, so it can have a<br>&gt; different set of build dependencies, flags, workflows, etc.<br>&gt;<br>&gt; This is a workable model, but it feels unfortunate to me because it is<br>&gt; partly in response to both (a) how testability is currently defined, and<br>&gt; (b) how XCTest defines performance tests. I have dreams we will eventually<br>&gt; improve (a), which makes me wonder if adding a convention specifically for<br>&gt; performance tests is the right direction.<br>&gt;<br>&gt; On the other hand, I also believe performance tests end up having very<br>&gt; different workflow requirements than regular tests. That may mean they<br>&gt; deserve a special case independent of the @testability problem.<br>&gt;<br>&gt; I am very strongly opposed to any workflow which only works by building<br>&gt; with @testability enabled in release mode. Those workflows don&#39;t work well<br>&gt; for very performance sensitive code which depend critically on compiler<br>&gt; optimization, and which need that behavior to be tracked by performance<br>&gt; tests to defend against regressions.<br>&gt;<br>&gt; BTW, this is somewhat related to the topic Brian raised recently:<br>&gt;<br>&gt; https://lists.swift.org/pipermail/swift-build-dev/Week-of-Mon-20160725/000567.html<br>&gt;<br>&gt; Also, this is basically part of:<br>&gt;   https://bugs.swift.org/browse/SR-1354<br>&gt;<br>&gt; I think it would be worth brainstorming what a performance test<br>&gt; &quot;convention&quot; would look like, and then see if the proposal has sufficient<br>&gt; interest and can justify its own existence versus alternatives.<br>&gt;<br>&gt;  - Daniel<br>&gt;<br>&gt; On Aug 1, 2016, at 11:33 AM, Ankit Agarwal via swift-build-dev &lt;<br>&gt; swift-build-dev at swift.org&gt; wrote:<br>&gt;<br>&gt; Hi,<br>&gt;<br>&gt; Currently SwiftPM builds tests in debug configuration with testability<br>&gt; enabled i.e. @testable import Module which gives tests internal level<br>&gt; access to that module. This works ok for normal unit tests but there is no<br>&gt; way to run performance tests in release mode right now.<br>&gt;<br>&gt; SwiftPM can enable a release config with testability for building and<br>&gt; running tests but enabling testability will remove some<br>&gt; compiler optimisations and will not be the final release code which will be<br>&gt; shipping and users would almost always want to run perf tests on the final<br>&gt; release code. Not enabling testability in release mode tests will make the<br>&gt; code that uses @testable import fail to compile.<br>&gt;<br>&gt; There are two potential solutions which I can think of:<br>&gt; 1. let testability be enabled in release mode tests and not care about the<br>&gt; difference.<br>&gt;<br>&gt; 2. Have another convention especially for performance tests. A PerfTests<br>&gt; directory besides Tests directory which will always test in release mode<br>&gt; with testability off and user is expected not to use the @testable imports<br>&gt; there.<br>&gt;<br>&gt; Thoughts?<br>&gt;<br>&gt; --<br>&gt; Ankit<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160802/cd6b17b0/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
