<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4c60436f08b7b107f0bb0848c31297fa?s=50"></div><header><strong>Foundation and NSDecimal</strong> from <string>Alex Blewitt</string> &lt;alblue at apple.com&gt;<p>September 27, 2016 at 01:00:00pm</p></header><div class="content"><p>The Framework function <br></p><p>NS_INLINE BOOL NSDecimalIsNotANumber(const NSDecimal *dcm)<br></p><p>has been imported into Swift on both Darwin and Linux as<br></p><p>:type lookup NSDecimalIsNotANumber<br>@discardableResult func NSDecimalIsNotANumber(_ dcm: Swift.UnsafePointer&lt;Foundation.Decimal&gt;) -&gt; Swift.Bool<br>:type lookup NSDecimalIsNotANumber<br>func NSDecimalIsNotANumber(_ dcm: Swift.UnsafePointer&lt;Foundation.Decimal&gt;) -&gt; Swift.Bool<br></p><p>However I think this should instead be imported as a member function on the Decimal type, instead of passing through a pointer.<br></p><p>extension Decimal {<br>  public func isNotANumber() -&gt; Bool<br>}<br></p><p>This may not have been picked up by the automatic renaming progress because it&#39;s a const pointer, and because it&#39;s an NS_INLINE defined in the header, instead of in an implementation file.<br></p><p>There are some other global constants NSDecimalMaxSize and NSDecimalNoScale, which should probably be implemented as constants in the Decimal type as well e.g.<br></p><p>extension Decimal {<br>  public let maxSize = 8<br>  public let noScale =  Int16.max<br>}<br></p><p>Since this would need to be fixed in both the Swift Linux foundation implementation and the Darwin overlay (and it would be a breaking change) what is the right process to be able to fix this?<br></p><p>Alex<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e01e37acbfad671da1b94a61cf819d82?s=50"></div><header><strong>Foundation and NSDecimal</strong> from <string>Kenny Leung</string> &lt;kenny_leung at pobox.com&gt;<p>September 28, 2016 at 09:00:00am</p></header><div class="content"><p>I would also say that this should not be marked as @discardableResult, since its only purpose is to report back yes or no, it would be kind of suspicious if the it wasn’t used.<br></p><p>-Kenny<br></p><p><br>&gt; On Sep 27, 2016, at 5:34 AM, Alex Blewitt via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; The Framework function <br>&gt; <br>&gt; NS_INLINE BOOL NSDecimalIsNotANumber(const NSDecimal *dcm)<br>&gt; <br>&gt; has been imported into Swift on both Darwin and Linux as<br>&gt; <br>&gt; :type lookup NSDecimalIsNotANumber<br>&gt; @discardableResult func NSDecimalIsNotANumber(_ dcm: Swift.UnsafePointer&lt;Foundation.Decimal&gt;) -&gt; Swift.Bool<br>&gt; :type lookup NSDecimalIsNotANumber<br>&gt; func NSDecimalIsNotANumber(_ dcm: Swift.UnsafePointer&lt;Foundation.Decimal&gt;) -&gt; Swift.Bool<br>&gt; <br>&gt; However I think this should instead be imported as a member function on the Decimal type, instead of passing through a pointer.<br>&gt; <br>&gt; extension Decimal {<br>&gt;  public func isNotANumber() -&gt; Bool<br>&gt; }<br>&gt; <br>&gt; This may not have been picked up by the automatic renaming progress because it&#39;s a const pointer, and because it&#39;s an NS_INLINE defined in the header, instead of in an implementation file.<br>&gt; <br>&gt; There are some other global constants NSDecimalMaxSize and NSDecimalNoScale, which should probably be implemented as constants in the Decimal type as well e.g.<br>&gt; <br>&gt; extension Decimal {<br>&gt;  public let maxSize = 8<br>&gt;  public let noScale =  Int16.max<br>&gt; }<br>&gt; <br>&gt; Since this would need to be fixed in both the Swift Linux foundation implementation and the Darwin overlay (and it would be a breaking change) what is the right process to be able to fix this?<br>&gt; <br>&gt; Alex<br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4c60436f08b7b107f0bb0848c31297fa?s=50"></div><header><strong>Foundation and NSDecimal</strong> from <string>Alex Blewitt</string> &lt;alblue at apple.com&gt;<p>September 28, 2016 at 05:00:00pm</p></header><div class="content"><p>I agree, but I&#39;m not sure where that&#39;s coming from. It seems to be being imported from CoreFoundation on Darwin, and although it&#39;s defined this way in NSDecimal.h in the Foundation framework:<br></p><p>NS_INLINE BOOL NSDecimalIsNotANumber(const NSDecimal *dcm)<br>  { return ((dcm-&gt;_length == 0) &amp;&amp; dcm-&gt;_isNegative); }<br></p><p>I&#39;m not sure why the @discardableResult attribute is being added here; perhaps it&#39;s to do with the fact that it&#39;s an NS_INLINE function. Should I raise a separate bug for that?<br></p><p>Alex<br></p><p>&gt; On 28 Sep 2016, at 17:32, Kenny Leung via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I would also say that this should not be marked as @discardableResult, since its only purpose is to report back yes or no, it would be kind of suspicious if the it wasn’t used.<br>&gt; <br>&gt; -Kenny<br>&gt; <br>&gt; <br>&gt;&gt; On Sep 27, 2016, at 5:34 AM, Alex Blewitt via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The Framework function <br>&gt;&gt; <br>&gt;&gt; NS_INLINE BOOL NSDecimalIsNotANumber(const NSDecimal *dcm)<br>&gt;&gt; <br>&gt;&gt; has been imported into Swift on both Darwin and Linux as<br>&gt;&gt; <br>&gt;&gt; :type lookup NSDecimalIsNotANumber<br>&gt;&gt; @discardableResult func NSDecimalIsNotANumber(_ dcm: Swift.UnsafePointer&lt;Foundation.Decimal&gt;) -&gt; Swift.Bool<br>&gt;&gt; :type lookup NSDecimalIsNotANumber<br>&gt;&gt; func NSDecimalIsNotANumber(_ dcm: Swift.UnsafePointer&lt;Foundation.Decimal&gt;) -&gt; Swift.Bool<br>&gt;&gt; <br>&gt;&gt; However I think this should instead be imported as a member function on the Decimal type, instead of passing through a pointer.<br>&gt;&gt; <br>&gt;&gt; extension Decimal {<br>&gt;&gt; public func isNotANumber() -&gt; Bool<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; This may not have been picked up by the automatic renaming progress because it&#39;s a const pointer, and because it&#39;s an NS_INLINE defined in the header, instead of in an implementation file.<br>&gt;&gt; <br>&gt;&gt; There are some other global constants NSDecimalMaxSize and NSDecimalNoScale, which should probably be implemented as constants in the Decimal type as well e.g.<br>&gt;&gt; <br>&gt;&gt; extension Decimal {<br>&gt;&gt; public let maxSize = 8<br>&gt;&gt; public let noScale =  Int16.max<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Since this would need to be fixed in both the Swift Linux foundation implementation and the Darwin overlay (and it would be a breaking change) what is the right process to be able to fix this?<br>&gt;&gt; <br>&gt;&gt; Alex<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
