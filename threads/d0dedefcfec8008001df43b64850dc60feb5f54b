<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0142: Permit where clauses to constrain associated types</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>September 23, 2016 at 04:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of SE-0142: &quot;Permit where clauses to constrain associated types&quot; begins now and runs through September 30, 2016. The proposal is available here:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0142-associated-types-constraints.md<br>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br></p><p>Proposal link:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0142-associated-types-constraints.md<br>Reply text<br></p><p>Other replies<br> &lt;https://github.com/apple/swift-evolution/pull/532#what-goes-into-a-review-1&gt;What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>What is your evaluation of the proposal?<br>Is the problem being addressed significant enough to warrant a change to Swift?<br>Does this proposal fit well with the feel and direction of Swift?<br>If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>More information about the Swift evolution process is available at<br></p><p>https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>Thank you,<br></p><p>-Doug Gregor<br></p><p>Review Manager<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20160923/d0def54b/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Review] SE-0142: Permit where clauses to constrain associated types</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>September 23, 2016 at 05:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br></p><p>+1. I very much want to see this in Swift, and it seems like a logical<br>progression that has the potential to eliminate ugly workarounds.<br></p><p>* Is the problem being addressed significant enough to warrant a change to<br>Swift?<br></p><p>Yes. Right now the desired relationships between the associated types of a<br>protocol must be written out at each site of use (for example, a generic<br>function declaration that involves that protocol type). When defining a<br>type that conforms to such a protocol these relationships must either be<br>discovered through documentation, or by examining the APIs with which the<br>conforming type will be used.<br></p><p>By changing this implicit contract (through documentation + use site<br>constraints) into an explicit contract (through constraints directly<br>expressed at the point where the associated types are defined), programmers<br>seeking to write conforming types have an easier time understanding how the<br>protocols they are conforming to are intended to work, and programmers<br>seeking to write APIs involving those protocols don&#39;t need to spell out the<br>constraints repeatedly.<br></p><p>* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes. We already have a pretty regular regime for the use of `where` to<br>define constraints, for example in generic type and function declarations<br>and when defining constrained extensions. Adding support for `where` to<br>associated types would be a natural extension of the existing ability to<br>specify protocol conformance, and its semantics would not be surprising to<br>those familiar with the other uses of `where`. (This comment I think<br>applies to all three of the proposed syntaxes.)<br></p><p>* If you have used other languages or libraries with a similar feature, how<br>do you feel that this proposal compares to those?<br></p><p>n/a<br></p><p>* How much effort did you put into your review? A glance, a quick reading,<br>or an in-depth study?<br></p><p>Read the review, followed most of the pertinent threads over the past few<br>months with varying degrees of attentiveness.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160923/9cfbe93e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e7e554db1f80d7d6041d92edd5145698?s=50"></div><header><strong>[Review] SE-0142: Permit where clauses to constrain associated types</strong> from <string>Hooman Mehr</string> &lt;hooman at mac.com&gt;<p>September 23, 2016 at 06:00:00pm</p></header><div class="content"><p>Strong +1. I really need this feature to improve and simplify my existing code. <br></p><p>&gt; On Sep 23, 2016, at 5:50 PM, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; * What is your evaluation of the proposal?<br>&gt; <br>&gt; +1. I very much want to see this in Swift, and it seems like a logical progression that has the potential to eliminate ugly workarounds.<br>&gt; <br>&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; Yes. Right now the desired relationships between the associated types of a protocol must be written out at each site of use (for example, a generic function declaration that involves that protocol type). When defining a type that conforms to such a protocol these relationships must either be discovered through documentation, or by examining the APIs with which the conforming type will be used.<br>&gt; <br>&gt; By changing this implicit contract (through documentation + use site constraints) into an explicit contract (through constraints directly expressed at the point where the associated types are defined), programmers seeking to write conforming types have an easier time understanding how the protocols they are conforming to are intended to work, and programmers seeking to write APIs involving those protocols don&#39;t need to spell out the constraints repeatedly.<br>&gt; <br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; Yes. We already have a pretty regular regime for the use of `where` to define constraints, for example in generic type and function declarations and when defining constrained extensions. Adding support for `where` to associated types would be a natural extension of the existing ability to specify protocol conformance, and its semantics would not be surprising to those familiar with the other uses of `where`. (This comment I think applies to all three of the proposed syntaxes.)<br>&gt; <br>&gt; * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; n/a<br>&gt; <br>&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; Read the review, followed most of the pertinent threads over the past few months with varying degrees of attentiveness.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Review] SE-0142: Permit where clauses to constrain associated types</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>September 24, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br>+1, like others I would love to have this feature available today, as my code is currently littered with complicated constraints on types that could be much more elegantly handled by constraints on the associated types themselves.<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>Definitely, this seems like an important next step for Swift&#39;s support of generics and constraints.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br>Yes, absolutely.<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>I&#39;ve read through it fairly quickly, but I feel I already have a pretty good grasp of what the feature entails as it solves a problem I encounter often!<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160924/8cb3bad9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d042be5dcfe90e649f760303af3e429?s=50"></div><header><strong>[Review] SE-0142: Permit where clauses to constrain associated types</strong> from <string>Jens Persson</string> &lt;jens at bitcycle.com&gt;<p>September 24, 2016 at 11:00:00am</p></header><div class="content"><p>Strong +1<br></p><p>On Sat, Sep 24, 2016 at 9:36 AM, Haravikk via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt;<br>&gt;    - What is your evaluation of the proposal?<br>&gt;<br>&gt; +1, like others I would love to have this feature available today, as my<br>&gt; code is currently littered with complicated constraints on types that could<br>&gt; be much more elegantly handled by constraints on the associated types<br>&gt; themselves.<br>&gt;<br>&gt;<br>&gt;    - Is the problem being addressed significant enough to warrant a<br>&gt;    change to Swift?<br>&gt;<br>&gt; Definitely, this seems like an important next step for Swift&#39;s support of<br>&gt; generics and constraints.<br>&gt;<br>&gt;<br>&gt;    - Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt; Yes, absolutely.<br>&gt;<br>&gt;<br>&gt;    - How much effort did you put into your review? A glance, a quick<br>&gt;    reading, or an in-depth study?<br>&gt;<br>&gt; I&#39;ve read through it fairly quickly, but I feel I already have a pretty<br>&gt; good grasp of what the feature entails as it solves a problem I encounter<br>&gt; often!<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160924/d7b159a1/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0142: Permit where clauses to constrain associated types</strong> from <string>Drew Crawford</string> &lt;drew at sealedabstract.com&gt;<p>September 24, 2016 at 02:00:00pm</p></header><div class="content"><p>This is the #1 Swift feature I have wanted for the past 2 years.<br></p><p>One thing I would like to see (perhaps out of scope for this proposal) is the natural extension for generic parameters:<br></p><p>struct Box&lt;T&gt; {<br>    var t: T<br>}<br></p><p>extension Box where T == Int { //error: Same-type requirement makes generic parameter T non-generic<br>}<br></p><p>There is a great deal of overlap between associated types and generic parameters, and it seems to me that it would be favorable to allow `==` with both generic parameter operands and associatedtype operands for consistency.<br></p><p>Drew<br></p><p>On September 23, 2016 at 6:51:51 PM, Douglas Gregor (dgregor at apple.com) wrote:<br></p><p>Hello Swift community,<br></p><p>The review of SE-0142: &quot;Permit where clauses to constrain associated types&quot; begins now and runs through September 30, 2016. The proposal is available here:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0142-associated-types-constraints.md<br>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>https://lists.swift.org/mailman/listinfo/swift-evolution<br>or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br></p><p>Proposal link:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0142-associated-types-constraints.md<br>Reply text<br></p><p>Other replies<br>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>What is your evaluation of the proposal?<br>Is the problem being addressed significant enough to warrant a change to Swift?<br>Does this proposal fit well with the feel and direction of Swift?<br>If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>More information about the Swift evolution process is available at<br></p><p>https://github.com/apple/swift-evolution/blob/master/process.md<br>Thank you,<br></p><p>-Doug Gregor<br></p><p>Review Manager<br></p><p>_______________________________________________<br>swift-evolution-announce mailing list<br>swift-evolution-announce at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160924/0ecd3357/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2b19ddab2d7de4523412c875c258e278?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0142: Permit where clauses to constrain associated types</strong> from <string>Matt Whiteside</string> &lt;mwhiteside.dev at gmail.com&gt;<p>September 24, 2016 at 02:00:00pm</p></header><div class="content"><p>I also wanted to throw in support for Drew’s addendum below.  It’s a feature I’ve come across the need more than once, and I don’t even write a lot of swift.<br></p><p>-Matt<br></p><p>&gt; One thing I would like to see (perhaps out of scope for this proposal) is the natural extension for generic parameters:<br>&gt; <br>&gt; struct Box&lt;T&gt; {<br>&gt;     var t: T<br>&gt; }<br>&gt; <br>&gt; extension Box where T == Int { //error: Same-type requirement makes generic parameter T non-generic<br>&gt; }<br>&gt; <br>&gt; There is a great deal of overlap between associated types and generic parameters, and it seems to me that it would be favorable to allow `==` with both generic parameter operands and associatedtype operands for consistency.<br>&gt; <br>&gt; Drew<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160924/5bccf4aa/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0142: Permit where clauses to constrain associated types</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>September 25, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On 24 Sep 2016, at 21:58, Drew Crawford via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; This is the #1 Swift feature I have wanted for the past 2 years.<br>&gt; <br>&gt; One thing I would like to see (perhaps out of scope for this proposal) is the natural extension for generic parameters:<br>&gt; <br>&gt; struct Box&lt;T&gt; {<br>&gt;     var t: T<br>&gt; }<br>&gt; <br>&gt; extension Box where T == Int { //error: Same-type requirement makes generic parameter T non-generic<br>&gt; }<br>&gt; <br>&gt; There is a great deal of overlap between associated types and generic parameters, and it seems to me that it would be favorable to allow `==` with both generic parameter operands and associatedtype operands for consistency.<br>&gt; <br>&gt; Drew<br>&gt; <br></p><p><br>I think this is already part of the Generics Manifesto: https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md<br></p><p>&gt; Concrete same-type requirements<br>&gt; <br>&gt; Currently, a constrained extension cannot use a same-type constraint to make a type parameter equivalent to a concrete type. For example:<br>&gt; <br>&gt; extension Array where Element == String {<br>&gt;   func makeSentence() -&gt; String {<br>&gt;     // uppercase first string, concatenate with spaces, add a period, whatever<br>&gt;   }<br>&gt; }<br>&gt; This is a highly-requested feature that fits into the existing syntax and semantics. Note that one could imagine introducing new syntax, e.g., extending Array&lt;String&gt;, which gets into new-feature territory: see the section on &quot;Parameterized extensions&quot;.<br>&gt; <br></p><p>- Karl<br>&gt; On September 23, 2016 at 6:51:51 PM, Douglas Gregor (dgregor at apple.com &lt;mailto:dgregor at apple.com&gt;) wrote:<br>&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of SE-0142: &quot;Permit where clauses to constrain associated types&quot; begins now and runs through September 30, 2016. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0142-associated-types-constraints.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0142-associated-types-constraints.md&gt;<br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt;&gt; <br>&gt;&gt; Proposal link:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0142-associated-types-constraints.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0142-associated-types-constraints.md&gt;<br>&gt;&gt; Reply text<br>&gt;&gt; <br>&gt;&gt; Other replies<br>&gt;&gt;  &lt;https://github.com/apple/swift-evolution/pull/532#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Doug Gregor<br>&gt;&gt; <br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt; swift-evolution-announce at swift.org &lt;mailto:swift-evolution-announce at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce &lt;https://lists.swift.org/mailman/listinfo/swift-evolution-announce&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160925/00e6c19a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0142: Permit where clauses to constrain associated types</strong> from <string>Drew Crawford</string> &lt;drew at sealedabstract.com&gt;<p>September 25, 2016 at 02:00:00pm</p></header><div class="content"><p>I think this is already part of the Generics Manifesto: https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md<br></p><p>So is this proposal.  The proposal&#39;s &quot;Motivation&quot; is lifted from the Arbitrary Requirements in Protocols section: https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md#arbitrary-requirements-in-protocols-<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160925/157f694a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0142: Permit where clauses to constrain associated types</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>September 25, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On 25 Sep 2016, at 21:45, Drew Crawford &lt;drew at sealedabstract.com&gt; wrote:<br>&gt; <br>&gt;&gt; I think this is already part of the Generics Manifesto: https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md &lt;https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md&gt;<br>&gt; So is this proposal.  The proposal&#39;s &quot;Motivation&quot; is lifted from the Arbitrary Requirements in Protocols section: https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md#arbitrary-requirements-in-protocols- &lt;https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md#arbitrary-requirements-in-protocols-&gt;<br></p><p>Sorry, what I meant to say is that: I think it would count as its own proposal (just because it has its own little section).<br></p><p>Although you’re right; the proposal includes concrete same-type constraints for sub-protocols (e.g. IntSequence) but we don’t have the same ability when extending existing protocols.<br>Maybe it would have been better to do the proposals the other way around.<br></p><p>- Karl<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160925/622bf898/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0142: Permit where clauses to constrain associated types</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>September 26, 2016 at 08:00:00pm</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On Sep 24, 2016, at 12:58 PM, Drew Crawford via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; This is the #1 Swift feature I have wanted for the past 2 years.<br>&gt; <br>&gt; One thing I would like to see (perhaps out of scope for this proposal) is the natural extension for generic parameters:<br>&gt; <br>&gt; struct Box&lt;T&gt; {<br>&gt;     var t: T<br>&gt; }<br>&gt; <br>&gt; extension Box where T == Int { //error: Same-type requirement makes generic parameter T non-generic<br>&gt; }<br>&gt; <br>&gt; There is a great deal of overlap between associated types and generic parameters, and it seems to me that it would be favorable to allow `==` with both generic parameter operands and associatedtype operands for consistency.<br></p><p>Yeah, we should allow this. I think it&#39;s in the generics manifesto as well, and Slava Pestov has been making great progress toward unblocking the feature. I do think it&#39;s a separate proposal. <br></p><p>  - Doug<br></p><p>&gt; <br>&gt; Drew<br>&gt; <br>&gt;&gt; On September 23, 2016 at 6:51:51 PM, Douglas Gregor (dgregor at apple.com) wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of SE-0142: &quot;Permit where clauses to constrain associated types&quot; begins now and runs through September 30, 2016. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0142-associated-types-constraints.md<br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt;&gt; <br>&gt;&gt; Proposal link:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0142-associated-types-constraints.md<br>&gt;&gt; Reply text<br>&gt;&gt; <br>&gt;&gt; Other replies<br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Doug Gregor<br>&gt;&gt; <br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt; swift-evolution-announce at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160926/dfc0eefb/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] SE-0142: Permit where clauses to constrain associated types</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>September 24, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; <br>&gt; What is your evaluation of the proposal?<br>+1.  This is a great enhancement that I have wanted ever since Swift was released.<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes.  It allows us to express our intentions much more clearly and concisely.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br>Very much.<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>Quick read, but also a long-time desire to see exactly this feature added to the language.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160924/1aad58d1/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2b19ddab2d7de4523412c875c258e278?s=50"></div><header><strong>[Review] SE-0142: Permit where clauses to constrain associated types</strong> from <string>Matt Whiteside</string> &lt;mwhiteside.dev at gmail.com&gt;<p>September 24, 2016 at 02:00:00pm</p></header><div class="content"><p>+1.  Very much looking forward to the richness this will add to the generic system.<br></p><p>-Matt<br></p><p>&gt; On Sep 23, 2016, at 16:50, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0142: &quot;Permit where clauses to constrain associated types&quot; begins now and runs through September 30, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0142-associated-types-constraints.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0142-associated-types-constraints.md&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0142-associated-types-constraints.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0142-associated-types-constraints.md&gt;<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt;  &lt;https://github.com/apple/swift-evolution/pull/532#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; Thank you,<br>&gt; <br>&gt; -Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160924/7849ffb1/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5f463dd4e7af28b64ad8f0e032ee82dc?s=50"></div><header><strong>[Review] SE-0142: Permit where clauses to constrain associated types</strong> from <string>Nate Cook</string> &lt;natecook at gmail.com&gt;<p>September 24, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0142-associated-types-constraints.md<br></p><p>&gt; What is your evaluation of the proposal?<br>[Smiling Face With Heart-Shaped Eyes Emoji]<br></p><p>One of the examples given (associatedtype SubSequence : Sequence where SubSequence...) looks like it would run afoul of the (current?) limitations on recursive protocols. Have those been resolved, or is resolving that part of the work of this change?<br></p><p>Other than that question, I give this the heartiest +1 I can muster!<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>Definitely—this will have significant effects on not only the standard library itself, but also extensions written by developers using Swift.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br>Yes!<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>n/a<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>I&#39;ve read the proposal and wrestled many times with extensions that require several annoyingly unnecessary `where` clauses. <br></p><p>Nate<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160924/33a9e051/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0142: Permit where clauses to constrain associated types</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>September 26, 2016 at 08:00:00pm</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On Sep 24, 2016, at 6:55 PM, Nate Cook &lt;natecook at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0142-associated-types-constraints.md<br>&gt; <br>&gt;&gt; What is your evaluation of the proposal?<br>&gt; [Smiling Face With Heart-Shaped Eyes Emoji]<br>&gt; <br>&gt; One of the examples given (associatedtype SubSequence : Sequence where SubSequence...) looks like it would run afoul of the (current?) limitations on recursive protocols. Have those been resolved, or is resolving that part of the work of this change?<br></p><p>That&#39;s a good point. Recursive protocols are a separate feature we&#39;ve had on our wish list for Swift 4, because they can be used to clean up a bunch of ugliness in the standard library. Perhaps this proposal should change its example that doesn&#39;t depend on that not-yet-implemented feature.<br></p><p>  - Doug<br></p><p>&gt; Other than that question, I give this the heartiest +1 I can muster!<br>&gt; <br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Definitely—this will have significant effects on not only the standard library itself, but also extensions written by developers using Swift.<br>&gt; <br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; Yes!<br>&gt; <br>&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; n/a<br>&gt; <br>&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; I&#39;ve read the proposal and wrestled many times with extensions that require several annoyingly unnecessary `where` clauses. <br>&gt; <br>&gt; Nate<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160926/d1819e8e/attachment-0001.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Review] SE-0142: Permit where clauses to constrain associated types</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>September 25, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br>+1. Can’t wait.<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>-_-<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br>Sure does<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>N/A<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>Read the generics manifesto carefully, often wanted this feature, read the proposal carefully.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160925/30263e15/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0142: Permit where clauses to constrain associated types</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>September 24, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; The review of SE-0142: &quot;Permit where clauses to constrain associated types&quot; begins now and runs through September 30, 2016. The proposal is available here:<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0142-associated-types-constraints.md<br></p><p>&gt; What is your evaluation of the proposal?<br>It is a valuable addition to Swift and certainly something I have desired. However I feel the proposed syntax is long winded, something associated types already suffer from. There also seems to be an inconsistency in specifying constraints sometimes in where clauses and other times as a constraint on the associated type. <br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br>Not quite. See above. <br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>It is similar to generics and begs the question why not abandon associated types and just have generics on protocols. <br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>Mainly my comments are based on writing my own collection library in Swift and comparing that exercise to similar in Java and C++. It is at the moment significantly harder than in Java but easier than C++. Any improvement in associated types would be welcome. <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160924/99c776cd/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Review] SE-0142: Permit where clauses to constrain associated types</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>September 27, 2016 at 12:00:00am</p></header><div class="content"><p>+111eleventyone<br>Also, FWIW, strong +1 for everything in the generics manifesto, too.<br></p><p>Sent from my iPhone<br></p><p>&gt; On Sep 23, 2016, at 18:50, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0142: &quot;Permit where clauses to constrain associated types&quot; begins now and runs through September 30, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0142-associated-types-constraints.md<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0142-associated-types-constraints.md<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; Thank you,<br>&gt; <br>&gt; -Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160927/5581cb07/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0142: Permit where clauses to constrain associated types</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>September 27, 2016 at 01:00:00pm</p></header><div class="content"><p>On Fri, Sep 23, 2016, at 04:50 PM, Douglas Gregor wrote:<br>&gt;  * What is your evaluation of the proposal?<br></p><p>+1. This looks like a great addition.<br></p><p>I&#39;m not fond of the shorthand syntax in the Alternatives section though<br></p><p>&gt;  * Is the problem being addressed significant enough to warrant a<br>&gt;    change to Swift?<br></p><p>Yes.<br></p><p>&gt;  * Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt;  * If you have used other languages or libraries with a similar<br>&gt;    feature, how do you feel that this proposal compares to those?<br></p><p>Nothing comes to mind.<br></p><p>&gt;  * How much effort did you put into your review? A glance, a quick<br>&gt;    reading, or an in-depth study?<br></p><p>A quick reading.<br></p><p>-Kevin Ballard<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160927/b4c7b9c6/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
