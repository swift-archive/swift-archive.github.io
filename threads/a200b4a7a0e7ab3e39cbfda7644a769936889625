<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Shorthand unwrap proposal</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>June 23, 2016 at 04:00:00pm</p></header><div class="content"><p>I was wondering if people would be open to adding an unwrap method to the<br>Optional type,  I already have a method like this which shortens code for<br>me.<br></p><p>So this:<br></p><p>let myReallyLongOptionalName: String? = &quot;Hey&quot;<br></p><p>if let string = myReallyLongOptionalName {<br>  doSomethingWith(string)<br>}<br></p><p>Could become&quot;<br></p><p>let myReallyLongOptionalName: String? = &quot;Hey&quot;<br></p><p>myReallyLongOptionalName.unwrap {<br>  doSomethingWith($0)<br>}<br></p><p>The block would only be fired if myReallyLongOptionalName has a value.<br></p><p>*___________________________________*<br></p><p>*James⎥Head of Trolls*<br></p><p>*james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com&gt;*<br></p><p>*Sup*<br></p><p>*Runway East *<br></p><p>*10 Finsbury Square*<br></p><p>*London*<br></p><p>* EC2A 1AF *<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/a2009625/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>Shorthand unwrap proposal</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 23, 2016 at 05:00:00pm</p></header><div class="content"><p>There was a proposal not long ago floating around that there could be if and guard that would allow something like:<br></p><p>guard myReallyLongOptionalName! else {<br>	return<br>}<br></p><p>/// Now myReallyLongOptionalName is guaranteed to be nonnull<br></p><p>-- OR --<br></p><p>if myReallyLongOptionalName! {<br>	doSomethingWith(myReallyLongOptionalName)<br>}<br></p><p><br></p><p><br>&gt; On Jun 23, 2016, at 5:36 PM, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I was wondering if people would be open to adding an unwrap method to the Optional type,  I already have a method like this which shortens code for me.<br>&gt; <br>&gt; So this:<br>&gt; <br>&gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt; <br>&gt; if let string = myReallyLongOptionalName {<br>&gt;   doSomethingWith(string)<br>&gt; }<br>&gt; <br>&gt; Could become&quot;<br>&gt; <br>&gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt; <br>&gt; myReallyLongOptionalName.unwrap {<br>&gt;   doSomethingWith($0)<br>&gt; }<br>&gt; <br>&gt; The block would only be fired if myReallyLongOptionalName has a value.<br>&gt; <br>&gt; ___________________________________<br>&gt; <br>&gt; James⎥Head of Trolls<br>&gt; <br>&gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com/&gt;<br>&gt; Sup<br>&gt; <br>&gt; Runway East &gt; <br>&gt; <br>&gt; 10 Finsbury Square<br>&gt; <br>&gt; London<br>&gt; <br>&gt;  &gt; EC2A 1AF <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/7f1565dd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Shorthand unwrap proposal</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>June 23, 2016 at 05:00:00pm</p></header><div class="content"><p>Do we know what happened ?<br></p><p>*___________________________________*<br></p><p>*James⎥Head of Trolls*<br></p><p>*james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com&gt;*<br></p><p>*Sup*<br></p><p>*Runway East *<br></p><p>*10 Finsbury Square*<br></p><p>*London*<br></p><p>* EC2A 1AF *<br></p><p>On 23 June 2016 at 16:42, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br></p><p>&gt; There was a proposal not long ago floating around that there could be if<br>&gt; and guard that would allow something like:<br>&gt;<br>&gt; guard myReallyLongOptionalName! else {<br>&gt; return<br>&gt; }<br>&gt;<br>&gt; /// Now myReallyLongOptionalName is guaranteed to be nonnull<br>&gt;<br>&gt; -- OR --<br>&gt;<br>&gt; if myReallyLongOptionalName! {<br>&gt; doSomethingWith(myReallyLongOptionalName)<br>&gt; }<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Jun 23, 2016, at 5:36 PM, James Campbell via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I was wondering if people would be open to adding an unwrap method to the<br>&gt; Optional type,  I already have a method like this which shortens code for<br>&gt; me.<br>&gt;<br>&gt; So this:<br>&gt;<br>&gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt;<br>&gt; if let string = myReallyLongOptionalName {<br>&gt;   doSomethingWith(string)<br>&gt; }<br>&gt;<br>&gt; Could become&quot;<br>&gt;<br>&gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt;<br>&gt; myReallyLongOptionalName.unwrap {<br>&gt;   doSomethingWith($0)<br>&gt; }<br>&gt;<br>&gt; The block would only be fired if myReallyLongOptionalName has a value.<br>&gt;<br>&gt; *___________________________________*<br>&gt;<br>&gt; *James⎥Head of Trolls*<br>&gt;<br>&gt; *james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com<br>&gt; &lt;http://supmenow.com/&gt;*<br>&gt;<br>&gt; *Sup*<br>&gt;<br>&gt; *Runway East *<br>&gt;<br>&gt; *10 Finsbury Square*<br>&gt;<br>&gt; *London*<br>&gt;<br>&gt; * EC2A 1AF *<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/341c9fae/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>Shorthand unwrap proposal</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 23, 2016 at 06:00:00pm</p></header><div class="content"><p>Here is the thread:<br></p><p>http://thread.gmane.org/gmane.comp.lang.swift.evolution/17142<br></p><p>&gt; On Jun 23, 2016, at 6:02 PM, James Campbell &lt;james at supmenow.com&gt; wrote:<br>&gt; <br>&gt; Do we know what happened ? <br>&gt; <br>&gt; ___________________________________<br>&gt; <br>&gt; James⎥Head of Trolls<br>&gt; <br>&gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com/&gt;<br>&gt; Sup<br>&gt; <br>&gt; Runway East &gt; <br>&gt; <br>&gt; 10 Finsbury Square<br>&gt; <br>&gt; London<br>&gt; <br>&gt;  &gt; EC2A 1AF <br>&gt; <br>&gt; <br>&gt; On 23 June 2016 at 16:42, Charlie Monroe &lt;charlie at charliemonroe.net &lt;mailto:charlie at charliemonroe.net&gt;&gt; wrote:<br>&gt; There was a proposal not long ago floating around that there could be if and guard that would allow something like:<br>&gt; <br>&gt; guard myReallyLongOptionalName! else {<br>&gt; 	return<br>&gt; }<br>&gt; <br>&gt; /// Now myReallyLongOptionalName is guaranteed to be nonnull<br>&gt; <br>&gt; -- OR --<br>&gt; <br>&gt; if myReallyLongOptionalName! {<br>&gt; 	doSomethingWith(myReallyLongOptionalName)<br>&gt; }<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Jun 23, 2016, at 5:36 PM, James Campbell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I was wondering if people would be open to adding an unwrap method to the Optional type,  I already have a method like this which shortens code for me.<br>&gt;&gt; <br>&gt;&gt; So this:<br>&gt;&gt; <br>&gt;&gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt;&gt; <br>&gt;&gt; if let string = myReallyLongOptionalName {<br>&gt;&gt;   doSomethingWith(string)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Could become&quot;<br>&gt;&gt; <br>&gt;&gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt;&gt; <br>&gt;&gt; myReallyLongOptionalName.unwrap {<br>&gt;&gt;   doSomethingWith($0)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; The block would only be fired if myReallyLongOptionalName has a value.<br>&gt;&gt; <br>&gt;&gt; ___________________________________<br>&gt;&gt; <br>&gt;&gt; James⎥Head of Trolls<br>&gt;&gt; <br>&gt;&gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com/&gt;<br>&gt;&gt; Sup<br>&gt;&gt; <br>&gt;&gt; Runway East &gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 10 Finsbury Square<br>&gt;&gt; <br>&gt;&gt; London<br>&gt;&gt; <br>&gt;&gt;  &gt;&gt; EC2A 1AF <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/c2d3e978/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Shorthand unwrap proposal</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>June 23, 2016 at 08:00:00am</p></header><div class="content"><p>On Thu, Jun 23, 2016 at 8:36 AM, James Campbell via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt; I was wondering if people would be open to adding an unwrap method to the<br>&gt; Optional type,  I already have a method like this which shortens code for<br>&gt; me.<br>&gt;<br>&gt; So this:<br>&gt;<br>&gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt;<br>&gt; if let string = myReallyLongOptionalName {<br>&gt;   doSomethingWith(string)<br>&gt; }<br>&gt;<br>&gt; Could become&quot;<br>&gt;<br>&gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt;<br>&gt; myReallyLongOptionalName.unwrap {<br>&gt;   doSomethingWith($0)<br>&gt; }<br></p><p>We have that, it is called &#39;.map&#39;.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Shorthand unwrap proposal</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>June 23, 2016 at 05:00:00pm</p></header><div class="content"><p>Map requires you to return a value you wish to map the optional to, this is<br>more like a forEach that only fires when the Optional is .Some<br></p><p>*___________________________________*<br></p><p>*James⎥Head of Trolls*<br></p><p>*james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com&gt;*<br></p><p>*Sup*<br></p><p>*Runway East *<br></p><p>*10 Finsbury Square*<br></p><p>*London*<br></p><p>* EC2A 1AF *<br></p><p>On 23 June 2016 at 16:56, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br></p><p>&gt; On Thu, Jun 23, 2016 at 8:36 AM, James Campbell via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; I was wondering if people would be open to adding an unwrap method to the<br>&gt; &gt; Optional type,  I already have a method like this which shortens code for<br>&gt; &gt; me.<br>&gt; &gt;<br>&gt; &gt; So this:<br>&gt; &gt;<br>&gt; &gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt; &gt;<br>&gt; &gt; if let string = myReallyLongOptionalName {<br>&gt; &gt;   doSomethingWith(string)<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; Could become&quot;<br>&gt; &gt;<br>&gt; &gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt; &gt;<br>&gt; &gt; myReallyLongOptionalName.unwrap {<br>&gt; &gt;   doSomethingWith($0)<br>&gt; &gt; }<br>&gt;<br>&gt; We have that, it is called &#39;.map&#39;.<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/50f9516b/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>Shorthand unwrap proposal</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>June 23, 2016 at 11:00:00am</p></header><div class="content"><p>I’m a bit tore on this myself. I see the appeal, but let’s say we had such a function. If you wanted to use it with an named parameter it’d look like this:<br></p><p>myReallyLongOptionalName.unwrap { string in<br>  doSomethingWith(string)<br>}<br></p><p>And that is actually *more* characters than the current approach:<br></p><p>if let string = myReallyLongOptionalName {<br>  doSomethingWith(string)<br>}<br></p><p>However it’d be a big win especially when you can skip $0 and the braces entirely such as:<br></p><p>myReallyLongOptionalName.unwrap(doSomethingWith)<br></p><p>Of course if we were dealing with methods, you could write this like:<br></p><p>myReallyLongOptionalName?.doSomething()<br></p><p>And that is probably hard to beat.<br></p><p>So I think the problem really only presents itself when you have an optional that you need to unwrap and use as a parameter to something that does not take an optional.<br></p><p>I don’t have a solution - just trying to clarify the situation. :)<br></p><p>l8r<br>Sean<br></p><p><br>&gt; On Jun 23, 2016, at 10:36 AM, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I was wondering if people would be open to adding an unwrap method to the Optional type,  I already have a method like this which shortens code for me.<br>&gt; <br>&gt; So this:<br>&gt; <br>&gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt; <br>&gt; if let string = myReallyLongOptionalName {<br>&gt;   doSomethingWith(string)<br>&gt; }<br>&gt; <br>&gt; Could become&quot;<br>&gt; <br>&gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt; <br>&gt; myReallyLongOptionalName.unwrap {<br>&gt;   doSomethingWith($0)<br>&gt; }<br>&gt; <br>&gt; The block would only be fired if myReallyLongOptionalName has a value.<br>&gt; <br>&gt; ___________________________________<br>&gt; <br>&gt; James⎥Head of Trolls<br>&gt; <br>&gt; james at supmenow.com⎥supmenow.com<br>&gt; <br>&gt; Sup<br>&gt; <br>&gt; Runway East &gt; <br>&gt; <br>&gt; 10 Finsbury Square<br>&gt; <br>&gt; London<br>&gt; <br>&gt;  &gt; EC2A 1AF <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Shorthand unwrap proposal</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>June 23, 2016 at 05:00:00pm</p></header><div class="content"><p>So I have a real-life situation in an application, which does what you<br>mention:<br></p><p>This code is for a camera app, on a `didSet` it removes a device if set<br>from the capture session, and if there is a new one set it adds it to the<br>capture session.<br></p><p>The add and remove methods indeed don&#39;t take optionals.<br></p><p>So this is the code before:<br></p><p>var audioDevice: AVCaptureDeviceInput? = nil {<br></p><p><br></p><p>        willSet {<br></p><p>            if let audioDevice = audioDevice {<br></p><p>               captureSession?.removeInput(audioDevice)<br></p><p>            }<br></p><p>        }<br></p><p><br></p><p>        didSet {<br></p><p>            if audioDevice = audioDevice {<br></p><p>               captureSession?.addInput(audioDevice)<br></p><p>            }<br></p><p>        }<br></p><p>    }<br></p><p><br>and after:<br></p><p>var audioDevice: AVCaptureDeviceInput? = nil {<br></p><p><br></p><p>        willSet {<br></p><p>            audioDevice.unwrap {<br></p><p>                self.captureSession?.removeInput($0)<br></p><p>            }<br></p><p>        }<br></p><p><br></p><p>        didSet {<br></p><p>            audioDevice.unwrap {<br></p><p>                self.captureSession?.addInput($0)<br></p><p>            }<br></p><p>        }<br></p><p>    }<br></p><p><br>The last two saved me a lot of typing in these cases and I feel like it is<br>more clear what is going on due to the `unwrap` method being clear in it&#39;s<br>intent and the lack of `audioDevice` being repeated multiple times.<br></p><p>*___________________________________*<br></p><p>*James⎥Head of Trolls*<br></p><p>*james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com&gt;*<br></p><p>*Sup*<br></p><p>*Runway East *<br></p><p>*10 Finsbury Square*<br></p><p>*London*<br></p><p>* EC2A 1AF *<br></p><p>On 23 June 2016 at 17:11, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br></p><p>&gt; I’m a bit tore on this myself. I see the appeal, but let’s say we had such<br>&gt; a function. If you wanted to use it with an named parameter it’d look like<br>&gt; this:<br>&gt;<br>&gt; myReallyLongOptionalName.unwrap { string in<br>&gt;   doSomethingWith(string)<br>&gt; }<br>&gt;<br>&gt; And that is actually *more* characters than the current approach:<br>&gt;<br>&gt; if let string = myReallyLongOptionalName {<br>&gt;   doSomethingWith(string)<br>&gt; }<br>&gt;<br>&gt; However it’d be a big win especially when you can skip $0 and the braces<br>&gt; entirely such as:<br>&gt;<br>&gt; myReallyLongOptionalName.unwrap(doSomethingWith)<br>&gt;<br>&gt; Of course if we were dealing with methods, you could write this like:<br>&gt;<br>&gt; myReallyLongOptionalName?.doSomething()<br>&gt;<br>&gt; And that is probably hard to beat.<br>&gt;<br>&gt; So I think the problem really only presents itself when you have an<br>&gt; optional that you need to unwrap and use as a parameter to something that<br>&gt; does not take an optional.<br>&gt;<br>&gt; I don’t have a solution - just trying to clarify the situation. :)<br>&gt;<br>&gt; l8r<br>&gt; Sean<br>&gt;<br>&gt;<br>&gt; &gt; On Jun 23, 2016, at 10:36 AM, James Campbell via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; I was wondering if people would be open to adding an unwrap method to<br>&gt; the Optional type,  I already have a method like this which shortens code<br>&gt; for me.<br>&gt; &gt;<br>&gt; &gt; So this:<br>&gt; &gt;<br>&gt; &gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt; &gt;<br>&gt; &gt; if let string = myReallyLongOptionalName {<br>&gt; &gt;   doSomethingWith(string)<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; Could become&quot;<br>&gt; &gt;<br>&gt; &gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt; &gt;<br>&gt; &gt; myReallyLongOptionalName.unwrap {<br>&gt; &gt;   doSomethingWith($0)<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; The block would only be fired if myReallyLongOptionalName has a value.<br>&gt; &gt;<br>&gt; &gt; ___________________________________<br>&gt; &gt;<br>&gt; &gt; James⎥Head of Trolls<br>&gt; &gt;<br>&gt; &gt; james at supmenow.com⎥supmenow.com<br>&gt; &gt;<br>&gt; &gt; Sup<br>&gt; &gt;<br>&gt; &gt; Runway East &gt;<br>&gt; &gt;<br>&gt; &gt; 10 Finsbury Square<br>&gt; &gt;<br>&gt; &gt; London<br>&gt; &gt;<br>&gt; &gt; &gt; EC2A 1AF<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/46bdfce3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Shorthand unwrap proposal</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>June 23, 2016 at 09:00:00am</p></header><div class="content"><p>I think we’d still just recommend using ‘map’ for this. The reason Collection.map and Collection.forEach are different is because we don’t promise eager and in-order evaluation for Collection.map. But Optional only executes the closure one or zero times, so there’s no ambiguity.<br></p><p>Jordan<br></p><p><br>&gt; On Jun 23, 2016, at 09:15, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; So I have a real-life situation in an application, which does what you mention:<br>&gt; <br>&gt; This code is for a camera app, on a `didSet` it removes a device if set from the capture session, and if there is a new one set it adds it to the capture session.<br>&gt; <br>&gt; The add and remove methods indeed don&#39;t take optionals.<br>&gt; <br>&gt; So this is the code before:<br>&gt; <br>&gt; var audioDevice: AVCaptureDeviceInput? = nil {<br>&gt; <br>&gt;         <br>&gt;         willSet {<br>&gt; <br>&gt;             if let audioDevice = audioDevice {<br>&gt; <br>&gt;                captureSession?.removeInput(audioDevice)<br>&gt; <br>&gt;             }<br>&gt; <br>&gt;         }<br>&gt; <br>&gt;         <br>&gt;         didSet {<br>&gt; <br>&gt;             if audioDevice = audioDevice {<br>&gt; <br>&gt;                captureSession?.addInput(audioDevice)<br>&gt; <br>&gt;             }<br>&gt; <br>&gt;         }<br>&gt; <br>&gt;     }<br>&gt; <br>&gt; <br>&gt; <br>&gt; and after:<br>&gt; <br>&gt; var audioDevice: AVCaptureDeviceInput? = nil {<br>&gt; <br>&gt;         <br>&gt;         willSet {<br>&gt; <br>&gt;             audioDevice.unwrap {<br>&gt; <br>&gt;                 self.captureSession?.removeInput($0)<br>&gt; <br>&gt;             }<br>&gt; <br>&gt;         }<br>&gt; <br>&gt;         <br>&gt;         didSet {<br>&gt; <br>&gt;             audioDevice.unwrap {<br>&gt; <br>&gt;                 self.captureSession?.addInput($0)<br>&gt; <br>&gt;             }<br>&gt; <br>&gt;         }<br>&gt; <br>&gt;     }<br>&gt; <br>&gt; <br>&gt; <br>&gt; The last two saved me a lot of typing in these cases and I feel like it is more clear what is going on due to the `unwrap` method being clear in it&#39;s intent and the lack of `audioDevice` being repeated multiple times.<br>&gt; <br>&gt; <br>&gt; ___________________________________<br>&gt; <br>&gt; James⎥Head of Trolls<br>&gt; <br>&gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com/&gt;<br>&gt; Sup<br>&gt; <br>&gt; Runway East &gt; <br>&gt; <br>&gt; 10 Finsbury Square<br>&gt; <br>&gt; London<br>&gt; <br>&gt;  &gt; EC2A 1AF <br>&gt; <br>&gt; <br>&gt; On 23 June 2016 at 17:11, Sean Heber &lt;sean at fifthace.com &lt;mailto:sean at fifthace.com&gt;&gt; wrote:<br>&gt; I’m a bit tore on this myself. I see the appeal, but let’s say we had such a function. If you wanted to use it with an named parameter it’d look like this:<br>&gt; <br>&gt; myReallyLongOptionalName.unwrap { string in<br>&gt;   doSomethingWith(string)<br>&gt; }<br>&gt; <br>&gt; And that is actually *more* characters than the current approach:<br>&gt; <br>&gt; if let string = myReallyLongOptionalName {<br>&gt;   doSomethingWith(string)<br>&gt; }<br>&gt; <br>&gt; However it’d be a big win especially when you can skip $0 and the braces entirely such as:<br>&gt; <br>&gt; myReallyLongOptionalName.unwrap(doSomethingWith)<br>&gt; <br>&gt; Of course if we were dealing with methods, you could write this like:<br>&gt; <br>&gt; myReallyLongOptionalName?.doSomething()<br>&gt; <br>&gt; And that is probably hard to beat.<br>&gt; <br>&gt; So I think the problem really only presents itself when you have an optional that you need to unwrap and use as a parameter to something that does not take an optional.<br>&gt; <br>&gt; I don’t have a solution - just trying to clarify the situation. :)<br>&gt; <br>&gt; l8r<br>&gt; Sean<br>&gt; <br>&gt; <br>&gt; &gt; On Jun 23, 2016, at 10:36 AM, James Campbell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; I was wondering if people would be open to adding an unwrap method to the Optional type,  I already have a method like this which shortens code for me.<br>&gt; &gt;<br>&gt; &gt; So this:<br>&gt; &gt;<br>&gt; &gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt; &gt;<br>&gt; &gt; if let string = myReallyLongOptionalName {<br>&gt; &gt;   doSomethingWith(string)<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; Could become&quot;<br>&gt; &gt;<br>&gt; &gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt; &gt;<br>&gt; &gt; myReallyLongOptionalName.unwrap {<br>&gt; &gt;   doSomethingWith($0)<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; The block would only be fired if myReallyLongOptionalName has a value.<br>&gt; &gt;<br>&gt; &gt; ___________________________________<br>&gt; &gt;<br>&gt; &gt; James⎥Head of Trolls<br>&gt; &gt;<br>&gt; &gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com/&gt;<br>&gt; &gt;<br>&gt; &gt; Sup<br>&gt; &gt;<br>&gt; &gt; Runway East &gt; &gt;<br>&gt; &gt;<br>&gt; &gt; 10 Finsbury Square<br>&gt; &gt;<br>&gt; &gt; London<br>&gt; &gt;<br>&gt; &gt; &gt; EC2A 1AF<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/224a22a1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Shorthand unwrap proposal</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>June 23, 2016 at 05:00:00pm</p></header><div class="content"><p>So if the function I run inside of the map has a return value of Void will<br>that still compile ?<br></p><p>*___________________________________*<br></p><p>*James⎥Head of Trolls*<br></p><p>*james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com&gt;*<br></p><p>*Sup*<br></p><p>*Runway East *<br></p><p>*10 Finsbury Square*<br></p><p>*London*<br></p><p>* EC2A 1AF *<br></p><p>On 23 June 2016 at 17:22, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br></p><p>&gt; I think we’d still just recommend using ‘map’ for this. The reason<br>&gt; Collection.map and Collection.forEach are different is because we don’t<br>&gt; promise eager and in-order evaluation for Collection.map. But Optional only<br>&gt; executes the closure one or zero times, so there’s no ambiguity.<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt;<br>&gt; On Jun 23, 2016, at 09:15, James Campbell via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; So I have a real-life situation in an application, which does what you<br>&gt; mention:<br>&gt;<br>&gt; This code is for a camera app, on a `didSet` it removes a device if set<br>&gt; from the capture session, and if there is a new one set it adds it to the<br>&gt; capture session.<br>&gt;<br>&gt; The add and remove methods indeed don&#39;t take optionals.<br>&gt;<br>&gt; So this is the code before:<br>&gt;<br>&gt; var audioDevice: AVCaptureDeviceInput? = nil {<br>&gt;<br>&gt;<br>&gt;         willSet {<br>&gt;<br>&gt;             if let audioDevice = audioDevice {<br>&gt;<br>&gt;                captureSession?.removeInput(audioDevice)<br>&gt;<br>&gt;             }<br>&gt;<br>&gt;         }<br>&gt;<br>&gt;<br>&gt;         didSet {<br>&gt;<br>&gt;             if audioDevice = audioDevice {<br>&gt;<br>&gt;                captureSession?.addInput(audioDevice)<br>&gt;<br>&gt;             }<br>&gt;<br>&gt;         }<br>&gt;<br>&gt;     }<br>&gt;<br>&gt;<br>&gt; and after:<br>&gt;<br>&gt; var audioDevice: AVCaptureDeviceInput? = nil {<br>&gt;<br>&gt;<br>&gt;         willSet {<br>&gt;<br>&gt;             audioDevice.unwrap {<br>&gt;<br>&gt;                 self.captureSession?.removeInput($0)<br>&gt;<br>&gt;             }<br>&gt;<br>&gt;         }<br>&gt;<br>&gt;<br>&gt;         didSet {<br>&gt;<br>&gt;             audioDevice.unwrap {<br>&gt;<br>&gt;                 self.captureSession?.addInput($0)<br>&gt;<br>&gt;             }<br>&gt;<br>&gt;         }<br>&gt;<br>&gt;     }<br>&gt;<br>&gt;<br>&gt; The last two saved me a lot of typing in these cases and I feel like it is<br>&gt; more clear what is going on due to the `unwrap` method being clear in it&#39;s<br>&gt; intent and the lack of `audioDevice` being repeated multiple times.<br>&gt;<br>&gt; *___________________________________*<br>&gt;<br>&gt; *James⎥Head of Trolls*<br>&gt;<br>&gt; *james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com<br>&gt; &lt;http://supmenow.com/&gt;*<br>&gt;<br>&gt; *Sup*<br>&gt;<br>&gt; *Runway East *<br>&gt;<br>&gt; *10 Finsbury Square*<br>&gt;<br>&gt; *London*<br>&gt;<br>&gt; * EC2A 1AF *<br>&gt;<br>&gt; On 23 June 2016 at 17:11, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt;<br>&gt;&gt; I’m a bit tore on this myself. I see the appeal, but let’s say we had<br>&gt;&gt; such a function. If you wanted to use it with an named parameter it’d look<br>&gt;&gt; like this:<br>&gt;&gt;<br>&gt;&gt; myReallyLongOptionalName.unwrap { string in<br>&gt;&gt;   doSomethingWith(string)<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; And that is actually *more* characters than the current approach:<br>&gt;&gt;<br>&gt;&gt; if let string = myReallyLongOptionalName {<br>&gt;&gt;   doSomethingWith(string)<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; However it’d be a big win especially when you can skip $0 and the braces<br>&gt;&gt; entirely such as:<br>&gt;&gt;<br>&gt;&gt; myReallyLongOptionalName.unwrap(doSomethingWith)<br>&gt;&gt;<br>&gt;&gt; Of course if we were dealing with methods, you could write this like:<br>&gt;&gt;<br>&gt;&gt; myReallyLongOptionalName?.doSomething()<br>&gt;&gt;<br>&gt;&gt; And that is probably hard to beat.<br>&gt;&gt;<br>&gt;&gt; So I think the problem really only presents itself when you have an<br>&gt;&gt; optional that you need to unwrap and use as a parameter to something that<br>&gt;&gt; does not take an optional.<br>&gt;&gt;<br>&gt;&gt; I don’t have a solution - just trying to clarify the situation. :)<br>&gt;&gt;<br>&gt;&gt; l8r<br>&gt;&gt; Sean<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; &gt; On Jun 23, 2016, at 10:36 AM, James Campbell via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I was wondering if people would be open to adding an unwrap method to<br>&gt;&gt; the Optional type,  I already have a method like this which shortens code<br>&gt;&gt; for me.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; So this:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; if let string = myReallyLongOptionalName {<br>&gt;&gt; &gt;   doSomethingWith(string)<br>&gt;&gt; &gt; }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Could become&quot;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; myReallyLongOptionalName.unwrap {<br>&gt;&gt; &gt;   doSomethingWith($0)<br>&gt;&gt; &gt; }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; The block would only be fired if myReallyLongOptionalName has a value.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; ___________________________________<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; James⎥Head of Trolls<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; james at supmenow.com⎥supmenow.com<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Sup<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Runway East &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 10 Finsbury Square<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; London<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; &gt; EC2A 1AF<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/26b6d841/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Shorthand unwrap proposal</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>June 23, 2016 at 09:00:00am</p></header><div class="content"><p>On Thu, Jun 23, 2016 at 9:25 AM, James Campbell via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt; So if the function I run inside of the map has a return value of Void will<br>&gt; that still compile ?<br></p><p>Yes.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Shorthand unwrap proposal</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>June 23, 2016 at 05:00:00pm</p></header><div class="content"><p>Awesome, cheers guys!<br></p><p>*___________________________________*<br></p><p>*James⎥Head of Trolls*<br></p><p>*james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com&gt;*<br></p><p>*Sup*<br></p><p>*Runway East *<br></p><p>*10 Finsbury Square*<br></p><p>*London*<br></p><p>* EC2A 1AF *<br></p><p>On 23 June 2016 at 17:26, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br></p><p>&gt; On Thu, Jun 23, 2016 at 9:25 AM, James Campbell via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; So if the function I run inside of the map has a return value of Void<br>&gt; will<br>&gt; &gt; that still compile ?<br>&gt;<br>&gt; Yes.<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/e71ac72a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>Shorthand unwrap proposal</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 24, 2016 at 12:00:00pm</p></header><div class="content"><p>On 23.06.2016 19:26, Dmitri Gribenko via swift-evolution wrote:<br>&gt; On Thu, Jun 23, 2016 at 9:25 AM, James Campbell via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; So if the function I run inside of the map has a return value of Void will<br>&gt;&gt; that still compile ?<br>&gt;<br>&gt; Yes.<br></p><p>Btw, in case of<br></p><p>let s: String? = &quot;hi&quot;<br>s.map {print($0)}<br></p><p>we have<br>warning: result of call to &#39;map&#39; is unused<br>s.map {print($0)}<br></p><p>Isn&#39;t it strange that result of call is Void, but we have a warning? Don&#39;t <br>we need to suppress warning in this case?<br></p><p>Otherwise we need to write boilerplate code:<br>_ = s.map {print($0)}<br></p><p>&gt;<br>&gt; Dmitri<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Shorthand unwrap proposal</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>June 24, 2016 at 02:00:00am</p></header><div class="content"><p>On Fri, Jun 24, 2016 at 2:14 AM, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br>&gt; On 23.06.2016 19:26, Dmitri Gribenko via swift-evolution wrote:<br>&gt;&gt;<br>&gt;&gt; On Thu, Jun 23, 2016 at 9:25 AM, James Campbell via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; So if the function I run inside of the map has a return value of Void<br>&gt;&gt;&gt; will<br>&gt;&gt;&gt; that still compile ?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Yes.<br>&gt;<br>&gt;<br>&gt; Btw, in case of<br>&gt;<br>&gt; let s: String? = &quot;hi&quot;<br>&gt; s.map {print($0)}<br>&gt;<br>&gt; we have<br>&gt; warning: result of call to &#39;map&#39; is unused<br>&gt; s.map {print($0)}<br>&gt;<br>&gt; Isn&#39;t it strange that result of call is Void, but we have a warning? Don&#39;t<br>&gt; we need to suppress warning in this case?<br></p><p>This is a bug in the compiler.  IIRC someone said they were working on it.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>Shorthand unwrap proposal</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 24, 2016 at 04:00:00pm</p></header><div class="content"><p>On 24.06.2016 12:34, Dmitri Gribenko wrote:<br>&gt; On Fri, Jun 24, 2016 at 2:14 AM, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br>&gt;&gt; On 23.06.2016 19:26, Dmitri Gribenko via swift-evolution wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Thu, Jun 23, 2016 at 9:25 AM, James Campbell via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; So if the function I run inside of the map has a return value of Void<br>&gt;&gt;&gt;&gt; will<br>&gt;&gt;&gt;&gt; that still compile ?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Yes.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Btw, in case of<br>&gt;&gt;<br>&gt;&gt; let s: String? = &quot;hi&quot;<br>&gt;&gt; s.map {print($0)}<br>&gt;&gt;<br>&gt;&gt; we have<br>&gt;&gt; warning: result of call to &#39;map&#39; is unused<br>&gt;&gt; s.map {print($0)}<br>&gt;&gt;<br>&gt;&gt; Isn&#39;t it strange that result of call is Void, but we have a warning? Don&#39;t<br>&gt;&gt; we need to suppress warning in this case?<br>&gt;<br>&gt; This is a bug in the compiler.  IIRC someone said they were working on it.<br></p><p>Hmm.. OK, will check: https://bugs.swift.org/browse/SR-1895<br></p><p>&gt;<br>&gt; Dmitri<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>Shorthand unwrap proposal</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 23, 2016 at 08:00:00pm</p></header><div class="content"><p>You can also do something like that is ur code today:<br></p><p>extension Optional {<br>    func unwrap&lt;T&gt; (_ h: T -&gt; ()) {<br>        switch self {<br>        case .Some(let w):<br>            if let t = w as? T { h(t) }<br>            break<br>        default:<br>            break;<br>        }<br>    }<br>}<br></p><p>s1.unwrap { (str:String) in<br>    print(&quot;NOPE&quot;)  // nothing happens<br>}<br>s2.unwrap { (str:String) in<br>    print(&quot;:)&quot;)          // prints<br>}<br></p><p><br>Regards<br>(From mobile)<br></p><p>&gt; On Jun 23, 2016, at 6:25 PM, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; So if the function I run inside of the map has a return value of Void will that still compile ?<br>&gt; <br>&gt; ___________________________________<br>&gt; <br>&gt; James⎥Head of Trolls<br>&gt; <br>&gt; james at supmenow.com⎥supmenow.com<br>&gt; <br>&gt; Sup<br>&gt; <br>&gt; Runway East &gt; <br>&gt; <br>&gt; 10 Finsbury Square<br>&gt; <br>&gt; London<br>&gt; <br>&gt;  &gt; EC2A 1AF <br>&gt; <br>&gt; <br>&gt;&gt; On 23 June 2016 at 17:22, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt;&gt; I think we’d still just recommend using ‘map’ for this. The reason Collection.map and Collection.forEach are different is because we don’t promise eager and in-order evaluation for Collection.map. But Optional only executes the closure one or zero times, so there’s no ambiguity.<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 23, 2016, at 09:15, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So I have a real-life situation in an application, which does what you mention:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This code is for a camera app, on a `didSet` it removes a device if set from the capture session, and if there is a new one set it adds it to the capture session.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The add and remove methods indeed don&#39;t take optionals.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So this is the code before:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; var audioDevice: AVCaptureDeviceInput? = nil {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;         <br>&gt;&gt;&gt;         willSet {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;             if let audioDevice = audioDevice {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;                captureSession?.removeInput(audioDevice)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;             }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;         <br>&gt;&gt;&gt;         didSet {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;             if audioDevice = audioDevice {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;                captureSession?.addInput(audioDevice)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;             }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; and after:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; var audioDevice: AVCaptureDeviceInput? = nil {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;         <br>&gt;&gt;&gt;         willSet {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;             audioDevice.unwrap {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;                 self.captureSession?.removeInput($0)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;             }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;         <br>&gt;&gt;&gt;         didSet {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;             audioDevice.unwrap {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;                 self.captureSession?.addInput($0)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;             }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The last two saved me a lot of typing in these cases and I feel like it is more clear what is going on due to the `unwrap` method being clear in it&#39;s intent and the lack of `audioDevice` being repeated multiple times.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ___________________________________<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; James⎥Head of Trolls<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; james at supmenow.com⎥supmenow.com<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sup<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Runway East &gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 10 Finsbury Square<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; London<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  &gt;&gt;&gt; EC2A 1AF <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 23 June 2016 at 17:11, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt;&gt;&gt;&gt; I’m a bit tore on this myself. I see the appeal, but let’s say we had such a function. If you wanted to use it with an named parameter it’d look like this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; myReallyLongOptionalName.unwrap { string in<br>&gt;&gt;&gt;&gt;   doSomethingWith(string)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; And that is actually *more* characters than the current approach:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; if let string = myReallyLongOptionalName {<br>&gt;&gt;&gt;&gt;   doSomethingWith(string)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; However it’d be a big win especially when you can skip $0 and the braces entirely such as:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; myReallyLongOptionalName.unwrap(doSomethingWith)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Of course if we were dealing with methods, you could write this like:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; myReallyLongOptionalName?.doSomething()<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; And that is probably hard to beat.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; So I think the problem really only presents itself when you have an optional that you need to unwrap and use as a parameter to something that does not take an optional.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don’t have a solution - just trying to clarify the situation. :)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &gt; On Jun 23, 2016, at 10:36 AM, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; I was wondering if people would be open to adding an unwrap method to the Optional type,  I already have a method like this which shortens code for me.<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; So this:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; if let string = myReallyLongOptionalName {<br>&gt;&gt;&gt;&gt; &gt;   doSomethingWith(string)<br>&gt;&gt;&gt;&gt; &gt; }<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; Could become&quot;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; myReallyLongOptionalName.unwrap {<br>&gt;&gt;&gt;&gt; &gt;   doSomethingWith($0)<br>&gt;&gt;&gt;&gt; &gt; }<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; The block would only be fired if myReallyLongOptionalName has a value.<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; ___________________________________<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; James⎥Head of Trolls<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; james at supmenow.com⎥supmenow.com<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; Sup<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; Runway East &gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; 10 Finsbury Square<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; London<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; &gt; EC2A 1AF<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/b91d7cdd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>Shorthand unwrap proposal</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 23, 2016 at 08:00:00pm</p></header><div class="content"><p>and before someone points it out, yes the follow does work, but i just thought the long form was easier to understand<br></p><p><br></p><p>extension Optional {<br>    func unwrap&lt;T&gt; (_ h: T -&gt; ()) {<br>            if let t = self as? T { h(t) }<br>    }<br>}<br>Regards<br>(From mobile)<br></p><p>&gt; On Jun 23, 2016, at 8:19 PM, L. Mihalkovic &lt;laurent.mihalkovic at gmail.com&gt; wrote:<br>&gt; <br>&gt; You can also do something like that is ur code today:<br>&gt; <br>&gt; extension Optional {<br>&gt;     func unwrap&lt;T&gt; (_ h: T -&gt; ()) {<br>&gt;         switch self {<br>&gt;         case .Some(let w):<br>&gt;             if let t = w as? T { h(t) }<br>&gt;             break<br>&gt;         default:<br>&gt;             break;<br>&gt;         }<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; s1.unwrap { (str:String) in<br>&gt;     print(&quot;NOPE&quot;)  // nothing happens<br>&gt; }<br>&gt; s2.unwrap { (str:String) in<br>&gt;     print(&quot;:)&quot;)          // prints<br>&gt; }<br>&gt; <br>&gt; <br>&gt; Regards<br>&gt; (From mobile)<br>&gt; <br>&gt;&gt; On Jun 23, 2016, at 6:25 PM, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; So if the function I run inside of the map has a return value of Void will that still compile ?<br>&gt;&gt; <br>&gt;&gt; ___________________________________<br>&gt;&gt; <br>&gt;&gt; James⎥Head of Trolls<br>&gt;&gt; <br>&gt;&gt; james at supmenow.com⎥supmenow.com<br>&gt;&gt; <br>&gt;&gt; Sup<br>&gt;&gt; <br>&gt;&gt; Runway East &gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 10 Finsbury Square<br>&gt;&gt; <br>&gt;&gt; London<br>&gt;&gt; <br>&gt;&gt;  &gt;&gt; EC2A 1AF <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 23 June 2016 at 17:22, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt;&gt;&gt; I think we’d still just recommend using ‘map’ for this. The reason Collection.map and Collection.forEach are different is because we don’t promise eager and in-order evaluation for Collection.map. But Optional only executes the closure one or zero times, so there’s no ambiguity.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 23, 2016, at 09:15, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; So I have a real-life situation in an application, which does what you mention:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This code is for a camera app, on a `didSet` it removes a device if set from the capture session, and if there is a new one set it adds it to the capture session.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The add and remove methods indeed don&#39;t take optionals.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; So this is the code before:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; var audioDevice: AVCaptureDeviceInput? = nil {<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;         <br>&gt;&gt;&gt;&gt;         willSet {<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;             if let audioDevice = audioDevice {<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;                captureSession?.removeInput(audioDevice)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;             }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;         <br>&gt;&gt;&gt;&gt;         didSet {<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;             if audioDevice = audioDevice {<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;                captureSession?.addInput(audioDevice)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;             }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; and after:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; var audioDevice: AVCaptureDeviceInput? = nil {<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;         <br>&gt;&gt;&gt;&gt;         willSet {<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;             audioDevice.unwrap {<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;                 self.captureSession?.removeInput($0)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;             }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;         <br>&gt;&gt;&gt;&gt;         didSet {<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;             audioDevice.unwrap {<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;                 self.captureSession?.addInput($0)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;             }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The last two saved me a lot of typing in these cases and I feel like it is more clear what is going on due to the `unwrap` method being clear in it&#39;s intent and the lack of `audioDevice` being repeated multiple times.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ___________________________________<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; James⎥Head of Trolls<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; james at supmenow.com⎥supmenow.com<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sup<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Runway East &gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 10 Finsbury Square<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; London<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  &gt;&gt;&gt;&gt; EC2A 1AF <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 23 June 2016 at 17:11, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; I’m a bit tore on this myself. I see the appeal, but let’s say we had such a function. If you wanted to use it with an named parameter it’d look like this:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; myReallyLongOptionalName.unwrap { string in<br>&gt;&gt;&gt;&gt;&gt;   doSomethingWith(string)<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; And that is actually *more* characters than the current approach:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; if let string = myReallyLongOptionalName {<br>&gt;&gt;&gt;&gt;&gt;   doSomethingWith(string)<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; However it’d be a big win especially when you can skip $0 and the braces entirely such as:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; myReallyLongOptionalName.unwrap(doSomethingWith)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Of course if we were dealing with methods, you could write this like:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; myReallyLongOptionalName?.doSomething()<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; And that is probably hard to beat.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; So I think the problem really only presents itself when you have an optional that you need to unwrap and use as a parameter to something that does not take an optional.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I don’t have a solution - just trying to clarify the situation. :)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; &gt; On Jun 23, 2016, at 10:36 AM, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; I was wondering if people would be open to adding an unwrap method to the Optional type,  I already have a method like this which shortens code for me.<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; So this:<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; if let string = myReallyLongOptionalName {<br>&gt;&gt;&gt;&gt;&gt; &gt;   doSomethingWith(string)<br>&gt;&gt;&gt;&gt;&gt; &gt; }<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; Could become&quot;<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; myReallyLongOptionalName.unwrap {<br>&gt;&gt;&gt;&gt;&gt; &gt;   doSomethingWith($0)<br>&gt;&gt;&gt;&gt;&gt; &gt; }<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; The block would only be fired if myReallyLongOptionalName has a value.<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; ___________________________________<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; James⎥Head of Trolls<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; james at supmenow.com⎥supmenow.com<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; Sup<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; Runway East &gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; 10 Finsbury Square<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; London<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; &gt; EC2A 1AF<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/2603a6a1/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5a72880ffed1a30cb9b8e3f372507145?s=50"></div><header><strong>Shorthand unwrap proposal</strong> from <string>Rob Mayoff</string> &lt;mayoff at dqd.com&gt;<p>June 24, 2016 at 10:00:00pm</p></header><div class="content"><p>This is equivalent to the “Add an ifPresent function to Optional”<br>suggestion made back in March.<br></p><p>http://thread.gmane.org/gmane.comp.lang.swift.evolution/9173<br></p><p>Personally I&#39;d prefer an `ifPresent` or `foreach` method to using<br>`map`, as `ifPresent` or `foreach` would make it clearer to the reader<br>that no return value is expected or wanted from either `ifPresent` or<br>the block it calls.<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
