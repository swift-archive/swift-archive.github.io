<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0a88a27755600d9f1c1ce00e3c209a38?s=50"></div><header><strong>[Review] SE-0107: UnsafeRawPointer API</strong> from <string>Brad Hilton</string> &lt;brad.hilton.nw at gmail.com&gt;<p>June 29, 2016 at 09:00:00am</p></header><div class="content"><p>* What is your evaluation of the proposal?<br>-1. It seems like the author is trying to solve a non-problem. The pointer APIs already work very well with enough due warning that they are unsafe. This change will just make them even more cumbersome to work with.<br>* Is the problem being addressed significant enough to warrant a change to Swift?<br>No, I don’t think so, and if it were it would be too significant to be considered in scope for Swift 3.<br>* Does this proposal fit well with the feel and direction of Swift?<br>It’s a valid Swift API, I just feel it makes the UnsafePointer family more complex than it needs to be.<br>* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>Swift’s approach to memory access has been unique in my programming experience and I like it for its power and simplicity.<br>* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>I read most of the proposal and have done a lot of work with the existing pointer APIs. Again I feel this is adding needless complexity and doesn’t actually change what you can do with the API.<br></p><p>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “SE-0107: UnsafeRawPointer API” begins now and runs through July 4, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; * What is your evaluation of the proposal?<br>&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fe87aed0d64cdbc46378bf7596a7553?s=50"></div><header><strong>[Review] SE-0107: UnsafeRawPointer API</strong> from <string>Andrew Trick</string> &lt;atrick at apple.com&gt;<p>June 29, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jun 29, 2016, at 8:02 AM, Brad Hilton via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; * What is your evaluation of the proposal?<br>&gt; -1. It seems like the author is trying to solve a non-problem. The pointer APIs already work very well with enough due warning that they are unsafe. This change will just make them even more cumbersome to work with.<br>&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; No, I don’t think so, and if it were it would be too significant to be considered in scope for Swift 3.<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; It’s a valid Swift API, I just feel it makes the UnsafePointer family more complex than it needs to be.<br>&gt; * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; Swift’s approach to memory access has been unique in my programming experience and I like it for its power and simplicity.<br>&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; I read most of the proposal and have done a lot of work with the existing pointer APIs. Again I feel this is adding needless complexity and doesn’t actually change what you can do with the API.<br></p><p>Thanks for voicing an opinion because I suspect more people feel this way than are going to express openly, and I want to respond to all those people. I anticipate that a lot of users are going to feel this is more cumbersome and redundant. In fact, I don&#39;t expect the API to be easier in most cases, but I do expect it to be much harder to use incorrectly.<br></p><p>The proposal includes some use cases that developers are currently using the UnsafePointer API for but are in fact impossible to implement correctly unless we provide some alternate API. This proposed API evolved over a very long period and many attempts to propose some alternate API, none of which were easy to explain to users. Given my goal of eliminating undefined behavior from Swift code, I&#39;d like to hear how this can be accomplished in a better way. In particular, should we allow UnsafePointer casts at all? How can the user communicate to the compiler that the same memory location is accessed as a different type, particularly when so many users are accustomed to getting away with this in C?<br></p><p>-Andy<br></p><p>&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of “SE-0107: UnsafeRawPointer API” begins now and runs through July 4, 2016. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; * What is your evaluation of the proposal?<br>&gt;&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fe87aed0d64cdbc46378bf7596a7553?s=50"></div><header><strong>[Review] SE-0107: UnsafeRawPointer API</strong> from <string>Andrew Trick</string> &lt;atrick at apple.com&gt;<p>June 29, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Jun 29, 2016, at 11:38 AM, Andrew Trick via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jun 29, 2016, at 8:02 AM, Brad Hilton via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; * What is your evaluation of the proposal?<br>&gt;&gt; -1. It seems like the author is trying to solve a non-problem. The pointer APIs already work very well with enough due warning that they are unsafe. This change will just make them even more cumbersome to work with.<br>&gt;&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; No, I don’t think so, and if it were it would be too significant to be considered in scope for Swift 3.<br>&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; It’s a valid Swift API, I just feel it makes the UnsafePointer family more complex than it needs to be.<br>&gt;&gt; * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; Swift’s approach to memory access has been unique in my programming experience and I like it for its power and simplicity.<br>&gt;&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; I read most of the proposal and have done a lot of work with the existing pointer APIs. Again I feel this is adding needless complexity and doesn’t actually change what you can do with the API.<br>&gt; <br>&gt; Thanks for voicing an opinion because I suspect more people feel this way than are going to express openly, and I want to respond to all those people. I anticipate that a lot of users are going to feel this is more cumbersome and redundant. In fact, I don&#39;t expect the API to be easier in most cases, but I do expect it to be much harder to use incorrectly.<br>&gt; <br>&gt; The proposal includes some use cases that developers are currently using the UnsafePointer API for but are in fact impossible to implement correctly unless we provide some alternate API. This proposed API evolved over a very long period and many attempts to propose some alternate API, none of which were easy to explain to users. Given my goal of eliminating undefined behavior from Swift code, I&#39;d like to hear how this can be accomplished in a better way. In particular, should we allow UnsafePointer casts at all? How can the user communicate to the compiler that the same memory location is accessed as a different type, particularly when so many users are accustomed to getting away with this in C?<br></p><p>One more point here. The proposed low-level UnsafeRawPointer API is painfully explicit and seemingly redundant when it comes to writing type names in many places. This is intentional. The initial goal is to make the primitive API&#39;s difficult to misuse, but that is not the end goal.<br>Eventually we will provide convenience APIs on top of these primitive APIs. For example, I expect to provide convenience APIs for safely allocating and initializing memory in one step. I also expect to make better use of the UnsafeBufferPointer API in the future.<br></p><p>However, these convenience APIs are purely additive and it&#39;s important that we move forward with source-breaking changes to the primitive API even if some common idioms become more verbose.<br></p><p>-Andy<br></p><p>&gt;&gt; <br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of “SE-0107: UnsafeRawPointer API” begins now and runs through July 4, 2016. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * What is your evaluation of the proposal?<br>&gt;&gt;&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris Lattner<br>&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160629/49b33a28/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
