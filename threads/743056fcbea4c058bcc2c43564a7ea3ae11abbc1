<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Proposal: Re-instate mandatory self for accessing instance properties and functions</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>December  4, 2015 at 10:00:00pm</p></header><div class="content"><p>I don&#39;t understand the reasoning behind removing the need to access instance properties and functions using self. Swift has always seemed to prefer readability to brevity and the feature makes the distinction between local and instance variables/functions crystal clear. Any good reason I shouldn&#39;t go on with the proposition?<br></p><p>Just as example, my proposition makes the following piece of code illegal:<br></p><p>```<br>struct FooBar {<br>    var foo: String = &quot;foobar&quot;<br></p><p>    func bar() {<br>        print(foo) // compiler error<br>        print(self.foo) // compiler happy<br>    }<br></p><p>    func bar2() {<br>        bar() // compiler error<br>        self.bar() // compiler happy<br>    }<br>}<br>```<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7ba3c93f9350613c243eeb87c602935e?s=50"></div><header><strong>Proposal: Re-instate mandatory self for accessing instance properties and functions</strong> from <string>David Smith</string> &lt;david_smith at apple.com&gt;<p>December  4, 2015 at 01:00:00pm</p></header><div class="content"><p>Currently, ‘self.’ is required when used in closure capture contexts, which has the nice property of making it really clear when things are being captured (and therefore retained).<br></p><p>	David<br></p><p>&gt; On Dec 4, 2015, at 1:19 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; <br>&gt; I don&#39;t understand the reasoning behind removing the need to access instance properties and functions using self. Swift has always seemed to prefer readability to brevity and the feature makes the distinction between local and instance variables/functions crystal clear. Any good reason I shouldn&#39;t go on with the proposition?<br>&gt; <br>&gt; Just as example, my proposition makes the following piece of code illegal:<br>&gt; <br>&gt; ```<br>&gt; struct FooBar {<br>&gt;    var foo: String = &quot;foobar&quot;<br>&gt; <br>&gt;    func bar() {<br>&gt;        print(foo) // compiler error<br>&gt;        print(self.foo) // compiler happy<br>&gt;    }<br>&gt; <br>&gt;    func bar2() {<br>&gt;        bar() // compiler error<br>&gt;        self.bar() // compiler happy<br>&gt;    }<br>&gt; }<br>&gt; ```<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>Proposal: Re-instate mandatory self for accessing instance properties and functions</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>December  4, 2015 at 10:00:00pm</p></header><div class="content"><p>+1<br></p><p>1) I actually encountered at least two bugs in my app introduced by this implicit &quot;self&quot; behavior. It can be dangerous and hard to track down.<br></p><p>2) Also when, say fine-tuning UIKit animations, I find myself wasting enormous amount of time adding and removing &quot;self&quot;.<br></p><p>R+<br></p><p>Sent from my iPhone<br></p><p>&gt; On 04 Dec 2015, at 22:19, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; <br>&gt; I don&#39;t understand the reasoning behind removing the need to access instance properties and functions using self. Swift has always seemed to prefer readability to brevity and the feature makes the distinction between local and instance variables/functions crystal clear. Any good reason I shouldn&#39;t go on with the proposition?<br>&gt; <br>&gt; Just as example, my proposition makes the following piece of code illegal:<br>&gt; <br>&gt; ```<br>&gt; struct FooBar {<br>&gt;    var foo: String = &quot;foobar&quot;<br>&gt; <br>&gt;    func bar() {<br>&gt;        print(foo) // compiler error<br>&gt;        print(self.foo) // compiler happy<br>&gt;    }<br>&gt; <br>&gt;    func bar2() {<br>&gt;        bar() // compiler error<br>&gt;        self.bar() // compiler happy<br>&gt;    }<br>&gt; }<br>&gt; ```<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>Proposal: Re-instate mandatory self for accessing instance properties and functions</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>December  4, 2015 at 11:00:00pm</p></header><div class="content"><p>To be a little more specific, here’s a real-world example:<br></p><p>1. Say there’s a method in my class that contains a local variable called “title”.<br>2. After a while, I decide to remove a part of this method, including the “title” variable.<br>3. Everything compiles and seems to work just fine.<br>4. However, I forgot to remove one more line that used the “title” variable.<br>5. Because we’re in a UIViewController subclass, I&#39;m unknowingly modifying view controller’s title.<br></p><p>R+<br></p><p>&gt; On 4 Dec 2015, at 22:51, Rudolf Adamkovic &lt;salutis at me.com&gt; wrote:<br>&gt; <br>&gt; +1<br>&gt; <br>&gt; 1) I actually encountered at least two bugs in my app introduced by this implicit &quot;self&quot; behavior. It can be dangerous and hard to track down.<br>&gt; <br>&gt; 2) Also when, say fine-tuning UIKit animations, I find myself wasting enormous amount of time adding and removing &quot;self&quot;.<br>&gt; <br>&gt; R+<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt;&gt; On 04 Dec 2015, at 22:19, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I don&#39;t understand the reasoning behind removing the need to access instance properties and functions using self. Swift has always seemed to prefer readability to brevity and the feature makes the distinction between local and instance variables/functions crystal clear. Any good reason I shouldn&#39;t go on with the proposition?<br>&gt;&gt; <br>&gt;&gt; Just as example, my proposition makes the following piece of code illegal:<br>&gt;&gt; <br>&gt;&gt; ```<br>&gt;&gt; struct FooBar {<br>&gt;&gt;   var foo: String = &quot;foobar&quot;<br>&gt;&gt; <br>&gt;&gt;   func bar() {<br>&gt;&gt;       print(foo) // compiler error<br>&gt;&gt;       print(self.foo) // compiler happy<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt;   func bar2() {<br>&gt;&gt;       bar() // compiler error<br>&gt;&gt;       self.bar() // compiler happy<br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt;&gt; ```<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>Proposal: Re-instate mandatory self for accessing instance properties and functions</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>December  4, 2015 at 05:00:00pm</p></header><div class="content"><p>Are there warnings/diagnostics that could call out when local variables<br>shadow properties? I generally like that `self` is optional and prefer<br>limiting its use to explicitly call out potential retain cycles. Xcode also<br>makes it easy to introspect variable scope, though Xcode is less of a<br>requirement these days...<br></p><p>On Fri, Dec 4, 2015 at 5:34 PM, Rudolf Adamkovič &lt;salutis at me.com&gt; wrote:<br></p><p>&gt; To be a little more specific, here’s a real-world example:<br>&gt;<br>&gt; 1. Say there’s a method in my class that contains a local variable called<br>&gt; “title”.<br>&gt; 2. After a while, I decide to remove a part of this method, including the<br>&gt; “title” variable.<br>&gt; 3. Everything compiles and seems to work just fine.<br>&gt; 4. However, I forgot to remove one more line that used the “title”<br>&gt; variable.<br>&gt; 5. Because we’re in a UIViewController subclass, I&#39;m unknowingly modifying<br>&gt; view controller’s title.<br>&gt;<br>&gt; R+<br>&gt;<br>&gt; &gt; On 4 Dec 2015, at 22:51, Rudolf Adamkovic &lt;salutis at me.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; +1<br>&gt; &gt;<br>&gt; &gt; 1) I actually encountered at least two bugs in my app introduced by this<br>&gt; implicit &quot;self&quot; behavior. It can be dangerous and hard to track down.<br>&gt; &gt;<br>&gt; &gt; 2) Also when, say fine-tuning UIKit animations, I find myself wasting<br>&gt; enormous amount of time adding and removing &quot;self&quot;.<br>&gt; &gt;<br>&gt; &gt; R+<br>&gt; &gt;<br>&gt; &gt; Sent from my iPhone<br>&gt; &gt;<br>&gt; &gt;&gt; On 04 Dec 2015, at 22:19, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I don&#39;t understand the reasoning behind removing the need to access<br>&gt; instance properties and functions using self. Swift has always seemed to<br>&gt; prefer readability to brevity and the feature makes the distinction between<br>&gt; local and instance variables/functions crystal clear. Any good reason I<br>&gt; shouldn&#39;t go on with the proposition?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Just as example, my proposition makes the following piece of code<br>&gt; illegal:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; ```<br>&gt; &gt;&gt; struct FooBar {<br>&gt; &gt;&gt;   var foo: String = &quot;foobar&quot;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;   func bar() {<br>&gt; &gt;&gt;       print(foo) // compiler error<br>&gt; &gt;&gt;       print(self.foo) // compiler happy<br>&gt; &gt;&gt;   }<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;   func bar2() {<br>&gt; &gt;&gt;       bar() // compiler error<br>&gt; &gt;&gt;       self.bar() // compiler happy<br>&gt; &gt;&gt;   }<br>&gt; &gt;&gt; }<br>&gt; &gt;&gt; ```<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/53518aba/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Proposal: Re-instate mandatory self for accessing instance properties and functions</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>December  4, 2015 at 11:00:00pm</p></header><div class="content"><p>Stephen, as previously stated by Rudolf, his real-world example would not trigger such a warning because the title local variable no longer exists and therefore no longer shadows the instance property.<br></p><p>To continue the discussion, here is a more detailed but rough proposal closer to the required template to advance discussions. I hope you don’t mind Rudolf, but I used your example to illustrate the proposal:<br></p><p>Introduction<br></p><p>Swift used to force using ‘.self’ when accessing instance properties and functions, but since dropped this requirement, only to keep it for closure captures. It now feels inconsistent, and we have lost the automatic documentation of instance properties vs local variables and instance functions vs local functions or closures. This proposal offers to re-instate the original behaviour.<br></p><p>Motivation<br></p><p>The previous behaviour which this proposal hopes to re-instate provided several advantages:<br></p><p>* When reading code, it makes it obvious which are instance properties and which are local variables, as well as which are instance functions and which are local functions/closures. Moreover, a sloppy programmer can make it hard to read his code if he does not constantly use self. or not.<br>* Avoids bugs where the author meant to use one a local variable but instead is unknowingly using an instance property (and the other way round).<br></p><p>One example of a bug avoided by the original proposal (provided by Rudolf Adamkovic):<br></p><p>class MyViewController : UIViewController {<br>	@IBOutlet var button: UIButton!<br>        var name: String = “David&quot;<br></p><p>	func updateButton() {<br>		// var title = “Hello \(name)”<br>		button.setTitle(title, forState: .Normal) // forgot to comment this line but the compiler does not complain and title is now referencing UIViewController’s title by mistake<br>		button.setTitleColor(UIColor.blackColor(), forState: .Normal)<br>	}<br>}<br></p><p>The API Design Guidelines &lt;https://swift.org/documentation/api-design-guidelines.html&gt; are meant for writing APIs but I still think they represent fundamentals of Swift. The two first points are:<br></p><p>	• Clarity at the point of use is your most important goal. Code is read far more than it is written.<br>	• Clarity is more important than brevity. Although Swift code can be compact, it is a non-goal to enable the smallest possible code with the fewest characters. Brevity in Swift code, where it occurs, is a side-effect of the strong type system and features that naturally reduce boilerplate.<br></p><p>And I believe that the proposition is directly in line with those objectives.<br></p><p>Proposed solution<br></p><p>Re-instante the previous behaviour where ‘self.’ was required to access instance properties and functions.<br></p><p>Detailed design<br></p><p>It would not require changes to the grammar, and I think (not a compiler engineer) that it would require minimal amount of work.<br></p><p>Impact on existing code<br></p><p>A lot of code written since the original change would be impacted by this proposal, but it seems like it can be easily fixed by both the migrator tool and Auto Fixes.<br></p><p>Alternatives considered<br></p><p>The alternative is to keep the current behaviour, but it has the aforementioned disadvantages<br></p><p>&gt; On 04 Dec 2015, at 22:51, Rudolf Adamkovic &lt;salutis at me.com&gt; wrote:<br>&gt; <br>&gt; +1<br>&gt; <br>&gt; 1) I actually encountered at least two bugs in my app introduced by this implicit &quot;self&quot; behavior. It can be dangerous and hard to track down.<br>&gt; <br>&gt; 2) Also when, say fine-tuning UIKit animations, I find myself wasting enormous amount of time adding and removing &quot;self&quot;.<br>&gt; <br>&gt; R+<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt;&gt; On 04 Dec 2015, at 22:19, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I don&#39;t understand the reasoning behind removing the need to access instance properties and functions using self. Swift has always seemed to prefer readability to brevity and the feature makes the distinction between local and instance variables/functions crystal clear. Any good reason I shouldn&#39;t go on with the proposition?<br>&gt;&gt; <br>&gt;&gt; Just as example, my proposition makes the following piece of code illegal:<br>&gt;&gt; <br>&gt;&gt; ```<br>&gt;&gt; struct FooBar {<br>&gt;&gt;   var foo: String = &quot;foobar&quot;<br>&gt;&gt; <br>&gt;&gt;   func bar() {<br>&gt;&gt;       print(foo) // compiler error<br>&gt;&gt;       print(self.foo) // compiler happy<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt;   func bar2() {<br>&gt;&gt;       bar() // compiler error<br>&gt;&gt;       self.bar() // compiler happy<br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt;&gt; ```<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p><br>&gt; On 04 Dec 2015, at 23:41, Stephen Celis &lt;stephen.celis at gmail.com&gt; wrote:<br>&gt; <br>&gt; Are there warnings/diagnostics that could call out when local variables shadow properties? I generally like that `self` is optional and prefer limiting its use to explicitly call out potential retain cycles. Xcode also makes it easy to introspect variable scope, though Xcode is less of a requirement these days...<br>&gt; <br>&gt; On Fri, Dec 4, 2015 at 5:34 PM, Rudolf Adamkovič &lt;salutis at me.com &lt;mailto:salutis at me.com&gt;&gt; wrote:<br>&gt; To be a little more specific, here’s a real-world example:<br>&gt; <br>&gt; 1. Say there’s a method in my class that contains a local variable called “title”.<br>&gt; 2. After a while, I decide to remove a part of this method, including the “title” variable.<br>&gt; 3. Everything compiles and seems to work just fine.<br>&gt; 4. However, I forgot to remove one more line that used the “title” variable.<br>&gt; 5. Because we’re in a UIViewController subclass, I&#39;m unknowingly modifying view controller’s title.<br>&gt; <br>&gt; R+<br>&gt; <br>&gt; &gt; On 4 Dec 2015, at 22:51, Rudolf Adamkovic &lt;salutis at me.com &lt;mailto:salutis at me.com&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; +1<br>&gt; &gt;<br>&gt; &gt; 1) I actually encountered at least two bugs in my app introduced by this implicit &quot;self&quot; behavior. It can be dangerous and hard to track down.<br>&gt; &gt;<br>&gt; &gt; 2) Also when, say fine-tuning UIKit animations, I find myself wasting enormous amount of time adding and removing &quot;self&quot;.<br>&gt; &gt;<br>&gt; &gt; R+<br>&gt; &gt;<br>&gt; &gt; Sent from my iPhone<br>&gt; &gt;<br>&gt; &gt;&gt; On 04 Dec 2015, at 22:19, David Hart &lt;david at hartbit.com &lt;mailto:david at hartbit.com&gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I don&#39;t understand the reasoning behind removing the need to access instance properties and functions using self. Swift has always seemed to prefer readability to brevity and the feature makes the distinction between local and instance variables/functions crystal clear. Any good reason I shouldn&#39;t go on with the proposition?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Just as example, my proposition makes the following piece of code illegal:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; ```<br>&gt; &gt;&gt; struct FooBar {<br>&gt; &gt;&gt;   var foo: String = &quot;foobar&quot;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;   func bar() {<br>&gt; &gt;&gt;       print(foo) // compiler error<br>&gt; &gt;&gt;       print(self.foo) // compiler happy<br>&gt; &gt;&gt;   }<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;   func bar2() {<br>&gt; &gt;&gt;       bar() // compiler error<br>&gt; &gt;&gt;       self.bar() // compiler happy<br>&gt; &gt;&gt;   }<br>&gt; &gt;&gt; }<br>&gt; &gt;&gt; ```<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/8d4f1eb5/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>Proposal: Re-instate mandatory self for accessing instance properties and functions</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>December  4, 2015 at 06:00:00pm</p></header><div class="content"><p>On Fri, Dec 4, 2015 at 5:59 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br></p><p>&gt; Stephen, as previously stated by Rudolf, his real-world example would not<br>&gt; trigger such a warning because the title local variable no longer exists<br>&gt; and therefore no longer shadows the instance property.<br>&gt;<br></p><p>Wouldn&#39;t the warning trigger prior to refactoring and therefore be more<br>apparent during such a removal?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/ac2db6d4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Proposal: Re-instate mandatory self for accessing instance properties and functions</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>December  5, 2015 at 12:00:00am</p></header><div class="content"><p>It would, so it’s better than nothing, but it would disappear as soon as the un-intentional bug appears. But, as Kevin stated, there are too many good used of shadowing to suffer a warning.<br></p><p>&gt; On 05 Dec 2015, at 00:20, Stephen Celis &lt;stephen.celis at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Fri, Dec 4, 2015 at 5:59 PM, David Hart &lt;david at hartbit.com &lt;mailto:david at hartbit.com&gt;&gt; wrote:<br>&gt; Stephen, as previously stated by Rudolf, his real-world example would not trigger such a warning because the title local variable no longer exists and therefore no longer shadows the instance property.<br>&gt; <br>&gt; Wouldn&#39;t the warning trigger prior to refactoring and therefore be more apparent during such a removal?<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/7099343a/attachment-0001.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>Proposal: Re-instate mandatory self for accessing instance properties and functions</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December  4, 2015 at 03:00:00pm</p></header><div class="content"><p>Very strong -1.<br></p><p>The ability to elide `self` in most contexts is really nice. Especially<br>when combined with the fact that SourceKitService lets Xcode syntax-<br>colorize properties/methods nicely so the color of the identifier tells<br>me whether it&#39;s a method/property on self or something else. I realize<br>that not everybody will be using Xcode (particularly people on other<br>platforms), but in time we should hopefully see other editors gain<br>support for SourceKit to provide more intelligent handling of Swift<br>code as well.<br></p><p>Similarly, I rely on the ability to shadow things (including properties<br>of self) a _lot_. And it&#39;s not just me; it&#39;s very common for e.g.<br>initializers to use property names as the parameter names, such as:<br></p><p>init(x: Int, y: Int) {    self.x = x    self.y = y }<br></p><p>-Kevin Ballard<br></p><p>On Fri, Dec 4, 2015, at 02:41 PM, Stephen Celis wrote:<br>&gt; Are there warnings/diagnostics that could call out when local<br>&gt; variables shadow properties? I generally like that `self` is optional<br>&gt; and prefer limiting its use to explicitly call out potential retain<br>&gt; cycles. Xcode also makes it easy to introspect variable scope, though<br>&gt; Xcode is less of a requirement these days...<br>&gt;<br>&gt; On Fri, Dec 4, 2015 at 5:34 PM, Rudolf Adamkovič<br>&gt; &lt;salutis at me.com&gt; wrote:<br>&gt;&gt; To be a little more specific, here’s a real-world example:<br>&gt;&gt;<br>&gt;&gt;<br>1. Say there’s a method in my class that contains a local variable<br>   called “title”.<br>&gt;&gt;<br>2. After a while, I decide to remove a part of this method, including<br>   the “title” variable.<br>&gt;&gt;<br>3. Everything compiles and seems to work just fine.<br>&gt;&gt;<br>4. However, I forgot to remove one more line that used the<br>   “title” variable.<br>&gt;&gt;<br>5. Because we’re in a UIViewController subclass, I&#39;m unknowingly<br>   modifying view controller’s title.<br>&gt;&gt;<br>&gt;&gt;<br>R+<br>&gt;&gt;<br>&gt;&gt;<br>&gt; On 4 Dec 2015, at 22:51, Rudolf Adamkovic &lt;salutis at me.com&gt; wrote:<br>&gt;&gt;<br>&gt;<br>&gt;&gt;<br>&gt; +1<br>&gt;&gt;<br>&gt;<br>&gt;&gt;<br>&gt; 1) I actually encountered at least two bugs in my app introduced by<br>&gt;    this implicit &quot;self&quot; behavior. It can be dangerous and hard to<br>&gt;    track down.<br>&gt;&gt;<br>&gt;<br>&gt;&gt;<br>&gt; 2) Also when, say fine-tuning UIKit animations, I find myself wasting<br>&gt;    enormous amount of time adding and removing &quot;self&quot;.<br>&gt;&gt;<br>&gt;<br>&gt;&gt;<br>&gt; R+<br>&gt;&gt;<br>&gt;<br>&gt;&gt;<br>&gt; Sent from my iPhone<br>&gt;&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On 04 Dec 2015, at 22:19, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I don&#39;t understand the reasoning behind removing the need to access<br>&gt;&gt; instance properties and functions using self. Swift has always seemed<br>&gt;&gt; to prefer readability to brevity and the feature makes the<br>&gt;&gt; distinction between local and instance variables/functions crystal<br>&gt;&gt; clear. Any good reason I shouldn&#39;t go on with the proposition?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Just as example, my proposition makes the following piece of code<br>&gt;&gt; illegal:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; struct FooBar {<br>&gt;&gt;<br>&gt;&gt;var foo: String = &quot;foobar&quot;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;func bar() {<br>&gt;&gt;<br>&gt;&gt;print(foo) // compiler error<br>&gt;&gt;<br>&gt;&gt;print(self.foo) // compiler happy<br>&gt;&gt;<br>&gt;&gt;}<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;func bar2() {<br>&gt;&gt;<br>&gt;&gt;bar() // compiler error<br>&gt;&gt;<br>&gt;&gt;self.bar() // compiler happy<br>&gt;&gt;<br>&gt;&gt;}<br>&gt;&gt;<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt;<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt;<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt;&gt;<br>&gt; swift-evolution mailing list<br>&gt;&gt;<br>&gt; swift-evolution at swift.org<br>&gt;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>_______________________________________________<br>&gt;&gt;<br>swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _________________________________________________<br>&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/ec70e4eb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Proposal: Re-instate mandatory self for accessing instance properties and functions</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>December  5, 2015 at 12:00:00am</p></header><div class="content"><p>&gt; Very strong -1.<br></p><p>I have the impression that this topic can be quite divisive.<br> <br>&gt; The ability to elide `self` in most contexts is really nice. Especially when combined with the fact that SourceKitService lets Xcode syntax-colorize properties/methods nicely so the color of the identifier tells me whether it&#39;s a method/property on self or something else. I realize that not everybody will be using Xcode (particularly people on other platforms), but in time we should hopefully see other editors gain support for SourceKit to provide more intelligent handling of Swift code as well.<br></p><p>For me, Swift should be clear even without the help of syntax highlighting. Syntax highlighting should come only as a bonus. On a personal note, I’m colourblind and have great difficulties telling colours apart.<br></p><p>&gt; Similarly, I rely on the ability to shadow things (including properties of self) a _lot_. And it&#39;s not just me; it&#39;s very common for e.g. initializers to use property names as the parameter names, such as:<br>&gt;  <br>&gt; init(x: Int, y: Int) {<br>&gt;     self.x = x<br>&gt;     self.y = y<br>&gt; }<br></p><p>I agree with you on this, as I often use such idioms. That’s why the shadowing warning is not a good solution IMHO.<br></p><p>David.<br></p><p>&gt; On Fri, Dec 4, 2015, at 02:41 PM, Stephen Celis wrote:<br>&gt;&gt; Are there warnings/diagnostics that could call out when local variables shadow properties? I generally like that `self` is optional and prefer limiting its use to explicitly call out potential retain cycles. Xcode also makes it easy to introspect variable scope, though Xcode is less of a requirement these days...<br>&gt;&gt;  <br>&gt;&gt; On Fri, Dec 4, 2015 at 5:34 PM, Rudolf Adamkovič &lt;salutis at me.com &lt;mailto:salutis at me.com&gt;&gt; wrote:<br>&gt;&gt; To be a little more specific, here’s a real-world example:<br>&gt;&gt;  <br>&gt;&gt; 1. Say there’s a method in my class that contains a local variable called “title”.<br>&gt;&gt; 2. After a while, I decide to remove a part of this method, including the “title” variable.<br>&gt;&gt; 3. Everything compiles and seems to work just fine.<br>&gt;&gt; 4. However, I forgot to remove one more line that used the “title” variable.<br>&gt;&gt; 5. Because we’re in a UIViewController subclass, I&#39;m unknowingly modifying view controller’s title.<br>&gt;&gt; <br>&gt;&gt; R+<br>&gt;&gt;  <br>&gt;&gt; &gt; On 4 Dec 2015, at 22:51, Rudolf Adamkovic &lt;salutis at me.com &lt;mailto:salutis at me.com&gt;&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; +1<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 1) I actually encountered at least two bugs in my app introduced by this implicit &quot;self&quot; behavior. It can be dangerous and hard to track down.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 2) Also when, say fine-tuning UIKit animations, I find myself wasting enormous amount of time adding and removing &quot;self&quot;.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; R+<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Sent from my iPhone<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; On 04 Dec 2015, at 22:19, David Hart &lt;david at hartbit.com &lt;mailto:david at hartbit.com&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; I don&#39;t understand the reasoning behind removing the need to access instance properties and functions using self. Swift has always seemed to prefer readability to brevity and the feature makes the distinction between local and instance variables/functions crystal clear. Any good reason I shouldn&#39;t go on with the proposition?<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Just as example, my proposition makes the following piece of code illegal:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; ```<br>&gt;&gt; &gt;&gt; struct FooBar {<br>&gt;&gt; &gt;&gt;   var foo: String = &quot;foobar&quot;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;   func bar() {<br>&gt;&gt; &gt;&gt;       print(foo) // compiler error<br>&gt;&gt; &gt;&gt;       print(self.foo) // compiler happy<br>&gt;&gt; &gt;&gt;   }<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;   func bar2() {<br>&gt;&gt; &gt;&gt;       bar() // compiler error<br>&gt;&gt; &gt;&gt;       self.bar() // compiler happy<br>&gt;&gt; &gt;&gt;   }<br>&gt;&gt; &gt;&gt; }<br>&gt;&gt; &gt;&gt; ```<br>&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;  <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/0c43d13d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>Proposal: Re-instate mandatory self for accessing instance properties and functions</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>December  4, 2015 at 06:00:00pm</p></header><div class="content"><p>On Fri, Dec 4, 2015 at 6:08 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br></p><p>&gt; Similarly, I rely on the ability to shadow things (including properties of<br>&gt; self) a _lot_. And it&#39;s not just me; it&#39;s very common for e.g. initializers<br>&gt; to use property names as the parameter names, such as:<br>&gt;<br>&gt;<br>&gt; init(x: Int, y: Int) {<br>&gt;     self.x = x<br>&gt;     self.y = y<br>&gt; }<br>&gt;<br>&gt;<br>&gt; I agree with you on this, as I often use such idioms. That’s why the<br>&gt; shadowing warning is not a good solution IMHO.<br>&gt;<br></p><p>This is a fair point, though initialization seems to be the most common<br>exception and could be omitted from the rule.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/657e8d96/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
