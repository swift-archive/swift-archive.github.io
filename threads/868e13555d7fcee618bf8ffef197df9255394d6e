<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c354b21edb9ba56fe6b42950e08195fa?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Jonathan Hull</string> &lt;jhull at gbis.com&gt;<p>June 10, 2016 at 07:00:00pm</p></header><div class="content"><p>Please leave this feature in!<br></p><p>One of the places I get bitten the most during refactoring is somehow missing a ‘continue’ statement inside the loop (and I hear that is a common issue).  For-in-where lets me guard against that problem in simple cases.  <br></p><p>I also find that it is often the clearest way to capture the semantics of what I want.  I find it extremely readable and compact. Everything is all in one place :-)<br></p><p>As for the issue of “dialects”, it really just feels like people are trying to force their particular pet coding style on everyone else.  Should we get rid of .forEach() as well?  Sometimes languages have more than one way to do something, and it is up to the programmer to pick the form that is clearest in the context of use...<br></p><p>Thanks,<br>Jon<br></p><p>&gt; I respect that anti-goal, but I think being over-rigid about limiting<br>&gt; developers&#39; choice of expression is also an anti-goal.<br>&gt; <br>&gt; To me, it is like guard statements vs. if-let statements. Some people find<br>&gt; one to be more clear than the other. Often times the best choice depends on<br>&gt; the context. Sometimes a guard statement can be re-written as an if-let<br>&gt; statement in a way that makes the code more clear, and vice versa. And<br>&gt; different people will inevitably have different personal preferences -<br>&gt; their own &quot;style&quot;, if you will - and will favor one over the other. But it<br>&gt; would be a mistake to force everyone into one box in order to prevent the<br>&gt; fracturing of the Swift community into &quot;dialects.&quot;<br>&gt; <br>&gt; But most importantly (and this is really the kicker for me) there are times<br>&gt; when the &quot;where&quot; syntax provides the maximum amount of clarity in the<br>&gt; context of my code, and I don&#39;t want to lose that expressive power.<br>&gt;&gt; On Fri, Jun 10, 2016 at 10:17 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt; I think this idea--if you don&#39;t like it, then you don&#39;t have to use it--is<br>&gt;&gt; &gt; indicative of a key worry here: it&#39;s inessential to the language and<br>&gt;&gt; &gt; promotes dialects wherein certain people use it and others wherein they<br>&gt;&gt; &gt; don&#39;t. This is an anti-goal.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/868e4d6e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Retiring `where` from for-in loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 10, 2016 at 10:00:00pm</p></header><div class="content"><p>On Fri, Jun 10, 2016 at 9:25 PM, Jonathan Hull &lt;jhull at gbis.com&gt; wrote:<br></p><p>&gt; Please leave this feature in!<br>&gt;<br>&gt; One of the places I get bitten the most during refactoring is somehow<br>&gt; missing a ‘continue’ statement inside the loop (and I hear that is a common<br>&gt; issue).  For-in-where lets me guard against that problem in simple cases.<br>&gt;<br></p><p>Hmm, that&#39;s an interesting use case. That said, the simple case that could<br>get replaced by `where` is an opening `guard` statement, precisely one that<br>you wouldn&#39;t somehow miss. The ones you&#39;ll get bitten by, you&#39;ll still get<br>bitten by whatever way this goes...<br></p><p><br>&gt; I also find that it is often the clearest way to capture the semantics of<br>&gt; what I want.  I find it extremely readable and compact. Everything is all<br>&gt; in one place :-)<br>&gt;<br>&gt; As for the issue of “dialects”, it really just feels like people are<br>&gt; trying to force their particular pet coding style on everyone else.<br>&gt;<br></p><p>Not at all (at least not from me). We find `while` to be problematic for<br>the reasons outlined in the draft proposal, not for reasons of style. On<br>the contrary, it&#39;s the advocates for keeping `while` that argue that it&#39;s<br>good style. (Which I dispute, but which is not the reason for the proposal.)<br></p><p><br>&gt; Should we get rid of .forEach() as well?  Sometimes languages have more<br>&gt; than one way to do something, and it is up to the programmer to pick the<br>&gt; form that is clearest in the context of use...<br>&gt;<br>&gt; Thanks,<br>&gt; Jon<br>&gt;<br>&gt; I respect that anti-goal, but I think being over-rigid about limiting<br>&gt; developers&#39; choice of expression is also an anti-goal.<br>&gt;<br>&gt; To me, it is like guard statements vs. if-let statements. Some people find<br>&gt; one to be more clear than the other. Often times the best choice depends on<br>&gt; the context. Sometimes a guard statement can be re-written as an if-let<br>&gt; statement in a way that makes the code more clear, and vice versa. And<br>&gt; different people will inevitably have different personal preferences -<br>&gt; their own &quot;style&quot;, if you will - and will favor one over the other. But it<br>&gt; would be a mistake to force everyone into one box in order to prevent the<br>&gt; fracturing of the Swift community into &quot;dialects.&quot;<br>&gt;<br>&gt; But most importantly (and this is really the kicker for me) there are times<br>&gt; when the &quot;where&quot; syntax provides the maximum amount of clarity in the<br>&gt; context of my code, and I don&#39;t want to lose that expressive power.<br>&gt;<br>&gt; On Fri, Jun 10, 2016 at 10:17 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt; wrote:<br>&gt;<br>&gt; &gt;* I think this idea--if you don&#39;t like it, then you don&#39;t have to use it--is<br>&gt; *&gt;* indicative of a key worry here: it&#39;s inessential to the language and<br>&gt; *&gt;* promotes dialects wherein certain people use it and others wherein they<br>&gt; *&gt;* don&#39;t. This is an anti-goal.*<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/1c2d8180/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
