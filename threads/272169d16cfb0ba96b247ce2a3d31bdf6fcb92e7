<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0107: UnsafeRawPointer API &quot;initialize(from:forwardToCount:)&quot;</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July  5, 2016 at 08:00:00am</p></header><div class="content"><p>on Tue Jul 05 2016, Andrew Trick &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Jul 2, 2016, at 10:10 PM, Brent Royal-Gordon via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I have a pile of naming quibbles; rather than describe them all in<br>&gt;&gt; prose (which turned into a mess), I&#39;ve annotated parts of the &quot;Full<br>&gt;&gt; UnsafeRawPointer API&quot; section in a gist:<br>&gt;&gt; &lt;https://gist.github.com/brentdax/8f4ed4decafc1d18c4441092baa13cfe<br>&gt;&gt;<br>&gt; &lt;https://gist.github.com/brentdax/8f4ed4decafc1d18c4441092baa13cfe&gt;&gt;.<br>&gt;<br>&gt; I want to call this out separately because it’s not specific to my<br>&gt; proposal and changes the existing UnsafePointer API.<br>&gt;<br>&gt; Brent’s suggestion is to change `initialize(from:count:)` to<br>&gt; `initialize(from:forwardToCount:)` for symmetry with the backward<br>&gt; operations. It makes perfect sense to me, and it does a better job of<br>&gt; conveying that a sequence of elements will be read out of “from”.<br>&gt;<br>&gt; Any objections?<br></p><p>Well, maybe we ought to think about this again.  I&#39;m not 100% sure we<br>should have separate APIs for these; we could compare pointers and<br>decide which direction to go in.  The branch should be optimizable-out<br>in most situations, right?  And where it couldn&#39;t be optimized out,<br>you&#39;d currently need to branch manually.<br></p><p>The concern I have with “backward/forward” is that when you&#39;re shifting<br>something backwards in memory, you (may) need to proceed forwards, and<br>vice-versa.  So these names are easily misinterpreted as having the<br>opposite to their actual meaning.<br></p><p>I suppose there&#39;s an argument to be made that CPUs/caches are better at<br>going forward than backward, and when the memory regions don&#39;t overlap<br>you want to go forwards.  But even that is detectable at runtime.  What<br>do you think, Andy?<br></p><p><br>&gt;   // I&#39;m not happy with the asymmetry of these forwards/backwards <br>&gt;   // pairs.<br>&gt;   // <br>&gt;   // func initialize&lt;T&gt;(from: UnsafePointer&lt;T&gt;, count: Int)<br>&gt;   //   -&gt; UnsafeMutablePointer&lt;T&gt;<br>&gt;   // func initializeBackward&lt;T&gt;(from: UnsafePointer&lt;T&gt;, count: Int)<br>&gt;   //   -&gt; UnsafeMutablePointer&lt;T&gt;<br>&gt;   func initialize&lt;T&gt;(from: UnsafePointer&lt;T&gt;, forwardToCount: Int)<br>&gt;     -&gt; UnsafeMutablePointer&lt;T&gt;<br>&gt;   func initialize&lt;T&gt;(from: UnsafePointer&lt;T&gt;, backwardFromCount: Int)<br>&gt;     -&gt; UnsafeMutablePointer&lt;T&gt;<br>&gt;<br>&gt;   // More detailed thoughts on redesigining `move` methods in the <br>&gt;   // email, but for now:<br>&gt;   // <br>&gt;   // func moveInitialize&lt;T&gt;(from: UnsafePointer&lt;T&gt;, count: Int)<br>&gt;   //   -&gt; UnsafeMutablePointer&lt;T&gt;<br>&gt;   // func moveInitializeBackward&lt;T&gt;(from: UnsafePointer&lt;T&gt;, count:<br>&gt; Int)<br>&gt;   //   -&gt; UnsafeMutablePointer&lt;T&gt;<br>&gt;   func moveInitialize&lt;T&gt;(from: UnsafePointer&lt;T&gt;, forwardToCount: Int)<br>&gt;     -&gt; UnsafeMutablePointer&lt;T&gt;<br>&gt;   func moveInitialize&lt;T&gt;(from: UnsafePointer&lt;T&gt;, backwardFromCount:<br>&gt; Int)<br>&gt;     -&gt; UnsafeMutablePointer&lt;T&gt;<br>&gt;<br>&gt; Andy<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fe87aed0d64cdbc46378bf7596a7553?s=50"></div><header><strong>[Review] SE-0107: UnsafeRawPointer API &quot;initialize(from:forwardToCount:)&quot;</strong> from <string>Andrew Trick</string> &lt;atrick at apple.com&gt;<p>July  5, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jul 5, 2016, at 10:48 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; I want to call this out separately because it’s not specific to my<br>&gt;&gt; proposal and changes the existing UnsafePointer API.<br>&gt;&gt; <br>&gt;&gt; Brent’s suggestion is to change `initialize(from:count:)` to<br>&gt;&gt; `initialize(from:forwardToCount:)` for symmetry with the backward<br>&gt;&gt; operations. It makes perfect sense to me, and it does a better job of<br>&gt;&gt; conveying that a sequence of elements will be read out of “from”.<br>&gt;&gt; <br>&gt;&gt; Any objections?<br>&gt; <br>&gt; Well, maybe we ought to think about this again.  I&#39;m not 100% sure we<br>&gt; should have separate APIs for these; we could compare pointers and<br>&gt; decide which direction to go in.  The branch should be optimizable-out<br>&gt; in most situations, right?  And where it couldn&#39;t be optimized out,<br>&gt; you&#39;d currently need to branch manually.<br>&gt; <br>&gt; The concern I have with “backward/forward” is that when you&#39;re shifting<br>&gt; something backwards in memory, you (may) need to proceed forwards, and<br>&gt; vice-versa.  So these names are easily misinterpreted as having the<br>&gt; opposite to their actual meaning.<br>&gt; <br>&gt; I suppose there&#39;s an argument to be made that CPUs/caches are better at<br>&gt; going forward than backward, and when the memory regions don&#39;t overlap<br>&gt; you want to go forwards.  But even that is detectable at runtime.  What<br>&gt; do you think, Andy?<br></p><p><br>I agree.<br></p><p>The only value in having 2 APIs is that many times the user knows the regions are non-overlapping and may not want a runtime check. In that case forward copying makes more sense.<br></p><p>If the regions may overlap, and if the user somehow knows the relationship between pointers, then the compiler should also. Otherwise, if the pointer comparison is not done in the stdlib, we’re just forcing the user to do it, or allowing them to forget to do it.<br></p><p>Note that there will be no branch in the pure `initialize` case, because the regions are not allowed to overlap anyway. It’s only an issue for moveInitialize and assignInitialize.<br></p><p>How about removing the “BackwardFrom” APIs, adding runtime checks to the forward APIs, and possibly adding non-overlapping “performance” API’s as a separate proposal if needed.<br></p><p>-Andy<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160705/796e5ffa/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0107: UnsafeRawPointer API &quot;initialize(from:forwardToCount:)&quot;</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July  5, 2016 at 02:00:00pm</p></header><div class="content"><p>on Tue Jul 05 2016, Andrew Trick &lt;atrick-AT-apple.com&gt; wrote:<br></p><p>&gt;&gt; On Jul 5, 2016, at 10:48 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I want to call this out separately because it’s not specific to my<br>&gt;&gt;&gt; proposal and changes the existing UnsafePointer API.<br>&gt;&gt;&gt; <br>&gt;<br>&gt;&gt;&gt; Brent’s suggestion is to change `initialize(from:count:)` to<br>&gt;&gt;&gt; `initialize(from:forwardToCount:)` for symmetry with the backward<br>&gt;&gt;&gt; operations. It makes perfect sense to me, and it does a better job of<br>&gt;&gt;&gt; conveying that a sequence of elements will be read out of “from”.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Any objections?<br>&gt;&gt; <br>&gt;&gt; Well, maybe we ought to think about this again.  I&#39;m not 100% sure we<br>&gt;&gt; should have separate APIs for these; we could compare pointers and<br>&gt;&gt; decide which direction to go in.  The branch should be optimizable-out<br>&gt;&gt; in most situations, right?  And where it couldn&#39;t be optimized out,<br>&gt;&gt; you&#39;d currently need to branch manually.<br>&gt;&gt; <br>&gt;&gt; The concern I have with “backward/forward” is that when you&#39;re shifting<br>&gt;&gt; something backwards in memory, you (may) need to proceed forwards, and<br>&gt;&gt; vice-versa.  So these names are easily misinterpreted as having the<br>&gt;&gt; opposite to their actual meaning.<br>&gt;&gt; <br>&gt;&gt; I suppose there&#39;s an argument to be made that CPUs/caches are better at<br>&gt;&gt; going forward than backward, and when the memory regions don&#39;t overlap<br>&gt;&gt; you want to go forwards.  But even that is detectable at runtime.  What<br>&gt;&gt; do you think, Andy?<br>&gt;<br>&gt; I agree.<br>&gt;<br>&gt; The only value in having 2 APIs is that many times the user knows the<br>&gt; regions are non-overlapping and may not want a runtime check. In that<br>&gt; case forward copying makes more sense.<br>&gt;<br>&gt; If the regions may overlap, and if the user somehow knows the<br>&gt; relationship between pointers, then the compiler should<br>&gt; also. Otherwise, if the pointer comparison is not done in the stdlib,<br>&gt; we’re just forcing the user to do it, or allowing them to forget to do<br>&gt; it.<br>&gt;<br>&gt; Note that there will be no branch in the pure `initialize` case,<br>&gt; because the regions are not allowed to overlap anyway. It’s only an<br>&gt; issue for moveInitialize and assignInitialize.<br>&gt;<br>&gt; How about removing the “BackwardFrom” APIs, adding runtime checks to<br>&gt; the forward APIs, and possibly adding non-overlapping “performance”<br>&gt; API’s as a separate proposal if needed.<br></p><p>+1<br></p><p>-- <br>Dave<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
