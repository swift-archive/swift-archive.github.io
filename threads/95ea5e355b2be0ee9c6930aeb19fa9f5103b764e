<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 11, 2016 at 10:00:00am</p></header><div class="content"><p>on Wed Feb 10 2016, Matthew Judge &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Feb 10, 2016, at 18:17, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; on Wed Feb 10 2016, Matthew Judge &lt;matthew.judge-AT-gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;<br>&gt;&gt;&gt; On Tue, Feb 9, 2016 at 2:18 PM, Dave Abrahams via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi everybody,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Having looked at some examples, the API guidelines working group members<br>&gt;&gt;&gt;&gt; that were present this morning agreed we really want prepositions inside<br>&gt;&gt;&gt;&gt; the parentheses of method calls.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Here are some results for the importer; we&#39;re still tuning some of the<br>&gt;&gt;&gt;&gt; heuristics but overall we feel very good about the preposition<br>&gt;&gt;&gt;&gt; placement:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://github.com/apple/swift-3-api-guidelines-review/commit/da7e512cf75688e6da148dd2a8b27ae9efcb8821?diff=split<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Note that this is not final wording, but here are the guidelines we&#39;re<br>&gt;&gt;&gt;&gt; working with for first argument labels:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; A. Try to form a grammatical phrase including the first argument and<br>&gt;&gt;&gt;&gt;   describing the primary semantics at the call site.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I assume that A is intended to cover:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; a.addObserver(b) // yes<br>&gt;&gt;&gt; a.add(observer: b) // no<br>&gt;&gt; <br>&gt;&gt; I don&#39;t know what you mean by &quot;cover.&quot; It isn&#39;t intended to assign the<br>&gt;&gt; &quot;yes/no&quot; decision to those; they both form (the same) grammatical phrase<br>&gt;&gt; at the call site.  The choice between those two is governed by B, below.<br>&gt;<br>&gt; By cover I meant assign the &quot;yes/no&quot; decision. So because the first<br>&gt; argument is part of the primary semantics, it doesn&#39;t get an argument<br>&gt; label (per B.1) and the word observer needs to be in the base name so<br>&gt; as not to change the semantic meaning.<br></p><p>Correct.<br></p><p>&gt;&gt;&gt; I believe I can read this behavior into A by inferring &quot;a grammatical<br>&gt;&gt;&gt; phrase including [the base name and] the first argument&quot; but I want to make<br>&gt;&gt;&gt; sure this is the intent.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; B. The first argument gets a label when and only when:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   1. It does not form part of a grammatical phrase describing the<br>&gt;&gt;&gt;&gt;      primary semantics.  For example,<br>&gt;&gt;&gt;&gt;      ```<br>&gt;&gt;&gt;&gt;      x.dismiss(animated: y)<br>&gt;&gt;&gt;&gt;      ```<br>&gt;&gt;&gt;&gt;      [more examples needed]<br>&gt;&gt;&gt;&gt;      Note that parameters with defaults never describe the primary<br>&gt;&gt;&gt;&gt;      semantics. so are always labeled.<br>&gt;&gt;&gt;&gt;      ```<br>&gt;&gt;&gt;&gt;      func invert(options options: SomeOptionSet = []) // yes<br>&gt;&gt;&gt;&gt;      func invert(_ options: SomeOptionSet = [])       // no<br>&gt;&gt;&gt;&gt;      ```<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   2. The method is a factory method; such calls should mirror<br>&gt;&gt;&gt;&gt;      initializers, with no preposition.  For example,<br>&gt;&gt;&gt;&gt;      ```<br>&gt;&gt;&gt;&gt;      let x = UIColor(red: r, green: g, blue: b)<br>&gt;&gt;&gt;&gt;      let y = monitor.makeColor(red: r, green: g, blue: b)<br>&gt;&gt;&gt;&gt;      ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If rule B.2 didn&#39;t exist<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let y = monitor.makeColor(red: r, green: g, blue: b)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; would still have the first argument labeled by B.1 wouldn&#39;t it?<br>&gt;&gt; <br>&gt;&gt; Yes, but you could have done this grammatically, as <br>&gt;&gt; <br>&gt;&gt;     let y = monitor.makeColorHavingRed(r, green: g, blue: b)<br>&gt;&gt; <br>&gt;&gt; That&#39;s what B2 is designed to prevent.<br>&gt;&gt; <br>&gt;&gt;&gt; (Though without this rule, the guidelines wouldn&#39;t be clear on whether<br>&gt;&gt;&gt; or not to include prepositions in the argument labels.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   3. It is part of a prepositional phrase<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     a. The label normally starts with the preposition.<br>&gt;&gt;&gt;&gt;        For example,<br>&gt;&gt;&gt;&gt;        ```<br>&gt;&gt;&gt;&gt;        x.move(from: a, to: b)<br>&gt;&gt;&gt;&gt;        x.loadValues(forKeys: [&quot;fox&quot;, &quot;box&quot;, &quot;lox&quot;])<br>&gt;&gt;&gt;&gt;        ```<br>&gt;&gt;&gt;&gt;     b. ...unless the preposition would break a very tight association<br>&gt;&gt;&gt;&gt;        between parameters:<br>&gt;&gt;&gt;&gt;        ```<br>&gt;&gt;&gt;&gt;        x.moveTo(x: a, y: b)<br>&gt;&gt;&gt;&gt;        ```<br>&gt;&gt;&gt;&gt;        [encourage grouping parameters into higher-level concepts,<br>&gt;&gt;&gt;&gt;        e.g. Point, in these cases]<br>&gt;&gt;&gt; This seems clear and straightforward to apply. The only place where<br>&gt;&gt;&gt; this isn&#39;t totally clear is when there are multiple prepositions (as<br>&gt;&gt;&gt; highlighted in Jacob&#39;s response),<br>&gt;&gt; <br>&gt;&gt; Multiple prepositions before the first argument?<br>&gt;<br>&gt; Yes, before and including the first argument label. For example (from Jacob&#39;s response):<br>&gt;<br>&gt; comparePositionInDecodeOrderWithPosition(of cursor: AVSampleCursor) -&gt; ComparisonResult<br>&gt;<br>&gt; Jacob suggests spelling it:<br>&gt;<br>&gt; comparePositionInDecodeOrder(withPositionOf cursor: AVSampleCursor) -&gt; ComparisonResult<br>&gt;<br>&gt; I agree that Jacob&#39;s spelling is better, but not enough better to<br>&gt; justify additional guidelines about prepositions.<br></p><p>I think I agree that it&#39;s better.  I think I also agree that  we could<br>avoid complication in the guidelines by leaving the<br>multiple-prepositions case unspecified and letting the judgement of API<br>designers come up with the right answer.  However, we *are* looking into<br>the question of whether &quot;Of&quot; should get special treatment.  It seems<br>like it may *always* be worse to put the parenthesis before &quot;of,&quot; even<br>when it&#39;s the only preposition:<br></p><p>     x.appendContents(of: y)<br>     x.appendContentsOf(y)   // I like this one a *lot* better<br></p><p>&gt;&gt;&gt; but I think B.3 provides the right level of guidance... much more<br>&gt;&gt;&gt; detail will start being too many guidelines and special cases.<br>&gt;&gt; <br>&gt;&gt; Thanks!<br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
