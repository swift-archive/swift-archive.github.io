<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8809800aec2460f291384b794d7e6f8f?s=50"></div><header><strong>C API returns null but optional thinks it&#39;s set anyway</strong> from <string>Rick Mann</string> &lt;rmann at latencyzero.com&gt;<p>July  1, 2016 at 12:00:00am</p></header><div class="content"><p>I have some Swift code (in Xcode 7.3) that&#39;s calling a C function in the GDAL library. It&#39;s declared like this:<br></p><p>typedef void *GDALDatasetH;<br>GDALDatasetH CPL_DLL CPL_STDCALL<br>GDALOpen( const char *pszFilename, GDALAccess eAccess ) CPL_WARN_UNUSED_RESULT;<br></p><p>I&#39;m calling it with code like this:<br></p><p>class<br>MyClass<br>{<br>    func foo()<br>    {<br>        self.dataset = GDALOpen(path, GA_ReadOnly)<br>    }<br></p><p>    var dataset: GDALDatasetH?<br>}<br></p><p>But later code<br></p><p>    if let ds = self.dataset<br>    {<br>        print(&quot;dataset: \(ds)&quot;)<br>    }<br></p><p>outputs this to the console:<br></p><p>    dataset: 0x0000000000000000<br></p><p>This seems very broken.<br></p><p>-- <br>Rick Mann<br>rmann at latencyzero.com<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0f0154768aeec561194e651b0bca02d9?s=50"></div><header><strong>C API returns null but optional thinks it&#39;s set anyway</strong> from <string>Dan Loewenherz</string> &lt;dan at lionheartsw.com&gt;<p>July  1, 2016 at 07:00:00am</p></header><div class="content"><p>What’s the Swift type signature on GDALOpen? My guess is that it’s<br>returning a UnsafePointer&lt;Void&gt; or UnsafeMutablePointer&lt;Void&gt; type. Swift<br>doesn’t currently handle nullability for C pointers (hence the “Unsafe”<br>prefix). You’ll need to check the value at the pointer’s location manually.<br></p><p>Dan<br></p><p>On Fri, Jul 1, 2016 at 2:59 AM, Rick Mann via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; I have some Swift code (in Xcode 7.3) that&#39;s calling a C function in the<br>&gt; GDAL library. It&#39;s declared like this:<br>&gt;<br>&gt; typedef void *GDALDatasetH;<br>&gt; GDALDatasetH CPL_DLL CPL_STDCALL<br>&gt; GDALOpen( const char *pszFilename, GDALAccess eAccess )<br>&gt; CPL_WARN_UNUSED_RESULT;<br>&gt;<br>&gt; I&#39;m calling it with code like this:<br>&gt;<br>&gt; class<br>&gt; MyClass<br>&gt; {<br>&gt;     func foo()<br>&gt;     {<br>&gt;         self.dataset = GDALOpen(path, GA_ReadOnly)<br>&gt;     }<br>&gt;<br>&gt;     var dataset: GDALDatasetH?<br>&gt; }<br>&gt;<br>&gt; But later code<br>&gt;<br>&gt;     if let ds = self.dataset<br>&gt;     {<br>&gt;         print(&quot;dataset: \(ds)&quot;)<br>&gt;     }<br>&gt;<br>&gt; outputs this to the console:<br>&gt;<br>&gt;     dataset: 0x0000000000000000<br>&gt;<br>&gt; This seems very broken.<br>&gt;<br>&gt; --<br>&gt; Rick Mann<br>&gt; rmann at latencyzero.com<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160701/56072b01/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8809800aec2460f291384b794d7e6f8f?s=50"></div><header><strong>C API returns null but optional thinks it&#39;s set anyway</strong> from <string>Rick Mann</string> &lt;rmann at latencyzero.com&gt;<p>July  1, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jul 1, 2016, at 05:42 , Dan Loewenherz &lt;dan at lionheartsw.com&gt; wrote:<br>&gt; <br>&gt; What’s the Swift type signature on GDALOpen? My guess is that it’s returning a UnsafePointer&lt;Void&gt; or UnsafeMutablePointer&lt;Void&gt; type. Swift doesn’t currently handle nullability for C pointers (hence the “Unsafe” prefix). You’ll need to check the value at the pointer’s location manually.<br></p><p>It looks like this:<br></p><p>typealias GDALDatasetH = UnsafeMutablePointer&lt;Void&gt;<br>@warn_unused_result func GDALOpen(pszFilename: UnsafePointer&lt;Int8&gt;, _ eAccess: GDALAccess) -&gt; GDALDatasetH<br></p><p>Thanks for the clarification. It sure seems like Swift could easily check for Unsafe Pointers with value == 0.<br></p><p>&gt; <br>&gt; Dan<br>&gt; <br>&gt; On Fri, Jul 1, 2016 at 2:59 AM, Rick Mann via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; I have some Swift code (in Xcode 7.3) that&#39;s calling a C function in the GDAL library. It&#39;s declared like this:<br>&gt; <br>&gt; typedef void *GDALDatasetH;<br>&gt; GDALDatasetH CPL_DLL CPL_STDCALL<br>&gt; GDALOpen( const char *pszFilename, GDALAccess eAccess ) CPL_WARN_UNUSED_RESULT;<br>&gt; <br>&gt; I&#39;m calling it with code like this:<br>&gt; <br>&gt; class<br>&gt; MyClass<br>&gt; {<br>&gt;     func foo()<br>&gt;     {<br>&gt;         self.dataset = GDALOpen(path, GA_ReadOnly)<br>&gt;     }<br>&gt; <br>&gt;     var dataset: GDALDatasetH?<br>&gt; }<br>&gt; <br>&gt; But later code<br>&gt; <br>&gt;     if let ds = self.dataset<br>&gt;     {<br>&gt;         print(&quot;dataset: \(ds)&quot;)<br>&gt;     }<br>&gt; <br>&gt; outputs this to the console:<br>&gt; <br>&gt;     dataset: 0x0000000000000000<br>&gt; <br>&gt; This seems very broken.<br>&gt; <br>&gt; --<br>&gt; Rick Mann<br>&gt; rmann at latencyzero.com<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p><br>-- <br>Rick Mann<br>rmann at latencyzero.com<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>C API returns null but optional thinks it&#39;s set anyway</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>July  1, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On Jul 1, 2016, at 1:55 PM, Rick Mann via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; typealias GDALDatasetH = UnsafeMutablePointer&lt;Void&gt;<br>&gt; @warn_unused_result func GDALOpen(pszFilename: UnsafePointer&lt;Int8&gt;, _ eAccess: GDALAccess) -&gt; GDALDatasetH<br>&gt; <br>&gt; Thanks for the clarification. It sure seems like Swift could easily check for Unsafe Pointers with value == 0.<br></p><p>In Swift 2, pointers are permitted to be `nil` even if they&#39;re not `Optional`. Swift 3 changes this, and so this parameter would either return `GDALDatasetH?` or, if it hadn&#39;t been audited yet, `GDALDatasetH!`.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
