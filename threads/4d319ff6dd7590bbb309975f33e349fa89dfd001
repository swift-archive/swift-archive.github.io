<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fbb2eb7db6aecac77ec563869540a874?s=50"></div><header><strong>Support for the Swift calling convention in lldb</strong> from <string>Arnold</string> &lt;aschwaighofer at apple.com&gt;<p>October 13, 2016 at 12:00:00pm</p></header><div class="content"><p>Hi LLDB team,<br></p><p>as part of the ABI work for this year we would like to adopt the swift calling convention.<br></p><p>I am working on the swift/llvm side of this.<br></p><p>&lt;rdar://problem/19978563&gt; Adopt the new Swift calling convention<br></p><p>The swift calling convention “swiftcc” together with the “swifterror” and “swiftself” attribute will change how many registers this calling convention will use for passing arguments and returning values. Furthermore, the “swifterror” and “swiftself” attribute will cause llvm to put the parameter marked with this attribute into a specific register at the call side.<br></p><p>The swift compiler will use this convention for native swift functions. We have to be able to call native swift functions from the runtime so there is also support in clang to define/declare functions with this calling convention in C/C++.<br></p><p>This might have implications on the debugger.<br></p><p>My current plan is to finish the swift/llvm side of this work in the next couple weeks. There is a prototype at https://github.com/aschwaighofer/swift/tree/native_calling_convention_wip that can be tried out today.<br></p><p>There are two radars that track work related to lldb and dwarf support:<br></p><p>&lt;rdar://problem/24489517&gt; DWARF support for the new Swift calling convention<br>&lt;rdar://problem/25471028&gt; LLDB support for new Swift calling convention<br></p><p><br>Best,<br>Arnold<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d7a1a861cc623f3b4616902e71b9ec40?s=50"></div><header><strong>Support for the Swift calling convention in lldb</strong> from <string>Todd Fiala</string> &lt;tfiala at apple.com&gt;<p>October 13, 2016 at 12:00:00pm</p></header><div class="content"><p>Hi Arnold!<br></p><p>Thanks for the heads up.  Comments below.<br></p><p>&gt; On Oct 13, 2016, at 12:32 PM, Arnold Schwaighofer via swift-lldb-dev &lt;swift-lldb-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi LLDB team,<br>&gt; <br>&gt; as part of the ABI work for this year we would like to adopt the swift calling convention.<br>&gt; <br>&gt; I am working on the swift/llvm side of this.<br>&gt; <br>&gt; &lt;rdar://problem/19978563&gt; Adopt the new Swift calling convention<br>&gt; <br>&gt; The swift calling convention “swiftcc” together with the “swifterror” and “swiftself” attribute will change how many registers this calling convention will use for passing arguments and returning values. Furthermore, the “swifterror” and “swiftself” attribute will cause llvm to put the parameter marked with this attribute into a specific register at the call side.<br>&gt; <br>&gt; The swift compiler will use this convention for native swift functions. We have to be able to call native swift functions from the runtime so there is also support in clang to define/declare functions with this calling convention in C/C++.<br></p><p>With Swift, we have a convention that we require LLDB and Swift versions to be identical in order to debug Swift code.  In the case of C/C++ code, we have no such lock-step requirements.  How would we identify C/C++ code that was using this calling convention?<br></p><p>&gt; <br>&gt; This might have implications on the debugger.<br>&gt; <br>&gt; My current plan is to finish the swift/llvm side of this work in the next couple weeks. There is a prototype at https://github.com/aschwaighofer/swift/tree/native_calling_convention_wip that can be tried out today.<br>&gt; <br>&gt; There are two radars that track work related to lldb and dwarf support:<br>&gt; <br>&gt; &lt;rdar://problem/24489517&gt; DWARF support for the new Swift calling convention<br>&gt; &lt;rdar://problem/25471028&gt; LLDB support for new Swift calling convention<br>&gt; <br>&gt; <br>&gt; Best,<br>&gt; Arnold<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-lldb-dev mailing list<br>&gt; swift-lldb-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-lldb-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fbb2eb7db6aecac77ec563869540a874?s=50"></div><header><strong>Support for the Swift calling convention in lldb</strong> from <string>Arnold</string> &lt;aschwaighofer at apple.com&gt;<p>October 13, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Oct 13, 2016, at 12:47 PM, Todd Fiala &lt;tfiala at apple.com&gt; wrote:<br>&gt; <br>&gt; e identify C/C++ code that was using this calling convention?<br></p><p>I think, llvm would have to mark such functions with a DWARF entry?<br></p><p>I don’t know how much DWARF info generated by a clang that supports swiftcc would shield an older lldb from having to know about that the function call was swiftcc.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09d425d65431edfdb8ce3bbb2f2e2bf0?s=50"></div><header><strong>Support for the Swift calling convention in lldb</strong> from <string>Adrian Prantl</string> &lt;aprantl at apple.com&gt;<p>October 13, 2016 at 01:00:00pm</p></header><div class="content"><p>My understanding was that once Swift switches to the new calling convention, every function in the Swift namespace (^_T.*) would implicitly use the Swift calling convention. If this assertion should for some reason not be true, we will have to decorate the functions in DWARF with a calling convention attribute.<br></p><p>-- adrian<br>&gt; On Oct 13, 2016, at 1:06 PM, Arnold Schwaighofer &lt;aschwaighofer at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Oct 13, 2016, at 12:47 PM, Todd Fiala &lt;tfiala at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; e identify C/C++ code that was using this calling convention?<br>&gt; <br>&gt; I think, llvm would have to mark such functions with a DWARF entry?<br>&gt; <br>&gt; I don’t know how much DWARF info generated by a clang that supports swiftcc would shield an older lldb from having to know about that the function call was swiftcc.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fbb2eb7db6aecac77ec563869540a874?s=50"></div><header><strong>Support for the Swift calling convention in lldb</strong> from <string>Arnold</string> &lt;aschwaighofer at apple.com&gt;<p>October 14, 2016 at 10:00:00am</p></header><div class="content"><p>No, this is not the case. Objective-C method thunks use the _T prefix and follow the c calling convention.<br> <br>&gt; On Oct 13, 2016, at 1:10 PM, Adrian Prantl &lt;aprantl at apple.com&gt; wrote:<br>&gt; <br>&gt; My understanding was that once Swift switches to the new calling convention, every function in the Swift namespace (^_T.*) would implicitly use the Swift calling convention. If this assertion should for some reason not be true, we will have to decorate the functions in DWARF with a calling convention attribute.<br>&gt; <br>&gt; -- adrian<br>&gt;&gt; On Oct 13, 2016, at 1:06 PM, Arnold Schwaighofer &lt;aschwaighofer at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 13, 2016, at 12:47 PM, Todd Fiala &lt;tfiala at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; e identify C/C++ code that was using this calling convention?<br>&gt;&gt; <br>&gt;&gt; I think, llvm would have to mark such functions with a DWARF entry?<br>&gt;&gt; <br>&gt;&gt; I don’t know how much DWARF info generated by a clang that supports swiftcc would shield an older lldb from having to know about that the function call was swiftcc.<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09d425d65431edfdb8ce3bbb2f2e2bf0?s=50"></div><header><strong>Support for the Swift calling convention in lldb</strong> from <string>Adrian Prantl</string> &lt;aprantl at apple.com&gt;<p>October 14, 2016 at 10:00:00am</p></header><div class="content"><p>Could they be safely identified by their mangled name? Do they have a unique prefix?<br></p><p>-- adrian<br>&gt; On Oct 14, 2016, at 10:14 AM, Arnold Schwaighofer &lt;aschwaighofer at apple.com&gt; wrote:<br>&gt; <br>&gt; No, this is not the case. Objective-C method thunks use the _T prefix and follow the c calling convention.<br>&gt; <br>&gt;&gt; On Oct 13, 2016, at 1:10 PM, Adrian Prantl &lt;aprantl at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; My understanding was that once Swift switches to the new calling convention, every function in the Swift namespace (^_T.*) would implicitly use the Swift calling convention. If this assertion should for some reason not be true, we will have to decorate the functions in DWARF with a calling convention attribute.<br>&gt;&gt; <br>&gt;&gt; -- adrian<br>&gt;&gt;&gt; On Oct 13, 2016, at 1:06 PM, Arnold Schwaighofer &lt;aschwaighofer at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Oct 13, 2016, at 12:47 PM, Todd Fiala &lt;tfiala at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; e identify C/C++ code that was using this calling convention?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think, llvm would have to mark such functions with a DWARF entry?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don’t know how much DWARF info generated by a clang that supports swiftcc would shield an older lldb from having to know about that the function call was swiftcc.<br>&gt;&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8dfc6932943f38e7a7de48be3194f13c?s=50"></div><header><strong>Support for the Swift calling convention in lldb</strong> from <string>Michael Ilseman</string> &lt;milseman at apple.com&gt;<p>October 14, 2016 at 11:00:00am</p></header><div class="content"><p>Conventions are part of the mangling, as least as described in:<br></p><p>https://github.com/apple/swift/blob/master/docs/ABI.rst#mangling<br></p><p>We can also adapt the mangling if need be.<br></p><p><br>&gt; On Oct 14, 2016, at 10:16 AM, Adrian Prantl via swift-lldb-dev &lt;swift-lldb-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Could they be safely identified by their mangled name? Do they have a unique prefix?<br>&gt; <br>&gt; -- adrian<br>&gt;&gt; On Oct 14, 2016, at 10:14 AM, Arnold Schwaighofer &lt;aschwaighofer at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; No, this is not the case. Objective-C method thunks use the _T prefix and follow the c calling convention.<br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 13, 2016, at 1:10 PM, Adrian Prantl &lt;aprantl at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My understanding was that once Swift switches to the new calling convention, every function in the Swift namespace (^_T.*) would implicitly use the Swift calling convention. If this assertion should for some reason not be true, we will have to decorate the functions in DWARF with a calling convention attribute.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- adrian<br>&gt;&gt;&gt;&gt; On Oct 13, 2016, at 1:06 PM, Arnold Schwaighofer &lt;aschwaighofer at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Oct 13, 2016, at 12:47 PM, Todd Fiala &lt;tfiala at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; e identify C/C++ code that was using this calling convention?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think, llvm would have to mark such functions with a DWARF entry?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don’t know how much DWARF info generated by a clang that supports swiftcc would shield an older lldb from having to know about that the function call was swiftcc.<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-lldb-dev mailing list<br>&gt; swift-lldb-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-lldb-dev<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/52cd4e8dbbba27ff1ea5fa122af8bd56?s=50"></div><header><strong>Support for the Swift calling convention in lldb</strong> from <string>Jim Ingham</string> &lt;jingham at apple.com&gt;<p>October 13, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Oct 13, 2016, at 12:47 PM, Todd Fiala via swift-lldb-dev &lt;swift-lldb-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Arnold!<br>&gt; <br>&gt; Thanks for the heads up.  Comments below.<br>&gt; <br>&gt;&gt; On Oct 13, 2016, at 12:32 PM, Arnold Schwaighofer via swift-lldb-dev &lt;swift-lldb-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi LLDB team,<br>&gt;&gt; <br>&gt;&gt; as part of the ABI work for this year we would like to adopt the swift calling convention.<br>&gt;&gt; <br>&gt;&gt; I am working on the swift/llvm side of this.<br>&gt;&gt; <br>&gt;&gt; &lt;rdar://problem/19978563&gt; Adopt the new Swift calling convention<br>&gt;&gt; <br>&gt;&gt; The swift calling convention “swiftcc” together with the “swifterror” and “swiftself” attribute will change how many registers this calling convention will use for passing arguments and returning values. Furthermore, the “swifterror” and “swiftself” attribute will cause llvm to put the parameter marked with this attribute into a specific register at the call side.<br>&gt;&gt; <br>&gt;&gt; The swift compiler will use this convention for native swift functions. We have to be able to call native swift functions from the runtime so there is also support in clang to define/declare functions with this calling convention in C/C++.<br>&gt; <br>&gt; With Swift, we have a convention that we require LLDB and Swift versions to be identical in order to debug Swift code.  In the case of C/C++ code, we have no such lock-step requirements.  How would we identify C/C++ code that was using this calling convention?<br></p><p>The calling convention would have to be described in the DWARF for the function, and moved from there into the clang function decl&#39;s we make up from the debug info.  Right now, DWARF doesn&#39;t have much support for actually describing calling conventions, it just has an integer attribute with values: &quot;normal&quot;, &quot;dunno&quot;, &quot;some weird Fortran thing&quot; and vendor specific integer values above this.  Presumably there would be a clang API like:<br></p><p>markUpDeclForCallingConvention(int vendor_value)<br></p><p>and lldb&#39;s that know to look up the calling convention attribute would pass the vendor tag to this function, whereupon clang would mark up the decl such that when it went to compile the function for us, it would use the right convention.<br></p><p>Older lldb&#39;s wouldn&#39;t do this and the expressions would crash.<br></p><p>If the lldb/clang combo you were using supported this API, but didn&#39;t support a particular vendor tag, presumably this function would return an error, and we would mark the function as uncallable, just as we would if the CC attribute were set to &quot;dunno&quot;.  Note, we don&#39;t do the latter, and I don&#39;t think clang emits this attribute, does it?<br></p><p>Jim<br></p><p>&gt; <br>&gt;&gt; <br>&gt;&gt; This might have implications on the debugger.<br>&gt;&gt; <br>&gt;&gt; My current plan is to finish the swift/llvm side of this work in the next couple weeks. There is a prototype at https://github.com/aschwaighofer/swift/tree/native_calling_convention_wip that can be tried out today.<br>&gt;&gt; <br>&gt;&gt; There are two radars that track work related to lldb and dwarf support:<br>&gt;&gt; <br>&gt;&gt; &lt;rdar://problem/24489517&gt; DWARF support for the new Swift calling convention<br>&gt;&gt; &lt;rdar://problem/25471028&gt; LLDB support for new Swift calling convention<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Best,<br>&gt;&gt; Arnold<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-lldb-dev mailing list<br>&gt;&gt; swift-lldb-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-lldb-dev<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-lldb-dev mailing list<br>&gt; swift-lldb-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-lldb-dev<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
