<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/72853d2b57e37aab89afe61af4f74c62?s=50"></div><header><strong>Limit checking syntax</strong> from <string>Maury Markowitz</string> &lt;maury.markowitz at gmail.com&gt;<p>April  7, 2016 at 04:00:00pm</p></header><div class="content"><p>I originally posted this in swift-users, and it garnered some level of positive reaction, so I thought I would try it again here.<br></p><p>We all constantly write code that checks a value against arbitrary ranges - subsets of an array, characters within a string, etc. This is a common example:<br></p><p>if myVal &gt;= oneLimit &amp;&amp; myVar &lt;= twoLimit { // something }<br></p><p>Swift introduced a very nice range system that is used to represent these sorts of spans-within-limits, which greatly clarifies common code like this...<br></p><p>for c in cards[0..&lt;10] { // something }<br></p><p>My proposal is that this same &quot;in&quot; syntax be allowed in an if statement. Thus the limit check above would become:<br></p><p>if myVal in [oneLimit...twoLimit] { // something }<br></p><p>The code is somewhat more terse, which is a common goal in Swift. It also more clearly states what the purpose of the code - this is a range check, not some arbitrary mathematical comparisons. It also has the advantage that if myVal is expensive, a func for instance, it only gets evaluated once. Effectively it replaces:<br></p><p>let myVal = someExpensiveFunction()<br>if myVal &gt;= oneLimit &amp;&amp; myVar &lt;= twoLimit...<br></p><p>with a single line of code.<br></p><p>I note that there are ways to accomplish this already in Swift 2, but I find them unsatisfying, and somewhat unnatural. They are definitely not &quot;discoverable&quot;. which I believe the in statement would be. The current solution is the pattern-matching if, like this:<br></p><p>if case 0...100 = someInteger<br></p><p>or<br></p><p>if 0...100 ~= someInteger<br></p><p>I see two problems with this approach. Once is that the &quot;if case&quot; structure strikes me somewhat odd on it&#39;s own, but more specifically I think everyone finds the syntax &quot;backward&quot;, we normally code the tested item on the left and limits on the right, and this reversal seems unnatural to me (in spite of it being identical in code terms). But I think the real issue is that both examples require special syntax that is very different than other languages or even most constructs in Swift itself, whereas in is already used in exactly the fashion I propose.<br></p><p>I don&#39;t believe that re-using &quot;in&quot; would greatly burden the language, while offering the same behaviour as the pattern-matching-if in a much more natural and already-used syntax.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8ae34e6aaf28c0e1fe929f36897d107e?s=50"></div><header><strong>Limit checking syntax</strong> from <string>Harlan Haskins</string> &lt;harlan at harlanhaskins.com&gt;<p>April  7, 2016 at 06:00:00pm</p></header><div class="content"><p>Iâ€™ve found that .contains works well for all my uses.<br></p><p>(0..&lt;100).contains(x)<br></p><p>&gt; On Apr 7, 2016, at 1:17 PM, Maury Markowitz via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I originally posted this in swift-users, and it garnered some level of positive reaction, so I thought I would try it again here.<br>&gt; <br>&gt; We all constantly write code that checks a value against arbitrary ranges - subsets of an array, characters within a string, etc. This is a common example:<br>&gt; <br>&gt; if myVal &gt;= oneLimit &amp;&amp; myVar &lt;= twoLimit { // something }<br>&gt; <br>&gt; Swift introduced a very nice range system that is used to represent these sorts of spans-within-limits, which greatly clarifies common code like this...<br>&gt; <br>&gt; for c in cards[0..&lt;10] { // something }<br>&gt; <br>&gt; My proposal is that this same &quot;in&quot; syntax be allowed in an if statement. Thus the limit check above would become:<br>&gt; <br>&gt; if myVal in [oneLimit...twoLimit] { // something }<br>&gt; <br>&gt; The code is somewhat more terse, which is a common goal in Swift. It also more clearly states what the purpose of the code - this is a range check, not some arbitrary mathematical comparisons. It also has the advantage that if myVal is expensive, a func for instance, it only gets evaluated once. Effectively it replaces:<br>&gt; <br>&gt; let myVal = someExpensiveFunction()<br>&gt; if myVal &gt;= oneLimit &amp;&amp; myVar &lt;= twoLimit...<br>&gt; <br>&gt; with a single line of code.<br>&gt; <br>&gt; I note that there are ways to accomplish this already in Swift 2, but I find them unsatisfying, and somewhat unnatural. They are definitely not &quot;discoverable&quot;. which I believe the in statement would be. The current solution is the pattern-matching if, like this:<br>&gt; <br>&gt; if case 0...100 = someInteger<br>&gt; <br>&gt; or<br>&gt; <br>&gt; if 0...100 ~= someInteger<br>&gt; <br>&gt; I see two problems with this approach. Once is that the &quot;if case&quot; structure strikes me somewhat odd on it&#39;s own, but more specifically I think everyone finds the syntax &quot;backward&quot;, we normally code the tested item on the left and limits on the right, and this reversal seems unnatural to me (in spite of it being identical in code terms). But I think the real issue is that both examples require special syntax that is very different than other languages or even most constructs in Swift itself, whereas in is already used in exactly the fashion I propose.<br>&gt; <br>&gt; I don&#39;t believe that re-using &quot;in&quot; would greatly burden the language, while offering the same behaviour as the pattern-matching-if in a much more natural and already-used syntax.<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160407/d4996c75/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
