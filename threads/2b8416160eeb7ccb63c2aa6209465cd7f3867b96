<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Idea] &quot;Add needless words&quot; to Objective-C method names</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>February 23, 2016 at 09:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>One interesting aspect of the Swift API guidelines is that the obvious mapping from Swift method names to Objective-C selectors produces poor method names for Objective-C code. For example, this<br></p><p>	func object(at index: Int) -&gt; AnyObject { /* … */ }<br></p><p>will produce the Objective-C selector “objectAt:”, which is not great for Objective-C, where one rarely has a preposition at the end of a selector piece.<br></p><p>This will, in general, be an issue because the naming guidelines for Swift and Objective-C differ so much. We could potentially improve those cases where we have an argument label that ends in a preposition (like this example) by appending the parameter name when we’re forming the selector. For the object(at:) method above, it would produce the selector “objectAtIndex:”.<br></p><p>We would probably want to strip a leading article (a/an/the) from the parameter name, so that:<br></p><p>	func conforms(to aProtocol: Protocol) -&gt; Bool { /* … */ }<br></p><p>ends up with the selector “conformsToProtocol:” (good) rather than “conformsToAProtocol:” (not so good).<br></p><p>The primary benefit to doing this is that we’ll produce slightly better Objective-C selectors in cases where we would be producing very bad ones (trailing prepositions are *rarely* used in Objective-C), so (potentially) fewer Swift methods will need to provide Objective-C method names explicitly via @objc(…).<br></p><p>The major downsides are that it is a breaking change for anyone using prepositions as argument labels now (and living with the poor Objective-C names) and that developers won’t be able to guess what Objective-C selector will be formed from a given Swift method without having read this message.<br></p><p>Thoughts?<br></p><p>	- Doug<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Idea] &quot;Add needless words&quot; to Objective-C method names</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 24, 2016 at 09:00:00am</p></header><div class="content"><p>I don’t think `objectAt:` or `conformsTo:` are that bad, even in Objective-C.<br></p><p>It’s not standard naming practice, perhaps, but I’m not sure it’s worth having *another* automatic translation/re-naming mechanism to optimize for Objective-C’s conventions. I’m sure there are cases now where translating good Swift names produces ObjC results you can’t live with — and that sucks because then you have to do @objc. But with an automatic translator like what you’re suggesting, maybe most methods will be somewhat more ObjC-like, but you’ll *still* have results you’ll have to correct with @objc. Perhaps even more of them.<br></p><p>&gt; The primary benefit to doing this is that we’ll produce slightly better Objective-C selectors in cases where we would be producing very bad ones (trailing prepositions are *rarely* used in Objective-C),<br></p><p>Rarely used, sure. Uncomfortable, yes. But again, I don’t see how “conformsTo:” or even “objectAt:&quot; is *very bad*.<br></p><p>— Radek<br></p><p>&gt; On 24 Feb 2016, at 06:25, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; One interesting aspect of the Swift API guidelines is that the obvious mapping from Swift method names to Objective-C selectors produces poor method names for Objective-C code. For example, this<br>&gt; <br>&gt; 	func object(at index: Int) -&gt; AnyObject { /* … */ }<br>&gt; <br>&gt; will produce the Objective-C selector “objectAt:”, which is not great for Objective-C, where one rarely has a preposition at the end of a selector piece.<br>&gt; <br>&gt; This will, in general, be an issue because the naming guidelines for Swift and Objective-C differ so much. We could potentially improve those cases where we have an argument label that ends in a preposition (like this example) by appending the parameter name when we’re forming the selector. For the object(at:) method above, it would produce the selector “objectAtIndex:”.<br>&gt; <br>&gt; We would probably want to strip a leading article (a/an/the) from the parameter name, so that:<br>&gt; <br>&gt; 	func conforms(to aProtocol: Protocol) -&gt; Bool { /* … */ }<br>&gt; <br>&gt; ends up with the selector “conformsToProtocol:” (good) rather than “conformsToAProtocol:” (not so good).<br>&gt; <br>&gt; The primary benefit to doing this is that we’ll produce slightly better Objective-C selectors in cases where we would be producing very bad ones (trailing prepositions are *rarely* used in Objective-C), so (potentially) fewer Swift methods will need to provide Objective-C method names explicitly via @objc(…).<br>&gt; <br>&gt; The major downsides are that it is a breaking change for anyone using prepositions as argument labels now (and living with the poor Objective-C names) and that developers won’t be able to guess what Objective-C selector will be formed from a given Swift method without having read this message.<br>&gt; <br>&gt; Thoughts?<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ece55ca3fe50dca9c70bcd914acb48a5?s=50"></div><header><strong>[Idea] &quot;Add needless words&quot; to Objective-C method names</strong> from <string>Matthew Judge</string> &lt;matthew.judge at gmail.com&gt;<p>February 24, 2016 at 05:00:00am</p></header><div class="content"><p>&gt; On Feb 24, 2016, at 03:31, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I don’t think `objectAt:` or `conformsTo:` are that bad, even in Objective-C.<br>&gt; <br>&gt; It’s not standard naming practice, perhaps, but I’m not sure it’s worth having *another* automatic translation/re-naming mechanism to optimize for Objective-C’s conventions.<br></p><p>I don&#39;t see this as *another* automatic translation so much as making the existing objc-&gt; Swift translation somewhat but-directional.<br></p><p>&gt; I’m sure there are cases now where translating good Swift names produces ObjC results you can’t live with — and that sucks because then you have to do @objc. But with an automatic translator like what you’re suggesting, maybe most methods will be somewhat more ObjC-like, but you’ll *still* have results you’ll have to correct with @objc. Perhaps even more of them.<br>&gt; <br>&gt;&gt; The primary benefit to doing this is that we’ll produce slightly better Objective-C selectors in cases where we would be producing very bad ones (trailing prepositions are *rarely* used in Objective-C),<br>&gt; <br>&gt; Rarely used, sure. Uncomfortable, yes. But again, I don’t see how “conformsTo:” or even “objectAt:&quot; is *very bad*.<br>&gt; <br>&gt; — Radek<br>&gt; <br>&gt;&gt; On 24 Feb 2016, at 06:25, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi all,<br>&gt;&gt; <br>&gt;&gt; One interesting aspect of the Swift API guidelines is that the obvious mapping from Swift method names to Objective-C selectors produces poor method names for Objective-C code. For example, this<br>&gt;&gt; <br>&gt;&gt;    func object(at index: Int) -&gt; AnyObject { /* … */ }<br>&gt;&gt; <br>&gt;&gt; will produce the Objective-C selector “objectAt:”, which is not great for Objective-C, where one rarely has a preposition at the end of a selector piece.<br>&gt;&gt; <br>&gt;&gt; This will, in general, be an issue because the naming guidelines for Swift and Objective-C differ so much. We could potentially improve those cases where we have an argument label that ends in a preposition (like this example) by appending the parameter name when we’re forming the selector. For the object(at:) method above, it would produce the selector “objectAtIndex:”.<br>&gt;&gt; <br>&gt;&gt; We would probably want to strip a leading article (a/an/the) from the parameter name, so that:<br>&gt;&gt; <br>&gt;&gt;    func conforms(to aProtocol: Protocol) -&gt; Bool { /* … */ }<br>&gt;&gt; <br>&gt;&gt; ends up with the selector “conformsToProtocol:” (good) rather than “conformsToAProtocol:” (not so good).<br>&gt;&gt; <br>&gt;&gt; The primary benefit to doing this is that we’ll produce slightly better Objective-C selectors in cases where we would be producing very bad ones (trailing prepositions are *rarely* used in Objective-C), so (potentially) fewer Swift methods will need to provide Objective-C method names explicitly via @objc(…).<br>&gt;&gt; <br>&gt;&gt; The major downsides are that it is a breaking change for anyone using prepositions as argument labels now (and living with the poor Objective-C names) and that developers won’t be able to guess what Objective-C selector will be formed from a given Swift method without having read this message.<br>&gt;&gt; <br>&gt;&gt; Thoughts?<br>&gt;&gt; <br>&gt;&gt;    - Doug<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>[Idea] &quot;Add needless words&quot; to Objective-C method names</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>February 24, 2016 at 11:00:00am</p></header><div class="content"><p>+1 to this. The rules are getting extremely complicated to keep straight already, adding more special cases doesn&#39;t help.<br></p><p>If the API name sucks, there&#39;s already a mechanism to change how it&#39;s exported to ObjC.<br></p><p>-David<br></p><p><br>&gt; On Feb 24, 2016, at 12:31 AM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I don’t think `objectAt:` or `conformsTo:` are that bad, even in Objective-C.<br>&gt; <br>&gt; It’s not standard naming practice, perhaps, but I’m not sure it’s worth having *another* automatic translation/re-naming mechanism to optimize for Objective-C’s conventions. I’m sure there are cases now where translating good Swift names produces ObjC results you can’t live with — and that sucks because then you have to do @objc. But with an automatic translator like what you’re suggesting, maybe most methods will be somewhat more ObjC-like, but you’ll *still* have results you’ll have to correct with @objc. Perhaps even more of them.<br>&gt; <br>&gt;&gt; The primary benefit to doing this is that we’ll produce slightly better Objective-C selectors in cases where we would be producing very bad ones (trailing prepositions are *rarely* used in Objective-C),<br>&gt; <br>&gt; Rarely used, sure. Uncomfortable, yes. But again, I don’t see how “conformsTo:” or even “objectAt:&quot; is *very bad*.<br>&gt; <br>&gt; — Radek<br>&gt; <br>&gt;&gt; On 24 Feb 2016, at 06:25, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi all,<br>&gt;&gt; <br>&gt;&gt; One interesting aspect of the Swift API guidelines is that the obvious mapping from Swift method names to Objective-C selectors produces poor method names for Objective-C code. For example, this<br>&gt;&gt; <br>&gt;&gt; 	func object(at index: Int) -&gt; AnyObject { /* … */ }<br>&gt;&gt; <br>&gt;&gt; will produce the Objective-C selector “objectAt:”, which is not great for Objective-C, where one rarely has a preposition at the end of a selector piece.<br>&gt;&gt; <br>&gt;&gt; This will, in general, be an issue because the naming guidelines for Swift and Objective-C differ so much. We could potentially improve those cases where we have an argument label that ends in a preposition (like this example) by appending the parameter name when we’re forming the selector. For the object(at:) method above, it would produce the selector “objectAtIndex:”.<br>&gt;&gt; <br>&gt;&gt; We would probably want to strip a leading article (a/an/the) from the parameter name, so that:<br>&gt;&gt; <br>&gt;&gt; 	func conforms(to aProtocol: Protocol) -&gt; Bool { /* … */ }<br>&gt;&gt; <br>&gt;&gt; ends up with the selector “conformsToProtocol:” (good) rather than “conformsToAProtocol:” (not so good).<br>&gt;&gt; <br>&gt;&gt; The primary benefit to doing this is that we’ll produce slightly better Objective-C selectors in cases where we would be producing very bad ones (trailing prepositions are *rarely* used in Objective-C), so (potentially) fewer Swift methods will need to provide Objective-C method names explicitly via @objc(…).<br>&gt;&gt; <br>&gt;&gt; The major downsides are that it is a breaking change for anyone using prepositions as argument labels now (and living with the poor Objective-C names) and that developers won’t be able to guess what Objective-C selector will be formed from a given Swift method without having read this message.<br>&gt;&gt; <br>&gt;&gt; Thoughts?<br>&gt;&gt; <br>&gt;&gt; 	- Doug<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
