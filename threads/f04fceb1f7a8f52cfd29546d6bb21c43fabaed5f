<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>When to use argument labels, part DEUX</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  9, 2016 at 01:00:00pm</p></header><div class="content"><p>on Tue Feb 09 2016, Charles Kissinger &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Feb 9, 2016, at 6:42 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Tue Feb 09 2016, Charles Kissinger &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;<br>&gt;&gt;&gt; Comments inline:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 7, 2016, at 9:54 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; on Sun Feb 07 2016, Charles Kissinger &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Looking over these guidelines again, I think I would be quite happy<br>&gt;&gt;&gt;&gt;&gt; with them given one very simple change to Rule 2:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; If the first argument is part of a prepositional phrase WITH MULTIPLE<br>&gt;&gt;&gt;&gt;&gt; OBJECTS, put the parenthesis immediately after the preposition.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This eliminates the need for:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; a.tracksHaving(mediaType: b)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; which I think is inferior to:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; a.tracksHavingMediaType(b)<br>&gt;&gt; <br>&gt;&gt; Why do you think it&#39;s inferior?<br>&gt;<br>&gt; 1) One gripe is that it is much harder to reliably search for<br>&gt; functions like this in code. You can do it in Xcode with<br>&gt; Find&gt;References, but if you are on a different platform, using<br>&gt; different tools or looking at an online repository, you can’t do it<br>&gt; without resorting to regular expressions. You need to find:<br>&gt;<br>&gt; a.tracksHaving(mediaType: b)<br>&gt; and:<br>&gt; a.tracksHaving( mediaType: b ) // deliberate or accidental space<br>&gt; and:<br>&gt; a.tracksHaving(<br>&gt;     mediaType: a)<br>&gt; and:<br>&gt; a.tracksHaving( // a comment<br>&gt;     mediaType: a)<br>&gt;<br>&gt; The regex search would have to match over line boundaries. Even in<br>&gt; Xcode, it isn’t novice-friendly because Find&gt;References is relatively<br>&gt; hidden.<br></p><p>A fair point.<br></p><p>&gt; (This whole problem arises of course only when there could be other<br>&gt; ‘tracksHaving()’ methods, like tracksHaving(composer:), etc. I expect<br>&gt; that you would have to generally assume that would be the case for<br>&gt; methods named this way).<br>&gt;<br>&gt; To be fair, you *can* miss occurrences of a.tracksHavingMediaType(b)<br>&gt; by using a simple text search with ‘.tracksHavingMediaType(‘ -- if<br>&gt; there is a space before the parenthesis -- but I’m not sure that has<br>&gt; ever happened to me. Putting a space before the paren in a function<br>&gt; call is a much less common coding style than space after the paren.<br></p><p>You will also fail to find methods with different later argument labels,<br>no matter which convention we choose here.  Searchability is a nice<br>feature, and I agree that it suffers somewhat when long base names are<br>split up.<br></p><p>&gt; 2) It splits in the middle of a phrase, the least intuitive place to<br>&gt; do so. It strikes at least some of us as quirky. As you say, this<br>&gt; (along with the other changes) makes some Cocoa programmers, your main<br>&gt; constituents, “wildly uncomfortable”, and it has the same effect on<br>&gt; me, coming from a mostly C++ background (though I have found the Cocoa<br>&gt; naming conventions to be pleasant to use over the years when writing<br>&gt; Obj-C).<br></p><p>FWIW, the latest direction<br>&lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/6342&gt; avoids<br>that by moving prepositions inside the parentheses.<br></p><p>&gt; 3) This way of treating prepositions and their objects is not<br>&gt; consistent with the way verbs and their objects are treated:<br>&gt;<br>&gt; a.tracksHaving(mediaType: b)<br>&gt; a.addSubView(b)<br></p><p>Under the latest:<br></p><p>  a.tracks(havingMediaType: b)<br>  a.addSubView(b)<br></p><p>That&#39;s still inconsistent if your expectation is that these two calls have the<br>same “shape.”  <br></p><p>There&#39;s significant consensus that the role of the thing being added is<br>a fundamental-enough part of the semantics that it should be visible in<br>the base name.<br></p><p>&gt; Or have I not been keeping up? Is there the intention of using:<br>&gt; a.add(subView: b)? <br></p><p>No such intention exists, to date.<br></p><p>&gt; (It would really be a nightmare to search a code base for one<br>&gt; particular version of an ‘add()’ method, out of what could be dozens<br>&gt; of different ‘add()’s.<br>&gt;<br>&gt; Assuming they are going to be treated differently, it won’t be<br>&gt; immediately obvious to anyone why this is without reading not just the<br>&gt; guidelines, but the rationale for the guidelines. How many programmers<br>&gt; won’t even recall what a prepositional phrase is?<br></p><p>Hopefully, copious examples and links to definitions of grammatical<br>terms (as I have used throughout the existing guidelines document) will<br>be enough to guide people in the right direction.<br></p><p>&gt; 4) For me, it reduces readability and “immediate understandability”<br>&gt; (admittedly subjective). It replaces a nice camelCase word boundary<br>&gt; and intact phrase with a parenthesis in the middle of the phrase<br>&gt; followed by a lowerCamelCase word. It doesn’t flow as nicely, possibly<br>&gt; because there isn’t any common precedent in other programming<br>&gt; languages for slicing things up this way.<br></p><p>Understood.  I think all of us agree about the oddness of splitting up<br>the phrase.  How does the latest idea (linked above) look to you?<br></p><p>&gt;<br>&gt;<br>&gt; —CK<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; The downside with the latter is that it doesn&#39;t scale up.  When you want<br>&gt;&gt;&gt;&gt; to add a second criterion, you can&#39;t just add a defaulted parameter; you<br>&gt;&gt;&gt;&gt; have to change the signature (breaking code) or add one or more<br>&gt;&gt;&gt;&gt; overloads (creating cognitive weight for users).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is this really an overriding concern though? I personally would not<br>&gt;&gt;&gt; choose to optimize for the occasional case of adding a defaulted<br>&gt;&gt;&gt; parameter at the cost of a general naming/labeling convention that we<br>&gt;&gt;&gt; both have expressed some discomfort with.<br>&gt;&gt; <br>&gt;&gt; It&#39;s not an *overriding* concern; it&#39;s one of many.  BTW, I don&#39;t<br>&gt;&gt; consider “some discomfort” on anyone&#39;s part to be an overriding concern<br>&gt;&gt; either.  Most of these changes make Cocoa traditionalists wildly<br>&gt;&gt; uncomfortable.  While I have compassion for that, the key thing is<br>&gt;&gt; understandability of Swift code into the future.  <br>&gt;&gt; <br>&gt;&gt;&gt;&gt; It&#39;s a (relatively speaking) minor issue, but IMO not glomming all that<br>&gt;&gt;&gt;&gt; description into the base name also results in code that&#39;s easier to<br>&gt;&gt;&gt;&gt; format in a balanced way, simply because there&#39;s a natural place to<br>&gt;&gt;&gt;&gt; break the line after the parenthesis.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I view this in a quite different way. Breaking a line after<br>&gt;&gt;&gt; &#39;a.tracksHaving(‘ leaves the reader in quite a bit of suspense! <br>&gt;&gt; <br>&gt;&gt; Suspense is good in these cases; it means the reader isn&#39;t going to stop<br>&gt;&gt; at the end of the line.  One should feel relief only when one has taken<br>&gt;&gt; in all the important parts of the call.<br>&gt;&gt; <br>&gt;&gt;&gt; It might be easier to format, but overall readability would suffer.<br>&gt;&gt; <br>&gt;&gt; I don&#39;t see how<br>&gt;&gt; <br>&gt;&gt;  a.long.line.ending.with.tracksHavingMediaType(<br>&gt;&gt;    mp3)<br>&gt;&gt; <br>&gt;&gt; is any more readable than<br>&gt;&gt; <br>&gt;&gt;  a.long.line.ending.with.tracksHaving(<br>&gt;&gt;    mediaType: mp3)<br>&gt;&gt; <br>&gt;&gt; to me, it&#39;s less readable.<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On the other hand, functions like:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; a.tracksWith(mediaType: b, composer: c)<br>&gt;&gt;&gt;&gt;&gt; a.moveTo(x: 22, y: 99)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; would remain as is, because there are multiple objects for the preposition.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This also neatly solves the ‘moveFrom(a to: b)’ problem. There are two<br>&gt;&gt;&gt;&gt;&gt; separate prepositional phrases involved, &#39;from a&#39; and &#39;to b&#39;, each<br>&gt;&gt;&gt;&gt;&gt; with a single object, so:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; move(from: a to: b)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; is, I believe, fully compatible with the guidelines.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don&#39;t see anything in the guidelines I&#39;ve proposed, even with your<br>&gt;&gt;&gt;&gt; modification, that would cause &quot;from&quot; to be placed inside the<br>&gt;&gt;&gt;&gt; parentheses.  The way I read it this case still falls right into B1,<br>&gt;&gt;&gt;&gt; resulting in &quot;moveFrom(a, to: b)”<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I must be interpreting B.1 differently than you intended. It appears<br>&gt;&gt;&gt; to me to be discussing the cases where first arguments *can* be<br>&gt;&gt;&gt; unlabeled. You seem to be implying here that it says that the first<br>&gt;&gt;&gt; argument *must* be unlabeled when it forms a part of a grammatical<br>&gt;&gt;&gt; phrase, otherwise move(from: a, to: b) would be fine. As I read the<br>&gt;&gt;&gt; guidelines, though, only B.2 (which I would modify) requires<br>&gt;&gt;&gt; moveFrom(a, to: b), because of the preposition. What am I not getting<br>&gt;&gt;&gt; here?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Maybe I was mistaken. I&#39;m working on new wording that allows &quot;from&quot; to<br>&gt;&gt; move inside the parens under the same guideline that results in argument<br>&gt;&gt; labels for all arguments when the method is a factory function.  I&#39;ll<br>&gt;&gt; let you know when that&#39;s ready.<br>&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; —CK<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Feb 5, 2016, at 1:32 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Given all the awesome feedback I&#39;ve gotten on this thread, I went back<br>&gt;&gt;&gt;&gt;&gt;&gt; to the drawing board and came up with something new; I think this one<br>&gt;&gt;&gt;&gt;&gt;&gt; works.  The previously-stated goals still apply:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; * describe when and where to use argument labels<br>&gt;&gt;&gt;&gt;&gt;&gt; * require labels in many of the cases people have asked for them<br>&gt;&gt;&gt;&gt;&gt;&gt; * are understandable by humans (this means relatively simple)<br>&gt;&gt;&gt;&gt;&gt;&gt; * preserve important semantics communicated by existing APIs.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Please keep in mind that it is a non-goal to capture considerations we<br>&gt;&gt;&gt;&gt;&gt;&gt; think have a bearing on good names (such as relatedness of parameters):<br>&gt;&gt;&gt;&gt;&gt;&gt; it&#39;s to create simple guidelines that have the right effect in nearly<br>&gt;&gt;&gt;&gt;&gt;&gt; all cases.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; A. When arguments can&#39;t be usefully distinguished from one another, none<br>&gt;&gt;&gt;&gt;&gt;&gt; should have argument labels, e.g. min(x,y), zip(x,y,z).  <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; B. Otherwise,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 1. At the call site, a first parameter that has no argument label must<br>&gt;&gt;&gt;&gt;&gt;&gt;   form part of a grammatical phrase that starts with the basename, less<br>&gt;&gt;&gt;&gt;&gt;&gt;   any trailing nouns.  <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;     print(x)<br>&gt;&gt;&gt;&gt;&gt;&gt;     a.contains(b)<br>&gt;&gt;&gt;&gt;&gt;&gt;     a.mergeWith(b)<br>&gt;&gt;&gt;&gt;&gt;&gt;     a.addGestureRecognizer(x)<br>&gt;&gt;&gt;&gt;&gt;&gt;          ^~~~~~~~~~~~~~~~~ trailing noun<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;   This phrase must have the correct semantic implications, so, e.g.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;     a.dismiss(b)           // no, unless a is really dismissing b<br>&gt;&gt;&gt;&gt;&gt;&gt;     a.dismissAnimated(b)   // no, not grammatical<br>&gt;&gt;&gt;&gt;&gt;&gt;     a.dismiss(animated: b) // yes, using a label<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 2. If the first argument is part of a prepositional phrase, put the<br>&gt;&gt;&gt;&gt;&gt;&gt;   parenthesis immediately after the preposition. <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;     a.encodeWith(b)<br>&gt;&gt;&gt;&gt;&gt;&gt;     a.moveFrom(b, to: c)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;   Thus, if words are required for any reason between the preposition<br>&gt;&gt;&gt;&gt;&gt;&gt;   and the first argument, they go into the first argument label.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;     a.tracksWith(mediaType: b, composer: c)<br>&gt;&gt;&gt;&gt;&gt;&gt;     a.moveTo(x: 22, y: 99)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Notes: <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; a. I would recommend prepositions other than &quot;with&quot; in nearly all<br>&gt;&gt;&gt;&gt;&gt;&gt; cases, but that&#39;s not the point of these rules.<br>&gt;&gt;&gt;&gt;&gt;&gt; b. I can understand the aesthetic appeal of<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  a.move(from: b, to: c)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; but I believe it is not a clear enough improvement to justify<br>&gt;&gt;&gt;&gt;&gt;&gt; additional complexity in the guidelines.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Questions:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 1. I&#39;m not expecting these guidelines to make everybody optimally happy,<br>&gt;&gt;&gt;&gt;&gt;&gt; all the time, but they shouldn&#39;t be harmful.  Are there any cases for<br>&gt;&gt;&gt;&gt;&gt;&gt; which they produce results you couldn&#39;t live with?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 2. Are there any cases where you&#39;d be confused about how to apply these<br>&gt;&gt;&gt;&gt;&gt;&gt; guidelines?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Thanks in advance for all your valuable input!<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; P.S. Doug is presently working on generating new importer results, based<br>&gt;&gt;&gt;&gt;&gt;&gt;   on these guidelines, for your perusal.  They should be ready soon.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
