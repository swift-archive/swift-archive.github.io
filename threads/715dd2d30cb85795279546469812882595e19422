<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0067: Enhanced Floating Point Protocols</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 29, 2016 at 02:00:00pm</p></header><div class="content"><p>on Tue Apr 26 2016, Tony Allevato &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On 2016-04-26 22:32:16 +0000, Dave Abrahams via swift-evolution said:<br>&gt;<br>&gt;&gt; The main reasons to route through a single generic operator<br>&gt;&gt; implementation are:<br>&gt;&gt;<br>&gt;&gt; * User experience; we want to cut down the number of overloads of any<br>&gt;&gt;   operator to a manageable set, in part because they live in the global<br>&gt;&gt;   namespace.  When you look at a list of functions in the global<br>&gt;&gt;   namespace, seeing fifty instances of `func +` is not helpful.<br>&gt;&gt;<br>&gt;&gt; * Type checker speed.  Having all of these overloads around has<br>&gt;&gt;   historically put a strain on the type checker and made compilation<br>&gt;&gt;   slow.  That may be less true today than it once was, though.<br>&gt;<br>&gt; These are both completely understandable concerns (especially the type<br>&gt; checker speed, since I&#39;ve hit the &quot;expression too complex&quot; problem in<br>&gt; a couple odd places myself). I&#39;m hoping though that we can converge on<br>&gt; a solution other than &quot;pollute the public interface of a type with<br>&gt; named methods that duplicate the operators, which are trampolines to<br>&gt; those methods&quot;, since I think that actually detracts from the user<br>&gt; experience of using that type.<br>&gt;<br>&gt; Would something like this be possible? Imagine protocols defined like this:<br>&gt;<br>&gt;    public protocol Equatable {<br>&gt;        static func == (lhs: Self, rhs: Self) -&gt; Self<br>&gt;    }<br>&gt;    public protocol FloatingPoint: Equatable {<br>&gt;        static func + (lhs: Self, rhs: Self) -&gt; Self<br>&gt;    }<br>&gt;<br>&gt; This would have the effect of automatically generating the following<br>&gt; generic trampoline global operators:<br>&gt;<br>&gt;    public func == &lt;T: Equatable&gt;(lhs: T, rhs: T) -&gt; T {<br>&gt;        return T.==(lhs, rhs)<br>&gt;    }<br>&gt;    public func + &lt;T: FloatingPoint&gt;(lhs: T, rhs: T) -&gt; T {<br>&gt;        return T.+(lhs, rhs)<br>&gt;    }<br>&gt;<br>&gt; Then, types that conform to FloatingPoint would define the method as<br>&gt; appropriate:<br>&gt;<br>&gt;    public struct Double: FloatingPoint {<br>&gt;        public static func == (lhs: Double, rhs: Double) -&gt; Double { ... }<br>&gt;        public static func + (lhs: Double, rhs: Double) -&gt; Double { ... }<br>&gt;    }<br>&gt;<br>&gt; If something like this worked, it has a number of advantages:<br>&gt;<br>&gt; * It has the same lower overhead with respect to the global namespace<br>&gt; as the currently proposed strategy that uses an explicitly defined<br>&gt; generic operator that trampolines to a named add() method. This should<br>&gt; keep type checking fast and keeps the number of global instances of<br>&gt; the operator low.<br>&gt; * It increases consistency: the operator requirement is declared in<br>&gt; the protocol, and the concrete implementation is *in* the conforming<br>&gt; type (as opposed to a separate global function).<br>&gt; * There is no need to introduce arbitrarily named methods to implement<br>&gt; the operations that would pollute the public interface of the type.<br>&gt; * It doesn&#39;t affect the ability to pass operators as first-class<br>&gt; functions into other algorithms (like + into reduce). In fact, if an<br>&gt; algorithm needs to be explicit about the types (if they can&#39;t be<br>&gt; inferred for some reason), then for example `Float.+` would refer to<br>&gt; the appropriate `(Float, Float) -&gt; Float` function.<br>&gt;<br>&gt; Some might argue that implicitly defining the generic global operator<br>&gt; under the covers is a drawback to this approach, but I think that&#39;s a<br>&gt; minor concern when weighed against the alternatives.<br>&gt;<br>&gt; Individual elements of the syntax could be debated (an &quot;operator&quot;<br>&gt; keyword instead of &quot;static func&quot;? But that might just be syntactic<br>&gt; sugar), but overall, I&#39;d love to get feedback on the feasibility of an<br>&gt; approach like this. I&#39;m happy to take a stab at drawing this up in a<br>&gt; proposal, as well.<br></p><p>Hi Tony,<br></p><p>As you can see in the notes from April 27, 2016 language review, the<br>core team discussed this.  Although one member had some reservations, I<br>think it would be very worthwhile for you to write the proposal that<br>allows static operator methods, and soon.  In Swift 3, we think the<br>trampolines have to be manual, rather than automatically-generated, and<br>we are unsure that automatic generation can work at all, so I strongly<br>recommend that you take up that possibility in a follow-on proposal if<br>you think it&#39;s important.<br></p><p>Thanks for the great idea!<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0067: Enhanced Floating Point Protocols</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>April 29, 2016 at 09:00:00pm</p></header><div class="content"><p>On Fri, Apr 29, 2016 at 2:11 PM Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; Hi Tony,<br>&gt;<br>&gt; As you can see in the notes from April 27, 2016 language review, the<br>&gt; core team discussed this.  Although one member had some reservations, I<br>&gt; think it would be very worthwhile for you to write the proposal that<br>&gt; allows static operator methods, and soon.  In Swift 3, we think the<br>&gt; trampolines have to be manual, rather than automatically-generated, and<br>&gt; we are unsure that automatic generation can work at all, so I strongly<br>&gt; recommend that you take up that possibility in a follow-on proposal if<br>&gt; you think it&#39;s important.<br>&gt;<br>&gt; Thanks for the great idea!<br></p><p><br>Thanks Dave! I&#39;m happy to put some time into a formal proposal over the<br>next few days, and I&#39;ll sync back with the list.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160429/3a781523/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
