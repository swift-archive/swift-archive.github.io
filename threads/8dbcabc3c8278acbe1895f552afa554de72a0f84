<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Idea] Allow more operators as custom operators</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>April 10, 2016 at 04:00:00pm</p></header><div class="content"><p>&amp; (as a prefix operator), -&gt;, ?, and ! (as a postfix operator)<br></p><p>This is the list of built-ins that look like operators, but are banned from<br>use as Swift custom operators.<br></p><p>We can review that list.<br></p><p>`&amp;` reserved as a prefix operators for a reason. It marks a variable use as<br>`inout`, which currently cannot be done by any Swift operator function.<br></p><p>Other three don&#39;t have such justification.<br></p><p>`-&gt;`, `?` and `!` are used in types, but they are mostly unambiguous in<br>expressions.<br></p><p>The only use of `!` in expressions can be rewitten as a built-in operator<br>function:<br>postfix func ! &lt;T&gt; (left: T!) -&gt; T<br></p><p>`?` is used in optional method calls:<br>a.method?(b)<br>A parallel proposal is going to remove such syntax from Swift, so this will<br>not be a problem.<br></p><p>`?` is also used in patterns:<br>if case x? = optional { ... }<br></p><p>Such use is also unambigious here, as expressions are not allowed in<br>patterns.<br></p><p>So my proposal is to allow `-&gt;`, `?` and potfix `!` as custom operators.<br>This proposal requires proposal of removing optional protocol requirements.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160410/8dbc0f84/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/73a38bb7bc9528e31098defe30e68ea4?s=50"></div><header><strong>[Idea] Allow more operators as custom operators</strong> from <string>Jean-Daniel Dupas</string> &lt;mailing at xenonium.com&gt;<p>April 10, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; Le 10 avr. 2016 à 15:01, Антон Жилин via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; &amp; (as a prefix operator), -&gt;, ?, and ! (as a postfix operator)<br>&gt; <br>&gt; This is the list of built-ins that look like operators, but are banned from use as Swift custom operators.<br>&gt; <br>&gt; We can review that list.<br>&gt; <br>&gt; `&amp;` reserved as a prefix operators for a reason. It marks a variable use as `inout`, which currently cannot be done by any Swift operator function.<br>&gt; <br>&gt; Other three don&#39;t have such justification.<br>&gt; <br>&gt; `-&gt;`, `?` and `!` are used in types, but they are mostly unambiguous in expressions.<br>&gt; <br>&gt; The only use of `!` in expressions can be rewitten as a built-in operator function:<br>&gt; postfix func ! &lt;T&gt; (left: T!) -&gt; T<br>&gt; <br>&gt; `?` is used in optional method calls:<br>&gt; a.method?(b)<br>&gt; A parallel proposal is going to remove such syntax from Swift, so this will not be a problem.<br>&gt; <br>&gt; `?` is also used in patterns:<br>&gt; if case x? = optional { ... }<br>&gt; <br></p><p>While the use is unambiguous for the compiler, I’m not sure it’s going to be unambiguous for code readers. Having the same operator meaning different things depending the context is a bad idea IMHO.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160410/187ef30f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d82ae2358637a4680638eb4218c1e64a?s=50"></div><header><strong>[Idea] Allow more operators as custom operators</strong> from <string>hitstergtd+swiftevo at gmail.com</string> &lt;hitstergtd+swiftevo at gmail.com&gt;<p>April 10, 2016 at 10:00:00pm</p></header><div class="content"><p>How about &quot;&lt;-&quot;?<br></p><p>I could see a few shorthands with that for Strings, etc. :-)<br></p><p>On 10 April 2016 at 22:03, Jean-Daniel Dupas via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Le 10 avr. 2016 à 15:01, Антон Жилин via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;<br>&gt; &amp; (as a prefix operator), -&gt;, ?, and ! (as a postfix operator)<br>&gt;<br>&gt; This is the list of built-ins that look like operators, but are banned from<br>&gt; use as Swift custom operators.<br>&gt;<br>&gt; We can review that list.<br>&gt;<br>&gt; `&amp;` reserved as a prefix operators for a reason. It marks a variable use as<br>&gt; `inout`, which currently cannot be done by any Swift operator function.<br>&gt;<br>&gt; Other three don&#39;t have such justification.<br>&gt;<br>&gt; `-&gt;`, `?` and `!` are used in types, but they are mostly unambiguous in<br>&gt; expressions.<br>&gt;<br>&gt; The only use of `!` in expressions can be rewitten as a built-in operator<br>&gt; function:<br>&gt; postfix func ! &lt;T&gt; (left: T!) -&gt; T<br>&gt;<br>&gt; `?` is used in optional method calls:<br>&gt; a.method?(b)<br>&gt; A parallel proposal is going to remove such syntax from Swift, so this will<br>&gt; not be a problem.<br>&gt;<br>&gt; `?` is also used in patterns:<br>&gt; if case x? = optional { ... }<br>&gt;<br>&gt;<br>&gt; While the use is unambiguous for the compiler, I’m not sure it’s going to be<br>&gt; unambiguous for code readers. Having the same operator meaning different<br>&gt; things depending the context is a bad idea IMHO.<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Idea] Allow more operators as custom operators</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>April 11, 2016 at 12:00:00am</p></header><div class="content"><p>You can already define custom operator `&lt;-`. I&#39;m talking about tokens which<br>are reserved, but look like operators. For example,<br>postfix operator ! { }<br>is an error, which seems illogical, because optional force-unwrapping<br>totally looks like an operator.<br></p><p>2016-04-11 0:14 GMT+03:00 &lt;hitstergtd+swiftevo at gmail.com&gt;:<br></p><p>&gt; How about &quot;&lt;-&quot;?<br>&gt;<br>&gt; I could see a few shorthands with that for Strings, etc. :-)<br>&gt;<br>&gt; On 10 April 2016 at 22:03, Jean-Daniel Dupas via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Le 10 avr. 2016 à 15:01, Антон Жилин via swift-evolution<br>&gt; &gt; &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; &gt;<br>&gt; &gt; &amp; (as a prefix operator), -&gt;, ?, and ! (as a postfix operator)<br>&gt; &gt;<br>&gt; &gt; This is the list of built-ins that look like operators, but are banned<br>&gt; from<br>&gt; &gt; use as Swift custom operators.<br>&gt; &gt;<br>&gt; &gt; We can review that list.<br>&gt; &gt;<br>&gt; &gt; `&amp;` reserved as a prefix operators for a reason. It marks a variable use<br>&gt; as<br>&gt; &gt; `inout`, which currently cannot be done by any Swift operator function.<br>&gt; &gt;<br>&gt; &gt; Other three don&#39;t have such justification.<br>&gt; &gt;<br>&gt; &gt; `-&gt;`, `?` and `!` are used in types, but they are mostly unambiguous in<br>&gt; &gt; expressions.<br>&gt; &gt;<br>&gt; &gt; The only use of `!` in expressions can be rewitten as a built-in operator<br>&gt; &gt; function:<br>&gt; &gt; postfix func ! &lt;T&gt; (left: T!) -&gt; T<br>&gt; &gt;<br>&gt; &gt; `?` is used in optional method calls:<br>&gt; &gt; a.method?(b)<br>&gt; &gt; A parallel proposal is going to remove such syntax from Swift, so this<br>&gt; will<br>&gt; &gt; not be a problem.<br>&gt; &gt;<br>&gt; &gt; `?` is also used in patterns:<br>&gt; &gt; if case x? = optional { ... }<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; While the use is unambiguous for the compiler, I’m not sure it’s going<br>&gt; to be<br>&gt; &gt; unambiguous for code readers. Having the same operator meaning different<br>&gt; &gt; things depending the context is a bad idea IMHO.<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160411/ddc9ba7b/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Idea] Allow more operators as custom operators</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>April 11, 2016 at 12:00:00am</p></header><div class="content"><p>`!` is already a de-facto postfix operator and is called optional<br>force-unwrapping.<br>Although it is currently defined not as an operator function, but, oddly<br>enough, as a special case in Swift grammar.<br>There are more things that may deserve this operator: for example,<br>Result&lt;T, E&gt; would force-return T.<br></p><p>Operator `-&gt;` (Arrow) would find a great use in functional programming<br>libraries (hello Haskell lovers).<br></p><p>As for operator `?`, it can be used to turn some custom type into optional.<br>For example, Result&lt;T, E&gt; into Optional&lt;T&gt;.<br></p><p>I would also argue that such operators are unambiguous to their users.<br>If you define such custom operators and add operator functions for them,<br>then you definitely know what they mean for you.<br></p><p>- Anton<br></p><p>2016-04-11 0:03 GMT+03:00 Jean-Daniel Dupas &lt;mailing at xenonium.com&gt;:<br></p><p>&gt;<br>&gt; Le 10 avr. 2016 à 15:01, Антон Жилин via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;<br>&gt; &amp; (as a prefix operator), -&gt;, ?, and ! (as a postfix operator)<br>&gt;<br>&gt; This is the list of built-ins that look like operators, but are banned<br>&gt; from use as Swift custom operators.<br>&gt;<br>&gt; We can review that list.<br>&gt;<br>&gt; `&amp;` reserved as a prefix operators for a reason. It marks a variable use<br>&gt; as `inout`, which currently cannot be done by any Swift operator function.<br>&gt;<br>&gt; Other three don&#39;t have such justification.<br>&gt;<br>&gt; `-&gt;`, `?` and `!` are used in types, but they are mostly unambiguous in<br>&gt; expressions.<br>&gt;<br>&gt; The only use of `!` in expressions can be rewitten as a built-in operator<br>&gt; function:<br>&gt; postfix func ! &lt;T&gt; (left: T!) -&gt; T<br>&gt;<br>&gt; `?` is used in optional method calls:<br>&gt; a.method?(b)<br>&gt; A parallel proposal is going to remove such syntax from Swift, so this<br>&gt; will not be a problem.<br>&gt;<br>&gt; `?` is also used in patterns:<br>&gt; if case x? = optional { ... }<br>&gt;<br>&gt;<br>&gt; While the use is unambiguous for the compiler, I’m not sure it’s going to<br>&gt; be unambiguous for code readers. Having the same operator meaning different<br>&gt; things depending the context is a bad idea IMHO.<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160411/af32bc9c/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Idea] Allow more operators as custom operators</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>April 10, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; `-&gt;`, `?` and `!` are used in types, but they are mostly unambiguous in expressions.<br></p><p>Sure, but types can appear in the middle of expressions. If we drop the `.self` requirement, a type name will *be* an expression. I don&#39;t think you can just ignore type names.<br></p><p>&gt; The only use of `!` in expressions can be rewitten as a built-in operator function:<br>&gt; postfix func ! &lt;T&gt; (left: T!) -&gt; T<br></p><p>This doesn&#39;t work because you can assign through an `!`. For instance:<br></p><p>	numberDictionary[key]! += 1<br></p><p>Once we have inout return values, we might be able to make `!` a normal postfix operator. (Actually, the same goes for `&amp;`, which just becomes a way to leverage the implicit `&amp;`ing of operator arguments into an explicit `&amp;`ing.)<br></p><p>&gt; `?` is used in optional method calls:<br>&gt; a.method?(b)<br>&gt; A parallel proposal is going to remove such syntax from Swift, so this will not be a problem.<br></p><p><br>`?` is used for a lot more than that in expressions: optional chaining, the ternary operator, etc. None of them can be expressed as ordinary operators without significantly expanding operator syntax.<br></p><p>Sorry, I don&#39;t think we can make any real progress in this space without additional language features.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Idea] Allow more operators as custom operators</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>April 11, 2016 at 09:00:00am</p></header><div class="content"><p>Thank you Brent!<br>I forgot about the cases you described, where use of `-&gt;`, `!` or `?`<br>cannot be expressed as operator functions.<br>The question is closed now, I guess.<br></p><p>- Anton<br></p><p>2016-04-11 9:03 GMT+03:00 Brent Royal-Gordon &lt;brent at architechies.com&gt;:<br></p><p>&gt; &gt; `-&gt;`, `?` and `!` are used in types, but they are mostly unambiguous in<br>&gt; expressions.<br>&gt;<br>&gt; Sure, but types can appear in the middle of expressions. If we drop the<br>&gt; `.self` requirement, a type name will *be* an expression. I don&#39;t think you<br>&gt; can just ignore type names.<br>&gt;<br>&gt; &gt; The only use of `!` in expressions can be rewitten as a built-in<br>&gt; operator function:<br>&gt; &gt; postfix func ! &lt;T&gt; (left: T!) -&gt; T<br>&gt;<br>&gt; This doesn&#39;t work because you can assign through an `!`. For instance:<br>&gt;<br>&gt;         numberDictionary[key]! += 1<br>&gt;<br>&gt; Once we have inout return values, we might be able to make `!` a normal<br>&gt; postfix operator. (Actually, the same goes for `&amp;`, which just becomes a<br>&gt; way to leverage the implicit `&amp;`ing of operator arguments into an explicit<br>&gt; `&amp;`ing.)<br>&gt;<br>&gt; &gt; `?` is used in optional method calls:<br>&gt; &gt; a.method?(b)<br>&gt; &gt; A parallel proposal is going to remove such syntax from Swift, so this<br>&gt; will not be a problem.<br>&gt;<br>&gt;<br>&gt; `?` is used for a lot more than that in expressions: optional chaining,<br>&gt; the ternary operator, etc. None of them can be expressed as ordinary<br>&gt; operators without significantly expanding operator syntax.<br>&gt;<br>&gt; Sorry, I don&#39;t think we can make any real progress in this space without<br>&gt; additional language features.<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160411/3d7abca7/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
