<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0058: Allow Swift types to provide custom Objective-C representations</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April  6, 2016 at 10:00:00am</p></header><div class="content"><p>on Wed Apr 06 2016, Russ Bishop &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;     On Apr 5, 2016, at 1:39 PM, Dave Abrahams via swift-evolution<br>&gt;     &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;     A few thoughts: <br>&gt;<br>&gt;     1. It would have made it easier to evaluate if the proposal had not<br>&gt;     talked about removing _ObjectiveCBridgeable and replacing it with a<br>&gt;     new ObjectiveCBridgeable protocol, but what could more accurately be<br>&gt;     described as de-underscoring the existing protocol and slightly<br>&gt;     modernizing its API. The existing protocol was always intended to be<br>&gt;     suitable for general use this way, and the design remains<br>&gt;     substantially unchanged, so I support the proposal in principle.<br>&gt;<br>&gt; You can blame that on me; After changes from feedback I felt it different enough<br>&gt; to call it a replacement.<br>&gt;<br>&gt;     2. These two APIs should look different IMO:<br>&gt;<br>&gt;     init?(bridgedFromObjectiveC: ObjectiveCType)<br>&gt;     init(unconditionallyBridgedFromObjectiveC: ObjectiveCType?)<br>&gt;<br>&gt;     they should definitely use “bridging” instead of “bridged,” since the<br>&gt;     phrase describes *how* the conversion is going to be done.<br>&gt;<br>&gt; Fair enough, IIRC some of the naming guidelines were still being decided when I<br>&gt; wrote it up. <br>&gt; I’m not sure if the proposal needs to go back for revision and review again or<br>&gt; if we can make minor changes during review but either way cleaning up the names<br>&gt; (and removing the deprecated @warn_unused_result attribute) should be no<br>&gt; problem.<br></p><p>However it&#39;s handled, I think more discussion is needed about these inits.<br></p><p>&gt;     3. Is this proposal introducing a backdoor people can exploit to create<br>&gt;     user-defined implicit conversions? If so, shouldn&#39;t that worry us?<br>&gt;<br>&gt; No. I explicitly call out in the doc that no implicit conversions are allowed<br>&gt; except for the automatically generated thunks when importing Objective-C APIs<br>&gt; into Swift. You must do an explicit cast in situations where the API can’t<br>&gt; import automatically (eg: UnsafePointer&lt;ObjCType&gt;).<br></p><p>Great; sorry I missed that.<br></p><p>&gt;     4. This proposal should probably support creating a type that only<br>&gt;     bridges *from* Objective-C, to handle bridging mutable Objective-C<br>&gt;     classes without an immutable base class to value types (anything else<br>&gt;     breaks one of the languages&#39; expectations of value or reference<br>&gt;     semantics). This suggests a hierarchy of two protocols might be<br>&gt;     warranted.<br>&gt;<br>&gt; I’m not quite following why it breaks the expectations of value or reference<br>&gt; semantics. Are you talking about allowing a Swift type to bridge to either a<br>&gt; mutable or immutable variant in ObjC? <br></p><p>Consider NSPersonNameComponents, a mutable class in Cocoa.  If you want<br>to bridge that to a value type PersonNameComponents, then fine, you can<br>copy the data.  You had better not convert that value type back to<br>NSPersonNameComponents, though, or you&#39;re left with two bad choices:<br></p><p>1. You&#39;re converting by extracting an instance of NSPersonNameComponents<br>   from the implementation of PersonNameComponents, in which case ObjC<br>   code gets to modify the value of your PersonNameComponents instance.<br>   That&#39;s not value semantics.<br></p><p>2. You&#39;re converting by copying the data into a new<br>   NSPersonNameComponents, in which case ObjC code may have a reasonable<br>   expectation of being able to meaningfully modify the object and<br>   seeing that modification reflected somewhere, but it won&#39;t be.<br>   That&#39;s not reference semantics.<br></p><p>&gt; In the proposal as written you’d presumably specify the bridging type<br>&gt; as the mutable variant but importing the immutable variant does<br>&gt; present a problem (it would violate the ambiguity rules if the types<br>&gt; were defined in Swift) - is that what you were driving at?<br>&gt;<br>&gt; Russ<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
