<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>struct subtyping</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>March 21, 2016 at 12:00:00pm</p></header><div class="content"><p>Many languages which adopt the concept of value types don&#39;t allow subclassing for those, and so does Swift.<br>Inheritance for structs is more complex than inheritance for classes, but the &quot;final&quot; limitation isn&#39;t the only possible solution, and Dave Abrahams told me in another thread that changing this rule might be considered in the future — so I&#39;ll risk getting taunted by the cool kids who are in favor of eliminating all ancient OOP-ideas ;-) and start a discussion.<br></p><p>I guess most readers know about the low-level problems that arise when we switch from pointers (always the same size) to value types (size may vary), so I&#39;ll start with two possibilities for struct subtyping:<br></p><p>newtype (see https://www.haskell.org/tutorial/moretypes.html &lt;https://www.haskell.org/tutorial/moretypes.html&gt; — or just read on if you are scared by Haskell ;-)<br></p><p>When a subtype does not add any stored properties to its superclass (memory layout doesn&#39;t change), there is no difference at the level of object code — only the type checker may stop you from using those two types interchangeably.<br>Some use cases:<br>- In Cocoa, there is no separate class for (file system) paths; instead, there are some additions to NSString. String doesn&#39;t have those abilities, and imho methods like &quot;stringByAppendingPathExtension&quot; deserve a separate Path-struct, so that those special methods don&#39;t pollute the method list of String (URL is the future, so that example is somewhat out-of date).<br>- You could impose incompatibility on numeric types to ensure that your calculations use correct quantities. Although this can be annoying (Float vs. CGFloat), decorating numbers with quantity/unit could eliminate bugs that had really disastrous consequences in the past.<br>- Increased comfort for floating-point math:<br>struct CustomDouble: Double<br></p><p>func == (a: CustomDouble, b: CustomDouble) -&gt; Bool {<br>	return abs(a.value - b.value) &lt; 0.01<br>}<br>(no need to specify tolerance for each comparison)<br></p><p>Full subtyping<br></p><p>As long as you don&#39;t cross module borders, it wouldn&#39;t be that complicated to add inheritance without restrictions.<br>imagine you have a &quot;Customer&quot;-type and a &quot;Employee&quot;-type to store personal data (name, address…).<br>Those data objects are perfect candidates to be implemented as structs, but they also cry for a &quot;Person&quot;-superclass, so you are forced to either duplicate code, or to implement your objects as reference types.<br></p><p>In a real proposal, I would include more details on the problems caused by this feature, but I&#39;d like to see some feedback first.<br></p><p>Best regards,<br>Tino<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160321/e01664ae/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>struct subtyping</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>March 21, 2016 at 03:00:00pm</p></header><div class="content"><p>+1<br></p><p>&gt; On Mar 21, 2016, at 6:58 AM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Many languages which adopt the concept of value types don&#39;t allow subclassing for those, and so does Swift.<br>&gt; Inheritance for structs is more complex than inheritance for classes, but the &quot;final&quot; limitation isn&#39;t the only possible solution, and Dave Abrahams told me in another thread that changing this rule might be considered in the future — so I&#39;ll risk getting taunted by the cool kids who are in favor of eliminating all ancient OOP-ideas ;-) and start a discussion.<br>&gt; <br>&gt; I guess most readers know about the low-level problems that arise when we switch from pointers (always the same size) to value types (size may vary), so I&#39;ll start with two possibilities for struct subtyping:<br>&gt; <br>&gt; newtype (see https://www.haskell.org/tutorial/moretypes.html &lt;https://www.haskell.org/tutorial/moretypes.html&gt; — or just read on if you are scared by Haskell ;-)<br>&gt; <br>&gt; When a subtype does not add any stored properties to its superclass (memory layout doesn&#39;t change), there is no difference at the level of object code — only the type checker may stop you from using those two types interchangeably.<br>&gt; Some use cases:<br>&gt; - In Cocoa, there is no separate class for (file system) paths; instead, there are some additions to NSString. String doesn&#39;t have those abilities, and imho methods like &quot;stringByAppendingPathExtension&quot; deserve a separate Path-struct, so that those special methods don&#39;t pollute the method list of String (URL is the future, so that example is somewhat out-of date).<br>&gt; - You could impose incompatibility on numeric types to ensure that your calculations use correct quantities. Although this can be annoying (Float vs. CGFloat), decorating numbers with quantity/unit could eliminate bugs that had really disastrous consequences in the past.<br>&gt; - Increased comfort for floating-point math:<br>&gt; struct CustomDouble: Double<br>&gt; <br>&gt; func == (a: CustomDouble, b: CustomDouble) -&gt; Bool {<br>&gt; 	return abs(a.value - b.value) &lt; 0.01<br>&gt; }<br>&gt; (no need to specify tolerance for each comparison)<br>&gt; <br>&gt; Full subtyping<br>&gt; <br>&gt; As long as you don&#39;t cross module borders, it wouldn&#39;t be that complicated to add inheritance without restrictions.<br>&gt; imagine you have a &quot;Customer&quot;-type and a &quot;Employee&quot;-type to store personal data (name, address…).<br>&gt; Those data objects are perfect candidates to be implemented as structs, but they also cry for a &quot;Person&quot;-superclass, so you are forced to either duplicate code, or to implement your objects as reference types.<br>&gt; <br>&gt; In a real proposal, I would include more details on the problems caused by this feature, but I&#39;d like to see some feedback first.<br>&gt; <br>&gt; Best regards,<br>&gt; Tino<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160321/fb6f1a52/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a7105d5001b7547920b134e67d3bcd17?s=50"></div><header><strong>struct subtyping</strong> from <string>Jim Kubicek</string> &lt;jkubicek at gmail.com&gt;<p>March 21, 2016 at 02:00:00pm</p></header><div class="content"><p>I’m a big fan of adding `newtype` behavior to swift, I think being able to add new types that mirror (but are not compatible with) existing types would be powerful and I would get a lot of use out of them. I’m not a fan of adding subtyping to structs, IMHO, the complexity is not worth the power.<br></p><p>Could we accomplish something similar to `newtype` by making the `typealias` declaration more powerful? If we had the ability to extend typealiases it would get us most of the way there. <br></p><p><br></p><p>&gt; On Mar 21, 2016, at 4:58 AM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Many languages which adopt the concept of value types don&#39;t allow subclassing for those, and so does Swift.<br>&gt; Inheritance for structs is more complex than inheritance for classes, but the &quot;final&quot; limitation isn&#39;t the only possible solution, and Dave Abrahams told me in another thread that changing this rule might be considered in the future — so I&#39;ll risk getting taunted by the cool kids who are in favor of eliminating all ancient OOP-ideas ;-) and start a discussion.<br>&gt; <br>&gt; I guess most readers know about the low-level problems that arise when we switch from pointers (always the same size) to value types (size may vary), so I&#39;ll start with two possibilities for struct subtyping:<br>&gt; <br>&gt; newtype (see https://www.haskell.org/tutorial/moretypes.html &lt;https://www.haskell.org/tutorial/moretypes.html&gt; — or just read on if you are scared by Haskell ;-)<br>&gt; <br>&gt; When a subtype does not add any stored properties to its superclass (memory layout doesn&#39;t change), there is no difference at the level of object code — only the type checker may stop you from using those two types interchangeably.<br>&gt; Some use cases:<br>&gt; - In Cocoa, there is no separate class for (file system) paths; instead, there are some additions to NSString. String doesn&#39;t have those abilities, and imho methods like &quot;stringByAppendingPathExtension&quot; deserve a separate Path-struct, so that those special methods don&#39;t pollute the method list of String (URL is the future, so that example is somewhat out-of date).<br>&gt; - You could impose incompatibility on numeric types to ensure that your calculations use correct quantities. Although this can be annoying (Float vs. CGFloat), decorating numbers with quantity/unit could eliminate bugs that had really disastrous consequences in the past.<br>&gt; - Increased comfort for floating-point math:<br>&gt; struct CustomDouble: Double<br>&gt; <br>&gt; func == (a: CustomDouble, b: CustomDouble) -&gt; Bool {<br>&gt; 	return abs(a.value - b.value) &lt; 0.01<br>&gt; }<br>&gt; (no need to specify tolerance for each comparison)<br>&gt; <br>&gt; Full subtyping<br>&gt; <br>&gt; As long as you don&#39;t cross module borders, it wouldn&#39;t be that complicated to add inheritance without restrictions.<br>&gt; imagine you have a &quot;Customer&quot;-type and a &quot;Employee&quot;-type to store personal data (name, address…).<br>&gt; Those data objects are perfect candidates to be implemented as structs, but they also cry for a &quot;Person&quot;-superclass, so you are forced to either duplicate code, or to implement your objects as reference types.<br>&gt; <br>&gt; In a real proposal, I would include more details on the problems caused by this feature, but I&#39;d like to see some feedback first.<br>&gt; <br>&gt; Best regards,<br>&gt; Tino<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160321/f82ca4af/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>struct subtyping</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>March 24, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; Could we accomplish something similar to `newtype` by making the `typealias` declaration more powerful?<br>It&#39;s the first thing I tried, but afair someone from the Core Team opposed extending typealias - and I had to agree that an &quot;alias&quot; should be just a synonym.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>struct subtyping</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>March 24, 2016 at 03:00:00pm</p></header><div class="content"><p>Would love a way of extending an existing struct as a new type but it not<br>being related to the struct it extends.<br></p><p>Sort of like a mixin but for structs, so I could have:<br></p><p>struct Object {<br>let identifier: String<br>}<br></p><p>struct User: Object {<br></p><p>}<br></p><p>struct Tree: Object {<br>}<br></p><p>The last two structs get the identifier property &quot;mixed&quot; in but are unique<br>types :)<br></p><p>*___________________________________*<br></p><p>*James⎥Head Of CEO*<br></p><p>*james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com&gt;*<br></p><p>*Sup*<br></p><p>*Runway East *<br></p><p>*10 Finsbury Square*<br></p><p>*London*<br></p><p>* EC2A 1AF *<br></p><p>On Thu, Mar 24, 2016 at 2:16 PM, Tino Heth via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; Could we accomplish something similar to `newtype` by making the<br>&gt; `typealias` declaration more powerful?<br>&gt; It&#39;s the first thing I tried, but afair someone from the Core Team opposed<br>&gt; extending typealias - and I had to agree that an &quot;alias&quot; should be just a<br>&gt; synonym.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160324/79b6b1bb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>struct subtyping</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>March 24, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; struct Object {<br>&gt; let identifier: String<br>&gt; }<br>&gt; <br>&gt; struct User: Object {<br>&gt; <br>&gt; }<br>&gt; <br>&gt; struct Tree: Object {<br>&gt; }<br>&gt; <br>&gt; The last two structs get the identifier property &quot;mixed&quot; in but are unique types :)<br></p><p>Is unique meant so that User-Objects can&#39;t be used as &quot;Object&quot;-Object parameters?<br>I&#39;m asking because this might be the biggest source of confusion with struct inheritance:<br>As the two &quot;child-structs&quot; don&#39;t add new data to their parent, they would (technically) be compatible — but this is fragile, so it might be preferable to &quot;hide&quot; polymorphism by default, and maybe add an annotation to explicitly allow that a sub-struct can be used as its parent type.<br>@compatible(Float) struct SpecialFloat: Float...<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160324/113fc1bd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>struct subtyping</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>March 24, 2016 at 05:00:00pm</p></header><div class="content"><p>I was treating this as a Mixin.<br></p><p>So the property from Object is Mixed into Tree and User but it isn&#39;t a<br>Subclass so any comparison between the two isn&#39;t possible.<br></p><p>But on reflection you bring up a very valid point.<br></p><p>*___________________________________*<br></p><p>*James⎥Head Of CEO*<br></p><p>*james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com&gt;*<br></p><p>*Sup*<br></p><p>*Runway East *<br></p><p>*10 Finsbury Square*<br></p><p>*London*<br></p><p>* EC2A 1AF *<br></p><p>On Thu, Mar 24, 2016 at 5:34 PM, Tino Heth &lt;2th at gmx.de&gt; wrote:<br></p><p>&gt; struct Object {<br>&gt; let identifier: String<br>&gt; }<br>&gt;<br>&gt; struct User: Object {<br>&gt;<br>&gt; }<br>&gt;<br>&gt; struct Tree: Object {<br>&gt; }<br>&gt;<br>&gt; The last two structs get the identifier property &quot;mixed&quot; in but are unique<br>&gt; types :)<br>&gt;<br>&gt;<br>&gt; Is unique meant so that User-Objects can&#39;t be used as &quot;Object&quot;-Object<br>&gt; parameters?<br>&gt; I&#39;m asking because this might be the biggest source of confusion with<br>&gt; struct inheritance:<br>&gt; As the two &quot;child-structs&quot; don&#39;t add new data to their parent, they would<br>&gt; (technically) be compatible — but this is fragile, so it might be<br>&gt; preferable to &quot;hide&quot; polymorphism by default, and maybe add an annotation<br>&gt; to explicitly allow that a sub-struct can be used as its parent type.<br>&gt; @compatible(Float) struct SpecialFloat: Float...<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160324/41d75eea/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>struct subtyping</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>March 22, 2016 at 09:00:00am</p></header><div class="content"><p>+1<br></p><p>On Monday, 21 March 2016, Tino Heth via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Many languages which adopt the concept of value types don&#39;t allow<br>&gt; subclassing for those, and so does Swift.<br>&gt; Inheritance for structs is more complex than inheritance for classes, but<br>&gt; the &quot;final&quot; limitation isn&#39;t the only possible solution, and Dave Abrahams<br>&gt; told me in another thread that changing this rule might be considered in<br>&gt; the future — so I&#39;ll risk getting taunted by the cool kids who are in favor<br>&gt; of eliminating all ancient OOP-ideas ;-) and start a discussion.<br>&gt;<br>&gt; I guess most readers know about the low-level problems that arise when we<br>&gt; switch from pointers (always the same size) to value types (size may vary),<br>&gt; so I&#39;ll start with two possibilities for struct subtyping:<br>&gt;<br>&gt; *newtype* (see https://www.haskell.org/tutorial/moretypes.html — or just<br>&gt; read on if you are scared by Haskell ;-)<br>&gt;<br>&gt; When a subtype does not add any stored properties to its superclass<br>&gt; (memory layout doesn&#39;t change), there is no difference at the level of<br>&gt; object code — only the type checker may stop you from using those two types<br>&gt; interchangeably.<br>&gt; Some use cases:<br>&gt; - In Cocoa, there is no separate class for (file system) paths; instead,<br>&gt; there are some additions to NSString. String doesn&#39;t have those abilities,<br>&gt; and imho methods like &quot;stringByAppendingPathExtension&quot; deserve a separate<br>&gt; Path-struct, so that those special methods don&#39;t pollute the method list of<br>&gt; String (URL is the future, so that example is somewhat out-of date).<br>&gt; - You could impose incompatibility on numeric types to ensure that your<br>&gt; calculations use correct quantities. Although this can be annoying (Float<br>&gt; vs. CGFloat), decorating numbers with quantity/unit could eliminate bugs<br>&gt; that had really disastrous consequences in the past.<br>&gt; - Increased comfort for floating-point math:<br>&gt; struct CustomDouble: Double<br>&gt;<br>&gt; func == (a: CustomDouble, b: CustomDouble) -&gt; Bool {<br>&gt; return abs(a.value - b.value) &lt; 0.01<br>&gt; }<br>&gt; (no need to specify tolerance for each comparison)<br>&gt;<br>&gt; *Full subtyping*<br>&gt;<br>&gt; As long as you don&#39;t cross module borders, it wouldn&#39;t be that complicated<br>&gt; to add inheritance without restrictions.<br>&gt; imagine you have a &quot;Customer&quot;-type and a &quot;Employee&quot;-type to store personal<br>&gt; data (name, address…).<br>&gt; Those data objects are perfect candidates to be implemented as structs,<br>&gt; but they also cry for a &quot;Person&quot;-superclass, so you are forced to either<br>&gt; duplicate code, or to implement your objects as reference types.<br>&gt;<br>&gt; In a real proposal, I would include more details on the problems caused by<br>&gt; this feature, but I&#39;d like to see some feedback first.<br>&gt;<br>&gt; Best regards,<br>&gt; Tino<br>&gt;<br></p><p><br>-- <br>-- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160322/d3690f4b/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f822334c2f6ebeafd3a41cd44c82a62b?s=50"></div><header><strong>struct subtyping</strong> from <string>Andrey Tarantsov</string> &lt;andrey at tarantsov.com&gt;<p>March 24, 2016 at 03:00:00am</p></header><div class="content"><p>+1, would love this.<br></p><p>A.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>struct subtyping</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>March 24, 2016 at 10:00:00am</p></header><div class="content"><p>+1 this would be great, particularly if:<br> * subtypes can be extended<br> * subtypes can be generic partial specialisations (<br>https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md<br>)<br></p><p>On Thursday, 24 March 2016, Andrey Tarantsov via swift-evolution &lt;<br>swift-evolution at swift.org<br>&lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br></p><p>&gt; +1, would love this.<br>&gt;<br>&gt; A.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160324/8b69de81/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>struct subtyping</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>March 24, 2016 at 04:00:00pm</p></header><div class="content"><p>I’m a +1 for this. It would have been ideal for something I coded recently where I ended up having to settle for a class hierarchy instead so I could add incrementally without polluting the parent types with a ton of extra methods. I didn’t actually need the polymorphism, so structs would have been preferable, but just not as practical, but with sub-typing I could have had the best of both that I really wanted.<br></p><p>&gt; On 21 Mar 2016, at 11:58, Tino Heth via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Many languages which adopt the concept of value types don&#39;t allow subclassing for those, and so does Swift.<br>&gt; Inheritance for structs is more complex than inheritance for classes, but the &quot;final&quot; limitation isn&#39;t the only possible solution, and Dave Abrahams told me in another thread that changing this rule might be considered in the future — so I&#39;ll risk getting taunted by the cool kids who are in favor of eliminating all ancient OOP-ideas ;-) and start a discussion.<br>&gt; <br>&gt; I guess most readers know about the low-level problems that arise when we switch from pointers (always the same size) to value types (size may vary), so I&#39;ll start with two possibilities for struct subtyping:<br>&gt; <br>&gt; newtype (see https://www.haskell.org/tutorial/moretypes.html &lt;https://www.haskell.org/tutorial/moretypes.html&gt; — or just read on if you are scared by Haskell ;-)<br>&gt; <br>&gt; When a subtype does not add any stored properties to its superclass (memory layout doesn&#39;t change), there is no difference at the level of object code — only the type checker may stop you from using those two types interchangeably.<br>&gt; Some use cases:<br>&gt; - In Cocoa, there is no separate class for (file system) paths; instead, there are some additions to NSString. String doesn&#39;t have those abilities, and imho methods like &quot;stringByAppendingPathExtension&quot; deserve a separate Path-struct, so that those special methods don&#39;t pollute the method list of String (URL is the future, so that example is somewhat out-of date).<br>&gt; - You could impose incompatibility on numeric types to ensure that your calculations use correct quantities. Although this can be annoying (Float vs. CGFloat), decorating numbers with quantity/unit could eliminate bugs that had really disastrous consequences in the past.<br>&gt; - Increased comfort for floating-point math:<br>&gt; struct CustomDouble: Double<br>&gt; <br>&gt; func == (a: CustomDouble, b: CustomDouble) -&gt; Bool {<br>&gt; 	return abs(a.value - b.value) &lt; 0.01<br>&gt; }<br>&gt; (no need to specify tolerance for each comparison)<br>&gt; <br>&gt; Full subtyping<br>&gt; <br>&gt; As long as you don&#39;t cross module borders, it wouldn&#39;t be that complicated to add inheritance without restrictions.<br>&gt; imagine you have a &quot;Customer&quot;-type and a &quot;Employee&quot;-type to store personal data (name, address…).<br>&gt; Those data objects are perfect candidates to be implemented as structs, but they also cry for a &quot;Person&quot;-superclass, so you are forced to either duplicate code, or to implement your objects as reference types.<br>&gt; <br>&gt; In a real proposal, I would include more details on the problems caused by this feature, but I&#39;d like to see some feedback first.<br>&gt; <br>&gt; Best regards,<br>&gt; Tino<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160324/6528b145/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/268d9a6a10ecdf70a24fdf96d03cec1c?s=50"></div><header><strong>struct subtyping</strong> from <string>Colin Barrett</string> &lt;colin at springsandstruts.com&gt;<p>March 24, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Mar 21, 2016, at 7:58 AM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Many languages which adopt the concept of value types don&#39;t allow subclassing for those, and so does Swift.<br>&gt; Inheritance for structs is more complex than inheritance for classes, but the &quot;final&quot; limitation isn&#39;t the only possible solution, and Dave Abrahams told me in another thread that changing this rule might be considered in the future — so I&#39;ll risk getting taunted by the cool kids who are in favor of eliminating all ancient OOP-ideas ;-) and start a discussion.<br>&gt; <br>&gt; I guess most readers know about the low-level problems that arise when we switch from pointers (always the same size) to value types (size may vary), so I&#39;ll start with two possibilities for struct subtyping:<br>&gt; <br>&gt; newtype (see https://www.haskell.org/tutorial/moretypes.html &lt;https://www.haskell.org/tutorial/moretypes.html&gt; — or just read on if you are scared by Haskell ;-)<br>&gt; <br>&gt; When a subtype does not add any stored properties to its superclass (memory layout doesn&#39;t change), there is no difference at the level of object code — only the type checker may stop you from using those two types interchangeably.<br></p><p>As I understand it, a single argument struct ends up being as “free” as a newtype is in Haskell (modulo resiliency concerns), or close to it. For instance, my understanding is that the Int type is a single argument struct wrapper around a lower-level numeric type.<br></p><p>&gt; Some use cases:<br>&gt; - In Cocoa, there is no separate class for (file system) paths; instead, there are some additions to NSString. String doesn&#39;t have those abilities, and imho methods like &quot;stringByAppendingPathExtension&quot; deserve a separate Path-struct, so that those special methods don&#39;t pollute the method list of String (URL is the future, so that example is somewhat out-of date).<br>&gt; - You could impose incompatibility on numeric types to ensure that your calculations use correct quantities. Although this can be annoying (Float vs. CGFloat), decorating numbers with quantity/unit could eliminate bugs that had really disastrous consequences in the past.<br>&gt; - Increased comfort for floating-point math:<br>&gt; struct CustomDouble: Double<br>&gt; <br>&gt; func == (a: CustomDouble, b: CustomDouble) -&gt; Bool {<br>&gt; 	return abs(a.value - b.value) &lt; 0.01<br>&gt; }<br>&gt; (no need to specify tolerance for each comparison)<br>&gt; <br>&gt; Full subtyping<br>&gt; <br>&gt; As long as you don&#39;t cross module borders, it wouldn&#39;t be that complicated to add inheritance without restrictions.<br>&gt; imagine you have a &quot;Customer&quot;-type and a &quot;Employee&quot;-type to store personal data (name, address…).<br>&gt; Those data objects are perfect candidates to be implemented as structs, but they also cry for a &quot;Person&quot;-superclass, so you are forced to either duplicate code, or to implement your objects as reference types.<br></p><p>There’s a number of wrinkles that are worth considering—for instance, are you doing nominal or structural subtyping? The value-nature of structs suggests that structural subtyping would be useul. However, structs are already nominal types (unlike tuples).<br></p><p>Some compelling use cases for why a class doesn’t suffice and you really need a struct would enhance a full proposal.<br></p><p>Cheers,<br>-Colin<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160324/501c4219/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
