<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>A sample Rational number type</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>October  3, 2016 at 09:00:00am</p></header><div class="content"><p>on Sun Oct 02 2016, Hooman Mehr &lt;swift-users-AT-swift.org&gt; wrote:<br></p><p>&gt;&gt; On Oct 2, 2016, at 5:23 PM, Dave Abrahams via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; Presumably you mean:<br>&gt;&gt; <br>&gt;&gt;  let r2 = r±0.0005 // turn a Rational into a Double with no more than<br>&gt;&gt;                    // .0005 rounding error<br>&gt;&gt; <br>&gt;&gt; ? That is supercute!<br>&gt;&gt; <br>&gt;<br>&gt; It is actually the other way around: It returns a rational given a<br>&gt; double so that the maximum difference of the created rational with the<br>&gt; input double is the specified tolerance.<br></p><p>Oh, nifty.  How about the other direction?<br></p><p>&gt;&gt; Have you thought about what this would look like after we land<br>&gt;&gt; https://github.com/apple/swift/pull/3796 (see<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md)<br>&gt;&gt; ?<br>&gt;&gt; <br>&gt;<br>&gt; That is the next thing I want to look at, the next chance I get. <br></p><p>Thank you!<br></p><p>&gt; For now, it isn’t much more than a quick hack on a slow Friday…<br>&gt;<br>&gt;&gt; You can also find a working prototype of that code at<br>&gt;&gt;<br>&gt; https://github.com/apple/swift/blob/b7622b41756e33bdf3f3415320ffec52aec73281/test/Prototypes/Integers.swift.gyb<br>&gt;&gt; It would be great to know that the protocols we&#39;ve designed actually<br>&gt;&gt; work out for Rational numbers.  With these protocols, can you make your<br>&gt;&gt; Rational generic on the underlying integer type?<br>&gt;&gt; <br>&gt;&gt; There&#39;s a BigInt implementation based on these protocols here:<br>&gt;&gt; https://github.com/natecook1000/swift/commit/45c52a75dcc15024649a5e093a5da4ee031595c2<br>&gt;&gt; <br>&gt;&gt; It would be really cool to see it work with a generic version of your<br>&gt;&gt; Rational type.<br>&gt;<br>&gt; Interesting idea. A BigInt type can really lift Rational to new<br>&gt; levels. Interesting case study to see how well the new protocols work.<br></p><p>Quite so!  [FWIW, I rather wish that BigInt was using two&#39;s complement<br>representation, as the protocols were designed to make that work<br>smoothly]<br></p><p><br>&gt;&gt; It&#39;s interesting to see that one wants a different algorithm for GCD<br>&gt;&gt; when using BigInts:<br>&gt;&gt; https://en.wikipedia.org/wiki/Binary_GCD_algorithm#cite_note-11<br>&gt;&gt; <br>&gt;&gt; I wonder how that should be dispatched…<br>&gt;<br>&gt; Moreover, there is something I ran into after posting: On today’s CPU<br>&gt; architectures with fast integer divide, simple binary CGD is slower<br>&gt; than basic Euler’s algorithm using remainders. Binary GCD needs the<br>&gt; equivalent of __builtin_ctz to run faster. <br></p><p>The new integer protocols expose that as a &quot;leadingZeros&quot; property.<br></p><p>&gt; It would be nice if compiler could detect the shift loops and replace<br>&gt; the whole loop with x86 BSFL instruction.<br></p><p>Talk to the llvm people :-).  You&#39;ll want to use masking shifts under<br>the new integer protocols.<br></p><p>&gt; I need to put some thought on whether there is an efficient means of<br>&gt; switching the algorithm based on the actual size (or nature) of the<br>&gt; given Int type, otherwise we may have to specialize, which is not good<br>&gt; from a generics standpoint.<br></p><p>It depends exactly what you mean by that term :-)<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e7e554db1f80d7d6041d92edd5145698?s=50"></div><header><strong>A sample Rational number type</strong> from <string>Hooman Mehr</string> &lt;hooman at mac.com&gt;<p>October  5, 2016 at 12:00:00pm</p></header><div class="content"><p>I encountered a bug in the standard library while working on an exact conversion from floating point types to my rational type &lt;https://gist.github.com/hooman/6e08c48e1e06ee19e06e5b09f664f9be&gt; (when you pass a tolerance of zero)<br></p><p>SR-2868 &lt;https://bugs.swift.org/browse/SR-2868&gt;: If the value of the floating point type is a power of two, its `significandWidth` property returns a nonsense value, because the behavior or Builtin.int_cttz_IntNN (used in countTrailingZeros property) is undefined for zero. <br></p><p>The test suite should have included such special cases and caught this one.<br></p><p>&gt; On Oct 3, 2016, at 9:08 AM, Dave Abrahams via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; on Sun Oct 02 2016, Hooman Mehr &lt;swift-users-AT-swift.org &lt;http://swift-users-at-swift.org/&gt;&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Oct 2, 2016, at 5:23 PM, Dave Abrahams via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; Presumably you mean:<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161005/d5d37f7b/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
