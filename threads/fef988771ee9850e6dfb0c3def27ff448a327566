<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Pitch] Remove bit shift traps</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March 21, 2016 at 03:00:00pm</p></header><div class="content"><p>on Thu Mar 17 2016, Patrick Pijnappel &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Currently, bit shifting with an amount greater than or equal to the size of<br>&gt; the type traps:<br>&gt;<br>&gt; func foo(x: Int32) {<br>&gt;   let y = x &lt;&lt; 32 // Runtime trap (for any &lt;&lt; or &gt;&gt; with amount &gt;= 32)<br>&gt; }<br>&gt;<br>&gt; I propose to make this not trap, and just end up with 0 (or ~0 in case of<br>&gt; right-shifting a negative number):<br>&gt;<br>&gt;    - Unlike the traps for integer arithmetic and casts, it is obvious what<br>&gt;    a bitshift past the end does as fundamentally the behavior stays the same.<br>&gt;    - If the intention is to make it analogous with multiplication/division<br>&gt;    by 2**n, the checks don&#39;t really change anything. Right shift are still<br>&gt;    identical to divisions by 2**n. Left shifts are like multiplication by 2**n<br>&gt;    but with different overflow behavior, which is already the case with the<br>&gt;    current rules (e.g. Int.max &lt;&lt; 1 doesn&#39;t trap)<br>&gt;    - It could lead to bugs where users expect this to work, e.g. the<br>&gt;    following crashes when the entire buffer is consumed: buffer = buffer &lt;&lt;<br>&gt;    bitsConsumed<br>&gt;    - Bitshift are often used in performance-sensitive code, and with the<br>&gt;    current behavior any non-constant bit shift introduces a branch.<br></p><p>This is addressed in<br>https://github.com/apple/swift/blob/master/test/Prototypes/Integers.swift.gyb<br>which we intend to propose very soon.<br></p><p>(negative shift amounts work too).<br></p><p>https://github.com/apple/swift/blob/master/test/Prototypes/Integers.swift.gyb#L1628<br></p><p>For users who want to be sure they&#39;re not paying for any checks, there<br>is a masking bitshift (&amp;&lt;&lt;, &amp;&gt;&gt;, &amp;&lt;&lt;=, &amp;&gt;&gt;=).<br></p><p>--<br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bce64da43e291f2ce30987a83780502c?s=50"></div><header><strong>[Pitch] Remove bit shift traps</strong> from <string>Patrick Pijnappel</string> &lt;patrickpijnappel at gmail.com&gt;<p>March 22, 2016 at 09:00:00pm</p></header><div class="content"><p>Great! Totally forgot to check those, even though I already skimmed them<br>before ;). Looks like a lot of great improvements in one go!<br></p><p>On Tue, Mar 22, 2016 at 9:52 AM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Thu Mar 17 2016, Patrick Pijnappel &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; Currently, bit shifting with an amount greater than or equal to the size<br>&gt; of<br>&gt; &gt; the type traps:<br>&gt; &gt;<br>&gt; &gt; func foo(x: Int32) {<br>&gt; &gt;   let y = x &lt;&lt; 32 // Runtime trap (for any &lt;&lt; or &gt;&gt; with amount &gt;= 32)<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; I propose to make this not trap, and just end up with 0 (or ~0 in case of<br>&gt; &gt; right-shifting a negative number):<br>&gt; &gt;<br>&gt; &gt;    - Unlike the traps for integer arithmetic and casts, it is obvious<br>&gt; what<br>&gt; &gt;    a bitshift past the end does as fundamentally the behavior stays the<br>&gt; same.<br>&gt; &gt;    - If the intention is to make it analogous with<br>&gt; multiplication/division<br>&gt; &gt;    by 2**n, the checks don&#39;t really change anything. Right shift are<br>&gt; still<br>&gt; &gt;    identical to divisions by 2**n. Left shifts are like multiplication<br>&gt; by 2**n<br>&gt; &gt;    but with different overflow behavior, which is already the case with<br>&gt; the<br>&gt; &gt;    current rules (e.g. Int.max &lt;&lt; 1 doesn&#39;t trap)<br>&gt; &gt;    - It could lead to bugs where users expect this to work, e.g. the<br>&gt; &gt;    following crashes when the entire buffer is consumed: buffer = buffer<br>&gt; &lt;&lt;<br>&gt; &gt;    bitsConsumed<br>&gt; &gt;    - Bitshift are often used in performance-sensitive code, and with the<br>&gt; &gt;    current behavior any non-constant bit shift introduces a branch.<br>&gt;<br>&gt; This is addressed in<br>&gt;<br>&gt; https://github.com/apple/swift/blob/master/test/Prototypes/Integers.swift.gyb<br>&gt; which we intend to propose very soon.<br>&gt;<br>&gt; (negative shift amounts work too).<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift/blob/master/test/Prototypes/Integers.swift.gyb#L1628<br>&gt;<br>&gt; For users who want to be sure they&#39;re not paying for any checks, there<br>&gt; is a masking bitshift (&amp;&lt;&lt;, &amp;&gt;&gt;, &amp;&lt;&lt;=, &amp;&gt;&gt;=).<br>&gt;<br>&gt; --<br>&gt; -Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160322/76e11ac6/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
