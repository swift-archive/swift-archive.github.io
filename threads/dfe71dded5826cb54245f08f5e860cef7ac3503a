<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Set size of byte array</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>August  8, 2016 at 10:00:00am</p></header><div class="content"><p>on Fri Aug 05 2016, KS Sreeram &lt;swift-users-AT-swift.org&gt; wrote:<br></p><p>&gt;&gt; On 05-Aug-2016, at 1:19 PM, Daniel Vollmer &lt;lists at maven.de&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I’m by no means a Swift expert (not even a user at the moment), but I don&#39;t<br>&gt;&gt; see a way to do this either. The best that comes to mind is initializing a<br>&gt;&gt; ContiguousArray with the sufficient capacity as size, using<br>&gt;&gt; withUnsafeBufferPointer to overwrite elements, and then use replaceAll() with<br>&gt;&gt; an empty collection to remove the excess size.<br>&gt;<br>&gt; The only initializer that could help with this is:<br>&gt; init(count:repeatedValue:). Unfortunately, this means the buffer is<br>&gt; written to twice - once in the initializer, and a second time to<br>&gt; actually fill in the data. It’s not efficient.<br>&gt;<br>&gt;&gt; <br>&gt;&gt; I&#39;d think that just reserving enough capacity and then appending the elements<br>&gt;&gt; one-by-one will be (at least?) as efficient: The byte is always copied anyway,<br>&gt;&gt; and in this case you wouldn’t have to default-construct the capacity beforehand.<br>&gt;<br>&gt; This too isn’t efficient because each append call will incur an the<br>&gt; cost of checking for sufficient capacity and also incrementing the<br>&gt; size. The additional penalty could dwarf the cost of actually copying<br>&gt; a byte! I don’t think the compiler is capable of removing this<br>&gt; inefficiency.<br></p><p>Create a Sequence that represents the elements you&#39;re going to append,<br>e.g.:<br></p><p>  var a = [1, 2]<br>  a.reserve(256)<br>  a += sequence(first: 3, next: {$0 &lt; 1000 ? ($0 + 3) * 2 : nil})<br></p><p>There are lots of ways to make Sequences, but the overloaded sequence()<br>functions are probably the easiest.<br></p><p>HTH,<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
