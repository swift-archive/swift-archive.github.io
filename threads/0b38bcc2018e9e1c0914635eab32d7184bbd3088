<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>[libdispatch] DISPATCH_QUEUE_SERIAL &amp; DISPATCH_QUEUE_CONCURRENT</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>January 19, 2016 at 02:00:00pm</p></header><div class="content"><p>I’m trying to use libdispatch from Swift, but something is off with DISPATCH_QUEUE_SERIAL &amp; DISPATCH_QUEUE_CONCURRENT:<br></p><p><br>func test() {<br>    let queueA = dispatch_queue_create(&quot;a&quot;, DISPATCH_QUEUE_SERIAL)<br>    let queueB = dispatch_queue_create(&quot;b&quot;, DISPATCH_QUEUE_CONCURRENT)<br>}<br></p><p><br></p><p>Dispatch.swift:81:45: error: cannot convert value of type &#39;()&#39; to expected argument type &#39;dispatch_queue_attr_t&#39; (aka &#39;COpaquePointer&#39;)<br>    let queueA = dispatch_queue_create(&quot;a&quot;, DISPATCH_QUEUE_SERIAL)<br>                                            ^~~~~~~~~~~~~~~~~~~~~<br>Dispatch.swift:82:45: error: use of unresolved identifier &#39;DISPATCH_QUEUE_CONCURRENT&#39;<br>    let queueB = dispatch_queue_create(&quot;b&quot;, DISPATCH_QUEUE_CONCURRENT)<br>                                            ^~~~~~~~~~~~~~~~~~~~~~~~~<br></p><p><br>/Daniel<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ddf7419fbdd69635522af227c08327c?s=50"></div><header><strong>[libdispatch] DISPATCH_QUEUE_SERIAL &amp; DISPATCH_QUEUE_CONCURRENT</strong> from <string>David P Grove</string> &lt;groved at us.ibm.com&gt;<p>January 19, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; From: Daniel Eggert via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt;<br>&gt;<br>&gt; I’m trying to use libdispatch from Swift, but something is off with<br>&gt; DISPATCH_QUEUE_SERIAL &amp; DISPATCH_QUEUE_CONCURRENT:<br>&gt;<br>&gt;<br>&gt; func test() {<br>&gt;     let queueA = dispatch_queue_create(&quot;a&quot;, DISPATCH_QUEUE_SERIAL)<br>&gt;     let queueB = dispatch_queue_create(&quot;b&quot;, DISPATCH_QUEUE_CONCURRENT)<br>&gt; }<br>&gt;<br>&gt;<br>&gt;<br>&gt; Dispatch.swift:81:45: error: cannot convert value of type &#39;()&#39; to<br>&gt; expected argument type &#39;dispatch_queue_attr_t&#39; (aka &#39;COpaquePointer&#39;)<br>&gt;     let queueA = dispatch_queue_create(&quot;a&quot;, DISPATCH_QUEUE_SERIAL)<br>&gt;                                             ^~~~~~~~~~~~~~~~~~~~~<br>&gt; Dispatch.swift:82:45: error: use of unresolved identifier<br>&gt; &#39;DISPATCH_QUEUE_CONCURRENT&#39;<br>&gt;     let queueB = dispatch_queue_create(&quot;b&quot;, DISPATCH_QUEUE_CONCURRENT)<br>&gt;                                             ^~~~~~~~~~~~~~~~~~~~~~~~~<br></p><p>Hi,<br></p><p>	I believe the issue is that the definition of DISPATCH_QUEUE_SERIAL<br>and DISPATCH_QUEUE_CONCURRENT can&#39;t be processed by the Swift importer.<br></p><p>	There&#39;s a pull request that updates the Dispatch overlay (<br>https://github.com/apple/swift/pull/974) that we&#39;ve been using to work<br>around this.  It is working around https://bugs.swift.org/browse/SR-141<br></p><p>--dave<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160119/ef1465e3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>[libdispatch] DISPATCH_QUEUE_SERIAL &amp; DISPATCH_QUEUE_CONCURRENT</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>January 19, 2016 at 09:00:00am</p></header><div class="content"><p>Hi Dave, Daniel,<br></p><p>I responded in the bug but I will also respond here:<br></p><p>On Linux, I expect there to be no overlay. Instead we will just have a module map and swift files created by the dispatch project itself. This is what we do for Foundation, and it does require that stuff in the Darwin overlay is duplicated as part of the swift-corelibs-foundation project for Linux.<br></p><p>The purpose of the overlay on Darwin is that we cannot yet ship Swift code as part of dispatch itself (since the standard library is shipped with each app as a static library). We don’t have that limitation on Linux.<br></p><p>- Tony<br></p><p>&gt; On Jan 19, 2016, at 5:38 AM, David P Grove via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; &gt; From: Daniel Eggert via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt;<br>&gt; &gt; <br>&gt; &gt; I’m trying to use libdispatch from Swift, but something is off with <br>&gt; &gt; DISPATCH_QUEUE_SERIAL &amp; DISPATCH_QUEUE_CONCURRENT:<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; func test() {<br>&gt; &gt;     let queueA = dispatch_queue_create(&quot;a&quot;, DISPATCH_QUEUE_SERIAL)<br>&gt; &gt;     let queueB = dispatch_queue_create(&quot;b&quot;, DISPATCH_QUEUE_CONCURRENT)<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; Dispatch.swift:81:45: error: cannot convert value of type &#39;()&#39; to <br>&gt; &gt; expected argument type &#39;dispatch_queue_attr_t&#39; (aka &#39;COpaquePointer&#39;)<br>&gt; &gt;     let queueA = dispatch_queue_create(&quot;a&quot;, DISPATCH_QUEUE_SERIAL)<br>&gt; &gt;                                             ^~~~~~~~~~~~~~~~~~~~~<br>&gt; &gt; Dispatch.swift:82:45: error: use of unresolved identifier <br>&gt; &gt; &#39;DISPATCH_QUEUE_CONCURRENT&#39;<br>&gt; &gt;     let queueB = dispatch_queue_create(&quot;b&quot;, DISPATCH_QUEUE_CONCURRENT)<br>&gt; &gt;                                             ^~~~~~~~~~~~~~~~~~~~~~~~~<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; I believe the issue is that the definition of DISPATCH_QUEUE_SERIAL and DISPATCH_QUEUE_CONCURRENT can&#39;t be processed by the Swift importer.<br>&gt; <br>&gt; There&#39;s a pull request that updates the Dispatch overlay (https://github.com/apple/swift/pull/974 &lt;https://github.com/apple/swift/pull/974&gt;) that we&#39;ve been using to work around this.  It is working around https://bugs.swift.org/browse/SR-141 &lt;https://bugs.swift.org/browse/SR-141&gt;<br>&gt; <br>&gt; --dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160119/0b4742af/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>[libdispatch] DISPATCH_QUEUE_SERIAL &amp; DISPATCH_QUEUE_CONCURRENT</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>January 19, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On 19 Jan 2016, at 18:56, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt; <br>&gt; Hi Dave, Daniel,<br>&gt; <br>&gt; I responded in the bug but I will also respond here:<br>&gt; <br>&gt; On Linux, I expect there to be no overlay. Instead we will just have a module map and swift files created by the dispatch project itself. This is what we do for Foundation, and it does require that stuff in the Darwin overlay is duplicated as part of the swift-corelibs-foundation project for Linux.<br>&gt; <br>&gt; The purpose of the overlay on Darwin is that we cannot yet ship Swift code as part of dispatch itself (since the standard library is shipped with each app as a static library). We don’t have that limitation on Linux.<br>&gt; <br>&gt; - Tony<br></p><p>Hi Tony,<br></p><p>That sounds like a good approach.<br></p><p>And having swift files created by the dispatch project itself would also solve the blocks issue -- those swift files could do native wrapping of the _f functions to re-create their block based counterparts. I added a comment to SR-577 that shows this. It would be a clean approach and allow for a a different blocks ABI on Linux -- something that’s apparently desired.<br></p><p>/Daniel<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>[libdispatch] DISPATCH_QUEUE_SERIAL &amp; DISPATCH_QUEUE_CONCURRENT</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>January 20, 2016 at 04:00:00pm</p></header><div class="content"><p>On 19 Jan 2016, at 18:56, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt; <br>&gt; On Linux, I expect there to be no overlay. Instead we will just have a module map and swift files created by the dispatch project itself. This is what we do for Foundation, and it does require that stuff in the Darwin overlay is duplicated as part of the swift-corelibs-foundation project for Linux.<br></p><p>Hi Tony,<br></p><p>Could you elaborate a bit more on this works?<br></p><p>I’d like to try to take a stab at adding Swift file(s) to swift-corelibs-libdispatch -- but I’m not sure how this would be done.<br></p><p>/Daniel<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>[libdispatch] DISPATCH_QUEUE_SERIAL &amp; DISPATCH_QUEUE_CONCURRENT</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>January 20, 2016 at 12:00:00pm</p></header><div class="content"><p>Hi Daniel,<br></p><p>&gt; On Jan 20, 2016, at 7:21 AM, Daniel Eggert &lt;danieleggert at me.com&gt; wrote:<br>&gt; <br>&gt; On 19 Jan 2016, at 18:56, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Linux, I expect there to be no overlay. Instead we will just have a module map and swift files created by the dispatch project itself. This is what we do for Foundation, and it does require that stuff in the Darwin overlay is duplicated as part of the swift-corelibs-foundation project for Linux.<br>&gt; <br>&gt; Hi Tony,<br>&gt; <br>&gt; Could you elaborate a bit more on this works?<br>&gt; <br>&gt; I’d like to try to take a stab at adding Swift file(s) to swift-corelibs-libdispatch -- but I’m not sure how this would be done.<br>&gt; <br>&gt; /Daniel<br>&gt; <br></p><p>For Foundation, we create a static library for the C portion of (this is CoreFoundation), then link it with the resulting dylib created from the Swift portion. The idea was that no one should use the C stuff directly. I’m not sure if this will work for dispatch - I haven’t tried it myself. We’re in very new territory here so I think we’ll have to experiment with a few things and see what works. I expect to find issues in clang’s support for this.<br></p><p>- Tony<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>[libdispatch] DISPATCH_QUEUE_SERIAL &amp; DISPATCH_QUEUE_CONCURRENT</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>January 20, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On 20 Jan 2016, at 21:36, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt; <br>&gt; Hi Daniel,<br>&gt; <br>&gt;&gt; On Jan 20, 2016, at 7:21 AM, Daniel Eggert &lt;danieleggert at me.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On 19 Jan 2016, at 18:56, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Linux, I expect there to be no overlay. Instead we will just have a module map and swift files created by the dispatch project itself. This is what we do for Foundation, and it does require that stuff in the Darwin overlay is duplicated as part of the swift-corelibs-foundation project for Linux.<br>&gt;&gt; <br>&gt;&gt; Hi Tony,<br>&gt;&gt; <br>&gt;&gt; Could you elaborate a bit more on this works?<br>&gt;&gt; <br>&gt;&gt; I’d like to try to take a stab at adding Swift file(s) to swift-corelibs-libdispatch -- but I’m not sure how this would be done.<br>&gt;&gt; <br>&gt;&gt; /Daniel<br>&gt;&gt; <br>&gt; <br>&gt; For Foundation, we create a static library for the C portion of (this is CoreFoundation), then link it with the resulting dylib created from the Swift portion. The idea was that no one should use the C stuff directly. I’m not sure if this will work for dispatch - I haven’t tried it myself. We’re in very new territory here so I think we’ll have to experiment with a few things and see what works. I expect to find issues in clang’s support for this.<br>&gt; <br>&gt; - Tony<br></p><p>That makes sense. Might be difficult to pull off for libdispatch due to the build system it uses. But it would be good if we could use Swift for anything that’s related to blocks / closures.<br></p><p>I wonder if the current work to add libdispatch to the existing build system will make it easier to add something like this.<br></p><p>/Daniel<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
