<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0026 Abstract classes and methods</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>February 28, 2016 at 07:00:00pm</p></header><div class="content"><p>It would be interesting to know your opinion on &quot;mixins&quot; proposal. Do you<br>need some kind of &quot;abstract classes for structs&quot;, perhaps with multiple<br>inheritance, or you find that more elegant architectual solutions to<br>problems can be found, without partially implemented constructs?<br>https://gist.github.com/Anton3/f0550922c1be0fc5447c<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160228/61ec4042/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0026 Abstract classes and methods</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>February 28, 2016 at 08:00:00pm</p></header><div class="content"><p>My GMail keeps breaking threads. I wrote this in reply to this post of<br>Matthew Johnson:<br>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160222/011351.html<br></p><p>2016-02-28 19:50 GMT+03:00 Антон Жилин &lt;antonyzhilin at gmail.com&gt;:<br></p><p>&gt; It would be interesting to know your opinion on &quot;mixins&quot; proposal. Do you<br>&gt; need some kind of &quot;abstract classes for structs&quot;, perhaps with multiple<br>&gt; inheritance, or you find that more elegant architectual solutions to<br>&gt; problems can be found, without partially implemented constructs?<br>&gt; https://gist.github.com/Anton3/f0550922c1be0fc5447c<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160228/c78d810f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c40db4457ab2c91a0d8006da31b177c6?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0026 Abstract classes and methods</strong> from <string>Trent Nadeau</string> &lt;tanadeau at gmail.com&gt;<p>February 28, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt;       • What is your evaluation of the proposal?<br>-1. I would prefer something like mixins that could work without<br>inheritance and would thus also work with value types.<br></p><p>&gt;       • Is the problem being addressed significant enough to warrant a<br>change to Swift?<br>Yes, although I don&#39;t think abstract classes that force inheritance and<br>only work for classes is the answer.<br></p><p>&gt;       • Does this proposal fit well with the feel and direction of Swift?<br>No.<br></p><p>&gt;       • If you have used other languages or libraries with a similar<br>feature, how do you feel that this proposal compares to those?<br>My opinion is based on other languages I&#39;ve used that have better ways to<br>handle this (Ruby, Python, D) as well as the downsides I&#39;ve seen with<br>abstract classes in Java and C++.<br></p><p>&gt;       • How much effort did you put into your review? A glance, a quick<br>reading, or an in-depth study?<br>I&#39;ve followed the various threads on this topic that have come up since<br>Swift was open-sourced.<br></p><p>On Sun, Feb 28, 2016 at 12:02 PM, Антон Жилин &lt;swift-evolution at swift.org&gt;<br>wrote:<br></p><p>&gt; My GMail keeps breaking threads. I wrote this in reply to this post of<br>&gt; Matthew Johnson:<br>&gt;<br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160222/011351.html<br>&gt;<br>&gt; 2016-02-28 19:50 GMT+03:00 Антон Жилин &lt;antonyzhilin at gmail.com&gt;:<br>&gt;<br>&gt;&gt; It would be interesting to know your opinion on &quot;mixins&quot; proposal. Do you<br>&gt;&gt; need some kind of &quot;abstract classes for structs&quot;, perhaps with multiple<br>&gt;&gt; inheritance, or you find that more elegant architectual solutions to<br>&gt;&gt; problems can be found, without partially implemented constructs?<br>&gt;&gt; https://gist.github.com/Anton3/f0550922c1be0fc5447c<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br>Trent Nadeau<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160228/270984de/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0026 Abstract classes and methods</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>February 28, 2016 at 05:00:00pm</p></header><div class="content"><p>So far while pushing for protocol oriented programming as one of Swift&#39;s distinctive features, the Swift team (or at least Chris Lattner) stated that inheritance is not a patter which is bad per se, it is a pattern which has its uses and it is fully supported by Swift just as much as other patterns Swift makes available. In my opinion of you have a feature, this feature should not fight with a hand tied behind its back: the &quot;if you do it, do it well&quot; approach :).<br></p><p>Answers like this seem to be the next best thing from asking to remove inheritance outright or to limit it more. Improving protocols, improving functional programming support, etc... all of that is orthogonal to improving OOP through class inheritance. <br>Support for abstract classes does not force people to use inheritance. Instead of doc using energies pushing down proposals that advocate for improving class based inheritance, I see energy better spent in making proposals that improve protocols unless they get filled by inheritance die hard afraid of the success of protocols meaning a death sentence for inheritance :).<br></p><p>Sent from my iPhone<br></p><p>&gt; On 28 Feb 2016, at 17:11, Trent Nadeau via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; &gt;       • What is your evaluation of the proposal?<br>&gt; -1. I would prefer something like mixins that could work without inheritance and would thus also work with value types.<br>&gt; <br>&gt; &gt;       • Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Yes, although I don&#39;t think abstract classes that force inheritance and only work for classes is the answer.<br>&gt; <br>&gt; &gt;       • Does this proposal fit well with the feel and direction of Swift?<br>&gt; No.<br>&gt; <br>&gt; &gt;       • If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; My opinion is based on other languages I&#39;ve used that have better ways to handle this (Ruby, Python, D) as well as the downsides I&#39;ve seen with abstract classes in Java and C++.<br>&gt; <br>&gt; &gt;       • How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; I&#39;ve followed the various threads on this topic that have come up since Swift was open-sourced.<br>&gt; <br>&gt;&gt; On Sun, Feb 28, 2016 at 12:02 PM, Антон Жилин &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; My GMail keeps breaking threads. I wrote this in reply to this post of Matthew Johnson:<br>&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160222/011351.html<br>&gt;&gt; <br>&gt;&gt; 2016-02-28 19:50 GMT+03:00 Антон Жилин &lt;antonyzhilin at gmail.com&gt;:<br>&gt;&gt;&gt; It would be interesting to know your opinion on &quot;mixins&quot; proposal. Do you need some kind of &quot;abstract classes for structs&quot;, perhaps with multiple inheritance, or you find that more elegant architectual solutions to problems can be found, without partially implemented constructs?<br>&gt;&gt;&gt; https://gist.github.com/Anton3/f0550922c1be0fc5447c<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Trent Nadeau<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160228/bbe0dec1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0026 Abstract classes and methods</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>February 28, 2016 at 09:00:00pm</p></header><div class="content"><p>Some more ideas. I do not necessary look at them as arguments &quot;for&quot; or<br>&quot;against&quot;, and additionally I&#39;m biased, as I&#39;ve already said.<br></p><p>While there are many use cases for mixins and multiple inheritance, in many<br>cases there is a superclass which is clearly predominant, almost like the<br>classical animals, cats and dogs.<br>Classes are a bit simpler to grasp for users of C++ and similar languages.<br>My mixins proposal currently has issues regarding multiple inheritance.<br>(Does it?)<br></p><p>The fact that classes and mixins have duplicated functionality, still bugs<br>me.<br>I also prefer &quot;pure&quot; approach, where everything is a struct unless it needs<br>class-only features - deinit, for example. It is my personal opinion.<br></p><p>2016-02-28 20:28 GMT+03:00 Goffredo Marocchi &lt;panajev at gmail.com&gt;:<br></p><p>&gt; So far while pushing for protocol oriented programming as one of Swift&#39;s<br>&gt; distinctive features, the Swift team (or at least Chris Lattner) stated<br>&gt; that inheritance is not a patter which is bad per se, it is a pattern which<br>&gt; has its uses and it is fully supported by Swift just as much as other<br>&gt; patterns Swift makes available. In my opinion of you have a feature, this<br>&gt; feature should not fight with a hand tied behind its back: the &quot;if you do<br>&gt; it, do it well&quot; approach :).<br>&gt;<br>&gt; Answers like this seem to be the next best thing from asking to remove<br>&gt; inheritance outright or to limit it more. Improving protocols, improving<br>&gt; functional programming support, etc... all of that is orthogonal to<br>&gt; improving OOP through class inheritance.<br>&gt; Support for abstract classes does not force people to use inheritance.<br>&gt; Instead of doc using energies pushing down proposals that advocate for<br>&gt; improving class based inheritance, I see energy better spent in making<br>&gt; proposals that improve protocols unless they get filled by inheritance die<br>&gt; hard afraid of the success of protocols meaning a death sentence for<br>&gt; inheritance :).<br>&gt;<br>&gt; Sent from my iPhone<br>&gt;<br>&gt; On 28 Feb 2016, at 17:11, Trent Nadeau via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt;       • What is your evaluation of the proposal?<br>&gt; -1. I would prefer something like mixins that could work without<br>&gt; inheritance and would thus also work with value types.<br>&gt;<br>&gt; &gt;       • Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt; Yes, although I don&#39;t think abstract classes that force inheritance and<br>&gt; only work for classes is the answer.<br>&gt;<br>&gt; &gt;       • Does this proposal fit well with the feel and direction of Swift?<br>&gt; No.<br>&gt;<br>&gt; &gt;       • If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt; My opinion is based on other languages I&#39;ve used that have better ways to<br>&gt; handle this (Ruby, Python, D) as well as the downsides I&#39;ve seen with<br>&gt; abstract classes in Java and C++.<br>&gt;<br>&gt; &gt;       • How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt; I&#39;ve followed the various threads on this topic that have come up since<br>&gt; Swift was open-sourced.<br>&gt;<br>&gt; On Sun, Feb 28, 2016 at 12:02 PM, Антон Жилин &lt;swift-evolution at swift.org&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; My GMail keeps breaking threads. I wrote this in reply to this post of<br>&gt;&gt; Matthew Johnson:<br>&gt;&gt;<br>&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160222/011351.html<br>&gt;&gt;<br>&gt;&gt; 2016-02-28 19:50 GMT+03:00 Антон Жилин &lt;antonyzhilin at gmail.com&gt;:<br>&gt;&gt;<br>&gt;&gt;&gt; It would be interesting to know your opinion on &quot;mixins&quot; proposal. Do<br>&gt;&gt;&gt; you need some kind of &quot;abstract classes for structs&quot;, perhaps with multiple<br>&gt;&gt;&gt; inheritance, or you find that more elegant architectual solutions to<br>&gt;&gt;&gt; problems can be found, without partially implemented constructs?<br>&gt;&gt;&gt; https://gist.github.com/Anton3/f0550922c1be0fc5447c<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Trent Nadeau<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160228/4f21dee7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a83279e420d8a16da6441b8333b93775?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0026 Abstract classes and methods</strong> from <string>David Scrève</string> &lt;david.screve at dlta-studio.com&gt;<p>February 28, 2016 at 07:00:00pm</p></header><div class="content"><p>Interesting approach…here, we prefer class approach to struct for 2 majors reasons :<br>1 - We usually use OOP and class is a common mechanism for us<br>2 - We reserve struct for small object because struct are value type and passing struct in parameter may be stack and time consuming.<br></p><p>Usually we design architecture of our product as something which is language independ. So the quality of a language is its ability to easily implement architecture concept that we’ve designed, but we thing that a language should not (or should have the less) impact the architecture that has been designed. <br></p><p><br>&gt; Le 28 févr. 2016 à 19:25, Антон Жилин via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Some more ideas. I do not necessary look at them as arguments &quot;for&quot; or &quot;against&quot;, and additionally I&#39;m biased, as I&#39;ve already said.<br>&gt; <br>&gt; While there are many use cases for mixins and multiple inheritance, in many cases there is a superclass which is clearly predominant, almost like the classical animals, cats and dogs.<br>&gt; Classes are a bit simpler to grasp for users of C++ and similar languages.<br>&gt; My mixins proposal currently has issues regarding multiple inheritance. (Does it?)<br>&gt; <br>&gt; The fact that classes and mixins have duplicated functionality, still bugs me.<br>&gt; I also prefer &quot;pure&quot; approach, where everything is a struct unless it needs class-only features - deinit, for example. It is my personal opinion.<br>&gt; <br>&gt; 2016-02-28 20:28 GMT+03:00 Goffredo Marocchi &lt;panajev at gmail.com &lt;mailto:panajev at gmail.com&gt;&gt;:<br>&gt; So far while pushing for protocol oriented programming as one of Swift&#39;s distinctive features, the Swift team (or at least Chris Lattner) stated that inheritance is not a patter which is bad per se, it is a pattern which has its uses and it is fully supported by Swift just as much as other patterns Swift makes available. In my opinion of you have a feature, this feature should not fight with a hand tied behind its back: the &quot;if you do it, do it well&quot; approach :).<br>&gt; <br>&gt; Answers like this seem to be the next best thing from asking to remove inheritance outright or to limit it more. Improving protocols, improving functional programming support, etc... all of that is orthogonal to improving OOP through class inheritance. <br>&gt; Support for abstract classes does not force people to use inheritance. Instead of doc using energies pushing down proposals that advocate for improving class based inheritance, I see energy better spent in making proposals that improve protocols unless they get filled by inheritance die hard afraid of the success of protocols meaning a death sentence for inheritance :).<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On 28 Feb 2016, at 17:11, Trent Nadeau via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; &gt;       • What is your evaluation of the proposal?<br>&gt;&gt; -1. I would prefer something like mixins that could work without inheritance and would thus also work with value types.<br>&gt;&gt; <br>&gt;&gt; &gt;       • Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; Yes, although I don&#39;t think abstract classes that force inheritance and only work for classes is the answer.<br>&gt;&gt; <br>&gt;&gt; &gt;       • Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; No.<br>&gt;&gt; <br>&gt;&gt; &gt;       • If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; My opinion is based on other languages I&#39;ve used that have better ways to handle this (Ruby, Python, D) as well as the downsides I&#39;ve seen with abstract classes in Java and C++.<br>&gt;&gt; <br>&gt;&gt; &gt;       • How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; I&#39;ve followed the various threads on this topic that have come up since Swift was open-sourced.<br>&gt;&gt; <br>&gt;&gt; On Sun, Feb 28, 2016 at 12:02 PM, Антон Жилин &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; My GMail keeps breaking threads. I wrote this in reply to this post of Matthew Johnson:<br>&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160222/011351.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160222/011351.html&gt;<br>&gt;&gt; <br>&gt;&gt; 2016-02-28 19:50 GMT+03:00 Антон Жилин &lt;antonyzhilin at gmail.com &lt;mailto:antonyzhilin at gmail.com&gt;&gt;:<br>&gt;&gt; It would be interesting to know your opinion on &quot;mixins&quot; proposal. Do you need some kind of &quot;abstract classes for structs&quot;, perhaps with multiple inheritance, or you find that more elegant architectual solutions to problems can be found, without partially implemented constructs?<br>&gt;&gt; https://gist.github.com/Anton3/f0550922c1be0fc5447c &lt;https://gist.github.com/Anton3/f0550922c1be0fc5447c&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Trent Nadeau<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160228/e84ad52f/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: smime.p7s<br>Type: application/pkcs7-signature<br>Size: 4233 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160228/e84ad52f/attachment.p7s&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0026 Abstract classes and methods</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>February 29, 2016 at 09:00:00am</p></header><div class="content"><p>Building the functionality into abstract classes artificially limits the context for the problem though.<br></p><p>For example, there are cases where it&#39;s desirable for a protocol to be able to specify the storage mechanism for a property. If a protocol gains the ability to do that, that&#39;s just one benefit that abstract classes provide that is no longer necessary.<br></p><p>-David<br></p><p>&gt; On Feb 28, 2016, at 9:28 AM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; So far while pushing for protocol oriented programming as one of Swift&#39;s distinctive features, the Swift team (or at least Chris Lattner) stated that inheritance is not a patter which is bad per se, it is a pattern which has its uses and it is fully supported by Swift just as much as other patterns Swift makes available. In my opinion of you have a feature, this feature should not fight with a hand tied behind its back: the &quot;if you do it, do it well&quot; approach :).<br>&gt; <br>&gt; Answers like this seem to be the next best thing from asking to remove inheritance outright or to limit it more. Improving protocols, improving functional programming support, etc... all of that is orthogonal to improving OOP through class inheritance. <br>&gt; Support for abstract classes does not force people to use inheritance. Instead of doc using energies pushing down proposals that advocate for improving class based inheritance, I see energy better spent in making proposals that improve protocols unless they get filled by inheritance die hard afraid of the success of protocols meaning a death sentence for inheritance :).<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On 28 Feb 2016, at 17:11, Trent Nadeau via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; &gt;       • What is your evaluation of the proposal?<br>&gt;&gt; -1. I would prefer something like mixins that could work without inheritance and would thus also work with value types.<br>&gt;&gt; <br>&gt;&gt; &gt;       • Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; Yes, although I don&#39;t think abstract classes that force inheritance and only work for classes is the answer.<br>&gt;&gt; <br>&gt;&gt; &gt;       • Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; No.<br>&gt;&gt; <br>&gt;&gt; &gt;       • If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; My opinion is based on other languages I&#39;ve used that have better ways to handle this (Ruby, Python, D) as well as the downsides I&#39;ve seen with abstract classes in Java and C++.<br>&gt;&gt; <br>&gt;&gt; &gt;       • How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; I&#39;ve followed the various threads on this topic that have come up since Swift was open-sourced.<br>&gt;&gt; <br>&gt;&gt; On Sun, Feb 28, 2016 at 12:02 PM, Антон Жилин &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; My GMail keeps breaking threads. I wrote this in reply to this post of Matthew Johnson:<br>&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160222/011351.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160222/011351.html&gt;<br>&gt;&gt; <br>&gt;&gt; 2016-02-28 19:50 GMT+03:00 Антон Жилин &lt;antonyzhilin at gmail.com &lt;mailto:antonyzhilin at gmail.com&gt;&gt;:<br>&gt;&gt; It would be interesting to know your opinion on &quot;mixins&quot; proposal. Do you need some kind of &quot;abstract classes for structs&quot;, perhaps with multiple inheritance, or you find that more elegant architectual solutions to problems can be found, without partially implemented constructs?<br>&gt;&gt; https://gist.github.com/Anton3/f0550922c1be0fc5447c &lt;https://gist.github.com/Anton3/f0550922c1be0fc5447c&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Trent Nadeau<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160229/bfe26421/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0026 Abstract classes and methods</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>February 29, 2016 at 05:00:00pm</p></header><div class="content"><p>You may want people to have the flexibility of using either of the two approaches :).<br></p><p>Sent from my iPhone<br></p><p>&gt; On 29 Feb 2016, at 17:16, David Owens II &lt;david at owensd.io&gt; wrote:<br>&gt; <br>&gt; Building the functionality into abstract classes artificially limits the context for the problem though.<br>&gt; <br>&gt; For example, there are cases where it&#39;s desirable for a protocol to be able to specify the storage mechanism for a property. If a protocol gains the ability to do that, that&#39;s just one benefit that abstract classes provide that is no longer necessary.<br>&gt; <br>&gt; -David<br>&gt; <br>&gt;&gt; On Feb 28, 2016, at 9:28 AM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; So far while pushing for protocol oriented programming as one of Swift&#39;s distinctive features, the Swift team (or at least Chris Lattner) stated that inheritance is not a patter which is bad per se, it is a pattern which has its uses and it is fully supported by Swift just as much as other patterns Swift makes available. In my opinion of you have a feature, this feature should not fight with a hand tied behind its back: the &quot;if you do it, do it well&quot; approach :).<br>&gt;&gt; <br>&gt;&gt; Answers like this seem to be the next best thing from asking to remove inheritance outright or to limit it more. Improving protocols, improving functional programming support, etc... all of that is orthogonal to improving OOP through class inheritance. <br>&gt;&gt; Support for abstract classes does not force people to use inheritance. Instead of doc using energies pushing down proposals that advocate for improving class based inheritance, I see energy better spent in making proposals that improve protocols unless they get filled by inheritance die hard afraid of the success of protocols meaning a death sentence for inheritance :).<br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt;&gt; On 28 Feb 2016, at 17:11, Trent Nadeau via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt;       • What is your evaluation of the proposal?<br>&gt;&gt;&gt; -1. I would prefer something like mixins that could work without inheritance and would thus also work with value types.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt;       • Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; Yes, although I don&#39;t think abstract classes that force inheritance and only work for classes is the answer.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt;       • Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; No.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt;       • If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; My opinion is based on other languages I&#39;ve used that have better ways to handle this (Ruby, Python, D) as well as the downsides I&#39;ve seen with abstract classes in Java and C++.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt;       • How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; I&#39;ve followed the various threads on this topic that have come up since Swift was open-sourced.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Sun, Feb 28, 2016 at 12:02 PM, Антон Жилин &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; My GMail keeps breaking threads. I wrote this in reply to this post of Matthew Johnson:<br>&gt;&gt;&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160222/011351.html<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 2016-02-28 19:50 GMT+03:00 Антон Жилин &lt;antonyzhilin at gmail.com&gt;:<br>&gt;&gt;&gt;&gt;&gt; It would be interesting to know your opinion on &quot;mixins&quot; proposal. Do you need some kind of &quot;abstract classes for structs&quot;, perhaps with multiple inheritance, or you find that more elegant architectual solutions to problems can be found, without partially implemented constructs?<br>&gt;&gt;&gt;&gt;&gt; https://gist.github.com/Anton3/f0550922c1be0fc5447c<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Trent Nadeau<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160229/617b2b6e/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
