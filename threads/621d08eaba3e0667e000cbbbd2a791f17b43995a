<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: An assignment operator := that ensures nil before assignment.</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>February 27, 2016 at 09:00:00am</p></header><div class="content"><p>Consider the use of “!” in the following:<br></p><p>var x: Int? = 5<br></p><p>x! = 2 // “!” is used to ensure non-nil value before assignment<br></p><p>The idea is to have a similar method for ensuring a nil value.<br></p><p>So instead of writing:<br></p><p>precondition( x == nil )<br>x = 3<br></p><p>You could write:<br></p><p>x := 3<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d172fa3c47108d84ee35a68e8d675c1?s=50"></div><header><strong>Proposal: An assignment operator := that ensures nil before assignment.</strong> from <string>Ross O&#39;Brien</string> &lt;narrativium+swift at gmail.com&gt;<p>February 27, 2016 at 02:00:00pm</p></header><div class="content"><p>How is this different from the rejected ??= proposal?<br></p><p>On Sat, Feb 27, 2016 at 2:34 PM, Amir Michail via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Consider the use of “!” in the following:<br>&gt;<br>&gt; var x: Int? = 5<br>&gt;<br>&gt; x! = 2 // “!” is used to ensure non-nil value before assignment<br>&gt;<br>&gt; The idea is to have a similar method for ensuring a nil value.<br>&gt;<br>&gt; So instead of writing:<br>&gt;<br>&gt; precondition( x == nil )<br>&gt; x = 3<br>&gt;<br>&gt; You could write:<br>&gt;<br>&gt; x := 3<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160227/cd849efe/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: An assignment operator := that ensures nil before assignment.</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>February 27, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Feb 27, 2016, at 9:46 AM, Ross O&#39;Brien &lt;narrativium+swift at gmail.com&gt; wrote:<br>&gt; <br>&gt; How is this different from the rejected ??= proposal?<br>&gt; <br></p><p>If the value is not nil, the program stops with an assertion error.<br></p><p>&gt; On Sat, Feb 27, 2016 at 2:34 PM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Consider the use of “!” in the following:<br>&gt; <br>&gt; var x: Int? = 5<br>&gt; <br>&gt; x! = 2 // “!” is used to ensure non-nil value before assignment<br>&gt; <br>&gt; The idea is to have a similar method for ensuring a nil value.<br>&gt; <br>&gt; So instead of writing:<br>&gt; <br>&gt; precondition( x == nil )<br>&gt; x = 3<br>&gt; <br>&gt; You could write:<br>&gt; <br>&gt; x := 3<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160227/f0abdb8e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d172fa3c47108d84ee35a68e8d675c1?s=50"></div><header><strong>Proposal: An assignment operator := that ensures nil before assignment.</strong> from <string>Ross O&#39;Brien</string> &lt;narrativium+swift at gmail.com&gt;<p>February 27, 2016 at 03:00:00pm</p></header><div class="content"><p>This is less desirable than ??= would have been. To summarise the two<br>operators:<br></p><p>lhs ??= rhs. lhs is an Optional&lt;T&gt;, rhs is a T or Optional&lt;T&gt;.<br>If lhs is nil, assign to lhs the value of rhs. If lhs is not nil, do<br>nothing.<br></p><p>lhs := rhs. lhs is an Optional&lt;T&gt;, rhs is a T or Optional&lt;T&gt;.<br>If lhs is nil, assign to lhs the value of rhs. If lhs is not nil, crash<br>with an assertion error.<br></p><p>The ??= operator is safer; its behaviour is clear and it doesn&#39;t cause my<br>code to crash. := is more dangerous; if I want to be sure my app won&#39;t<br>crash, I now need to check whether lhs is nil first... and if I do that, I<br>might as well use the = operator.<br></p><p>I don&#39;t see what advantages your operator brings to Swift, or why you think<br>it should be accepted when ??= operator was rejected.<br></p><p><br></p><p><br>On Sat, Feb 27, 2016 at 2:47 PM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Feb 27, 2016, at 9:46 AM, Ross O&#39;Brien &lt;narrativium+swift at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; How is this different from the rejected ??= proposal?<br>&gt;<br>&gt;<br>&gt; If the value is not nil, the program stops with an assertion error.<br>&gt;<br>&gt; On Sat, Feb 27, 2016 at 2:34 PM, Amir Michail via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Consider the use of “!” in the following:<br>&gt;&gt;<br>&gt;&gt; var x: Int? = 5<br>&gt;&gt;<br>&gt;&gt; x! = 2 // “!” is used to ensure non-nil value before assignment<br>&gt;&gt;<br>&gt;&gt; The idea is to have a similar method for ensuring a nil value.<br>&gt;&gt;<br>&gt;&gt; So instead of writing:<br>&gt;&gt;<br>&gt;&gt; precondition( x == nil )<br>&gt;&gt; x = 3<br>&gt;&gt;<br>&gt;&gt; You could write:<br>&gt;&gt;<br>&gt;&gt; x := 3<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160227/76b3d277/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: An assignment operator := that ensures nil before assignment.</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>February 27, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Feb 27, 2016, at 10:02 AM, Ross O&#39;Brien &lt;narrativium+swift at gmail.com&gt; wrote:<br>&gt; <br>&gt; This is less desirable than ??= would have been. To summarise the two operators:<br>&gt; <br>&gt; lhs ??= rhs. lhs is an Optional&lt;T&gt;, rhs is a T or Optional&lt;T&gt;.<br>&gt; If lhs is nil, assign to lhs the value of rhs. If lhs is not nil, do nothing.<br>&gt; <br>&gt; lhs := rhs. lhs is an Optional&lt;T&gt;, rhs is a T or Optional&lt;T&gt;.<br>&gt; If lhs is nil, assign to lhs the value of rhs. If lhs is not nil, crash with an assertion error.<br>&gt; <br>&gt; The ??= operator is safer; its behaviour is clear and it doesn&#39;t cause my code to crash. := is more dangerous; if I want to be sure my app won&#39;t crash, I now need to check whether lhs is nil first... and if I do that, I might as well use the = operator.<br>&gt; <br>&gt; I don&#39;t see what advantages your operator brings to Swift, or why you think it should be accepted when ??= operator was rejected.<br></p><p>This is how I write code. I use preconditions everywhere because I want to know about errors as soon as possible.<br></p><p>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; On Sat, Feb 27, 2016 at 2:47 PM, Amir Michail &lt;a.michail at me.com &lt;mailto:a.michail at me.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Feb 27, 2016, at 9:46 AM, Ross O&#39;Brien &lt;narrativium+swift at gmail.com &lt;mailto:narrativium+swift at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; How is this different from the rejected ??= proposal?<br>&gt;&gt; <br>&gt; <br>&gt; If the value is not nil, the program stops with an assertion error.<br>&gt; <br>&gt;&gt; On Sat, Feb 27, 2016 at 2:34 PM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; Consider the use of “!” in the following:<br>&gt;&gt; <br>&gt;&gt; var x: Int? = 5<br>&gt;&gt; <br>&gt;&gt; x! = 2 // “!” is used to ensure non-nil value before assignment<br>&gt;&gt; <br>&gt;&gt; The idea is to have a similar method for ensuring a nil value.<br>&gt;&gt; <br>&gt;&gt; So instead of writing:<br>&gt;&gt; <br>&gt;&gt; precondition( x == nil )<br>&gt;&gt; x = 3<br>&gt;&gt; <br>&gt;&gt; You could write:<br>&gt;&gt; <br>&gt;&gt; x := 3<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160227/3d6f9109/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>Proposal: An assignment operator := that ensures nil before assignment.</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>February 27, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Feb 27, 2016, at 9:34 AM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Consider the use of “!” in the following:<br>&gt; <br>&gt; var x: Int? = 5<br>&gt; <br>&gt; x! = 2 // “!” is used to ensure non-nil value before assignment<br>&gt; <br>&gt; The idea is to have a similar method for ensuring a nil value.<br>&gt; <br>&gt; So instead of writing:<br>&gt; <br>&gt; precondition( x == nil )<br>&gt; x = 3<br>&gt; <br>&gt; You could write:<br>&gt; <br>&gt; x := 3<br></p><p>You could use an `inout` function to solve this now without adding surface area to the language and standard lib.<br></p><p>I&#39;ve noticed, Amir, that people often ask you to flesh these ideas out more before submitting them to evolution. Would you please address these questions on this (and future) proposals? It might speed these discussions along.<br></p><p>- Why do you want this feature?<br></p><p>- Would you please provide a better, real-world example (perhaps code extracted from a real-world project you&#39;ve worked on that would benefit) that demonstrates the benefits of your suggestion?<br></p><p>- Can you go into more detail on the the design of the proposal? How it may be implemented? Caveats? Alternatives considered?<br></p><p>Your emails to evolution are generally too short and not fleshed out enough to really evaluate.<br></p><p>Stephen<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: An assignment operator := that ensures nil before assignment.</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>February 27, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Feb 27, 2016, at 10:11 AM, Stephen Celis &lt;stephen.celis at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Feb 27, 2016, at 9:34 AM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Consider the use of “!” in the following:<br>&gt;&gt; <br>&gt;&gt; var x: Int? = 5<br>&gt;&gt; <br>&gt;&gt; x! = 2 // “!” is used to ensure non-nil value before assignment<br>&gt;&gt; <br>&gt;&gt; The idea is to have a similar method for ensuring a nil value.<br>&gt;&gt; <br>&gt;&gt; So instead of writing:<br>&gt;&gt; <br>&gt;&gt; precondition( x == nil )<br>&gt;&gt; x = 3<br>&gt;&gt; <br>&gt;&gt; You could write:<br>&gt;&gt; <br>&gt;&gt; x := 3<br>&gt; <br>&gt; You could use an `inout` function to solve this now without adding surface area to the language and standard lib.<br>&gt; <br></p><p>I think this := would be used so often that it should be part of the language/standard library.<br></p><p>&gt; I&#39;ve noticed, Amir, that people often ask you to flesh these ideas out more before submitting them to evolution. Would you please address these questions on this (and future) proposals? It might speed these discussions along.<br>&gt; <br>&gt; - Why do you want this feature?<br>&gt; <br>&gt; - Would you please provide a better, real-world example (perhaps code extracted from a real-world project you&#39;ve worked on that would benefit) that demonstrates the benefits of your suggestion?<br>&gt; <br>&gt; - Can you go into more detail on the the design of the proposal? How it may be implemented? Caveats? Alternatives considered?<br>&gt; <br>&gt; Your emails to evolution are generally too short and not fleshed out enough to really evaluate.<br>&gt; <br>&gt; Stephen<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>Proposal: An assignment operator := that ensures nil before assignment.</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>February 27, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Feb 27, 2016, at 10:38 AM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt; <br>&gt; I think this := would be used so often that it should be part of the language/standard library.<br></p><p>Would you please justify this? Would you please answer the questions from my reply?<br></p><p>Stephen<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: An assignment operator := that ensures nil before assignment.</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>February 27, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Feb 27, 2016, at 10:39 AM, Stephen Celis &lt;stephen.celis at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Feb 27, 2016, at 10:38 AM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I think this := would be used so often that it should be part of the language/standard library.<br>&gt; <br>&gt; Would you please justify this? Would you please answer the questions from my reply?<br></p><p>See: http://research.microsoft.com/apps/pubs/default.aspx?id=70290<br></p><p>&gt; <br>&gt; Stephen<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>Proposal: An assignment operator := that ensures nil before assignment.</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>February 27, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Feb 27, 2016, at 10:57 AM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Feb 27, 2016, at 10:39 AM, Stephen Celis &lt;stephen.celis at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 27, 2016, at 10:38 AM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think this := would be used so often that it should be part of the language/standard library.<br>&gt;&gt; <br>&gt;&gt; Would you please justify this? Would you please answer the questions from my reply?<br>&gt; <br>&gt; See: http://research.microsoft.com/apps/pubs/default.aspx?id=70290<br></p><p>See what part? This document provides no justification for any kind of assignment/assertion operator. Please provide additional context around links you share and how they relate to your actual proposal.<br></p><p>In this case your proposal still needs justification. Would you, again, please answer these questions to provide it?<br></p><p>- Why do you want this feature?<br></p><p>- Would you please provide a better, real-world example (perhaps code extracted from a real-world project you&#39;ve worked on that would benefit) that demonstrates the benefits of your suggestion?<br></p><p>- Can you go into more detail on the the design of the proposal? How it may be implemented? Caveats? Alternatives considered?<br></p><p>--<br>Stephen<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: An assignment operator := that ensures nil before assignment.</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>February 27, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Feb 27, 2016, at 11:07 AM, Stephen Celis &lt;stephen.celis at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 27, 2016, at 10:57 AM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 27, 2016, at 10:39 AM, Stephen Celis &lt;stephen.celis at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 27, 2016, at 10:38 AM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think this := would be used so often that it should be part of the language/standard library.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Would you please justify this? Would you please answer the questions from my reply?<br>&gt;&gt; <br>&gt;&gt; See: http://research.microsoft.com/apps/pubs/default.aspx?id=70290<br>&gt; <br>&gt; See what part? This document provides no justification for any kind of assignment/assertion operator. Please provide additional context around links you share and how they relate to your actual proposal.<br></p><p>The justification for assertions in general is empirical and the Microsoft paper provides it.<br></p><p>To explore how useful := assertions are in particular would need a study like the Microsoft one that focuses exclusively on := assertions.<br></p><p>&gt; <br>&gt; In this case your proposal still needs justification. Would you, again, please answer these questions to provide it?<br>&gt; <br>&gt; - Why do you want this feature?<br>&gt; <br>&gt; - Would you please provide a better, real-world example (perhaps code extracted from a real-world project you&#39;ve worked on that would benefit) that demonstrates the benefits of your suggestion?<br>&gt; <br>&gt; - Can you go into more detail on the the design of the proposal? How it may be implemented? Caveats? Alternatives considered?<br>&gt; <br>&gt; --<br>&gt; Stephen<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fa2575f192bfdb93dd4cb043545a5df4?s=50"></div><header><strong>Proposal: An assignment operator := that ensures nil before assignment.</strong> from <string>Ross O&#39;Brien</string> &lt;narrativium at gmail.com&gt;<p>February 27, 2016 at 04:00:00pm</p></header><div class="content"><p>The justification for assertions in general is unnecessary. Swift already<br>has assertion functions: &quot;assert&quot; and &quot;precondition&quot; (even though it&#39;s<br>still not clear to me why we have two of them). This thread isn&#39;t about<br>software assertions.<br></p><p>This thread is about your := assertion operator. This thread *is* the<br>exploration of it, as it relates to Swift. You think it would be worth<br>including in Swift? Then argue its case. Tell us why := is useful. Provide<br>a code sample of one of the situations you think it would be used so often<br>for. Show us the value.<br></p><p>Don&#39;t expect us to do all the work here. Your suggestions lack sufficient<br>information to make their worth obvious to us. At the moment you&#39;re not<br>convincing us that you&#39;ve thought about your proposal enough to even decide<br>if it was worth pitching, before you pitched it. Please make that effort.<br></p><p>On Sat, Feb 27, 2016 at 4:10 PM, Amir Michail via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Feb 27, 2016, at 11:07 AM, Stephen Celis &lt;stephen.celis at gmail.com&gt;<br>&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;&gt; On Feb 27, 2016, at 10:57 AM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On Feb 27, 2016, at 10:39 AM, Stephen Celis &lt;stephen.celis at gmail.com&gt;<br>&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; On Feb 27, 2016, at 10:38 AM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; I think this := would be used so often that it should be part of the<br>&gt; language/standard library.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Would you please justify this? Would you please answer the questions<br>&gt; from my reply?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; See: http://research.microsoft.com/apps/pubs/default.aspx?id=70290<br>&gt; &gt;<br>&gt; &gt; See what part? This document provides no justification for any kind of<br>&gt; assignment/assertion operator. Please provide additional context around<br>&gt; links you share and how they relate to your actual proposal.<br>&gt;<br>&gt; The justification for assertions in general is empirical and the Microsoft<br>&gt; paper provides it.<br>&gt;<br>&gt; To explore how useful := assertions are in particular would need a study<br>&gt; like the Microsoft one that focuses exclusively on := assertions.<br>&gt;<br>&gt; &gt;<br>&gt; &gt; In this case your proposal still needs justification. Would you, again,<br>&gt; please answer these questions to provide it?<br>&gt; &gt;<br>&gt; &gt; - Why do you want this feature?<br>&gt; &gt;<br>&gt; &gt; - Would you please provide a better, real-world example (perhaps code<br>&gt; extracted from a real-world project you&#39;ve worked on that would benefit)<br>&gt; that demonstrates the benefits of your suggestion?<br>&gt; &gt;<br>&gt; &gt; - Can you go into more detail on the the design of the proposal? How it<br>&gt; may be implemented? Caveats? Alternatives considered?<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Stephen<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160227/b36e8445/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: An assignment operator := that ensures nil before assignment.</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>February 27, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Feb 27, 2016, at 11:19 AM, Ross O&#39;Brien &lt;narrativium at gmail.com&gt; wrote:<br>&gt; <br>&gt; The justification for assertions in general is unnecessary. Swift already has assertion functions: &quot;assert&quot; and &quot;precondition&quot; (even though it&#39;s still not clear to me why we have two of them). This thread isn&#39;t about software assertions.<br>&gt; <br>&gt; This thread is about your := assertion operator. This thread *is* the exploration of it, as it relates to Swift. You think it would be worth including in Swift? Then argue its case. Tell us why := is useful. Provide a code sample of one of the situations you think it would be used so often for. Show us the value.<br></p><p>Again, this would require an empirical study like the Microsoft one. You can’t argue your way through it.<br></p><p>&gt; <br>&gt; Don&#39;t expect us to do all the work here. Your suggestions lack sufficient information to make their worth obvious to us. At the moment you&#39;re not convincing us that you&#39;ve thought about your proposal enough to even decide if it was worth pitching, before you pitched it. Please make that effort.<br>&gt; <br>&gt; On Sat, Feb 27, 2016 at 4:10 PM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; &gt; On Feb 27, 2016, at 11:07 AM, Stephen Celis &lt;stephen.celis at gmail.com &lt;mailto:stephen.celis at gmail.com&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;&gt; On Feb 27, 2016, at 10:57 AM, Amir Michail &lt;a.michail at me.com &lt;mailto:a.michail at me.com&gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On Feb 27, 2016, at 10:39 AM, Stephen Celis &lt;stephen.celis at gmail.com &lt;mailto:stephen.celis at gmail.com&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; On Feb 27, 2016, at 10:38 AM, Amir Michail &lt;a.michail at me.com &lt;mailto:a.michail at me.com&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; I think this := would be used so often that it should be part of the language/standard library.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Would you please justify this? Would you please answer the questions from my reply?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; See: http://research.microsoft.com/apps/pubs/default.aspx?id=70290 &lt;http://research.microsoft.com/apps/pubs/default.aspx?id=70290&gt;<br>&gt; &gt;<br>&gt; &gt; See what part? This document provides no justification for any kind of assignment/assertion operator. Please provide additional context around links you share and how they relate to your actual proposal.<br>&gt; <br>&gt; The justification for assertions in general is empirical and the Microsoft paper provides it.<br>&gt; <br>&gt; To explore how useful := assertions are in particular would need a study like the Microsoft one that focuses exclusively on := assertions.<br>&gt; <br>&gt; &gt;<br>&gt; &gt; In this case your proposal still needs justification. Would you, again, please answer these questions to provide it?<br>&gt; &gt;<br>&gt; &gt; - Why do you want this feature?<br>&gt; &gt;<br>&gt; &gt; - Would you please provide a better, real-world example (perhaps code extracted from a real-world project you&#39;ve worked on that would benefit) that demonstrates the benefits of your suggestion?<br>&gt; &gt;<br>&gt; &gt; - Can you go into more detail on the the design of the proposal? How it may be implemented? Caveats? Alternatives considered?<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Stephen<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160227/18bb7156/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>Proposal: An assignment operator := that ensures nil before assignment.</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>February 27, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Feb 27, 2016, at 11:21 AM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 27, 2016, at 11:19 AM, Ross O&#39;Brien &lt;narrativium at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The justification for assertions in general is unnecessary. Swift already has assertion functions: &quot;assert&quot; and &quot;precondition&quot; (even though it&#39;s still not clear to me why we have two of them). This thread isn&#39;t about software assertions.<br>&gt;&gt; <br>&gt;&gt; This thread is about your := assertion operator. This thread *is* the exploration of it, as it relates to Swift. You think it would be worth including in Swift? Then argue its case. Tell us why := is useful. Provide a code sample of one of the situations you think it would be used so often for. Show us the value.<br>&gt; <br>&gt; Again, this would require an empirical study like the Microsoft one. You can’t argue your way through it.<br></p><p>But if you were to provide a reasonably thorough argument for proposing it here it could be taken more seriously.<br></p><p>My earlier (repeated) questions were my attempt of better understanding exactly what is driving your motivation behind the proposal. Are you evading them for a reason? I would like to actually give a careful consideration of your proposals in the future, but without carefully answering these questions I find it difficult to give them fair evaluations<br></p><p>So, let&#39;s try this again:<br></p><p>- Why do you want this feature?<br></p><p>- Would you please provide a better, real-world example (perhaps code extracted from a real-world project you&#39;ve worked on that would benefit) that demonstrates the benefits of your suggestion?<br></p><p>- Can you go into more detail on the the design of the proposal? How it may be implemented? Caveats? Alternatives considered?<br></p><p>--<br>Stephen<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>Proposal: An assignment operator := that ensures nil before assignment.</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>February 27, 2016 at 11:00:00pm</p></header><div class="content"><p>Microsofts study is based on C# (no personal hand’s on experience myself) which was modeled after Java.<br></p><p>As far as I can tell from the code example in the document - it looks like it made the mistake with “null” that Java did (a hole in the type system).  <br></p><p>nil in Swift is actually None for optional types - which were a type-safe way of dealing of situations like this.  <br></p><p>Which in that case would make the study meaningless since some of the base assumptions do not apply in Swift.<br></p><p>Which comes back to what a few people are asking for … examples, situations where Swift would have a problem that would need this addition.<br></p><p><br>&gt; On 2016-02-27, at 23:21:08, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 27, 2016, at 11:19 AM, Ross O&#39;Brien &lt;narrativium at gmail.com &lt;mailto:narrativium at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The justification for assertions in general is unnecessary. Swift already has assertion functions: &quot;assert&quot; and &quot;precondition&quot; (even though it&#39;s still not clear to me why we have two of them). This thread isn&#39;t about software assertions.<br>&gt;&gt; <br>&gt;&gt; This thread is about your := assertion operator. This thread *is* the exploration of it, as it relates to Swift. You think it would be worth including in Swift? Then argue its case. Tell us why := is useful. Provide a code sample of one of the situations you think it would be used so often for. Show us the value.<br>&gt; <br>&gt; Again, this would require an empirical study like the Microsoft one. You can’t argue your way through it.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Don&#39;t expect us to do all the work here. Your suggestions lack sufficient information to make their worth obvious to us. At the moment you&#39;re not convincing us that you&#39;ve thought about your proposal enough to even decide if it was worth pitching, before you pitched it. Please make that effort.<br>&gt;&gt; <br>&gt;&gt; On Sat, Feb 27, 2016 at 4:10 PM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt; On Feb 27, 2016, at 11:07 AM, Stephen Celis &lt;stephen.celis at gmail.com &lt;mailto:stephen.celis at gmail.com&gt;&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; On Feb 27, 2016, at 10:57 AM, Amir Michail &lt;a.michail at me.com &lt;mailto:a.michail at me.com&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; On Feb 27, 2016, at 10:39 AM, Stephen Celis &lt;stephen.celis at gmail.com &lt;mailto:stephen.celis at gmail.com&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; On Feb 27, 2016, at 10:38 AM, Amir Michail &lt;a.michail at me.com &lt;mailto:a.michail at me.com&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; I think this := would be used so often that it should be part of the language/standard library.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Would you please justify this? Would you please answer the questions from my reply?<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; See: http://research.microsoft.com/apps/pubs/default.aspx?id=70290 &lt;http://research.microsoft.com/apps/pubs/default.aspx?id=70290&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; See what part? This document provides no justification for any kind of assignment/assertion operator. Please provide additional context around links you share and how they relate to your actual proposal.<br>&gt;&gt; <br>&gt;&gt; The justification for assertions in general is empirical and the Microsoft paper provides it.<br>&gt;&gt; <br>&gt;&gt; To explore how useful := assertions are in particular would need a study like the Microsoft one that focuses exclusively on := assertions.<br>&gt;&gt; <br>&gt;&gt; &gt;<br>&gt;&gt; &gt; In this case your proposal still needs justification. Would you, again, please answer these questions to provide it?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; - Why do you want this feature?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; - Would you please provide a better, real-world example (perhaps code extracted from a real-world project you&#39;ve worked on that would benefit) that demonstrates the benefits of your suggestion?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; - Can you go into more detail on the the design of the proposal? How it may be implemented? Caveats? Alternatives considered?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; --<br>&gt;&gt; &gt; Stephen<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160227/0c617e5e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: An assignment operator := that ensures nil before assignment.</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>February 27, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Feb 27, 2016, at 11:26 AM, Craig Cruden &lt;ccruden at novafore.com&gt; wrote:<br>&gt; <br>&gt; Microsofts study is based on C# (no personal hand’s on experience myself) which was modeled after Java.<br>&gt; <br>&gt; As far as I can tell from the code example in the document - it looks like it made the mistake with “null” that Java did (a hole in the type system).  <br>&gt; <br>&gt; nil in Swift is actually None for optional types - which were a type-safe way of dealing of situations like this.  <br>&gt; <br>&gt; Which in that case would make the study meaningless since some of the base assumptions do not apply in Swift.<br>&gt; <br>&gt; Which comes back to what a few people are asking for … examples, situations where Swift would have a problem that would need this addition.<br></p><p>It’s a convenience feature that saves lots of finger typing.<br></p><p>Which would you rather have:<br></p><p>precondition( x == nil )<br>x = 3<br></p><p>OR<br></p><p>x: = 3<br></p><p>?<br></p><p>&gt; <br>&gt; <br>&gt;&gt; On 2016-02-27, at 23:21:08, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 27, 2016, at 11:19 AM, Ross O&#39;Brien &lt;narrativium at gmail.com &lt;mailto:narrativium at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The justification for assertions in general is unnecessary. Swift already has assertion functions: &quot;assert&quot; and &quot;precondition&quot; (even though it&#39;s still not clear to me why we have two of them). This thread isn&#39;t about software assertions.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This thread is about your := assertion operator. This thread *is* the exploration of it, as it relates to Swift. You think it would be worth including in Swift? Then argue its case. Tell us why := is useful. Provide a code sample of one of the situations you think it would be used so often for. Show us the value.<br>&gt;&gt; <br>&gt;&gt; Again, this would require an empirical study like the Microsoft one. You can’t argue your way through it.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Don&#39;t expect us to do all the work here. Your suggestions lack sufficient information to make their worth obvious to us. At the moment you&#39;re not convincing us that you&#39;ve thought about your proposal enough to even decide if it was worth pitching, before you pitched it. Please make that effort.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Sat, Feb 27, 2016 at 4:10 PM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt; On Feb 27, 2016, at 11:07 AM, Stephen Celis &lt;stephen.celis at gmail.com &lt;mailto:stephen.celis at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt; On Feb 27, 2016, at 10:57 AM, Amir Michail &lt;a.michail at me.com &lt;mailto:a.michail at me.com&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; On Feb 27, 2016, at 10:39 AM, Stephen Celis &lt;stephen.celis at gmail.com &lt;mailto:stephen.celis at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; On Feb 27, 2016, at 10:38 AM, Amir Michail &lt;a.michail at me.com &lt;mailto:a.michail at me.com&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; I think this := would be used so often that it should be part of the language/standard library.<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; Would you please justify this? Would you please answer the questions from my reply?<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; See: http://research.microsoft.com/apps/pubs/default.aspx?id=70290 &lt;http://research.microsoft.com/apps/pubs/default.aspx?id=70290&gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; See what part? This document provides no justification for any kind of assignment/assertion operator. Please provide additional context around links you share and how they relate to your actual proposal.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The justification for assertions in general is empirical and the Microsoft paper provides it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; To explore how useful := assertions are in particular would need a study like the Microsoft one that focuses exclusively on := assertions.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; In this case your proposal still needs justification. Would you, again, please answer these questions to provide it?<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; - Why do you want this feature?<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; - Would you please provide a better, real-world example (perhaps code extracted from a real-world project you&#39;ve worked on that would benefit) that demonstrates the benefits of your suggestion?<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; - Can you go into more detail on the the design of the proposal? How it may be implemented? Caveats? Alternatives considered?<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; --<br>&gt;&gt;&gt; &gt; Stephen<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160227/286c94f2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>Proposal: An assignment operator := that ensures nil before assignment.</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>February 27, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Feb 27, 2016, at 11:28 AM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It’s a convenience feature that saves lots of finger typing.<br>&gt; <br>&gt; Which would you rather have:<br>&gt; <br>&gt; precondition( x == nil )<br>&gt; x = 3<br>&gt; <br>&gt; OR<br>&gt; <br>&gt; x: = 3<br>&gt; <br>&gt; ?<br></p><p>A bunch of us have tried to point out that toy examples like these are not helpful enough.<br></p><p>You&#39;re not addressing the actual content and questions of any of your replies, Amir. Would you please take the time and effort to do so?<br></p><p>--<br>Stephen<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>Proposal: An assignment operator := that ensures nil before assignment.</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>February 27, 2016 at 11:00:00pm</p></header><div class="content"><p>Additionally, the study that Microsoft does is about making sure a variable is != null as a precondition.<br></p><p>The vast majority of defects in Java is due to an operation on a variable that was unexpectedly found to be null when it should be a value.  <br></p><p>Because of the hole in the type system you can get runtime exceptions stating that there was a “Null Exception” <br></p><p>As such the precondition would be ensure it is not null — not the opposite.<br></p><p>As a mentioned early by numerous people using Swifts type system ensures that this cannot be the case.<br></p><p>For example <br></p><p>var x : Int = 0<br></p><p>would make sure x is never an unexpected “Null value”<br></p><p>And <br></p><p>var x : Int? <br></p><p>You would not be using it with operations directly since it would give a compilation error if you did so.<br></p><p>As such the problem of the “Null Exception” was handled through optionals in the type system and not through scattering preconditions checking for unexpected null values.<br></p><p>A much better solution to the problem.<br></p><p>&gt; On 2016-02-27, at 23:30:55, Stephen Celis &lt;stephen.celis at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Feb 27, 2016, at 11:28 AM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; It’s a convenience feature that saves lots of finger typing.<br>&gt;&gt; <br>&gt;&gt; Which would you rather have:<br>&gt;&gt; <br>&gt;&gt; precondition( x == nil )<br>&gt;&gt; x = 3<br>&gt;&gt; <br>&gt;&gt; OR<br>&gt;&gt; <br>&gt;&gt; x: = 3<br>&gt;&gt; <br>&gt;&gt; ?<br>&gt; <br>&gt; A bunch of us have tried to point out that toy examples like these are not helpful enough.<br>&gt; <br>&gt; You&#39;re not addressing the actual content and questions of any of your replies, Amir. Would you please take the time and effort to do so?<br>&gt; <br>&gt; --<br>&gt; Stephen<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: An assignment operator := that ensures nil before assignment.</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>February 27, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Feb 27, 2016, at 11:30 AM, Stephen Celis &lt;stephen.celis at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Feb 27, 2016, at 11:28 AM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; It’s a convenience feature that saves lots of finger typing.<br>&gt;&gt; <br>&gt;&gt; Which would you rather have:<br>&gt;&gt; <br>&gt;&gt; precondition( x == nil )<br>&gt;&gt; x = 3<br>&gt;&gt; <br>&gt;&gt; OR<br>&gt;&gt; <br>&gt;&gt; x: = 3<br>&gt;&gt; <br>&gt;&gt; ?<br>&gt; <br>&gt; A bunch of us have tried to point out that toy examples like these are not helpful enough.<br>&gt; <br></p><p>Here’s a use case. Suppose you are filling out a dictionary in some non-trivial way. However, it should be the case that the value for each key is computed and assigned only once. And so you would use the := operator to ensure this: dictionary[k] := value<br></p><p>&gt; You&#39;re not addressing the actual content and questions of any of your replies, Amir. Would you please take the time and effort to do so?<br>&gt; <br>&gt; --<br>&gt; Stephen<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>Proposal: An assignment operator := that ensures nil before assignment.</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>February 27, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On 27 Feb 2016, at 18:02, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt; <br>&gt; Here’s a use case. Suppose you are filling out a dictionary in some non-trivial way. However, it should be the case that the value for each key is computed and assigned only once. And so you would use the := operator to ensure this: dictionary[k] := value<br></p><p>No, you would define an extension method for the Dictionary that does exactly this.<br></p><p>The issue I have with your proposal is that it suggests to introduce a new privileged syntax (a very unfortunate one at that)  for doing a very niche operation.  If you need this construct: define it in your code. If you think it is generally useful: suggest it as an extension to the standard library. However, I at least see no reason why this should be a primary privileged operation in the language grammar itself. <br></p><p>— Taras<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160227/480e6eeb/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Proposal: An assignment operator := that ensures nil before assignment.</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February 27, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; Here’s a use case. Suppose you are filling out a dictionary in some non-trivial way. However, it should be the case that the value for each key is computed and assigned only once. And so you would use the := operator to ensure this: dictionary[k] := value<br></p><p>This is actually a great use case, and it&#39;s exactly the kind of thing you should mention when you suggest a change to Swift.<br></p><p>However, I think that specific use case is better served by a method on Dictionary. Perhaps something equivalent to:<br></p><p>	mutating func initializeValue(value: Value, forKey key: Key) {<br>		let oldValue = updateValue(value, forKey: key)<br>		precondition(oldValue == nil, &quot;Initialized \(key) when it was already set&quot;)<br>	}<br></p><p>Why do I think this approach is better?<br></p><p>* `:=` doesn&#39;t really explain what it does—if you&#39;ve never seen the operator before, the most you can be sure of is that it&#39;s probably some kind of assignment. `initializeValue(_:forKey:)` *does* explain the intended semantic—this should set a value for the first time—which suggests that it shouldn&#39;t be used with a value that&#39;s already set.<br></p><p>* I would need to see compelling examples of `:=` used outside of Dictionaries before I thought it would be useful as something applied to any lvalue. Dictionary is an unusual case because they have a dynamically-determined set of keys which are created simply by assigning them, so it&#39;s reasonable to not know whether a particular key is `nil` or not. Swift variables and properties, and most Swift collections, separate adding a value from updating it, so they may not need an analogous operation.<br></p><p>* By putting the precondition inside `initializeValue(_:forKey:)` itself, the error message can actually include the key, which may aid in debugging.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>Proposal: An assignment operator := that ensures nil before assignment.</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>February 28, 2016 at 01:00:00pm</p></header><div class="content"><p>Sorry -1 from me. Not worth adding. Too few use cases.<br></p><p>On Sunday, 28 February 2016, Brent Royal-Gordon via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt; Here’s a use case. Suppose you are filling out a dictionary in some<br>&gt; non-trivial way. However, it should be the case that the value for each key<br>&gt; is computed and assigned only once. And so you would use the := operator to<br>&gt; ensure this: dictionary[k] := value<br>&gt;<br>&gt; This is actually a great use case, and it&#39;s exactly the kind of thing you<br>&gt; should mention when you suggest a change to Swift.<br>&gt;<br>&gt; However, I think that specific use case is better served by a method on<br>&gt; Dictionary. Perhaps something equivalent to:<br>&gt;<br>&gt;         mutating func initializeValue(value: Value, forKey key: Key) {<br>&gt;                 let oldValue = updateValue(value, forKey: key)<br>&gt;                 precondition(oldValue == nil, &quot;Initialized \(key) when it<br>&gt; was already set&quot;)<br>&gt;         }<br>&gt;<br>&gt; Why do I think this approach is better?<br>&gt;<br>&gt; * `:=` doesn&#39;t really explain what it does—if you&#39;ve never seen the<br>&gt; operator before, the most you can be sure of is that it&#39;s probably some<br>&gt; kind of assignment. `initializeValue(_:forKey:)` *does* explain the<br>&gt; intended semantic—this should set a value for the first time—which suggests<br>&gt; that it shouldn&#39;t be used with a value that&#39;s already set.<br>&gt;<br>&gt; * I would need to see compelling examples of `:=` used outside of<br>&gt; Dictionaries before I thought it would be useful as something applied to<br>&gt; any lvalue. Dictionary is an unusual case because they have a<br>&gt; dynamically-determined set of keys which are created simply by assigning<br>&gt; them, so it&#39;s reasonable to not know whether a particular key is `nil` or<br>&gt; not. Swift variables and properties, and most Swift collections, separate<br>&gt; adding a value from updating it, so they may not need an analogous<br>&gt; operation.<br>&gt;<br>&gt; * By putting the precondition inside `initializeValue(_:forKey:)` itself,<br>&gt; the error message can actually include the key, which may aid in debugging.<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p><br>-- <br>-- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160228/42850bff/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>Proposal: An assignment operator := that ensures nil before assignment.</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>February 27, 2016 at 10:00:00pm</p></header><div class="content"><p>I would have to give this a -1 as well.<br></p><p>On the bright side, I think this does what you are attempting to do, albeit with a different operator to work within the bounds swift gives for custom operators. I chose to use exclamation marks to highlight the failure condition will crash the application.<br></p><p>infix operator !!= {associativity right precedence 90 }<br></p><p>func !!=&lt;T&gt;(inout lhs:T?, rhs:T) {<br>  precondition(lhs == nil)<br>  lhs = rhs<br>}<br></p><p>// Testing<br>var a:Int? = nil<br>var b:Int? = 1<br></p><p>a !!= 2 // 2<br>b !!= 2 // EXC_BAD_INSTRUCTION<br></p><p>-DW<br></p><p>&gt; On Feb 27, 2016, at 7:58 PM, Howard Lovatt via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Sorry -1 from me. Not worth adding. Too few use cases. <br>&gt; <br>&gt; On Sunday, 28 February 2016, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt; Here’s a use case. Suppose you are filling out a dictionary in some non-trivial way. However, it should be the case that the value for each key is computed and assigned only once. And so you would use the := operator to ensure this: dictionary[k] := value<br>&gt; <br>&gt; This is actually a great use case, and it&#39;s exactly the kind of thing you should mention when you suggest a change to Swift.<br>&gt; <br>&gt; However, I think that specific use case is better served by a method on Dictionary. Perhaps something equivalent to:<br>&gt; <br>&gt;         mutating func initializeValue(value: Value, forKey key: Key) {<br>&gt;                 let oldValue = updateValue(value, forKey: key)<br>&gt;                 precondition(oldValue == nil, &quot;Initialized \(key) when it was already set&quot;)<br>&gt;         }<br>&gt; <br>&gt; Why do I think this approach is better?<br>&gt; <br>&gt; * `:=` doesn&#39;t really explain what it does—if you&#39;ve never seen the operator before, the most you can be sure of is that it&#39;s probably some kind of assignment. `initializeValue(_:forKey:)` *does* explain the intended semantic—this should set a value for the first time—which suggests that it shouldn&#39;t be used with a value that&#39;s already set.<br>&gt; <br>&gt; * I would need to see compelling examples of `:=` used outside of Dictionaries before I thought it would be useful as something applied to any lvalue. Dictionary is an unusual case because they have a dynamically-determined set of keys which are created simply by assigning them, so it&#39;s reasonable to not know whether a particular key is `nil` or not. Swift variables and properties, and most Swift collections, separate adding a value from updating it, so they may not need an analogous operation.<br>&gt; <br>&gt; * By putting the precondition inside `initializeValue(_:forKey:)` itself, the error message can actually include the key, which may aid in debugging.<br>&gt; <br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; -- <br>&gt; -- Howard.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160227/fdd1e1f3/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f822334c2f6ebeafd3a41cd44c82a62b?s=50"></div><header><strong>Proposal: An assignment operator := that ensures nil before assignment.</strong> from <string>Andrey Tarantsov</string> &lt;andrey at tarantsov.com&gt;<p>March  2, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; Here’s a use case. Suppose you are filling out a dictionary in some<br>&gt; non-trivial way. However, it should be the case that the value for<br>&gt; each key is computed and assigned only once. And so you would use the<br>&gt; := operator to ensure this: dictionary[k] := value<br></p><p>Awesome; like others have said, this is the sort of thing you should<br>start the thread with. It&#39;s still not specific enough, though, so in<br>that first email you should go deeper and explain:<br></p><p>1) how often does your code do something like that?<br></p><p>2) *why* do you do that? i.e. what&#39;s the higher-level problem you&#39;re<br>   solving by initializing a dictionary like that?<br></p><p>I&#39;ve been writing software for over 15 years, with half of that on Apple<br>platforms, and I don&#39;t think I did an initialization like that more than<br>a few times (in fact, I&#39;m not sure I *ever* did it).<br></p><p>So when you write:<br></p><p>&gt; I think this := would be used so often that it should be part of the<br>&gt; language/standard library I think this := would be used so often that<br>&gt; it should be part of the language/standard library I think this :=<br>&gt; would be used so often that it should be part of the<br>&gt; language/standard library<br>I think this := would be used so often that it should be part of the<br>language/standard library I think this := would be used so often that it<br>should be part of the language/standard library<br>&gt; I think this := would be used so often that it should be part of the<br>&gt; language/standard library<br></p><p>it really feels like trolling. :-)<br></p><p>Please, in the future, provide snippets of real code from your apps (and<br>preferably more than one) when starting a discussion.<br></p><p>Needless to say, strong -1 for this particular proposal — even if we<br>replaced := with something more appropriate (even a method), I don&#39;t<br>believe the use case is common enough to warrant inclusion into the<br>standard library.<br></p><p>A.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160302/e18cfc0c/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>Proposal: An assignment operator := that ensures nil before assignment.</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>February 27, 2016 at 11:00:00pm</p></header><div class="content"><p>I am confused.  This is a magical operator that does two things…. if it is a very special case of nil before then it asserts - but if it does not it assigns?<br></p><p>I would think you would simply do an assert (condition) and potentially an error text.  <br></p><p>nil / nul exceptions (java experience) makes up more than 50% of defects (due to the original lack of optionals), but the that is what the optional in Swift is suppose to take care of through a the type system.  <br></p><p>nil is actually not “nil” in the traditional sense but “None” as in the optional of it.  <br></p><p><br></p><p><br>&gt; On 2016-02-27, at 23:10:37, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Feb 27, 2016, at 11:07 AM, Stephen Celis &lt;stephen.celis at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 27, 2016, at 10:57 AM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 27, 2016, at 10:39 AM, Stephen Celis &lt;stephen.celis at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Feb 27, 2016, at 10:38 AM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I think this := would be used so often that it should be part of the language/standard library.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Would you please justify this? Would you please answer the questions from my reply?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; See: http://research.microsoft.com/apps/pubs/default.aspx?id=70290<br>&gt;&gt; <br>&gt;&gt; See what part? This document provides no justification for any kind of assignment/assertion operator. Please provide additional context around links you share and how they relate to your actual proposal.<br>&gt; <br>&gt; The justification for assertions in general is empirical and the Microsoft paper provides it.<br>&gt; <br>&gt; To explore how useful := assertions are in particular would need a study like the Microsoft one that focuses exclusively on := assertions.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; In this case your proposal still needs justification. Would you, again, please answer these questions to provide it?<br>&gt;&gt; <br>&gt;&gt; - Why do you want this feature?<br>&gt;&gt; <br>&gt;&gt; - Would you please provide a better, real-world example (perhaps code extracted from a real-world project you&#39;ve worked on that would benefit) that demonstrates the benefits of your suggestion?<br>&gt;&gt; <br>&gt;&gt; - Can you go into more detail on the the design of the proposal? How it may be implemented? Caveats? Alternatives considered?<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Stephen<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160227/42331402/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>Proposal: An assignment operator := that ensures nil before assignment.</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 27, 2016 at 05:00:00pm</p></header><div class="content"><p>Expressing the constraint of “can’t be nil” is much better done via the type system, where the undesirable value is simply impossible. Instead of inducing crashes with innocently-looking special operator, just use a non-optional variable, and where you have to convert from an optional, unwrap it explicitly.<br></p><p>— Radek<br></p><p>&gt; On 27 Feb 2016, at 15:34, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Consider the use of “!” in the following:<br>&gt; <br>&gt; var x: Int? = 5<br>&gt; <br>&gt; x! = 2 // “!” is used to ensure non-nil value before assignment<br>&gt; <br>&gt; The idea is to have a similar method for ensuring a nil value.<br>&gt; <br>&gt; So instead of writing:<br>&gt; <br>&gt; precondition( x == nil )<br>&gt; x = 3<br>&gt; <br>&gt; You could write:<br>&gt; <br>&gt; x := 3<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: An assignment operator := that ensures nil before assignment.</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>February 27, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Feb 27, 2016, at 11:32 AM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt; <br>&gt; Expressing the constraint of “can’t be nil” is much better done via the type system, where the undesirable value is simply impossible. Instead of inducing crashes with innocently-looking special operator, just use a non-optional variable, and where you have to convert from an optional, unwrap it explicitly.<br>&gt; <br></p><p>The constraint actually is “has to be nil”.<br></p><p>&gt; — Radek<br>&gt; <br>&gt;&gt; On 27 Feb 2016, at 15:34, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Consider the use of “!” in the following:<br>&gt;&gt; <br>&gt;&gt; var x: Int? = 5<br>&gt;&gt; <br>&gt;&gt; x! = 2 // “!” is used to ensure non-nil value before assignment<br>&gt;&gt; <br>&gt;&gt; The idea is to have a similar method for ensuring a nil value.<br>&gt;&gt; <br>&gt;&gt; So instead of writing:<br>&gt;&gt; <br>&gt;&gt; precondition( x == nil )<br>&gt;&gt; x = 3<br>&gt;&gt; <br>&gt;&gt; You could write:<br>&gt;&gt; <br>&gt;&gt; x := 3<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>Proposal: An assignment operator := that ensures nil before assignment.</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 27, 2016 at 06:00:00pm</p></header><div class="content"><p>Apologies — I misunderstood.<br></p><p>In this case, like others, I would like to see a compelling snippet of code showing the use case for this. Without this context, I just don’t see why would you want to do it this way.<br></p><p>— Radek<br></p><p>&gt; On 27 Feb 2016, at 17:59, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 27, 2016, at 11:32 AM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Expressing the constraint of “can’t be nil” is much better done via the type system, where the undesirable value is simply impossible. Instead of inducing crashes with innocently-looking special operator, just use a non-optional variable, and where you have to convert from an optional, unwrap it explicitly.<br>&gt;&gt; <br>&gt; <br>&gt; The constraint actually is “has to be nil”.<br>&gt; <br>&gt;&gt; — Radek<br>&gt;&gt; <br>&gt;&gt;&gt; On 27 Feb 2016, at 15:34, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Consider the use of “!” in the following:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; var x: Int? = 5<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; x! = 2 // “!” is used to ensure non-nil value before assignment<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The idea is to have a similar method for ensuring a nil value.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So instead of writing:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; precondition( x == nil )<br>&gt;&gt;&gt; x = 3<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You could write:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; x := 3<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
