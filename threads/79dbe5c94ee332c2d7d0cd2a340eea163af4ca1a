<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3a6c94632d8c82a2f077bbabbdd412f6?s=50"></div><header><strong>Overload Resolution</strong> from <string>Toni Suter</string> &lt;tonisuter at me.com&gt;<p>October  6, 2016 at 01:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>Does someone know a good explanation / summary of Swift&#39;s overload resolution rules?<br>After reading https://github.com/apple/swift/blob/master/docs/TypeChecker.rst &lt;https://github.com/apple/swift/blob/master/docs/TypeChecker.rst&gt; I understand<br>that the overloading resolution happens as part of the constraint solving step in the type <br>checker, but maybe there&#39;s a document somewhere, that explains the rules in more detail?<br></p><p>Thanks and best regards,<br>Toni<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161006/79dbca1a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8e77369a540cf4d35924683e176c7a9c?s=50"></div><header><strong>Overload Resolution</strong> from <string>Mark Lacey</string> &lt;mark.lacey at apple.com&gt;<p>October  6, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; On Oct 6, 2016, at 4:53 AM, Toni Suter via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; Does someone know a good explanation / summary of Swift&#39;s overload resolution rules?<br>&gt; After reading https://github.com/apple/swift/blob/master/docs/TypeChecker.rst &lt;https://github.com/apple/swift/blob/master/docs/TypeChecker.rst&gt; I understand<br>&gt; that the overloading resolution happens as part of the constraint solving step in the type <br>&gt; checker, but maybe there&#39;s a document somewhere, that explains the rules in more detail?<br></p><p>I don’t know of any existing documentation for overload resolution. I was hoping to find some time to write something up in the next few months, but I’m not sure exactly when I might get to it.<br></p><p>In the meantime the best advice I can give is to dig into the code a bit to understand what’s going on. The type checker runs the constraint solver and collections all applicable solutions, and then compares these solutions to find a winner. That step is done in ConstraintSystem::findBestSolution() in CSRanking.cpp. That calls into ConstraintSystem::compareSolutions(), which is where most of the specific logic is. It checks overloads, and then checks the specific type bindings in each solution.<br></p><p>That code is reasonably well documented, so even without knowing a lot about the compiler internals I think it shouldn’t be too hard to follow.<br></p><p>Mark<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161006/7334e4f5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8e77369a540cf4d35924683e176c7a9c?s=50"></div><header><strong>Overload Resolution</strong> from <string>Mark Lacey</string> &lt;mark.lacey at apple.com&gt;<p>October  6, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; On Oct 6, 2016, at 7:31 AM, Mark Lacey &lt;mark.lacey at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Oct 6, 2016, at 4:53 AM, Toni Suter via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi,<br>&gt;&gt; <br>&gt;&gt; Does someone know a good explanation / summary of Swift&#39;s overload resolution rules?<br>&gt;&gt; After reading https://github.com/apple/swift/blob/master/docs/TypeChecker.rst &lt;https://github.com/apple/swift/blob/master/docs/TypeChecker.rst&gt; I understand<br>&gt;&gt; that the overloading resolution happens as part of the constraint solving step in the type <br>&gt;&gt; checker, but maybe there&#39;s a document somewhere, that explains the rules in more detail?<br>&gt; <br>&gt; I don’t know of any existing documentation for overload resolution. I was hoping to find some time to write something up in the next few months, but I’m not sure exactly when I might get to it.<br>&gt; <br>&gt; In the meantime the best advice I can give is to dig into the code a bit to understand what’s going on. The type checker runs the constraint solver and collections<br></p><p>^^^ collects<br></p><p>&gt; all applicable solutions, and then compares these solutions to find a winner. That step is done in ConstraintSystem::findBestSolution() in CSRanking.cpp. That calls into ConstraintSystem::compareSolutions(), which is where most of the specific logic is. It checks overloads, and then checks the specific type bindings in each solution.<br>&gt; <br>&gt; That code is reasonably well documented, so even without knowing a lot about the compiler internals I think it shouldn’t be too hard to follow.<br>&gt; <br>&gt; Mark<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161006/2c76afbf/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3a6c94632d8c82a2f077bbabbdd412f6?s=50"></div><header><strong>Overload Resolution</strong> from <string>Toni Suter</string> &lt;tonisuter at me.com&gt;<p>October  6, 2016 at 10:00:00pm</p></header><div class="content"><p>Hi Mark,<br></p><p>Thanks for pointing me into the right direction!<br></p><p>Best regards,<br>Toni<br></p><p>&gt; Am 06.10.2016 um 16:31 schrieb Mark Lacey &lt;mark.lacey at apple.com&gt;:<br>&gt; <br>&gt; <br>&gt;&gt; On Oct 6, 2016, at 4:53 AM, Toni Suter via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi,<br>&gt;&gt; <br>&gt;&gt; Does someone know a good explanation / summary of Swift&#39;s overload resolution rules?<br>&gt;&gt; After reading https://github.com/apple/swift/blob/master/docs/TypeChecker.rst &lt;https://github.com/apple/swift/blob/master/docs/TypeChecker.rst&gt; I understand<br>&gt;&gt; that the overloading resolution happens as part of the constraint solving step in the type <br>&gt;&gt; checker, but maybe there&#39;s a document somewhere, that explains the rules in more detail?<br>&gt; <br>&gt; I don’t know of any existing documentation for overload resolution. I was hoping to find some time to write something up in the next few months, but I’m not sure exactly when I might get to it.<br>&gt; <br>&gt; In the meantime the best advice I can give is to dig into the code a bit to understand what’s going on. The type checker runs the constraint solver and collections all applicable solutions, and then compares these solutions to find a winner. That step is done in ConstraintSystem::findBestSolution() in CSRanking.cpp. That calls into ConstraintSystem::compareSolutions(), which is where most of the specific logic is. It checks overloads, and then checks the specific type bindings in each solution.<br>&gt; <br>&gt; That code is reasonably well documented, so even without knowing a lot about the compiler internals I think it shouldn’t be too hard to follow.<br>&gt; <br>&gt; Mark<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161006/cab497bc/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
