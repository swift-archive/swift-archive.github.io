<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[DRAFT] Introducing a Debug Build Configuration Test</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March 14, 2016 at 12:00:00pm</p></header><div class="content"><p>https://gist.github.com/erica/d20639b409fe1b318c0e<br></p><p>Feedback solicited. Thanks, -- Erica<br></p><p>Introducing a Debug Build Configuration Test<br></p><p>Proposal: SE-00XX<br>Author(s): Erica Sadun &lt;http://github.com/erica&gt;<br>Status: TBD<br>Review manager: TBD<br> &lt;https://gist.github.com/erica/d20639b409fe1b318c0e#introduction&gt;Introduction<br></p><p>This proposal introduces a configuration test for debug builds.<br></p><p>This proposal was discussed on-list in the Introducing a Debug Build Configuration Test &lt;applewebdata://0C1DDEF4-7986-4D7B-B837-C0CAEB2B24C2&gt; thread.<br></p><p> &lt;https://gist.github.com/erica/d20639b409fe1b318c0e#motivation&gt;Motivation<br></p><p>Developers are used to including code specific to debug builds in their projects. Having a debug configuration test is an industry standard option. Under the current version of Swift you must add a command-line flag using -D &lt;#flag#&gt; (e.g. -D debug) and test in-code (#if debug), there&#39;s no consistent system-supplied way to differentiate code meant only for debug builds.<br></p><p> &lt;https://gist.github.com/erica/d20639b409fe1b318c0e#detail-design&gt;Detail Design<br></p><p>This proposal adds #if config(debug) to test for debug builds. <br></p><p>#if config(debug)<br>    // code for debug builds only<br>#endif<br> &lt;https://gist.github.com/erica/d20639b409fe1b318c0e#background&gt;Background<br></p><p>Joe Groff writes, &quot;We specifically avoided making debug/release an #if condition because we considered #if to be the wrong point at which to start conditionalizing code generation for assertions. Though the final executable image&#39;s behavior is unavoidably dependent on whether asserts are enabled, we didn&#39;t want the SIL for inlineable code to be, since that would mean libraries with inlineable code would need to ship three times the amount of serialized SIL to support the right behavior in -Onone, -O, and -Ounchecked builds. Instead, the standard library has some hidden helper functions, _isDebugAssertConfiguration, _isReleaseAssertConfiguration, and _isFastAssertConfiguration, which are guaranteed to be constant-folded away before final code generation.&quot; <br></p><p> &lt;https://gist.github.com/erica/d20639b409fe1b318c0e#current-art&gt;Current Art<br></p><p>Swift currently supports the following configuration tests:<br></p><p>The literals true and false<br>The os() function that tests for OSX, iOS, watchOS, tvOS, and Linux<br>The arch() function that tests for x86_64, arm, arm64, and i386<br>The swift() function that tests for specific Swift language releases, e.g. swift(&gt;=2.2)<br> &lt;https://gist.github.com/erica/d20639b409fe1b318c0e#alternatives-considered&gt;Alternatives Considered<br></p><p>There are no alternatives considered.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160314/76664d5f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[DRAFT] Introducing a Debug Build Configuration Test</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>March 14, 2016 at 01:00:00pm</p></header><div class="content"><p>On Mon, Mar 14, 2016 at 11:57 AM, Erica Sadun via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt; https://gist.github.com/erica/d20639b409fe1b318c0e<br>&gt;<br>&gt; Feedback solicited. Thanks, -- Erica<br>&gt;<br>&gt; Introducing a Debug Build Configuration Test<br>&gt;<br>&gt; Proposal: SE-00XX<br>&gt; Author(s): Erica Sadun<br>&gt; Status: TBD<br>&gt; Review manager: TBD<br>&gt;<br>&gt; Introduction<br>&gt;<br>&gt; This proposal introduces a configuration test for debug builds.<br>&gt;<br>&gt; This proposal was discussed on-list in the Introducing a Debug Build<br>&gt; Configuration Test thread.<br>&gt;<br>&gt; Motivation<br>&gt;<br>&gt; Developers are used to including code specific to debug builds in their<br>&gt; projects. Having a debug configuration test is an industry standard option.<br>&gt; Under the current version of Swift you must add a command-line flag using -D<br>&gt; &lt;#flag#&gt; (e.g. -D debug) and test in-code (#if debug), there&#39;s no consistent<br>&gt; system-supplied way to differentiate code meant only for debug builds.<br>&gt;<br>&gt; Detail Design<br>&gt;<br>&gt; This proposal adds #if config(debug) to test for debug builds.<br>&gt;<br>&gt; #if config(debug)<br>&gt;     // code for debug builds only<br>&gt; #endif<br></p><p>Hi Erica,<br></p><p>Based on Joe&#39;s rationale that you are quoting, I think the intent is<br>that we want to restrict this directive to be statement-level only.<br>The API vended by a module should not be affected by the build mode.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[DRAFT] Introducing a Debug Build Configuration Test</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March 15, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Mar 14, 2016, at 2:04 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; Hi Erica,<br>&gt; <br>&gt; Based on Joe&#39;s rationale that you are quoting, I think the intent is<br>&gt; that we want to restrict this directive to be statement-level only.<br>&gt; The API vended by a module should not be affected by the build mode.<br>&gt; <br>&gt; Dmitri<br></p><p><br>Could the debug build test take the form of a standard non-private function then<br>instead of _isDebugAssertConfiguration()? If the test is limited to methods, <br>introducing #if-style tests would be ugly.<br></p><p>How likely or easy is it for me to reframe the request for testing for debug to be as<br>simple as:<br></p><p>`if debugBuild() {...}`<br></p><p>with `debugBuild` vended by the standard library instead of as a build<br>configuration test?<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160315/b4cbf0a2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>[DRAFT] Introducing a Debug Build Configuration Test</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>March 15, 2016 at 04:00:00pm</p></header><div class="content"><p>You would likely want to ensure debug related code could be optimized away<br>/ or not be included in release builds. I am not sure how a function would<br>achieve that.<br>On Tue, Mar 15, 2016 at 9:15 AM Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt;<br>&gt; On Mar 14, 2016, at 2:04 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; Hi Erica,<br>&gt;<br>&gt; Based on Joe&#39;s rationale that you are quoting, I think the intent is<br>&gt; that we want to restrict this directive to be statement-level only.<br>&gt; The API vended by a module should not be affected by the build mode.<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt;<br>&gt;<br>&gt; Could the debug build test take the form of a standard non-private<br>&gt; function then<br>&gt; instead of _isDebugAssertConfiguration()? If the test is limited to<br>&gt; methods,<br>&gt; introducing #if-style tests would be ugly.<br>&gt;<br>&gt; How likely or easy is it for me to reframe the request for testing for<br>&gt; debug to be as<br>&gt; simple as:<br>&gt;<br>&gt; `if debugBuild() {...}`<br>&gt;<br>&gt; with `debugBuild` vended by the standard library instead of as a build<br>&gt; configuration test?<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160315/3a04cec0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[DRAFT] Introducing a Debug Build Configuration Test</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>March 15, 2016 at 09:00:00am</p></header><div class="content"><p>A function can absolutely can do that, if it is implemented using a<br>builtin known to the optimizer.<br></p><p>Dmitri<br></p><p>On Tue, Mar 15, 2016 at 9:20 AM, Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt; You would likely want to ensure debug related code could be optimized away /<br>&gt; or not be included in release builds. I am not sure how a function would<br>&gt; achieve that.<br>&gt; On Tue, Mar 15, 2016 at 9:15 AM Erica Sadun via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Mar 14, 2016, at 2:04 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt; Hi Erica,<br>&gt;&gt;<br>&gt;&gt; Based on Joe&#39;s rationale that you are quoting, I think the intent is<br>&gt;&gt; that we want to restrict this directive to be statement-level only.<br>&gt;&gt; The API vended by a module should not be affected by the build mode.<br>&gt;&gt;<br>&gt;&gt; Dmitri<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Could the debug build test take the form of a standard non-private<br>&gt;&gt; function then<br>&gt;&gt; instead of _isDebugAssertConfiguration()? If the test is limited to<br>&gt;&gt; methods,<br>&gt;&gt; introducing #if-style tests would be ugly.<br>&gt;&gt;<br>&gt;&gt; How likely or easy is it for me to reframe the request for testing for<br>&gt;&gt; debug to be as<br>&gt;&gt; simple as:<br>&gt;&gt;<br>&gt;&gt; `if debugBuild() {...}`<br>&gt;&gt;<br>&gt;&gt; with `debugBuild` vended by the standard library instead of as a build<br>&gt;&gt; configuration test?<br>&gt;&gt;<br>&gt;&gt; -- E<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>[DRAFT] Introducing a Debug Build Configuration Test</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>March 15, 2016 at 04:00:00pm</p></header><div class="content"><p>True. I was thinking to much in the content of the stdlib only but with a<br>builtin you can get things optimized away.<br></p><p>On Tue, Mar 15, 2016 at 9:22 AM Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br></p><p>&gt; A function can absolutely can do that, if it is implemented using a<br>&gt; builtin known to the optimizer.<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; On Tue, Mar 15, 2016 at 9:20 AM, Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt; &gt; You would likely want to ensure debug related code could be optimized<br>&gt; away /<br>&gt; &gt; or not be included in release builds. I am not sure how a function would<br>&gt; &gt; achieve that.<br>&gt; &gt; On Tue, Mar 15, 2016 at 9:15 AM Erica Sadun via swift-evolution<br>&gt; &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; On Mar 14, 2016, at 2:04 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br>&gt; wrote:<br>&gt; &gt;&gt; Hi Erica,<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Based on Joe&#39;s rationale that you are quoting, I think the intent is<br>&gt; &gt;&gt; that we want to restrict this directive to be statement-level only.<br>&gt; &gt;&gt; The API vended by a module should not be affected by the build mode.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Dmitri<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Could the debug build test take the form of a standard non-private<br>&gt; &gt;&gt; function then<br>&gt; &gt;&gt; instead of _isDebugAssertConfiguration()? If the test is limited to<br>&gt; &gt;&gt; methods,<br>&gt; &gt;&gt; introducing #if-style tests would be ugly.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; How likely or easy is it for me to reframe the request for testing for<br>&gt; &gt;&gt; debug to be as<br>&gt; &gt;&gt; simple as:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; `if debugBuild() {...}`<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; with `debugBuild` vended by the standard library instead of as a build<br>&gt; &gt;&gt; configuration test?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; -- E<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160315/c9610705/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[DRAFT] Introducing a Debug Build Configuration Test</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March 15, 2016 at 10:00:00am</p></header><div class="content"><p>I would like to update my draft proposal to introduce a test for debug configurations using a public function<br>rather than a build configuration test.<br></p><p>* Would the stdlib team be open to that? <br>* What would be an appropriate name?  `debugConfiguration`? `debugBuild`? `isDebugBuild`? `isDebugConfiguration`?<br></p><p>-- E<br></p><p><br>&gt; On Mar 15, 2016, at 10:21 AM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; A function can absolutely can do that, if it is implemented using a<br>&gt; builtin known to the optimizer.<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; On Tue, Mar 15, 2016 at 9:20 AM, Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt;&gt; You would likely want to ensure debug related code could be optimized away /<br>&gt;&gt; or not be included in release builds. I am not sure how a function would<br>&gt;&gt; achieve that.<br>&gt;&gt; On Tue, Mar 15, 2016 at 9:15 AM Erica Sadun via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Mar 14, 2016, at 2:04 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;&gt; Hi Erica,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Based on Joe&#39;s rationale that you are quoting, I think the intent is<br>&gt;&gt;&gt; that we want to restrict this directive to be statement-level only.<br>&gt;&gt;&gt; The API vended by a module should not be affected by the build mode.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Dmitri<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Could the debug build test take the form of a standard non-private<br>&gt;&gt;&gt; function then<br>&gt;&gt;&gt; instead of _isDebugAssertConfiguration()? If the test is limited to<br>&gt;&gt;&gt; methods,<br>&gt;&gt;&gt; introducing #if-style tests would be ugly.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How likely or easy is it for me to reframe the request for testing for<br>&gt;&gt;&gt; debug to be as<br>&gt;&gt;&gt; simple as:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; `if debugBuild() {...}`<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; with `debugBuild` vended by the standard library instead of as a build<br>&gt;&gt;&gt; configuration test?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- E<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[DRAFT] Introducing a Debug Build Configuration Test</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>March 15, 2016 at 09:00:00am</p></header><div class="content"><p>On Tue, Mar 15, 2016 at 9:31 AM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; I would like to update my draft proposal to introduce a test for debug configurations using a public function<br>&gt; rather than a build configuration test.<br>&gt;<br>&gt; * Would the stdlib team be open to that?<br></p><p>No objections from me.<br></p><p>&gt; * What would be an appropriate name?  `debugConfiguration`? `debugBuild`? `isDebugBuild`? `isDebugConfiguration`?<br></p><p>It seems like this API can be a property.  &quot;isDebug...&quot; is a good<br>start, but a debug what?  Build?  Build configuration?  I remember<br>Jordan was trying to rename the &quot;build configuration&quot; feature -- I<br>don&#39;t know where he arrived though.<br></p><p>OTOH, if you are willing to allow implementation complexity, you can<br>use &#39;#if&#39;-style conditional compilation, and allow arbitrary internal<br>and private APIs in the #if blocks.  Just as long as uses are guarded<br>with same, we should be fine.  I&#39;m not sure if we want that user<br>model, though.<br></p><p>Dmitri<br></p><p>&gt;<br>&gt; -- E<br>&gt;<br>&gt;<br>&gt;&gt; On Mar 15, 2016, at 10:21 AM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; A function can absolutely can do that, if it is implemented using a<br>&gt;&gt; builtin known to the optimizer.<br>&gt;&gt;<br>&gt;&gt; Dmitri<br>&gt;&gt;<br>&gt;&gt; On Tue, Mar 15, 2016 at 9:20 AM, Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt;&gt;&gt; You would likely want to ensure debug related code could be optimized away /<br>&gt;&gt;&gt; or not be included in release builds. I am not sure how a function would<br>&gt;&gt;&gt; achieve that.<br>&gt;&gt;&gt; On Tue, Mar 15, 2016 at 9:15 AM Erica Sadun via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Mar 14, 2016, at 2:04 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; Hi Erica,<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Based on Joe&#39;s rationale that you are quoting, I think the intent is<br>&gt;&gt;&gt;&gt; that we want to restrict this directive to be statement-level only.<br>&gt;&gt;&gt;&gt; The API vended by a module should not be affected by the build mode.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Dmitri<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Could the debug build test take the form of a standard non-private<br>&gt;&gt;&gt;&gt; function then<br>&gt;&gt;&gt;&gt; instead of _isDebugAssertConfiguration()? If the test is limited to<br>&gt;&gt;&gt;&gt; methods,<br>&gt;&gt;&gt;&gt; introducing #if-style tests would be ugly.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; How likely or easy is it for me to reframe the request for testing for<br>&gt;&gt;&gt;&gt; debug to be as<br>&gt;&gt;&gt;&gt; simple as:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; `if debugBuild() {...}`<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; with `debugBuild` vended by the standard library instead of as a build<br>&gt;&gt;&gt;&gt; configuration test?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; -- E<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br></p><p><br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[DRAFT] Introducing a Debug Build Configuration Test</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>March 17, 2016 at 02:00:00am</p></header><div class="content"><p>&gt; I would like to update my draft proposal to introduce a test for debug configurations using a public function<br>&gt; rather than a build configuration test.<br>&gt; <br>&gt; * Would the stdlib team be open to that? <br>&gt; * What would be an appropriate name?  `debugConfiguration`? `debugBuild`? `isDebugBuild`? `isDebugConfiguration`?<br></p><p>I have a suggestion:<br></p><p>	if #isDebugBuild {<br>		...<br>	}<br></p><p>That would allow you to capture a caller&#39;s debug setting, just as you can capture their file and line number:<br></p><p>	class Logger {<br>		enum LogLevel {<br>			case fatal, error, warn, info, debug, trace, off<br>		}<br>		<br>		init(logLevel: LogLevel) {<br>			...<br>		}<br>		<br>		convenience init(debug: Bool = #isDebugBuild) {<br>			self.init(logLevel: debug ? .debug : .warn)<br>		}<br>		<br>		...<br>	}<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[DRAFT] Introducing a Debug Build Configuration Test</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March 15, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Mar 14, 2016, at 1:04 PM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Mon, Mar 14, 2016 at 11:57 AM, Erica Sadun via swift-evolution<br>&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; https://gist.github.com/erica/d20639b409fe1b318c0e<br>&gt;&gt; <br>&gt;&gt; Feedback solicited. Thanks, -- Erica<br>&gt;&gt; <br>&gt;&gt; Introducing a Debug Build Configuration Test<br>&gt;&gt; <br>&gt;&gt; Proposal: SE-00XX<br>&gt;&gt; Author(s): Erica Sadun<br>&gt;&gt; Status: TBD<br>&gt;&gt; Review manager: TBD<br>&gt;&gt; <br>&gt;&gt; Introduction<br>&gt;&gt; <br>&gt;&gt; This proposal introduces a configuration test for debug builds.<br>&gt;&gt; <br>&gt;&gt; This proposal was discussed on-list in the Introducing a Debug Build<br>&gt;&gt; Configuration Test thread.<br>&gt;&gt; <br>&gt;&gt; Motivation<br>&gt;&gt; <br>&gt;&gt; Developers are used to including code specific to debug builds in their<br>&gt;&gt; projects. Having a debug configuration test is an industry standard option.<br>&gt;&gt; Under the current version of Swift you must add a command-line flag using -D<br>&gt;&gt; &lt;#flag#&gt; (e.g. -D debug) and test in-code (#if debug), there&#39;s no consistent<br>&gt;&gt; system-supplied way to differentiate code meant only for debug builds.<br>&gt;&gt; <br>&gt;&gt; Detail Design<br>&gt;&gt; <br>&gt;&gt; This proposal adds #if config(debug) to test for debug builds.<br>&gt;&gt; <br>&gt;&gt; #if config(debug)<br>&gt;&gt;    // code for debug builds only<br>&gt;&gt; #endif<br>&gt; <br>&gt; Hi Erica,<br>&gt; <br>&gt; Based on Joe&#39;s rationale that you are quoting, I think the intent is<br>&gt; that we want to restrict this directive to be statement-level only.<br>&gt; The API vended by a module should not be affected by the build mode.<br></p><p>I think the right thing here would be (in a separate proposal) to introduce an expression-level test for build configurations, so you could say something like this:<br></p><p>func assertIf64Bit(condition: @autoclosure () -&gt; Bool) {<br>  if #condition(config(debug) &amp;&amp; bits(64)) &amp;&amp; condition() {<br>    fatalError(&quot;64-bit assertion failed&quot;)<br>  }<br>}<br></p><p>and the #-expression would be lowered to a SIL intrinsic that gets guaranteed-optimized like our _is*Configuration hacks do today. That would allow for platform-dependent code that doesn&#39;t depend on platform-dependent declarations to still be type-checked and diagnosed, and share build products up to the SIL optimization stage of the pipeline. If we have that then our original objection to config(debug) goes away.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160315/9446a9d8/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[DRAFT] Introducing a Debug Build Configuration Test</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>March 15, 2016 at 10:00:00am</p></header><div class="content"><p>What is a &quot;debug build&quot;? Is it one where testing is enabled? Where the optimization level is -Onone? (We&#39;ve talked about having an -Odebug and/or -Oplayground at some point. Are those &quot;debug builds&quot;?) Is it one where asserts are not removed? (This can technically be controlled independently of -O, but we don&#39;t advertise the fact, and I&#39;m not sure we even want that feature.)<br></p><p>Also, what is &quot;config&quot;? It doesn&#39;t mean anything to me on its own, which means I wouldn&#39;t know what else I can put besides &quot;debug&quot;.<br></p><p>Jordan<br></p><p><br>&gt; On Mar 14, 2016, at 11:57 , Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; https://gist.github.com/erica/d20639b409fe1b318c0e &lt;https://gist.github.com/erica/d20639b409fe1b318c0e&gt;<br>&gt; <br>&gt; Feedback solicited. Thanks, -- Erica<br>&gt; <br>&gt; Introducing a Debug Build Configuration Test<br>&gt; <br>&gt; Proposal: SE-00XX<br>&gt; Author(s): Erica Sadun &lt;http://github.com/erica&gt;<br>&gt; Status: TBD<br>&gt; Review manager: TBD<br>&gt;  &lt;https://gist.github.com/erica/d20639b409fe1b318c0e#introduction&gt;Introduction<br>&gt; <br>&gt; This proposal introduces a configuration test for debug builds.<br>&gt; <br>&gt; This proposal was discussed on-list in the Introducing a Debug Build Configuration Test &lt;applewebdata://FB8B7ABA-BA05-4EF3-A260-C9959FBA2814&gt; thread.<br>&gt; <br>&gt;  &lt;https://gist.github.com/erica/d20639b409fe1b318c0e#motivation&gt;Motivation<br>&gt; <br>&gt; Developers are used to including code specific to debug builds in their projects. Having a debug configuration test is an industry standard option. Under the current version of Swift you must add a command-line flag using -D &lt;#flag#&gt; (e.g. -D debug) and test in-code (#if debug), there&#39;s no consistent system-supplied way to differentiate code meant only for debug builds.<br>&gt; <br>&gt;  &lt;https://gist.github.com/erica/d20639b409fe1b318c0e#detail-design&gt;Detail Design<br>&gt; <br>&gt; This proposal adds #if config(debug) to test for debug builds. <br>&gt; <br>&gt; #if config(debug)<br>&gt;     // code for debug builds only<br>&gt; #endif<br>&gt;  &lt;https://gist.github.com/erica/d20639b409fe1b318c0e#background&gt;Background<br>&gt; <br>&gt; Joe Groff writes, &quot;We specifically avoided making debug/release an #if condition because we considered #if to be the wrong point at which to start conditionalizing code generation for assertions. Though the final executable image&#39;s behavior is unavoidably dependent on whether asserts are enabled, we didn&#39;t want the SIL for inlineable code to be, since that would mean libraries with inlineable code would need to ship three times the amount of serialized SIL to support the right behavior in -Onone, -O, and -Ounchecked builds. Instead, the standard library has some hidden helper functions, _isDebugAssertConfiguration, _isReleaseAssertConfiguration, and _isFastAssertConfiguration, which are guaranteed to be constant-folded away before final code generation.&quot; <br>&gt; <br>&gt;  &lt;https://gist.github.com/erica/d20639b409fe1b318c0e#current-art&gt;Current Art<br>&gt; <br>&gt; Swift currently supports the following configuration tests:<br>&gt; <br>&gt; The literals true and false<br>&gt; The os() function that tests for OSX, iOS, watchOS, tvOS, and Linux<br>&gt; The arch() function that tests for x86_64, arm, arm64, and i386<br>&gt; The swift() function that tests for specific Swift language releases, e.g. swift(&gt;=2.2)<br>&gt;  &lt;https://gist.github.com/erica/d20639b409fe1b318c0e#alternatives-considered&gt;Alternatives Considered<br>&gt; <br>&gt; There are no alternatives considered.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160315/6ddceb8d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[DRAFT] Introducing a Debug Build Configuration Test</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March 15, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Mar 15, 2016, at 11:28 AM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; What is a &quot;debug build&quot;? Is it one where testing is enabled? Where the optimization level is -Onone? (We&#39;ve talked about having an -Odebug and/or -Oplayground at some point. Are those &quot;debug builds&quot;?) Is it one where asserts are not removed? (This can technically be controlled independently of -O, but we don&#39;t advertise the fact, and I&#39;m not sure we even want that feature.)<br>&gt; <br>&gt; Also, what is &quot;config&quot;? It doesn&#39;t mean anything to me on its own, which means I wouldn&#39;t know what else I can put besides &quot;debug&quot;.<br>&gt; <br>&gt; Jordan<br>&gt; <br></p><p>Figuring out what debug *means* is an important first step. To &quot;my people&quot;, it&#39;s the Xcode Build Configuration &gt; Debug scheme setting. For language purposes, the only definition I can come up with at the moment is that debug is what happens when asserts can fire and are not disabled by compile-time optimizations.<br></p><p>Is there a better definition?<br></p><p>-- E<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
